diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 239ca29c..9462ba5e 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -839,8 +839,8 @@ private ColumnFamily getTopLevelColumns(QueryFilter filter, int gcBefore)
     private boolean getRangeRows(List<Row> rows, byte[] superColumn, final AbstractBounds range, int maxResults, SliceRange sliceRange, List<byte[]> columnNames)
     throws ExecutionException, InterruptedException
     {
-        final DecoratedKey startWith = new DecoratedKey(range.left, null);
-        final DecoratedKey stopAt = new DecoratedKey(range.right, null);
+        final DecoratedKey startWith = new DecoratedKey(range.left, (byte[])null);
+        final DecoratedKey stopAt = new DecoratedKey(range.right, (byte[])null);
         
         final int gcBefore = CompactionManager.getDefaultGCBefore();
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/DecoratedKey.java b/cassandra/trunk/src/java/org/apache/cassandra/db/DecoratedKey.java
index d513ab94..65067bf3 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/DecoratedKey.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/DecoratedKey.java
@@ -41,14 +41,8 @@
  */
 public class DecoratedKey<T extends Token> implements Comparable<DecoratedKey>
 {
-    private static DecoratedKeySerializer serializer = new DecoratedKeySerializer();
     private static IPartitioner partitioner = StorageService.getPartitioner();
 
-    public static DecoratedKeySerializer serializer()
-    {
-        return serializer;
-    }
-
     public static final Comparator<DecoratedKey> comparator = new Comparator<DecoratedKey>()
     {
         public int compare(DecoratedKey o1, DecoratedKey o2)
@@ -58,9 +52,18 @@ public int compare(DecoratedKey o1, DecoratedKey o2)
     };
 
     public final T token;
-    public final String key;
+    public final byte[] key;
 
+    @Deprecated
     public DecoratedKey(T token, String key)
+    {
+        super();
+        assert token != null;
+        this.token = token;
+        this.key = key == null ? null : key.getBytes(FBUtilities.UTF8);
+    }
+
+    public DecoratedKey(T token, byte[] key)
     {
         super();
         assert token != null;
@@ -101,20 +104,7 @@ public boolean isEmpty()
     @Override
     public String toString()
     {
-        return "DecoratedKey(" + token + ", " + key + ")";
-    }
-}
-
-class DecoratedKeySerializer implements ICompactSerializer2<DecoratedKey>
-{
-    public void serialize(DecoratedKey dk, DataOutput dos) throws IOException
-    {
-        Token.serializer().serialize(dk.token, dos);
-        FBUtilities.writeNullableString(dk.key, dos);
-    }
-
-    public DecoratedKey deserialize(DataInput dis) throws IOException
-    {
-        return new DecoratedKey(Token.serializer().deserialize(dis), FBUtilities.readNullableString(dis));
+        String keystring = key == null ? "null" : FBUtilities.bytesToHex(key);
+        return "DecoratedKey(" + token + ", " + keystring + ")";
     }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/RowIteratorFactory.java b/cassandra/trunk/src/java/org/apache/cassandra/db/RowIteratorFactory.java
index debacf88..698e7b1f 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/RowIteratorFactory.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/RowIteratorFactory.java
@@ -133,7 +133,8 @@ protected Row getReduced()
                 Comparator<IColumn> colComparator = QueryFilter.getColumnComparator(comparator);
                 Iterator<IColumn> colCollated = IteratorUtils.collatedIterator(colComparator, colIters);
 
-                ColumnFamily returnCF = current.getColumnFamily(key.key);
+                // FIXME: string keys
+                ColumnFamily returnCF = current.getColumnFamily(new String(key.key));
                 // TODO this is a little subtle: the Memtable ColumnIterator has to be a shallow clone of the source CF,
                 // with deletion times set correctly, so we can use it as the "base" CF to add query results to.
                 // (for sstable ColumnIterators we do not care if it is a shallow clone or not.)
@@ -149,7 +150,8 @@ protected Row getReduced()
                     returnCF = null;
                 }
 
-                Row rv = new Row(key.key, returnCF);
+                // FIXME: string keys
+                Row rv = new Row(new String(key.key), returnCF);
                 colIters.clear();
                 key = null;
                 return rv;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/dht/CollatingOrderPreservingPartitioner.java b/cassandra/trunk/src/java/org/apache/cassandra/dht/CollatingOrderPreservingPartitioner.java
index 05ac6696..a79e9b8b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/dht/CollatingOrderPreservingPartitioner.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/dht/CollatingOrderPreservingPartitioner.java
@@ -51,7 +51,8 @@
 
     public String convertToDiskFormat(DecoratedKey<BytesToken> key)
     {
-        return key.key;
+        // FIXME
+        return new String(key.key, FBUtilities.UTF8);
     }
 
     public BytesToken midpoint(BytesToken ltoken, BytesToken rtoken)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java b/cassandra/trunk/src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java
index 9f13b956..4ff9f247 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java
@@ -47,7 +47,8 @@
 
     public String convertToDiskFormat(DecoratedKey<StringToken> key)
     {
-        return key.key;
+        // FIXME
+        return new String(key.key, FBUtilities.UTF8);
     }
 
     public StringToken midpoint(StringToken ltoken, StringToken rtoken)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/dht/RandomPartitioner.java b/cassandra/trunk/src/java/org/apache/cassandra/dht/RandomPartitioner.java
index ebd0dfeb..060f221f 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/dht/RandomPartitioner.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/dht/RandomPartitioner.java
@@ -55,7 +55,8 @@
 
     public String convertToDiskFormat(DecoratedKey<BigIntegerToken> key)
     {
-        return key.token + DELIMITER + key.key;
+        // FIXME
+        return key.token + DELIMITER + new String(key.key, FBUtilities.UTF8);
     }
 
     public BigIntegerToken midpoint(BigIntegerToken ltoken, BigIntegerToken rtoken)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java b/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
index 62c0fb42..f6182644 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
@@ -443,7 +443,7 @@ public void add(CompactedRow row)
         {
             validated++;
             // MerkleTree uses XOR internally, so we want lots of output bits here
-            byte[] rowhash = FBUtilities.hash("SHA-256", row.key.key.getBytes(), row.buffer.getData());
+            byte[] rowhash = FBUtilities.hash("SHA-256", row.key.key, row.buffer.getData());
             return new MerkleTree.RowHash(row.key.token, rowhash);
         }
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/tools/SSTableExport.java b/cassandra/trunk/src/java/org/apache/cassandra/tools/SSTableExport.java
index 2db1b071..528d37a9 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/tools/SSTableExport.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/tools/SSTableExport.java
@@ -35,6 +35,7 @@
 import org.apache.cassandra.io.sstable.SSTableScanner;
 import org.apache.cassandra.io.util.BufferedRandomAccessFile;
 import org.apache.cassandra.service.StorageService;
+import org.apache.cassandra.utils.FBUtilities;
 
 import static org.apache.cassandra.utils.FBUtilities.bytesToHex;
 import org.apache.commons.cli.*;
@@ -80,6 +81,13 @@ private static String asKey(String val)
         return String.format("%s: ", quote(val));
     }
     
+    @Deprecated
+    private static String asStr(byte[] val)
+    {
+        // FIXME: should not interpret as a string
+        return new String(val, FBUtilities.UTF8);
+    }
+    
     private static String serializeColumns(Collection<IColumn> cols, AbstractType comp)
     {
         StringBuilder json = new StringBuilder("[");
@@ -110,7 +118,7 @@ private static String serializeRow(SSTableIdentityIterator row) throws IOExcepti
     {
         ColumnFamily cf = row.getColumnFamily();
         AbstractType comparator = cf.getComparator();
-        StringBuilder json = new StringBuilder(asKey(row.getKey().key));
+        StringBuilder json = new StringBuilder(asKey(asStr(row.getKey().key)));
         
         if (cf.isSuper())
         {
@@ -158,7 +166,7 @@ public static void enumeratekeys(String ssTableFile, PrintStream outs)
         {
             DecoratedKey decoratedKey = partitioner.convertFromDiskFormat(input.readUTF());
             long dataPosition = input.readLong();
-            outs.println(decoratedKey.key);
+            outs.println(asStr(decoratedKey.key));
         }
 
         outs.flush();
@@ -265,7 +273,7 @@ static void export(SSTableReader reader, PrintStream outs, String[] excludes) th
         while(scanner.hasNext())
         {
             SSTableIdentityIterator row = (SSTableIdentityIterator) scanner.next();
-            if (excludeSet.contains(row.getKey().key))
+            if (excludeSet.contains(asStr(row.getKey().key)))
                 continue;
             try
             {
@@ -278,12 +286,12 @@ static void export(SSTableReader reader, PrintStream outs, String[] excludes) th
             }
             catch (IOException ioexcep)
             {
-                System.err.println("WARNING: Corrupt row " + row.getKey().key + " (skipping).");
+                System.err.println("WARNING: Corrupt row " + asStr(row.getKey().key) + " (skipping).");
                 continue;
             }
             catch (OutOfMemoryError oom)
             {
-                System.err.println("ERROR: Out of memory deserializing row " + row.getKey().key);
+                System.err.println("ERROR: Out of memory deserializing row " + asStr(row.getKey().key));
                 continue;
             }
         }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/tools/SSTableImport.java b/cassandra/trunk/src/java/org/apache/cassandra/tools/SSTableImport.java
index 5be02bd6..a0aeec5a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/tools/SSTableImport.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/tools/SSTableImport.java
@@ -29,6 +29,7 @@
 import org.apache.cassandra.dht.IPartitioner;
 import org.apache.cassandra.io.util.DataOutputBuffer;
 import org.apache.cassandra.io.sstable.SSTableWriter;
+import org.apache.cassandra.utils.FBUtilities;
 import static org.apache.cassandra.utils.FBUtilities.hexToBytes;
 import org.apache.commons.cli.*;
 import org.json.simple.JSONArray;
@@ -75,6 +76,13 @@ private JsonColumn(Object obj) throws ClassCastException
         }
     }
 
+    @Deprecated
+    private static String asStr(byte[] val)
+    {
+        // FIXME: should not interpret as a string
+        return new String(val, FBUtilities.UTF8);
+    }
+    
     /**
      * Add columns to a column family.
      * 
@@ -151,9 +159,9 @@ public static void importJson(String jsonFile, String keyspace, String cf, Strin
             for (DecoratedKey<?> rowKey : decoratedKeys)
             {
                 if (cfType.equals("Super"))
-                    addToSuperCF((JSONObject)json.get(rowKey.key), cfamily);
+                    addToSuperCF((JSONObject)json.get(asStr(rowKey.key)), cfamily);
                 else
-                    addToStandardCF((JSONArray)json.get(rowKey.key), cfamily);
+                    addToStandardCF((JSONArray)json.get(asStr(rowKey.key)), cfamily);
                            
                 ColumnFamily.serializer().serializeWithIndexes(cfamily, dob);
                 writer.append(rowKey, dob);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java b/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
index 1f2e6da9..40d15b20 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
@@ -22,6 +22,7 @@
 import java.math.BigInteger;
 import java.net.InetAddress;
 import java.net.UnknownHostException;
+import java.nio.charset.Charset;
 import java.security.MessageDigest;
 import java.util.*;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -53,6 +54,19 @@
 
     private static volatile InetAddress localInetAddress_;
 
+    public static Charset UTF8;
+    static
+    {
+        try
+        {
+            UTF8 = Charset.forName("UTF-8");
+        }
+        catch (Exception e)
+        {
+            throw new RuntimeException(e);
+        }
+    }
+
     public static String[] strip(String string, String token)
     {
         StringTokenizer st = new StringTokenizer(string, token);
