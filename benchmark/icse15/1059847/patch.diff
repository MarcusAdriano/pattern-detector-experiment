diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java
index 2a8b86e6..142c7736 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java
@@ -18,7 +18,9 @@
 package org.apache.mahout.classifier;
 
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 import org.apache.commons.lang.StringUtils;
@@ -33,16 +35,11 @@
  */
 public class ConfusionMatrix implements Summarizable {
   
-  private final Collection<String> labels;
-  
-  private final Map<String,Integer> labelMap = new HashMap<String,Integer>();
-  
+  private final Map<String,Integer> labelMap = new LinkedHashMap<String,Integer>();
   private final int[][] confusionMatrix;
-  
   private String defaultLabel = "unknown";
   
   public ConfusionMatrix(Collection<String> labels, String defaultLabel) {
-    this.labels = labels;
     confusionMatrix = new int[labels.size() + 1][labels.size() + 1];
     this.defaultLabel = defaultLabel;
     for (String label : labels) {
@@ -56,14 +53,14 @@ public ConfusionMatrix(Collection<String> labels, String defaultLabel) {
   }
   
   public Collection<String> getLabels() {
-    return labels;
+    return Collections.unmodifiableCollection(labelMap.keySet());
   }
   
   public double getAccuracy(String label) {
     int labelId = labelMap.get(label);
     int labelTotal = 0;
     int correct = 0;
-    for (int i = 0; i < labels.size(); i++) {
+    for (int i = 0; i < labelMap.size(); i++) {
       labelTotal += confusionMatrix[labelId][i];
       if (i == labelId) {
         correct = confusionMatrix[labelId][i];
@@ -80,7 +77,7 @@ public int getCorrect(String label) {
   public double getTotal(String label) {
     int labelId = labelMap.get(label);
     int labelTotal = 0;
-    for (int i = 0; i < labels.size(); i++) {
+    for (int i = 0; i < labelMap.size(); i++) {
       labelTotal += confusionMatrix[labelId][i];
     }
     return labelTotal;
@@ -95,8 +92,8 @@ public void addInstance(String correctLabel, String classifiedLabel) {
   }
   
   public int getCount(String correctLabel, String classifiedLabel) {
-    Preconditions.checkArgument(!labels.contains(correctLabel)
-        || labels.contains(classifiedLabel)
+    Preconditions.checkArgument(!labelMap.containsKey(correctLabel)
+        || labelMap.containsKey(classifiedLabel)
         || defaultLabel.equals(classifiedLabel),
         "Label not found " + correctLabel + ' ' + classifiedLabel);
     int correctId = labelMap.get(correctLabel);
@@ -105,8 +102,8 @@ public int getCount(String correctLabel, String classifiedLabel) {
   }
   
   public void putCount(String correctLabel, String classifiedLabel, int count) {
-    Preconditions.checkArgument(!labels.contains(correctLabel)
-        || labels.contains(classifiedLabel)
+    Preconditions.checkArgument(!labelMap.containsKey(correctLabel)
+        || labelMap.containsKey(classifiedLabel)
         || defaultLabel.equals(classifiedLabel),
         "Label not found " + correctLabel + ' ' + classifiedLabel);
     int correctId = labelMap.get(correctLabel);
@@ -123,9 +120,9 @@ public void incrementCount(String correctLabel, String classifiedLabel) {
   }
   
   public ConfusionMatrix merge(ConfusionMatrix b) {
-    Preconditions.checkArgument(labels.size() == b.getLabels().size(), "The label sizes do not match");
-    for (String correctLabel : this.labels) {
-      for (String classifiedLabel : this.labels) {
+    Preconditions.checkArgument(labelMap.size() == b.getLabels().size(), "The label sizes do not match");
+    for (String correctLabel : this.labelMap.keySet()) {
+      for (String classifiedLabel : this.labelMap.keySet()) {
         incrementCount(correctLabel, classifiedLabel, b.getCount(correctLabel, classifiedLabel));
       }
     }
@@ -139,16 +136,15 @@ public String summarize() {
     returnString.append("Confusion Matrix\n");
     returnString.append("-------------------------------------------------------").append('\n');
     
-    for (String correctLabel : this.labels) {
-      returnString.append(StringUtils.rightPad(getSmallLabel(labelMap.get(correctLabel)), 5))
-          .append('\t');
+    for (String correctLabel : this.labelMap.keySet()) {
+      returnString.append(StringUtils.rightPad(getSmallLabel(labelMap.get(correctLabel)), 5)).append('\t');
     }
     
     returnString.append("<--Classified as").append('\n');
     
-    for (String correctLabel : this.labels) {
+    for (String correctLabel : this.labelMap.keySet()) {
       int labelTotal = 0;
-      for (String classifiedLabel : this.labels) {
+      for (String classifiedLabel : this.labelMap.keySet()) {
         returnString.append(
           StringUtils.rightPad(Integer.toString(getCount(correctLabel, classifiedLabel)), 5)).append('\t');
         labelTotal += getCount(correctLabel, classifiedLabel);
