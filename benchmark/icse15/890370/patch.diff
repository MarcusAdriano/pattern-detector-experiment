diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java
index 015d8129..c00c093e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java
@@ -1440,6 +1440,17 @@ private void countScanFlags()
 		}
 	}
 
+	/**
+     * Check if a node is representing a constant or a parameter.
+     *
+     * @param node the node to check
+     * @return {@code true} if the node is a constant or a parameter, {@code
+     * false} otherwise
+     */
+    private static boolean isConstantOrParameterNode(ValueNode node) {
+        return node instanceof ConstantNode || node instanceof ParameterNode;
+    }
+
 	/**
 	 * Push all predicates, which can be pushed, into the underlying select.
 	 * A predicate can be pushed into an underlying select if the source of 
@@ -1510,8 +1521,7 @@ void pushExpressionsIntoSelect(SelectNode select, boolean copyPredicate)
 					opNode = (BinaryRelationalOperatorNode) andNode.getLeftOperand();
 					// Investigate using invariant interface to check rightOperand
 					if (! (opNode.getLeftOperand() instanceof ColumnReference) ||
-					    ! (opNode.getRightOperand() instanceof ConstantNode ||
-							 opNode.getRightOperand() instanceof ParameterNode))
+						! isConstantOrParameterNode(opNode.getRightOperand()))
 						continue;
 
 					crNode = (ColumnReference) opNode.getLeftOperand();
@@ -2274,11 +2284,12 @@ else if (operator instanceof BinaryComparisonOperatorNode)
 				// RESOLVE: Consider using variant type of the expression, instead of
 				// ConstantNode or ParameterNode in the future.
 				if (left instanceof ColumnReference && 
-					  (right instanceof ConstantNode || right instanceof ParameterNode))
+						isConstantOrParameterNode(right))
 				{
 					searchClauses.addElement(predicate);
 				}
-				else if (left instanceof ConstantNode && right instanceof ColumnReference)
+				else if (isConstantOrParameterNode(left) &&
+						right instanceof ColumnReference)
 				{
 					// put the ColumnReference on the left to simplify things
 					andNode.setLeftOperand(bcon.getSwappedEquivalent());
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/PredicateTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/PredicateTest.java
index 47dcb0a4..323382d3 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/PredicateTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/PredicateTest.java
@@ -24,6 +24,7 @@
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.StringReader;
+import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;
@@ -98,6 +99,29 @@ public void testTransitiveClosureWithConstantsOnLeftSide()
 
         // Verify that we now have all the expected qualifiers.
         assertEquals(expectedOperators, extractOperators(getStatistics()));
+
+        // Now check that we get the same plan with parameters instead of
+        // constants on the right-hand side.
+
+        PreparedStatement paramRight = prepareStatement(
+                "select i from t1, t2 where " +
+                "t1.i = t2.j and t1.i >= ? and t2.j <= ?");
+        paramRight.setInt(1, 23);
+        paramRight.setInt(2, 30);
+
+        JDBC.assertSingleValueResultSet(paramRight.executeQuery(), "23");
+        assertEquals(expectedOperators, extractOperators(getStatistics()));
+
+        // Same plan expected with parameters on the left-hand side.
+
+        PreparedStatement paramLeft = prepareStatement(
+                "select i from t1, t2 where " +
+                "t1.i = t2.j and ? <= t1.i and ? >= t2.j");
+        paramLeft.setInt(1, 23);
+        paramLeft.setInt(2, 30);
+
+        JDBC.assertSingleValueResultSet(paramLeft.executeQuery(), "23");
+        assertEquals(expectedOperators, extractOperators(getStatistics()));
     }
 
     /**
