diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/CheckIndex.java b/lucene/java/trunk/src/java/org/apache/lucene/index/CheckIndex.java
index b3f86afb..4dea08f9 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/CheckIndex.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/CheckIndex.java
@@ -104,7 +104,6 @@ public static boolean check(Directory dir, boolean doFix, List onlySegments) thr
 
     String sFormat = "";
     boolean skip = false;
-    boolean allowMinusOnePosition = true;
 
     if (format == SegmentInfos.FORMAT)
       sFormat = "FORMAT [Lucene Pre-2.1]";
@@ -118,7 +117,6 @@ else if (format == SegmentInfos.FORMAT_SHARED_DOC_STORE)
       // LUCENE-1255: All versions before 2.3.2/2.4 were
       // able to create position=-1 when the very first
       // Token has positionIncrement 0
-      allowMinusOnePosition = false;
       if (format == SegmentInfos.FORMAT_CHECKSUM)
         sFormat = "FORMAT_CHECKSUM [Lucene 2.4]";
       else if (format == SegmentInfos.FORMAT_DEL_COUNT)
@@ -235,7 +233,7 @@ else if (format < SegmentInfos.CURRENT_FORMAT) {
             totPos += freq;
             for(int j=0;j<freq;j++) {
               final int pos = termPositions.nextPosition();
-              if (pos < -1 || (pos == -1 && !allowMinusOnePosition))
+              if (pos < -1)
                 throw new RuntimeException("term " + term + ": doc " + doc + ": pos " + pos + " is out of bounds");
               if (pos < lastPos)
                 throw new RuntimeException("term " + term + ": doc " + doc + ": pos " + pos + " < lastPos " + lastPos);
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/DocumentsWriterFieldData.java b/lucene/java/trunk/src/java/org/apache/lucene/index/DocumentsWriterFieldData.java
index a0849824..bfa0be01 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/DocumentsWriterFieldData.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/DocumentsWriterFieldData.java
@@ -243,9 +243,6 @@ public void invertField(Fieldable field, Analyzer analyzer, final int maxFieldLe
           Token token = stream.next(localToken);
           if (token == null) break;
           position += (token.getPositionIncrement() - 1);
-          // LUCENE-1255: don't allow negative position
-          if (position < 0)
-            position = 0;
           addPosition(token);
           if (++length >= maxFieldLength) {
             if (threadState.docWriter.infoStream != null)
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexWriter.java b/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexWriter.java
index db480335..229f6372 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexWriter.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexWriter.java
@@ -3596,7 +3596,7 @@ public void testNegativePositions() throws Throwable {
     TermPositions tps = s.getIndexReader().termPositions(new Term("field", "a"));
     assertTrue(tps.next());
     assertEquals(1, tps.freq());
-    assertEquals(0, tps.nextPosition());
+    assertEquals(-1, tps.nextPosition());
     w.close();
 
     assertTrue(_TestUtil.checkIndex(dir));
