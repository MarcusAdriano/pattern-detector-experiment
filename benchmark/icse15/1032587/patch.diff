diff --git a/incubator/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/AbstractIntegrationTest.java b/incubator/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/AbstractIntegrationTest.java
index 9c3edcc7..6a796eb4 100644
--- a/incubator/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/AbstractIntegrationTest.java
+++ b/incubator/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/AbstractIntegrationTest.java
@@ -169,6 +169,16 @@ public static URL getUrlToEba(String groupId, String artifactId) throws Malforme
     return urlToEba;
   }
 
+  public static URL getUrlToBundle(String groupId, String artifactId) throws MalformedURLException {
+	    String artifactVersion = getArtifactVersion(groupId, artifactId);
+
+	    // Need to use handler from org.ops4j.pax.url.mvn
+	    URL urlToEba = new URL(null,
+	        ServiceConstants.PROTOCOL + ":" + groupId + "/" +artifactId + "/"
+	            + artifactVersion, new Handler());
+	    return urlToEba;
+	  }
+
   public static String getArtifactVersion(final String groupId, final String artifactId)
   {
     final Properties dependencies = new Properties();
diff --git a/incubator/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/OBRResolverAdvancedTest.java b/incubator/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/OBRResolverAdvancedTest.java
index 0e1ec75c..060634a8 100644
--- a/incubator/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/OBRResolverAdvancedTest.java
+++ b/incubator/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/OBRResolverAdvancedTest.java
@@ -28,6 +28,8 @@
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.InputStreamReader;
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -395,8 +397,8 @@ public void testMutlipleServices() throws Exception{
     // "Only one service is provisioned even when specifying for mulitple services"
     // is fixed. This tracks the problem of provisioning only one service even when we 
     // specify multiple services.
-    /* 
-     * HelloWorldManager hwm = getOsgiService(HelloWorldManager.class);
+     
+     /** HelloWorldManager hwm = getOsgiService(HelloWorldManager.class);
      * int numberOfServices = hwm.getNumOfHelloServices();
      * assertEquals(2, numberOfServices); 
      */
@@ -423,9 +425,26 @@ public void testTwitter() throws Exception
     // version of the maven artifact.
     URL twitterEbaUrl = getUrlToEba("org.apache.aries.application.itest.twitter",
         "org.apache.aries.application.itest.twitter.eba");
+    URL twitterCommonLangJar_url = getUrlToBundle("commons-lang", "commons-lang");
+    URL twitterJar_url = getUrlToBundle("org.apache.aries.application", "twitter4j");
 
+    // add the repository xml to the repository admin
+    StringBuilder repositoryXML = new StringBuilder();
+    BufferedReader reader = new BufferedReader(new InputStreamReader(this.getClass().getResourceAsStream("/obr/twitter/TwitterRepository.xml")));
+    String line;
+    while ((line = reader.readLine()) != null) {
+      repositoryXML.append(line);
+      repositoryXML.append("\r\n");
+    }
+  //replace the jar file url with the real url related to the environment
+    String repo = repositoryXML.toString().replaceAll("commons.lang.location", twitterCommonLangJar_url.toExternalForm());
+    repo = repo.replaceAll("twitter4j.location", twitterJar_url.toExternalForm());
+    
+    FileWriter writer = new FileWriter("twitterRepo.xml");
+    writer.write(repo);
+    writer.close();
+    repositoryAdmin.addRepository(new File("twitterRepo.xml").toURI().toURL());
     AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
-    repositoryAdmin.addRepository("http://sigil.codecauldron.org/spring-external.obr");
     AriesApplication app = manager.createApplication(twitterEbaUrl);
     app = manager.resolve(app);
     DeploymentMetadata depMeta = app.getDeploymentMetadata();
@@ -434,13 +453,13 @@ public void testTwitter() throws Exception
     Collection<DeploymentContent> appContent = depMeta.getApplicationDeploymentContents();
     // We cannot be sure whether there are two or three provision bundles pulled in by Felix OBR as there is an outstanding defect
     // https://issues.apache.org/jira/browse/FELIX-2672
-    // The workaround is to check we get the two bunldes we are looking for, instead of insisting on just having two bundles.
+    // The workaround is to check we get the two bundles we are looking for, instead of insisting on just having two bundles.
     
     List<String> provisionBundleSymbolicNames = new ArrayList<String>();
     for (DeploymentContent dep : provision) {
        provisionBundleSymbolicNames.add(dep.getContentName());
     }
-    String provision_bundle1 = "com.springsource.org.apache.commons.lang";
+    String provision_bundle1 = "org.apache.commons.lang";
     String provision_bundle2 = "twitter4j";
     assertTrue("Bundle " + provision_bundle1 + " not found.", provisionBundleSymbolicNames.contains(provision_bundle1));
     assertTrue("Bundle " + provision_bundle2 + " not found.", provisionBundleSymbolicNames.contains(provision_bundle2));
@@ -512,7 +531,6 @@ public void clearRepository() {
         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"),
         mavenBundle("org.osgi", "org.osgi.compendium"),
         mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
-
         /* For debugging, uncomment the next two lines  */
         /*vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5010"),
         waitForFrameworkStartup(),  */
