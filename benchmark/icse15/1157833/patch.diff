diff --git a/lucene/dev/branches/blocktree_3030/lucene/src/java/org/apache/lucene/search/AutomatonQuery.java b/lucene/dev/branches/blocktree_3030/lucene/src/java/org/apache/lucene/search/AutomatonQuery.java
index 8b8758f3..82c450a4 100644
--- a/lucene/dev/branches/blocktree_3030/lucene/src/java/org/apache/lucene/search/AutomatonQuery.java
+++ b/lucene/dev/branches/blocktree_3030/lucene/src/java/org/apache/lucene/search/AutomatonQuery.java
@@ -28,7 +28,6 @@
 import org.apache.lucene.util.automaton.BasicAutomata;
 import org.apache.lucene.util.automaton.BasicOperations;
 import org.apache.lucene.util.automaton.CompiledAutomaton;
-import org.apache.lucene.util.automaton.MinimizationOperations;
 import org.apache.lucene.util.automaton.SpecialOperations;
 
 /**
@@ -41,7 +40,7 @@
  * the standard Lucene wildcard syntax with {@link WildcardQuery}.
  * </p>
  * <p>
- * When the query is executed, it will create an equivalent minimal DFA of the
+ * When the query is executed, it will create an equivalent DFA of the
  * finite-state machine, and will enumerate the term dictionary in an
  * intelligent way to reduce the number of comparisons. For example: the regular
  * expression of <code>[dl]og?</code> will make approximately four comparisons:
@@ -78,7 +77,6 @@ public AutomatonQuery(final Term term, Automaton automaton) {
     super(term.field());
     this.term = term;
     this.automaton = automaton;
-    MinimizationOperations.minimize(automaton);
     
     if (BasicOperations.isEmpty(automaton)) {
       // matches nothing
diff --git a/lucene/dev/branches/blocktree_3030/lucene/src/test/org/apache/lucene/index/TestTermsEnum2.java b/lucene/dev/branches/blocktree_3030/lucene/src/test/org/apache/lucene/index/TestTermsEnum2.java
index 83cbebd7..66123609 100644
--- a/lucene/dev/branches/blocktree_3030/lucene/src/test/org/apache/lucene/index/TestTermsEnum2.java
+++ b/lucene/dev/branches/blocktree_3030/lucene/src/test/org/apache/lucene/index/TestTermsEnum2.java
@@ -49,8 +49,6 @@
 import org.apache.lucene.util.automaton.RegExp;
 import org.apache.lucene.util.automaton.SpecialOperations;
 
-import org.junit.Ignore;
-
 public class TestTermsEnum2 extends LuceneTestCase {
   private Directory dir;
   private IndexReader reader;
@@ -97,8 +95,6 @@ public void tearDown() throws Exception {
   }
   
   /** tests a pre-intersected automaton against the original */
-  // nocommit -- OOME w/ ant test-core -Dtestcase=TestTermsEnum2 -Dtestmethod=testFiniteVersusInfinite -Dtests.seed=-2577608857970454726:-2463580050179334504
-  @Ignore
   public void testFiniteVersusInfinite() throws Exception {
     for (int i = 0; i < numIterations; i++) {
       String reg = AutomatonTestUtil.randomRegexp(random);
@@ -111,7 +107,7 @@ public void testFiniteVersusInfinite() throws Exception {
       }
 
       Automaton alternate = DaciukMihovAutomatonBuilder.build(matchedTerms);
-      //System.out.println("match " + matchedTerms.size() + " " + alternate.getNumberOfStates() + " states");
+      //System.out.println("match " + matchedTerms.size() + " " + alternate.getNumberOfStates() + " states, sigma=" + alternate.getStartPoints().length);
       //AutomatonTestUtil.minimizeSimple(alternate);
       //System.out.println("minmize done");
       AutomatonQuery a1 = new AutomatonQuery(new Term("field", ""), automaton);
diff --git a/lucene/dev/branches/blocktree_3030/lucene/src/test/org/apache/lucene/search/TestAutomatonQuery.java b/lucene/dev/branches/blocktree_3030/lucene/src/test/org/apache/lucene/search/TestAutomatonQuery.java
index 9b57fb64..ac3bf608 100644
--- a/lucene/dev/branches/blocktree_3030/lucene/src/test/org/apache/lucene/search/TestAutomatonQuery.java
+++ b/lucene/dev/branches/blocktree_3030/lucene/src/test/org/apache/lucene/search/TestAutomatonQuery.java
@@ -155,8 +155,6 @@ public void testEquals() {
     
     assertEquals(a1, a3);
     
-    assertEquals(a1.toString(), a3.toString());
-    
     // different class
     AutomatonQuery w1 = new WildcardQuery(newTerm("foobar"));
     // different class
