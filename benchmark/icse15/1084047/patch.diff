diff --git a/lucene/dev/branches/branch_3x/solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfiguration.java b/lucene/dev/branches/branch_3x/solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfiguration.java
index 20ff459d..32963a7f 100644
--- a/lucene/dev/branches/branch_3x/solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfiguration.java
+++ b/lucene/dev/branches/branch_3x/solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfiguration.java
@@ -35,11 +35,11 @@
 
   private String aePath;
 
-  private Map<String, String> runtimeParameters;
+  private Map<String, Object> runtimeParameters;
 
   public SolrUIMAConfiguration(String aePath, String[] fieldsToAnalyze, boolean fieldsMerging,
           Map<String, Map<String, String>> typesFeaturesFieldsMapping,
-          Map<String, String> runtimeParameters) {
+          Map<String, Object> runtimeParameters) {
     this.aePath = aePath;
     this.fieldsToAnalyze = fieldsToAnalyze;
     this.fieldsMerging = fieldsMerging;
@@ -63,7 +63,7 @@ public String getAePath() {
     return aePath;
   }
 
-  public Map<String, String> getRuntimeParameters() {
+  public Map<String, Object> getRuntimeParameters() {
     return runtimeParameters;
   }
 
diff --git a/lucene/dev/branches/branch_3x/solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader.java b/lucene/dev/branches/branch_3x/solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader.java
index 4ffeb83f..3f2b01d7 100644
--- a/lucene/dev/branches/branch_3x/solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader.java
+++ b/lucene/dev/branches/branch_3x/solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/SolrUIMAConfigurationReader.java
@@ -105,15 +105,15 @@ private boolean readFieldsMerging() {
     return map;
   }
 
-  private Map<String, String> readAEOverridingParameters() {
-    Map<String, String> runtimeParameters = new HashMap<String, String>();
+  private Map<String, Object> readAEOverridingParameters() {
+    Map<String, Object> runtimeParameters = new HashMap<String, Object>();
     Node uimaConfigNode = solrConfig.getNode(AE_RUNTIME_PARAMETERS_NODE_PATH, true);
 
     if (uimaConfigNode.hasChildNodes()) {
       NodeList overridingNodes = uimaConfigNode.getChildNodes();
       for (int i = 0; i < overridingNodes.getLength(); i++) {
         Node overridingNode = overridingNodes.item(i);
-        if (overridingNode.getNodeType() != Node.TEXT_NODE) {
+        if (overridingNode.getNodeType() != Node.TEXT_NODE && overridingNode.getNodeType() != Node.COMMENT_NODE) {
           runtimeParameters.put(overridingNode.getNodeName(), overridingNode.getTextContent());
         }
       }
diff --git a/lucene/dev/branches/branch_3x/solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/ae/AEProviderFactory.java b/lucene/dev/branches/branch_3x/solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/ae/AEProviderFactory.java
index 2104e753..bc5ad813 100644
--- a/lucene/dev/branches/branch_3x/solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/ae/AEProviderFactory.java
+++ b/lucene/dev/branches/branch_3x/solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/ae/AEProviderFactory.java
@@ -43,7 +43,7 @@ public static AEProviderFactory getInstance() {
   }
 
   public synchronized AEProvider getAEProvider(String core, String aePath,
-          Map<String, String> runtimeParameters) {
+          Map<String, Object> runtimeParameters) {
     String key = new StringBuilder(core).append(aePath).toString();
     if (providerCache.get(key) == null) {
       providerCache.put(key, new OverridingParamsAEProvider(aePath, runtimeParameters));
diff --git a/lucene/dev/branches/branch_3x/solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/ae/OverridingParamsAEProvider.java b/lucene/dev/branches/branch_3x/solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/ae/OverridingParamsAEProvider.java
index 56f6abaf..12c41a0d 100644
--- a/lucene/dev/branches/branch_3x/solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/ae/OverridingParamsAEProvider.java
+++ b/lucene/dev/branches/branch_3x/solr/contrib/uima/src/main/java/org/apache/solr/uima/processor/ae/OverridingParamsAEProvider.java
@@ -43,9 +43,9 @@
 
   private AnalysisEngine cachedAE;
 
-  private Map<String, String> runtimeParameters;
+  private Map<String, Object> runtimeParameters;
 
-  public OverridingParamsAEProvider(String aeFilePath, Map<String, String> runtimeParameters) {
+  public OverridingParamsAEProvider(String aeFilePath, Map<String, Object> runtimeParameters) {
     this.aeFilePath = aeFilePath;
     this.runtimeParameters = runtimeParameters;
   }
@@ -63,9 +63,11 @@ public synchronized AnalysisEngine getAE() throws ResourceInitializationExceptio
 
         /* iterate over each AE (to set runtime parameters) */
         for (String attributeName : runtimeParameters.keySet()) {
+          Object val = getRuntimeValue(desc, attributeName);
           desc.getAnalysisEngineMetaData().getConfigurationParameterSettings().setParameterValue(
-                  attributeName, runtimeParameters.get(attributeName));
-          log.info(new StringBuilder("setting ").append(attributeName).append(" : ").append(
+                  attributeName, val);
+          if (log.isDebugEnabled())
+            log.debug(new StringBuilder("setting ").append(attributeName).append(" : ").append(
                   runtimeParameters.get(attributeName)).toString());
         }
         // create AE here
@@ -86,4 +88,30 @@ public synchronized AnalysisEngine getAE() throws ResourceInitializationExceptio
     return cachedAE;
   }
 
+  /* create the value to inject in the runtime parameter depending on its declared type */
+  private Object getRuntimeValue(AnalysisEngineDescription desc, String attributeName)
+          throws ClassNotFoundException {
+    String type = desc.getAnalysisEngineMetaData().getConfigurationParameterDeclarations().
+                    getConfigurationParameter(null, attributeName).getType();
+    // TODO : do it via reflection ? i.e. Class paramType = Class.forName(type)...
+    Object val = null;
+    Object runtimeValue = runtimeParameters.get(attributeName);
+    if (runtimeValue!=null) {
+      if ("String".equals(type)) {
+        val = String.valueOf(runtimeValue);
+      }
+      else if ("Integer".equals(type)) {
+        val = Integer.valueOf(runtimeValue.toString());
+      }
+      else if ("Boolean".equals(type)) {
+        val = Boolean.valueOf(runtimeValue.toString());
+      }
+      else if ("Float".equals(type)) {
+        val = Float.valueOf(runtimeValue.toString());
+      }
+    }
+
+    return val;
+  }
+
 }
diff --git a/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessorTest.java b/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessorTest.java
index f6997bc3..a2920e97 100644
--- a/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessorTest.java
+++ b/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/processor/UIMAUpdateRequestProcessorTest.java
@@ -71,8 +71,6 @@ public void testProcessorConfiguration() {
 
   @Test
   public void testProcessing() throws Exception {
-    // this test requires an internet connection (e.g. opencalais api)
-    checkInternetConnection();
 
     addDoc(adoc(
             "id",
@@ -84,26 +82,29 @@ public void testProcessing() throws Exception {
                     + " attached if you need it, but it is also committed to trunk and 3_x branch."
                     + " Last Lucene European Conference has been held in Prague."));
     assertU(commit());
-    assertQ(req("suggested_category:*"), "//*[@numFound='1']");
+    assertQ(req("sentence:*"), "//*[@numFound='1']");
+    assertQ(req("sentiment:*"), "//*[@numFound='0']");
+    assertQ(req("entity:Prague"), "//*[@numFound='1']");
   }
 
   @Test
   public void testTwoUpdates() throws Exception {
-    // this test requires an internet connection (e.g. opencalais api)
-    checkInternetConnection();
 
     addDoc(adoc("id", "1", "text", "The Apache Software Foundation is happy to announce "
             + "BarCampApache Sydney, Australia, the first ASF-backed event in the Southern "
             + "Hemisphere!"));
     assertU(commit());
-    assertQ(req("suggested_category:*"), "//*[@numFound='1']");
+    assertQ(req("sentence:*"), "//*[@numFound='1']");
 
     addDoc(adoc("id", "2", "text", "Taking place 11th December 2010 at the University "
             + "of Sydney's Darlington Centre, the BarCampApache \"unconference\" will be"
             + " attendee-driven, facilitated by members of the Apache community and will "
             + "focus on the Apache..."));
     assertU(commit());
-    assertQ(req("suggested_category:*"), "//*[@numFound='2']");
+    assertQ(req("sentence:*"), "//*[@numFound='2']");
+
+    assertQ(req("sentiment:positive"), "//*[@numFound='1']");
+    assertQ(req("entity:Apache"), "//*[@numFound='2']");
   }
 
   private void addDoc(String doc) throws Exception {
@@ -121,14 +122,4 @@ private void addDoc(String doc) throws Exception {
     handler.handleRequestBody(req, new SolrQueryResponse());
   }
 
-  private void checkInternetConnection() {
-    try {
-      URLConnection conn = new URL("http://www.apache.org/").openConnection();
-      conn.setConnectTimeout(5000);
-      conn.setReadTimeout(5000);
-      conn.connect();
-    } catch (Exception ex) {
-      assumeNoException("This test requires an internet connection", ex);
-    }
-  }
 }
diff --git a/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/processor/an/DummyEntityAnnotator.java b/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/processor/an/DummyEntityAnnotator.java
index 3f24d583..5ad75719 100644
--- a/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/processor/an/DummyEntityAnnotator.java
+++ b/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/processor/an/DummyEntityAnnotator.java
@@ -1 +1,43 @@
   + native
+package org.apache.solr.uima.processor.an;
+
+import org.apache.solr.uima.ts.EntityAnnotation;
+import org.apache.uima.TokenAnnotation;
+import org.apache.uima.analysis_component.JCasAnnotator_ImplBase;
+import org.apache.uima.analysis_engine.AnalysisEngineProcessException;
+import org.apache.uima.jcas.JCas;
+import org.apache.uima.jcas.tcas.Annotation;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+public class DummyEntityAnnotator extends JCasAnnotator_ImplBase{
+
+  @Override
+  public void process(JCas jcas) throws AnalysisEngineProcessException {
+    for (Annotation annotation : jcas.getAnnotationIndex(TokenAnnotation.type)) {
+      String tokenPOS = ((TokenAnnotation) annotation).getPosTag();
+      if ("np".equals(tokenPOS) || "nps".equals(tokenPOS)) {
+        EntityAnnotation entityAnnotation = new EntityAnnotation(jcas);
+        entityAnnotation.setBegin(annotation.getBegin());
+        entityAnnotation.setEnd(annotation.getEnd());
+        entityAnnotation.addToIndexes();
+      }
+    }
+  }
+
+}
diff --git a/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/processor/an/DummySentimentAnnotator.java b/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/processor/an/DummySentimentAnnotator.java
index 3f24d583..d5653a46 100644
--- a/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/processor/an/DummySentimentAnnotator.java
+++ b/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/processor/an/DummySentimentAnnotator.java
@@ -1 +1,62 @@
   + native
+package org.apache.solr.uima.processor.an;
+
+import java.util.Arrays;
+
+import org.apache.solr.uima.ts.SentimentAnnotation;
+import org.apache.uima.TokenAnnotation;
+import org.apache.uima.analysis_component.JCasAnnotator_ImplBase;
+import org.apache.uima.analysis_engine.AnalysisEngineProcessException;
+import org.apache.uima.jcas.JCas;
+import org.apache.uima.jcas.tcas.Annotation;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+public class DummySentimentAnnotator extends JCasAnnotator_ImplBase{
+
+  private static final String[] positiveAdj = {"happy","cool","nice"};
+
+  private static final String[] negativeAdj = {"bad","sad","ugly"};
+
+  @Override
+  public void process(JCas jcas) throws AnalysisEngineProcessException {
+    for (Annotation annotation : jcas.getAnnotationIndex(TokenAnnotation.type)) {
+      String tokenPOS = ((TokenAnnotation) annotation).getPosTag();
+      if ("jj".equals(tokenPOS)) {
+        if (Arrays.asList(positiveAdj).contains(annotation.getCoveredText())) {
+          SentimentAnnotation sentimentAnnotation = createSentimentAnnotation(jcas, annotation);
+          sentimentAnnotation.setMood("positive");
+          sentimentAnnotation.addToIndexes();
+        }
+        else if (Arrays.asList(negativeAdj).contains(annotation.getCoveredText())) {
+          SentimentAnnotation sentimentAnnotation = createSentimentAnnotation(jcas, annotation);
+          sentimentAnnotation.setMood("negative");
+          sentimentAnnotation.addToIndexes();
+        }
+      }
+    }
+  }
+
+  private SentimentAnnotation createSentimentAnnotation(JCas jcas, Annotation annotation) {
+    SentimentAnnotation sentimentAnnotation = new SentimentAnnotation(jcas);
+    sentimentAnnotation.setBegin(annotation.getBegin());
+    sentimentAnnotation.setEnd(annotation.getEnd());
+    return sentimentAnnotation;
+  }
+
+}
diff --git a/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/ts/EntityAnnotation.java b/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/ts/EntityAnnotation.java
index 38018569..34011e8e 100644
--- a/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/ts/EntityAnnotation.java
+++ b/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/ts/EntityAnnotation.java
@@ -17,3 +17,65 @@
   Reverse-merged /lucene/java/branches/lucene_2_4/solr/build.xml:r748824
   Reverse-merged /lucene/dev/branches/preflexfixes/solr/build.xml:r967125-979432
   Reverse-merged /lucene/java/branches/lucene_2_9/solr/build.xml:r817269-818600,825998,829134,829881,831036,896850,909334
+
+
+/* First created by JCasGen Fri Mar 04 12:48:08 CET 2011 */
+package org.apache.solr.uima.ts;
+
+import org.apache.uima.jcas.JCas; 
+import org.apache.uima.jcas.JCasRegistry;
+import org.apache.uima.jcas.cas.TOP_Type;
+
+import org.apache.uima.jcas.tcas.Annotation;
+
+
+/** 
+ * Updated by JCasGen Fri Mar 04 12:50:14 CET 2011
+ * XML source: /Users/tommasoteofili/Documents/workspaces/lucene_workspace/lucene_dev/solr/contrib/uima/src/test/resources/DummyEntityAEDescriptor.xml
+ * @generated */
+public class EntityAnnotation extends Annotation {
+  /** @generated
+   * @ordered 
+   */
+  public final static int typeIndexID = JCasRegistry.register(EntityAnnotation.class);
+  /** @generated
+   * @ordered 
+   */
+  public final static int type = typeIndexID;
+  /** @generated  */
+  public              int getTypeIndexID() {return typeIndexID;}
+ 
+  /** Never called.  Disable default constructor
+   * @generated */
+  protected EntityAnnotation() {}
+    
+  /** Internal - constructor used by generator 
+   * @generated */
+  public EntityAnnotation(int addr, TOP_Type type) {
+    super(addr, type);
+    readObject();
+  }
+  
+  /** @generated */
+  public EntityAnnotation(JCas jcas) {
+    super(jcas);
+    readObject();   
+  } 
+
+  /** @generated */  
+  public EntityAnnotation(JCas jcas, int begin, int end) {
+    super(jcas);
+    setBegin(begin);
+    setEnd(end);
+    readObject();
+  }   
+
+  /** <!-- begin-user-doc -->
+    * Write your own initialization here
+    * <!-- end-user-doc -->
+  @generated modifiable */
+  private void readObject() {}
+     
+}
+
+    
diff --git a/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/ts/EntityAnnotation_Type.java b/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/ts/EntityAnnotation_Type.java
index 3f24d583..12807347 100644
--- a/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/ts/EntityAnnotation_Type.java
+++ b/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/ts/EntityAnnotation_Type.java
@@ -1 +1,56 @@
   + native
+
+/* First created by JCasGen Fri Mar 04 12:48:08 CET 2011 */
+package org.apache.solr.uima.ts;
+
+import org.apache.uima.jcas.JCas;
+import org.apache.uima.jcas.JCasRegistry;
+import org.apache.uima.cas.impl.CASImpl;
+import org.apache.uima.cas.impl.FSGenerator;
+import org.apache.uima.cas.FeatureStructure;
+import org.apache.uima.cas.impl.TypeImpl;
+import org.apache.uima.cas.Type;
+import org.apache.uima.jcas.tcas.Annotation_Type;
+
+/** 
+ * Updated by JCasGen Fri Mar 04 12:50:14 CET 2011
+ * @generated */
+public class EntityAnnotation_Type extends Annotation_Type {
+  /** @generated */
+  protected FSGenerator getFSGenerator() {return fsGenerator;}
+  /** @generated */
+  private final FSGenerator fsGenerator = 
+    new FSGenerator() {
+      public FeatureStructure createFS(int addr, CASImpl cas) {
+  			 if (EntityAnnotation_Type.this.useExistingInstance) {
+  			   // Return eq fs instance if already created
+  		     FeatureStructure fs = EntityAnnotation_Type.this.jcas.getJfsFromCaddr(addr);
+  		     if (null == fs) {
+  		       fs = new EntityAnnotation(addr, EntityAnnotation_Type.this);
+  			   EntityAnnotation_Type.this.jcas.putJfsFromCaddr(addr, fs);
+  			   return fs;
+  		     }
+  		     return fs;
+        } else return new EntityAnnotation(addr, EntityAnnotation_Type.this);
+  	  }
+    };
+  /** @generated */
+  public final static int typeIndexID = EntityAnnotation.typeIndexID;
+  /** @generated 
+     @modifiable */
+  public final static boolean featOkTst = JCasRegistry.getFeatOkTst("org.apache.solr.uima.ts.EntityAnnotation");
+
+
+
+  /** initialize variables to correspond with Cas Type and Features
+	* @generated */
+  public EntityAnnotation_Type(JCas jcas, Type casType) {
+    super(jcas, casType);
+    casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType, getFSGenerator());
+
+  }
+}
+
+
+
+    
diff --git a/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/ts/SentimentAnnotation.java b/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/ts/SentimentAnnotation.java
index 3f24d583..6dba1fd2 100644
--- a/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/ts/SentimentAnnotation.java
+++ b/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/ts/SentimentAnnotation.java
@@ -1 +1,81 @@
   + native
+
+
+/* First created by JCasGen Fri Mar 04 13:08:40 CET 2011 */
+package org.apache.solr.uima.ts;
+
+import org.apache.uima.jcas.JCas; 
+import org.apache.uima.jcas.JCasRegistry;
+import org.apache.uima.jcas.cas.TOP_Type;
+
+import org.apache.uima.jcas.tcas.Annotation;
+
+
+/** 
+ * Updated by JCasGen Fri Mar 04 13:08:40 CET 2011
+ * XML source: /Users/tommasoteofili/Documents/workspaces/lucene_workspace/lucene_dev/solr/contrib/uima/src/test/resources/DummySentimentAnalysisAEDescriptor.xml
+ * @generated */
+public class SentimentAnnotation extends Annotation {
+  /** @generated
+   * @ordered 
+   */
+  public final static int typeIndexID = JCasRegistry.register(SentimentAnnotation.class);
+  /** @generated
+   * @ordered 
+   */
+  public final static int type = typeIndexID;
+  /** @generated  */
+  public              int getTypeIndexID() {return typeIndexID;}
+ 
+  /** Never called.  Disable default constructor
+   * @generated */
+  protected SentimentAnnotation() {}
+    
+  /** Internal - constructor used by generator 
+   * @generated */
+  public SentimentAnnotation(int addr, TOP_Type type) {
+    super(addr, type);
+    readObject();
+  }
+  
+  /** @generated */
+  public SentimentAnnotation(JCas jcas) {
+    super(jcas);
+    readObject();   
+  } 
+
+  /** @generated */  
+  public SentimentAnnotation(JCas jcas, int begin, int end) {
+    super(jcas);
+    setBegin(begin);
+    setEnd(end);
+    readObject();
+  }   
+
+  /** <!-- begin-user-doc -->
+    * Write your own initialization here
+    * <!-- end-user-doc -->
+  @generated modifiable */
+  private void readObject() {}
+     
+ 
+    
+  //*--------------*
+  //* Feature: mood
+
+  /** getter for mood - gets 
+   * @generated */
+  public String getMood() {
+    if (SentimentAnnotation_Type.featOkTst && ((SentimentAnnotation_Type)jcasType).casFeat_mood == null)
+      jcasType.jcas.throwFeatMissing("mood", "org.apache.solr.uima.ts.SentimentAnnotation");
+    return jcasType.ll_cas.ll_getStringValue(addr, ((SentimentAnnotation_Type)jcasType).casFeatCode_mood);}
+    
+  /** setter for mood - sets  
+   * @generated */
+  public void setMood(String v) {
+    if (SentimentAnnotation_Type.featOkTst && ((SentimentAnnotation_Type)jcasType).casFeat_mood == null)
+      jcasType.jcas.throwFeatMissing("mood", "org.apache.solr.uima.ts.SentimentAnnotation");
+    jcasType.ll_cas.ll_setStringValue(addr, ((SentimentAnnotation_Type)jcasType).casFeatCode_mood, v);}    
+  }
+
+    
diff --git a/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/ts/SentimentAnnotation_Type.java b/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/ts/SentimentAnnotation_Type.java
index 3f24d583..1a964c4a 100644
--- a/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/ts/SentimentAnnotation_Type.java
+++ b/lucene/dev/branches/branch_3x/solr/contrib/uima/src/test/java/org/apache/solr/uima/ts/SentimentAnnotation_Type.java
@@ -1 +1,80 @@
   + native
+
+/* First created by JCasGen Fri Mar 04 13:08:40 CET 2011 */
+package org.apache.solr.uima.ts;
+
+import org.apache.uima.jcas.JCas;
+import org.apache.uima.jcas.JCasRegistry;
+import org.apache.uima.cas.impl.CASImpl;
+import org.apache.uima.cas.impl.FSGenerator;
+import org.apache.uima.cas.FeatureStructure;
+import org.apache.uima.cas.impl.TypeImpl;
+import org.apache.uima.cas.Type;
+import org.apache.uima.cas.impl.FeatureImpl;
+import org.apache.uima.cas.Feature;
+import org.apache.uima.jcas.tcas.Annotation_Type;
+
+/** 
+ * Updated by JCasGen Fri Mar 04 13:08:40 CET 2011
+ * @generated */
+public class SentimentAnnotation_Type extends Annotation_Type {
+  /** @generated */
+  protected FSGenerator getFSGenerator() {return fsGenerator;}
+  /** @generated */
+  private final FSGenerator fsGenerator = 
+    new FSGenerator() {
+      public FeatureStructure createFS(int addr, CASImpl cas) {
+  			 if (SentimentAnnotation_Type.this.useExistingInstance) {
+  			   // Return eq fs instance if already created
+  		     FeatureStructure fs = SentimentAnnotation_Type.this.jcas.getJfsFromCaddr(addr);
+  		     if (null == fs) {
+  		       fs = new SentimentAnnotation(addr, SentimentAnnotation_Type.this);
+  			   SentimentAnnotation_Type.this.jcas.putJfsFromCaddr(addr, fs);
+  			   return fs;
+  		     }
+  		     return fs;
+        } else return new SentimentAnnotation(addr, SentimentAnnotation_Type.this);
+  	  }
+    };
+  /** @generated */
+  public final static int typeIndexID = SentimentAnnotation.typeIndexID;
+  /** @generated 
+     @modifiable */
+  public final static boolean featOkTst = JCasRegistry.getFeatOkTst("org.apache.solr.uima.ts.SentimentAnnotation");
+ 
+  /** @generated */
+  final Feature casFeat_mood;
+  /** @generated */
+  final int     casFeatCode_mood;
+  /** @generated */ 
+  public String getMood(int addr) {
+        if (featOkTst && casFeat_mood == null)
+      jcas.throwFeatMissing("mood", "org.apache.solr.uima.ts.SentimentAnnotation");
+    return ll_cas.ll_getStringValue(addr, casFeatCode_mood);
+  }
+  /** @generated */    
+  public void setMood(int addr, String v) {
+        if (featOkTst && casFeat_mood == null)
+      jcas.throwFeatMissing("mood", "org.apache.solr.uima.ts.SentimentAnnotation");
+    ll_cas.ll_setStringValue(addr, casFeatCode_mood, v);}
+    
+  
+
+
+
+  /** initialize variables to correspond with Cas Type and Features
+	* @generated */
+  public SentimentAnnotation_Type(JCas jcas, Type casType) {
+    super(jcas, casType);
+    casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType, getFSGenerator());
+
+ 
+    casFeat_mood = jcas.getRequiredFeatureDE(casType, "mood", "uima.cas.String", featOkTst);
+    casFeatCode_mood  = (null == casFeat_mood) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_mood).getCode();
+
+  }
+}
+
+
+
+    
