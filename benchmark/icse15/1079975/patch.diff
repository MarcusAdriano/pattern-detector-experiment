diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/ColumnDecoder.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/ColumnDecoder.java
index e69de29b..d6b0a802 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/ColumnDecoder.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/ColumnDecoder.java
@@ -0,0 +1,120 @@
+package org.apache.cassandra.cql.driver;
+
+import org.apache.cassandra.config.ConfigurationException;
+import org.apache.cassandra.db.marshal.AbstractType;
+import org.apache.cassandra.db.marshal.AsciiType;
+import org.apache.cassandra.db.marshal.BytesType;
+import org.apache.cassandra.db.marshal.IntegerType;
+import org.apache.cassandra.db.marshal.LexicalUUIDType;
+import org.apache.cassandra.db.marshal.LongType;
+import org.apache.cassandra.db.marshal.TimeUUIDType;
+import org.apache.cassandra.db.marshal.UTF8Type;
+import org.apache.cassandra.thrift.CfDef;
+import org.apache.cassandra.thrift.KsDef;
+import org.apache.cassandra.utils.ByteBufferUtil;
+import org.apache.cassandra.utils.FBUtilities;
+import org.apache.cassandra.utils.UUIDGen;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.UnsupportedEncodingException;
+import java.math.BigInteger;
+import java.nio.ByteBuffer;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class ColumnDecoder 
+{
+    private static final Logger logger = LoggerFactory.getLogger(ColumnDecoder.class);
+    private static final String MapFormatString = "%s.%s.%s";
+    
+    enum Specifier
+    {
+        Comparator,
+        Validator
+    }
+    
+    private Map<String, CfDef> cfDefs = new HashMap<String, CfDef>();
+    
+    // cache the comparators for efficiency.
+    private Map<String, AbstractType> comparators = new HashMap<String, AbstractType>();
+    
+    public ColumnDecoder(List<KsDef> defs)
+    {
+        for (KsDef ks : defs) 
+            for (CfDef cf : ks.getCf_defs())
+                cfDefs.put(String.format("%s.%s", ks.getName(), cf.getName()), cf);
+    }
+
+    /**
+     * @param keyspace ALWAYS specify
+     * @param columnFamily ALWAYS specify
+     * @param specifier ALWAYS specify
+     * @param def avoids additional map lookup if specified. null is ok. though.
+     * @return
+     */
+    private AbstractType getComparator(String keyspace, String columnFamily, Specifier specifier, CfDef def) 
+    {
+        // check cache first.
+        String key = String.format(MapFormatString, keyspace, columnFamily, specifier.name());
+        AbstractType comparator = comparators.get(key);
+
+        // make and put in cache.
+        if (comparator == null) 
+        {
+            if (def == null)
+                def = cfDefs.get(String.format("%s.%s", keyspace, columnFamily));
+            try 
+            {
+                switch (specifier)
+                {
+                    case Validator:
+                        comparator = FBUtilities.getComparator(def.getDefault_validation_class());
+                        break;
+                    case Comparator:
+                    default:
+                        comparator = FBUtilities.getComparator(def.getComparator_type());
+                        break;
+                }
+                comparators.put(key, comparator);
+            }
+            catch (ConfigurationException ex)
+            {
+                throw new RuntimeException(ex);
+            }
+        }
+        return comparator;
+    }
+    
+    public String colNameAsString(String keyspace, String columnFamily, String name) 
+    {
+        AbstractType comparator = getComparator(keyspace, columnFamily, Specifier.Comparator, null);
+        ByteBuffer bb = comparator.fromString(name);
+        return comparator.getString(bb);
+    }
+    
+    public String colNameAsString(String keyspace, String columnFamily, byte[] name) 
+    {
+        AbstractType comparator = getComparator(keyspace, columnFamily, Specifier.Comparator, null);
+        return comparator.getString(ByteBuffer.wrap(name));
+    }
+    
+    public static String colValueAsString(Object value) {
+        if (value instanceof String)
+            return (String)value;
+        else if (value instanceof byte[])
+            return ByteBufferUtil.bytesToHex(ByteBuffer.wrap((byte[])value));
+        else
+            return value.toString();
+    }
+    
+    public Col makeCol(String keyspace, String columnFamily, byte[] name, byte[] value)
+    {
+        CfDef cfDef = cfDefs.get(String.format("%s.%s", keyspace, columnFamily));
+        AbstractType comparator = getComparator(keyspace, columnFamily, Specifier.Comparator, cfDef);
+        AbstractType validator = getComparator(keyspace, columnFamily, Specifier.Validator, null);
+        // todo: generate less garbage.
+        return new Col(comparator.compose(ByteBuffer.wrap(name)), validator.compose(ByteBuffer.wrap(value)));
+    }
+}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Connection.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Connection.java
index 9f5e324f..61b70dad 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Connection.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Connection.java
@@ -64,7 +64,7 @@
     // todo: encapsulate.
     public String curKeyspace;
     public String curColumnFamily;
-    public SchemaDecoder decoder;
+    public ColumnDecoder decoder;
     
     /**
      * Create a new <code>Connection</code> instance.
@@ -137,7 +137,7 @@ public CqlResult execute(String queryStr, Compression compress)
     throws InvalidRequestException, UnavailableException, TimedOutException, TException
     {
         if (decoder == null)
-            decoder = new SchemaDecoder(client.describe_keyspaces());
+            decoder = new ColumnDecoder(client.describe_keyspaces());
         
         Matcher isKeyspace = KeyspacePattern.matcher(queryStr);
         if (isKeyspace.matches())
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Results.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Results.java
index eb3cbdbb..4d22711d 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Results.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Results.java
@@ -3,11 +3,11 @@
 
 public class Results
 {
-    private final SchemaDecoder decoder;
+    private final ColumnDecoder decoder;
     private final String keyspace;
     private final String columnFamily;
     
-    public Results(SchemaDecoder decoder, String keyspace, String columnFamily) 
+    public Results(ColumnDecoder decoder, String keyspace, String columnFamily) 
     {
         this.decoder = decoder;
         this.keyspace = keyspace;
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/SchemaDecoder.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/SchemaDecoder.java
index e45e16b7..e69de29b 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/SchemaDecoder.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/SchemaDecoder.java
@@ -1,110 +0,0 @@
-package org.apache.cassandra.cql.driver;
-
-import org.apache.cassandra.config.ConfigurationException;
-import org.apache.cassandra.db.marshal.AbstractType;
-import org.apache.cassandra.db.marshal.AsciiType;
-import org.apache.cassandra.db.marshal.BytesType;
-import org.apache.cassandra.db.marshal.IntegerType;
-import org.apache.cassandra.db.marshal.LexicalUUIDType;
-import org.apache.cassandra.db.marshal.LongType;
-import org.apache.cassandra.db.marshal.TimeUUIDType;
-import org.apache.cassandra.db.marshal.UTF8Type;
-import org.apache.cassandra.thrift.CfDef;
-import org.apache.cassandra.thrift.KsDef;
-import org.apache.cassandra.utils.FBUtilities;
-import org.apache.cassandra.utils.UUIDGen;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.io.UnsupportedEncodingException;
-import java.math.BigInteger;
-import java.nio.ByteBuffer;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-public class SchemaDecoder 
-{
-    private static final Logger logger = LoggerFactory.getLogger(SchemaDecoder.class);
-    private static final String MapFormatString = "%s.%s.%s";
-    
-    enum Specifier
-    {
-        Comparator,
-        Validator
-    }
-    
-    private Map<String, CfDef> cfDefs = new HashMap<String, CfDef>();
-    
-    // cache the comparators for efficiency.
-    private Map<String, AbstractType> comparators = new HashMap<String, AbstractType>();
-    
-    public SchemaDecoder(List<KsDef> defs)
-    {
-        for (KsDef ks : defs) 
-            for (CfDef cf : ks.getCf_defs())
-                cfDefs.put(String.format("%s.%s", ks.getName(), cf.getName()), cf);
-    }
-
-    /**
-     * @param keyspace ALWAYS specify
-     * @param columnFamily ALWAYS specify
-     * @param specifier ALWAYS specify
-     * @param def avoids additional map lookup if specified. null is ok. though.
-     * @return
-     */
-    private AbstractType getComparator(String keyspace, String columnFamily, Specifier specifier, CfDef def) 
-    {
-        // check cache first.
-        String key = String.format(MapFormatString, keyspace, columnFamily, specifier.name());
-        AbstractType comparator = comparators.get(key);
-
-        // make and put in cache.
-        if (comparator == null) 
-        {
-            if (def == null)
-                def = cfDefs.get(String.format("%s.%s", keyspace, columnFamily));
-            try 
-            {
-                switch (specifier)
-                {
-                    case Validator:
-                        comparator = FBUtilities.getComparator(def.getDefault_validation_class());
-                        break;
-                    case Comparator:
-                    default:
-                        comparator = FBUtilities.getComparator(def.getComparator_type());
-                        break;
-                }
-                comparators.put(key, comparator);
-            }
-            catch (ConfigurationException ex)
-            {
-                throw new RuntimeException(ex);
-            }
-        }
-        return comparator;
-    }
-    
-    public String colNameAsString(String keyspace, String columnFamily, String name) 
-    {
-        AbstractType comparator = getComparator(keyspace, columnFamily, Specifier.Comparator, null);
-        ByteBuffer bb = comparator.fromString(name);
-        return comparator.getString(bb);
-    }
-    
-    public String colNameAsString(String keyspace, String columnFamily, byte[] name) 
-    {
-        AbstractType comparator = getComparator(keyspace, columnFamily, Specifier.Comparator, null);
-        return comparator.getString(ByteBuffer.wrap(name));
-    }
-    
-    public Col makeCol(String keyspace, String columnFamily, byte[] name, byte[] value)
-    {
-        CfDef cfDef = cfDefs.get(String.format("%s.%s", keyspace, columnFamily));
-        AbstractType comparator = getComparator(keyspace, columnFamily, Specifier.Comparator, cfDef);
-        AbstractType validator = getComparator(keyspace, columnFamily, Specifier.Validator, null);
-        // todo: generate less garbage.
-        return new Col(comparator.compose(ByteBuffer.wrap(name)), validator.compose(ByteBuffer.wrap(value)));
-    }
-}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraResultSet.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraResultSet.java
index 8141456c..e160f6ea 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraResultSet.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraResultSet.java
@@ -23,6 +23,7 @@
 import java.io.InputStream;
 import java.io.Reader;
 import java.math.BigDecimal;
+import java.math.BigInteger;
 import java.net.URL;
 import java.sql.Array;
 import java.sql.Blob;
@@ -47,8 +48,7 @@
 import java.util.WeakHashMap;
 
 import org.apache.cassandra.cql.driver.Col;
-import org.apache.cassandra.cql.driver.Results;
-import org.apache.cassandra.cql.driver.SchemaDecoder;
+import org.apache.cassandra.cql.driver.ColumnDecoder;
 import org.apache.cassandra.thrift.Column;
 import org.apache.cassandra.thrift.CqlResult;
 import org.apache.cassandra.thrift.CqlRow;
@@ -62,7 +62,7 @@
     /** The r set. */
     private final CqlResult rSet; 
     
-    private final SchemaDecoder decoder;
+    private final ColumnDecoder decoder;
     private final String keyspace;
     private final String columnFamily;
     
@@ -83,7 +83,7 @@
      *
      * @param resultSet the result set
      */
-    CassandraResultSet(CqlResult resultSet, SchemaDecoder decoder, String keyspace, String columnFamily)
+    CassandraResultSet(CqlResult resultSet, ColumnDecoder decoder, String keyspace, String columnFamily)
     {
         this.rSet = resultSet;
         this.decoder = decoder;
@@ -356,23 +356,24 @@ public byte getByte(String arg0) throws SQLException
     }
 
     /**
-     * @param arg0
+     * @param index
      * @return
      * @throws SQLException
      */
-    public byte[] getBytes(int arg0) throws SQLException
+    public byte[] getBytes(int index) throws SQLException
     {
-        throw new UnsupportedOperationException("method not supported");
+        return values.get(index) != null ? (byte[])values.get(index).getValue() : null;
     }
 
     /**
-     * @param arg0
+     * @param name
      * @return
      * @throws SQLException
      */
-    public byte[] getBytes(String arg0) throws SQLException
+    public byte[] getBytes(String name) throws SQLException
     {
-        throw new UnsupportedOperationException("method not supported");
+        String nameAsString = decoder.colNameAsString(keyspace, columnFamily, name);
+        return valueMap.get(nameAsString) != null ? (byte[])valueMap.get(nameAsString) : null;
     }
 
     /**
@@ -543,43 +544,45 @@ public int getHoldability() throws SQLException
     }
 
     /**
-     * @param arg0
+     * @param index
      * @return
      * @throws SQLException
      */
-    public int getInt(int arg0) throws SQLException
+    public int getInt(int index) throws SQLException
     {
-        throw new UnsupportedOperationException("method not supported");
+        return values.get(index) != null ? ((BigInteger)values.get(index).getValue()).intValue() : null;
     }
 
     /**
-     * @param arg0
+     * @param name
      * @return
      * @throws SQLException
      */
-    public int getInt(String arg0) throws SQLException
+    public int getInt(String name) throws SQLException
     {
-        throw new UnsupportedOperationException("method not supported");
+        String nameAsString = decoder.colNameAsString(keyspace, columnFamily, name);
+        return valueMap.get(nameAsString) != null ? ((BigInteger)valueMap.get(nameAsString)).intValue() : null;
     }
 
     /**
-     * @param arg0
+     * @param index
      * @return
      * @throws SQLException
      */
-    public long getLong(int arg0) throws SQLException
+    public long getLong(int index) throws SQLException
     {
-        throw new UnsupportedOperationException("method not supported");
+        return values.get(index) != null ? (Long)values.get(index).getValue() : null;
     }
 
     /**
-     * @param arg0
+     * @param name
      * @return
      * @throws SQLException
      */
-    public long getLong(String arg0) throws SQLException
+    public long getLong(String name) throws SQLException
     {
-        throw new UnsupportedOperationException("method not supported");
+        String nameAsString = decoder.colNameAsString(keyspace, columnFamily, name);
+        return valueMap.get(nameAsString) != null ? (Long)valueMap.get(nameAsString) : null;
     }
 
     /**
@@ -652,23 +655,24 @@ public String getNString(String arg0) throws SQLException
     }
 
     /**
-     * @param arg0
+     * @param index
      * @return
      * @throws SQLException
      */
-    public Object getObject(int arg0) throws SQLException
+    public Object getObject(int index) throws SQLException
     {
-        throw new UnsupportedOperationException("method not supported");
+        return values.get(index) == null ? null : values.get(index).getValue();
     }
 
     /**
-     * @param arg0
+     * @param name
      * @return
      * @throws SQLException
      */
-    public Object getObject(String arg0) throws SQLException
+    public Object getObject(String name) throws SQLException
     {
-        throw new UnsupportedOperationException("method not supported");
+        String nameAsString = decoder.colNameAsString(keyspace, columnFamily, name);
+        return valueMap.get(nameAsString);
     }
 
     /**
@@ -798,7 +802,7 @@ public Statement getStatement() throws SQLException
      */
     public String getString(int index) throws SQLException 
     {
-        return values.get(index) != null ? values.get(index).getValue().toString() : null;
+        return values.get(index) != null ? ColumnDecoder.colValueAsString(values.get(index).getValue()) : null;
     }
 
     /**
@@ -809,7 +813,7 @@ public String getString(int index) throws SQLException
     public String getString(String name) throws SQLException
     {
         String nameAsString = this.decoder.colNameAsString(this.keyspace, this.columnFamily, name);
-        return valueMap.get(nameAsString) != null ? valueMap.get(nameAsString).toString() : null;
+        return valueMap.get(nameAsString) != null ? ColumnDecoder.colValueAsString(valueMap.get(nameAsString)) : null;
     }
 
     /**
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraStatement.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraStatement.java
index 7e778607..4431da6b 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraStatement.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraStatement.java
@@ -171,11 +171,11 @@ public boolean execute(String query) throws SQLException
         } 
         catch (InvalidRequestException e)
         {
-            throw new SQLException(e.getMessage());
+            throw new SQLException(e.getWhy());
         }
         catch (UnavailableException e)
         {
-            throw new SQLException(e.getMessage());
+            throw new SQLException("Cassandra was unavialable", e);
         }
         catch (TimedOutException e)
         {
diff --git a/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/driver/jdbc/EmbeddedServiceBase.java b/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/driver/jdbc/EmbeddedServiceBase.java
index d47969f3..2bc9a538 100644
--- a/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/driver/jdbc/EmbeddedServiceBase.java
+++ b/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/driver/jdbc/EmbeddedServiceBase.java
@@ -4,8 +4,6 @@
 import java.net.Socket;
 import java.net.UnknownHostException;
 
-import junit.framework.TestCase;
-
 import org.apache.cassandra.config.CFMetaData;
 import org.apache.cassandra.config.ConfigurationException;
 import org.apache.cassandra.config.DatabaseDescriptor;
@@ -15,7 +13,7 @@
 /**
  * The abstract BaseClass.
  */
-public abstract class EmbeddedServiceBase extends TestCase
+public abstract class EmbeddedServiceBase
 {
 
     /** The embedded server cassandra. */
@@ -27,11 +25,10 @@
      *
      * @throws Exception the exception
      */
-    protected void startCassandraServer() throws IOException, ConfigurationException
+    static void startCassandraServer() throws IOException, ConfigurationException
     {
         if (!checkIfServerRunning())
         {
-            System.setProperty("cassandra.config", "cassandra.yaml");
             loadData();
             cassandra = new EmbeddedCassandraService();
             cassandra.start();
@@ -44,7 +41,7 @@ protected void startCassandraServer() throws IOException, ConfigurationException
      *
      * @throws ConfigurationException the configuration exception
      */
-    private void loadData() throws ConfigurationException
+    static void loadData() throws ConfigurationException
     {
         for (KSMetaData table : DatabaseDescriptor.readTablesFromYaml())
         {
@@ -60,7 +57,7 @@ private void loadData() throws ConfigurationException
      *
      * @return true, if successful
      */
-    private boolean checkIfServerRunning()
+    static boolean checkIfServerRunning()
     {
         try
         {
diff --git a/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/driver/jdbc/JdbcDriverTest.java b/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/driver/jdbc/JdbcDriverTest.java
index 2fc6f035..5b784ba8 100644
--- a/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/driver/jdbc/JdbcDriverTest.java
+++ b/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/driver/jdbc/JdbcDriverTest.java
@@ -20,7 +20,9 @@
  * 
  */
 
-import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.nio.FloatBuffer;
 import java.sql.Connection;
 import java.sql.DriverManager;
 import java.sql.PreparedStatement;
@@ -28,7 +30,9 @@
 import java.sql.SQLException;
 import java.sql.Statement;
 
-import org.apache.cassandra.config.ConfigurationException;
+import org.apache.cassandra.utils.FBUtilities;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
 import org.junit.Test;
 
 /**
@@ -36,134 +40,210 @@
  */
 public class JdbcDriverTest extends EmbeddedServiceBase
 {
-    private java.sql.Connection con = null;
+    private static java.sql.Connection con = null;
+    private static final String first = FBUtilities.bytesToHex("first".getBytes());
+    private static final String firstrec = FBUtilities.bytesToHex("firstrec".getBytes());
+    private static final String last = FBUtilities.bytesToHex("last".getBytes());
+    private static final String lastrec = FBUtilities.bytesToHex("lastrec".getBytes());
 
     /** SetUp */
-    @Override
-    protected void setUp()
-    {
-        try
+    @BeforeClass
+    public static void startServer() throws Exception
         {
             startCassandraServer();
             Class.forName("org.apache.cassandra.cql.driver.jdbc.CassandraDriver");
             con = DriverManager.getConnection("jdbc:cassandra:root/root@localhost:9170/Keyspace1");
-            final String updateQ = "UPDATE Standard1 SET \"first\" = \"firstrec\", \"last\" = \"lastrec\" WHERE KEY = \"jsmith\"";
-            executeNoResults(con, updateQ);
-        }
-        catch (ClassNotFoundException e)
-        {
-            fail(e.getMessage());
-        }
-        catch(IOException ioex)
-        {
-            fail(ioex.getMessage());
-        }
-        catch (SQLException e)
-        {
-            fail(e.getMessage());
-        } 
-        catch (ConfigurationException e)
+        String[] inserts = 
         {
-            fail(e.getMessage());
-        }
+//            String.format("UPDATE Standard1 SET \"%s\" = \"%s\", \"%s\" = \"%s\" WHERE KEY = \"jsmith\"", first, firstrec, last, lastrec),    
+            "UPDATE JdbcInteger SET 1 = 11, 2 = 22 WHERE KEY = \"jsmith\"",
+            "UPDATE JdbcInteger SET 3 = 33, 4 = 44 WHERE KEY = \"jsmith\"",
+            "UPDATE JdbcLong SET 1L = 11L, 2L = 22L WHERE KEY = \"jsmith\"",
+            "UPDATE JdbcAscii SET \"first\" = \"firstrec\", \"last\" = \"lastrec\" WHERE key = \"jsmith\"",
+//            String.format("UPDATE JdbcBytes SET \"%s\" = \"%s\", \"%s\" = \"%s\" WHERE key = \"jsmith\"", first, firstrec, last, lastrec),
+            "UPDATE JdbcUtf8 SET \"first\" = \"firstrec\", \"last\" = \"lastrec\" WHERE key = \"jsmith\"",
+        };
+        for (String q : inserts)
+            executeNoResults(con, q);
     }
 
     /** Method to test statement. */
     @Test
-    public void testWithStatement()
-    {
-        try
+    public void testWithStatement() throws SQLException
         {
-            String selectQ = "SELECT \"first\", \"last\" FROM Standard1 WHERE KEY=\"jsmith\"";
             Statement stmt = con.createStatement();
-            scrollResultset(stmt.executeQuery(selectQ), "first", "last");
-        }
-        catch (SQLException e)
-        {
-            fail(e.getMessage());
-        }
+        
+//        String selectQ = String.format("SELECT \"%s\", \"%s\" FROM Standard1 WHERE KEY=\"jsmith\"", first, last);
+//        checkResultSet(stmt.executeQuery(selectQ), "Bytes", 1, first, last);
+        
+        String selectQ = "SELECT 1, 2 FROM JdbcInteger WHERE KEY=\"jsmith\"";
+        checkResultSet(stmt.executeQuery(selectQ), "Int", 1, "1", "2");
+        
+        selectQ = "SELECT 3, 4 FROM JdbcInteger WHERE KEY=\"jsmith\"";
+        checkResultSet(stmt.executeQuery(selectQ), "Int", 1, "3", "4");
+        
+        selectQ = "SELECT 1, 2, 3, 4 FROM JdbcInteger WHERE KEY=\"jsmith\"";
+        checkResultSet(stmt.executeQuery(selectQ), "Int", 1, "1", "2", "3", "4");
+        
+        selectQ = "SELECT 1L, 2L FROM JdbcLong WHERE KEY=\"jsmith\"";
+        checkResultSet(stmt.executeQuery(selectQ), "Long", 1, "1", "2");
+        
+        selectQ = "SELECT \"first\", \"last\" FROM JdbcAscii WHERE KEY=\"jsmith\"";
+        checkResultSet(stmt.executeQuery(selectQ), "String", 1, "first", "last");
+        
+//        selectQ = String.format("SELECT \"%s\", \"%s\" FROM JdbcBytes WHERE KEY=\"jsmith\"", first, last);
+//        checkResultSet(stmt.executeQuery(selectQ), "Bytes", 1, first, last);
+        
+        selectQ = "SELECT \"first\", \"last\" FROM JdbcUtf8 WHERE KEY=\"jsmith\"";
+        checkResultSet(stmt.executeQuery(selectQ), "String", 1, "first", "last");
     }
 
    /** Method to test with prepared statement.*/
    @Test
-    public void testWithPreparedStatement()
-    {
-        try
-        {
-            final String selectQ = "SELECT \"first\", \"last\" FROM Standard1 WHERE KEY=\"jsmith\"";
-            scrollResultset(executePreparedStatementWithResults(con, selectQ), "first", "last");
-        }
-        catch (SQLException e)
+    public void testWithPreparedStatement() throws SQLException
         {
-            fail(e.getMessage());
-        }
-        tearDown();
+//        String selectQ = "SELECT \"first\", \"last\" FROM Standard1 WHERE KEY=\"jsmith\"";
+//        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Bytes", 1, "first", "last");
+        
+        String selectQ = "SELECT 1, 2 FROM JdbcInteger WHERE KEY=\"jsmith\"";
+        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Int", 1, "1", "2");
+        
+        selectQ = "SELECT 3, 4 FROM JdbcInteger WHERE KEY=\"jsmith\"";
+        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Int", 1, "3", "4");
+        
+        selectQ = "SELECT 1, 2, 3, 4 FROM JdbcInteger WHERE KEY=\"jsmith\"";
+        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Int", 1, "1", "2", "3", "4");
+        
+        selectQ = "SELECT 1L, 2L FROM JdbcLong WHERE KEY=\"jsmith\"";
+        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Long", 1, "1", "2");
+        
+        selectQ = "SELECT \"first\", \"last\" FROM JdbcAscii WHERE KEY=\"jsmith\"";
+        checkResultSet(executePreparedStatementWithResults(con, selectQ), "String", 1, "first", "last");
+        
+//        selectQ = "SELECT \"first\", \"last\" FROM JdbcBytes WHERE KEY=\"jsmith\"";
+//        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Bytes", 1, "first", "last");
+        
+        selectQ = "SELECT \"first\", \"last\" FROM JdbcUtf8 WHERE KEY=\"jsmith\"";
+        checkResultSet(executePreparedStatementWithResults(con, selectQ), "String", 1, "first", "last");
     }
 
-    /** Method to test with update statement.*/
+    /* Method to test with Delete statement. */
     @Test
-    public void testWithUpdateStatement()
+    public void testWithDeleteStatement() throws SQLException
     {
-        try
+        // the pattern: 0) a deltion, 1) ensure deletion 2) ensure deletion wasn't over-eager.
+        String[] statements = 
         {
-            final String updateQ = "UPDATE Standard1 SET \"firstN\" = \"jdbc\", \"lastN\" = \"m\" WHERE KEY = \"jsmith\"";
-            executeNoResults(con, updateQ);
-            final String updateSelect = "SELECT \"firstN\", \"lastN\" FROM Standard1 WHERE KEY=\"jsmith\"";
-            scrollResultset(executePreparedStatementWithResults(con, updateSelect), "firstN", "lastN");
-        }
-        catch (SQLException e)
+//                "DELETE \"firstN\", \"lastN\" FROM Standard1 WHERE KEY=\"jsmith\"",
+//                "SELECT \"firstN\", \"lastN\" FROM Standard1 WHERE KEY=\"jsmith\"",
+//                "SELECT \"first\" FROM Standard1 WHERE KEY=\"jsmith\"",
+                
+                "DELETE 1, 3 FROM JdbcInteger WHERE KEY=\"jsmith\"",
+                "SELECT 1, 3 FROM JdbcInteger WHERE KEY=\"jsmith\"", // fails.
+                "SELECT 2, 4 FROM JdbcInteger WHERE KEY=\"jsmith\"",
+                
+                "DELETE 1L FROM JdbcLong WHERE KEY=\"jsmith\"",
+                "SELECT 1L FROM JdbcLong WHERE KEY=\"jsmith\"",
+                "SELECT 2L FROM JdbcLong WHERE KEY=\"jsmith\"",
+                
+                "DELETE \"first\" FROM JdbcAscii WHERE KEY=\"jsmith\"",
+                "SELECT \"first\" FROM JdbcAscii WHERE KEY=\"jsmith\"",
+                "SELECT \"last\" FROM JdbcAscii WHERE KEY=\"jsmith\"",
+                
+//                "DELETE \"first\" FROM JdbcBytes WHERE KEY=\"jsmith\"",
+//                "SELECT \"first\" FROM JdbcBytes WHERE KEY=\"jsmith\"",
+//                "SELECT \"last\" FROM JdbcBytes WHERE KEY=\"jsmith\"",
+                
+                "DELETE \"first\" FROM JdbcUtf8 WHERE KEY=\"jsmith\"",
+                "SELECT \"first\" FROM JdbcUtf8 WHERE KEY=\"jsmith\"",
+                "SELECT \"last\" FROM JdbcUtf8 WHERE KEY=\"jsmith\"",
+        };
+        
+        for (int i = 0; i < statements.length/3; i++) 
         {
-            fail(e.getMessage());
+            executeNoResults(con, statements[3*i]);
+            ResultSet rs = executePreparedStatementWithResults(con, statements[3*i+1]);
+            assert !rs.next() : statements[3*i+1];
+            rs.close();
+            rs = executePreparedStatementWithResults(con, statements[3*i+2]);
+            assert rs.next() : statements[3*i+2];
         }
     }
 
-    /* Method to test with Delete statement. */
-    @Test
-    public void testWithDeleteStatement()
+    @AfterClass
+    public static void stopServer() throws SQLException
+    {
+        if (con != null)
+        {
+            String[] stmts = 
+            {
+//                "TRUNCATE Standard1",
+//                "TRUNCATE JcbcAscii", // todo: this one is broken for some reason.
+                "TRUNCATE JdbcInteger",
+                "TRUNCATE JdbcLong",
+//                "TRUNCATE JdbcBytes",
+                "TRUNCATE JdbcUtf8",
+            };
+            for (String stmt : stmts)
     {
         try
         {
-            // Delete
-            final String deleteQ = "DELETE \"firstN\", \"lastN\" FROM Standard1 WHERE KEY=\"jsmith\"";
-            executeNoResults(con, deleteQ);
-            String updateSelect = "SELECT \"firstN\", \"lastN\" FROM Standard1 WHERE KEY=\"jsmith\"";
-            scrollResultset(executePreparedStatementWithResults(con, updateSelect), "firstN", "lastN");
+                    executeNoResults(con, stmt);
         } 
-        catch (SQLException e)
+                catch (SQLException ex)
         {
-            fail(e.getMessage());
+                    throw new SQLException(stmt, ex);
+                }
+            }
+            con.close();
+            con = null;
         }
     }
 
-    @Override
-    protected void tearDown()
+    // todo: check expected values as well.
+    /** iterates over a result set checking columns */
+    private static void checkResultSet(ResultSet rs, String accessor, int expectedRows, String... cols) throws SQLException
     {
+        int actualRows = 0;
+        assert rs != null;
+        while (rs.next())
+        {
+            actualRows++;
+            for (int c = 0; c < cols.length; c++)
+            {
+                // getString and getObject should always work.
+                assert rs.getString(cols[c]) != null;
+                assert rs.getString(c) != null;
+                assert rs.getObject(cols[c]) != null;
+                assert rs.getObject(c) != null;
+                
+                // now call the accessor.
         try
         {
-            if (con != null)
+                    Method byInt = rs.getClass().getDeclaredMethod("get" + accessor, int.class);
+                    byInt.setAccessible(true);
+                    assert byInt.invoke(rs, c) != null;
+                    
+                    Method byString = rs.getClass().getDeclaredMethod("get" + accessor, String.class);
+                    byString.setAccessible(true);
+                    assert byString.invoke(rs, cols[c]) != null;
+                }
+                catch (NoSuchMethodException ex)
             {
-                final String updateQ = "TRUNCATE Standard1";
-                executeNoResults(con, updateQ);
-                con.close();
-                con = null;
+                    throw new RuntimeException(ex);
             }
+                catch (IllegalAccessException ex)
+                {
+                    throw new RuntimeException(ex);
         } 
-        catch (SQLException e)
+                catch (InvocationTargetException ex) 
         {
-            fail(e.getMessage());
+                    throw new RuntimeException(ex);
         }
     }
-
-    /** iterates over a result set checking columns */
-    private static void scrollResultset(final ResultSet rSet, final String... columnNames) throws SQLException
-    {
-        assertNotNull(rSet);
-        while (rSet.next())
-        {
-            assertNotNull(rSet.getString(0));
-            for (String colName : columnNames)
-                assertNotNull(rSet.getString(colName));
         }
+        
+        assert actualRows == expectedRows;
     }
     
     /** executes a prepared statement */
