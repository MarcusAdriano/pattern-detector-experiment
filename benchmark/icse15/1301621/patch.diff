diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
index bcf4c3ad..c1ee437f 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
@@ -265,6 +265,22 @@ public	String	toString()
 
 	// INTERFACE METHODS
 
+	/**
+     * Run this constant action.
+     *
+     * @param activation the activation in which to run the action
+     * @throws StandardException if an error happens during execution
+     * of the action
+     */
+    public void executeConstantAction(Activation activation)
+            throws StandardException {
+        try {
+            executeConstantActionBody(activation);
+        } finally {
+            clearState();
+        }
+    }
+
 	/**
 	 *	This is the guts of the Execution-time logic for ALTER TABLE.
 	 *
@@ -272,15 +288,14 @@ public	String	toString()
 	 *
 	 * @exception StandardException		Thrown on failure
 	 */
-	public void	executeConstantAction(
-    Activation activation)
-        throws StandardException
-	{
-		LanguageConnectionContext   lcc = 
-            activation.getLanguageConnectionContext();
-		DataDictionary              dd = lcc.getDataDictionary();
-		DependencyManager           dm = dd.getDependencyManager();
-		TransactionController       tc = lcc.getTransactionExecute();
+    private void executeConstantActionBody(Activation activation)
+            throws StandardException {
+        // Save references to the main structures we need.
+        this.activation = activation;
+        lcc = activation.getLanguageConnectionContext();
+        dd = lcc.getDataDictionary();
+        dm = dd.getDependencyManager();
+        tc = lcc.getTransactionExecute();
 
 		int							numRows = 0;
         boolean						tableScanned = false;
@@ -626,6 +641,23 @@ else if (SanityManager.DEBUG)
 		}
 	}
 
+	/**
+     * Clear the state of this constant action.
+     */
+    private void clearState() {
+        // DERBY-3009: executeConstantAction() stores some of its state in
+        // instance variables instead of local variables for convenience.
+        // These variables should be cleared after the execution of the
+        // constant action has completed, so that the objects they reference
+        // can be garbage collected.
+        td = null;
+        lcc = null;
+        dd = null;
+        dm = null;
+        tc = null;
+        activation = null;
+    }
+
 	/**
 	 * Update statistics of either all the indexes on the table or only one
 	 * specific index depending on what user has requested.
diff --git a/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/memory/Derby3009Test.java b/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/memory/Derby3009Test.java
index e69de29b..82c86379 100644
--- a/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/memory/Derby3009Test.java
+++ b/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/memory/Derby3009Test.java
@@ -0,0 +1,71 @@
+/*
+ * Derby - Class org.apache.derbyTesting.functionTests.tests.memory.Derby3009Test
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.derbyTesting.functionTests.tests.memory;
+
+import java.sql.SQLException;
+import java.sql.Statement;
+import junit.framework.Test;
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
+import org.apache.derbyTesting.junit.TestConfiguration;
+
+/**
+ * Regression test for DERBY-3009 which caused OutOfMemoryError when creating
+ * many foreign key constraints on a table. Run the test with 16 MB heap to
+ * expose the problem.
+ */
+public class Derby3009Test extends BaseJDBCTestCase {
+    public Derby3009Test(String name) {
+        super(name);
+    }
+
+    public static Test suite() {
+        // The OOME happened in the engine, so run this test in embedded mode.
+        return new CleanDatabaseTestSetup(
+                TestConfiguration.embeddedSuite(Derby3009Test.class));
+    }
+
+    public void testTableWithManyForeignKeys() throws SQLException {
+        Statement s = createStatement();
+
+        // Create 50 tables with 50 columns each (plus primary key column).
+        final int tables = 50;
+        final int columns = 50;
+        for (int i = 1; i <= tables; i++) {
+            StringBuffer sql = new StringBuffer("create table d3009_t");
+            sql.append(i);
+            sql.append("(id int primary key");
+            for (int j = 1; j <= columns; j++) {
+                sql.append(", x").append(j).append(" int");
+            }
+            sql.append(")");
+            s.execute(sql.toString());
+        }
+
+        // Now add many foreign key constraints to table 50. Used to cause an
+        // OutOfMemoryError before DERBY-3009.
+        for (int i = 1; i <= tables; i++) {
+            s.execute("alter table d3009_t50 add constraint d3009_fk" + i +
+                      " foreign key(x" + i + ") references d3009_t" + i);
+        }
+    }
+}
diff --git a/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/memory/_Suite.java b/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/memory/_Suite.java
index 1c2d617e..dae49c9c 100644
--- a/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/memory/_Suite.java
+++ b/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/memory/_Suite.java
@@ -42,6 +42,7 @@ public static Test suite() throws Exception{
         suite.addTest(RolesDependencyTest.suite());
         suite.addTest(MemoryLeakFixesTest.suite());
         suite.addTest(XAMemTest.suite());
+        suite.addTest(Derby3009Test.suite());
         return suite;
     }
 }
