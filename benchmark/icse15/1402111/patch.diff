diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/vfmem/VirtualFile.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/vfmem/VirtualFile.java
index c606358b..7ba84de1 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/vfmem/VirtualFile.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/vfmem/VirtualFile.java
@@ -41,7 +41,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  * </ul>
  * <p>
  * When a method that requires access to the file data or to know if the file
- * exists or not, the assoicated data store is consulted.
+ * exists or not, the associated data store is consulted.
  */
 public class VirtualFile
         implements StorageFile {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/vfmem/VirtualRandomAccessFile.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/vfmem/VirtualRandomAccessFile.java
index ecb622d0..360d9785 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/vfmem/VirtualRandomAccessFile.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/vfmem/VirtualRandomAccessFile.java
@@ -25,7 +25,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.DataOutputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
-
 import org.apache.derby.io.StorageRandomAccessFile;
 
 /**
@@ -43,19 +42,19 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     /** Current position / file pointer. */
     private long fp;
     /** Stream used to read from the source entry. */
-    private BlockedByteArrayInputStream bIn;
+    private final BlockedByteArrayInputStream bIn;
     /** Data input stream on top of the source input stream. */
-    private DataInputStream dIs;
+    private final DataInputStream dIs;
     /**
      * Stream used to write into the source entry. Will be {@code null} if the
      * file is opened in read-only mode.
      */
-    private BlockedByteArrayOutputStream bOut;
+    private final BlockedByteArrayOutputStream bOut;
     /**
      * Data output stream on top of the source output stream. Will be
      * {@code null} if the file is opened in read-only mode.
      */
-    private DataOutputStream dOs;
+    private final DataOutputStream dOs;
 
     /**
      * Creates a new virtual random access file.
@@ -85,11 +84,9 @@ public VirtualRandomAccessFile(DataStoreEntry entry, boolean readOnly)
 
     public void close() throws IOException {
         dIs.close();
-        dIs = null;
         // If opened in read-only mode, the output streams are null.
         if (dOs != null) {
             dOs.close();
-            dOs = null;
         }
         fp = Long.MIN_VALUE;
     }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/VirtualFileTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/VirtualFileTest.java
index 01f66a2d..2626d8b3 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/VirtualFileTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/VirtualFileTest.java
@@ -336,6 +336,19 @@ public void testCreateRoot() {
         assertTrue(vf.isDirectory());
     }
 
+    /**
+     * Verify that the close() method of VirtualRandomAccessFile can be
+     * called more than once.
+     */
+    public void testCloseIdempotent() throws IOException {
+        DataStore store = getStore();
+        VirtualFile f = new VirtualFile("afile", store);
+        StorageRandomAccessFile raf = f.getRandomAccessFile("rw");
+        raf.close();
+        // The second close() used to throw NullPointerException (DERBY-5960)
+        raf.close();
+    }
+
     public static Test suite() {
         return new TestSuite(VirtualFileTest.class);
     }
