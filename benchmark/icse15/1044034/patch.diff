diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageService.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageService.java
index 589ffe7e..c3ab56bc 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageService.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageService.java
@@ -246,6 +246,7 @@ public Range getLocalPrimaryRange()
     public void finishBootstrapping()
     {
         isBootstrapMode = false;
+        setToken(getLocalToken());
         logger_.info("Bootstrap/move completed! Now serving reads.");
     }
 
@@ -256,6 +257,8 @@ public void setToken(Token token)
             logger_.debug("Setting token to {}", token);
         SystemTable.updateToken(token);
         tokenMetadata_.updateNormalToken(token, FBUtilities.getLocalAddress());
+        Gossiper.instance.addLocalApplicationState(ApplicationState.STATUS, valueFactory.normal(getLocalToken()));
+        setMode("Normal", false);
     }
 
     public StorageService()
@@ -395,6 +398,7 @@ public synchronized void initServer() throws IOException, org.apache.cassandra.c
             logger_.info("This node will not auto bootstrap because it is configured to be a seed node.");
 
         Token token;
+        boolean bootstrapped = false;
         if (DatabaseDescriptor.isAutoBootstrap()
             && !(DatabaseDescriptor.getSeeds().contains(FBUtilities.getLocalAddress()) || SystemTable.isBootstrapped()))
         {
@@ -414,6 +418,8 @@ public synchronized void initServer() throws IOException, org.apache.cassandra.c
             {
                 bootstrap(token);
                 assert !isBootstrapMode; // bootstrap will block until finished
+                bootstrapped = true;
+                SystemTable.setBootstrapped(true); // first startup is only chance to bootstrap
             }
             // else nothing to do, go directly to participating in ring
         }
@@ -440,10 +446,8 @@ public synchronized void initServer() throws IOException, org.apache.cassandra.c
             }
         } 
 
-        SystemTable.setBootstrapped(true); // first startup is only chance to bootstrap
+        if(!bootstrapped)
         setToken(token);
-        Gossiper.instance.addLocalApplicationState(ApplicationState.STATUS, valueFactory.normal(getLocalToken()));
-        setMode("Normal", false);
 
         assert tokenMetadata_.sortedTokens().size() > 0;
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index 2bb83f98..8bbe58ce 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -246,6 +246,7 @@ public Range getLocalPrimaryRange()
     public void finishBootstrapping()
     {
         isBootstrapMode = false;
+        setToken(getLocalToken());
         logger_.info("Bootstrap/move completed! Now serving reads.");
     }
 
@@ -256,6 +257,8 @@ public void setToken(Token token)
             logger_.debug("Setting token to {}", token);
         SystemTable.updateToken(token);
         tokenMetadata_.updateNormalToken(token, FBUtilities.getLocalAddress());
+        Gossiper.instance.addLocalApplicationState(ApplicationState.STATUS, valueFactory.normal(getLocalToken()));
+        setMode("Normal", false);
     }
 
     public StorageService()
@@ -395,6 +398,7 @@ public synchronized void initServer() throws IOException, org.apache.cassandra.c
             logger_.info("This node will not auto bootstrap because it is configured to be a seed node.");
 
         Token token;
+        boolean bootstrapped = false;
         if (DatabaseDescriptor.isAutoBootstrap()
             && !(DatabaseDescriptor.getSeeds().contains(FBUtilities.getLocalAddress()) || SystemTable.isBootstrapped()))
         {
@@ -414,6 +418,8 @@ public synchronized void initServer() throws IOException, org.apache.cassandra.c
             {
                 bootstrap(token);
                 assert !isBootstrapMode; // bootstrap will block until finished
+                bootstrapped = true;
+                SystemTable.setBootstrapped(true); // first startup is only chance to bootstrap
             }
             // else nothing to do, go directly to participating in ring
         }
@@ -440,10 +446,8 @@ public synchronized void initServer() throws IOException, org.apache.cassandra.c
             }
         } 
 
-        SystemTable.setBootstrapped(true); // first startup is only chance to bootstrap
+        if(!bootstrapped)
         setToken(token);
-        Gossiper.instance.addLocalApplicationState(ApplicationState.STATUS, valueFactory.normal(getLocalToken()));
-        setMode("Normal", false);
 
         assert tokenMetadata_.sortedTokens().size() > 0;
     }
