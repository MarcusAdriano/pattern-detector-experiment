diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/IndexReader.java b/lucene/java/trunk/src/java/org/apache/lucene/index/IndexReader.java
index 200306a5..9be6dc91 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/IndexReader.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/IndexReader.java
@@ -541,8 +541,8 @@ private void aquireWriteLock() throws IOException {
   public final synchronized void deleteDocument(int docNum) throws IOException {
     if(directoryOwner)
       aquireWriteLock();
-    doDelete(docNum);
     hasChanges = true;
+    doDelete(docNum);
   }
 
 
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/SegmentMerger.java b/lucene/java/trunk/src/java/org/apache/lucene/index/SegmentMerger.java
index 48ec8eb5..f55cd55f 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/SegmentMerger.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/SegmentMerger.java
@@ -348,9 +348,9 @@ private final int appendPostings(SegmentMergeInfo[] smis, int n)
           doc = docMap[doc];                      // map around deletions
         doc += base;                              // convert to merged space
 
-        if (doc < lastDoc)
+        if (lastDoc != 0 && doc <= lastDoc)
           throw new IllegalStateException("docs out of order (" + doc +
-              " < " + lastDoc + " )");
+              " <= " + lastDoc + " )");
 
         df++;
 
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/util/BitVector.java b/lucene/java/trunk/src/java/org/apache/lucene/util/BitVector.java
index f0c38604..d7797c8d 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/util/BitVector.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/util/BitVector.java
@@ -49,12 +49,18 @@ public BitVector(int n) {
 
   /** Sets the value of <code>bit</code> to one. */
   public final void set(int bit) {
+    if (bit >= size) {
+      throw new ArrayIndexOutOfBoundsException(bit);
+    }
     bits[bit >> 3] |= 1 << (bit & 7);
     count = -1;
   }
 
   /** Sets the value of <code>bit</code> to zero. */
   public final void clear(int bit) {
+    if (bit >= size) {
+      throw new ArrayIndexOutOfBoundsException(bit);
+    }
     bits[bit >> 3] &= ~(1 << (bit & 7));
     count = -1;
   }
@@ -62,6 +68,9 @@ public final void clear(int bit) {
   /** Returns <code>true</code> if <code>bit</code> is one and
     <code>false</code> if it is zero. */
   public final boolean get(int bit) {
+    if (bit >= size) {
+      throw new ArrayIndexOutOfBoundsException(bit);
+    }
     return (bits[bit >> 3] & (1 << (bit & 7))) != 0;
   }
 
@@ -147,7 +156,7 @@ private void writeDgaps(IndexOutput output) throws IOException {
     }
   }
 
-  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or desnse, and should be saved as a bit set. */
+  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */
   private boolean isSparse() {
     // note: order of comparisons below set to favor smaller values (no binary range search.)
     // note: adding 4 because we start with ((int) -1) to indicate d-gaps format.
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexReader.java b/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexReader.java
index 69a078c6..5e59de97 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexReader.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexReader.java
@@ -750,6 +750,45 @@ public void testDiskFull() throws IOException {
       }
     }
     
+    public void testDocsOutOfOrderJIRA140() throws IOException {
+      Directory dir = new RAMDirectory();      
+      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);
+      for(int i=0;i<11;i++) {
+        addDoc(writer, "aaa");
+      }
+      writer.close();
+      IndexReader reader = IndexReader.open(dir);
+
+      // Try to delete an invalid docId, yet, within range
+      // of the final bits of the BitVector:
+
+      boolean gotException = false;
+      try {
+        reader.deleteDocument(11);
+      } catch (ArrayIndexOutOfBoundsException e) {
+        gotException = true;
+      }
+      reader.close();
+
+      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false);
+
+      // We must add more docs to get a new segment written
+      for(int i=0;i<11;i++) {
+        addDoc(writer, "aaa");
+      }
+
+      try {
+        writer.optimize();
+      } catch (IllegalStateException e) {
+        e.printStackTrace();
+        fail("hit unexpected illegal state exception during optimize");
+      }
+
+      if (!gotException) {
+        fail("delete of out-of-bounds doc number failed to hit exception");
+      }
+    }
+    
     private String arrayToString(String[] l) {
       String s = "";
       for(int i=0;i<l.length;i++) {
