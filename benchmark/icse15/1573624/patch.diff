diff --git a/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/Agent.java b/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/Agent.java
index ef50f753..a4f98181 100644
--- a/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/Agent.java
+++ b/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/Agent.java
@@ -264,7 +264,8 @@ public final void disconnectEvent() {
         connection_.completeChainBreakingDisconnect();
     }
     
-    abstract public void beginWriteChainOutsideUOW() throws SqlException;
+    public void beginWriteChainOutsideUOW() throws SqlException {
+    }
 
     public void beginWriteChain(Statement statement) throws SqlException {
         connection_.writeTransactionStart(statement);
@@ -274,10 +275,10 @@ public final void beginBatchedWriteChain(Statement statement) throws SqlExceptio
         beginWriteChain(statement);
     }
 
-    abstract protected void endWriteChain();
+    protected void endWriteChain() {
+    }
 
     protected final void endBatchedWriteChain() {
-        endWriteChain();
     }
 
     protected void beginReadChain(Statement statement) throws SqlException {
diff --git a/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/BlobLocatorInputStream.java b/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/BlobLocatorInputStream.java
index 764b4afe..3f66be04 100644
--- a/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/BlobLocatorInputStream.java
+++ b/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/BlobLocatorInputStream.java
@@ -178,10 +178,9 @@ public int read(byte[] b, int off, int len) throws IOException
             currentPos += result.length;
             return result;       
         } catch (SqlException ex) {
-            // Passing cause as ctor argument ensures that the IOException 
-            // inherits the cause's message, (unlike invoking initCause() on a 
-            // default-constructed IOException).
-            throw new IOException(ex);
+            IOException ioEx = new IOException();
+            ioEx.initCause(ex);
+            throw ioEx;
         }
     }
 
diff --git a/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/ClobLocatorInputStream.java b/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/ClobLocatorInputStream.java
index 9217e8ed..e1fad2be 100644
--- a/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/ClobLocatorInputStream.java
+++ b/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/ClobLocatorInputStream.java
@@ -150,10 +150,9 @@ public int read(byte[] b, int off, int len) throws IOException {
             currentPos += result.length;
             return result;
         } catch (SqlException ex) {
-            // Passing cause as ctor argument ensures that the IOException 
-            // inherits the cause's message, (unlike invoking initCause() on a 
-            // default-constructed IOException).
-            throw new IOException(ex);
+            IOException ioEx = new IOException();
+            ioEx.initCause(ex);
+            throw ioEx;
         }
     }
 
diff --git a/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/ClobLocatorReader.java b/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/ClobLocatorReader.java
index 8c8b39ca..9de7e2c9 100644
--- a/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/ClobLocatorReader.java
+++ b/db/derby/code/branches/10.10/java/client/org/apache/derby/client/am/ClobLocatorReader.java
@@ -226,10 +226,9 @@ private void checkClosed() throws IOException {
             currentPos += result.length;
             return result;
         } catch (SqlException ex) {
-            // Passing cause as ctor argument ensures that the IOException 
-            // inherits the cause's message, (unlike invoking initCause() on a 
-            // default-constructed IOException).
-            throw new IOException(ex);
+            IOException ioEx = new IOException();
+            ioEx.initCause(ex);
+            throw ioEx;
         }
     }
 }
diff --git a/db/derby/code/branches/10.10/java/client/org/apache/derby/client/net/NetAgent.java b/db/derby/code/branches/10.10/java/client/org/apache/derby/client/net/NetAgent.java
index efc188ee..8dea5cfc 100644
--- a/db/derby/code/branches/10.10/java/client/org/apache/derby/client/net/NetAgent.java
+++ b/db/derby/code/branches/10.10/java/client/org/apache/derby/client/net/NetAgent.java
@@ -102,13 +102,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     public SqlException exceptionOpeningSocket_ = null;
     public SqlException exceptionConvertingRdbnam = null;
     
-    /**
-     * Flag which indicates that a writeChain has been started and data sent to
-     * the server.
-     * If true, starting a new write chain will throw a DisconnectException. 
-     * It is cleared when the write chain is ended.
-     */
-    private boolean writeChainIsDirty_ = false;
     //---------------------constructors/finalizer---------------------------------
     public NetAgent(NetConnection netConnection,
                     org.apache.derby.client.am.LogWriter logWriter) throws SqlException {
@@ -468,40 +461,22 @@ private void writeDeferredResetConnection() throws SqlException {
             throw de;
         }
     }
-    /**
-     * Marks the agent's write chain as dirty. A write chain is dirty when data
-     * from it has been sent to the server. A dirty write chain cannot be reset 
-     * and reused for another request until the remaining data has been sent to
-     * the server and the write chain properly ended. 
-     * 
-     * Resetting a dirty chain will cause the new request to be appended to the 
-     * unfinished request already at the server, which will likely lead to 
-     * cryptic syntax errors.
-     */
-    void markWriteChainAsDirty() {    
-        writeChainIsDirty_ = true;
-    }
     
-    private void verifyWriteChainIsClean() throws DisconnectException {
-        if (writeChainIsDirty_) { 
-            throw new DisconnectException(this, 
-                new ClientMessageId(SQLState.NET_WRITE_CHAIN_IS_DIRTY));
-        }
-    }
     public void beginWriteChainOutsideUOW() throws SqlException {
-        verifyWriteChainIsClean();
         request_.initialize();
         writeDeferredResetConnection();
+        super.beginWriteChainOutsideUOW();
     }
 
     public void beginWriteChain(org.apache.derby.client.am.Statement statement) throws SqlException {
-        verifyWriteChainIsClean();
         request_.initialize();
         writeDeferredResetConnection();
         super.beginWriteChain(statement);
     }
 
-    protected void endWriteChain() {}
+    protected void endWriteChain() {
+        super.endWriteChain();
+    }
     
     private void readDeferredResetConnection() throws SqlException {
         if (!netConnection_.resetConnectionAtFirstSql_) {
@@ -519,19 +494,19 @@ private void readDeferredResetConnection() throws SqlException {
     }
 
     protected void beginReadChain(org.apache.derby.client.am.Statement statement) throws SqlException {
-        // Clear here as endWriteChain may not always be called
-        writeChainIsDirty_ = false;
         readDeferredResetConnection();
         super.beginReadChain(statement);
     }
 
     protected void beginReadChainOutsideUOW() throws SqlException {
-        // Clear here as endWriteChain may not always be called
-        writeChainIsDirty_ = false;
         readDeferredResetConnection();
         super.beginReadChainOutsideUOW();
     }
 
+    public void endReadChain() throws SqlException {
+        super.endReadChain();
+    }
+
     /**
      * Switches the current CCSID manager to UTF-8
      */
diff --git a/db/derby/code/branches/10.10/java/client/org/apache/derby/client/net/Request.java b/db/derby/code/branches/10.10/java/client/org/apache/derby/client/net/Request.java
index 602f7e44..9b96378d 100644
--- a/db/derby/code/branches/10.10/java/client/org/apache/derby/client/net/Request.java
+++ b/db/derby/code/branches/10.10/java/client/org/apache/derby/client/net/Request.java
@@ -36,7 +36,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.UnsupportedEncodingException;
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
-import org.apache.derby.shared.common.error.ExceptionUtil;
 
 
 public class Request {
@@ -319,27 +318,7 @@ final private void writePlainScalarStream(boolean chained,
                 try {
                     bytesRead =
                         in.read(buffer.array(), buffer.position(), bytesToRead);
-                } catch (IOException ioe) {
-                    if (netAgent_.getOutputStream() == null) {
-                        // The exception has taken down the connection, so we 
-                        // check if it was caused by attempting to 
-                        // read the stream from our own connection...
-                        for (Throwable t = ioe; t != null; t = t.getCause()) {
-                            if (t instanceof SqlException
-                                    && ((SqlException) t).getSQLState().equals(ExceptionUtil.getSQLStateFromIdentifier(SQLState.NET_WRITE_CHAIN_IS_DIRTY))) {
-                                throw new SqlException(netAgent_.logWriter_,
-                                        new ClientMessageId(SQLState.NET_LOCATOR_STREAM_PARAMS_NOT_SUPPORTED),
-                                        ioe, parameterIndex);
-                            }
-                        }
-                        // Something else has killed the connection, fast forward to despair...
-                        throw new SqlException(netAgent_.logWriter_,
-                                new ClientMessageId(SQLState.NET_DISCONNECT_EXCEPTION_ON_READ),
-                                ioe, parameterIndex, ioe.getMessage());
-                    }
-                    // The OutPutStream is still intact so try to finish request
-                    // with what we managed to read
-
+                } catch (Exception e) {
                     status = DRDAConstants.STREAM_READ_ERROR;
                     padScalarStreamForError(leftToRead, bytesToRead,
                             writeEXTDTAStatusByte, status);
@@ -348,7 +327,7 @@ final private void writePlainScalarStream(boolean chained,
                         new SqlException(
                             netAgent_.logWriter_,
                             new ClientMessageId(SQLState.NET_EXCEPTION_ON_READ),
-                            parameterIndex, ioe.getMessage(), ioe));
+                            parameterIndex, e.getMessage(), e));
 
                     return;
                 }
@@ -1228,7 +1207,6 @@ protected void flush(java.io.OutputStream socketOutputStream) throws java.io.IOE
 
     protected void sendBytes(java.io.OutputStream socketOutputStream) throws java.io.IOException {
         try {
-            netAgent_.markWriteChainAsDirty();
             socketOutputStream.write(buffer.array(), 0, buffer.position());
             socketOutputStream.flush();
         } finally {
diff --git a/db/derby/code/branches/10.10/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/branches/10.10/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index 95251806..12dd4639 100644
--- a/db/derby/code/branches/10.10/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/branches/10.10/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -1620,9 +1620,6 @@ The message identifier (ie. the value that matches a field in this class)
     String NET_XARETVAL_ERROR                                       = "XN019.S";
     String NET_MARSHALLING_UDT_ERROR                     = "XN020.S";
     String NET_UDT_COERCION_ERROR                               = "XN021.S";
-    String NET_WRITE_CHAIN_IS_DIRTY                                 = "XN022.C";
-    String NET_LOCATOR_STREAM_PARAMS_NOT_SUPPORTED                  = "XN023.C";
-    String NET_DISCONNECT_EXCEPTION_ON_READ                         = "XN024.C";
     
     // XML - Derby-specific XML errors not covered by
     // SQL standard.
diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java
index 6140f6e5..77657189 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java
@@ -201,9 +201,6 @@ public void test_errorcode() throws Exception
         		{"XJ05B","JDBC attribute '{0}' has an invalid value '{1}', valid values are '{2}'.","40000"},
         		{"XJ081","Conflicting create/restore/recovery attributes specified.","40000"},
         		{"XJ213","The traceLevel connection property does not have a valid format for a number.","40000"},
-        		{"XN022","A write chain that has transmitted data to the server cannot be reset until the request is finished and the chain terminated.","40000"},
-        		{"XN023","The stream specified by parameter #{0} is locator-based and requires a nested request on the same connection to be materialized. This is not supported.","40000"},
-        		{"XN024","Encountered an exception which terminated the connection, while reading from the stream specified by parameter #{0}. The Exception had this message: '{1}'.","40000"},
         		{"XRE20","Failover performed successfully for database '{0}', the database has been shutdown.","45000"},
         		{"XSDB0","Unexpected exception on in-memory page {0}","45000"},
         		{"XSDB1","Unknown page format at page {0}","45000"},
diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java
index d04c2c26..f187d887 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java
@@ -1082,22 +1082,18 @@ private void selectUpdateClob(String testId,
         long dlen = rs.getLong(2);
         assertEquals("FAIL - MISMATCH LENGTHS GOT " + l + " expected "
                 + dlen + " for row in CLOBTBL with ID=" + id, dlen, l);
-                
-        PreparedStatement psUpd =
-                prepareStatement("update CLOBTBL set content=?, "
-                + "dlen =? where id = ?");
-        psUpd.setCharacterStream(1, value.getCharacterStream(), (int) l);
-        psUpd.setLong(2, l);
-        psUpd.setInt(3, updateId);
-        if (usingDerbyNetClient()) {
             // DERBY-5317 cannot use setCharacterStream with value from
             // Clob.getCharacterStream because server will try to stream
             // lob to and from server at the same time. setClob can be
             // used as a work around.
-            // Verify that new error is thrown 
-            assertPreparedStatementError("XN023", psUpd);
-            return;
-        } else {
+        if (!usingDerbyNetClient()) {
+            PreparedStatement psUpd =
+                    prepareStatement("update CLOBTBL set content=?, " +
+                            "dlen =? where id = ?");
+            psUpd.setCharacterStream(1, value.getCharacterStream(), (int) l);
+            psUpd.setLong(2, l);
+            psUpd.setInt(3, updateId);
+
             assertUpdateCount(psUpd, 1);
         }
         commit();
