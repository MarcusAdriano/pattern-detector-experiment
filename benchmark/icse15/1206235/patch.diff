diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
index 70727492..999b3f8c 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
@@ -86,7 +86,7 @@ public void doVerb(Message message, String id)
     private void forwardToLocalNodes(Message message, byte[] forwardBytes) throws UnknownHostException
     {
         // remove fwds from message to avoid infinite loop
-        Message messageCopy = message.withHeaderRemoved(RowMutation.FORWARD_HEADER);
+        message.removeHeader(RowMutation.FORWARD_HEADER);
 
         int bytesPerInetAddress = FBUtilities.getLocalAddress().getAddress().length;
         assert forwardBytes.length >= bytesPerInetAddress;
@@ -106,7 +106,7 @@ private void forwardToLocalNodes(Message message, byte[] forwardBytes) throws Un
 
             // Send the original message to the address specified by the FORWARD_HINT
             // Let the response go back to the coordinator
-            MessagingService.instance().sendOneWay(messageCopy, address);
+            MessagingService.instance().sendOneWay(message, address);
 
             offset += bytesPerInetAddress;
         }
diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/net/Header.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/net/Header.java
index 44477426..491e6917 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/net/Header.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/net/Header.java
@@ -22,7 +22,6 @@
 import java.io.DataOutputStream;
 import java.io.IOException;
 import java.net.InetAddress;
-import java.util.Collections;
 import java.util.Hashtable;
 import java.util.Map;
 import java.util.Set;
@@ -31,9 +30,6 @@
 import org.apache.cassandra.io.ICompactSerializer;
 import org.apache.cassandra.service.StorageService;
 
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.Maps;
-
 public class Header
 {
     private static ICompactSerializer<Header> serializer_;
@@ -51,21 +47,21 @@
     private final InetAddress from_;
     // TODO STAGE can be determined from verb
     private final StorageService.Verb verb_;
-    protected final Map<String, byte[]> details_;
+    protected Map<String, byte[]> details_ = new Hashtable<String, byte[]>();
 
     Header(InetAddress from, StorageService.Verb verb)
-    {
-        this(from, verb, Collections.<String, byte[]>emptyMap());
-    }
-
-    Header(InetAddress from, StorageService.Verb verb, Map<String, byte[]> details)
     {
         assert from != null;
         assert verb != null;
 
         from_ = from;
         verb_ = verb;
-        details_ = ImmutableMap.copyOf(details);
+    }
+
+    Header(InetAddress from, StorageService.Verb verb, Map<String, byte[]> details)
+    {
+        this(from, verb);
+        details_ = details;
     }
 
     InetAddress getFrom()
@@ -83,20 +79,14 @@ InetAddress getFrom()
         return details_.get(key);
     }
 
-    Header withDetailsAdded(String key, byte[] value)
+    void setDetail(String key, byte[] value)
     {
-        Map<String, byte[]> detailsCopy = Maps.newHashMap(details_);
-        detailsCopy.put(key, value);
-        return new Header(from_, verb_, detailsCopy);
+        details_.put(key, value);
     }
 
-    Header withDetailsRemoved(String key)
+    void removeDetail(String key)
     {
-        if (!details_.containsKey(key))
-            return this;
-        Map<String, byte[]> detailsCopy = Maps.newHashMap(details_);
-        detailsCopy.remove(key);
-        return new Header(from_, verb_, detailsCopy);
+        details_.remove(key);
     }
 }
 
diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/net/Message.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/net/Message.java
index 7f674e1e..62bf6f94 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/net/Message.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/net/Message.java
@@ -66,14 +66,14 @@ public Message(InetAddress from, StorageService.Verb verb, byte[] body, int vers
         return header_.getDetail(key);
     }
     
-    public Message withHeaderAdded(String key, byte[] value)
+    public void setHeader(String key, byte[] value)
     {
-        return new Message(header_.withDetailsAdded(key, value), body_, version);
+        header_.setDetail(key, value);
     }
     
-    public Message withHeaderRemoved(String key)
+    public void removeHeader(String key)
     {
-        return new Message(header_.withDetailsRemoved(key), body_, version);
+        header_.removeDetail(key);
     }
 
     public byte[] getMessageBody()
diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/service/StorageProxy.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/service/StorageProxy.java
index b462c4bb..153744a3 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -273,7 +273,7 @@ public static void sendToHintedEndpoints(final RowMutation rm, Multimap<InetAddr
                 {
                     if (!target.equals(destination))
                     {
-                        hintedMessage = addHintHeader(hintedMessage, target);
+                        addHintHeader(hintedMessage, target);
                         if (logger.isDebugEnabled())
                             logger.debug("insert writing key " + ByteBufferUtil.bytesToHex(rm.key()) + " to " + destination + " for " + target);
                     }
@@ -304,7 +304,7 @@ private static void sendMessages(String localDataCenter, Map<String, Multimap<Me
                 Message message = messages.getKey();
                 // a single message object is used for unhinted writes, so clean out any forwards
                 // from previous loop iterations
-                message = message.withHeaderRemoved(RowMutation.FORWARD_HEADER);
+                message.removeHeader(RowMutation.FORWARD_HEADER);
 
                 if (dataCenter.equals(localDataCenter))
                 {
@@ -318,14 +318,21 @@ private static void sendMessages(String localDataCenter, Map<String, Multimap<Me
                     Iterator<InetAddress> iter = messages.getValue().iterator();
                     InetAddress target = iter.next();
                     // Add all the other destinations of the same message as a header in the primary message.
-                    ByteArrayOutputStream bos = new ByteArrayOutputStream();
-                    DataOutputStream dos = new DataOutputStream(bos);
                     while (iter.hasNext())
                     {
                         InetAddress destination = iter.next();
+                        // group all nodes in this DC as forward headers on the primary message
+                        ByteArrayOutputStream bos = new ByteArrayOutputStream();
+                        DataOutputStream dos = new DataOutputStream(bos);
+
+                        // append to older addresses
+                        byte[] previousHints = message.getHeader(RowMutation.FORWARD_HEADER);
+                        if (previousHints != null)
+                            dos.write(previousHints);
+
                         dos.write(destination.getAddress());
+                        message.setHeader(RowMutation.FORWARD_HEADER, bos.toByteArray());
                     }
-                    message = message.withHeaderAdded(RowMutation.FORWARD_HEADER, bos.toByteArray());
                     // send the combined message + forward headers
                     MessagingService.instance().sendRR(message, target, handler);
                 }
@@ -333,7 +340,7 @@ private static void sendMessages(String localDataCenter, Map<String, Multimap<Me
         }
     }
 
-    private static Message addHintHeader(Message message, InetAddress target) throws IOException
+    private static void addHintHeader(Message message, InetAddress target) throws IOException
     {
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         DataOutputStream dos = new DataOutputStream(bos);
@@ -343,7 +350,7 @@ private static Message addHintHeader(Message message, InetAddress target) throws
             dos.write(previousHints);
         }
         ByteBufferUtil.writeWithShortLength(ByteBufferUtil.bytes(target.getHostAddress()), dos);
-        return message.withHeaderAdded(RowMutation.HINT, bos.toByteArray());
+        message.setHeader(RowMutation.HINT, bos.toByteArray());
     }
 
     private static void insertLocal(final RowMutation rm, final IWriteResponseHandler responseHandler)
