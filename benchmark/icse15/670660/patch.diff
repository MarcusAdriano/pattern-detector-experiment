diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java
index 1210cbd3..c68b747a 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignatures.java
@@ -643,4 +643,82 @@ Licensed to the Apache Software Foundation (ASF) under one or more
          )
     { return c; }
 
+    //
+    // BINARY
+    //
+    
+    // legal resolutions
+
+    public  static  byte[]  binary_bytes_bytes( byte[] a ) { return a; }
+    public  static  byte[]  binary_bytes_bytes( byte a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  binary_bytes_bytes( int a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  binary_bytes_bytes( long a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  binary_bytes_bytes( float a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  binary_bytes_bytes( double a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  binary_bytes_bytes( Byte a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  binary_bytes_bytes( Short a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  binary_bytes_bytes( Long a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  binary_bytes_bytes( Float a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  binary_bytes_bytes( Double a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  binary_bytes_bytes( BigDecimal a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  binary_bytes_bytes( String a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  binary_bytes_bytes( Object a ) { return new byte[] { (byte) -1 }; }
+
+    public  static  byte[]  binary_bytes_int( int a ) { return new byte[] { (byte) a }; }
+
+    // bad return type
+    public  static  int  binary_badreturn_bytes_bytes( byte[] a ) { return -1; }
+    
+    //
+    // VARBINARY
+    //
+    
+    // legal resolutions
+
+    public  static  byte[]  varbinary_bytes_bytes( byte[] a ) { return a; }
+    public  static  byte[]  varbinary_bytes_bytes( byte a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  varbinary_bytes_bytes( int a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  varbinary_bytes_bytes( long a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  varbinary_bytes_bytes( float a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  varbinary_bytes_bytes( double a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  varbinary_bytes_bytes( Byte a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  varbinary_bytes_bytes( Short a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  varbinary_bytes_bytes( Long a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  varbinary_bytes_bytes( Float a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  varbinary_bytes_bytes( Double a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  varbinary_bytes_bytes( BigDecimal a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  varbinary_bytes_bytes( String a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  varbinary_bytes_bytes( Object a ) { return new byte[] { (byte) -1 }; }
+
+    public  static  byte[]  varbinary_bytes_int( int a ) { return new byte[] { (byte) a }; }
+
+    // bad return type
+    public  static  int  varbinary_badreturn_bytes_bytes( byte[] a ) { return -1; }
+    
+
+    //
+    // LONGVARBINARY
+    //
+    
+    // legal resolutions
+
+    public  static  byte[]  longvarbinary_bytes_bytes( byte[] a ) { return a; }
+    public  static  byte[]  longvarbinary_bytes_bytes( byte a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  longvarbinary_bytes_bytes( int a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  longvarbinary_bytes_bytes( long a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  longvarbinary_bytes_bytes( float a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  longvarbinary_bytes_bytes( double a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  longvarbinary_bytes_bytes( Byte a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  longvarbinary_bytes_bytes( Short a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  longvarbinary_bytes_bytes( Long a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  longvarbinary_bytes_bytes( Float a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  longvarbinary_bytes_bytes( Double a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  longvarbinary_bytes_bytes( BigDecimal a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  longvarbinary_bytes_bytes( String a ) { return new byte[] { (byte) -1 }; }
+    public  static  byte[]  longvarbinary_bytes_bytes( Object a ) { return new byte[] { (byte) -1 }; }
+
+    public  static  byte[]  longvarbinary_bytes_int( int a ) { return new byte[] { (byte) a }; }
+
+    // bad return type
+    public  static  int  longvarbinary_badreturn_bytes_bytes( byte[] a ) { return -1; }
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java
index 6049fd68..9010a88d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java
@@ -272,6 +272,48 @@ public  void    test_flipped_bigint__smallint_int_bigint_real_double()
              );
     }
 
+    public  void    test_binary_bytes_bytes()
+        throws Exception
+    {
+        declareAndRunFunction
+            ( "binary_bytes_bytes", "char( 2 ) for bit data", new String[] { "char( 2 ) for bit data" }, "X'a1b2'", "a1b2" );
+    }
+
+    public  void    test_binary_bytes_int()
+        throws Exception
+    {
+        declareAndRunFunction
+            ( "binary_bytes_int", "char( 1 ) for bit data", new String[] { "integer" }, "3", "03" );
+    }
+
+    public  void    test_varbinary_bytes_bytes()
+        throws Exception
+    {
+        declareAndRunFunction
+            ( "varbinary_bytes_bytes", "varchar( 2 ) for bit data", new String[] { "varchar( 2 ) for bit data" }, "X'a1b2'", "a1b2" );
+    }
+
+    public  void    test_varbinary_bytes_int()
+        throws Exception
+    {
+        declareAndRunFunction
+            ( "varbinary_bytes_int", "char( 1 ) for bit data", new String[] { "integer" }, "3", "03" );
+    }
+
+    public  void    test_longvarbinary_bytes_bytes()
+        throws Exception
+    {
+        declareAndRunFunction
+            ( "longvarbinary_bytes_bytes", "long varchar for bit data", new String[] { "varchar(2) for bit data" }, "X'a1b2'", "a1b2" );
+    }
+
+    public  void    test_longvarbinary_bytes_int()
+        throws Exception
+    {
+        declareAndRunFunction
+            ( "longvarbinary_bytes_int", "long varchar for bit data", new String[] { "integer" }, "3", "03" );
+    }
+
     ///////////////////////////////////////////////////////////////////////////////////
     //
     // SHOULD NOT RESOLVE
@@ -338,6 +380,27 @@ public  void    test_double_badreturn_byte_double()
             ( "double_badreturn_byte_double", "double", new String[] { "double" }, "3.0", "3.0", TRIED_ALL_COMBINATIONS );
     }
 
+     public  void    test_binary_badreturn_bytes_bytes()
+        throws Exception
+    {
+        declareAndFailFunction
+            ( "binary_badreturn_bytes_bytes", "char( 2 ) for bit data", new String[] { "char( 2 ) for bit data" }, "X'a1b2'", "a1b2", TRIED_ALL_COMBINATIONS );
+    }
+
+     public  void    test_varbinary_badreturn_bytes_bytes()
+        throws Exception
+    {
+        declareAndFailFunction
+            ( "varbinary_badreturn_bytes_bytes", "varchar( 2 ) for bit data", new String[] { "varchar( 2 ) for bit data" }, "X'a1b2'", "a1b2", TRIED_ALL_COMBINATIONS );
+    }
+
+     public  void    test_longvarbinary_badreturn_bytes_bytes()
+        throws Exception
+    {
+        declareAndFailFunction
+            ( "longvarbinary_badreturn_bytes_bytes", "long varchar for bit data", new String[] { "char( 2 ) for bit data" }, "X'a1b2'", "a1b2", TRIED_ALL_COMBINATIONS );
+    }
+
     ///////////////////////////////////////////////////////////////////////////////////
     //
     // AMBIGUOUS METHODS
