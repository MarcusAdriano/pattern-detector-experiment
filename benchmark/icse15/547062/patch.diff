diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/DirFile.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/DirFile.java
index 2c909721..dfb223c3 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/DirFile.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/DirFile.java
@@ -196,19 +196,6 @@ public synchronized void releaseExclusiveFileLock()
 		}
 	} // End of releaseExclusiveFileLock
 
-    
-    /**
-     * Return Random Acess file to the lock file, that is used to 
-     * get the exclusing file lock.  File locks are not acquired on 
-     * jvms before jdk14, this method just return <code> null </code>. 
-     *
-     * @return null, there is opened lock file. 
-     */
-    public StorageRandomAccessFile getLockedFile() {
-        return null;
-    }
-
-
     /**
      * Get a random access (read/write) file.
      *
@@ -267,11 +254,6 @@ public boolean deleteAll()
         {
             String[] childList = super.list();
             String parentName = getPath();
-            // temporary workaround for DERBY-2649. check for null, 
-            // if a directory disappears after checking if it is 
-            // a directory but before the list() is called. list() call will
-            // return null if directory does not exist.
-            if (childList != null) {
                 for( int i = 0; i < childList.length; i++)
                 {
                     if( childList[i].equals( ".") || childList[i].equals( ".."))
@@ -281,7 +263,6 @@ public boolean deleteAll()
                         return false;
                 }
             }
-        }
         return delete();
     } // end of deleteAll
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/DirFile4.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/DirFile4.java
index 0a4cf8a0..e94f9675 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/DirFile4.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/DirFile4.java
@@ -150,7 +150,7 @@ public synchronized int getExclusiveFileLock()
 			//If we can acquire a reliable exclusive lock , try to get it.
 			if(validExclusiveLock)
 			{
-				lockFileOpen = new DirRandomAccessFile4((File) this, "rw");
+				lockFileOpen = new RandomAccessFile((File) this, "rw");
 				lockFileChannel = lockFileOpen.getChannel();
 				dbLock =lockFileChannel.tryLock();
 				if(dbLock == null)
@@ -163,6 +163,8 @@ public synchronized int getExclusiveFileLock()
 				}
 				else
 				{	
+					lockFileOpen.writeInt(EXCLUSIVE_FILE_LOCK);
+					lockFileChannel.force(true);
 					status = EXCLUSIVE_FILE_LOCK;
 				}
 			}
@@ -219,20 +221,6 @@ public synchronized void releaseExclusiveFileLock()
 			// problem is
 		}
 	} // End of releaseExclusiveFileLock
-    /**
-     * Return Random Acess file to the lock file, that is used to 
-     * get the exclusing e lock obtained with getExclusiveFileLock(). It can be used  read/write data 
-     * from/to the lock file. 
-     * @return Random access File object used to get the exclusive lock or null 
-     * <code> null </code> if there was no call to getExclusiveFile() lock or 
-     * the call to getExcclusiveFileLock was not successful
-     * 
-     * @see #getExclusiveFileLock
-     */
-    public StorageRandomAccessFile getLockedFile() {    	
-        return (StorageRandomAccessFile) lockFileOpen;
-    }
-
 
     /**
      * Get a random access (read/write) file.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/InputStreamFile.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/InputStreamFile.java
index c47a5a72..7b3687de 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/InputStreamFile.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/InputStreamFile.java
@@ -382,18 +382,6 @@ public int getExclusiveFileLock()
 	public void releaseExclusiveFileLock()
     {}
 
-    /**
-     * Return Random Acess file to the lock file, that is used to 
-     * get the exclusing file lock.  File locks are not supported 
-     * for this type of file, his method just return <code> null </code>. 
-     *
-     * @return null, there is no locked file. 
-     */
-    public StorageRandomAccessFile getLockedFile() {
-        return null;
-    }
-
-
     /**
      * Get a random access file.
      *
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/TopService.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/TopService.java
index 770acb59..e243bda9 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/TopService.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/TopService.java
@@ -296,6 +296,7 @@ Object bootModule(boolean create, Object service, ProtocolKey key, Properties pr
 
 		synchronized (this) {
 
+
 			// add it to the protocol table, if this returns false then we can't use
 			// this module, shut it down.
 			if (addToProtocol(key, module)) {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
index 69698a95..9fd70891 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
@@ -147,8 +147,8 @@ Currently only getContainerClass() is abstract, there are probably more
 
 	private     RawStoreFactory	rawStoreFactory; // associated raw store factory
 
-
 	private     String			dataDirectory;	 // root directory of files.
+
     private     boolean         throwDBlckException; // if true throw db.lck
                                                  // exception, even on systems
                                                  // where lock file is not
@@ -235,11 +235,6 @@ Currently only getContainerClass() is abstract, there are probably more
     private File            backupRoot;
     private String[]        bfilelist;
 
-
-    /* derby jvm instance id used to prevent concurrent intra-jvm 
-     * boots of a database */   
-    private static final String DERBY_JVM_ID = "derby.storage.jvmInstanceId";
-
 	/*
 	** Constructor
 	*/
@@ -1879,10 +1874,7 @@ private void getJBMSLockOnDB(
 		// fileLockOnDB is not null in this case
 	}
 
-  
-    /**
-     * @throws StandardException
-     */
+    // Called from within a privilege block
     private void privGetJBMSLockOnDB() throws StandardException
     {
         boolean fileLockExisted = false;
@@ -2061,23 +2053,7 @@ private void privGetJBMSLockOnDB() throws StandardException
                     databaseDirectory);
             }
 
-            /* if it reached here means, db is protected from 
-             * being booted by multiple jvm instances. But file lock method 
-             * used to do that does not protect a db being booted by another 
-             * class loader in the same jvm. Get a lock that will
-             * protect the db being booted by another class loader, if 
-             * it is not booted by another class loader already.
-             */
-            try {
-                getIntraJvmDbLock();
-            }catch (IOException ioe) {
-                throw StandardException.newException(
-                   SQLState.DATA_MULTIPLE_CLASSLOADERS_ON_DB, 
-                   ioe, databaseDirectory);
-            }
         }
-
-
     } // end of privGetJBMSLockOnDB
 
 	private void releaseJBMSLockOnDB()
@@ -2104,7 +2080,7 @@ private void releaseJBMSLockOnDB()
         }
 	}
 
-    private void privReleaseJBMSLockOnDB() throws IOException, StandardException
+    private void privReleaseJBMSLockOnDB() throws IOException
     {
         if (fileLockOnDB != null)
             fileLockOnDB.close();
@@ -2117,15 +2093,11 @@ private void privReleaseJBMSLockOnDB() throws IOException, StandardException
             fileLock.delete();
         }
         
-		// release the lock that is acquired using tryLock() to prevent
-		// multiple jvm booting the same database on Unix environments.
-		if(exFileLock != null) {
-            // release the intra-jvm lock, that is used 
-            // to prevent database boots from a different class 
-            // loaders in the same jvm.
-            releaseIntraJvmDbLock();
+		//release the lock that is acquired using tryLock() to prevent
+		//multiple jvm booting the same database on Unix environments.
+		if(exFileLock != null)
 			exFileLock.releaseExclusiveFileLock();
-        }
+
         return;
     } // end of privReleaseJBMSLockOnDB
         
@@ -2848,12 +2820,7 @@ public final Object run() throws Exception
         }
 
         case GET_LOCK_ON_DB_ACTION:
-        	File dataDir = new File (dataDirectory);
-        	String baseName= dataDir.getName().intern();
-            synchronized(baseName) 
-            {   
             	privGetJBMSLockOnDB();
-            }
             return null;
 
         case RELEASE_LOCK_ON_DB_ACTION:
@@ -2877,175 +2844,4 @@ public final Object run() throws Exception
 		}
         return null;
     } // end of run
-
-
-
-
-    /**
-     * get a unique JVM ID
-     */
-    private UUID getJvmId () 
-    {
-        // synchronize across class loaders.
-        synchronized(DERBY_JVM_ID.intern()) 
-        {
-        	String jvmidStr = null;
-        	try {
-        		jvmidStr = System.getProperty(DERBY_JVM_ID);
-        	}catch (SecurityException se)
-        	{
-        		String[] args = { se.getMessage()};
-              	 String warningMsg = 
-                       MessageService.getCompleteMessage(                        		 
-                           SQLState.DATA_JVM_ID_PROPERTY_ACCESS, args);
-                     logMsg(warningMsg);
-        	
-        	}
-            UUID jvmid = null;
-            // if jvm id does not already exist, generate one
-            // and save it into the "derby.storage.jvmid" system
-            // property.
-            if (jvmidStr == null) {
-                //generate a new UUID based on the time  ..etc.
-                // and store it in a system property to be accessble by 
-                // other instances of derby engine booting inside the 
-                // current jvm instance.
-                jvmid = uuidFactory.createUUID();
-                jvmidStr = jvmid.toString();
-                try {
-                	System.setProperty(DERBY_JVM_ID, jvmidStr);
-                }
-                catch (SecurityException se)
-                {
-                Object[] args = new Exception[] { se};
-               	 String warningMsg = 
-                        MessageService.getCompleteMessage(                        		 
-                            SQLState.DATA_JVM_ID_PROPERTY_ACCESS, args);
-
-                      logMsg(warningMsg);
-                      jvmid = uuidFactory.recreateUUID(jvmidStr);
-                }
-            } else {
-                jvmid = uuidFactory.recreateUUID(jvmidStr);
-            }
-            return jvmid;
-        }
-    }
-
-    /**
-     * 
-     * Get a lock, that will protect the database being booted by 
-     * by multiple class loaders in the same jvm. This is not 
-     * real lock. Lock is simulated by writing down the jvm id 
-     * generated by derby, which is unique across class loaders 
-     * to the dbex.lck file. If the current jvm id matches the one
-     * in the dbex.lck file , database is considered as booted; otherwise 
-     * the jvm id is written to the file to prevent booting by another 
-     * class loader.
-     * 
-     * Pre-cond: should be called only after acquiring the file lock.
-     *  
-     */
-    private void getIntraJvmDbLock() throws StandardException, IOException{
-
-        // file lock can be acquired even if the database is already
-        // booted by a different class loader. Check if another class
-        // loader has booted the DB. This is done by checking the
-        // JVMID written in the dbex.lck file. If the JVMID is same
-        // as what is stored in the system property,
-        // then database is already booted , throw the error.
-        UUID currentJvmId = getJvmId();
-        // synchronizing across the same database, by using interned 
-        // version of the database name
-       
-        
-        	StorageRandomAccessFile lckFileRaf = exFileLock.getLockedFile();
-            if (lckFileRaf == null) {
-            	// could not get exclusive lock
-                throw StandardException.newException(
-                   SQLState.DATA_MULTIPLE_CLASSLOADERS_ON_DB,
-                        databaseDirectory);
-             }
-
-            UUID onDiskJvmId = null; 
-            // read ID from the dbex.lck file.
-            try 
-            {
-                if (exFileLock.length() != 0)
-                    onDiskJvmId = uuidFactory.recreateUUID(lckFileRaf.readUTF());
-            }   
-            catch (Exception e)
-            {
-                // The previous owner of the lock may have died before we
-                // finish writing its UUID down. Assume uuid file is invalid
-                // Set the id on the disk to null value.
-                onDiskJvmId = null;
-            }
-
-            if (onDiskJvmId != null && onDiskJvmId.equals(currentJvmId))
-            {
-                throw StandardException.newException(
-                           SQLState.DATA_MULTIPLE_CLASSLOADERS_ON_DB, databaseDirectory);
-            } else {
-                
-               
-                // write the the jvm id to the dbex.lck file, to prevent 
-                // another loader  booting the same database before it 
-                // is shutdown by the currtent loader. 
-                lckFileRaf.seek(0);
-                lckFileRaf.writeUTF(currentJvmId.toString()); 
-                lckFileRaf.sync(false);
-                  
-            }
-    }
-
-
-    
-    /*
-     * Relelease the intra-jvm db lock. Locking is simulated by writing 
-     * the  derby jvm instance id to the dbex.lck file. This method writes 
-     * an invalid jvm instance id to the dbex.lck file to indicate that 
-     * the database is not booted any more. 
-     * 
-     * Synchronization is provided across class loaders using the interened 
-     * version of the database directory string.
-     */
-    private void releaseIntraJvmDbLock() throws IOException, StandardException
-    {
-        // write a uuid, that would have never been a jvm id generated by derby. 
-        String invalidJvmId = "00000000-0000-0000-0000-000000000000"; 
-        StorageRandomAccessFile lckFileRaf = null;
-        /*
-         * I think following synchronization is needed, because If any part 
-         * of the above UUID gets written to the file, then other loaders 
-         * might assume db  not booted any more, Other  Loader might boot 
-         * and overwrite part of what is writen and result in an corrupted
-         * id in the dbex.lck file , which can cause expected format errors
-         * or allow another loader to boot the database , that is already
-         * booted.
-         */
-        // synchronizing across the same database, by using interened 
-        // version of the database name
-                
-        synchronized(dataDirectory.intern()) {
-        lckFileRaf = exFileLock.getLockedFile();
-        if (lckFileRaf != null) 
-        {
-    
-        	// update the jvmid in the dbex.lck file to an invalid one, 
-        	// to indicate this db is shutdown. Becuase current jvmid will not 
-        	// match with the invalid one on the disk, db can booted
-        	// succcessfully.
-        	lckFileRaf.seek(0);
-        	lckFileRaf.writeUTF(invalidJvmId); 
-        	lckFileRaf.sync(false);
-            	
-        }
-        else
-        {
-            throw StandardException.newException(
-                SQLState.DATA_MULTIPLE_CLASSLOADERS_ON_DB, databaseDirectory);
-        	}
-        }
-    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/io/StorageFile.java b/db/derby/code/trunk/java/engine/org/apache/derby/io/StorageFile.java
index 0b3f632a..f812c662 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/io/StorageFile.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/io/StorageFile.java
@@ -260,19 +260,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      */
 	public void releaseExclusiveFileLock();
 
-    /**
-     * Return Random Acess file to the lock file, that is used to 
-     * get the exclusing e lock obtained with getExclusiveFileLock(). It can be used  read/write data 
-     * from/to the lock file. 
-     * @return Random access File object used to get the exclusive lock or null 
-     * <code> null </code> if there was no call to getExclusiveFile() lock or 
-     * the call to getExcclusiveFileLock was not successful
-     * 
-     * @see #getExclusiveFileLock
-     */
-    public StorageRandomAccessFile getLockedFile();
-
-
     /**
      * Get a random access file.
      *
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index d4df2066..f54bba54 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -22,7 +22,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.shared.common.reference;
 
 
-
 /**
 	List of error message identifiers.
 	This is the set of message identifiers. The message identifier
@@ -492,8 +491,6 @@ The message identifier (ie. the value that matches a field in this class)
 	String DATA_MULTIPLE_JBMS_FORCE_LOCK                        = "XSDB8.D";
 	String DATA_CORRUPT_STREAM_CONTAINER                        = "XSDB9.D";
 	String DATA_OBJECT_ALLOCATION_FAILED                        = "XSDBA.D";
-    String DATA_MULTIPLE_CLASSLOADERS_ON_DB                     = "XSDBB.D";
-    String DATA_JVM_ID_PROPERTY_ACCESS			            	= "XSDBC.D";
     
 	/*
 	** RawStore - Data.Filesystem statement exceptions
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java
index ceeb2620..7709023d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java
@@ -25,7 +25,6 @@
 import junit.framework.TestSuite;
 
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
-import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
 import org.apache.derbyTesting.junit.TestConfiguration;
 import org.apache.derbyTesting.junit.Utilities;
 
@@ -53,17 +52,7 @@ public static Test suite()
     {
         TestSuite suite = new TestSuite("errorcode Test");
         suite.addTest(TestConfiguration.embeddedSuite(ErrorCodeTest.class));
-        return new CleanDatabaseTestSetup(suite) {
-        	   protected void decorateSQL(Statement s) throws SQLException
-               { 	
-        		   s.executeUpdate(
-        		   "create table t(i int, s smallint)");
-        		   s.executeUpdate(
-        		   "insert into t values (1,2)");
-        		   s.executeUpdate("insert into t values (1,2)");
-        		   s.executeUpdate("insert into t values (null,2)");
-               }
-        };	
+        return suite;
     }
 
     public void test_errorcode() throws Exception
@@ -72,6 +61,13 @@ public void test_errorcode() throws Exception
         
         Statement s = createStatement();
         
+        s.executeUpdate(
+            "create table t(i int, s smallint)");
+        s.executeUpdate(
+            "insert into t values (1,2)");
+        s.executeUpdate("insert into t values (1,2)");
+        s.executeUpdate("insert into t values (null,2)");
+        
         //-- parser error
         //-- bug 5701        
         assertStatementError("42X01",30000,s,"create table t(i nt, s smallint)");
@@ -101,17 +97,16 @@ public void test_errorcode() throws Exception
         // new ones can be added.
         rs = s.executeQuery("select * from SYSCS_DIAG.Error_messages where SEVERITY >= 40000 order by SQL_STATE");
         //Utilities.showResultSet(rs);
-        
         String [][] expectedRows =
         {{"08000","Connection closed by unknown interrupt.","40000"},
+             {"08001","A connection could not be established because the security token is larger than the maximum allowed by the network protocol.","40000"},
+             {"08001","A connection could not be established because the user id has a length of zero or is larger than the maximum allowed by the network protocol.","40000"},
+             {"08001","A connection could not be established because the password has a length of zero or is larger than the maximum allowed by the network protocol.","40000"},
         		{"08001","Required Derby DataSource property {0} not set.","40000"},
         		{"08001","{0} : Error connecting to server {1} on port {2} with message {3}.","40000"},
         		{"08001","SocketException: '{0}'","40000"},
         		{"08001","Unable to open stream on socket: '{0}'.","40000"},
         		{"08001","User id length ({0}) is outside the range of 1 to {1}.","40000"},
-        		{"08001","A connection could not be established because the security token is larger than the maximum allowed by the network protocol.","40000"},
-        		{"08001","A connection could not be established because the user id has a length of zero or is larger than the maximum allowed by the network protocol.","40000"},
-        		{"08001","A connection could not be established because the password has a length of zero or is larger than the maximum allowed by the network protocol.","40000"},
         		{"08001","Password length ({0}) is outside the range of 1 to {1}.","40000"},
         		{"08001","User id can not be null.","40000"},
         		{"08001","Password can not be null.","40000"},
@@ -131,14 +126,6 @@ public void test_errorcode() throws Exception
         		{"08006","Database '{0}' shutdown.","45000"},
         		{"0A000","The DRDA command {0} is not currently implemented.  The connection has been terminated.","40000"},
         		{"57017","There is no available conversion for the source code page, {0}, to the target code page, {1}.  The connection has been terminated.","40000"},
-        		{"58009","SocketException: '{0}'","40000"},
-        		{"58009","A communications error has been detected: {0}.","40000"},
-        		{"58009","An error occurred during a deferred connect reset and the connection has been terminated.  See chained exceptions for details.","40000"},
-        		{"58009","Insufficient data while reading from the network - expected a minimum of {0} bytes and received only {1} bytes.  The connection has been terminated.","40000"},
-        		{"58009","Attempt to fully materialize lob data that is too large for the JVM.  The connection has been terminated.","40000"},
-        		{"58009","Network protocol exception: SCLDTA length, {0}, is invalid for RDBCOLID.  The connection has been terminated.","40000"},
-        		{"58009","Network protocol exception: SCLDTA length, {0}, is invalid for PKGID.  The connection has been terminated.","40000"},
-        		{"58009","Network protocol exception: PKGNAMCSN length, {0}, is invalid at SQLAM {1}.  The connection has been terminated.","40000"},
         		{"58009","Network protocol exception: only one of the VCM, VCS length can be greater than 0.  The connection has been terminated.","40000"},
         		{"58009","The connection was terminated because the encoding is not supported.","40000"},
         		{"58009","Network protocol exception: actual code point, {0}, does not match expected code point, {1}.  The connection has been terminated.","40000"},
@@ -151,35 +138,43 @@ public void test_errorcode() throws Exception
         		{"58009","Network protocol exception: SECTKN was not returned.  The connection has been terminated.","40000"},
         		{"58009","Network protocol exception: only one of NVCM, NVCS can be non-null.  The connection has been terminated.","40000"},
         		{"58009","Network protocol exception: SCLDTA length, {0}, is invalid for RDBNAM.  The connection has been terminated.","40000"},
+             {"58009","SocketException: '{0}'","40000"},
+             {"58009","A communications error has been detected: {0}.","40000"},
+             {"58009","An error occurred during a deferred connect reset and the connection has been terminated.  See chained exceptions for details.","40000"},
+             {"58009","Insufficient data while reading from the network - expected a minimum of {0} bytes and received only {1} bytes.  The connection has been terminated.","40000"},
+             {"58009","Attempt to fully materialize lob data that is too large for the JVM.  The connection has been terminated.","40000"},
+             {"58009","Network protocol exception: SCLDTA length, {0}, is invalid for RDBCOLID.  The connection has been terminated.","40000"},
+             {"58009","Network protocol exception: SCLDTA length, {0}, is invalid for PKGID.  The connection has been terminated.","40000"},
+             {"58009","Network protocol exception: PKGNAMCSN length, {0}, is invalid at SQLAM {1}.  The connection has been terminated.","40000"},
         		{"58009","A network protocol error was encountered and the connection has been terminated: {0}","40000"},
-        		{"58010","A network protocol error was encountered.  A connection could not be established because the manager {0} at level {1} is not supported by the server. ","40000"},
+             {"58010","A network protocol error was encountered.  A connection could not be established because the manager {0} at level {1} is not supported by the server.","40000"},
         		{"58014","The DDM command 0x{0} is not supported.  The connection has been terminated.","40000"},
         		{"58015","The DDM object 0x{0} is not supported.  The connection has been terminated.","40000"},
         		{"58016","The DDM parameter 0x{0} is not supported.  The connection has been terminated.","40000"},
         		{"58017","The DDM parameter value 0x{0} is not supported.  An input host variable may not be within the range the server supports.  The connection has been terminated.","40000"},
-        		{"XBM01","Startup failed due to an exception. See next exception for details. ","45000"},
+             {"XBM01","Startup failed due to an exception. See next exception for details.","45000"},
         		{"XBM02","Startup failed due to missing functionality for {0}. Please ensure your classpath includes the correct Derby software.","45000"},
         		{"XBM03","Supplied value '{0}' for collation attribute is invalid, expecting UCS_BASIC or TERRITORY_BASED.","45000"},
         		{"XBM05","Startup failed due to missing product version information for {0}.","45000"},
-        		{"XBM06","Startup failed. An encrypted database cannot be accessed without the correct boot password.  ","45000"},
+             {"XBM06","Startup failed. An encrypted database cannot be accessed without the correct boot password.","45000"},
         		{"XBM07","Startup failed. Boot password must be at least 8 bytes long.","45000"},
         		{"XBM08","Could not instantiate {0} StorageFactory class {1}.","45000"},
-        		{"XBM0G","Failed to start encryption engine. Please make sure you are running Java 2 and have downloaded an encryption provider such as jce and put it in your class path. ","45000"},
+             {"XBM0G","Failed to start encryption engine. Please make sure you are running Java 2 and have downloaded an encryption provider such as jce and put it in your class path.","45000"},
         		{"XBM0H","Directory {0} cannot be created.","45000"},
         		{"XBM0I","Directory {0} cannot be removed.","45000"},
         		{"XBM0J","Directory {0} already exists.","45000"},
         		{"XBM0K","Unknown sub-protocol for database name {0}.","45000"},
         		{"XBM0L","Specified authentication scheme class {0} does implement the authentication interface {1}.","45000"},
         		{"XBM0M","Error creating instance of authentication scheme class {0}.","45000"},
-        		{"XBM0N","JDBC Driver registration with java.sql.DriverManager failed. See next exception for details. ","45000"},
-        		{"XBM0P","Service provider is read-only. Operation not permitted. ","45000"},
+             {"XBM0N","JDBC Driver registration with java.sql.DriverManager failed. See next exception for details.","45000"},
+             {"XBM0P","Service provider is read-only. Operation not permitted.","45000"},
         		{"XBM0Q","File {0} not found. Please make sure that backup copy is the correct one and it is not corrupted.","45000"},
-        		{"XBM0R","Unable to remove File {0}.  ","45000"},
+             {"XBM0R","Unable to remove File {0}.","45000"},
         		{"XBM0S","Unable to rename file '{0}' to '{1}'","45000"},
-        		{"XBM0T","Ambiguous sub-protocol for database name {0}.   ","45000"},
+             {"XBM0T","Ambiguous sub-protocol for database name {0}.","45000"},
         		{"XBM0X","Supplied territory description '{0}' is invalid, expecting ln[_CO[_variant]]\nln=lower-case two-letter ISO-639 language code, CO=upper-case two-letter ISO-3166 country codes, see java.util.Locale.","45000"},
         		{"XBM0Y","Backup database directory {0} not found. Please make sure that the specified backup path is right.","45000"},
-        		{"XBM0Z","Unable to copy file '{0}' to '{1}'. Please make sure that there is enough space and permissions are correct. ","45000"},
+             {"XBM0Z","Unable to copy file '{0}' to '{1}'. Please make sure that there is enough space and permissions are correct.","45000"},
         		{"XCW00","Unsupported upgrade from '{0}' to '{1}'.","45000"},
         		{"XJ004","Database '{0}' not found.","40000"},
         		{"XJ015","Derby system shutdown.","50000"},
@@ -201,8 +196,6 @@ public void test_errorcode() throws Exception
         		{"XSDB8","WARNING: Derby (instance {0}) is attempting to boot the database {1} even though Derby (instance {2}) may still be active.  Only one instance of Derby should boot a database at a time. Severe and non-recoverable corruption can result if 2 instances of Derby boot on the same database at the same time.  The db2j.database.forceDatabaseLock=true property has been set, so the database will not boot until the db.lck is no longer present.  Normally this file is removed when the first instance of Derby to boot on the database exits, but it may be left behind in some shutdowns.  It will be necessary to remove the file by hand in that case.  It is important to verify that no other VM is accessing the database before deleting the db.lck file by hand.","45000"},
         		{"XSDB9","Stream container {0} is corrupt.","45000"},
         		{"XSDBA","Attempt to allocate object {0} failed.","45000"},
-        		{"XSDBB",">Another instance of Derby within the same JVM may have already booted the database {0}. Only a single classloader within the same JVM can boot the database.","45000"},
-        		{"XSDBC","WARNING: {0}. Derby cannot acess  the system property derby.storage.jvmInstanceId. This permission is necessary for Derby to detect multiple Classloader boot of the database.  Without this permission corruption could occur. Add the permission permission: java.util.PropertyPermision \"derby.storage.jvmInstanceId\", \"read,write\"  to your policy file. ","45000"},
         		{"XSDG0","Page {0} could not be read from disk.","45000"},
         		{"XSDG1","Page {0} could not be written to disk, please check if disk is full.","45000"},
         		{"XSDG2","Invalid checksum on Page {0}, expected={1}, on-disk version={2}, page dump follows: {3}","45000"},
@@ -210,12 +203,12 @@ public void test_errorcode() throws Exception
         		{"XSDG5","Database is not in create mode when createFinished is called.","45000"},
         		{"XSDG6","Data segment directory not found in {0} backup during restore. Please make sure that backup copy is the right one and it is not corrupted.","45000"},
         		{"XSDG7","Directory {0} could not be removed during restore. Please make sure that permissions are correct.","45000"},
-        		{"XSDG8","Unable to copy directory '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct. ","45000"},
+             {"XSDG8","Unable to copy directory '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct.","45000"},
         		{"XSLA0","Cannot flush the log file to disk {0}.","45000"},
         		{"XSLA1","Log Record has been sent to the stream, but it cannot be applied to the store (Object {0}).  This may cause recovery problems also.","45000"},
         		{"XSLA2","System will shutdown, got I/O Exception while accessing log file.","45000"},
         		{"XSLA3","Log Corrupted, has invalid data in the log stream.","45000"},
-        		{"XSLA4","Cannot write to the log, most likely the log is full.  Please delete unnecessary files.  It is also possible that the file system is read only, or the disk has failed, or some other problems with the media.  ","45000"},
+             {"XSLA4","Cannot write to the log, most likely the log is full.  Please delete unnecessary files.  It is also possible that the file system is read only, or the disk has failed, or some other problems with the media.","45000"},
         		{"XSLA5","Cannot read log stream for some reason to rollback transaction {0}.","45000"},
         		{"XSLA6","Cannot recover the database.","45000"},
         		{"XSLA7","Cannot redo operation {0} in the log.","45000"},
@@ -236,7 +229,7 @@ public void test_errorcode() throws Exception
         		{"XSLAO","Recovery failed unexpected problem {0}.","45000"},
         		{"XSLAP","Database at {0} is at version {1}. Beta databases cannot be upgraded,","45000"},
         		{"XSLAQ","cannot create log file at directory {0}.","45000"},
-        		{"XSLAR","Unable to copy log file '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct. ","45000"},
+             {"XSLAR","Unable to copy log file '{0}' to '{1}' during restore. Please make sure that there is enough space and permissions are correct.","45000"},
         		{"XSLAS","Log directory {0} not found in backup during restore. Please make sure that backup copy is the correct one and it is not corrupted.","45000"},
         		{"XSLAT","The log directory '{0}' exists. The directory might belong to another database. Check that the location specified for the logDevice attribute is correct.","45000"},
         		{"XSTB0","An exception was thrown during transaction abort.","50000"},
@@ -246,10 +239,8 @@ public void test_errorcode() throws Exception
         		{"XSTB6","Cannot substitute a transaction table with another while one is already in use.","50000"},
         		{"XXXXX","Normal database session close.","40000"}};
 
-        		        		       	
         JDBC.assertUnorderedResultSet(rs, expectedRows);
         rollback();
         s.close();
     }
 }
-
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/ClassLoaderBootTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/ClassLoaderBootTest.java
index 64ef49a9..e69de29b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/ClassLoaderBootTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/ClassLoaderBootTest.java
@@ -1,451 +0,0 @@
-/*
-
-   Derby - Class org.apache.derbyTesting.functionTests.store.ClassLoaderBootTest
-
-   Licensed to the Apache Software Foundation (ASF) under one or more
-   contributor license agreements.  See the NOTICE file distributed with
-   this work for additional information regarding copyright ownership.
-   The ASF licenses this file to You under the Apache License, Version 2.0
-   (the "License"); you may not use this file except in compliance with
-   the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-
- */
-
-package org.apache.derbyTesting.functionTests.tests.store;
-
-import java.io.File;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.net.URLClassLoader;
-import java.net.URLStreamHandlerFactory;
-import java.security.AccessController;
-import java.security.CodeSource;
-import java.security.PrivilegedActionException;
-import java.sql.Connection;
-import java.sql.SQLException;
-import java.sql.Statement;
-import java.util.Properties;
-
-import javax.sql.DataSource;
-
-import junit.extensions.TestSetup;
-import junit.framework.Test;
-import junit.framework.TestSuite;
-
-import org.apache.derbyTesting.junit.BaseJDBCTestCase;
-import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
-import org.apache.derbyTesting.junit.JDBCDataSource;
-import org.apache.derbyTesting.junit.SecurityManagerSetup;
-import org.apache.derbyTesting.junit.SupportFilesSetup;
-import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
-import org.apache.derbyTesting.junit.TestConfiguration;
-
-
-/*
- * This class tests a database boots using  class loaders. Test cases in this
- * class checks only one instance of a database can exist evenif database is 
- * booted using different class loader instances.    
- */
-public class ClassLoaderBootTest extends BaseJDBCTestCase {
-
-    private static final String POLICY_RESOURCE = "org" + File.separator + "apache" +File.separator + "derbyTesting" +File.separator +
-    		"functionTests" + File.separator + "tests" + File.separator + "store" + File.separator + "ClassLoaderBootTest.policy";
-    				
-    
-    		
-	private static URL derbyClassLocation; 
-	static {
-        // find the location of derby jar file or location 
-        // of classes. 
-        CodeSource cs;
-        try {
-            Class cls = Class.forName("org.apache.derby.database.Database");
-            cs = cls.getProtectionDomain().getCodeSource();
-        } catch (ClassNotFoundException e) {
-            cs = null;
-        }
-
-        if(cs == null )
-            derbyClassLocation = null;        
-        else 
-            derbyClassLocation = cs.getLocation();
-	}
-        
-
-    private ClassLoader loader_1;
-    private ClassLoader loader_2;
-    private ClassLoader mainLoader;
-
-
-    public ClassLoaderBootTest(String name ) {
-        super(name);
-    }
-
-    private static String makeServerPolicyName()
-    {
-        try {
-            String  userDir = getSystemProperty( "user.dir" );
-            
-            String  fileName = userDir + File.separator + SupportFilesSetup.EXTINOUT + File.separator + POLICY_RESOURCE;
-            File      file = new File( fileName );
-            String  urlString = file.toURL().toExternalForm();
-
-            return urlString;
-        }
-        catch (Exception e)
-        {
-            System.out.println( "Unexpected exception caught by makeServerPolicyName(): " + e );
-
-            return null;
-        }
-    }
-
-    /**
-     * Runs the tests in the default embedded configuration and then
-     * the client server configuration.
-     */
-    public static Test suite()
-    {
-        TestSuite suite = new TestSuite(ClassLoaderBootTest.class);
-        Test test = suite;
-        // Test does not currently run wunder security manager
-        // Requires AllPermissions for derbyTesting.jar to run.
-        //  I therefore think it is a problem with the test not the
-        // fix itself.   
-        	test = SecurityManagerSetup.noSecurityManager(test);
-        TestSetup setup = 
-            new CleanDatabaseTestSetup(test) {
-                protected void decorateSQL(Statement s) throws SQLException {
-                    // table used to test  export.
-                    s.execute("CREATE TABLE BOOKS(id int," +
-                              "name varchar(30)," + 
-                              "content clob, " + 
-                              "pic blob )");
-                }
-                 protected void setUp() throws Exception {
-                     super.setUp();
-                     //shutdown the database. 
-                     DataSource ds = JDBCDataSource.getDataSource();
-                     JDBCDataSource.shutdownDatabase(ds);
-                 }
-            };
-            Properties p = new Properties();
-            p.setProperty("derby.infolog.append", "true");
-            setup = new SystemPropertyTestSetup(setup,p);
-                        
-            return setup;
-    }
-
-
-    /**
-     * Simple set up, just setup the loaders.
-     * @throws SQLException 
-     */
-    protected void setUp() throws Exception
-    {
-        final URL[] urls = new URL[]{derbyClassLocation};
-        mainLoader  = (ClassLoader )AccessController.doPrivileged
-        (new java.security.PrivilegedAction(){
-
-            public Object run(){
-            	return java.lang.Thread.currentThread().getContextClassLoader();
-
-            } });
-       
-        loader_1 = privURLClassLoader(urls);
-       
-        loader_2  = privURLClassLoader(urls);   
-    }
-
-	private ClassLoader privURLClassLoader(final URL[] urls) {
-		return (ClassLoader )AccessController.doPrivileged
-        (new java.security.PrivilegedAction(){
-
-            public Object run(){
-            	 return new URLClassLoader(urls,null);
-
-            } });
-	}
-
-
-
-    /**
-     * Given a loaded class, this
-     * routine asks the class's class loader for information about where the
-     * class was loaded from. Typically, this is a file, which might be
-     * either a class file or a jar file. The routine figures that out, and
-     * returns the name of the file. If it can't figure it out, it returns null
-     */
-    private static URL getFileWhichLoadedClass(final Class cls) throws Exception 
-    {
-        try {
-         return (URL)AccessController.doPrivileged(
-         new java.security.PrivilegedExceptionAction(){   
-             public Object run()
-             {
-                 CodeSource cs = null;
-                 cs = cls.getProtectionDomain().getCodeSource ();
-                 if ( cs == null )
-                     return null;        
-                 return cs.getLocation ();
-                 }
-         });
-        }catch(PrivilegedActionException pae) {
-            throw pae.getException();
-        }
-    }
-    
-    private URL getURL(final File file) throws MalformedURLException
-    {
-        try {
-            return (URL) AccessController.doPrivileged
-            (new java.security.PrivilegedExceptionAction(){
-
-                public Object run() throws MalformedURLException{
-                return file.toURL();
-
-                }
-            }
-             );
-        } catch (PrivilegedActionException e) {
-            throw (MalformedURLException) e.getException();
-        } 
-    }
-
-    /* 
-     * Test booting a database, that was alreadt booted by another class loader.
-     */
-	public void testBootingAnAlreadyBootedDatabase() throws SQLException 
-    {
-        // first boot the database using one loader and attempt 
-        // to boot it using another loader, it should fail to boot.
-        try {
-
-            setThreadLoader(loader_1);
-            DataSource ds_1 = JDBCDataSource.getDataSource();
-            Connection conn1 = ds_1.getConnection();
-            // now attemp to boot using another class loader.
-            setThreadLoader(loader_2);
-            try {
-                DataSource ds_2 = JDBCDataSource.getDataSource();
-                ds_2.getConnection();
-                fail("booted database that was already booted by another CLR");
-            } catch (SQLException e) {
-                SQLException ne = e.getNextException();
-                ClassLoaderBootTest.assertPreventDualBoot(ne);
-            }
-            
-            // shutdown the database.
-            setThreadLoader(loader_1);
-            JDBCDataSource.shutdownDatabase(ds_1);
-            
-        } catch (SQLException se) {
-            dumpSQLException(se);
-        }finally {
-            // set the thread context loader back to the generic one. 
-            setThreadLoader(mainLoader);
-        }
-    }
-
-    
-    /* 
-     * Test booting a database, that was  booted and shutdown 
-     * by another class loader.
-     */
-	public void testBootingDatabaseShutdownByAnotherCLR() throws SQLException 
-    {
-        // first boot the database using one loader and shutdown and then 
-        // attempt to boot it using another loader, it should boot.
-        try {
-
-            setThreadLoader(loader_1);
-            DataSource ds_1 = JDBCDataSource.getDataSource();
-            Connection conn1 = ds_1.getConnection();
-            //shutdown the database.
-            JDBCDataSource.shutdownDatabase(ds_1);
-            // now attemp to boot using another class loader.
-            setThreadLoader(loader_2);
-            DataSource ds_2 = JDBCDataSource.getDataSource();
-            ds_2.getConnection();
-            // shutdown the database.
-            JDBCDataSource.shutdownDatabase(ds_2);
-            
-        } catch (SQLException se) {
-            dumpSQLException(se);
-        }finally {
-            // set the thread context loader back to the generic one. 
-            setThreadLoader(mainLoader);
-        }
-    }
-
-
-
-    /* 
-     * Test booting the same database by multiple thereads in it's own 
-     * class loader.
-     */
-	public void testBootingDatabaseInMultipleThread() throws Exception 
-    {
-        ParallelDatabaseBoots pdb = new ParallelDatabaseBoots();
-        pdb.startConcurrentDatabaseBoots();
-    }
-
-
-    private void setThreadLoader(final ClassLoader which) {
-
-        AccessController.doPrivileged
-        (new java.security.PrivilegedAction(){
-            
-            public Object run()  { 
-                java.lang.Thread.currentThread().setContextClassLoader(which);
-              return null;
-            }
-        });
-    }
-
-
-    private static void dumpSQLException(SQLException se)
-    {
-		while (se != null)
-		{
-			se.printStackTrace();
-			se = se.getNextException();
-		}		
-	}	
-
-	private static void assertPreventDualBoot(SQLException ne) {
-		assertNotNull(ne);
-		String state = ne.getSQLState();
-		assertTrue("Unexpected SQLState:" + state, state.equals("XSDB6") || state.equals("XSDBB"));
-	}
-
-
-    /*
-     *  This class is used to test concurrent database boots. Each 
-     *  thread has it's own class loader.Only one instance of the 
-     *  database can exist at any time, only one thread shoud be 
-     *  able to successfuly boot the database, 
-     */
-    private class ParallelDatabaseBoots implements Runnable{
-
-        private volatile int noBoots = 0 ; 
-        private volatile int noBootAttempts = 0;
-        private Exception unExpectedException;
-
-        /*
-         * Attempts to boot the database in a separate loader. Increases
-         * the counter if the database is succefully booted. 
-         */
-        private void bootDatabase() throws Exception {
-            // boot the database , if another thread has not booted 
-            // it already using a different class loader. 
-            ClassLoader myLoader;
-            URL[] urls = new URL[]{derbyClassLocation};
-            myLoader = privURLClassLoader(urls);
-        
-            try {
-                setThreadLoader(myLoader);
-                boolean booted = false;
-                DataSource ds = null;
-                try {
-                    ds = JDBCDataSource.getDataSource();
-                    ds.getConnection();
-                    // successfuly booted the database, increment 
-                    // the no of boots counter. 
-                    noBoots++;
-                    booted = true;
-                } catch (SQLException e) {
-                    // failed to boot the database, 
-                    // ensure it failed with correct error.
-                    SQLException ne = e.getNextException();
-                    assertPreventDualBoot(ne);                    
-                    
-                }finally {
-                    synchronized(this) {
-                        // attemped to boot the database.
-                        noBootAttempts--;
-                        notifyAll();
-                    }
-
-                }
-            
-                // shutdown the database, if it was booted 
-                // by this thread.
-                if (booted) {
-                    // wait for all threads complete 
-                    // their attempt to boot the database. 
-                    synchronized(this) {
-                    
-                        while (noBootAttempts > 0) {
-                            wait();
-                        }
-                    }
-                    JDBCDataSource.shutdownDatabase(ds);
-                }
-            }finally {
-                // set the thread context loader back to the main loader.
-                setThreadLoader(mainLoader);
-            }
-        }
-
-        private void startConcurrentDatabaseBoots() throws Exception {
-            // first boot the database using one loader and attempt 
-            // to boot it using another loader, it should fail to boot.           
-            int noThreads = 10;
-            noBootAttempts = noThreads;
-            Thread threads[] = new Thread[noThreads];
-            // create all the threads
-            for(int i=0 ; i < noThreads ; i++) {
-                threads[i] = new Thread(this, "bootThread=" +i);
-            }
-
-            // start  all the threads 
-            for(int i=0 ; i < noThreads ; i++) {
-                threads[i].start();
-            }
-            
-            // wait for all threds to complete
-            for(int i=0 ; i < noThreads ; i++)
-            {
-                try{
-                    threads[i].join();
-                }catch (java.lang.InterruptedException ie) {
-                    //ignore ..
-                }
-
-            }
-            
-            // if there is any exception by any of the threads, test failed.
-            if (unExpectedException != null)
-                throw unExpectedException;
-            assertEquals("More than one thread booted the database concurrently",1,noBoots);
-     
-        }
-
-        
-        /*
-         * Attempts to boot the database on seperate thread. 
-         * Impementation of run() method of Runnable interface.
-         */
-        public void run() {
-            try {
-                bootDatabase();
-            } catch(Exception e) {
-                // save the exception, the method that 
-                // invoked the thread needs to know 
-                // about it.
-                unExpectedException = e;
-            }
-        }
-    }
-
-}
-
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java
index 7c988b17..b2c4c2fa 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java
@@ -52,7 +52,6 @@ public static Test suite() {
         TestSuite suite = new TestSuite("store");
         
         suite.addTest(BootAllTest.suite());
-        suite.addTest(ClassLoaderBootTest.suite());
 
         // Encryption only supported for Derby in J2SE/J2EE environments.
         // J2ME (JSR169) does not support encryption.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/corruptio/CorruptFile.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/corruptio/CorruptFile.java
index a1b42199..61aa0406 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/corruptio/CorruptFile.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/corruptio/CorruptFile.java
@@ -340,19 +340,6 @@ public synchronized void releaseExclusiveFileLock()
 	} // End of releaseExclusiveFileLock
 
     
-    /**
-     * Return Random Acess file to the lock file, that is used to 
-     * get the exclusing e lock. It can be used  read/write data 
-     * from/to the lock file. 
-     * @return Random access File object used to get the exclusive lock.
-     */
-    public StorageRandomAccessFile getLockedFile() {
-        return realFile.getLockedFile();
-    }
-
-
-
-
     /**
      * Get a random access (read/write) file.
      *
