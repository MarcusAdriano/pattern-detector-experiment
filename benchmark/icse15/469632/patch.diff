diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DropDatabaseSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DropDatabaseSetup.java
index 62230165..3e4ff1c7 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DropDatabaseSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DropDatabaseSetup.java
@@ -50,5 +50,44 @@ protected void tearDown() throws Exception {
         } catch (SQLException e) {
             BaseJDBCTestCase.assertSQLState("Database shutdown", "08006", e);
         }
+
+        String dbName = TestConfiguration.getCurrent().getDatabaseName();
+        dbName = dbName.replace('/', File.separatorChar);
+        
+        String dsh = BaseTestCase.getSystemProperty("derby.system.home");
+        if (dsh == null)
+            fail("not implemented");
+        else
+            dbName = dsh + File.separator + dbName;
+        
+        final File dbDir = new File(dbName);
+        AccessController.doPrivileged(new java.security.PrivilegedAction() {
+
+            public Object run() {
+                removeDBDir(dbDir);
+                return null;
+            }
+        });
+    } 
+
+    private static void removeDBDir(File dbDir) {
+
+        String[] list = dbDir.list();
+
+        // Some JVMs return null for File.list() when the
+        // directory is empty.
+        if (list != null) {
+            for (int i = 0; i < list.length; i++) {
+                File entry = new File(dbDir, list[i]);
+
+                if (entry.isDirectory()) {
+                    removeDBDir(entry);
+                } else {
+                    assertTrue(entry.delete());
+                }
+            }
+        }
+
+        assertTrue(dbDir.delete());
     } 
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
index 8aa46481..209f0a43 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
@@ -64,6 +64,12 @@
      */
     private final static String UNUSED = "file://unused/";
 
+    /**
+     * Simple count to provide a unique number for database
+     * names.
+     */
+    private static int uniqueDB;
+
 
     /**
      * Default Derby test configuration object based
@@ -250,6 +256,8 @@ public static Test clientServerDecorator(Test suite)
      * first connection request to the database and shutdown & deleted at
      * tearDown. The configuration differs only from the current configuration
      * by the database name.
+     * This decorator expects the database file to be local so it
+     * can be removed.
      * @param test Test to be decorated
      * @return decorated test.
      */
@@ -257,8 +265,15 @@ public static Test singleUseDatabaseDecorator(Test test)
     {
         TestConfiguration config = TestConfiguration.getCurrent();
 
-        // WORK IN PROGRESS - need to have unique name.
-        String dbName = "singleUse/wombat2";        
+        // Forward slash is ok, Derby treats database names
+        // as URLs and translates forward slash to the local
+        // separator.
+        String dbName = "singleUse/oneuse";
+        // Synchronize on the literal name which will be invariant
+        // since it is interned.
+        synchronized (dbName) {
+            dbName = dbName.concat(Integer.toHexString(uniqueDB++));
+        }
         TestConfiguration newDBconfig = 
             new TestConfiguration(config, dbName);
         return new ChangeConfigurationSetup(newDBconfig,
