diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java
index 18b7f537..a2558feb 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java
@@ -518,7 +518,9 @@ private void handleMinorRevisionChange(TransactionController tc, DD_Version from
 			// SPSes won't be restored.
 			if (fromVersion.majorVersionNumber >= DataDictionary.DD_VERSION_DERBY_10_5)
 				bootingDictionary.updateMetadataSPSes(tc);
-			else
+			//Following make sure that the stored plans (including the ones for
+			//triggers) will get cleared during upgrade and hence we will not
+			//hold on to stale plans.
 				bootingDictionary.clearSPSPlans();
 
 			DD_Version lastRun;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java
index a77869ad..1cda2342 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java
@@ -51,6 +51,45 @@ public BasicSetup(String name) {
         super(name);
     }
       
+    /**
+     * Simple test of the triggers. Added for DERBY-4835
+     */
+    public void testTriggerBasic() throws SQLException
+    {
+        Statement s = createStatement();
+        switch (getPhase())
+        {
+        case PH_CREATE:
+            s.executeUpdate("CREATE TABLE Trigger_t1 " +
+            		"(c1 INTEGER NOT NULL GENERATED ALWAYS " +
+            		"AS IDENTITY (START WITH 1, INCREMENT BY 1), " +
+            		"max_size INTEGER NOT NULL, "+
+            		"CONSTRAINT c1_pk PRIMARY KEY (c1))");
+            s.executeUpdate("CREATE TABLE Trigger_t2 "+
+            		"(c1 INTEGER DEFAULT 0 NOT NULL)");
+            s.executeUpdate("CREATE TRIGGER gls_blt_trg "+
+            		"AFTER INSERT ON Trigger_t1 FOR EACH ROW MODE DB2SQL "+
+            		"INSERT INTO Trigger_t2(c1) "+
+            		"VALUES ( (select max(c1) from Trigger_t1))");
+            s.executeUpdate("INSERT INTO Trigger_t1(max_size) "+
+            		"VALUES(20)");
+            break;
+        case PH_SOFT_UPGRADE:
+            s.executeUpdate("INSERT INTO Trigger_t1(max_size) "+
+    		"VALUES(20)");
+            break;
+        case PH_POST_SOFT_UPGRADE:
+            s.executeUpdate("INSERT INTO Trigger_t1(max_size) "+
+    		"VALUES(20)");
+            break;
+        case PH_HARD_UPGRADE:
+            s.executeUpdate("INSERT INTO Trigger_t1(max_size) "+
+    		"VALUES(20)");
+            break;
+        }
+        s.close();
+    }
+
     /**
      * Simple test of the old version from the meta data.
      */
