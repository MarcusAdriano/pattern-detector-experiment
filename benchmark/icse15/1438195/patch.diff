diff --git a/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader.java b/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader.java
index d68e326c..77e95da8 100644
--- a/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader.java
+++ b/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesReader.java
@@ -499,7 +499,7 @@ private SortedDocValues loadBytesFixedSorted(FieldInfo field, IndexInput data, I
     data.readBytes(bytes, 0, bytes.length);
     final PackedInts.Reader reader = PackedInts.getReader(index);
     
-    return new SortedDocValues() {
+    return correctBuggyOrds(new SortedDocValues() {
       @Override
       public int getOrd(int docID) {
         return (int) reader.get(docID);
@@ -516,7 +516,7 @@ public void lookupOrd(int ord, BytesRef result) {
       public int getValueCount() {
         return valueCount;
       }
-    };
+    });
   }
   
   private SortedDocValues loadBytesVarSorted(FieldInfo field, IndexInput data, IndexInput index) throws IOException {
@@ -537,7 +537,7 @@ private SortedDocValues loadBytesVarSorted(FieldInfo field, IndexInput data, Ind
     
     final int valueCount = addressReader.size() - 1;
     
-    return new SortedDocValues() {
+    return correctBuggyOrds(new SortedDocValues() {
       @Override
       public int getOrd(int docID) {
         return (int)ordsReader.get(docID);
@@ -556,6 +556,34 @@ public void lookupOrd(int ord, BytesRef result) {
       public int getValueCount() {
         return valueCount;
       }
+    });
+  }
+  
+  // detects and corrects LUCENE-4717 in old indexes
+  private SortedDocValues correctBuggyOrds(final SortedDocValues in) {
+    final int maxDoc = state.segmentInfo.getDocCount();
+    for (int i = 0; i < maxDoc; i++) {
+      if (in.getOrd(i) == 0) {
+        return in; // ok
+      }
+    }
+    
+    // we had ord holes, return an ord-shifting-impl that corrects the bug
+    return new SortedDocValues() {
+      @Override
+      public int getOrd(int docID) {
+        return in.getOrd(docID) - 1;
+      }
+
+      @Override
+      public void lookupOrd(int ord, BytesRef result) {
+        in.lookupOrd(ord+1, result);
+      }
+
+      @Override
+      public int getValueCount() {
+        return in.getValueCount() - 1;
+      }
     };
   }
   
diff --git a/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java b/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
index a77847da..23c9fb3a 100644
--- a/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
+++ b/lucene/dev/branches/lucene4547/lucene/core/src/java/org/apache/lucene/index/CheckIndex.java
@@ -1339,8 +1339,7 @@ private static void checkSortedDocValues(String fieldName, AtomicReader reader,
       throw new RuntimeException("dv for field: " + fieldName + " reports wrong maxOrd=" + maxOrd + " but this is not the case: " + maxOrd2);
     }
     if (seenOrds.cardinality() != dv.getValueCount()) {
-      // nocommit: looks like maybe a bug in 4.0 indexes? dig on this (and think if we can correct it somehow...)
-      // throw new RuntimeException("dv for field: " + fieldName + " has holes in its ords, valueCount=" + dv.getValueCount() + " but only used: " + seenOrds.cardinality());
+      throw new RuntimeException("dv for field: " + fieldName + " has holes in its ords, valueCount=" + dv.getValueCount() + " but only used: " + seenOrds.cardinality());
     }
     BytesRef lastValue = null;
     BytesRef scratch = new BytesRef();
