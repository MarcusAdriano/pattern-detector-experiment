diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationDriver.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationDriver.java
index 7728a8e0..5515e5a6 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationDriver.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationDriver.java
@@ -204,13 +204,13 @@ private static void selectCluster(Path input, List<Cluster> clusterModels, Clust
         PathFilters.logsCRCFilter(), conf)) {
       // Converting to NamedVectors to preserve the vectorId else its not obvious as to which point
       // belongs to which cluster - fix for MAHOUT-1410
-      Writable key = vw.getFirst();
+      Class<? extends Writable> keyClass = vw.getFirst().getClass();
       Vector vector = vw.getSecond().get();
-      if (!(vector instanceof NamedVector)) {
-        if (key instanceof Text) {
-          vector = new NamedVector(vector, key.toString());
-        } else if (key instanceof IntWritable) {
-          vector = new NamedVector(vector, Integer.toString(((IntWritable) key).get()));
+      if (!keyClass.equals(NamedVector.class)) {
+        if (keyClass.equals(Text.class)) {
+          vector = new NamedVector(vector, vw.getFirst().toString());
+        } else if (keyClass.equals(IntWritable.class)) {
+          vector = new NamedVector(vector, Integer.toString(((IntWritable) vw.getFirst()).get()));
         }
       }
       Vector pdfPerCluster = clusterClassifier.classify(vector);
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationMapper.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationMapper.java
index df03ac10..0b1bcff6 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationMapper.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/classify/ClusterClassificationMapper.java
@@ -86,11 +86,12 @@ protected void map(WritableComparable<?> key, VectorWritable vw, Context context
     if (!clusterModels.isEmpty()) {
       // Converting to NamedVectors to preserve the vectorId else its not obvious as to which point
       // belongs to which cluster - fix for MAHOUT-1410
+      Class<? extends Vector> vectorClass = vw.get().getClass();
       Vector vector = vw.get();
-      if (!(vector instanceof NamedVector)) {
-        if (key instanceof Text) {
+      if (!vectorClass.equals(NamedVector.class)) {
+        if (key.getClass().equals(Text.class)) {
           vector = new NamedVector(vector, key.toString());
-        } else if (key instanceof IntWritable) {
+        } else if (key.getClass().equals(IntWritable.class)) {
           vector = new NamedVector(vector, Integer.toString(((IntWritable) key).get()));
         }
       }
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/classify/ClusterClassificationDriverTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/classify/ClusterClassificationDriverTest.java
index 93df7d0b..cbf0e55c 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/classify/ClusterClassificationDriverTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/classify/ClusterClassificationDriverTest.java
@@ -236,11 +236,11 @@ private void checkClustersWithOutlierRemoval() {
       } else {
         singletonCnt++;
         assertEquals("expecting only singleton clusters; got size=" + vList.size(), 1, vList.size());
-        if (vList.get(0) instanceof NamedVector) {
+        if (vList.get(0).getClass().equals(NamedVector.class)) {
           Assert.assertTrue("not expecting cluster:" + ((NamedVector) vList.get(0)).getDelegate().asFormatString(),
                   reference.contains(((NamedVector)  vList.get(0)).getDelegate().asFormatString()));
           reference.remove(((NamedVector)vList.get(0)).getDelegate().asFormatString());
-        } else if (vList.get(0) instanceof RandomAccessSparseVector) {
+        } else if (vList.get(0).getClass().equals(RandomAccessSparseVector.class)) {
           Assert.assertTrue("not expecting cluster:" + vList.get(0).asFormatString(),
                   reference.contains(vList.get(0).asFormatString()));
           reference.remove(vList.get(0).asFormatString());
