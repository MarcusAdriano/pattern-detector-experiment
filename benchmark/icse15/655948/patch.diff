diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CreateRoleConstantAction.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CreateRoleConstantAction.java
index 7c9327cc..ef7af99f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CreateRoleConstantAction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CreateRoleConstantAction.java
@@ -75,6 +75,11 @@ public void executeConstantAction(Activation activation)
         TransactionController tc = lcc.getTransactionExecute();
         DataDescriptorGenerator ddg = dd.getDataDescriptorGenerator();
 
+        if (roleName.equals(Authorizer.PUBLIC_AUTHORIZATION_ID)) {
+            throw StandardException.
+                newException(SQLState.AUTH_PUBLIC_ILLEGAL_AUTHORIZATION_ID);
+        }
+
         // currentAuthId is currently always the database owner since
         // role definition is a database owner power. This may change
         // in the future since this SQL is more liberal.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/GrantRoleConstantAction.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/GrantRoleConstantAction.java
index 06c7f71e..d8ed59b5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/GrantRoleConstantAction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/GrantRoleConstantAction.java
@@ -28,6 +28,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.sql.Activation;
 import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
+import org.apache.derby.iapi.sql.conn.Authorizer;
 import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
 import org.apache.derby.iapi.sql.dictionary.RoleDescriptor;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
@@ -88,6 +89,11 @@ public void executeConstantAction(Activation activation)
         for (Iterator rIter = roleNames.iterator(); rIter.hasNext();) {
             String role = (String)rIter.next();
 
+            if (role.equals(Authorizer.PUBLIC_AUTHORIZATION_ID)) {
+                throw StandardException.
+                    newException(SQLState.AUTH_PUBLIC_ILLEGAL_AUTHORIZATION_ID);
+            }
+
             for (Iterator gIter = grantees.iterator(); gIter.hasNext();) {
                 String grantee = (String)gIter.next();
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RevokeRoleConstantAction.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RevokeRoleConstantAction.java
index 60e47e80..8c1183d8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RevokeRoleConstantAction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RevokeRoleConstantAction.java
@@ -28,6 +28,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.sql.Activation;
 import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
+import org.apache.derby.iapi.sql.conn.Authorizer;
 import org.apache.derby.iapi.sql.dictionary.RoleDescriptor;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 import org.apache.derby.iapi.store.access.TransactionController;
@@ -83,6 +84,11 @@ public void executeConstantAction(Activation activation)
         for (Iterator rIter = roleNames.iterator(); rIter.hasNext();) {
             String role = (String)rIter.next();
 
+            if (role.equals(Authorizer.PUBLIC_AUTHORIZATION_ID)) {
+                throw StandardException.
+                    newException(SQLState.AUTH_PUBLIC_ILLEGAL_AUTHORIZATION_ID);
+            }
+
             for (Iterator gIter = grantees.iterator(); gIter.hasNext();) {
                 String grantee = (String)gIter.next();
 
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index 398162b3..27138b6d 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -759,6 +759,7 @@ The message identifier (ie. the value that matches a field in this class)
 	String AUTH_DUPLICATE_USERS                                        = "4250D";
 	String AUTH_INTERNAL_BAD_UUID                                      = "4250E";
     String AUTH_ROLE_DBO_ONLY                                          = "4251A";
+	String AUTH_PUBLIC_ILLEGAL_AUTHORIZATION_ID                        = "4251B";
 
 	String LANG_DB2_NOT_NULL_COLUMN_INVALID_DEFAULT                    = "42601";
 	String LANG_DB2_INVALID_HEXADECIMAL_CONSTANT                    = "42606";
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java
index 30c6de1c..915457ee 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RolesTest.java
@@ -71,6 +71,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private final static String revokeWarn               = "01007";
     private final static String notIdle                  = "25001";
     private final static String invalidRoleName          = "4293A";
+    private final static String invalidPUBLIC            = "4251B";
     private final static String userException = "38000";
 
     private int MAX_IDENTIFIER_LENGTH = 128;
@@ -231,6 +232,14 @@ public void testNegativeSyntax() throws SQLException
                sqlAuthorizationRequired, invalidRoleName, invalidRoleName);
         doStmt("create role \"SYSROLE\"",
                sqlAuthorizationRequired, invalidRoleName, invalidRoleName);
+        doStmt("create role public",
+               syntaxError, syntaxError, syntaxError);
+        doStmt("create role \"PUBLIC\"",
+               sqlAuthorizationRequired, invalidPUBLIC, roleDboOnly);
+        doStmt("grant \"PUBLIC\" to " + users[1],
+               sqlAuthorizationRequired, invalidPUBLIC, invalidPUBLIC);
+        doStmt("revoke \"PUBLIC\" from " + users[1],
+               sqlAuthorizationRequired, invalidPUBLIC, invalidPUBLIC);
         _stm.close();
     }
 
