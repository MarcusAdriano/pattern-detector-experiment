diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
index 984aad8b..9541c9c0 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/AbstractServiceReferenceRecipe.java
@@ -638,30 +638,20 @@ public Object loadObject() throws Exception {
             return e.create();
         }
 
-        protected Class getTargetClass(Class[] interfaceNames) {
+        protected Class<?> getTargetClass(Class<?>[] interfaceNames) {
             // Only allow class proxying if specifically asked to
-            Class root = Object.class;
-            for (Class clazz : interfaceNames) {
+            Class<?> root = Object.class;
+            for (Class<?> clazz : interfaceNames) {
                 if (!clazz.isInterface()) {
-                    if (root == Object.class) {
+                    if (root.isAssignableFrom(clazz)) {
                         root = clazz;
-                        continue;
-                    }
-                    // Check that all classes are in the same hierarchy
-                    for (Class p = clazz; p != Object.class; p = p.getSuperclass()) {
-                        if (p == root) {
-                            root = clazz;
-                            continue;
-                        }
-                    }
-                    for (Class p = root; p != Object.class; p = p.getSuperclass()) {
-                        if (p == clazz) {
-                            continue;
-                        }
-                    }
+                    } else if (clazz.isAssignableFrom(root)) {
+                        //nothing to do, root is correct
+                    } else {
                     throw new ComponentDefinitionException("Classes " + root.getClass().getName() + " and " + clazz.getName() + " are not in the same hierarchy");
                 }
             }
+            }
             return root;
         }
 
diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/test/java/org/apache/aries/blueprint/container/AbstractServiceReferenceTest.java b/incubator/aries/trunk/blueprint/blueprint-core/src/test/java/org/apache/aries/blueprint/container/AbstractServiceReferenceTest.java
index e69de29b..0856c095 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/test/java/org/apache/aries/blueprint/container/AbstractServiceReferenceTest.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/test/java/org/apache/aries/blueprint/container/AbstractServiceReferenceTest.java
@@ -0,0 +1,36 @@
+package org.apache.aries.blueprint.container;
+
+import java.util.AbstractList;
+import java.util.ArrayList;
+import java.util.LinkedList;
+
+import static org.junit.Assert.*;
+
+import org.apache.aries.blueprint.container.AbstractServiceReferenceRecipe.CgLibProxyFactory;
+import org.junit.Test;
+import org.osgi.service.blueprint.container.ComponentDefinitionException;
+
+public class AbstractServiceReferenceTest {
+    @Test
+    public void testCglibProxySingleTargetClass() {
+        CgLibProxyFactory sut = new CgLibProxyFactory();
+        Class<?> result = sut.getTargetClass(new Class<?>[] {ArrayList.class});
+        assertEquals(ArrayList.class, result);
+    }
+    
+    @Test
+    public void testCglibProxyMultipleTargetClasses() {
+        CgLibProxyFactory sut = new CgLibProxyFactory();
+        Class<?> result = sut.getTargetClass(new Class<?>[] {AbstractList.class, ArrayList.class});
+        assertEquals(ArrayList.class, result);
+        
+        result = sut.getTargetClass(new Class<?>[] {ArrayList.class, AbstractList.class});
+        assertEquals(ArrayList.class, result);
+    }
+    
+    @Test(expected=ComponentDefinitionException.class)
+    public void testCglibProxyIncompatibleTargetClasses() {
+        CgLibProxyFactory sut = new CgLibProxyFactory();
+        sut.getTargetClass(new Class<?>[] {LinkedList.class, ArrayList.class});        
+    }
+}
