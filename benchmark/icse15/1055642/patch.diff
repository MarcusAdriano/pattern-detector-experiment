diff --git a/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/db/DeletedColumn.java b/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/db/DeletedColumn.java
index 486dce77..b8870c8b 100644
--- a/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/db/DeletedColumn.java
+++ b/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/db/DeletedColumn.java
@@ -55,7 +55,7 @@ public long getMarkedForDeleteAt()
     @Override
     public int getLocalDeletionTime()
     {
-       return value.getInt(value.position()+value.arrayOffset()	);
+       return value.getInt(value.position());
     }
     
     @Override
diff --git a/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/db/marshal/LongType.java b/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/db/marshal/LongType.java
index 1f2805f2..89f7c316 100644
--- a/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/db/marshal/LongType.java
+++ b/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/db/marshal/LongType.java
@@ -63,7 +63,7 @@ public String getString(ByteBuffer bytes)
         }
         
         
-        return String.valueOf(bytes.getLong(bytes.position()+bytes.arrayOffset()));
+        return String.valueOf(bytes.getLong(bytes.position()));
     }
 
     public ByteBuffer fromString(String source)
diff --git a/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/utils/UUIDGen.java b/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/utils/UUIDGen.java
index 1a1e902a..e6866f78 100644
--- a/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/utils/UUIDGen.java
+++ b/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/utils/UUIDGen.java
@@ -56,7 +56,7 @@ public static synchronized UUID makeType1UUIDFromHost(InetAddress addr)
     /** creates a type 1 uuid from raw bytes. */
     public static UUID getUUID(ByteBuffer raw)
     {
-        return new UUID(raw.getLong(raw.position() + raw.arrayOffset()), raw.getLong(raw.position() + raw.arrayOffset() + 8));
+        return new UUID(raw.getLong(raw.position()), raw.getLong(raw.position() + 8));
     }
 
     /** decomposes a uuid into raw bytes. */
diff --git a/cassandra/branches/cassandra-0.7.0/test/unit/org/apache/cassandra/db/NameSortTest.java b/cassandra/branches/cassandra-0.7.0/test/unit/org/apache/cassandra/db/NameSortTest.java
index 1e93287c..433dc98e 100644
--- a/cassandra/branches/cassandra-0.7.0/test/unit/org/apache/cassandra/db/NameSortTest.java
+++ b/cassandra/branches/cassandra-0.7.0/test/unit/org/apache/cassandra/db/NameSortTest.java
@@ -124,7 +124,7 @@ private void validateNameSort(Table table, int N) throws IOException
                 assert subColumns.size() == 4;
                 for (IColumn subColumn : subColumns)
                 {
-                    long k = subColumn.name().getLong(subColumn.name().position() + subColumn.name().arrayOffset());
+                    long k = subColumn.name().getLong(subColumn.name().position());
                     byte[] bytes = (j + k) % 2 == 0 ? "a".getBytes() : "b".getBytes();
                     assertEquals(new String(bytes), ByteBufferUtil.string(subColumn.value()));
                 }
diff --git a/cassandra/branches/cassandra-0.7.0/test/unit/org/apache/cassandra/db/marshal/TypeCompareTest.java b/cassandra/branches/cassandra-0.7.0/test/unit/org/apache/cassandra/db/marshal/TypeCompareTest.java
index 893b1365..0b347ba3 100644
--- a/cassandra/branches/cassandra-0.7.0/test/unit/org/apache/cassandra/db/marshal/TypeCompareTest.java
+++ b/cassandra/branches/cassandra-0.7.0/test/unit/org/apache/cassandra/db/marshal/TypeCompareTest.java
@@ -89,8 +89,8 @@ public void testLong()
         for (int i = 1; i < data.length; i++)
         {
         	
-            long l0 = data[i - 1].getLong(data[i - 1].position()+data[i - 1].arrayOffset());
-            long l1 = data[i].getLong(data[i].position()+data[i].arrayOffset());
+            long l0 = data[i - 1].getLong(data[i - 1].position());
+            long l1 = data[i].getLong(data[i].position());
             assert l0 <= l1;
         }
     }
