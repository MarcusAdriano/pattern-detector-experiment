diff --git a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/KoreanFilterFactory.java b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/KoreanFilterFactory.java
index 205a6b43..da90e1f9 100644
--- a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/KoreanFilterFactory.java
+++ b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/KoreanFilterFactory.java
@@ -35,7 +35,7 @@
   /**
    * Initialize this factory via a set of key-value pairs.
    */
-  protected KoreanFilterFactory(Map<String, String> args) {
+  public KoreanFilterFactory(Map<String, String> args) {
     super(args);
     init(args);
   }
diff --git a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/KoreanTokenizerFactory.java b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/KoreanTokenizerFactory.java
index 6a800d8d..30a357f8 100644
--- a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/KoreanTokenizerFactory.java
+++ b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/KoreanTokenizerFactory.java
@@ -32,13 +32,13 @@
   /**
    * Initialize this factory via a set of key-value pairs.
    */
-  protected KoreanTokenizerFactory(Map<String, String> args) {
+  public KoreanTokenizerFactory(Map<String, String> args) {
     super(args);
   }
 
   @Override
   public Tokenizer create(AttributeSource.AttributeFactory factory, Reader input) {
-    return null;  //To change body of implemented methods use File | Settings | File Templates.
+    return new KoreanTokenizer(Version.LUCENE_50, factory, input);
   }
 
 //  public KoreanTokenizerFactory() {
diff --git a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/morph/CompoundNounAnalyzer.java b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/morph/CompoundNounAnalyzer.java
index 711df497..34263e69 100644
--- a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/morph/CompoundNounAnalyzer.java
+++ b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/morph/CompoundNounAnalyzer.java
@@ -520,7 +520,7 @@ private boolean canCompound(CompoundEntry[] entries, int thredhold) {
   /**
    * 입력된 String 을 CompoundEntry 로 변환
    * @param input
-   * @return
+   * @return compound entry
    * @throws MorphException
    */
   private CompoundEntry analyzeSingle(String input) throws MorphException {
diff --git a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/morph/MorphAnalyzer.java b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/morph/MorphAnalyzer.java
index e37581b4..d37e870e 100644
--- a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/morph/MorphAnalyzer.java
+++ b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/morph/MorphAnalyzer.java
@@ -70,7 +70,7 @@ public void setExactCompound(boolean is) {
    * 
    * @param input
    * @param pos
-   * @return
+   * @return candidates
    * @throws MorphException
    */
   public List<AnalysisOutput> analyze(String input, int pos) throws MorphException {    
@@ -373,8 +373,6 @@ else if(!success)
    * 복합명사인지 조사하고, 복합명사이면 단위명사들을 찾는다.
    * 복합명사인지 여부는 단위명사가 모두 사전에 있는지 여부로 판단한다.
    * 단위명사는 2글자 이상 단어에서만 찾는다.
-   * @param o
-   * @return
    * @throws MorphException
    */
   public boolean confirmCNoun(AnalysisOutput o) throws MorphException  {
diff --git a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/morph/SpaceOutput.java b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/morph/SpaceOutput.java
index cee3c1ca..cb39357c 100644
--- a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/morph/SpaceOutput.java
+++ b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/morph/SpaceOutput.java
@@ -62,7 +62,6 @@ public List getNRWords() {
   }
 
   /**
-   * @param nrWord the nrWord to set
    */
   public void setNRWords(List words) {
     this.nrWords = words;
@@ -104,7 +103,6 @@ public void setSource(String source) {
   
   /**
    * 분석된 전체 단어의 길이를 반환한다.
-   * @return
    */
   public int getLength() {
     
diff --git a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/morph/WordSpaceAnalyzer.java b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/morph/WordSpaceAnalyzer.java
index a880b3f1..9cc9823b 100644
--- a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/morph/WordSpaceAnalyzer.java
+++ b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/morph/WordSpaceAnalyzer.java
@@ -132,7 +132,7 @@ public WordSpaceAnalyzer() {
    * 조사로 끝나는 어구를 분석한다.
    * @param snipt
    * @param js
-   * @return
+   * @return candidates
    * @throws MorphException
    */
   private List<AnalysisOutput> anlysisWithJosa(String snipt, int js) throws MorphException {
@@ -182,7 +182,7 @@ public WordSpaceAnalyzer() {
    * 가장 큰 조사를 찾는다.
    * @param snipt
    * @param jstart
-   * @return
+   * @return jend
    * @throws MorphException
    */
   private int findJosaEnd(String snipt, int jstart) throws MorphException {
@@ -389,10 +389,6 @@ private void anlysisWithEomiDetail(String input, List<AnalysisOutput> candidates
   /**
    * 어미의 첫음절부터 어미의 1음절이상에 사용될 수 있는 음절을 조사하여
    * 가장 큰 조사를 찾는다.
-   * @param snipt
-   * @param jstart
-   * @return
-   * @throws MorphException
    */
   private int findEomiEnd(String snipt, int estart) throws MorphException {
     
@@ -434,10 +430,6 @@ private int findEomiEnd(String snipt, int estart) throws MorphException {
   
   /**
    * validation 후 후보가 될 가능성이 높은 최상위 것을 결과에 추가한다.
-   * 
-   * @param output
-   * @param candidates
-   * @param stack
    */
   private int validationAndAppend(WSOutput output, List<AnalysisOutput> candidates, String input)
       throws MorphException {
@@ -544,7 +536,7 @@ private void analysisCompouns(List<AnalysisOutput> candidates) throws MorphExcep
    * @param str  분석하고자 하는 전체 문자열
    * @param ws  문자열에서 명사를 찾는 시작위치
    * @param es  문자열에서 명사를 찾는 끝 위치
-   * @return
+   * @return found noun
    * @throws MorphException
    */
   private boolean findNounWithinStr(String str, int ws, int es) throws MorphException {
diff --git a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/tagging/Tagger.java b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/tagging/Tagger.java
index be741591..c5a50136 100644
--- a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/tagging/Tagger.java
+++ b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/tagging/Tagger.java
@@ -68,8 +68,6 @@ public AnalysisOutput tagging(String psource, String rsource, List<AnalysisOutpu
    * occurrence.dic 에 등록되어 있는 경우만.. 최적을 찾아서 반환한다.
    * 1. 첫번째는 어간으로 시작되는 문법 규칙을 찾는다.
    * 2. 두번째는 표층형으로 시작되는 문법규칙을 찾는다.
-   * @param morphs
-   * @return
    */
   private AnalysisOutput lookupBest(String psource,String rsource, List<AnalysisOutput> pmorphs, List<AnalysisOutput> rmorphs)  throws MorphException {
     
@@ -92,7 +90,7 @@ private AnalysisOutput lookupBest(String psource,String rsource, List<AnalysisOu
    * @param source
    * @param pmorphs
    * @param rmorphs
-   * @return
+   * @return analysis output
    * @throws MorphException
    */
   private AnalysisOutput lookupBestByPWord(String rsource, List<AnalysisOutput> rmorphs)  throws MorphException {
@@ -124,15 +122,10 @@ private AnalysisOutput lookupBestByPWord(String rsource, List<AnalysisOutput> rm
   /**
    * 뒷 어절에 의해 현재 어절이 결정된다.
    * 뒷 어절은 NULL이 아니다.
-   * @param source
-   * @param pmorphs
-   * @param rmorphs
-   * @return
-   * @throws MorphException
    */
   private AnalysisOutput lookupBestByRWord(String psource, String rsource, List<AnalysisOutput> pmorphs, List<AnalysisOutput> rmorphs)  throws MorphException {
     
-    List<AnalysisOutput> removes = new ArrayList();
+    List<AnalysisOutput> removes = new ArrayList<AnalysisOutput>();
     
     for(AnalysisOutput rmorph : rmorphs) {
       
diff --git a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/ConstraintUtil.java b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/ConstraintUtil.java
index d634e9f4..8a823625 100644
--- a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/ConstraintUtil.java
+++ b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/ConstraintUtil.java
@@ -103,8 +103,6 @@ public static boolean canHaheCompound(String key) {
     
   /**
    * 어미가 ㄴ,ㄹ,ㅁ 으로 끝나는지 조사한다.
-   * @param eomi
-   * @return
    */
   public static boolean isNLM(String eomi) {
     
diff --git a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/DictionaryUtil.java b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/DictionaryUtil.java
index 404e1f66..ad887f09 100644
--- a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/DictionaryUtil.java
+++ b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/DictionaryUtil.java
@@ -253,9 +253,6 @@ public static boolean existSuffix(String str)  throws MorphException {
   
   /**
    * ㄴ,ㄹ,ㅁ,ㅂ과 eomi 가 결합하여 어미가 될 수 있는지 점검한다.
-   * @param s
-   * @param end
-   * @return
    */
   public static String combineAndEomiCheck(char s, String eomi) throws MorphException {
   
diff --git a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/EomiUtil.java b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/EomiUtil.java
index 8a806c70..a56e0b55 100644
--- a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/EomiUtil.java
+++ b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/EomiUtil.java
@@ -37,7 +37,6 @@
   /**
    * 가장 길이가 긴 어미를 분리한다.
    * @param term
-   * @return
    * @throws MorphException
    */
   public static String[] longestEomi(String term) throws MorphException  {
@@ -123,8 +122,6 @@ else if(jasos[1]=='ㅒ')
   
   /**
    * 선어말어미를 분석한다.
-   * @param stem
-   * @return
    */
   public static String[] splitPomi(String stem) throws MorphException  {
 
@@ -236,9 +233,6 @@ else if(jasos[1]=='ㅒ')
   
   /**
    * 불규칙 용언의 원형을 구한다.
-   * @param output
-   * @return
-   * @throws MorphException
    */
   public static List irregular(AnalysisOutput output) throws MorphException {
     
@@ -501,7 +495,7 @@ private static void irregularAO(List results, String stem, String ending) {
    * 시제 선어미말을 만들어서 반환한다.
    * @param preword  '아' 또는 '어'
    * @param endword  어미[선어미말을 포함]
-   * @return '았' 또는 '었'을 만들어서 반환한다.
+   * return '았' 또는 '었'을 만들어서 반환한다.
    */
   public static String makeTesnseEomi(String preword, String endword) {
 
@@ -529,8 +523,6 @@ public static String makeTesnseEomi(String preword, String endword) {
  
    /**
     * '음/기' + '이' + 어미, '에서/부터/에서부터' + '이' + 어미 인지 조사한다.
-    * @param stem
-    * @return
     */
    public static boolean endsWithEEomi(String stem) {
      int len = stem.length();
@@ -553,11 +545,6 @@ private static void setPomiResult(String[] results,String stem, String pomi ) {
     results[1] = pomi;
   }  
   
-  /**
-   * 
-   * @param ch
-   * @return
-   */
   public static boolean IsNLMBSyl(char ech, char lch) throws MorphException {
   
     char[] features = SyllableUtil.getFeature(ech);
@@ -585,11 +572,6 @@ public static boolean IsNLMBSyl(char ech, char lch) throws MorphException {
    * 3. '여/거라/너라'의 불규칙 어절
    * 4. 어미 '아/어'가 탈락되는 어절
    * 5. '아/어'의 변이체 분리
-   * 
-   * @param stem
-   * @param end
-   * @return
-   * @throws MorphException
    */
   public static String[] splitEomi(String stem, String end) throws MorphException {
 
diff --git a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/FileUtil.java b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/FileUtil.java
index 4c1ef359..347bb60b 100644
--- a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/FileUtil.java
+++ b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/FileUtil.java
@@ -93,7 +93,7 @@ public static List readLines(File file, String encoding) throws IOException {
    * Reads the contents of a file line by line to a List of Strings.
    * The file is always closed.
    *
-   * @param file  the file to read, must not be <code>null</code>
+   * @param fName  the file to read, must not be <code>null</code>
    * @param encoding  the encoding to use, <code>null</code> means platform default
    * @return the list of Strings representing each line in the file, never <code>null</code>
    * @throws MorphException 
diff --git a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/HanjaUtils.java b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/HanjaUtils.java
index 74d12774..8a9ccf8b 100644
--- a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/HanjaUtils.java
+++ b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/HanjaUtils.java
@@ -54,9 +54,6 @@ public synchronized static void loadDictionary() throws MorphException {
   /**
    * 한자에 대응하는 한글을 찾아서 반환한다.
    * 하나의 한자는 여러 음으로 읽일 수 있으므로 가능한 모든 음을 한글로 반환한다.
-   * @param hanja
-   * @return
-   * @throws MorphException
    */
   public static char[] convertToHangul(char hanja) throws MorphException {
  
diff --git a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/IrregularUtil.java b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/IrregularUtil.java
index 5a530fca..c5549bc0 100644
--- a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/IrregularUtil.java
+++ b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/IrregularUtil.java
@@ -130,7 +130,6 @@
    * ㅂ 불규칙 원형을 복원한다. (돕다, 곱다)
    * @param start
    * @param end
-   * @return
    * @throws MorphException
    */
   private static String[] restoreBIrregular(String start, String end) throws MorphException {
@@ -165,7 +164,6 @@
    * ㄷ 불규칙 원형을 복원한다. (깨닫다, 묻다)
    * @param start
    * @param end
-   * @return
    * @throws MorphException
    */
   private static String[] restoreDIrregular(String start, String end) throws MorphException {
@@ -192,7 +190,6 @@
    * ㅅ 불규칙 원형을 복원한다. (긋다--그어)
    * @param start
    * @param end
-   * @return
    * @throws MorphException
    */
   private static String[] restoreSIrregular(String start, String end) throws MorphException {
@@ -220,7 +217,6 @@
    * "따르다"는 ㄹ불규칙이 아니지만.. 인 것처럼 처리한다.
    * @param start
    * @param end
-   * @return
    * @throws MorphException
    */
   private static String[] restoreLIrregular(String start, String end) throws MorphException {
@@ -255,7 +251,6 @@
    * 어간의 끝소리인 ‘ㄹ’이 ‘ㄴ’, ‘ㄹ’, ‘ㅂ’, ‘오’, ‘시’ 앞에서 탈락하는 활용의 형식
    * @param start
    * @param end
-   * @return
    * @throws MorphException
    */
   private static String[] restoreELIrregular(String start, String end) throws MorphException {
@@ -278,7 +273,6 @@
    * 러 불규칙 원형을 복원한다. (이르다->이르러, 푸르다->푸르러)
    * @param start
    * @param end
-   * @return
    * @throws MorphException
    */
   private static String[] restoreRUIrregular(String start, String end) throws MorphException {
@@ -309,7 +303,6 @@
    * ㅎ 탈락 원형을 복원한다. (까맣다-->까만,까매서)
    * @param start
    * @param end
-   * @return
    * @throws MorphException
    */
   private static String[] restoreHIrregular(String start, String end) throws MorphException {
@@ -343,7 +336,6 @@
    * 으 탈락 원형을 복원한다. (뜨다->더, 크다-커)
    * @param start
    * @param end
-   * @return
    * @throws MorphException
    */
   private static String[] restoreUIrregular(String start, String end) throws MorphException {
diff --git a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/MorphUtil.java b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/MorphUtil.java
index f8d2c4f7..f1f473b6 100644
--- a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/MorphUtil.java
+++ b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/MorphUtil.java
@@ -49,7 +49,6 @@
   /**
    * 한글 한글자를 초성/중성/종성의 배열로 만들어 반환한다.
    * @param c
-   * @return
    */
   public static char[] decompose(char c) {
     char[] result = null;
@@ -104,7 +103,6 @@ public static char replaceJongsung(char dest, char source) {
    * 형태소 유형 출력을 위한 문자열을 생성한다.
    * @param word
    * @param type
-   * @return
    */
   public static String buildTypeString(String word, char type) {
     StringBuffer sb = new StringBuffer();
@@ -233,8 +231,6 @@ public static String makeTesnseEomi(String preword, String endword) {
   /**
    * 용언화접미사가 결합될 수 있는지 여부를 점검한다.
    * 특히 사전에 등록된 되다, 하다형 의 접속이 가능한지를 조사한다.
-   * @param o
-   * @return
    */
   public static boolean isValidSuffix(WordEntry entry, AnalysisOutput o) {
     
diff --git a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/NounUtil.java b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/NounUtil.java
index 282dacf6..5560284a 100644
--- a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/NounUtil.java
+++ b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/NounUtil.java
@@ -42,7 +42,6 @@
    * 
    * @param o
    * @param candidates
-   * @return
    * @throws MorphException
    */
   public static boolean analysisMJ(AnalysisOutput o, List candidates) throws MorphException {
@@ -97,7 +96,6 @@ public static boolean analysisMJ(AnalysisOutput o, List candidates) throws Morph
    * 용언 + '음/기' + 조사(PTN_VMXMJ)
    * @param o
    * @param candidates
-   * @return
    * @throws MorphException
    */
   public static boolean analysisVMJ(AnalysisOutput o, List candidates) throws MorphException {
@@ -123,7 +121,6 @@ public static boolean analysisVMJ(AnalysisOutput o, List candidates) throws Morp
    * 용언 + '아/어' + 보조용언 + '음/기' + 조사(PTN_VMXMJ)
    * @param o
    * @param candidates
-   * @return
    * @throws MorphException
    */
   public static boolean analysisVMXMJ(AnalysisOutput o, List candidates) throws MorphException {
@@ -169,7 +166,6 @@ public static boolean analysisVMXMJ(AnalysisOutput o, List candidates) throws Mo
    * 체언 + 용언화접미사 + '음/기' + 조사 (PTN_NSMJ)
    * @param o
    * @param candidates
-   * @return
    * @throws MorphException
    */
   public static boolean analysisNSMJ(AnalysisOutput o, List candidates) throws MorphException {
@@ -232,7 +228,6 @@ public static boolean analysisNSMXMJ(AnalysisOutput o, List candidates) throws M
    * 복합명사인지 여부는 단위명사가 모두 사전에 있는지 여부로 판단한다.
    * 단위명사는 2글자 이상 단어에서만 찾는다.
    * @param o
-   * @return
    * @throws MorphException
    */     
 //     public static boolean confirmCNoun(AnalysisOutput o) throws MorphException  {
@@ -308,7 +303,7 @@ public static boolean analysisNSMXMJ(AnalysisOutput o, List candidates) throws M
    * @param str  복합명사
    * @param pos
    * @param o    분석결과
-   * @return    단위명사 리스트
+   * return    단위명사 리스트
    * @throws MorphException
    */
   private static List findNouns(String str, int pos, AnalysisOutput o) throws MorphException {
diff --git a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/SyllableUtil.java b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/SyllableUtil.java
index a3e08bb7..99348041 100644
--- a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/SyllableUtil.java
+++ b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/SyllableUtil.java
@@ -78,7 +78,6 @@
    * 영자 또는 숫자일 경우는 모두 해당이 안되므로 가장 마지막 글자인 '힣' 의 음절특성을 반환한다.
    * 
    * @param idx '가'(0xAC00)이 0부터 유니코드에 의해 한글음절을 순차적으로 나열한 값
-   * @return
    * @throws Exception 
    */
   public static char[] getFeature(int idx)  throws MorphException {
@@ -95,7 +94,6 @@
   /**
    * 각 음절의 특성을 반환한다.
    * @param syl  음절 하나
-   * @return
    * @throws Exception 
    */
   public static char[] getFeature(char syl) throws MorphException {
@@ -108,7 +106,6 @@
   /**
    * 음절정보특성을 파일에서 읽는다.
    * 
-   * @return
    * @throws Exception
    */  
   private static List getSyllableFeature() throws MorphException {
diff --git a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/Trie.java b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/Trie.java
index ebf6d8d3..e479f77a 100644
--- a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/Trie.java
+++ b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/Trie.java
@@ -107,8 +107,6 @@ public Trie(boolean ignoreCase) {
 
   /**
    * Makes this empty.
-   * 
-   * @modifies this
    */
   public void clear() {
     this.root = new TrieNode<V>();
@@ -180,8 +178,6 @@ private final int match(String a, int startOffset, int stopOffset, String b) {
    * Maps the given key (which may be empty) to the given value.
    * 
    * @return the old value associated with key, or <tt>null</tt> if none
-   * @requires value != null
-   * @modifies this
    */
   public V add(String key, V value) {
     // early conversion of key, for best performance
@@ -290,7 +286,6 @@ public Object get(String key) {
    * Ensures no values are associated with the given key.
    * 
    * @return <tt>true</tt> if any values were actually removed
-   * @modifies this
    */
   public boolean remove(String key) {
     // early conversion of search key
@@ -312,8 +307,6 @@ public boolean remove(String key) {
    * contains exactly the values v for which there exists a key k so that
    * k.startsWith(prefix) and get(k) == v. The remove() operation on the
    * iterator is unimplemented.
-   * 
-   * @requires this not modified while iterator in use
    */
   public Iterator getPrefixedBy(String prefix) {
     // Early conversion of search key
@@ -331,7 +324,7 @@ public Iterator getPrefixedBy(String prefix) {
    * But it can be performed early on the whole buffer using the public method
    * <tt>canonicalCase(String)</tt> of this.
    * 
-   * @requires 0 &lt;= startOffset &lt;= stopOffset &lt;= prefix.length
+   * requires 0 &lt;= startOffset &lt;= stopOffset &lt;= prefix.length
    * @see #canonicalCase(String)
    */
   public Iterator getPrefixedBy(String prefix, int startOffset, int stopOffset) {
diff --git a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/VerbUtil.java b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/VerbUtil.java
index 5d73aab7..2a33b554 100644
--- a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/VerbUtil.java
+++ b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/java/org/apache/lucene/analysis/kr/utils/VerbUtil.java
@@ -43,8 +43,6 @@
   
   /**
    * 어간이 용언화접미사로 끝나면 index 를 반환한다.  아니면 -1을 반환한다.
-   * @param result
-   * @return
    */
   public static int endsWithVerbSuffix(String stem) {
     int len = stem.length();
@@ -59,8 +57,6 @@ public static int endsWithVerbSuffix(String stem) {
    
   /**
    * 어간부에 보조용언 [하,되,오,내,주,지]가 있는지 조사한다.
-   * @param stem
-   * @return
    */
   public static int endsWithXVerb(String stem) {
     int len = stem.length();
@@ -127,7 +123,6 @@ public static boolean ananlysisNJCM(AnalysisOutput o, List candidates) throws Mo
    * 어미부와 어간부가 분리된 상태에서 용언화접미사가 결합될 수 있는지 조사한다.
    * @param o  어미부와 어간부가 분리된 결과
    * @param candidates
-   * @return
    * @throws MorphException
    */
   public static boolean ananlysisNSM(AnalysisOutput o, List candidates) throws MorphException {
@@ -257,10 +252,6 @@ public static boolean analysisVMCM(AnalysisOutput o, List candidates) throws Mor
    * 
    * 6. 도와주다 : 용언 + '아/어' + 보조용언 + 어미 (PTN_VMXM)
    * 
-   * @param o
-   * @param candidates
-   * @return
-   * @throws MorphException
    */
   public static boolean analysisVMXM(AnalysisOutput o, List candidates) throws MorphException {
 
diff --git a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/test/org/apache/lucene/analysis/kr/TestKoreanTokenizerFactory.java b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/test/org/apache/lucene/analysis/kr/TestKoreanTokenizerFactory.java
index e69de29b..78e5aa20 100644
--- a/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/test/org/apache/lucene/analysis/kr/TestKoreanTokenizerFactory.java
+++ b/lucene/dev/branches/lucene4956/lucene/analysis/arirang/src/test/org/apache/lucene/analysis/kr/TestKoreanTokenizerFactory.java
@@ -0,0 +1,36 @@
+package org.apache.lucene.analysis.kr;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.io.IOException;
+import java.io.StringReader;
+import java.util.HashMap;
+
+import org.apache.lucene.analysis.BaseTokenStreamTestCase;
+import org.apache.lucene.analysis.TokenStream;
+
+public class TestKoreanTokenizerFactory extends BaseTokenStreamTestCase {
+
+  public void testBasic() throws IOException {
+    KoreanTokenizerFactory factory = new KoreanTokenizerFactory(new HashMap<String, String>());
+    TokenStream ts = factory.create(new StringReader("자바로 전부 제작된 텍스트 검색 엔진 라이브러리"));
+    assertTokenStreamContents(ts,
+        new String[]{"자바로", "전부", "제작된", "텍스트", "검색", "엔진", "라이브러리"}
+    );
+  }
+}
