diff --git a/db/derby/code/branches/10.2/java/client/org/apache/derby/client/am/Connection.java b/db/derby/code/branches/10.2/java/client/org/apache/derby/client/am/Connection.java
index 5f79ae73..3ef6cd2c 100644
--- a/db/derby/code/branches/10.2/java/client/org/apache/derby/client/am/Connection.java
+++ b/db/derby/code/branches/10.2/java/client/org/apache/derby/client/am/Connection.java
@@ -945,8 +945,13 @@ synchronized public void setTransactionIsolation(int level) throws SQLException
                                 java.sql.ResultSet.CONCUR_READ_ONLY,
                                 holdability());
             }
+
             setTransactionIsolationStmt.executeUpdate("SET CURRENT ISOLATION = " + levelString);
 
+            // The server has now implicitely committed the
+            // transaction so we have to clean up locally.
+            completeLocalCommit();
+
             isolation_ = level;
         }
         catch ( SqlException se )
diff --git a/db/derby/code/branches/10.2/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/setTransactionIsolation.java b/db/derby/code/branches/10.2/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/setTransactionIsolation.java
index 89e69d79..52906038 100644
--- a/db/derby/code/branches/10.2/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/setTransactionIsolation.java
+++ b/db/derby/code/branches/10.2/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/setTransactionIsolation.java
@@ -78,7 +78,7 @@ private static void createAndPopulateTable(Connection conn) throws SQLException
     Statement stmt = conn.createStatement();
 
 
-	String[] tabsToDrop = {"tab1", "t1", "t1copy", "t2"};
+	String[] tabsToDrop = {"tab1", "t1", "t1copy", "t2", "t3"};
 	for (int i = 0; i < tabsToDrop.length; i++)
 		dropTable(stmt,tabsToDrop[i]);
 
@@ -111,6 +111,10 @@ private static void createAndPopulateTable(Connection conn) throws SQLException
 	stmt.executeUpdate("INSERT INTO T1 VALUES(1,'First Hello')");
 	stmt.executeUpdate("INSERT INTO T1 VALUES(2,'Second Hello')");
 	stmt.executeUpdate("INSERT INTO T1 VALUES(3,'Third Hello')");
+
+
+    stmt.executeUpdate("create table t3 (i integer)");
+
     System.out.println("done creating table and inserting data.");
 
     stmt.close();
@@ -128,7 +132,7 @@ public static void runTests( Connection conn) throws Throwable
 		   conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
 		   testIsolation(conn, false);
 		   testSetTransactionIsolationInHoldCursor(conn);
-
+           testSetTransactionIsolationCommits(conn);
 		} catch (SQLException sqle) {
 			System.out.print("FAIL:");
 			org.apache.derby.tools.JDBCDisplayUtil.ShowSQLException(System.out, sqle);
@@ -213,6 +217,50 @@ public static void testSetTransactionIsolationInHoldCursor(Connection conn)
 		System.out.println("FAIL: setTransactionIsolation() did not throw exception with open hold cursor");
 	}
 	
+	/**
+	 *   setTransactionIsolation commits?
+	 */
+	public static void testSetTransactionIsolationCommits(Connection conn) 
+	{
+        // In the current client implementation, the transaction will
+        // commit when setTransactionIsolation is called, while the
+        // embedded driver will not commit. See
+        // http://issues.apache.org/jira/browse/DERBY-2064
+		try {
+            conn.rollback();
+            conn.setAutoCommit(false);
+			conn.setTransactionIsolation(java.sql.Connection.TRANSACTION_SERIALIZABLE);
+            Statement s = conn.createStatement();
+            s.executeUpdate("delete from t3");
+            s.executeUpdate("insert into t3 values(1)");
+            conn.commit();
+            s.executeUpdate("insert into t3 values(2)");
+			conn.setTransactionIsolation(java.sql.Connection.TRANSACTION_SERIALIZABLE);
+            conn.rollback();
+            ResultSet rs = s.executeQuery("select count(*) from t3");
+            rs.next();
+            int count = rs.getInt(1);
+            switch (count) {
+            case 1:
+                System.out.println("count="+ count + 
+                                   ", setTransactionIsolation() does not commit");
+                break;
+            case 2:
+                System.out.println("count="+ count + 
+                                   ", setTransactionIsolation() commits");
+                break;
+            default:
+                System.out.println("FAIL: count="+ count + 
+                                   ", unexepected behaviour from testSetTransactionIsolationCommits");
+                break;
+            }
+            rs.close();
+            s.close();
+		} catch (SQLException se) {
+			System.out.println(se.getMessage());
+		}
+	}
+	
 	public static void testLevelsAndPrintStatistics(Connection con, String sql,
 													boolean makeNewStatements)
 		throws SQLException
