diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 0a718334..d61977cb 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -894,7 +894,7 @@ private ColumnFamily cacheRow(DecoratedKey key)
 
     private ColumnFamily getColumnFamily(QueryFilter filter, int gcBefore)
     {
-        assert columnFamily.equals(filter.getColumnFamilyName());
+        assert columnFamily.equals(filter.getColumnFamilyName()) : filter.getColumnFamilyName();
 
         long start = System.nanoTime();
         try
@@ -1014,7 +1014,7 @@ private ColumnFamily getTopLevelColumns(QueryFilter filter, int gcBefore)
                 }
             }
 
-            Comparator<IColumn> comparator = QueryFilter.getColumnComparator(getComparator());
+            Comparator<IColumn> comparator = filter.filter.getColumnComparator(getComparator());
             Iterator collated = IteratorUtils.collatedIterator(comparator, iterators);
             filter.collectCollatedColumns(returnCF, collated, gcBefore);
             // Caller is responsible for final removeDeletedCF.  This is important for cacheRow to work correctly:
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/RowIteratorFactory.java b/cassandra/trunk/src/java/org/apache/cassandra/db/RowIteratorFactory.java
index 05d33d40..8ee4d2c4 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/RowIteratorFactory.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/RowIteratorFactory.java
@@ -125,7 +125,7 @@ protected boolean isEqual(IColumnIterator o1, IColumnIterator o2)
 
             protected Row getReduced()
             {
-                Comparator<IColumn> colComparator = QueryFilter.getColumnComparator(comparator);
+                Comparator<IColumn> colComparator = filter.filter.getColumnComparator(comparator);
                 Iterator<IColumn> colCollated = IteratorUtils.collatedIterator(colComparator, colIters);
 
                 ColumnFamily returnCF = null;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java
index 04230c05..f673d6f8 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java
@@ -84,7 +84,8 @@ public IColumnIterator getSSTableColumnIterator(SSTableReader sstable, FileDataI
         return superFilter.getSSTableColumnIterator(sstable.metadata, file, key);
     }
 
-    public static Comparator<IColumn> getColumnComparator(final AbstractType comparator)
+    // here so it can be used by SQF and NQF.  non-package callers should call IFilter.getColumnComparator
+    static Comparator<IColumn> getColumnComparator(final Comparator<byte[]> comparator)
     {
         return new Comparator<IColumn>()
         {
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java
index 7fbbf715..143431ad 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java
@@ -18,10 +18,12 @@
 
 package org.apache.cassandra.db;
 
+import java.nio.ByteBuffer;
 import java.text.DecimalFormat;
 import java.text.NumberFormat;
 import java.util.*;
 import java.io.IOException;
+import java.util.concurrent.ExecutionException;
 
 import org.apache.cassandra.config.DatabaseDescriptor;
 
@@ -224,6 +226,38 @@ public void runMayThrow() throws Exception
         reTest(table.getColumnFamilyStore("Standard1"), verify);
     }
 
+    @Test
+    public void testReversedWithFlushing() throws IOException, ExecutionException, InterruptedException
+    {
+        final Table table = Table.open("Keyspace1");
+        final ColumnFamilyStore cfs = table.getColumnFamilyStore("StandardLong1");
+        final DecoratedKey ROW = Util.dk("row4");
+
+        for (int i = 0; i < 10; i++)
+        {
+            RowMutation rm = new RowMutation("Keyspace1", ROW.key);
+            ColumnFamily cf = ColumnFamily.create("Keyspace1", "StandardLong1");
+            cf.addColumn(new Column(FBUtilities.toByteArray((long)i), ArrayUtils.EMPTY_BYTE_ARRAY, new TimestampClock(0)));
+            rm.add(cf);
+            rm.apply();
+        }
+
+        cfs.forceBlockingFlush();
+
+        for (int i = 10; i < 20; i++)
+        {
+            RowMutation rm = new RowMutation("Keyspace1", ROW.key);
+            ColumnFamily cf = ColumnFamily.create("Keyspace1", "StandardLong1");
+            cf.addColumn(new Column(FBUtilities.toByteArray((long)i), ArrayUtils.EMPTY_BYTE_ARRAY, new TimestampClock(0)));
+            rm.add(cf);
+            rm.apply();
+
+            cf = cfs.getColumnFamily(ROW, new QueryPath("StandardLong1"), ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, true, 1);
+            assertEquals(1, cf.getColumnNames().size());
+            assertEquals(i, ByteBuffer.wrap(cf.getColumnNames().iterator().next()).getLong());
+        }
+    }
+
     private void validateGetSliceNoMatch(Table table) throws IOException
     {
         ColumnFamilyStore cfStore = table.getColumnFamilyStore("Standard2");
