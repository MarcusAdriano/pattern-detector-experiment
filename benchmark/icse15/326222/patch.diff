diff --git a/db/derby/code/branches/10.1/java/client/org/apache/derby/client/am/Statement.java b/db/derby/code/branches/10.1/java/client/org/apache/derby/client/am/Statement.java
index cfcab8a8..1d1d332c 100644
--- a/db/derby/code/branches/10.1/java/client/org/apache/derby/client/am/Statement.java
+++ b/db/derby/code/branches/10.1/java/client/org/apache/derby/client/am/Statement.java
@@ -1799,13 +1799,58 @@ private void markPrepared() {
     // Should investigate if it can be optimized..  if we can avoid this parsing..
     //
     void parseSqlAndSetSqlModes(String sql) throws SqlException {
-        java.util.StringTokenizer tokenizer = new java.util.StringTokenizer(sql, "\t\n\r\f=? (");
+        String delims = "\t\n\r\f=? (";
+        java.util.StringTokenizer tokenizer = null;
+        String firstToken = null;
+
+        // See if the statement starts with a comment; if so, move
+        // past the comment and get the first token of the actual
+        // statement to be executed.  Note: must use "startsWith"
+        // when looking for the comment delimiters instead of
+        // "equals" because there may not be whitespace between the
+        // the delimiter and the comment itself, ex "--my comment".
+        if (sql.trim().startsWith("--")) {
+
+            // Read each line of the statement until we find a
+            // line that is NOT a comment.
+            int lastEndLine = -1;
+            String endline = "\n\r\f";
+            tokenizer = new java.util.StringTokenizer(sql, endline, true);
+            while (tokenizer.hasMoreTokens()) {
+                firstToken = tokenizer.nextToken();
+                if (endline.indexOf(firstToken) != -1)
+                // this is some sort of newline ("\n", "\r", or "\f").
+                    lastEndLine = sql.indexOf(firstToken, lastEndLine+1);
+                else if (!firstToken.trim().startsWith("--"))
+                    break;
+            }
+
+            if (firstToken.startsWith("--")) {
+            // entire statement was just one or more comments; pass it as
+            // a query to the server and let the server deal with it.
+                sqlMode_ = isQuery__;
+                return;
+            }
+            else {
+            // we have a non-comment line; get a tokenizer for the
+            // statement beginning at the start of this line.
+                tokenizer = new java.util.StringTokenizer(
+                    sql.substring(lastEndLine+1), delims);
+            }
+
+        }
+        else {
+        // there aren't any leading comments, so just get the first token
+        // in the SQL statement.
+            tokenizer = new java.util.StringTokenizer(sql, delims);
+        }
+
         if (!tokenizer.hasMoreTokens()) {
             throw new SqlException(agent_.logWriter_, "SQL passed with no tokens");
         }
 
         sqlUpdateMode_ = 0;
-        String firstToken = tokenizer.nextToken();
+        firstToken = tokenizer.nextToken();
 
         if (firstToken.equalsIgnoreCase("select") || // captures <subselect> production
                 firstToken.equalsIgnoreCase("values")) // captures <values-clause> production
diff --git a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/nullSQLText.java b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/nullSQLText.java
index 00ff8ea5..eba5a124 100644
--- a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/nullSQLText.java
+++ b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/nullSQLText.java
@@ -32,11 +32,13 @@
 import java.sql.Types;
 
 import org.apache.derby.tools.ij;
+import org.apache.derbyTesting.functionTests.util.TestUtil;
 import org.apache.derbyTesting.functionTests.util.JDBCTestDisplayUtil;
 
 /**
  * Test of null strings in prepareStatement and execute 
- * result set
+ * result set.  Also test comments in SQL text that is
+ * passed to an "execute" call.
  *
  * @author peachey
  */
@@ -99,6 +101,10 @@ public static void main(String[] args) {
 				System.out.println("FAIL -- expected exception");
 				dumpSQLExceptions(e);
 			}
+
+			// Test comments in statements.
+			derby522(s);
+
 			con.close();
 		}
 		catch (SQLException e) {
@@ -119,4 +125,134 @@ static private void dumpSQLExceptions (SQLException se) {
 		}
 	}
 
+
+	/* ****
+	 * Derby-522: When a statement with comments at the front
+	 * is passed through to an "execute" call, the client throws
+	 * error X0Y79 ("executeUpdate cannot be called with a statement
+	 * that returns a result set").  The same thing works fine
+	 * against Derby embedded.  This method executes several
+	 * statements that have comments preceding them; with the
+	 * fix for DERBY-522, these should all either pass or
+	 * throw the correct syntax errors (i.e. the client should
+	 * behave the same way as embedded).
+	 */
+	private static void derby522(Statement st) throws Exception
+	{
+		System.out.println("Starting test for DERBY-522.");
+
+		st.execute("create table t1 (i int)");
+		st.execute("insert into t1 values 1, 2, 3, 4, 5, 6, 7");
+		st.execute("create procedure proc1() language java " +
+			"parameter style java dynamic result sets 1 " +
+			"external name 'org.apache.derbyTesting.functionTests." +
+			"tests.jdbcapi.nullSQLText.sp1'");
+
+		// These we expect to fail with syntax errors, as in embedded mode.
+		testCommentStmt(st, " --", true);
+		testCommentStmt(st, " -- ", true);
+		testCommentStmt(st, " -- This is a comment \n --", true);
+		testCommentStmt(
+			st,
+			" -- This is a comment\n --And another\n -- Andonemore",
+			true);
+
+		// These we expect to return valid results for embedded and
+		// Derby Client (as of DERBY-522 fix); for JCC, these will
+		// fail.
+		testCommentStmt(st, " --\nvalues 2, 4, 8", TestUtil.isJCCFramework());
+		testCommentStmt(
+			st,
+			" -- This is \n -- \n --3 comments\nvalues 8",
+			TestUtil.isJCCFramework());
+		testCommentStmt(
+			st,
+			" -- This is a comment\n --And another\n -- Andonemore\nvalues (2,3)",
+			TestUtil.isJCCFramework());
+		testCommentStmt(st,
+			" -- This is a comment\n select i from t1",
+			TestUtil.isJCCFramework());
+		testCommentStmt(st,
+			" --singleword\n insert into t1 values (8)",
+			TestUtil.isJCCFramework());
+		testCommentStmt(st,
+			" --singleword\ncall proc1()",
+			TestUtil.isJCCFramework());
+		testCommentStmt(st,
+			" -- leading comment\n(\nvalues 4, 8)",
+			TestUtil.isJCCFramework());
+		testCommentStmt(st,
+			" -- leading comment\n\n(\n\n\rvalues 4, 8)",
+			TestUtil.isJCCFramework());
+
+		// While we're at it, test comments in the middle and end of the
+		// statement.  Prior to the patch for DERBY-522, statements
+		// ending with a comment threw syntax errors; that problem
+		// was fixed with DERBY-522, as well, so all of these should now
+		// succeed in all modes (embedded, Derby Client, and JCC).
+		testCommentStmt(st, "select i from t1 -- This is a comment", false);
+		testCommentStmt(st, "select i from t1\n -- This is a comment", false);
+		testCommentStmt(st, "values 8, 4, 2\n --", false);
+		testCommentStmt(st, "values 8, 4,\n -- middle comment\n2\n -- end", false);
+		testCommentStmt(st, "values 8, 4,\n -- middle comment\n2\n -- end\n", false);
+
+		// Clean-up.
+		try {
+			st.execute("drop table t1");
+		} catch (SQLException se) {}
+		try {
+			st.execute("drop procedure proc1");
+		} catch (SQLException se) {}
+
+		st.close();
+		System.out.println("DERBY-522 test completed.");
+	}
+
+	/* ****
+	 * Helper method for derby522.
+	 */
+	private static void testCommentStmt(Statement st, String sql,
+		boolean expectError) throws SQLException
+	{
+
+		try {
+
+			System.out.println("[ Test Statement ]:\n" + sql);
+			st.execute(sql);
+			System.out.print("[ Results ]: ");
+			ResultSet rs = st.getResultSet();
+			if (rs != null) {
+				while (rs.next())
+					System.out.print(" " + rs.getInt(1));
+				System.out.println();
+			}
+			else
+				System.out.println("(NO RESULT SET)");
+
+		} catch (SQLException se) {
+
+			if (expectError)
+				System.out.print("[ EXPECTED ERROR ]: ");
+			else
+				System.out.print("[ FAILED ]: ");
+			dumpSQLExceptions(se);
+
+		}
+
+	}
+
+	/* ****
+	 * Helper method for derby522.
+	 */
+	public static void sp1(ResultSet [] rs) throws SQLException {
+
+		Connection conn = DriverManager.getConnection(
+			"jdbc:default:connection");
+
+		Statement st = conn.createStatement();
+		rs[0] = st.executeQuery("select i from t1");
+		return;
+
+	}
+
 }
