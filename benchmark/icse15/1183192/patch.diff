diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
index 1b300f0a..11f091fb 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
@@ -64,6 +64,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.jdbc.BrokeredConnectionControl;
 import org.apache.derby.iapi.jdbc.EngineParameterMetaData;
 import org.apache.derby.iapi.jdbc.EnginePreparedStatement;
+import org.apache.derby.iapi.services.loader.GeneratedClass;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 import org.apache.derby.iapi.types.StringDataValue;
 import org.apache.derby.iapi.util.InterruptStatus;
@@ -1077,28 +1078,33 @@ public void clearParameters() throws SQLException {
 			setupContextStack(); // make sure there's context
 
 			try {
-				//bug 4579 - if the statement is invalid, regenerate the metadata info
-				if (preparedStatement.isValid() == false)
-				{
-					//need to revalidate the statement here, otherwise getResultDescription would
-					//still have info from previous valid statement
-					preparedStatement.rePrepare(lcc);
-					rMetaData = null;
-				}
 				//bug 4579 - gcDuringGetMetaData will be null if this is the first time
 				//getMetaData call is made.
 				//Second check - if the statement was revalidated since last getMetaData call,
 				//then gcDuringGetMetaData wouldn't match with current generated class name
-				if (gcDuringGetMetaData == null || gcDuringGetMetaData.equals(execp.getActivationClass().getName()) == false)
-				{
+
+                GeneratedClass currAc = null;
+                ResultDescription resd = null;
+
+                synchronized(execp) {
+                    // DERBY-3823 Some other thread may be repreparing
+                    do {
+                        while (!execp.upToDate()) {
+                            execp.rePrepare(lcc);
+                        }
+
+                        currAc = execp.getActivationClass();
+                        resd = execp.getResultDescription();
+                    } while (currAc == null);
+                }
+
+                if (gcDuringGetMetaData == null ||
+                        !gcDuringGetMetaData.equals(currAc.getName())) {
 					rMetaData = null;
-					gcDuringGetMetaData = execp.getActivationClass().getName();
+                    gcDuringGetMetaData = currAc.getName();
 				}
-				if (rMetaData == null)
-				{
-					ResultDescription resd = preparedStatement.getResultDescription();
-					if (resd != null)
-					{
+
+                if (rMetaData == null && resd != null) {
 						// Internally, the result description has information
 						// which is used for insert, update and delete statements
 						// Externally, we decided that statements which don't
@@ -1113,7 +1119,7 @@ public void clearParameters() throws SQLException {
 						else
 				    		rMetaData = newEmbedResultSetMetaData(resd);
 					}
-				}
+
                 InterruptStatus.restoreIntrFlagIfSeen(lcc);
 			} catch (Throwable t) {
 				throw handleException(t);
