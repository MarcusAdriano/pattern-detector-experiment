diff --git a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/dblook_test_net.java b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/dblook_test_net.java
index 0fbfc74d..e0e1e52f 100644
--- a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/dblook_test_net.java
+++ b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/dblook_test_net.java
@@ -47,7 +47,7 @@ protected void doTest() {
 
 		try {
 
-			createTestDatabase();
+			createTestDatabase(dbCreationScript_1);
 
 			// Don't let error stream ruin the diff.
 			System.err.close();
diff --git a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/dblook_test.java b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/dblook_test.java
index c1d39151..5961e515 100644
--- a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/dblook_test.java
+++ b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/dblook_test.java
@@ -53,7 +53,8 @@
 	private static final int FRONT = -1;
 	private static final int REAR = 1;
 
-	private static final String testDBCreationScript = "dblook_makeDB.sql";
+	protected static final String dbCreationScript_1 = "dblook_makeDB.sql";
+	protected static final String dbCreationScript_2 = "dblook_makeDB_2.sql";
 	private static final char TEST_DELIMITER='#';
 
 	protected static String testDirectory = "dblook_test/";
@@ -72,7 +73,6 @@
 
 	public static void main (String[] args) {
 
-		System.out.println("\n-= Start Test. =-");
 		separator = System.getProperty("file.separator");
 		new dblook_test().doTest();
 		System.out.println("\n[ Done. ]\n");
@@ -88,23 +88,30 @@ protected void doTest() {
 
 		try {
 
-			createTestDatabase();
-			runCSLook(testDBName);
+			// Test full dblook functionality.
+			System.out.println("\n-= Start dblook Functional Tests. =-");
+			createTestDatabase(dbCreationScript_1);
+			runDBLook(testDBName);
+
+			// Test dblook messages.
+			System.out.println("\n-= Start dblook Message Tests =-");
+			createTestDatabase(dbCreationScript_2);
+			runMessageCheckTest(testDBName);
 
 		} catch (SQLException se) {
 
 			System.out.println("FAILED: to complete the test:");
-			se.printStackTrace();
+			se.printStackTrace(System.out);
 			for (se = se.getNextException(); se != null;
 				se = se.getNextException())
 			{
-				se.printStackTrace();
+				se.printStackTrace(System.out);
 			}
 		
 		} catch (Exception e) {
 
 			System.out.println("FAILED: to complete the test:");
-			e.printStackTrace();
+			e.printStackTrace(System.out);
 
 		}
 
@@ -116,18 +123,28 @@ protected void doTest() {
 	 * the test package, create the database that
 	 * will be used as the basis for all dblook
 	 * tests.
+	 * @param scriptName The name of the sql script
+	 *  to use for creating the test database.
 	 * @return The test database has been created
 	 *  in the current test directory, which is
 	 *  "./dblook/" (as created by the harness).
 	 ****/
 
-	protected void createTestDatabase()
+	protected void createTestDatabase(String scriptName)
 		throws Exception
 	{
 
+		// Delete existing database, if it exists.
+		try {
+			deleteDB(testDBName);
+		} catch (Exception e) {
+			System.out.println("** Warning: failed to delete " +
+				"old test db before creating a new one...");
+		}
+
 		Class.forName("org.apache.derby.jdbc.EmbeddedDriver").newInstance();
 		jdbcProtocol = "jdbc:derby:";
-		createDBFromDDL(testDBName, testDBCreationScript);
+		createDBFromDDL(testDBName, scriptName);
 
 		// Figure out where our database directory is (abs path).
 		dbPath = (new File(testDirectory)).getAbsolutePath();
@@ -136,7 +153,7 @@ protected void createTestDatabase()
 	}
 
 	/* **********************************************
-	 * runCSLook:
+	 * runDBLook:
 	 * Runs a series of tests using dblook on
 	 * the received database.
 	 * @param dbName The name of the database on which to
@@ -146,7 +163,7 @@ protected void createTestDatabase()
 	 *  has been run.
 	 ****/
 
-	private void runCSLook(String dbName)
+	private void runDBLook(String dbName)
 		throws Exception
 	{
 
@@ -169,7 +186,6 @@ private void runCSLook(String dbName)
 		lookOne(dbName);
 		dumpFileToSysOut("dblook.log");
 
-
 		// Now, create new db from the DDL that
 		// was generated by dblook.
 		String newDBName = dbName + "_new";
@@ -273,17 +289,17 @@ protected void runTest(int whichTest, String dbName,
 		} catch (SQLException e) {
 
 			System.out.println("FAILED: Test # : " + whichTest);
-			System.out.println(e.getMessage());
+			e.printStackTrace(System.out);
 			for (e = e.getNextException(); e != null;
 				e = e.getNextException())
 			{
-				System.out.println(e.getMessage());
+				e.printStackTrace(System.out);
 			}
 
 		} catch (Exception e) {
 
 			System.out.println("FAILED: Test # : " + whichTest);
-			System.out.println(e.getMessage());
+			e.printStackTrace(System.out);
 
 		}
 
@@ -382,18 +398,17 @@ private void lookThree(String dbName)
 		} catch (SQLException e) {}
 
 		// Run the test.
+		try {
 
-		dblook looker = new dblook(new String[] {
+			new dblook(new String[] {
 			"-d", sourceDBUrl,
 			"-o", dbName + ".sql",
 			"-td", "" }
 		);
 
-		try {
-			looker.go(sourceDBUrl, dbPath + separator + dbName);
 		} catch (Exception e) {
 			System.out.println("FAILED: ");
-			e.printStackTrace();
+			e.printStackTrace(System.out);
 		}
 
 		return;
@@ -483,15 +498,10 @@ private void lookSix(String dbName)
 			"writing\nerror to the log:\n");
  
 		// Url is intentionally incorrect; it will cause an error.
-		dblook looker = new dblook(new String[] {
+		new dblook(new String[] {
 			"-o", dbName + ".sql",
 			"-d", dbName }
 		);
-		try {
-			looker.go(dbName, dbName);
-		} catch (Exception e) {
-		// we expect it to go wrong.
-		}
 
 	}
 
@@ -540,19 +550,129 @@ private void go(String dbName, String [] args) {
 		String sourceDBUrl = jdbcProtocol + dbPath +
 			separator + dbName;
 
-		String [] fullArgs = new String[args.length+3];
+		String [] fullArgs = new String[args.length+2];
 		fullArgs[0] = "-d";
 		fullArgs[1] = sourceDBUrl;
-		fullArgs[2] = "-append";
-		for (int i = 3; i < fullArgs.length; i++)
-			fullArgs[i] = args[i-3];
+		for (int i = 2; i < fullArgs.length; i++)
+			fullArgs[i] = args[i-2];
 
-		dblook looker = new dblook(fullArgs);
 		try {
-			looker.go(sourceDBUrl, dbPath + separator + dbName);
+			new dblook(fullArgs);
 		} catch (Exception e) {
-			System.out.println("FAILED: ");
-			e.printStackTrace();
+			System.out.println("FAILED: to run dblook: ");
+			e.printStackTrace(System.out);
+		}
+
+	}
+
+	/* **********************************************
+	 * runMessageCheckTest
+	 * Run dblook and verify that all of the dblook
+	 * messages are correctly displayed.
+	 * @param dbName The name of the source database (i.e.
+	 *  the database for which the DDL is generated).
+	 * @return The DDL for a simple database, plus all
+	 *  dblook messages, have been generated and written
+	 *  to System.out.
+	 ****/
+	private void runMessageCheckTest(String dbName)
+		throws Exception
+	{
+
+		// #1: First, run DB look standard to check for
+		// all of the "header" messages that are printed
+		// out along with DDL.
+		System.out.println("\n************\n" +
+			"Msg Test 1\n" +
+			"************\n");
+		lookOne(dbName);
+		dumpFileToSysOut(dbName + ".sql");
+		dumpFileToSysOut("dblook.log");
+
+		// Now, we have to run some additional dblook commands
+		// to get the "non-standard" messages.
+
+		// #2: Specify a target table and target schema, to
+		// make sure they are echoed correctly.  Also, specify
+		// an output file to make sure the file creation header
+		// is printed in the file.
+		System.out.println(
+			"\n************\n" +
+			"Msg Test 2\n" +
+			"************\n");
+		go(dbName, new String [] {
+				"-t", "t1",
+				"-z", "bar",
+				"-o", dbName + ".sql"
+			});
+		dumpFileToSysOut(dbName + ".sql");
+		dumpFileToSysOut("dblook.log");
+
+		// #3: Run without specifying a database, to make
+		// sure the usage message is printed to System.out
+		System.out.println(
+			"\n************\n" +
+			"Msg Test 3\n" +
+			"************\n");
+		try {
+			new dblook(new String[] { "-verbose" });
+		} catch (Exception e) {
+			System.out.println("FAILED: to run dblook: ");
+			e.printStackTrace(System.out);
+		}
+
+		// #4: Just to confirm, try once with a statement
+		// delimiter, to make sure it's actually working
+		// correctly (this isn't a "message" per se, but
+		// still, it's worth verifying).
+		System.out.println(
+			"\n************\n" +
+			"Msg Test 4\n" +
+			"************\n");
+		go(dbName, new String [] {
+				"-td", " " + TEST_DELIMITER
+			});
+
+		// #5: Intentionally create an error while loading
+		// a jar file, to make sure the resultant message is
+		// printed correctly.
+		System.out.println(
+			"\n************\n" +
+			"Msg Test 5\n" +
+			"************\n");
+
+		// We'll cause the error by going in and deleting
+		// the jar file from the test database.  First,
+		// get the jar path.
+		String jarPath = (new
+			File(dbPath + separator + dbName)).getAbsolutePath();
+
+		// Have to shut db down before we can mess with it.
+		try {
+			Connection conn =
+				DriverManager.getConnection("jdbc:derby:" + 
+					jarPath + ";shutdown=true");
+			conn.close();
+		} catch (SQLException se) {
+		// shutdown exception.
+		}
+
+		jarPath = jarPath + separator + "jar";
+		deleteFile(new File(jarPath));
+
+		// Now that we've deleted the jar file, run dblook
+		// and check the error.
+		go(dbName, new String [] { 
+				"-verbose",
+				"-o", dbName + ".sql"
+			});
+		dumpFileToSysOut("dblook.log");
+
+		// Clean up.
+		try {
+			deleteFile(new File(dbName + ".sql"));
+		} catch (Exception e) {
+		// not too big of a deal if we fail; just ignore...
 		}
 
 	}
@@ -1388,19 +1508,30 @@ private void dumpFileToSysOut(String fName) {
 
 		try {
 
-			BufferedReader logFile =
+			BufferedReader dumpFile =
 				new BufferedReader(new FileReader(fName));
 
-			if (logFile.readLine() != null)
+			String line = dumpFile.readLine();
+			if (line != null) {
 				System.out.println("File " + fName + " was NOT " +
-					"empty; refer to that file (in the test " +
-					"directory) to see its contents.");
+					"empty.  Contents are:\n" +
+					"############## Begin File Contents ################\n");
+				do {
+					System.out.println(line);
+					line = dumpFile.readLine();
+				} while (line != null);
+				System.out.println(
+					"############## End File Contents ################");
+			}
 			else
 				System.out.println("File " + fName + " was empty.");
 
+			// Close the file.
+			dumpFile.close();
+
 		} catch (Exception e) {
-			System.out.println("FAILED: to dump log file.");
-			e.printStackTrace();
+			System.out.println("FAILED: to dump file '" + fName + "'");
+			e.printStackTrace(System.out);
 		}
 
 		return;
diff --git a/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/dblook/DB_Jar.java b/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/dblook/DB_Jar.java
index 4a5eb3ec..422d7072 100644
--- a/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/dblook/DB_Jar.java
+++ b/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/dblook/DB_Jar.java
@@ -89,13 +89,13 @@ public static void doJars(String dbName, Connection conn)
 			oldJarPath.append(schemaWithoutQuotes);
 			oldJarPath.append(jarFullName);
 
-			// Copy jar file to CSJARS directory.
+			// Copy jar file to DBJARS directory.
 			String absJarDir = null;
 			try {
 
-				// Create the CSJARS directory.
+				// Create the DBJARS directory.
 				File jarDir = new File(System.getProperty("user.dir") +
-					separator + "CSJARS" + separator + schemaWithoutQuotes);
+					separator + "DBJARS" + separator + schemaWithoutQuotes);
 				absJarDir = jarDir.getAbsolutePath();
 				jarDir.mkdirs();
 
@@ -126,7 +126,7 @@ public static void doJars(String dbName, Connection conn)
 				continue;
 			}
 
-			// Now, add the DDL to read the jar from CSJARS.
+			// Now, add the DDL to read the jar from DBJARS.
 			StringBuffer loadJarString = new StringBuffer();
 			loadJarString.append("CALL SQLJ.INSTALL_JAR('file:");
 			loadJarString.append(absJarDir);
diff --git a/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/dblook/Logs.java b/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/dblook/Logs.java
index 66e170df..fb01ddbe 100644
--- a/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/dblook/Logs.java
+++ b/incubator/derby/code/trunk/java/tools/org/apache/derby/impl/tools/dblook/Logs.java
@@ -64,8 +64,8 @@ public static boolean initLogs(String logFileName, String ddlFileName,
 		try {
 
 			logFile = new PrintWriter(new FileOutputStream(logFileName, appendLogs));
-			if (ddlFileName != null)
-				ddlFile = new PrintWriter(new FileOutputStream(ddlFileName, appendLogs));
+			ddlFile = (ddlFileName == null) ? null
+					: new PrintWriter(new FileOutputStream(ddlFileName, appendLogs));
 			verbose = doVerbose;
 			stmtEnd = endOfStmt;
 			atLeastOneDebug = false;
diff --git a/incubator/derby/code/trunk/java/tools/org/apache/derby/tools/dblook.java b/incubator/derby/code/trunk/java/tools/org/apache/derby/tools/dblook.java
index 45601fe7..98981745 100644
--- a/incubator/derby/code/trunk/java/tools/org/apache/derby/tools/dblook.java
+++ b/incubator/derby/code/trunk/java/tools/org/apache/derby/tools/dblook.java
@@ -89,12 +89,14 @@
 
 	public static void main(String[] args) {
 
-		dblook looker = new dblook(args);
 		try {
-			looker.go(sourceDBUrl, sourceDBName);
+			new dblook(args);
 		} catch (Exception e) {
-		// Errors are logged and printed to console according
-		// to command line arguments, so just ignore here.
+		// All "normal" errors are logged and printed to
+		// console according to command line arguments,
+		// so if we get here, something unexpected must
+		// have happened; print to error stream.
+			e.printStackTrace();
 		}
 
 	}
@@ -103,11 +105,10 @@ public static void main(String[] args) {
 	 * Constructor:
 	 * Parse the command line, initialize logs, echo program variables,
 	 * and load the Derby driver.
-	 * @param args args[0] is the database URL.  All other command-line
-	 *  parameters are read as system properties.
+	 * @param args Array of dblook command-line arguments.
 	 * ****/
 
-	public dblook(String[] args) {
+	public dblook(String[] args) throws Exception {
 
         // Adjust the application in accordance with derby.ui.locale
 		// and derby.ui.codeset
@@ -119,13 +120,13 @@ public dblook(String[] args) {
 		// Parse the command line.
 		if (!parseArgs(args)) {
 			System.out.println(lookupMessage("DBLOOK_Usage"));
-			System.exit(1);
+			return;
 		}
 
 		showVariables();
 
 		if (!loadDriver()) {
-		// Failed when loading the driver.  We already printed
+		// Failed when loading the driver.  We already logged
 		// the exception, so just return.
 			return;
 		}
@@ -133,6 +134,9 @@ public dblook(String[] args) {
 		schemaMap = new HashMap();
 		tableIdToNameMap = new HashMap();
 
+		// Now run the utility.
+		go();
+
 	}
 
 	/* ************************************************
@@ -158,9 +162,7 @@ private void initState() {
 
 	/* ************************************************
 	 * parseArgs:
-	 * Parse the command-line arguments.  There is only one
-	 * actual argument (database url); the rest of the parameters
-	 * are read in as System properties.
+	 * Parse the command-line arguments.
 	 * @param args args[0] is the url for the source database.
 	 * @return true if all parameters were loaded and the output
 	 *  files were successfully created; false otherwise.
@@ -258,10 +260,11 @@ else if (args[start].equals("-t"))
 				// list of tables.
 					return extractTableNamesFromList(args, start+1);
 				return -1;
+
 			case 'o':
 				if (!haveVal)
 					return -1;
-				if ((args[start].length() == 2) && (args[start+1].length() > 0)){
+				if ((args[start].length() == 2) && (args[start+1].length() > 0)) {
 					ddlFileName = args[++start];
 					return start;
 				}
@@ -492,18 +495,12 @@ private void showVariables() {
 	 * line), then we enforce that here.
 	 * @precondition all user-specified parameters have
 	 *  been loaded.
-	 * @param srcUrl The full url of the database, as obtained
-	 *  from parseArgs().
-	 * @param srcName The name of the database (as opposed to
-	 *  the URL), as obtained from parseArgs().  This is
-	 *  needed for locating any jar files that might'
-	 *  exist in the source database.
 	 * @return DDL for the source database has been
 	 *  generated and printed to output, subject to
 	 *  user-specified restrictions.
 	 * ****/
 
-	public void go(String srcUrl, String srcName)
+	private void go()
 		throws Exception
 	{
 
@@ -512,20 +509,8 @@ public void go(String srcUrl, String srcName)
 
 			// Connect to the database, prepare statements,
 			// and load id-to-name mappings.
-			this.conn = DriverManager.getConnection(srcUrl);
-			try {
+			this.conn = DriverManager.getConnection(sourceDBUrl);
 				prepForDump();
-			} catch (SQLException sqlE) {
-				Logs.debug(sqlE);
-				Logs.debug(Logs.unRollExceptions(sqlE), (String)null);
-				Logs.cleanup();
-				return;
-			}
-			catch (Exception e) {
-				Logs.debug(e);
-				Logs.cleanup();
-				return;
-			}
 
 			// Generate DDL.
 
@@ -536,7 +521,7 @@ public void go(String srcUrl, String srcName)
 
 			if (tableList == null) {
 			// Don't do these if user just wants table-related objects.
-				DB_Jar.doJars(srcName, this.conn);
+				DB_Jar.doJars(sourceDBName, this.conn);
 				DB_StoredProcedure.doStoredProcedures(this.conn);
 			}
 
@@ -561,19 +546,21 @@ public void go(String srcUrl, String srcName)
 			Logs.debug(sqlE);
 			Logs.debug(Logs.unRollExceptions(sqlE), (String)null);
 			Logs.cleanup();
-			throw sqlE;
+			return;
 		}
 		catch (Exception e)
 		{
 			Logs.debug(e);
 			Logs.cleanup();
-			throw e;
+			return;
 		}
 		finally {
 		// Close our connection.
+			if (conn != null) {
 			conn.commit();
 			conn.close();
 		}
+		}
 
 	}
 
@@ -757,11 +744,15 @@ public static String stripQuotes(String quotedName) {
 		if (quotedName == null)
 			return null;
 
-		if ((quotedName.indexOf("\"") == -1) &&
-			(quotedName.indexOf("'") == -1))
-		// nothing to do.
+		if (!(quotedName.startsWith("'") || quotedName.startsWith("\"")))
+		// name doesn't _start_ with a quote, so we do nothing.
+			return quotedName;
+
+		if (!(quotedName.endsWith("'") || quotedName.endsWith("\"")))
+		// name doesn't _end_ with a quote, so we do nothing.
 			return quotedName;
 
+		// Remove starting and ending quotes.
 		return quotedName.substring(1, quotedName.length() - 1);
 
 	}
@@ -1127,7 +1118,7 @@ public static String removeNewlines(String str) {
 		} catch (Exception e) {
 		// if something went wrong, just return the string as is--
 		// worst case is that the generated DDL is correct, it just
-		// can't be run in a DB2 CLP script (because of the newline
+		// can't be run in some SQL script apps (because of the newline
 		// characters).
 			return str;
 		}
