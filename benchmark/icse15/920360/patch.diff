diff --git a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/streaming/StreamOut.java b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/streaming/StreamOut.java
index 68e11176..38fd0575 100644
--- a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/streaming/StreamOut.java
+++ b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/streaming/StreamOut.java
@@ -33,13 +33,12 @@
 import org.apache.commons.lang.StringUtils;
 
 import org.apache.cassandra.dht.Range;
-import org.apache.cassandra.streaming.StreamInitiateMessage;
 import org.apache.cassandra.db.Table;
 import org.apache.cassandra.io.SSTable;
 import org.apache.cassandra.io.SSTableReader;
 import org.apache.cassandra.net.Message;
 import org.apache.cassandra.net.MessagingService;
-import org.apache.cassandra.streaming.StreamOutManager;
+
 
 /**
  * This class handles streaming data from one node to another.
@@ -60,6 +59,13 @@
 
     static String TABLE_NAME = "STREAMING-TABLE-NAME";
 
+    private static void updateStatus(String msg)
+    {
+        StreamingService.instance.setStatus(msg);
+        if (logger.isInfoEnabled() && !StreamingService.NOTHING.equals(msg))
+            logger.info(msg);
+    }
+
     /**
      * Split out files for all tables on disk locally for each range and then stream them to the target endpoint.
     */
@@ -67,7 +73,6 @@ public static void transferRanges(InetAddress target, String tableName, Collecti
     {
         assert ranges.size() > 0;
 
-        if (logger.isDebugEnabled())
             logger.debug("Beginning transfer process to " + target + " for ranges " + StringUtils.join(ranges, ", "));
 
         /*
@@ -78,8 +83,7 @@ public static void transferRanges(InetAddress target, String tableName, Collecti
         try
         {
             Table table = Table.open(tableName);
-            if (logger.isDebugEnabled())
-                logger.debug("Flushing memtables ...");
+            updateStatus("Flushing memtables for " + tableName + "...");
             for (Future f : table.flush())
             {
                 try
@@ -95,8 +99,7 @@ public static void transferRanges(InetAddress target, String tableName, Collecti
                     throw new RuntimeException(e);
                 }
             }
-            if (logger.isDebugEnabled())
-                logger.debug("Performing anticompaction ...");
+            updateStatus("Performing anticompaction ...");
             /* Get the list of files that need to be streamed */
             transferSSTables(target, table.forceAntiCompaction(ranges, target), tableName); // SSTR GC deletes the file when done
         }
@@ -104,6 +107,10 @@ public static void transferRanges(InetAddress target, String tableName, Collecti
         {
             throw new IOError(e);
         }
+        finally
+        {
+            StreamingService.instance.setStatus(StreamingService.NOTHING);
+        }
         if (callback != null)
             callback.run();
     }
@@ -126,22 +133,20 @@ public static void transferSSTables(InetAddress target, List<SSTableReader> ssta
         }
         if (logger.isDebugEnabled())
           logger.debug("Stream context metadata " + StringUtils.join(pendingFiles, ", " + " " + sstables.size() + " sstables."));
-
         StreamOutManager.get(target).addFilesToStream(pendingFiles);
         StreamInitiateMessage biMessage = new StreamInitiateMessage(pendingFiles);
         Message message = StreamInitiateMessage.makeStreamInitiateMessage(biMessage);
         message.setHeader(StreamOut.TABLE_NAME, table.getBytes());
-        if (logger.isDebugEnabled())
-          logger.debug("Sending a stream initiate message to " + target + " ...");
+        updateStatus("Sending a stream initiate message to " + target + " ...");
         MessagingService.instance.sendOneWay(message, target);
 
         if (pendingFiles.length > 0)
         {
-            logger.info("Waiting for transfer to " + target + " to complete");
+            StreamingService.instance.setStatus("Waiting for transfer to " + target + " to complete");
             StreamOutManager.get(target).waitForStreamCompletion();
             // todo: it would be good if there were a dafe way to remove the StreamManager for target.
             // (StreamManager will delete the streamed file on completion.)
-            logger.info("Done with transfer to " + target);
+            updateStatus("Done with transfer to " + target);
         }
     }
 
diff --git a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/streaming/StreamingService.java b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/streaming/StreamingService.java
index 1021b096..5d271c6e 100644
--- a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/streaming/StreamingService.java
+++ b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/streaming/StreamingService.java
@@ -18,7 +18,6 @@
 
 package org.apache.cassandra.streaming;
 
-import org.apache.cassandra.streaming.StreamingServiceMBean;
 import org.apache.log4j.Logger;
 
 import javax.management.MBeanServer;
@@ -35,6 +34,8 @@
     private static final Logger logger = Logger.getLogger(StreamingService.class);
     public static final String MBEAN_OBJECT_NAME = "org.apache.cassandra.streaming:type=StreamingService";
     public static final StreamingService instance = new StreamingService();
+    static final String NOTHING = "Nothing is happening";
+    private String status = NOTHING;
 
     private StreamingService()
     {
@@ -49,6 +50,17 @@ private StreamingService()
         }
     }
 
+    public void setStatus(String s)
+    {
+        assert s != null;
+        status = s;
+    }
+
+    public String getStatus()
+    {
+        return status;
+    }
+
     /** hosts receiving outgoing streams. */
     public Set<InetAddress> getStreamDestinations()
     {
diff --git a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/streaming/StreamingServiceMBean.java b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/streaming/StreamingServiceMBean.java
index 5c29defe..1ea82e00 100644
--- a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/streaming/StreamingServiceMBean.java
+++ b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/streaming/StreamingServiceMBean.java
@@ -36,4 +36,7 @@
 
     /** details about incoming streams */
     public List<String> getIncomingFiles(String host) throws IOException;
+    
+    /** What's currently happening wrt streaming. */
+    public String getStatus();
 }
