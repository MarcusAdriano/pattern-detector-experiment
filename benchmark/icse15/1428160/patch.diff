diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java
index ef72ed6b..b12be6ef 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java
@@ -233,6 +233,13 @@ public void bindOrderByColumn(ResultSetNode target, OrderByList oblist)
 			}
 
 		}else{
+            if (list.isTableValueCtorOrdering()) {
+                // For VALUES, we only allow ordering by column number,
+                // SQL-92 style. This is a more general expression, so throw.
+                throw StandardException.newException(
+                        SQLState.LANG_TABLE_VALUE_CTOR_RESTRICTION);
+            }
+
 			/*checks for the conditions when using distinct*/
 			if (addedColumnOffset >= 0 &&
 					target instanceof SelectNode &&
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OrderByList.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OrderByList.java
index 25f5cdfb..b3f2e364 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OrderByList.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OrderByList.java
@@ -78,6 +78,25 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private boolean sortNeeded = true;
 	private int resultSetNumber = -1;
 
+	/**
+     * {@code true} if this instance orders a
+     * {@literal <table value constructor>}.
+     * See {@link #isTableValueCtorOrdering}.
+     */
+    private boolean isTableValueCtorOrdering;
+
+    /**
+     * Initialize with the type of the result set this {@code OrderByList} is
+     * attached to, e.g. {@code SELECT}, {@code VALUES} or a set operation.
+     * @param rs The result set this {@code OrderByList} is ordering.
+    */
+   public void init(Object rs) {
+        this.isTableValueCtorOrdering =
+                (rs instanceof UnionNode &&
+                ((UnionNode)rs).tableConstructor()) ||
+                rs instanceof RowResultSetNode;
+    }
+
 	/**
 		Add a column to the list
 	
@@ -846,4 +865,12 @@ public String toString() {
 	public int getResultSetNumber() {
 		return resultSetNumber;
 	}
+
+    /**
+     * @return {@code true} if the {@code ORDER BY} is attached to a
+     * {@literal <table value constructor>}, i.e. a {@code VALUES} clause.
+     */
+    public boolean isTableValueCtorOrdering() {
+        return isTableValueCtorOrdering;
+    }
 }
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index 998feb69..d01a05cb 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -898,6 +898,7 @@ The message identifier (ie. the value that matches a field in this class)
         String LANG_UNION_ORDER_BY                                         = "42878";
 	String LANG_DISTINCT_ORDER_BY                                      = "42879";
 	String LANG_DISTINCT_ORDER_BY_EXPRESSION                           = "4287A";
+    String LANG_TABLE_VALUE_CTOR_RESTRICTION                           = "4287B";
 	String LANG_EMPTY_VALUES_CLAUSE                                    = "42X80";
 	String LANG_EMPTY_COLUMN_LIST                                      = "42X81";
 	String LANG_USING_CARDINALITY_VIOLATION                            = "42X82";
