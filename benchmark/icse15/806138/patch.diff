diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java
index ab829e90..d469f1db 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java
@@ -386,14 +386,15 @@ private int comparePreviousRecord (int slot,
                     //slot is pointing before the first slot
                     //get left sibiling
                     leaf = (LeafControlRow) leaf.getLeftSibling(this);
+                    if (newLeaf) {
+                        oldLeaf.release();
+                    }
+                    newLeaf = true;
                     //no left sibiling
                     if (leaf == null)
                         return NO_MATCH;
                     //set the slot to last slot number
                     slot = leaf.page.recordCount() - 1;
-                    if (newLeaf)
-                        oldLeaf.release();
-                    newLeaf = true;
                     // DERBY-4027: We have moved to the previous page and need
                     // to recheck that the slot number is valid (it won't be
                     // if the page we moved to is empty). Restart from the top
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NullableUniqueConstraintTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NullableUniqueConstraintTest.java
index a13194b3..4753dae1 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NullableUniqueConstraintTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/NullableUniqueConstraintTest.java
@@ -531,6 +531,33 @@ public void testDeletedDuplicateHidesDuplicateOnLeftSide()
                 "update constraintest set val1 = '2' where val1 = '3'");
     }
 
+    /**
+     * Test that we can insert and delete the same value multiple times in a
+     * nullable unique index. This used to cause a livelock before DERBY-4081
+     * because the duplicate check on insert sometimes didn't release all
+     * latches.
+     */
+    public void testInsertDeleteContinuouslySameValue() throws SQLException {
+        // Must disable auto-commit for reliable reproduction, otherwise the
+        // post-commit worker thread will remove deleted index rows.
+        setAutoCommit(false);
+
+        Statement s = createStatement();
+        s.execute("create table d4081(x int unique)");
+
+        // The loop below did not get past the 372nd iteration before
+        // DERBY-4081 was fixed. Try 500 iterations now.
+        PreparedStatement ins = prepareStatement("insert into d4081 values 0");
+        PreparedStatement del = prepareStatement("delete from d4081");
+        for (int i = 0; i < 500; i++) {
+            ins.execute();
+            del.execute();
+        }
+
+        // Verify that the table is empty after the last delete operation.
+        assertTableRowCount("D4081", 0);
+    }
+
     public static void main(String [] args) {
         TestResult tr = new TestResult();
         Test t = suite();
