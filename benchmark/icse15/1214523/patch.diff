diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cql/DeleteStatement.java b/cassandra/trunk/src/java/org/apache/cassandra/cql/DeleteStatement.java
index e9158605..32104210 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cql/DeleteStatement.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cql/DeleteStatement.java
@@ -92,8 +92,7 @@ public RowMutation mutationForKey(ByteBuffer key, String keyspace, Long timestam
         CFMetaData metadata = validateColumnFamily(keyspace, columnFamily);
         QueryProcessor.validateKeyAlias(metadata, keyName);
 
-        @SuppressWarnings("rawtypes")
-        AbstractType comparator = metadata.getComparatorFor(null);
+        AbstractType<?> comparator = metadata.getComparatorFor(null);
 
         if (columns.size() < 1)
         {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cql/QueryProcessor.java b/cassandra/trunk/src/java/org/apache/cassandra/cql/QueryProcessor.java
index 6573fd6c..d6fdaae9 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cql/QueryProcessor.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cql/QueryProcessor.java
@@ -498,10 +498,8 @@ private static void validateSchemaAgreement() throws SchemaDisagreementException
     private final static void maybeAddBoundTerm(CQLStatement statement, Term term) throws InvalidRequestException
     {
         if (term != null && term.isBindMarker())
-        {
             term.setBindIndex(statement.boundTerms++);
         }
-    }
     
     public static void discoverBoundTerms(CQLStatement statement) throws InvalidRequestException
     {
@@ -512,15 +510,15 @@ public static void discoverBoundTerms(CQLStatement statement) throws InvalidRequ
                 if (logger.isTraceEnabled()) logger.trace(select.toString());
                 
                 // handle the select expression first
-                if (!select.isColumnRange() )
+                if (!select.isColumnRange())
                 {
-                    List<Term> list = select.getColumnNames();
-                    for (Term term : list) maybeAddBoundTerm(statement,term);
+                    for (Term term : select.getColumnNames())
+                        maybeAddBoundTerm(statement,term);
                 }
                 else
                 {
-                    maybeAddBoundTerm(statement,select.getColumnStart());
-                    maybeAddBoundTerm(statement,select.getColumnFinish());
+                    maybeAddBoundTerm(statement, select.getColumnStart());
+                    maybeAddBoundTerm(statement, select.getColumnFinish());
                 }
                 
                 // next handle the WHERE clause NB order is VERY important
@@ -529,26 +527,26 @@ public static void discoverBoundTerms(CQLStatement statement) throws InvalidRequ
                 
                 if (select.isMultiKey())
                 {
-                    for (Term term : select.getKeys()) maybeAddBoundTerm(statement,term);
+                    for (Term term : select.getKeys()) maybeAddBoundTerm(statement, term);
                 }
                 else if (!select.getColumnRelations().isEmpty())
                 {
                     if (select.isKeyRange())
                     {
-                        maybeAddBoundTerm(statement,select.getKeyStart());
-                        maybeAddBoundTerm(statement,select.getKeyFinish());
+                        maybeAddBoundTerm(statement, select.getKeyStart());
+                        maybeAddBoundTerm(statement, select.getKeyFinish());
                     }
 
                     for (Relation relation : select.getColumnRelations())
                     {
-                        maybeAddBoundTerm(statement,relation.getEntity());
-                        maybeAddBoundTerm(statement,relation.getValue());
+                        maybeAddBoundTerm(statement, relation.getEntity());
+                        maybeAddBoundTerm(statement, relation.getValue());
                     }                    
                 }
                 else
                 {
                     // maybe its empty or just a simple term
-                    for (Term term : select.getKeys()) maybeAddBoundTerm(statement,term);                   
+                    for (Term term : select.getKeys()) maybeAddBoundTerm(statement, term);
                 }
 
                break;
@@ -560,13 +558,13 @@ else if (!select.getColumnRelations().isEmpty())
                 // first handle the SET clause values that come in pairs for UPDATE. NB the order of the markers (?)
                 for (Map.Entry<Term, Operation> column : update.getColumns().entrySet())
                 {
-                    maybeAddBoundTerm(statement,column.getKey());
-                    maybeAddBoundTerm(statement,column.getValue().a);
+                    maybeAddBoundTerm(statement, column.getKey());
+                    maybeAddBoundTerm(statement, column.getValue().a);
                 }
                 
                 // now handle the key(s) in the WHERE clause
 
-                for (Term term : update.getKeys()) maybeAddBoundTerm(statement,term);
+                for (Term term : update.getKeys()) maybeAddBoundTerm(statement, term);
                 break;
                 
             case INSERT: // insert uses UpdateStatement but with different marker ordering
@@ -574,11 +572,11 @@ else if (!select.getColumnRelations().isEmpty())
                 if (logger.isTraceEnabled()) logger.trace(insert.toString());
                                 
                 // first handle the INTO..VALUES clause values that are grouped in order for INSERT. NB the order of the markers (?)
-                for (Term term : insert.getColumnNames()) maybeAddBoundTerm(statement,term);
-                for (Term term : insert.getColumnValues()) maybeAddBoundTerm(statement,term);
+                for (Term term : insert.getColumnNames()) maybeAddBoundTerm(statement, term);
+                for (Term term : insert.getColumnValues()) maybeAddBoundTerm(statement, term);
 
                 // now handle the key(s) in the VALUES clause 
-                for (Term term : insert.getKeys()) maybeAddBoundTerm(statement,term);
+                for (Term term : insert.getKeys()) maybeAddBoundTerm(statement, term);
                 break;
 
             case DELETE:
@@ -586,31 +584,31 @@ else if (!select.getColumnRelations().isEmpty())
                 if (logger.isTraceEnabled()) logger.trace(delete.toString());
 
                 // first handle the columns list for DELETE. NB the order of the markers (?)
-                for (Term term : delete.getColumns()) maybeAddBoundTerm(statement,term);
+                for (Term term : delete.getColumns()) maybeAddBoundTerm(statement, term);
 
                 // now handle the key(s) in the WHERE clause 
-                for (Term term : delete.getKeys()) maybeAddBoundTerm(statement,term);
+                for (Term term : delete.getKeys()) maybeAddBoundTerm(statement, term);
                 break;
 
             case CREATE_COLUMNFAMILY:
                 CreateColumnFamilyStatement createCf = (CreateColumnFamilyStatement)statement.statement;
                 
                 // handle the left hand Terms. Not terribly useful but included for completeness
-                for (Term term : createCf.getColumns().keySet()) maybeAddBoundTerm(statement,term);
+                for (Term term : createCf.getColumns().keySet()) maybeAddBoundTerm(statement, term);
                 break;
 
             case CREATE_INDEX:
                 CreateIndexStatement createIdx = (CreateIndexStatement)statement.statement;
                 
                 // handle the column name Term. Not terribly useful but included for completeness
-                maybeAddBoundTerm(statement,createIdx.getColumnName());
+                maybeAddBoundTerm(statement, createIdx.getColumnName());
                 break;
                 
            default: // all other statement types are a NOOP.                    
         }
     }
     
-    public static CqlResult doTheStatement(CQLStatement statement,ClientState clientState, List<String> variables )
+    public static CqlResult processStatement(CQLStatement statement,ClientState clientState, List<String> variables )
     throws  UnavailableException, InvalidRequestException, TimedOutException, SchemaDisagreementException
     {
         String keyspace = null;
@@ -1093,29 +1091,21 @@ public static CqlResult process(String queryString, ClientState clientState)
     throws RecognitionException, UnavailableException, InvalidRequestException, TimedOutException, SchemaDisagreementException
     {
         if (logger.isDebugEnabled()) logger.debug("CQL QUERY: {}", queryString);
-        
-        CQLStatement statement = getStatement(queryString);
-        
-        CqlResult result = doTheStatement(statement, clientState, new ArrayList<String>());
-        
-        return result;
+        return processStatement(getStatement(queryString), clientState, new ArrayList<String>());
     }
 
-    public static CQLStatement prepare (String queryString, ClientState clientState)
+    public static CQLStatement prepare(String queryString, ClientState clientState)
                     throws RecognitionException, InvalidRequestException
     {
         if (logger.isDebugEnabled()) logger.debug("CQL QUERY: {}", queryString);
-
-        CQLStatement statement = getStatement(queryString);
-
-        return statement;
+        return getStatement(queryString);
     }
    
-    public static CqlResult process_prepared(CQLStatement statement, ClientState clientState, List<String> variables)
+    public static CqlResult processPrepared(CQLStatement statement, ClientState clientState, List<String> variables)
     throws UnavailableException, InvalidRequestException, TimedOutException, SchemaDisagreementException
     {
         // Check to see if there are any bound variables to verify 
-        if (!(variables.isEmpty() && (statement.boundTerms==0)))
+        if (!(variables.isEmpty() && (statement.boundTerms == 0)))
         {
             if (variables.size() != statement.boundTerms) 
                 throw new InvalidRequestException(String.format("there were %d markers(?) in CQL but  %d bound variables",
@@ -1127,9 +1117,7 @@ public static CqlResult process_prepared(CQLStatement statement, ClientState cli
                 for (int i = 0; i < variables.size(); i++) logger.trace("[{}] '{}'",i+1,variables.get(i));
         }
 
-        CqlResult result = doTheStatement(statement, clientState, variables);
-
-        return result;
+        return processStatement(statement, clientState, variables);
     }
     
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cql/SelectStatement.java b/cassandra/trunk/src/java/org/apache/cassandra/cql/SelectStatement.java
index a3d9d7a0..1868a3ca 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cql/SelectStatement.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cql/SelectStatement.java
@@ -175,12 +175,12 @@ public void extractKeyAliasFromColumns(CFMetaData cfm)
         clause.extractKeysFromColumns(cfm);
     }
 
-    public AbstractType getComparator(String keyspace)
+    public AbstractType<?> getComparator(String keyspace)
     {
         return Schema.instance.getComparator(keyspace, columnFamily);
     }
     
-    public AbstractType getValueValidator(String keyspace, ByteBuffer column)
+    public AbstractType<?> getValueValidator(String keyspace, ByteBuffer column)
     {
         return Schema.instance.getValueValidator(keyspace, columnFamily, column);
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cql/Term.java b/cassandra/trunk/src/java/org/apache/cassandra/cql/Term.java
index be873e7d..2d37c7ce 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cql/Term.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cql/Term.java
@@ -99,11 +99,10 @@ public ByteBuffer getByteBuffer(AbstractType<?> validator, List<String> variable
             if (!isBindMarker()) return validator.fromString(text);
             
             // must be a marker term so check for a CqlBindValue stored in the term
-            if (bindIndex==null) throw new AssertionError("a marker Term was encountered with no index value");
+            if (bindIndex == null)
+                throw new AssertionError("a marker Term was encountered with no index value");
             
-            String bindValue = variables.get(bindIndex);
-                        
-            return validator.fromString(bindValue);
+            return validator.fromString(variables.get(bindIndex));
         }
         catch (MarshalException e)
         {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
index e8983c44..7bb512a6 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
@@ -1253,7 +1253,8 @@ public CqlPreparedResult prepare_cql_query(ByteBuffer query, Compression compres
             
             // put the prepared Statement into the Map
             state().getPrepared().put(itemId, statement);
-            if (logger.isTraceEnabled()) logger.trace("Storing prepared statement: #"+ itemId + " count:"+state().getPrepared().size());
+            if (logger.isTraceEnabled())
+                logger.trace("Storing prepared statement: #"+ itemId + " count:"+state().getPrepared().size());
             return new CqlPreparedResult(itemId, statement.boundTerms);
         }
         catch (RecognitionException e)
@@ -1265,7 +1266,7 @@ public CqlPreparedResult prepare_cql_query(ByteBuffer query, Compression compres
     }
     
     
-   public CqlResult execute_prepared_cql_query(int itemId,List<String> bindVariables)
+    public CqlResult execute_prepared_cql_query(int itemId, List<String> bindVariables)
     throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException, TException
     {
         if (logger.isDebugEnabled()) logger.debug("execute_prepared_cql_query");
@@ -1273,8 +1274,7 @@ public CqlResult execute_prepared_cql_query(int itemId,List<String> bindVariable
         CQLStatement statement = state().getPrepared().get(itemId);
         if (logger.isTraceEnabled()) logger.trace("Retreving prepared statement: #"+ itemId + " count:"+state().getPrepared().size());
         
-        CqlResult result = QueryProcessor.process_prepared(statement, state(), bindVariables);
-        return result;
+        return QueryProcessor.processPrepared(statement, state(), bindVariables);
     }
 
     // main method moved to CassandraDaemon
