diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/GroupByList.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/GroupByList.java
index 3b8ac1d0..d139335a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/GroupByList.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/GroupByList.java
@@ -254,24 +254,11 @@ GroupByColumn findGroupingColumn(ValueNode node)
 	 */
     void remapColumnReferencesToExpressions() throws StandardException
 	{
-		/* This method is called when flattening a FromTable.  We should
-		 * not be flattening a FromTable if the underlying expression that
-		 * will get returned out, after chopping out the redundant ResultColumns,
-		 * is not a ColumnReference.  (See ASSERT below.)
-		 */
+        /* This method is called when flattening a FromTable. */
         for (GroupByColumn gbc : this)
 		{
-            ValueNode retVN =
-                gbc.getColumnExpression().remapColumnReferencesToExpressions();
-
-			if (SanityManager.DEBUG)
-			{
-				SanityManager.ASSERT(retVN instanceof ColumnReference,
-					"retVN expected to be instanceof ColumnReference, not " +
-					retVN.getClass().getName());
-			}
-
-			gbc.setColumnExpression(retVN);
+            gbc.setColumnExpression(
+                gbc.getColumnExpression().remapColumnReferencesToExpressions());
 		}
 	}
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java
index f594a72f..79b891a1 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java
@@ -2877,4 +2877,29 @@ public void testDerby5584()
 
             rollback();
     }
+
+    /**
+     * GROUP BY on an expression in a JOIN used to trigger an assert failure.
+     * See DERBY-5313.
+     */
+    public void testDerby5313() throws SQLException {
+        setAutoCommit(false);
+
+        Statement s = createStatement();
+        s.execute("create table d5313_1(a int, b int)");
+        s.execute("create table d5313_2(b int, c int)");
+        s.execute("insert into d5313_1 values (3, 1), (2, 2), (3, 3)");
+        s.execute("insert into d5313_2 values (0, 1), (1, 2), (2, 3), (3, 4)");
+
+        JDBC.assertUnorderedResultSet(
+                s.executeQuery("select a+b, sum(c) from "
+                             + "d5313_1 natural join d5313_2 group by a+b"),
+                new String[][] { { "4", "5" }, { "6", "4" } });
+
+        JDBC.assertUnorderedResultSet(
+                s.executeQuery("select case when a=2 then 1 else 2 end, sum(c) "
+                             + "from d5313_1 natural join d5313_2 group by "
+                             + "case when a=2 then 1 else 2 end"),
+                new String[][] { { "1", "3" }, { "2", "6" } });
+    }
 }
