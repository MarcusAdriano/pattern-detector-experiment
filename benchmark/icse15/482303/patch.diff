diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java
index 885ff327..9de9e705 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java
@@ -307,10 +307,10 @@ public void compileXQExpr(String queryExpr, String opName)
      *   serialization.
      * @return A properly serialized version of xmlAsText.
      */
-    protected String serializeToString(final String xmlAsText)
+    protected String serializeToString(String xmlAsText)
         throws Exception
     {
-        final ArrayList aList = new ArrayList();
+        ArrayList aList = new ArrayList();
 
         /* The call to dBuilder.parse() is a call to an external
          * (w.r.t. to Derby) JAXP parser.  If the received XML
@@ -320,16 +320,32 @@ protected String serializeToString(final String xmlAsText)
          * that the JAXP parser has the required permissions for
          * reading the DTD file.
          */
-        java.security.AccessController.doPrivileged(
+        try {
+
+            final InputSource is = new InputSource(new StringReader(xmlAsText));
+            aList.add(java.security.AccessController.doPrivileged(
             new java.security.PrivilegedExceptionAction()
             {
-                public Object run() throws Exception
+                    public Object run() throws IOException, SAXException
                 {
-                    aList.add(dBuilder.parse(
-                        new InputSource(new StringReader(xmlAsText))));
-                    return null;
+                        return dBuilder.parse(is);
+                    }
+                }));
+
+        } catch (java.security.PrivilegedActionException pae) {
+
+            /* Unwrap the privileged exception so that the user can
+             * see what the underlying error is. For example, it could
+             * be an i/o error from parsing the XML value, which can
+             * happen if the XML value references an external DTD file
+             * but the JAXP parser hits an i/o error when trying to read
+             * the DTD.  In that case we want to throw the i/o error
+             * itself so that it does not appear as a security exception
+             * to the user.
+             */
+            throw pae.getException();
+
                 }
-            });
 
         /* The second argument in the following call is for
          * catching cases where we have a top-level (parentless)
