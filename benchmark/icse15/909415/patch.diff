diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataType.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataType.java
index f879c790..13b36778 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataType.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataType.java
@@ -354,6 +354,17 @@ public void setValue(Date theValue, Calendar cal) throws StandardException
 		throwLangSetMismatch("java.sql.Date");
 	}
 
+	/**
+	 * Set the value of this DataValueDescriptor.
+	 * At DataType level just throws an error lower classes will override
+	 *
+	 * @param theValue	The Object value to set this DataValueDescriptor to
+	 */
+	public void setValue(Object theValue) throws StandardException
+	{
+		throwLangSetMismatch("java.lang.Object");
+	}
+
 	/**
 	 * Set the value of this DataValueDescriptor.
 	 * At DataType level just throws an error lower classes will override
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataValueDescriptor.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataValueDescriptor.java
index 769974f4..2041dc47 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataValueDescriptor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataValueDescriptor.java
@@ -445,6 +445,15 @@ public void setValueFromResultSet(
 	 */
 	public void setValue(boolean theValue) throws StandardException;
 
+	/**
+	 * Set the value of this DataValueDescriptor to the given Object value
+	 *
+	 * @param theValue	The value to set this DataValueDescriptor to
+	 *
+	 * @exception StandardException		Thrown on error
+	 */
+	public void setValue(Object theValue) throws StandardException;
+
 	/**
 	 * Set the value of this DataValueDescriptor.
 	 *
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java
index e7215818..c2b722fa 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java
@@ -1162,6 +1162,7 @@ else if (sqlAllowed == RoutineAliasInfo.MODIFIES_SQL_DATA)
 						DataTypeDescriptor paramdtd = sqlParamNode.getTypeServices();
 
 						boolean isNumericType = paramdtd.getTypeId().isNumericTypeId();
+						boolean isAnsiUDT = paramdtd.getTypeId().getBaseTypeId().isAnsiUDT();
 
 						// is the underlying type for the OUT/INOUT parameter primitive.
 						boolean isPrimitive = ((java.lang.reflect.Method) method).getParameterTypes()[i].getComponentType().isPrimitive();
@@ -1194,6 +1195,12 @@ else if (paramdtd.getTypeId().isBooleanTypeId())
 							mb.upCast("java.lang.Number");
 						}
 
+						// The value needs to be set thorugh the setValue(Object) method.
+						if (isAnsiUDT)
+						{
+							mb.upCast("java.lang.Object");
+						}
+
 						mb.callMethod(VMOpcode.INVOKEINTERFACE, null, "setValue", "void", 1);
 
 						if (paramdtd.getTypeId().variableLength()) {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java
index 599d715d..2d594862 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java
@@ -23,6 +23,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import java.sql.SQLException;
 import java.sql.SQLWarning;
+import java.sql.CallableStatement;
 import java.sql.Connection;
 import java.sql.Statement;
 import java.sql.PreparedStatement;
@@ -163,6 +164,17 @@ protected PreparedStatement   chattyPrepare( Connection conn, String text )
         return conn.prepareStatement( text );
     }
 
+    /**
+     * Prepare a callable statement and report its sql text.
+     */
+    protected CallableStatement   chattyPrepareCall( Connection conn, String text )
+        throws SQLException
+    {
+        println( "Preparing callable statement:\n\t" + text );
+        
+        return conn.prepareCall( text );
+    }
+
     /**
      * Assert that the statement text, when compiled, raises an exception
      */
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java
index 64ebe1be..ac7c7c75 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/UDTTest.java
@@ -22,6 +22,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derbyTesting.functionTests.tests.lang;
 
 import java.math.BigDecimal;
+import java.sql.CallableStatement;
 import java.sql.Connection;
 import java.sql.DriverManager;
 import java.sql.ParameterMetaData;
@@ -1196,6 +1197,34 @@ public void test_16_casts() throws Exception
              );
     }
 
+    /**
+     * <p>
+     * Verify that you can use UDTs as output parameters in database procedures.
+     * </p>
+     */
+    public void test_17_outputParameters() throws Exception
+    {
+        Connection conn = getConnection();
+
+        goodStatement( conn, "create type intArray_17 external name 'org.apache.derbyTesting.functionTests.tests.lang.IntArray' language java\n" );
+        goodStatement
+            ( conn,
+              "create procedure changeIntArray_17\n" +
+              "( in newSize int, inout oldIntArray intArray_17 )\n" +
+              "language java parameter style java no sql\n" +
+              "external name 'org.apache.derbyTesting.functionTests.tests.lang.UDTTest.changeIntArray'\n" );
+        
+        CallableStatement cs = chattyPrepareCall( conn, "call changeIntArray_17( ?, ? )" );
+        cs.registerOutParameter( 2, java.sql.Types.JAVA_OBJECT );
+        cs.setInt( 1, 2 );
+        cs.setObject( 2,  new IntArray( new int[ 5 ] ) );
+        cs.execute();
+        Object obj = cs.getObject( 2 );
+        cs.close();
+
+        assertEquals( "[ 0, 0 ]", obj.toString() );
+    }
+
     ///////////////////////////////////////////////////////////////////////////////////
     //
     // PROCEDURES AND FUNCTIONS
@@ -1205,12 +1234,11 @@ public void test_16_casts() throws Exception
     public static void oneArgPriceProc( Price price1 ) {}
     public static void twoArgPriceProc( Price price1, Price price2 ) {}
 
-    public static void changeCurrencyCode( String newCurrencyCode, Price[] price )
+    public static void changeIntArray( int newSize, IntArray[] array )
     {
-        Price oldPrice = price[ 0 ];
-        Price newPrice = new Price( newCurrencyCode, oldPrice.amount, oldPrice.timeInstant );
+        IntArray newArray = new IntArray( new int[ newSize ] );
 
-        price[ 0 ] = newPrice;
+        array[ 0 ] = newArray;
     }
 
     public static HashMap makeHashMap() { return new HashMap(); }
