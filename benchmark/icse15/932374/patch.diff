diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/util/NumericUtils.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/util/NumericUtils.java
index a5299ff4..86e03e6e 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/util/NumericUtils.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/util/NumericUtils.java
@@ -130,7 +130,7 @@ public static int longToPrefixCoded(final long val, final int shift, final Bytes
     return hash;
   }
 
-  /**
+  /*
    * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.
    * This is method is used by {@link LongRangeBuilder}.
    * @param val the numeric value
@@ -144,7 +144,7 @@ public static String longToPrefixCoded(final long val, final int shift) {
     return buffer.utf8ToString();
   }*/
 
-  /**
+  /*
    * This is a convenience method, that returns prefix coded bits of a long without
    * reducing the precision. It can be used to store the full precision value as a
    * stored field in index.
@@ -190,7 +190,7 @@ public static int intToPrefixCoded(final int val, final int shift, final BytesRe
     return hash;
   }
 
-  /**
+  /*
    * Returns prefix coded bits after reducing the precision by <code>shift</code> bits.
    * This is method is used by {@link IntRangeBuilder}.
    * @param val the numeric value
@@ -204,7 +204,7 @@ public static String intToPrefixCoded(final int val, final int shift) {
     return buffer.utf8ToString();
   }*/
 
-  /**
+  /*
    * This is a convenience method, that returns prefix coded bits of an int without
    * reducing the precision. It can be used to store the full precision value as a
    * stored field in index.
@@ -216,7 +216,7 @@ public static String intToPrefixCoded(final int val) {
     return intToPrefixCoded(val, 0);
   }*/
 
-  /**
+  /*
    * Returns a long from prefixCoded characters.
    * Rightmost bits will be zero for lower precision codes.
    * This method can be used to decode e.g. a stored field.
@@ -278,7 +278,7 @@ public static long prefixCodedToLong(final BytesRef val) {
     return (sortableBits << getPrefixCodedLongShift(val)) ^ 0x8000000000000000L;
   }
 
-  /**
+  /*
    * Returns an int from prefixCoded characters.
    * Rightmost bits will be zero for lower precision codes.
    * This method can be used to decode a term's value.
@@ -292,7 +292,7 @@ public static int prefixCodedToInt(final String prefixCoded) {
     return prefixCodedToInt(new BytesRef(prefixCoded));
   }*/
 
-  /**
+  /*
    * Returns an int from prefixCoded bytes.
    * Rightmost bits will be zero for lower precision codes.
    * This method can be used to decode a term's value.
@@ -329,7 +329,7 @@ public static long doubleToSortableLong(double val) {
     return f;
   }
 
-  /**
+  /*
    * Convenience method: this just returns:
    *   longToPrefixCoded(doubleToSortableLong(val))
    * @deprecated This method is no longer needed!
@@ -348,7 +348,7 @@ public static double sortableLongToDouble(long val) {
     return Double.longBitsToDouble(val);
   }
 
-  /**
+  /*
    * Convenience method: this just returns:
    *    sortableLongToDouble(prefixCodedToLong(val))
    * @deprecated This method is no longer needed!
@@ -371,7 +371,7 @@ public static int floatToSortableInt(float val) {
     return f;
   }
 
-  /**
+  /*
    * Convenience method: this just returns:
    *   intToPrefixCoded(floatToSortableInt(val))
    * @deprecated This method is no longer needed!
@@ -390,7 +390,7 @@ public static float sortableIntToFloat(int val) {
     return Float.intBitsToFloat(val);
   }
 
-  /**
+  /*
    * Convenience method: this just returns:
    *    sortableIntToFloat(prefixCodedToInt(val))
    * @deprecated This method is no longer needed!
