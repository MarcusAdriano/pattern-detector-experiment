diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
index 898fc07e..c4089450 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
@@ -251,7 +251,7 @@ public void process(ResponseBuilder rb) throws IOException
     if (groupingSpec != null) {
       try {
         boolean needScores = (cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0;
-        if (params.getBool("group.distibuted.first", false)) {
+        if (params.getBool("group.distributed.first", false)) {
           CommandHandler.Builder topsGroupsActionBuilder = new CommandHandler.Builder()
               .setQueryCommand(cmd)
               .setNeedDocSet(false) // Order matters here
@@ -272,7 +272,7 @@ public void process(ResponseBuilder rb) throws IOException
           rsp.add("firstPhase", commandHandler.processResult(result, serializer));
           rb.setResult(result);
           return;
-        } else if (params.getBool("group.distibuted.second", false)) {
+        } else if (params.getBool("group.distributed.second", false)) {
           CommandHandler.Builder secondPhaseBuilder = new CommandHandler.Builder()
               .setQueryCommand(cmd)
               .setTruncateGroups(groupingSpec.isTruncateGroups() && groupingSpec.getFields().length > 0)
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/component/ResponseBuilder.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/component/ResponseBuilder.java
index da1c7e37..4b89dbcf 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/component/ResponseBuilder.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/component/ResponseBuilder.java
@@ -40,6 +40,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 
 /**
  * This class is experimental and will be changing in the future.
@@ -158,7 +159,7 @@ public void addRequest(SearchComponent me, ShardRequest sreq) {
 
   // Context fields for grouping
   public final Map<String, Collection<SearchGroup<String>>> mergedSearchGroups = new HashMap<String, Collection<SearchGroup<String>>>();
-  public final Map<String, Map<SearchGroup<String>, String>> searchGroupToShard = new HashMap<String, Map<SearchGroup<String>, String>>();
+  public final Map<String, Map<SearchGroup<String>, Set<String>>> searchGroupToShards = new HashMap<String, Map<SearchGroup<String>, Set<String>>>();
   public final Map<String, TopGroups<String>> mergedTopGroups = new HashMap<String, TopGroups<String>>();
   public final Map<String, QueryCommandResult> mergedQueryCommandResults = new HashMap<String, QueryCommandResult>();
   public final Map<Object, SolrDocument> retrievedDocuments = new HashMap<Object, SolrDocument>();
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/SearchGroupsRequestFactory.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/SearchGroupsRequestFactory.java
index 2b83dd06..acf981ea 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/SearchGroupsRequestFactory.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/SearchGroupsRequestFactory.java
@@ -71,7 +71,7 @@
 
     // in this first phase, request only the unique key field
     // and any fields needed for merging.
-    sreq.params.set("group.distibuted.first","true");
+    sreq.params.set("group.distributed.first","true");
 
     if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {
       sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + ",score");
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory.java
index c87c2d8c..e663b06b 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/TopGroupsShardRequestFactory.java
@@ -64,97 +64,53 @@
 
   private ShardRequest[] createRequestForSpecificShards(ResponseBuilder rb) {
     // Determine all unique shards to query for TopGroups
-    Set<String> shards = new HashSet<String>();
-    for (String command : rb.searchGroupToShard.keySet()) {
-      Map<SearchGroup<String>, String> groupsToShard = rb.searchGroupToShard.get(command);
-      shards.addAll(groupsToShard.values());
+    Set<String> uniqueShards = new HashSet<String>();
+    for (String command : rb.searchGroupToShards.keySet()) {
+      Map<SearchGroup<String>, Set<String>> shards = rb.searchGroupToShards.get(command);
+      for(Set<String> shardsForGroup: shards.values()) {
+        uniqueShards.addAll(shardsForGroup);
     }
-
-    ShardRequest[] sreqs = new ShardRequest[shards.size()];
-    int i = 0;
-    for (String shard : shards) {
-      ShardRequest sreq = new ShardRequest();
-      sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;
-      sreq.actualShards = new String[] {shard};
-      sreq.params = new ModifiableSolrParams(rb.req.getParams());
-
-      // If group.format=simple group.offset doesn't make sense
-      Grouping.Format responseFormat = rb.getGroupingSpec().getResponseFormat();
-      if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {
-        sreq.params.remove(GroupParams.GROUP_OFFSET);
-      }
-
-      sreq.params.remove(ShardParams.SHARDS);
-
-      // set the start (offset) to 0 for each shard request so we can properly merge
-      // results from the start.
-      if(rb.shards_start > -1) {
-        // if the client set shards.start set this explicitly
-        sreq.params.set(CommonParams.START,rb.shards_start);
-      } else {
-        sreq.params.set(CommonParams.START, "0");
-      }
-      if(rb.shards_rows > -1) {
-        // if the client set shards.rows set this explicity
-        sreq.params.set(CommonParams.ROWS,rb.shards_rows);
-      } else {
-        sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());
       }
 
-      sreq.params.set("group.distibuted.second","true");
-      for (Map.Entry<String, Collection<SearchGroup<String>>> entry : rb.mergedSearchGroups.entrySet()) {
-        for (SearchGroup<String> searchGroup : entry.getValue()) {
-          String groupValue;
-          if (searchGroup.groupValue != null) {
-            String rawGroupValue = searchGroup.groupValue;
-            FieldType fieldType = rb.req.getSearcher().getSchema().getField(entry.getKey()).getType();
-            groupValue = fieldType.indexedToReadable(rawGroupValue);
-          } else {
-            groupValue = GROUP_NULL_VALUE;
-          }
-          sreq.params.add("group.topgroups." + entry.getKey(), groupValue);
-        }
+    return createRequest(rb, uniqueShards.toArray(new String[uniqueShards.size()]));
       }
 
-      if ((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0 || rb.getSortSpec().includesScore()) {
-        sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + ",score");
-      } else {
-        sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());
-      }
-      sreqs[i++] = sreq;
-    }
-
-    return sreqs;
+   private ShardRequest[] createRequestForAllShards(ResponseBuilder rb) {
+    return createRequest(rb, ShardRequest.ALL_SHARDS);
   }
 
-  private ShardRequest[] createRequestForAllShards(ResponseBuilder rb) {
+  private ShardRequest[] createRequest(ResponseBuilder rb, String[] shards)
+  {
     ShardRequest sreq = new ShardRequest();
+    sreq.shards = shards;
     sreq.purpose = ShardRequest.PURPOSE_GET_TOP_IDS;
 
     sreq.params = new ModifiableSolrParams(rb.req.getParams());
+
     // If group.format=simple group.offset doesn't make sense
     Grouping.Format responseFormat = rb.getGroupingSpec().getResponseFormat();
     if (responseFormat == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {
       sreq.params.remove(GroupParams.GROUP_OFFSET);
     }
+
     sreq.params.remove(ShardParams.SHARDS);
 
     // set the start (offset) to 0 for each shard request so we can properly merge
     // results from the start.
-    if(rb.shards_start > -1) {
+    if (rb.shards_start > -1) {
       // if the client set shards.start set this explicitly
-      sreq.params.set(CommonParams.START,rb.shards_start);
+      sreq.params.set(CommonParams.START, rb.shards_start);
     } else {
       sreq.params.set(CommonParams.START, "0");
     }
-    if(rb.shards_rows > -1) {
+    if (rb.shards_rows > -1) {
       // if the client set shards.rows set this explicity
-      sreq.params.set(CommonParams.ROWS,rb.shards_rows);
+      sreq.params.set(CommonParams.ROWS, rb.shards_rows);
     } else {
       sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());
     }
 
-    sreq.params.set("group.distibuted.second","true");
+    sreq.params.set("group.distributed.second", "true");
     for (Map.Entry<String, Collection<SearchGroup<String>>> entry : rb.mergedSearchGroups.entrySet()) {
       for (SearchGroup<String> searchGroup : entry.getValue()) {
         String groupValue;
@@ -169,7 +125,7 @@
       }
     }
 
-    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {
+    if ((rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {
       sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + ",score");
     } else {
       sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/SearchGroupShardResponseProcessor.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/SearchGroupShardResponseProcessor.java
index a58e8718..7c809ed8 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/SearchGroupShardResponseProcessor.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/SearchGroupShardResponseProcessor.java
@@ -45,12 +45,12 @@ public void process(ResponseBuilder rb, ShardRequest shardRequest) {
     String[] fields = rb.getGroupingSpec().getFields();
 
     Map<String, List<Collection<SearchGroup<String>>>> commandSearchGroups = new HashMap<String, List<Collection<SearchGroup<String>>>>();
-    Map<String, Map<SearchGroup<String>, String>> tempSearchGroupToShard = new HashMap<String, Map<SearchGroup<String>, String>>();
+    Map<String, Map<SearchGroup<String>, Set<String>>> tempSearchGroupToShards = new HashMap<String, Map<SearchGroup<String>, Set<String>>>();
     for (String field : fields) {
       commandSearchGroups.put(field, new ArrayList<Collection<SearchGroup<String>>>(shardRequest.responses.size()));
-      tempSearchGroupToShard.put(field, new HashMap<SearchGroup<String>, String>());
-      if (!rb.searchGroupToShard.containsKey(field)) {
-        rb.searchGroupToShard.put(field, new HashMap<SearchGroup<String>, String>());
+      tempSearchGroupToShards.put(field, new HashMap<SearchGroup<String>, Set<String>>());
+      if (!rb.searchGroupToShards.containsKey(field)) {
+        rb.searchGroupToShards.put(field, new HashMap<SearchGroup<String>, Set<String>>());
       }
     }
 
@@ -68,7 +68,13 @@ public void process(ResponseBuilder rb, ShardRequest shardRequest) {
 
           commandSearchGroups.get(field).add(searchGroups);
           for (SearchGroup<String> searchGroup : searchGroups) {
-            tempSearchGroupToShard.get(field).put(searchGroup, srsp.getShard());
+            Map<SearchGroup<String>, Set<String>> map = tempSearchGroupToShards.get(field);
+            Set<String> shards = map.get(searchGroup);
+            if (shards == null) {
+              shards = new HashSet<String>();
+              map.put(searchGroup, shards);
+            }
+            shards.add(srsp.getShard());
           }
         }
       }
@@ -81,7 +87,7 @@ public void process(ResponseBuilder rb, ShardRequest shardRequest) {
 
         rb.mergedSearchGroups.put(groupField, mergedTopGroups);
         for (SearchGroup<String> mergedTopGroup : mergedTopGroups) {
-          rb.searchGroupToShard.get(groupField).put(mergedTopGroup, tempSearchGroupToShard.get(groupField).get(mergedTopGroup));
+          rb.searchGroupToShards.get(groupField).put(mergedTopGroup, tempSearchGroupToShards.get(groupField).get(mergedTopGroup));
         }
       }
     } catch (IOException e) {
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/TestDistributedGrouping.java b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/TestDistributedGrouping.java
index d9ad8650..56cda47c 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/TestDistributedGrouping.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/TestDistributedGrouping.java
@@ -18,14 +18,8 @@
  */
 
 import org.apache.solr.client.solrj.SolrServerException;
-import org.apache.solr.common.params.CommonParams;
 import org.apache.solr.common.params.ModifiableSolrParams;
 
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-
 /**
  * TODO? perhaps use:
  *  http://docs.codehaus.org/display/JETTY/ServletTester
@@ -98,7 +92,38 @@ public void doTest() throws Exception {
     }
     indexr(id, 17, "SubjectTerms_mfacet", vals);
 
-    for (int i=100; i<150; i++) {
+    indexr(
+        id, 18, s1, "232", tlong, 332,
+        t1,"no eggs on wall, lesson learned",
+        oddField, "odd man out"
+    );
+    indexr(
+        id, 19, s1, "232", tlong, 432,
+        t1, "many eggs on wall",
+        oddField, "odd man in"
+    );
+    indexr(
+        id, 20, s1, "232", tlong, 532,
+        t1, "some eggs on wall",
+        oddField, "odd man between"
+    );
+    indexr(
+        id, 21, s1, "232", tlong, 632,
+        t1, "a few eggs on wall",
+        oddField, "odd man under"
+    );
+    indexr(
+        id, 22, s1, "232", tlong, 732,
+        t1, "any eggs on wall",
+        oddField, "odd man above"
+    );
+    indexr(
+        id, 23, s1, "233", tlong, 734,
+        t1, "dirty eggs",
+        oddField, "odd eggs"
+    );
+
+    for (int i = 100; i < 150; i++) {
       indexr(id, i);      
     }
 
@@ -134,6 +159,10 @@ public void doTest() throws Exception {
     query("q", "*:*", "rows", 100, "fl", "id," + s1, "group", "true", "group.query", t1 + ":kings OR " + t1 + ":eggs", "group.limit", 10, "sort", s1 + " asc, id asc");
     query("q", "*:*", "rows", 100, "fl", "id," + s1, "group", "true", "group.field", s1, "group.query", t1 + ":kings OR " + t1 + ":eggs", "group.limit", 10, "sort", s1 + " asc, id asc");
 
+    // SOLR-3109
+    query("q", t1 + ":eggs", "rows", 100, "fl", "id," + s1, "group", "true", "group.field", s1, "group.limit", 10, "sort", tlong + " asc, id asc");
+    query("q", s1 + ":232", "rows", 100, "fl", "id," + s1, "group", "true", "group.field", s1, "group.limit", 10, "sort", tlong + " asc, id asc");
+
     // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard
     query("q", "*:*", "fq", s2 + ":a", "rows", 100, "fl", "id," + s1, "group", "true", "group.field", s1, "group.limit", 10, "sort", s1 + " asc, id asc", "group.ngroups", "true");
     query("q", "*:*", "fq", s2 + ":a", "rows", 100, "fl", "id," + s1, "group", "true", "group.field", s1, "group.limit", 10, "sort", s1 + " asc, id asc", "group.truncate", "true");
