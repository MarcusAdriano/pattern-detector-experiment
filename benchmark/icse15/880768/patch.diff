diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
index c1c62e69..89b83ff3 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
@@ -2151,6 +2151,7 @@ private void emptyIndexes(long newHeapConglom,
 		ExecRow				baseRows = null;
 		ColumnOrdering[][]	ordering = new ColumnOrdering[numIndexes][];
 		int					numColumns = td.getNumberOfColumns();
+        collation       = new int[numIndexes][];
 
 		// Create the BitSet for mapping the partial row to the full row
 		FormatableBitSet bitSet = new FormatableBitSet(numColumns + 1);
@@ -2331,6 +2332,10 @@ private void emptyIndexes(long newHeapConglom,
 
 			indexCC.close();
 
+            collation[index] = 
+                constants.irgs[index].getColumnCollationIds(
+                    td.getColumnDescriptorList());
+
 			// We can finally drain the sorter and rebuild the index
 			// Populate the index.
 			newIndexCongloms[index] = 
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java
index 9a6f5f8e..bfbf6f3b 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java
@@ -737,6 +737,10 @@ private void setUpTable() throws SQLException
             ps.executeUpdate();
         }
 
+        s.execute(
+        		"CREATE TABLE EMPTY_TABLE (NAME VARCHAR(40))");
+        s.execute(
+        		"CREATE INDEX EMPTY_TABLE_IDX ON EMPTY_TABLE(NAME)");
         commit();
     }
 
@@ -1128,6 +1132,7 @@ private void checkTwoPersistentCompare(
     private void dropTable() throws SQLException 
     {
         dropTable("CUSTOMER");
+        dropTable("EMPTY_TABLE");
     }
 
     private void runQueries(
@@ -1473,6 +1478,21 @@ private void runBulkInsert(
 
         setUpTable();
 
+        //DERBY-4435
+        String emptyFileName =
+            (SupportFilesSetup.getReadWrite("empty_file.dat")).getPath();
+        s.execute("DELETE FROM EMPTY_TABLE");
+        //there is no data in EMPTY_TABLE so empty_file.dat will be empty 
+        //after export
+        doExportTable("APP", "EMPTY_TABLE", emptyFileName, null, null, "UTF-16");
+        commit();
+        // bulk insert with replace to empty table/one index from an empty file 
+        // import empty_file.dat into EMPTY_TABLE 
+        doImportTable(
+                "APP", "EMPTY_TABLE", emptyFileName, "|", "``", null, 1);
+
+        commit();
+
         // export CUSTOMER date to names.dat
         String fileName =
             (SupportFilesSetup.getReadWrite("names.dat")).getPath();
@@ -1481,7 +1501,6 @@ private void runBulkInsert(
 
         commit();
 
-
         // bulk insert to empty table, no indexes without replace 
         // (last arg 0 = no replace).
         s.execute("DELETE FROM CUSTOMER");
