diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java
index e502904b..bd64efc7 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java
@@ -123,6 +123,7 @@ ValueNode eliminateNots(boolean underNotNode)
 									C_NodeTypes.BINARY_LESS_THAN_OPERATOR_NODE,
 									leftOperand, 
 								 	rightOperandList.elementAt(0),
+								 	Boolean.FALSE,
 									cm);
 		/* Set type info for the operator node */
 		leftBCO.bindComparisonOperator();
@@ -139,6 +140,7 @@ ValueNode eliminateNots(boolean underNotNode)
 								C_NodeTypes.BINARY_GREATER_THAN_OPERATOR_NODE,
 								leftClone,
 								rightOperandList.elementAt(1),
+							 	Boolean.FALSE,
 								cm);
 		/* Set type info for the operator node */
 		rightBCO.bindComparisonOperator();
@@ -224,6 +226,7 @@ public ValueNode preprocess(int numTables,
 						C_NodeTypes.BINARY_LESS_EQUALS_OPERATOR_NODE,
 						leftClone1, 
 						rightOperandList.elementAt(1),
+					 	Boolean.FALSE,
 						cm);
 
 		/* Set type info for the operator node */
@@ -243,6 +246,7 @@ public ValueNode preprocess(int numTables,
 					C_NodeTypes.BINARY_GREATER_EQUALS_OPERATOR_NODE,
 					leftOperand, 
 					rightOperandList.elementAt(0),
+				 	Boolean.FALSE,
 					cm);
 
 		/* Set type info for the operator node */
@@ -302,6 +306,7 @@ public void generateExpression(ExpressionClassBuilder acb,
 							C_NodeTypes.BINARY_GREATER_EQUALS_OPERATOR_NODE,
 							leftOperand, 
 							rightOperandList.elementAt(0),
+						 	Boolean.FALSE,
 							cm);
 		/* Set type info for the operator node */
 		leftBCO.bindComparisonOperator();
@@ -312,6 +317,7 @@ public void generateExpression(ExpressionClassBuilder acb,
 						C_NodeTypes.BINARY_LESS_EQUALS_OPERATOR_NODE,
 						leftOperand, 
 						rightOperandList.elementAt(1),
+					 	Boolean.FALSE,
 						cm);
 		/* Set type info for the operator node */
 		rightBCO.bindComparisonOperator();
diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/BinaryComparisonOperatorNode.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/BinaryComparisonOperatorNode.java
index a56c9d2b..74dccf89 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/BinaryComparisonOperatorNode.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/BinaryComparisonOperatorNode.java
@@ -58,14 +58,28 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 * @param operator		The name of the operator
 	 * @param methodName	The name of the method to call in the generated
 	 *						class
+	 * @param forQueryRewrite Can be true only if if this node has been 
+	 *                      added by an internal rewrite of the query. This
+	 *                      allows binding to be more liberal when checking 
+	 *                      it against allowed syntax.
+	 *                      This parameter will be passed FALSE when a new 
+	 *                      instance of the node is being created(which is 
+	 *                      the majority of the cases). But when an  
+	 *                      existing node is getting cloned, the value of
+	 *                      this parameter should be passed as the 
+	 *                      originalNode.getForQueryRewrite(). Examples of
+	 *                      this can be found in Predicate.Java and 
+	 *                      PredicateList.java
 	 */
 
 	public void init(
 				Object	leftOperand,
 				Object	rightOperand,
 				Object		operator,
-				Object		methodName)
+				Object		methodName,
+                Object      forQueryRewrite)
 	{
+        this.forQueryRewrite = ((Boolean)forQueryRewrite).booleanValue();
 		super.init(leftOperand, rightOperand, operator, methodName,
 				ClassName.DataValueDescriptor, ClassName.DataValueDescriptor);
 	}
diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java
index abb5a6c7..e4630e93 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/BinaryRelationalOperatorNode.java
@@ -86,7 +86,18 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 */
 	private InListOperatorNode inListProbeSource = null;
 
-	public void init(Object leftOperand, Object rightOperand)
+	//DERBY-6185 (Query against view  with "where name LIKE 
+	// 'Col1' ESCAPE '\' " failed)
+	//4th argument forQueryRewrite can be true only if this node has been 
+	//  added by an internal rewrite of the query. This allows binding to 
+	//  be more liberal when checking it against allowed syntax.
+	//  This parameter will be passed FALSE when a new instance of the node
+	//  is being created(which is the majority of the cases). But when an 
+	//  existing node is getting cloned, the value of this parameter should 
+	//  be passed as the originalNode.getForQueryRewrite(). Examples of this
+	//  can be found in Predicate.Java and PredicateList.java
+	public void init(Object leftOperand, Object rightOperand,
+        Object forQueryRewrite)
 	{
 		String methodName = "";
 		String operatorName = "";
@@ -135,7 +146,7 @@ public void init(Object leftOperand, Object rightOperand)
 				}
 			    break;
 		}
-		super.init(leftOperand, rightOperand, operatorName, methodName);
+		super.init(leftOperand, rightOperand, operatorName, methodName, forQueryRewrite);
 		btnVis = null;
 	}
 
@@ -144,10 +155,21 @@ public void init(Object leftOperand, Object rightOperand)
 	 * an InListOperatorNode.  This version is used during IN-list
 	 * preprocessing to create a "probe predicate" for the IN-list.
 	 * See InListOperatorNode.preprocess() for more.
+	 * DERBY-6185 (Query against view  with "where name LIKE 
+	 *  'Col1' ESCAPE '\' " failed)
+	 * 4th argument forQueryRewrite can be true only if this node has been
+	 *  added by an internal rewrite of the query. This allows binding to
+	 *  be more liberal when checking it against allowed syntax.
+	 *  This parameter will be passed FALSE when a new instance of the node
+	 *  is being created(which is the majority of the cases). But when an 
+	 *  existing node is getting cloned, the value of this parameter should
+	 *  be passed as the originalNode.getForQueryRewrite(). Examples of this
+	 *  can be found in Predicate.Java and PredicateList.java
 	 */
-	public void init(Object leftOperand, Object rightOperand, Object inListOp)
+	public void init(Object leftOperand, Object rightOperand,
+			 Object inListOp, Object forQueryRewrite)
 	{
-		init(leftOperand, rightOperand);
+		init(leftOperand, rightOperand, forQueryRewrite);
 		this.inListProbeSource = (InListOperatorNode)inListOp;
 	}
 
@@ -1047,6 +1069,7 @@ BinaryOperatorNode getNegation(ValueNode leftOperand,
 		negation = (BinaryOperatorNode)
 			getNodeFactory().getNode(getNegationNode(),
 									 leftOperand, rightOperand,
+									 Boolean.FALSE,
 									 getContextManager());
 		negation.setType(getTypeServices());
 		return negation;
@@ -1092,6 +1115,7 @@ private int getNegationNode()
     BinaryOperatorNode getSwappedEquivalent() throws StandardException {
         BinaryOperatorNode newNode = (BinaryOperatorNode) getNodeFactory().getNode(getNodeTypeForSwap(),
                 rightOperand, leftOperand,
+                Boolean.FALSE,
                 getContextManager());
         newNode.setType(getTypeServices());
         return newNode;
@@ -1319,6 +1343,7 @@ public RelationalOperator getTransitiveSearchClause(ColumnReference otherCR)
 		return (RelationalOperator)getNodeFactory().getNode(getNodeType(),
 														  otherCR,
 														  rightOperand,
+														  Boolean.FALSE,
 														  getContextManager());
 	}
 	
diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java
index 4efd49ae..18ad8271 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java
@@ -605,6 +605,7 @@ public ValueNode putAndsOnTop()
 										C_NodeTypes.BINARY_EQUALS_OPERATOR_NODE,
 										this,
 										trueNode,
+										Boolean.FALSE,
 										getContextManager());
 		/* Set type info for the operator node */
 		equalsNode.bindComparisonOperator();
diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java
index 67f4b80f..10b31c02 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java
@@ -145,6 +145,7 @@ public ValueNode preprocess(int numTables,
 						C_NodeTypes.BINARY_EQUALS_OPERATOR_NODE,
 						leftOperand, 
 						(ValueNode) rightOperandList.elementAt(0),
+						Boolean.FALSE,
 						getContextManager());
 			/* Set type info for the operator node */
 			equal.bindComparisonOperator();
@@ -284,6 +285,7 @@ else if ((leftOperand instanceof ColumnReference) &&
 							C_NodeTypes.BINARY_EQUALS_OPERATOR_NODE,
 							leftOperand, 
 							minValue,
+							Boolean.FALSE,
 							getContextManager());
 					/* Set type info for the operator node */
 					equal.bindComparisonOperator();
@@ -353,6 +355,7 @@ else if ((leftOperand instanceof ColumnReference) &&
 					leftOperand, 
 					pNode,
 					this,
+					Boolean.FALSE,
 					getContextManager());
 
 			/* Set type info for the operator node */
@@ -422,6 +425,7 @@ ValueNode eliminateNots(boolean underNotNode)
 						C_NodeTypes.BINARY_NOT_EQUALS_OPERATOR_NODE,
 						leftClone,
 						(ValueNode) rightOperandList.elementAt(0),
+						Boolean.FALSE,
 						getContextManager());
 		/* Set type info for the operator node */
 		leftBCO.bindComparisonOperator();
@@ -438,6 +442,7 @@ ValueNode eliminateNots(boolean underNotNode)
 							C_NodeTypes.BINARY_NOT_EQUALS_OPERATOR_NODE,
 							leftClone,
 							(ValueNode) rightOperandList.elementAt(elemsDone),
+							Boolean.FALSE,
 							getContextManager());
 			/* Set type info for the operator node */
 			rightBCO.bindComparisonOperator();
diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java
index a8619008..450dc13d 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/JoinNode.java
@@ -914,6 +914,7 @@ else if (usingClause != null)
 										C_NodeTypes.BINARY_EQUALS_OPERATOR_NODE,
 										leftCR,
 										rightCR,
+										Boolean.FALSE,
 										getContextManager());
 				equalsNode.bindComparisonOperator();
 
diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java
index 0ef75f73..ff98bd91 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java
@@ -405,6 +405,7 @@ else if (pattern.indexOf('_') == -1 &&
                                 C_NodeTypes.CHAR_CONSTANT_NODE,
                                 newPattern,
                                 getContextManager()),
+                                Boolean.FALSE,
                             getContextManager());
 
                     // Set forQueryRewrite to bypass comparability checks
@@ -684,6 +685,7 @@ public ValueNode preprocess(
                     C_NodeTypes.BINARY_LESS_THAN_OPERATOR_NODE,
                     receiver.getClone(), 
                     likeLTopt,
+                    Boolean.FALSE,
                     getContextManager());
 
             // Disable comparability checks
@@ -743,6 +745,7 @@ public ValueNode preprocess(
                 C_NodeTypes.BINARY_GREATER_EQUALS_OPERATOR_NODE,
                 receiver.getClone(), 
                 likeGEopt,
+                Boolean.FALSE,
                 getContextManager());
 
 
diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/Predicate.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/Predicate.java
index 8d3027d5..46013b72 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/Predicate.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/Predicate.java
@@ -1015,6 +1015,7 @@ protected Predicate getPredScopedForResultSet(
 					parentRSNsTables,
 					childRSN,
 					whichRC),
+					Boolean.valueOf(opNode.getForQueryRewrite()),
 				getContextManager());
 
 		// Bind the new op node.
diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java
index b046cd18..2a37d498 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/PredicateList.java
@@ -1584,6 +1584,7 @@ else if (!(inNode.getRightOperandList().isConstantExpression()))
 										newCRNode,
 										opNode.getRightOperand(),
 										inNode,
+										Boolean.valueOf(opNode.getForQueryRewrite()),
 										getContextManager());
 					newRelop.bindComparisonOperator();
 					leftOperand = newRelop;
@@ -2172,6 +2173,7 @@ void joinClauseTransitiveClosure(int numTables,
 										C_NodeTypes.BINARY_EQUALS_OPERATOR_NODE,
 										outerCR.getClone(),
 										innerCR.getClone(),
+										Boolean.FALSE,
 										getContextManager());
 					newEquals.bindComparisonOperator();
 					/* Create the AND */
diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java
index 958e73d3..874b0415 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java
@@ -1615,6 +1615,7 @@ else if (parentOperator == RelationalOperator.GREATER_THAN_RELOP)
 							nodeType,
 							leftOperand,
 							rightOperand,
+							Boolean.FALSE,
 							getContextManager());
 
 		bcoNode.bindComparisonOperator();
@@ -2379,6 +2380,7 @@ private void changeToCorrespondingExpressionType()
   									C_NodeTypes.BINARY_EQUALS_OPERATOR_NODE,
   									leftOperand,
   									this,
+  									Boolean.FALSE,
   									getContextManager());
   				break;
 
@@ -2387,6 +2389,7 @@ private void changeToCorrespondingExpressionType()
   								C_NodeTypes.BINARY_NOT_EQUALS_OPERATOR_NODE,
   								leftOperand,
   								this,
+  								Boolean.FALSE,
   								getContextManager());
   				break;
 
@@ -2395,6 +2398,7 @@ private void changeToCorrespondingExpressionType()
   								C_NodeTypes.BINARY_LESS_EQUALS_OPERATOR_NODE,
   								leftOperand,
   								this,
+  								Boolean.FALSE,
   								getContextManager());
   				break;
 
@@ -2403,6 +2407,7 @@ private void changeToCorrespondingExpressionType()
   							C_NodeTypes.BINARY_LESS_THAN_OPERATOR_NODE,
   							leftOperand,
   							this,
+  							Boolean.FALSE,
   							getContextManager());
   				break;
 
@@ -2411,6 +2416,7 @@ private void changeToCorrespondingExpressionType()
   							C_NodeTypes.BINARY_GREATER_EQUALS_OPERATOR_NODE,
   							leftOperand,
   							this,
+  							Boolean.FALSE,
   							getContextManager());
   				break;
 
@@ -2419,6 +2425,7 @@ private void changeToCorrespondingExpressionType()
   								C_NodeTypes.BINARY_GREATER_THAN_OPERATOR_NODE,
   								leftOperand,
   								this,
+  								Boolean.FALSE,
   								getContextManager());
   				break;
   		}
diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ValueNode.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ValueNode.java
index 1c70d1da..f200fc69 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ValueNode.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ValueNode.java
@@ -547,6 +547,7 @@ public ValueNode genEqualsFalseTree()
 								C_NodeTypes.BINARY_EQUALS_OPERATOR_NODE,
 								this,
 								falseNode,
+								Boolean.FALSE,
 								getContextManager());
 		nullableResult = getTypeServices().isNullable();
 		equalsNode.setType(new DataTypeDescriptor(
diff --git a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ViewsTest.java b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ViewsTest.java
index 3b0739c2..7444e386 100644
--- a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ViewsTest.java
+++ b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ViewsTest.java
@@ -52,6 +52,88 @@ public static Test suite()
         return new CleanDatabaseTestSetup(suite);
     }
 
+    //DERBY-6185(Query against view  with 
+    // "where name LIKE 'Col1' ESCAPE '\' " failed)
+    //Problem was that we clone binary comparison operator node during the
+    // optimize phase but we did not copy the entire state of the original
+    // node
+    public void test_DERBY6185() throws Exception
+    {
+        ResultSet rs = null;
+        
+        Statement st = createStatement();
+        PreparedStatement ps;
+
+        // create 2 tables and a view
+        st.executeUpdate(
+            "create table mytbl1 (name clob(10K))");
+        st.executeUpdate("insert into mytbl1 "+
+            "values ('Col1'),('Col2')");
+        st.executeUpdate(
+            "create table mytbl2 (name clob(10K))");
+        st.executeUpdate("insert into mytbl2 "+
+                "values ('Col1'),('Col2')");
+        st.executeUpdate(
+            "create view myview (name) as select t1.name from " +
+            "mytbl1 t1 union all select t2.name from mytbl2 t2");
+
+        //test base table's CLOB and LIKE clause with Statement
+        rs = st.executeQuery("select name from mytbl1 " +
+                "where name LIKE 'Col1'");
+        JDBC.assertFullResultSet(rs, new String[][]{
+                {"Col1"}
+        });
+
+        //test base table's CLOB and LIKE clause with PreparedStatement
+        ps = prepareStatement("select name from mytbl1 " +
+                "where name LIKE ?");
+        ps.setString(1, "Col1");
+        rs = ps.executeQuery();
+        JDBC.assertFullResultSet(rs, new String[][]{
+                {"Col1"}
+        });
+
+        //test view's CLOB and LIKE clause with Statement
+        rs = st.executeQuery("select name from myview " +
+            "where name LIKE 'Col1'");
+        JDBC.assertFullResultSet(rs, new String[][]{
+                {"Col1"},
+                {"Col1"}
+        });
+
+        //test view's CLOB and LIKE clause with PreparedStatement
+        ps = prepareStatement("select name from myview " +
+                "where name LIKE ?");
+        ps.setString(1, "Col1");
+        rs = ps.executeQuery();
+        JDBC.assertFullResultSet(rs, new String[][]{
+                {"Col1"},
+                {"Col1"}
+        });
+
+        //test UNION's CLOB and LIKE clause with Statement
+        rs = st.executeQuery("select name from " +
+             "(select name from mytbl1 t1 union all " +
+             "select t2.name from mytbl2 t2) " +
+             "as s where name like 'Col1'");
+        JDBC.assertFullResultSet(rs, new String[][]{
+                {"Col1"},
+                {"Col1"}
+        });
+
+        //test UNION's CLOB and LIKE clause with PreparedStatement
+        ps = prepareStatement("select name from " +
+             "(select name from mytbl1 t1 union all " +
+             "select t2.name from mytbl2 t2) " +
+             "as s where name like ?");
+        ps.setString(1, "Col1");
+        rs = ps.executeQuery();
+        JDBC.assertFullResultSet(rs, new String[][]{
+                {"Col1"},
+                {"Col1"}
+        });
+    }
+
     public void test_views() throws Exception
     {
         ResultSet rs = null;
