diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/PhraseQuery.java b/lucene/java/trunk/src/java/org/apache/lucene/search/PhraseQuery.java
index dc9bed48..efcca47e 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/PhraseQuery.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/PhraseQuery.java
@@ -256,7 +256,7 @@ public void extractTerms(Set queryTerms) {
   /** Prints a user-readable version of this query. */
   public String toString(String f) {
     StringBuffer buffer = new StringBuffer();
-    if (!field.equals(f)) {
+    if (field != null && !field.equals(f)) {
       buffer.append(field);
       buffer.append(":");
     }
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/search/TestPhraseQuery.java b/lucene/java/trunk/src/test/org/apache/lucene/search/TestPhraseQuery.java
index 21714c29..c9e86622 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/search/TestPhraseQuery.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/search/TestPhraseQuery.java
@@ -545,4 +545,12 @@ public void testPalyndrome3() throws Exception {
     //assertEquals("ordered or reversed does not matter",score2, score3, SCORE_COMP_THRESH);
   }
   
+  // LUCENE-1280
+  public void testEmptyPhraseQuery() throws Throwable {
+    final PhraseQuery q1 = new PhraseQuery();
+    final BooleanQuery q2 = new BooleanQuery();
+    q2.add(new PhraseQuery(), BooleanClause.Occur.MUST);
+    q2.toString();
+  }
+  
 }
