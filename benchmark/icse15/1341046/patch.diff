diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
index 1c5bf7b1..ac598717 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
@@ -2374,7 +2374,7 @@ private void writeOPNQFLRM(SQLException e) throws DRDAProtocolException
 		writeRDBNAM(database.getDatabaseName());
 		writer.endDdm();
 		writer.startDdm(CodePoint.SQLCARD);
-		writeSQLCAGRP(e, getSqlCode(getExceptionSeverity(e)), 0, 0);
+		writeSQLCAGRP(e, 0, 0);
 		writer.endDdmAndDss();
 	}
 	/**
@@ -5910,7 +5910,7 @@ private void writeSQLCARD(SQLException e,int severity,
 	{
 		writer.createDssObject();
 		writer.startDdm(CodePoint.SQLCARD);
-		writeSQLCAGRP(e, getSqlCode(severity), updateCount, rowCount);
+		writeSQLCAGRP(e, updateCount, rowCount);
 		writer.endDdmAndDss();
 
 		// If we have a shutdown exception, restart the server.
@@ -6040,13 +6040,14 @@ private int getExceptionSeverity (SQLException e)
 	 *   SQLDIAGGRP; DRDA TYPE N-GDA; ENVLID 0x56; Length Override 0
 	 *
 	 * @param e 	SQLException encountered
-	 * @param sqlcode	sqlcode
 	 * 
 	 * @exception DRDAProtocolException
 	 */
-	private void writeSQLCAGRP(SQLException e, int sqlcode, int updateCount,
-			long rowCount) throws DRDAProtocolException
+    private void writeSQLCAGRP(SQLException e, int updateCount, long rowCount)
+        throws DRDAProtocolException
 	{
+        int sqlcode = 0;
+
         if (e == null) {
             // Forwarding to the optimized version when there is no
             // exception object
@@ -6054,6 +6055,19 @@ private void writeSQLCAGRP(SQLException e, int sqlcode, int updateCount,
             return;
         }
 
+        // SQLWarnings should have warning severity, except if it's a
+        // DataTruncation warning for write operations (with SQLState 22001),
+        // which is supposed to be used as an exception even though it's a
+        // sub-class of SQLWarning.
+        if (e instanceof SQLWarning &&
+                !SQLState.LANG_STRING_TRUNCATION.equals(e.getSQLState())) {
+            sqlcode = ExceptionSeverity.WARNING_SEVERITY;
+        } else {
+            // Get the SQLCODE for exceptions. Note that this call will always
+            // return -1, so the real error code will be lost.
+            sqlcode = getSqlCode(getExceptionSeverity(e));
+        }
+
 		if (rowCount < 0 && updateCount < 0)
 		{
 			writer.writeByte(CodePoint.NULLDATA);
@@ -6635,7 +6649,7 @@ else if ((! rtnOutput) && (pmeta != null))
 
 		// all went well we will just write a null SQLCA
 		writer.startDdm(CodePoint.SQLDARD);
-		writeSQLCAGRP(e, getSqlCode(getExceptionSeverity(e)), 0, 0);
+		writeSQLCAGRP(e, 0, 0);
 
 		if (sqlamLevel >= MGRLVL_7)
 			writeSQLDHROW(ps.getResultSetHoldability());
@@ -7123,7 +7137,7 @@ private boolean writeFDODTA (DRDAStatement stmt)
 			if (sqlw == null)
                 writeSQLCAGRP(nullSQLState, 0, -1, -1);
 			else
-				writeSQLCAGRP(sqlw, sqlw.getErrorCode(), 1, -1);
+				writeSQLCAGRP(sqlw, 1, -1);
 
             // Save the position right after the warnings so we know where to
             // insert more warnings later.
@@ -7274,7 +7288,7 @@ private boolean writeFDODTA (DRDAStatement stmt)
                 if (sqlw != null) {
                     truncated.setNextWarning(sqlw);
                 }
-                writeSQLCAGRP(truncated, CodePoint.SVRCOD_WARNING, 1, -1);
+                writeSQLCAGRP(truncated, 1, -1);
                 writer.writeBytes(data);
                 stmt.clearTruncationWarnings();
             }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/CounterOutputStream.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/CounterOutputStream.java
index 3bb46cbd..9face1c9 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/CounterOutputStream.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/CounterOutputStream.java
@@ -42,7 +42,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		so that the count is intially zero.
 	*/
 	public CounterOutputStream() {
-		super();
+        limit = -1;
 	}
 
 	public void setOutputStream(OutputStream out) {
@@ -101,25 +101,10 @@ public  void write(int b) throws IOException {
 			throw new EOFException();
 		}
 
-		out.write(b);
+		if (out != null) out.write(b);
 		count++;
 	}
 
-	/**
-		Add b.length to the count.
-
-		@see OutputStream#write
-	*/
-	public void write(byte b[]) throws IOException {
-		
-		if ((limit >= 0) && ((count + b.length) > limit)) {
-			throw new EOFException();
-		}
-
-		out.write(b);
-		count += b.length;
-	}
-
 	/**
 		Add len to the count, discard the data.
 
@@ -131,7 +116,7 @@ public void write(byte b[], int off, int len) throws IOException {
 			throw new EOFException();
 		}
 
-		out.write(b, off, len);
+		if (out != null) out.write(b, off, len);
 		count += len;
 	}
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/ResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/ResultSet.java
index 1f9ef8c6..d3b14d6d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/ResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/ResultSet.java
@@ -335,6 +335,13 @@ according to the constants above (ISBEFOREFIRST etc).
 	 */
 	public String	getCursorName();
 
+	/**
+     * Add a warning to this result set.
+     *
+     * @param w the warning to add
+     */
+    void addWarning(SQLWarning w);
+
 	/**
 		Return the set of warnings generated during the execution of
 		this result set. The warnings are cleared once this call returns.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBinary.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBinary.java
index 2fa67ae4..fb31fe36 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBinary.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBinary.java
@@ -21,39 +21,37 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.iapi.types;
 
+import org.apache.derby.iapi.sql.conn.StatementContext;
+
+import org.apache.derby.iapi.reference.ContextId;
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.reference.MessageId;
 
 import org.apache.derby.iapi.services.io.ArrayInputStream;
 
-import org.apache.derby.iapi.types.BitDataValue;
-import org.apache.derby.iapi.types.DataValueDescriptor;
-import org.apache.derby.iapi.types.ConcatableDataValue;
 import org.apache.derby.iapi.error.StandardException;
 
+import org.apache.derby.iapi.services.context.ContextService;
+
 import org.apache.derby.iapi.services.io.DerbyIOException;
 import org.apache.derby.iapi.services.io.StoredFormatIds;
 import org.apache.derby.iapi.services.io.FormatIdInputStream;
+import org.apache.derby.iapi.services.io.InputStreamUtil;
 
 import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.iapi.services.i18n.MessageService;
 
-import org.apache.derby.iapi.types.BooleanDataValue;
-import org.apache.derby.iapi.types.NumberDataValue;
-
 import org.apache.derby.iapi.services.cache.ClassSize;
 
-import org.apache.derby.iapi.types.SQLInteger;
-
 import java.io.ObjectOutput;
 import java.io.ObjectInput;
 import java.io.IOException;
 import java.io.InputStream;
 
 import java.sql.Blob;
+import java.sql.DataTruncation;
 import java.sql.SQLException;
 import java.sql.PreparedStatement;
-import org.apache.derby.iapi.services.io.InputStreamUtil;
 
 /**
  * SQLBinary is the abstract class for the binary datatypes.
@@ -1297,4 +1295,35 @@ private int getBlobLength() throws StandardException
         catch (SQLException se) { throw StandardException.plainWrapException( se ); }
     }
     
+    /**
+     * Truncate this value to the desired width by removing bytes at the
+     * end of the byte sequence.
+     *
+     * @param sourceWidth the original width in bytes (only used for
+     *   diagnostics, ignored if {@code warn} is {@code false})
+     * @param desiredWidth the desired width in bytes
+     * @param warn whether or not to generate a truncation warning
+     */
+    void truncate(int sourceWidth, int desiredWidth, boolean warn)
+            throws StandardException {
+        if (warn) {
+            // SQL:2003, part 2, 6.12 <cast specification>,
+            // general rule 12 says we should warn about truncation.
+            DataTruncation warning = new DataTruncation(
+                    -1,    // column index is unknown
+                    false, // parameter
+                    true,  // read
+                    getLength(), desiredWidth);
+
+            StatementContext statementContext = (StatementContext)
+                ContextService.getContext(ContextId.LANG_STATEMENT);
+            statementContext.getActivation().
+                    getResultSet().addWarning(warning);
+        }
+
+        // Truncate to the desired width.
+        byte[] shrunkData = new byte[desiredWidth];
+        System.arraycopy(getValue(), 0, shrunkData, 0, desiredWidth);
+        setValue(shrunkData);
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBit.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBit.java
index ea6fba2a..5cfe666f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBit.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBit.java
@@ -214,19 +214,11 @@ else if (sourceWidth > desiredWidth)
 									String.valueOf(desiredWidth));
 				}
 			}
-			//else
-			//{
-			// RESOLVE: when we have warnings, issue a warning if
-			// truncation of non-zero bits will occur
-			//}
 	
 			/*
 			** Truncate to the desired width.
 			*/
-			byte[] shrunkData = new byte[desiredWidth];
-			System.arraycopy(dataValue, 0, shrunkData, 0, desiredWidth);
-			dataValue = shrunkData;
-
+            truncate(sourceWidth, desiredWidth, !errorOnTrunc);
 		}
 	}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBlob.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBlob.java
index 39467601..a6233896 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBlob.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBlob.java
@@ -236,11 +236,7 @@ public void setWidth(int desiredWidth,  // ignored!
                 /*
                  * Truncate to the desired width.
                  */
-				
-
-				byte[] shrunkData = new byte[desiredWidth];
-				System.arraycopy(getBytes(), 0, shrunkData, 0, desiredWidth);
-				dataValue = shrunkData;
+				truncate(sourceWidth, desiredWidth, true);
             }
         }
     }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
index 946a4547..454bc517 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
@@ -29,14 +29,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.io.StoredFormatIds;
 import org.apache.derby.iapi.services.io.StreamStorable;
 import org.apache.derby.iapi.services.io.FormatIdInputStream;
+import org.apache.derby.iapi.services.io.FormatIdOutputStream;
 
-import org.apache.derby.iapi.types.DataTypeDescriptor;
-import org.apache.derby.iapi.types.DataValueDescriptor;
-import org.apache.derby.iapi.types.TypeId;
-import org.apache.derby.iapi.types.StringDataValue;
-import org.apache.derby.iapi.types.NumberDataValue;
-import org.apache.derby.iapi.types.BooleanDataValue;
-import org.apache.derby.iapi.types.ConcatableDataValue;
+import org.apache.derby.iapi.reference.ContextId;
 import org.apache.derby.iapi.reference.SQLState;
 
 import org.apache.derby.iapi.error.StandardException;
@@ -44,18 +39,15 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.services.cache.ClassSize;
 import org.apache.derby.iapi.services.io.ArrayInputStream;
+import org.apache.derby.iapi.services.io.CounterOutputStream;
 import org.apache.derby.iapi.services.io.InputStreamUtil;
 import org.apache.derby.iapi.util.StringUtil;
 import org.apache.derby.iapi.util.UTF8Util;
 import org.apache.derby.iapi.services.i18n.LocaleFinder;
+import org.apache.derby.iapi.sql.conn.StatementContext;
 
 import org.apache.derby.iapi.db.DatabaseContext;
 
-import org.apache.derby.iapi.types.SQLInteger;
-import org.apache.derby.iapi.types.SQLDate;
-import org.apache.derby.iapi.types.SQLTime;
-import org.apache.derby.iapi.types.SQLTimestamp;
-
 import java.io.InputStream;
 import java.io.ObjectOutput;
 import java.io.ObjectInput;
@@ -64,6 +56,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.EOFException;
 import java.io.Reader;
 import java.sql.Clob;
+import java.sql.DataTruncation;
 import java.sql.Date;
 import java.sql.ResultSet;
 import java.sql.PreparedStatement;
@@ -985,6 +978,18 @@ private final void writeUTF(ObjectOutput out, int strLen,
             if ( characterReader != null ) { c = characterReader.read(); }
             else { c = isRaw ? data[i] : lvalue.charAt(i); }
             
+            writeUTF(out, c);
+        }
+    }
+
+    /**
+     * Write a single character to a stream in the modified UTF-8 format.
+     *
+     * @param out the destination stream
+     * @param c the character to write
+     * @throws IOException if writing to the destination stream fails
+     */
+    private static void writeUTF(ObjectOutput out, int c) throws IOException {
             if ((c >= 0x0001) && (c <= 0x007F))
             {
                 out.write(c);
@@ -1001,7 +1006,6 @@ else if (c > 0x07FF)
                 out.write(0x80 | ((c >>  0) & 0x3F));
             }
         }
-    }
 
     /**
      * Writes the header and the user data for a CLOB to the destination stream.
@@ -1914,9 +1918,38 @@ else if (sourceWidth > desiredWidth && desiredWidth > 0)
             /*
             ** Check whether any non-blank characters will be truncated.
             */
-            if (errorOnTrunc)
+            try {
                 hasNonBlankChars(getString(), desiredWidth, sourceWidth);
-            //RESOLVE: should issue a warning instead
+            } catch (StandardException se) {
+                if (errorOnTrunc) {
+                    throw se;
+                }
+
+                // Generate a truncation warning, as specified in SQL:2003,
+                // part 2, 6.12 <cast specification>, general rules 10)c)2)
+                // and 11)c)2).
+
+                // Data size and transfer size need to be in bytes per
+                // DataTruncation javadoc.
+                String source = getString();
+                int transferSize = getUTF8Length(source, 0, desiredWidth);
+                int dataSize = transferSize +
+                        getUTF8Length(source, desiredWidth, source.length());
+
+                DataTruncation warning = new DataTruncation(
+                    -1,     // column index is unknown
+                    false,  // parameter
+                    true,   // read
+                    dataSize,
+                    transferSize);
+
+                warning.initCause(se);
+
+                StatementContext statementContext = (StatementContext)
+                    ContextService.getContext(ContextId.LANG_STATEMENT);
+                statementContext.getActivation().
+                        getResultSet().addWarning(warning);
+            }
 
             /*
             ** Truncate to the desired width.
@@ -1926,6 +1959,33 @@ else if (sourceWidth > desiredWidth && desiredWidth > 0)
         return;
     }
 
+    /**
+     * Get the number of bytes needed to represent a string in modified
+     * UTF-8, which is the encoding used by {@code writeExternal()} and
+     * {@code writeUTF()}.
+     *
+     * @param string the string whose length to calculate
+     * @param start start index (inclusive)
+     * @param end end index (exclusive)
+     */
+    private int getUTF8Length(String string, int start, int end)
+            throws StandardException {
+        CounterOutputStream cs = new CounterOutputStream();
+
+        try {
+            FormatIdOutputStream out = new FormatIdOutputStream(cs);
+            for (int i = start; i < end; i++) {
+                writeUTF(out, string.charAt(i));
+            }
+            out.close();
+        } catch (IOException ioe) {
+            throw StandardException.newException(
+                    SQLState.LANG_IO_EXCEPTION, ioe, ioe.toString());
+        }
+
+        return cs.getCount();
+    }
+
     /*
     ** SQL Operators
     */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLVarbit.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLVarbit.java
index 2769cbce..c108b4db 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLVarbit.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLVarbit.java
@@ -138,19 +138,11 @@ public void setWidth(int desiredWidth,
 									String.valueOf(desiredWidth));
 				}
 			}
-			//else
-			//{
-			// RESOLVE: when we have warnings, issue a warning if
-			// truncation of non-zero bits will occur
-			//}
 	
 			/*
 			** Truncate to the desired width.
 			*/
-			byte[] shrunkData = new byte[desiredWidth];
-			System.arraycopy(dataValue, 0, shrunkData, 0, desiredWidth);
-			dataValue = shrunkData;
-
+            truncate(sourceWidth, desiredWidth, !errorOnTrunc);
 		}
 	}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java
index 772b6b61..e1c40a11 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java
@@ -1018,7 +1018,7 @@ public void checkCancellationFlag()
         }
     }
 
-	protected final void addWarning(SQLWarning w) {
+	public final void addWarning(SQLWarning w) {
 
 		if (isTopResultSet) {
 			if (warnings == null)
@@ -1031,10 +1031,10 @@ protected final void addWarning(SQLWarning w) {
 		if (activation != null) {
 
 			ResultSet rs = activation.getResultSet();
-			if (rs instanceof BasicNoPutResultSetImpl) {
-				((BasicNoPutResultSetImpl) rs).addWarning(w);
-			}
 
+            if (rs != null) {
+                rs.addWarning(w);
+            }
 		}
 	}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java
index 58c3a28a..72724d9d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java
@@ -21,15 +21,14 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.impl.sql.execute;
 
+import java.sql.SQLWarning;
 import java.sql.Timestamp;
 
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.services.i18n.MessageService;
 import org.apache.derby.iapi.services.loader.GeneratedMethod;
-import org.apache.derby.iapi.services.monitor.Monitor;
 import org.apache.derby.iapi.services.sanity.SanityManager;
-import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
 import org.apache.derby.iapi.sql.Activation;
 import org.apache.derby.iapi.sql.ResultColumnDescriptor;
 import org.apache.derby.iapi.sql.ResultDescription;
@@ -45,7 +44,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.execute.ResultSetStatisticsFactory;
 import org.apache.derby.iapi.sql.execute.RunTimeStatistics;
 import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
-import org.apache.derby.iapi.types.DataTypeDescriptor;
 import org.apache.derby.iapi.types.DataValueDescriptor;
 
 /**
@@ -757,7 +755,14 @@ public boolean doesCommit()
 		return false;
 	}
 
-	public java.sql.SQLWarning getWarnings() {
+    public void addWarning(SQLWarning w) {
+        // We're not returning a (JDBC) ResultSet, so add the warning to
+        // the Activation so that it's included in the warning chain of the
+        // executing Statement.
+        getActivation().addWarning(w);
+    }
+
+	public SQLWarning getWarnings() {
 		return null;
 	}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java
index f1efdf97..929f86e8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java
@@ -21,6 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.impl.sql.execute;
 
+import java.sql.SQLWarning;
 import java.sql.Timestamp;
 
 import org.apache.derby.iapi.error.StandardException;
@@ -1306,7 +1307,12 @@ public Object clone()
 		catch (CloneNotSupportedException e) {}
 		return clo;
 	}
-	public java.sql.SQLWarning getWarnings() {
+
+    public void addWarning(SQLWarning w) {
+        getActivation().addWarning(w);
+    }
+
+	public SQLWarning getWarnings() {
 		return null;
 	}
 
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index a59a45ab..a3b191dd 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -1327,7 +1327,7 @@ The message identifier (ie. the value that matches a field in this class)
 	String LANG_CURSOR_ALREADY_EXISTS                                  = "X0X60.S";
 	String LANG_INDEX_COLUMN_NOT_EQUAL                                 = "X0X61.S";
 	String LANG_INCONSISTENT_ROW_LOCATION                              = "X0X62.S";
-	String LANG_FILE_ERROR                                             = "X0X63.S";
+	String LANG_IO_EXCEPTION                                           = "X0X63.S";
 	String LANG_COLUMN_NOT_ORDERABLE_DURING_EXECUTION                  = "X0X67.S";
 	String LANG_OBJECT_NOT_FOUND_DURING_EXECUTION                      = "X0X81.S";
 	String LANG_NON_KEYED_INDEX                                        = "X0X85.S";
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CastingTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CastingTest.java
index 988443f6..46b90d09 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CastingTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CastingTest.java
@@ -22,11 +22,13 @@
 package org.apache.derbyTesting.functionTests.tests.lang;
 
 import java.sql.Connection;
+import java.sql.DataTruncation;
 import java.sql.DatabaseMetaData;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.ResultSetMetaData;
 import java.sql.SQLException;
+import java.sql.SQLWarning;
 import java.sql.Statement;
 import java.sql.Types;
 
@@ -826,6 +828,150 @@ public void test_illegalBooleanCasts() throws Exception
         }
     }
 
+    /**
+     * Test that a java.sql.DataTruncation warning is created when a cast
+     * results in truncation. DERBY-129.
+     */
+    public void testDataTruncationWarning() throws SQLException {
+        Statement s = createStatement();
+
+        // Test truncation of character data
+        checkDataTruncationResult(s,
+            "values (cast('abc' as char(2)), cast('de'   as char(2)))," +
+            "       (cast('fg'  as char(2)), cast('hi'   as char(2)))," +
+            "       (cast('jkl' as char(2)), cast('mnop' as char(2)))");
+        checkDataTruncationResult(s,
+            "values (cast('abc' as varchar(2)), cast('de'   as varchar(2)))," +
+            "       (cast('fg'  as varchar(2)), cast('hi'   as varchar(2)))," +
+            "       (cast('jkl' as varchar(2)), cast('mnop' as varchar(2)))");
+        checkDataTruncationResult(s,
+            "values (cast('abc' as clob(2)), cast('de'   as clob(2)))," +
+            "       (cast('fg'  as clob(2)), cast('hi'   as clob(2)))," +
+            "       (cast('jkl' as clob(2)), cast('mnop' as clob(2)))");
+
+        // Exact same test as above for binary data
+        checkDataTruncationResult(s,
+            "values (cast(x'abcdef' as char(2) for bit data),"+
+            "        cast(x'abcd' as char(2) for bit data))," +
+            "       (cast(x'abcd' as char(2) for bit data)," +
+            "        cast(x'cdef' as char(2) for bit data))," +
+            "       (cast(x'012345' as char(2) for bit data)," +
+            "        cast(x'6789ABCD' as char(2) for bit data))");
+        checkDataTruncationResult(s,
+            "values (cast(x'abcdef' as varchar(2) for bit data),"+
+            "        cast(x'abcd' as varchar(2) for bit data))," +
+            "       (cast(x'abcd' as varchar(2) for bit data)," +
+            "        cast(x'cdef' as varchar(2) for bit data))," +
+            "       (cast(x'012345' as varchar(2) for bit data)," +
+            "        cast(x'6789ABCD' as varchar(2) for bit data))");
+        checkDataTruncationResult(s,
+            "values" +
+            "    (cast(x'abcdef' as blob(2)), cast(x'abcd' as blob(2))), " +
+            "    (cast(x'abcd' as blob(2)),   cast(x'cdef' as blob(2))), " +
+            "    (cast(x'012345' as blob(2)), cast(x'6789ABCD' as blob(2)))");
+
+        // DataTruncation's javadoc says that getDataSize() and
+        // getTransferSize() should return number of bytes. Derby uses
+        // UTF-8. Test with some characters outside the US-ASCII range to
+        // verify that the returned values are in bytes and not in chars.
+        ResultSet rs = s.executeQuery(
+                "values cast('abc\u00E6\u00F8\u00E5' as varchar(4))");
+        assertTrue(rs.next());
+        assertEquals("abc\u00E6", rs.getString(1));
+        // The warning should say the string is truncated from 9 bytes to
+        // 5 bytes, not from 6 characters to 4 characters.
+        assertDataTruncation(rs.getWarnings(), -1, true, false, 9, 5);
+        assertFalse(rs.next());
+        rs.close();
+
+        // Test that there's a warning on the statement if truncation happens
+        // in an operation that doesn't return a ResultSet.
+        setAutoCommit(false);
+        s.execute("create table t1_d129 (x8 char(8) for bit data)");
+        s.execute("create table t2_d129 (x4 char(4) for bit data)");
+        s.execute("insert into t1_d129(x8) values x'0123456789ABCDEF'");
+        assertNull(s.getWarnings());
+        s.execute("insert into t2_d129(x4) " +
+                  "select cast(x8 as char(4) for bit data) from t1_d129");
+        assertDataTruncation(s.getWarnings(), -1, true, false, 8, 4);
+        rollback();
+    }
+
+    /**
+     * <p>
+     * Check the results for the queries in testDataTruncation().
+     * </p>
+     *
+     * <p>
+     * The method expects a query that returns three rows with columns of a
+     * character string or binary string data type, where some of the values
+     * are cast to a narrower data type.
+     * </p>
+     *
+     * <p>
+     * Expect the following truncations to have taken place:
+     * </p>
+     *
+     * <ol>
+     * <li>Row 1, column 1: truncated from 3 to 2 bytes</li>
+     * <li>Row 3, column 1: truncated from 3 to 2 bytes</li>
+     * <li>Row 3, column 2: truncated from 4 to 2 bytes</li>
+     * </ol>
+     */
+    private void checkDataTruncationResult(Statement s, String sql)
+            throws SQLException {
+        ResultSet rs = s.executeQuery(sql);
+
+        // First row should have one warning (column 1)
+        assertTrue(rs.next());
+        SQLWarning w = rs.getWarnings();
+        assertDataTruncation(w, -1, true, false, 3, 2);
+        w = w.getNextWarning();
+        assertNull(w);
+        rs.clearWarnings(); // workaround for DERBY-5765
+
+        // Second row should have no warnings
+        assertTrue(rs.next());
+        assertNull(rs.getWarnings());
+
+        // Third row should have two warnings (column 1 and 2)
+        assertTrue(rs.next());
+        w = rs.getWarnings();
+        assertDataTruncation(w, -1, true, false, 3, 2);
+        // Client driver doesn't support nested warnings
+        if (usingEmbedded()) {
+            w = w.getNextWarning();
+            assertDataTruncation(w, -1, true, false, 4, 2);
+        }
+        w = w.getNextWarning();
+        assertNull(w);
+        rs.clearWarnings(); // workaround for DERBY-5765
+
+        // No more rows
+        assertFalse(rs.next());
+        rs.close();
+
+        // There should be no warnings on the statement or the connection
+        assertNull(s.getWarnings());
+        assertNull(getConnection().getWarnings());
+    }
+
+    private void assertDataTruncation(
+            SQLWarning w, int index, boolean read, boolean parameter,
+            int dataSize, int transferSize) throws SQLException {
+        assertNotNull("No warning", w);
+        if (!(w instanceof DataTruncation)) {
+            fail("Not a DataTruncation warning", w);
+        }
+
+        DataTruncation dt = (DataTruncation) w;
+        assertEquals("Column index", index, dt.getIndex());
+        assertEquals("Read", read, dt.getRead());
+        assertEquals("Parameter", parameter, dt.getParameter());
+        assertEquals("Data size", dataSize, dt.getDataSize());
+        assertEquals("Transfer size", transferSize, dt.getTransferSize());
+    }
+
     protected void tearDown() throws SQLException, Exception {
         Statement scb = createStatement();
 
@@ -1035,11 +1181,11 @@ private PreparedStatement   chattyPrepare( String text )
     }
 
     /**
-     * Testing server-side behaviour so run in embedded only.
+     * Create a test suite with all the tests in this class. Although we're
+     * testing embedded functionality, also run the test in client/server
+     * mode to ensure that warnings and errors travel across the wire.
      */
     public static Test suite() {
-
-        return TestConfiguration.embeddedSuite(CastingTest.class);
-
+        return TestConfiguration.defaultSuite(CastingTest.class);
     }
 }
