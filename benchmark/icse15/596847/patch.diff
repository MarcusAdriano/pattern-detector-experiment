diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ConcurrencyTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ConcurrencyTest.java
index e133da2d..ba308246 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ConcurrencyTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ConcurrencyTest.java
@@ -58,14 +58,10 @@ public void setUp()
     
     public void tearDown() throws Exception 
     {
-        try {
             rollback();
-            Statement dropStatement = createStatement();
-            dropStatement.execute("drop table t1");
-            dropStatement.close();
-        } catch (SQLException e) {
-            printStackTrace(e); // Want to propagate the real exception.
-        }
+        dropTable("T1");
+        commit();
+
         super.tearDown();
     }
     
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURDataModelSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURDataModelSetup.java
index 49f1b67a..4b1b1f28 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURDataModelSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SURDataModelSetup.java
@@ -62,27 +62,10 @@ public static void createDataModel(SURDataModel model, Connection con,
                                        int records) 
         throws SQLException
     {
-        Statement statement = con.createStatement();
-        
-        try { 
-            statement.execute("drop table t1"); 
-        } catch (SQLException e) {
-            assertEquals("'drop table t1' failed with unexpected SQL State",
-                         TABLE_EXISTS_SQL_STATE, e.getSQLState());
-            
-            // The net framework does not give any valuable error code
-            if (!TestConfiguration.getCurrent().getJDBCClient().isEmbedded()) {
-                
-                assertEquals("'drop table t1' failed with unexpected error code",
-                             NET_ERROR, e.getErrorCode());
-            } else {
-                assertEquals("'drop table t1' failed with unexpected error code",
-                             TABLE_EXISTS_ERRORCODE, e.getErrorCode());
-            }
-            
-        };
         
+        BaseJDBCTestCase.dropTable(con, "T1");
         
+        Statement statement = con.createStatement();     
         
         /** Create the table */
         statement.execute(model.getCreateTableStatement());
@@ -253,11 +236,4 @@ private SURDataModel(String name) {
     static void printStackTrace(Throwable t) {
         BaseJDBCTestCase.printStackTrace(t);
     }
-    
-    /**
-     * Error codes and SQL state
-     */
-    private final static String TABLE_EXISTS_SQL_STATE = "42Y55";
-    private final static int TABLE_EXISTS_ERRORCODE = 20000;
-    private final static int NET_ERROR = -1; 
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
index 107cdc47..dc3b05b7 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
@@ -1764,21 +1764,6 @@ private void    dropFunction( String functionName )
         catch( SQLException se) {}
     }
 
-    /**
-     * Drop a table so that we can recreate it.
-     */
-    private void    dropTable( String tableName )
-        throws Exception
-    {
-        // swallow the "object doesn't exist" diagnostic
-        try {
-            PreparedStatement   ps = prepareStatement( "drop table " + tableName );
-
-            ps.execute();
-            ps.close();
-        }
-        catch( SQLException se) {}
-    }
 
     /**
      * Assert that the ResultSet returns the desired rows.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java
index fdf22129..5bbbdede 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java
@@ -817,6 +817,42 @@ private void assertEscapedTableRowCount(String escapedTableName, int rowCount)
         s.close();
     }
 
+    /**
+     * Execute a DROP TABLE command using the passed in tableName as-is
+     * and the default connection.
+     * If the DROP TABLE fails because the table does not exist then
+     * the exception is ignored.
+     * @param tableName Table to be dropped.
+     * @throws SQLException
+     */
+    public final void dropTable(String tableName) throws SQLException
+    {
+       dropTable(getConnection(), tableName);
+    }
+    
+    /**
+     * Execute a DROP TABLE command using the passed in tableName as-is.
+     * If the DROP TABLE fails because the table does not exist then
+     * the exception is ignored.
+     * @param conn Connection to execute the DROP TABLE
+     * @param tableName Table to be dropped.
+     * @throws SQLException
+     */
+    public static void dropTable(Connection conn, String tableName) throws SQLException
+    {
+        Statement statement = conn.createStatement();
+        String dropSQL = "DROP TABLE " + tableName;
+        try { 
+            
+            statement.executeUpdate(dropSQL); 
+        } catch (SQLException e) {
+            assertSQLState("42Y55", e);
+        }
+        finally {
+            statement.close();
+        }
+    }
+
     /**
      * Assert that the query fails (either in compilation,
      * execution, or retrieval of results--doesn't matter)
