diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java
index 5da9274e..3c3fae68 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InListOperatorNode.java
@@ -677,8 +677,20 @@ void generateStartStopKey(boolean isAsc, boolean isStartKey,
 		/* left side of the "in" operator is our "judge" when we try to get
 		 * the min/max value of the operands on the right side.  Judge's type
 		 * is important for us, and is input parameter to min/maxValue.
+		 * We found in DERBY-6025(Wrong results with IN lists and indexes in 
+		 * territory based collation) that we need to make sure that we also
+		 * left operand's collation information with Judge object. The reason
+		 * we are sending precision/scale etc along with type id and collation
+		 * information is that DataTypeDescriptor constructor requires all
+		 * those properties too along with the collation information.
 		 */
 		int leftTypeFormatId = leftOperand.getTypeId().getTypeFormatId();
+		int leftPrecision = leftOperand.getTypeServices().getPrecision();
+		int leftScale = leftOperand.getTypeServices().getScale();
+		boolean leftIsNullable = leftOperand.getTypeServices().isNullable();
+		int leftMaximumWidth = leftOperand.getTypeServices().getMaximumWidth();
+		int leftCollationType = leftOperand.getTypeServices().getCollationType();
+		int leftCollationDerivation = leftOperand.getTypeServices().getCollationDerivation();
 		int leftJDBCTypeId = leftOperand.getTypeId().isUserDefinedTypeId() ?
 								leftOperand.getTypeId().getJDBCTypeId() : -1;
 
@@ -728,6 +740,12 @@ void generateStartStopKey(boolean isAsc, boolean isStartKey,
 			 */
 			mb.push(leftTypeFormatId);
 			mb.push(leftJDBCTypeId);
+			mb.push(leftPrecision);
+			mb.push(leftScale);
+			mb.push(leftIsNullable);
+			mb.push(leftMaximumWidth);
+			mb.push(leftCollationType);
+			mb.push(leftCollationDerivation);
 
 			/* decide to get min or max value
 			 */
@@ -742,7 +760,7 @@ void generateStartStopKey(boolean isAsc, boolean isStartKey,
                 ClassName.BaseExpressionActivation,
                 methodNam,
                 ClassName.DataValueDescriptor,
-                6);
+                12);
 		}
 	}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BaseExpressionActivation.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BaseExpressionActivation.java
index 859b8e90..4fcd0198 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BaseExpressionActivation.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/BaseExpressionActivation.java
@@ -23,6 +23,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.catalog.types.UserDefinedTypeIdImpl;
 import org.apache.derby.iapi.error.StandardException;
+import org.apache.derby.iapi.types.DataTypeDescriptor;
 import org.apache.derby.iapi.types.DataValueDescriptor;
 import org.apache.derby.iapi.types.TypeId;
 
@@ -67,6 +68,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 * @param judgeTypeFormatId		type format id of the judge
 	 * @param judgeUserJDBCTypeId	JDBC type id if judge is user type;
 	 *								-1 if not user type
+	 * @param judgePrecision		precision of the judge
+	 * @param judgeScale		    scale of the judge
+	 * @param judgeIsNullable		nullability of the judge
+	 * @param judgeMaximumWidth		maximum width of the judge
+	 * @param judgeCollationType	collation type of the judge
+	 * @param judgeCollationDerivation		collation derivation of the judge
 	 *
 	 * @return	The minimum value of the 4.
 	 */
@@ -75,13 +82,23 @@ public static DataValueDescriptor minValue(DataValueDescriptor v1,
 											  DataValueDescriptor v3,
 											  DataValueDescriptor v4,
 											  int judgeTypeFormatId,
-											  int judgeUserJDBCTypeId)
+											  int judgeUserJDBCTypeId,
+											  int judgePrecision,
+											  int judgeScale,
+											  boolean judgeIsNullable,
+											  int judgeMaximumWidth,
+											  int judgeCollationType,
+											  int judgeCollationDerivation)
 										throws StandardException
 	{
 		DataValueDescriptor judge;
 
         if (judgeUserJDBCTypeId == -1) {
-            judge = new TypeId(judgeTypeFormatId, null).getNull();
+        	judge = new DataTypeDescriptor(
+        			new TypeId(judgeTypeFormatId, null),
+        			judgePrecision,judgeScale,judgeIsNullable,
+        			judgeMaximumWidth,judgeCollationType,
+        			judgeCollationDerivation).getNull();
         } else {
             judge = new TypeId(judgeTypeFormatId,
                                new UserDefinedTypeIdImpl()).getNull();
@@ -131,13 +148,23 @@ public static DataValueDescriptor maxValue(DataValueDescriptor v1,
 											  DataValueDescriptor v3,
 											  DataValueDescriptor v4,
 											  int judgeTypeFormatId,
-											  int judgeUserJDBCTypeId)
+											  int judgeUserJDBCTypeId,
+											  int judgePrecision,
+											  int judgeScale,
+											  boolean judgeIsNullable,
+											  int judgeMaximumWidth,
+											  int judgeCollationType,
+											  int judgeCollationDerivation)
 										throws StandardException
 	{
 		DataValueDescriptor judge;
-		if (judgeUserJDBCTypeId == -1)
-			judge =  new TypeId(judgeTypeFormatId, null).getNull();
-		else
+		if (judgeUserJDBCTypeId == -1) {
+        	judge = new DataTypeDescriptor(
+        			new TypeId(judgeTypeFormatId, null),
+        			judgePrecision,judgeScale,judgeIsNullable,
+        			judgeMaximumWidth,judgeCollationType,
+        			judgeCollationDerivation).getNull();
+		} else
 			judge =  new TypeId(judgeTypeFormatId, new UserDefinedTypeIdImpl()).getNull();
 
 		DataValueDescriptor maxVal = v1;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
index 6d099d2e..bfc0dcc1 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
@@ -81,6 +81,7 @@ public CollationTest(String name) {
     /** Test cases to run with Norwegian case-sensitive collation. */
     private final static String[] NORWEGIAN_CASE_SENSITIVE = {
         "testNorwayCollation",
+        "testInListNorwayCollation",
         "testLikeEscapeClauseLengthRestriction",
     };
 
@@ -438,6 +439,31 @@ public void testPolishCollation() throws SQLException {
     
       }    
   
+/**
+ * Test in list with constant and non constant elements & Norwegian collation
+ * DERBY-6025(Wrong results with IN lists and indexes in territory based 
+ *   collation)
+ */
+public void testInListNorwayCollation() throws SQLException {
+    Statement s = createStatement();
+    s.execute("CREATE TABLE derby6025_T1( c1 varchar(40) )");
+    s.executeUpdate("INSERT INTO derby6025_T1 VALUES" +
+    		"'Stranda Idrottslag', 'Aalesunds Fotballklubb'");
+    ResultSet rs = s.executeQuery("select * from derby6025_T1 where C1 in "+
+    		"('Aalesunds Fotballklubb', cast('xyz' as char(3)))");
+    JDBC.assertFullResultSet(rs,
+      		new String[][] {{"Aalesunds Fotballklubb"}});
+    
+    s.executeUpdate("create index i1 on derby6025_T1(c1)");
+    //After an index is created on column c1, following query returned 
+    // 0 rows without the fix for DERBY-6025. After DERBY-6025 is fixed, 
+    // it correctly returns 1 row.
+    rs = s.executeQuery("select * from derby6025_T1 where C1 in "+
+    		"('Aalesunds Fotballklubb', cast('xyz' as char(3)))");
+    JDBC.assertFullResultSet(rs,
+      		new String[][] {{"Aalesunds Fotballklubb"}});
+    s.execute("DROP TABLE derby6025_T1");	
+    }
 
   /**
    * Test order by with Norwegian collation
