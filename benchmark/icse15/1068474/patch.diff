diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java
index 05cd6ef5..94a41e0d 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java
@@ -776,19 +776,6 @@ protected void initFromData(
 
 		try 
         {
-			readPageHeader();
-			initSlotTable(newIdentity);
-		}
-        catch (IOException ioe) 
-        {
-			// i/o methods on the byte array have thrown an IOException
-			throw dataFactory.markCorrupt(
-                StandardException.newException(
-                    SQLState.DATA_CORRUPT_PAGE, ioe, newIdentity));
-		}
-
-		try
-		{
 			validateChecksum(newIdentity);
 		}
 		catch (StandardException se)
@@ -850,7 +837,18 @@ protected void initFromData(
 			}
 		}
 	
-
+        try 
+        {
+            readPageHeader();
+            initSlotTable(newIdentity);
+        }
+        catch (IOException ioe) 
+        {
+            // i/o methods on the byte array have thrown an IOException
+            throw dataFactory.markCorrupt(
+                StandardException.newException(
+                    SQLState.DATA_CORRUPT_PAGE, ioe, newIdentity));
+        }
 	}
 
     /**
@@ -1090,6 +1088,21 @@ public int getTotalSpace(int slot)
 	{
 		try 
         {
+            if (SanityManager.DEBUG) 
+            {
+                if (getRecordOffset(slot) <= 0)
+                {
+                    SanityManager.DEBUG_PRINT("DEBUG_TRACE",
+                        "getTotalSpace failed with getRecordOffset(" + 
+                        slot + ") = " +
+                        getRecordOffset(slot) + " must be greater than 0." +
+                        "page dump = \n" +
+                        toUncheckedString());
+                    SanityManager.THROWASSERT(
+                        "bad record offset found in getTotalSpace()");
+                }
+            }
+
             // A slot entry looks like the following:
             //     1st field:   offset of the record on the page
             //     2nd field:   length of the record on the page
@@ -2037,7 +2050,17 @@ protected int getRecordPortionLength(int slot)
 	{
 		if (SanityManager.DEBUG) 
         {
-			SanityManager.ASSERT(getRecordOffset(slot) != 0);
+            if (getRecordOffset(slot) <= 0)
+            {
+                SanityManager.DEBUG_PRINT("DEBUG_TRACE",
+                    "getRecordPortionLength failed with getRecordOffset(" + 
+                    slot + ") = " +
+                    getRecordOffset(slot) + " must be greater than 0." +
+                    "page dump = \n" +
+                    toUncheckedString());
+                SanityManager.THROWASSERT(
+                    "bad record offset found in getRecordPortionLength()");
+            }
 		}
 
 		// these reads are always against the page array
@@ -2066,7 +2089,17 @@ public int getReservedCount(int slot) throws IOException
 	{
 		if (SanityManager.DEBUG) 
         {
-			SanityManager.ASSERT(getRecordOffset(slot) != 0);
+            if (getRecordOffset(slot) <= 0)
+            {
+                SanityManager.DEBUG_PRINT("DEBUG_TRACE",
+                    "getReservedCount failed with getRecordOffset(" + 
+                    slot + ") = " +
+                    getRecordOffset(slot) + " must be greater than 0." +
+                    "page dump = \n" +
+                    toUncheckedString());
+                SanityManager.THROWASSERT(
+                    "bad record offset found in getReservedCount");
+            }
 		}
 
 		// these reads are always against the page array
@@ -7972,6 +8005,25 @@ public String toString()
 			return null;
 	}
 
+    public String toUncheckedString()
+    {
+        if (SanityManager.DEBUG)
+        {
+            String str = "---------------------------------------------------\n";
+            str += pageHeaderToString();
+
+            //if (SanityManager.DEBUG_ON("dumpPageImage"))
+            {
+                str += "---------------------------------------------------\n";
+                str += pagedataToHexDump(pageData);
+                str += "---------------------------------------------------\n";
+            }
+            return str;
+        }
+        else
+            return null;
+    }
+
     /**
      * Provide a hex dump of the data in the in memory version of the page.
      * <p>
