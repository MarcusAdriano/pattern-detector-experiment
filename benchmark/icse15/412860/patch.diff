diff --git a/db/derby/code/branches/10.1/java/client/org/apache/derby/client/ClientPooledConnection.java b/db/derby/code/branches/10.1/java/client/org/apache/derby/client/ClientPooledConnection.java
index 7dcc17cd..78d352b8 100644
--- a/db/derby/code/branches/10.1/java/client/org/apache/derby/client/ClientPooledConnection.java
+++ b/db/derby/code/branches/10.1/java/client/org/apache/derby/client/ClientPooledConnection.java
@@ -160,6 +160,15 @@ private void createLogicalConnection() throws SqlException {
         if (physicalConnection_ == null) {
             throw new SqlException(logWriter_, "getConnection() is not valid on a closed PooledConnection.");
         }
+        
+        // Roll back any pending transactions.  Otherwise we get an exception 
+        // when we try to close the connection (even for re-use), with an error
+        // saying we can't close the connection with active transactions
+        // (fixes DERBY-1004)
+        if ( physicalConnection_.transactionInProgress() ) {
+            physicalConnection_.rollback();
+        }
+        
         // Not the usual case, but if we have an existing logical connection, then we must close it by spec.
         // We close the logical connection without notifying the pool manager that this pooled connection is availabe for reuse.
         if (logicalConnection_ != null) {
diff --git a/db/derby/code/branches/10.1/java/client/org/apache/derby/client/am/Connection.java b/db/derby/code/branches/10.1/java/client/org/apache/derby/client/am/Connection.java
index 1fb52f08..58c5e673 100644
--- a/db/derby/code/branches/10.1/java/client/org/apache/derby/client/am/Connection.java
+++ b/db/derby/code/branches/10.1/java/client/org/apache/derby/client/am/Connection.java
@@ -652,13 +652,17 @@ synchronized public void close() throws SqlException {
 
     void checkForTransactionInProgress() throws SqlException {
         // The following precondition matches CLI semantics, see SQLDisconnect()
-        if (!autoCommit_ && inUnitOfWork_ && !allowCloseInUOW_()) {
+        if ( transactionInProgress() && !allowCloseInUOW_()) {
             throw new SqlException(agent_.logWriter_,
                     "java.sql.Connection.close() requested while a transaction is in progress on the connection." +
                     "The transaction remains active, and the connection cannot be closed.");
         }
     }
 
+    public boolean transactionInProgress() {
+        return !autoCommit_ && inUnitOfWork_;
+    }
+    
     // This is a no-op if the connection is already closed.
     synchronized public void closeX() throws SqlException {
         if (!open_) {
diff --git a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java
index 087d91ec..7b718db6 100644
--- a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java
+++ b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java
@@ -620,11 +620,6 @@ private static void morph(XADataSource xads) {
 
             xar.end(xid2, XAResource.TMSUSPEND);
 
-            // DERBY-1004
-            if (TestUtil.isDerbyNetClientFramework()) {
-                System.out.println("DERBY-1004 Call conn.close to avoid exception with client");
-                conn.close();
-            }
 
             /*
              -- get local connection again
diff --git a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
index 2a846847..bae96bc0 100644
--- a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
+++ b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
@@ -62,14 +62,6 @@
 	// These tests are exempted from other frameworks
 	private boolean testSimpleDataSource = TestUtil.isEmbeddedFramework();
 
-	// for a PooledConnection.getConnection() the connection gets closed.
-	// Embedded automatically rolls back any activity on the connection.
-	// Client requires the user to rollback and gives an SQLException  
-	// java.sql.Connection.close() requested while a transaction is in progress
-	// This has been filed as DERBY-1004 
-	private  boolean needRollbackBeforePCGetConnection = 
-		TestUtil.isDerbyNetClientFramework(); 
-	
 	// DERBY-1183 getCursorName not correct after first statement execution
 	private static boolean hasGetCursorNameBug = TestUtil.isDerbyNetClientFramework();
 	
@@ -181,8 +173,6 @@ protected void runTest(String[] args) throws Exception {
 
 		// this update should be rolled back
 		s.executeUpdate("insert into t values(2)");
-		if (needRollbackBeforePCGetConnection)
-			c1.rollback();
 		
 		c1 = pc.getConnection();
 
@@ -235,8 +225,6 @@ protected void runTest(String[] args) throws Exception {
 
 		// this update should be rolled back
 		s.executeUpdate("insert into t values(2)");
-		if (needRollbackBeforePCGetConnection)
-			c1.rollback();
 		
 		c1 = xac.getConnection();
 
