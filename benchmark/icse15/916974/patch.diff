diff --git a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/cache/JMXAggregatingCacheMBean.java b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/cache/JMXAggregatingCacheMBean.java
index 66b823f9..e69de29b 100644
--- a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/cache/JMXAggregatingCacheMBean.java
+++ b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/cache/JMXAggregatingCacheMBean.java
@@ -1,33 +0,0 @@
-package org.apache.cassandra.cache;
-/*
- * 
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * 
- *   http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- * 
- */
-
-
-public interface JMXAggregatingCacheMBean
-{
-    public int getCapacity();
-    public void setCapacity(int capacity);
-    public int getSize();
-
-    public long getRequests();
-    public long getHits();
-    public double getRecentHitRate();
-}
diff --git a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/tools/NodeProbe.java b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/tools/NodeProbe.java
index 5e0a1c66..b6bf5d48 100644
--- a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/tools/NodeProbe.java
+++ b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/tools/NodeProbe.java
@@ -39,7 +39,6 @@
 import javax.management.remote.JMXConnectorFactory;
 import javax.management.remote.JMXServiceURL;
 
-import org.apache.cassandra.cache.JMXAggregatingCacheMBean;
 import org.apache.cassandra.cache.JMXInstrumentedCacheMBean;
 import org.apache.cassandra.concurrent.IExecutorMBean;
 import org.apache.cassandra.db.ColumnFamilyStoreMBean;
@@ -251,12 +250,12 @@ else if ((rangeMap.size() > 4) && ((counter % 2) != 0))
         }
     }
 
-    public JMXAggregatingCacheMBean getKeyCacheMBean(String tableName, String cfName)
+    public JMXInstrumentedCacheMBean getKeyCacheMBean(String tableName, String cfName)
     {
         String keyCachePath = "org.apache.cassandra.db:type=Caches,keyspace=" + tableName + ",cache=" + cfName + "KeyCache";
         try
         {
-            return JMX.newMBeanProxy(mbeanServerConn, new ObjectName(keyCachePath), JMXAggregatingCacheMBean.class);
+            return JMX.newMBeanProxy(mbeanServerConn, new ObjectName(keyCachePath), JMXInstrumentedCacheMBean.class);
         }
         catch (MalformedObjectNameException e)
         {
@@ -387,7 +386,7 @@ public void setCacheCapacities(String tableName, String cfName, int keyCacheCapa
         try
         {
             String keyCachePath = "org.apache.cassandra.db:type=Caches,keyspace=" + tableName + ",cache=" + cfName + "KeyCache";
-            JMXAggregatingCacheMBean keyCacheMBean = JMX.newMBeanProxy(mbeanServerConn, new ObjectName(keyCachePath), JMXAggregatingCacheMBean.class);
+            JMXInstrumentedCacheMBean keyCacheMBean = JMX.newMBeanProxy(mbeanServerConn, new ObjectName(keyCachePath), JMXInstrumentedCacheMBean.class);
             keyCacheMBean.setCapacity(keyCacheCapacity);
 
             String rowCachePath = "org.apache.cassandra.db:type=Caches,keyspace=" + tableName + ",cache=" + cfName + "RowCache";
