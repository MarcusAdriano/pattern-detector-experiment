diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceProxyGenerator.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceProxyGenerator.java
index 57368da5..be370d03 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceProxyGenerator.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/InterfaceProxyGenerator.java
@@ -55,18 +55,26 @@ public static final Object getProxyInstance(Bundle client, Collection<Class<?>>
     
     ProxyClassLoader pcl = null;
     
+    HashSet<Class<?>> classSet = createSet(ifaces);
+    
     synchronized (cache) {
       WeakReference<ProxyClassLoader> ref = cache.get(client);
       
       if(ref != null)
         pcl = ref.get();
+      
+      if (pcl != null && pcl.isInvalid(classSet)) {
+          pcl = null;
+          cache.remove(client);
+      }
+      
       if(pcl == null) {
         pcl = new ProxyClassLoader(client);
         cache.put(client, new WeakReference<ProxyClassLoader>(pcl));
       }
     }
     
-    Class<?> c = pcl.createProxyClass(createSet(ifaces));
+    Class<?> c = pcl.createProxyClass(classSet);
         
     try {
       Constructor<?> con = c.getDeclaredConstructor(Callable.class, InvocationListener.class);
diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/ProxyClassLoader.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/ProxyClassLoader.java
index 52a25f27..c138505c 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/ProxyClassLoader.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/interfaces/ProxyClassLoader.java
@@ -79,6 +79,23 @@ else if (InvocationListener.class.getName().equals(className))
     return null;
   }
 
+  /**
+   * Test whether the classloader is invalidated by the set of classes
+   * @return
+   */
+  public boolean isInvalid(Set<Class<?>> createSet) {
+      for (Class<?> iface : createSet) {
+          try {
+              Class<?> newIFace = Class.forName(iface.getName(), false, this);
+              if (!!!newIFace.equals(iface)) return true;
+          } catch (ClassNotFoundException cnfe) {
+              return true;
+          }
+      }
+      
+      return false;
+  }
+
   public Class<?> createProxyClass(HashSet<Class<?>> createSet) throws UnableToProxyException {
     
     String className = classes.get(createSet);
diff --git a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/InterfaceProxyingTest.java b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/InterfaceProxyingTest.java
index ec22439b..d0adffd3 100644
--- a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/InterfaceProxyingTest.java
+++ b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/InterfaceProxyingTest.java
@@ -26,6 +26,7 @@
 import static org.junit.Assert.fail;
 
 import java.io.Closeable;
+import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -37,11 +38,15 @@
 import org.apache.aries.blueprint.proxy.AbstractProxyTest.TestListener;
 import org.apache.aries.mocks.BundleMock;
 import org.apache.aries.proxy.impl.interfaces.InterfaceProxyGenerator;
+import org.apache.aries.unittest.mocks.MethodCall;
 import org.apache.aries.unittest.mocks.Skeleton;
+import org.apache.aries.util.ClassLoaderProxy;
 import org.junit.Before;
 import org.junit.Test;
 import org.osgi.framework.Bundle;
 
+import com.ibm.jvm.util.ByteArrayOutputStream;
+
 public class InterfaceProxyingTest {
 
   public final static class TestCallable implements Callable<Object> {
@@ -206,6 +211,51 @@ public void run() {}
       assertEquals(runnable.hashCode(), proxied.hashCode());
   }
   
+  private static class TestClassLoader extends ClassLoader {
+      public TestClassLoader() throws Exception {
+          
+          InputStream is = TestClassLoader.class.getClassLoader().getResourceAsStream("org/apache/aries/blueprint/proxy/TestInterface.class");
+          ByteArrayOutputStream bout = new ByteArrayOutputStream();
+
+          int b;
+          while ((b = is.read()) != -1) {
+              bout.write(b);
+          }
+          
+          is.close();
+          
+          byte[] bytes = bout.toByteArray();
+          defineClass("org.apache.aries.blueprint.proxy.TestInterface", bytes, 0, bytes.length);
+      }
+  }
+  
+  @Test
+  public void testNoStaleProxiesForRefreshedBundle() throws Exception {
+      Bundle bundle = (Bundle) Skeleton.newMock(new Class<?>[] { Bundle.class, ClassLoaderProxy.class });      
+      Skeleton skel = Skeleton.getSkeleton(bundle);
+      
+      TestClassLoader loader = new TestClassLoader();
+      skel.setReturnValue(new MethodCall(ClassLoaderProxy.class, "getClassLoader"), loader);
+      skel.setReturnValue(new MethodCall(Bundle.class, "getLastModified"), 10l);
+      
+      Class<?> clazz = loader.loadClass("org.apache.aries.blueprint.proxy.TestInterface");
+      
+      Object proxy = InterfaceProxyGenerator.getProxyInstance(bundle, Arrays.<Class<?>>asList(clazz), constantly(null), null);
+      assertTrue(clazz.isInstance(proxy));
+      
+      /* Now again but with a changed classloader as if the bundle had refreshed */
+      
+      TestClassLoader loaderToo = new TestClassLoader();
+      skel.setReturnValue(new MethodCall(ClassLoaderProxy.class, "getClassLoader"), loaderToo);
+      skel.setReturnValue(new MethodCall(Bundle.class, "getLastModified"), 20l);
+      
+      Class<?> clazzToo = loaderToo.loadClass("org.apache.aries.blueprint.proxy.TestInterface");
+      
+      Object proxyToo = InterfaceProxyGenerator.getProxyInstance(bundle, Arrays.<Class<?>>asList(clazzToo), constantly(null), null);
+      assertTrue(clazzToo.isInstance(proxyToo));
+  }
+  
+  
   protected void assertCalled(TestListener listener, boolean pre, boolean post, boolean ex) {
     assertEquals(pre, listener.preInvoke);
     assertEquals(post, listener.postInvoke);
diff --git a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/TestInterface.java b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/TestInterface.java
index e69de29b..976da503 100644
--- a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/TestInterface.java
+++ b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/TestInterface.java
@@ -0,0 +1,5 @@
+package org.apache.aries.blueprint.proxy;
+
+public interface TestInterface {
+    public Object call(Object argument);
+}
diff --git a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/util/AriesFrameworkUtil.java b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/util/AriesFrameworkUtil.java
index 86734e67..5311a4c2 100644
--- a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/util/AriesFrameworkUtil.java
+++ b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/util/AriesFrameworkUtil.java
@@ -25,12 +25,12 @@
  */
 public final class AriesFrameworkUtil 
 {
-  
   /**
    * Mock Classloader for testing
    */
   public static ClassLoader getClassLoader(Bundle b) 
   {
+      if (b instanceof ClassLoaderProxy) return ((ClassLoaderProxy) b).getClassLoader();
     return AriesFrameworkUtil.class.getClassLoader();
   }
   
diff --git a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/util/ClassLoaderProxy.java b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/util/ClassLoaderProxy.java
index e69de29b..23004694 100644
--- a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/util/ClassLoaderProxy.java
+++ b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/util/ClassLoaderProxy.java
@@ -0,0 +1,5 @@
+package org.apache.aries.util;
+
+public interface ClassLoaderProxy {
+    ClassLoader getClassLoader();
+}
