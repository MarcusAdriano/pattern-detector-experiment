diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/jdbc/EmbedXAConnection.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/jdbc/EmbedXAConnection.java
index 0b53b720..db193fc4 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/jdbc/EmbedXAConnection.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/jdbc/EmbedXAConnection.java
@@ -206,6 +206,21 @@ public final synchronized void start(Xid xid, int flags) throws XAException
 					if (!realConnection.transactionIsIdle())
 						throw new XAException(XAException.XAER_OUTSIDE);
 
+					// We need to get the isolation level up to date same 
+                    // way as it is done at start of a transaction. Before
+                    // joining the transaction, it is possible that the 
+                    // isolation level was updated using SQL. We need to 
+                    // get this state and store in the connection handle so 
+                    // that we can restore the isolation when we are in the 
+                    // local mode.
+                    try {
+                    	if (currentConnectionHandle != null) {
+                    		currentConnectionHandle.getIsolationUptoDate();
+                    	}
+                	} catch (SQLException sqle) {
+                        throw wrapInXAException(sqle);
+                    }
+
 					closeUnusedConnection(realConnection);
 				}
 				realConnection = tranState.conn;
diff --git a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
index b40298bb..3fddc376 100644
--- a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
+++ b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/checkDataSource.java
@@ -360,6 +360,15 @@ protected void runTest(String[] args) throws Exception {
 		s.executeUpdate("set current isolation = RS");
 		printState("SQL to change isolation in local", cs1);
 
+		// DERBY-1325 - Isolation level of local connection does not get reset after ending 
+		// a global transaction that was joined/resumed if the isolation level was changed 
+		// using SQL 
+		xar.start(xid, XAResource.TMJOIN);
+		printState("1st global(existing)", cs1);
+		xar.end(xid, XAResource.TMSUCCESS);
+		printState("local", cs1);
+		// DERBY-1325 end test 
+		
 		Xid xid2 = new cdsXid(1, (byte) 93, (byte) 103);
 		xar.start(xid2, XAResource.TMNOFLAGS);
 		printState("2nd global(new)", cs1);
