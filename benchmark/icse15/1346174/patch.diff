diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/ConnectionPoolDataSourceConnector.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/ConnectionPoolDataSourceConnector.java
index f9514d73..aef41d79 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/ConnectionPoolDataSourceConnector.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/ConnectionPoolDataSourceConnector.java
@@ -154,6 +154,7 @@ public Connection openConnection(String databaseName,
     public void shutDatabase() throws SQLException {
         singleUseDS( DataSourceConnector.makeShutdownDBAttributes( config ) ).
                 getPooledConnection().getConnection();     
+        config.waitForShutdownComplete(getDatabaseName());
     }
 
     public void shutEngine() throws SQLException {
@@ -163,6 +164,17 @@ public void shutEngine() throws SQLException {
         tmpDs.getPooledConnection();
     }
     
+    public String getDatabaseName() {
+        String databaseName=null;
+        try {
+            // get the physical database name
+            databaseName = (String) JDBCDataSource.getBeanProperty(ds, "databaseName");
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return databaseName;
+    }
+    
     /**
      * Get a connection from a single use ConnectionPoolDataSource configured
      * from the configuration but with the passed in property set.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/Connector.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/Connector.java
index c0e6de00..c4f577ad 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/Connector.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/Connector.java
@@ -86,6 +86,12 @@ abstract Connection openConnection(String databaseName, String user, String pass
         (String databaseName, String user, String password, Properties connectionProperties)
          throws SQLException;
 
+    /**
+     * get the physical databasename in use at this time
+     * @return Name of database
+     */
+    abstract String getDatabaseName();
+    
     /**
      * Shutdown the running default database using user and password
      * defined by the configuration passed to setConfiguration.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DataSourceConnector.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DataSourceConnector.java
index 6e4f99c3..5fb1a014 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DataSourceConnector.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DataSourceConnector.java
@@ -19,6 +19,7 @@
  */
 package org.apache.derbyTesting.junit;
 
+import java.io.File;
 import java.sql.Connection;
 import java.sql.SQLException;
 import java.util.HashMap;
@@ -133,8 +134,10 @@ public Connection openConnection(String databaseName, String user, String passwo
        }
     }
 
+
     public void shutDatabase() throws SQLException {
         singleUseDS( makeShutdownDBAttributes( config ) ).getConnection();     
+        config.waitForShutdownComplete(getDatabaseName());
     }
 
     public void shutEngine() throws SQLException {
@@ -169,4 +172,15 @@ static  HashMap makeShutdownDBAttributes( TestConfiguration configuration )
         return hm;
     }
 
+    public String getDatabaseName() {
+        String databaseName=null;
+        try {
+            // get the physical database name
+            databaseName = (String) JDBCDataSource.getBeanProperty(ds, "databaseName");
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return databaseName;
+    }
+
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java
index 7fc8c1a4..7e71542f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DriverManagerConnector.java
@@ -126,6 +126,7 @@ public Connection openConnection(String databaseName, String user, String passwo
     public void shutDatabase() throws SQLException {
         getConnectionByAttributes(config.getJDBCUrl(),
                 "shutdown", "true");
+        config.waitForShutdownComplete(getDatabaseName());
     }
 
     /**
@@ -163,6 +164,14 @@ private Connection getConnectionByAttributes(String url, String key, String valu
         return DriverManager.getConnection(url, attributes);
     }
 
+    public String getDatabaseName(){
+        // always use the default database name
+        // if this connector is used with other databases, we
+        // might need another method that takes the databasename
+        String databaseName = config.getDefaultDatabaseName();
+        return databaseName;
+    }
+
     /**
      * Load the JDBC driver defined by the JDBCClient for
      * the configuration.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
index 08aba0f4..181f9131 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
@@ -73,6 +73,8 @@
     private final static String DEFAULT_FRAMEWORK = "embedded";
     private final static String DEFAULT_HOSTNAME = "localhost";
 
+    private static final int LOCKFILETIMEOUT = 300000; // 5 mins
+
     /**
      * Maximum number of ports used by Suites.All 
      * If this changes, this constant and the Wiki
@@ -1746,6 +1748,37 @@ public void shutdownEngine()
         }
     }    
 
+    public void waitForShutdownComplete(String physicalDatabaseName) {
+        String path = getDatabasePath(physicalDatabaseName);
+        boolean lockfilepresent = true;
+        int timeout = LOCKFILETIMEOUT; // 5 mins
+        int totalsleep = 0;
+        File lockfile = new File (path + File.separatorChar + "db.lck");
+        File exlockfile = new File (path + File.separatorChar + "dbex.lck");
+        while (lockfilepresent) {
+            if (totalsleep >= timeout)
+            {
+                System.out.println("TestConfigruation.waitForShutdownComplete: " +
+                        "been looping waiting for lock files to be deleted for at least 5 minutes, giving up");
+                break;
+            }
+            if (lockfile.exists() || exlockfile.exists())
+            {
+                // TODO: is it interesting to know whether db.lck or dbex.lck or both is still present?
+                try {
+                    System.out.println("TestConfiguration.waitForShutdownComplete: " +
+                            "db*.lck files not deleted after " + totalsleep + " ms.");
+                    Thread.sleep(1000);
+                    totalsleep=totalsleep+1000;
+                } catch (InterruptedException e) {
+                    e.printStackTrace();
+                }
+            }
+            else
+                lockfilepresent=false;
+        }
+    }
+    
    /**
      * stops the Network server for this configuration.
      *
@@ -2048,4 +2081,16 @@ public final String getPassword(String user)
     {
         return getPassword(user, passwordToken);
     }
+    
+    public final String getDatabasePath(String physicalDatabaseName) 
+    {
+        String dbName = physicalDatabaseName.replace('/', File.separatorChar);
+        String dsh = BaseTestCase.getSystemProperty("derby.system.home");
+        if (dsh == null) {
+            Assert.fail("not implemented");
+        } else {
+            dbName = dsh + File.separator + dbName;
+        }
+        return dbName;
+    }
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/XADataSourceConnector.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/XADataSourceConnector.java
index 27aa30c9..0638f801 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/XADataSourceConnector.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/XADataSourceConnector.java
@@ -138,12 +138,24 @@ public Connection openConnection(String databaseName, String user, String passwo
     public void shutDatabase() throws SQLException {
         singleUseDS( DataSourceConnector.makeShutdownDBAttributes( config ) )
             .getXAConnection().getConnection();     
+        config.waitForShutdownComplete(getDatabaseName());
     }
 
     public void shutEngine() throws SQLException {
         Assert.fail("shutdown engine not implemened");
     }
     
+    public String getDatabaseName() {
+        String databaseName=null;
+        try {
+            // get the physical database name
+            databaseName = (String) JDBCDataSource.getBeanProperty(ds, "databaseName");
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return databaseName;
+    }
+    
     /**
      * Get a connection from a single use XADataSource configured
      * from the configuration but with the passed in property set.
