diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/PropertyConglomerate.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/PropertyConglomerate.java
index d5d23fc8..31557c19 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/PropertyConglomerate.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/PropertyConglomerate.java
@@ -207,7 +207,7 @@
      *
 	 * @param tc        The transaction to do the Conglomerate work under.
      * @param key       The "key" of the property that is being requested.
-     * @param forUpdate Whether we are setting or getting the property.
+     * @param open_mode Whether we are setting or getting the property.
      *
 	 * @exception  StandardException  Standard exception policy.
      **/
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMAccessManager.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMAccessManager.java
index d6c0b670..2ff1bd63 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMAccessManager.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMAccessManager.java
@@ -366,7 +366,7 @@ private void handleConglomidExists(
      * 4 bits into which factory owns the conglomerate.
      * <p>
      *
-     * @param conglomid The conglomerate id of the conglomerate to look up.
+     * @param conglom_id The conglomerate id of the conglomerate to look up.
      *
 	 * @return The ConglomerateFactory which "owns" this conglomerate.
      *
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMTransaction.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMTransaction.java
index aff3072d..32a663b6 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMTransaction.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/RAMTransaction.java
@@ -1484,7 +1484,7 @@ public void compressConglomerate(
     }
 
     /**
-     * Compress table in place
+     * Compress table in place.
      * <p>
      * Returns a GroupFetchScanController which can be used to move rows
      * around in a table, creating a block of free pages at the end of the
@@ -2346,7 +2346,7 @@ public Transaction getRawStoreXact()
      * For some conglomerates this may be a no-op.
      * <p>
      *
-     * @param conglomid Conglomerate id of the conglomerate being changed.
+     * @param conglom   Conglomerate being changed.
      * @param page      Page in the conglomerate being changed.
      *
 	 * @exception  StandardException  Standard exception policy.
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/UTFQualifier.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/UTFQualifier.java
index 43564840..42211fc2 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/UTFQualifier.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/UTFQualifier.java
@@ -64,8 +64,10 @@ public int getOperator() {
 
 	}
 
-	/** Should the result from the compare operation be negated?  If true
-     *  then only rows which fail the compare operation will qualify.
+	/** 
+     *  Determine if the result from the compare operation is to be negated.  
+     *  <p>
+     *  If true then only rows which fail the compare operation will qualify.
      *
      *  @see DataValueDescriptor#compare
      **/
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java
index e6cf7d72..cb2cf55b 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/index/B2IRowLocking3.java
@@ -496,7 +496,6 @@ else if (prev_leaf.isLeftmostLeaf())
      * @param open_btree        The open_btree to associate latches with - 
      *                          used if routine has to scan backward.
      * @param btree             the conglomerate info.
-     * @param leaf              The control row of the current leaf to lock.
      * @param pos               The position of the row to lock.
      * @param request_row_lock  Whether to request the row lock, should
      *                          only be requested once per page in the scan.
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/BinaryOrderableWrapper.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/BinaryOrderableWrapper.java
index 0034e8a1..aa5bd0a2 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/BinaryOrderableWrapper.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/BinaryOrderableWrapper.java
@@ -85,9 +85,6 @@ protected void init (
      * <p>
      *
 	 * @return The identifier to be used to open the conglomerate later.
-     *
-     * @param param1 param1 does this.
-     * @param param2 param2 does this.
      **/
     public int getCmpResult()
     {
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerateController.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerateController.java
index ddd949d7..479cbe3e 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerateController.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericConglomerateController.java
@@ -120,7 +120,7 @@ public void close()
      * RESOLVE (mikem) - move this call to ConglomerateManager so it is
      * obvious that non-access clients should not call this.
      *
-     * @param closeHeldController     If true, means to close controller even if
+     * @param closeHeldScan           If true, means to close controller even if
      *                                it has been opened to be kept opened 
      *                                across commit.  This is
      *                                used to close these controllers on abort.
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericCostController.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericCostController.java
index 51c2b720..734a82ea 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericCostController.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericCostController.java
@@ -271,7 +271,7 @@ public double getFetchFromFullKeyCost(
      *                        conglomerate.  The startKeyValue must only
      *                        reference columns included in the scanColumnList.
      *
-	 * @param startSearchOperation 
+	 * @param startSearchOperator 
      *                        an operator which defines how the startKeyValue
      *                        is to be searched for.  If startSearchOperation 
      *                        is ScanController.GE, the scan starts on the 
@@ -290,7 +290,7 @@ public double getFetchFromFullKeyCost(
      *                        stopKeyValue must only reference columns included
      *                        in the scanColumnList.
      *
-	 * @param stopSearchOperation
+	 * @param stopSearchOperator
      *                        an operator which defines how the stopKeyValue
      *                        is used to determine the scan stopping position. 
      *                        If stopSearchOperation is ScanController.GE, the
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericScanController.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericScanController.java
index d7d7e48a..33da0050 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericScanController.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericScanController.java
@@ -849,7 +849,7 @@ the current scan had been closed and a openScan() had been called instead.
     inserting more data, then continuing the scan is not guaranteed to see
     the new rows - they may be put in the "beginning" of the heap.
 
-	@param startRowLocation  An existing RowLocation within the conglomerate,
+	@param startRecordHandle  An existing RecordHandle within the conglomerate,
     at which to position the start of the scan.  The scan will begin at this
     location and continue forward until the end of the conglomerate.  
     Positioning at a non-existent RowLocation (ie. an invalid one or one that
@@ -1240,25 +1240,15 @@ the current scan had been closed and a openScan() had been called instead.
     is reopened with the same "hold" and "forUpdate" parameters passed in
     the original openScan.  The previous template row continues to be used.
 
-    @param template A prototypical row which the scan may use ot
-	maintain its position in the conglomerate.  Not all access method
-	scan types will require this, if they don't it's ok to pass in null.
-    In order to scan a conglomerate one must allocate 2 separate "row"
-    templates.  The "row" template passed into openScan is for the private
-    use of the scan itself, and no access to it should be made
-    by the caller while the scan is still open.  Because of this the 
-    scanner must allocate another "row" template to hold the values returned 
-    from fetch().
-
 	@param startKeyValue  An indexable row which holds a 
 	(partial) key value which, in combination with the
 	startSearchOperator, defines the starting position of
 	the scan.  If null, the starting position of the scan
 	is the first row of the conglomerate.
 	
-	@param startSearchOperation an operator which defines
+	@param startSearchOperator an operator which defines
 	how the startKeyValue is to be searched for.  If 
-    startSearchOperation is ScanController.GE, the scan starts on
+    startSearchOperator is ScanController.GE, the scan starts on
 	the first row which is greater than or equal to the 
 	startKeyValue.  If startSearchOperation is ScanController.GT,
 	the scan starts on the first row whose key is greater than
@@ -1276,7 +1266,7 @@ from fetch().
 	the scan.  If null, the ending position of the scan
 	is the last row of the conglomerate.
 	
-	@param stopSearchOperation an operator which defines
+	@param stopSearchOperator an operator which defines
 	how the stopKeyValue is used to determine the scan stopping
 	position. If stopSearchOperation is ScanController.GE, the scan 
 	stops just before the first row which is greater than or
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/TemplateRow.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/TemplateRow.java
index b258522c..9dd282fe 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/TemplateRow.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/TemplateRow.java
@@ -52,12 +52,14 @@ private TemplateRow() {
      * Allocate new objects to array based on format id's and column_list.
      * <p>
      *
-     * @param column_list description of partial set of columns to built as
-     *                    described in RowUtil.  If null do all the columns.
-     * @param format_ids  An array of format ids representing every column
-     *                    in the table.  column_list describes which of these
-     *                    columns to populate into the columns array.
-     * @param columns     The array to place the newly allocated objects into.
+     * @param num_cols_to_allocate  The number of columns to allocate for array.
+     * @param column_list           description of partial set of columns to 
+     *                              built as described in RowUtil.  If null do 
+     *                              all the columns.
+     * @param format_ids            An array of format ids representing every 
+     *                              column in the table.  column_list describes
+     *                              which of these columns to populate into the 
+     *                              columns array.
      *
 	 * @exception  StandardException  Standard exception policy.
      **/
@@ -142,16 +144,13 @@ private TemplateRow() {
      * the Monitor.
      * <p>
      *
-	 * @return The new row.
-     *
-     * @param column_list   A column list as described in RowUtil. Describes
-     *                      which columns to pick out of the template and put
-     *                      into returned newRow.  If null just pick all of
-     *                      them.
      *
-     * @param format_ids an array of format id's, one per column in row.
+     * @param template      An array which represents a row as described in
+     *                      RowUtil.
      *
 	 * @exception  StandardException  Standard exception policy.
+     *
+	 * @return The new row.
      *
      * @see RowUtil
      **/
