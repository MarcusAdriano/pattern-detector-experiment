diff --git a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java
index fead493d..cc64fb3e 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java
@@ -74,6 +74,8 @@ public PooledConnection getPooledConnection() throws SQLException {
         LogWriter dncLogWriter = null;
         try
         {
+            updateDataSourceValues(
+                    tokenizeAttributes(getConnectionAttributes(), null));
             dncLogWriter = super.computeDncLogWriterForNewConnection("_cpds");
             if (dncLogWriter != null) {
                 dncLogWriter.traceEntry(this, "getPooledConnection");
@@ -98,6 +100,8 @@ public PooledConnection getPooledConnection(String user, String password) throws
         LogWriter dncLogWriter = null;
         try
         {
+            updateDataSourceValues(
+                    tokenizeAttributes(getConnectionAttributes(), null));
             dncLogWriter = super.computeDncLogWriterForNewConnection("_cpds");
             if (dncLogWriter != null) {
                 dncLogWriter.traceEntry(this, "getPooledConnection", user, "<escaped>");
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientDataSource.java b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientDataSource.java
index 97a4696b..2a54c65f 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientDataSource.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientDataSource.java
@@ -25,12 +25,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.SQLException;
 import javax.sql.DataSource;
 
-import org.apache.derby.client.am.ClientMessageId;
 import org.apache.derby.client.am.LogWriter;
 import org.apache.derby.client.am.SqlException;
-import org.apache.derby.client.net.NetConnection;
 import org.apache.derby.client.net.NetLogWriter;
-import org.apache.derby.shared.common.error.ExceptionUtil;
 
 /**
  * ClientDataSource is a simple data source implementation
@@ -162,7 +159,18 @@ public ClientDataSource() {
      * @throws java.sql.SQLException if a database-access error occurs.
      */
     public Connection getConnection() throws SQLException {
-        return getConnection(getUser(), getPassword());
+        LogWriter dncLogWriter = null;
+        try {
+            updateDataSourceValues(
+                    tokenizeAttributes(getConnectionAttributes(), null));
+            dncLogWriter = super.computeDncLogWriterForNewConnection("_sds");
+            return getConnectionX(dncLogWriter, getUser(), getPassword());
+        } catch (SqlException se) {
+            // The method below may throw an exception.
+            handleConnectionException(dncLogWriter, se);
+            // If the exception wasn't handled so far, re-throw it.
+            throw se.getSQLException();
+        }
     }
 
     /**
@@ -184,11 +192,10 @@ public Connection getConnection(String user, String password) throws SQLExceptio
         LogWriter dncLogWriter = null;
         try
         {
+            updateDataSourceValues(
+                    tokenizeAttributes(getConnectionAttributes(), null));
             dncLogWriter = super.computeDncLogWriterForNewConnection("_sds");
-            updateDataSourceValues(tokenizeAttributes(getConnectionAttributes(), null));
-            return ClientDriver.getFactory().newNetConnection
-                    ((NetLogWriter) dncLogWriter, user,
-                    password, this, -1, false);
+            return getConnectionX(dncLogWriter, user, password);
         }
         catch(SqlException se)
         {
@@ -200,5 +207,12 @@ public Connection getConnection(String user, String password) throws SQLExceptio
         
     }
 
+    private Connection getConnectionX(LogWriter dncLogWriter,
+                                      String user, String password)
+            throws SqlException {
+        return ClientDriver.getFactory().newNetConnection(
+                (NetLogWriter)dncLogWriter, user, password, this, -1, false);
+
+    }
 }
 
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource.java b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource.java
index 1ad9bc5c..72c9d1ae 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource.java
@@ -22,11 +22,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.jdbc;
 
 import java.sql.SQLException;
-import javax.sql.DataSource;
 import javax.sql.XAConnection;
 import javax.sql.XADataSource;
 
-import org.apache.derby.client.ClientXAConnection;
 import org.apache.derby.client.net.NetLogWriter;
 import org.apache.derby.client.am.LogWriter;
 import org.apache.derby.client.am.SqlException;
@@ -62,13 +60,28 @@ public ClientXADataSource() {
     }
 
     public XAConnection getXAConnection() throws SQLException {
-        return getXAConnection(getUser(), getPassword());
+        NetLogWriter dncLogWriter = null;
+        try {
+            updateDataSourceValues(
+                    tokenizeAttributes(getConnectionAttributes(), null));
+            dncLogWriter = (NetLogWriter)
+                    super.computeDncLogWriterForNewConnection("_xads");
+            return getXAConnectionX(
+                    dncLogWriter, this, getUser(), getPassword());
+        } catch (SqlException se) {
+            // The method below may throw an exception.
+            handleConnectionException(dncLogWriter, se);
+            // If the exception wasn't handled so far, re-throw it.
+            throw se.getSQLException();
+        }
     }
 
     public XAConnection getXAConnection(String user, String password) throws SQLException {
         NetLogWriter dncLogWriter = null;
         try
         {
+            updateDataSourceValues(
+                    tokenizeAttributes(getConnectionAttributes(), null));
             dncLogWriter = (NetLogWriter)
                     super.computeDncLogWriterForNewConnection("_xads");
             return getXAConnectionX(dncLogWriter, this, user, password);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java
index eabb0706..216723c2 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java
@@ -176,9 +176,8 @@ private static Test getClientSuite() {
         suite.addTest(new J2EEDataSourceTest("testClientDSConnectionAttributes"));
         suite.addTest(new J2EEDataSourceTest(
                 "testClientTraceFileDSConnectionAttribute"));
-        //DISABLED until DERBY-4067 is fixed.
-        //suite.addTest(new J2EEDataSourceTest(
-        //        "testClientMessageTextConnectionAttribute"));
+        suite.addTest(new J2EEDataSourceTest(
+                "testClientMessageTextConnectionAttribute"));
         suite.addTest(new J2EEDataSourceTest("testConnectionFlowCommit"));
         suite.addTest(new J2EEDataSourceTest("testConnectionFlowCommitAlt"));
         // Disabled because rollback flow optimization hasn't been implemented.
@@ -2889,15 +2888,9 @@ private static void assertTraceFilesExistAndCanBeDeleted()
             public Object run() {
                 for (int i=3 ; i <= 6 ; i++) {
                     File traceFile = new File("trace" + i + ".out");
-                    // Skip trace 3 and 5 until DERBY-2468/DERBY-4067 is fixed.
-                    if (i == 3 || i == 5)
-                        continue;
-                    else
-                    {
                         assertTrue("Doesn't exist", traceFile.exists());
                         assertTrue("Delete failed", traceFile.delete());
                     }
-                } 
                 return null;
             }
         });
@@ -2913,7 +2906,6 @@ public Object run() {
      * There is a corresponding fixture for clientDataSource in DataSourceTest
      *  
      * @throws SQLException
-     * NOTE: DISABLED until DERBY-4067 is fixed.
      */
     public void testClientMessageTextConnectionAttribute() throws SQLException
     {
