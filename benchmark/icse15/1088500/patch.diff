diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java
index b676cda1..175390d5 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java
@@ -1556,8 +1556,9 @@ private Savepoint setSavepointX(Savepoint savepoint) throws SQLException {
                 savepointName = dncGeneratedSavepointNamePrefix__ +
                         savepoint.getSavepointId();
             }
-            String sql = "SAVEPOINT \"" + savepointName + "\" ON ROLLBACK RETAIN CURSORS";
-            stmt.executeX(sql);
+            stmt.executeX(
+                    "SAVEPOINT " + Utils.quoteSqlIdentifier(savepointName) +
+                    " ON ROLLBACK RETAIN CURSORS");
         } catch ( SqlException se )
         {
             throw se.getSQLException();
@@ -1615,8 +1616,9 @@ synchronized public void rollback(java.sql.Savepoint savepoint) throws SQLExcept
                     savepointName = dncGeneratedSavepointNamePrefix__ +
                             ((Savepoint) savepoint).getSavepointId();
                 }
-                String sql = "ROLLBACK TO SAVEPOINT \"" + savepointName + "\"";
-                stmt.executeX(sql);
+                stmt.executeX(
+                        "ROLLBACK TO SAVEPOINT " +
+                        Utils.quoteSqlIdentifier(savepointName));
             } finally {
                 if (stmt != null) {
                     try {
@@ -1676,8 +1678,9 @@ synchronized public void releaseSavepoint(java.sql.Savepoint savepoint) throws S
                     savepointName = dncGeneratedSavepointNamePrefix__ +
                             ((Savepoint) savepoint).getSavepointId();
                 }
-                String sql = "RELEASE SAVEPOINT \"" + savepointName + "\"";
-                stmt.executeX(sql);
+                stmt.executeX(
+                        "RELEASE SAVEPOINT " +
+                        Utils.quoteSqlIdentifier(savepointName));
             } finally {
                 if (stmt != null) {
                     try {
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
index 546e19eb..1760f92b 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
@@ -4532,7 +4532,7 @@ private String buildInsertString() throws SqlException {
             }
             //using quotes around the column name to preserve case sensitivity
             try {
-                insertSQL.append(quoteSqlIdentifier(
+                insertSQL.append(Utils.quoteSqlIdentifier(
                         resultSetMetaData_.getColumnName(column)));
             } catch ( SQLException sqle ) {
                 throw new SqlException(sqle);
@@ -4567,7 +4567,7 @@ private String buildUpdateString() throws SqlException {
                     updateString.append(",");
                 }
                 try {
-                    updateString.append(quoteSqlIdentifier(
+                    updateString.append(Utils.quoteSqlIdentifier(
                             resultSetMetaData_.getColumnName(column))).append(" = ? ");
                 } catch ( SQLException sqle ) {
                     throw new SqlException(sqle);
@@ -4632,29 +4632,16 @@ private String getTableName() throws SqlException {
 
         //dervied column like select 2 from t1, has null schema and table name
         if (resultSetMetaData_.sqlxSchema_[baseTableColumn] != null && !resultSetMetaData_.sqlxSchema_[baseTableColumn].equals("")) {
-            tableName += quoteSqlIdentifier(
+            tableName += Utils.quoteSqlIdentifier(
                     resultSetMetaData_.sqlxSchema_[baseTableColumn]) + ".";
         }
         if (resultSetMetaData_.sqlxBasename_[baseTableColumn] != null) {
-            tableName += quoteSqlIdentifier(
+            tableName += Utils.quoteSqlIdentifier(
                     resultSetMetaData_.sqlxBasename_[baseTableColumn]);
         }
         return tableName;
     }
 
-    private String quoteSqlIdentifier(String orgValue) {
-        int i = 0, start = 0;
-        StringBuffer retValue = new StringBuffer();
-        retValue.append("\"");
-        while ((i = orgValue.indexOf("\"", start) + 1) > 0) {
-            retValue.append(orgValue.substring(start, i)).append("\"");
-            start = i;
-        }
-        retValue.append(orgValue.substring(start, orgValue.length()));
-        retValue.append("\"");
-        return retValue.toString();
-    }
-    
     private String getServerCursorName() throws SqlException {
         return statement_.section_.getServerCursorName();
     }
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Utils.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Utils.java
index 7324aa42..007ac34a 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Utils.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Utils.java
@@ -29,6 +29,37 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 public final class Utils {
 
+    /**
+     * Quote an SQL identifier by enclosing it in double-quote characters
+     * and escaping any double-quote characters with an extra double-quote
+     * character.
+     *
+     * @param identifier the identifier to quote
+     * @return the quoted identifier
+     */
+    static String quoteSqlIdentifier(String identifier) {
+        // In the common case the length of the return value is the length of
+        // the identifier plus the two surrounding double quotes. Use that as
+        // the initial capacity of the buffer.
+        StringBuffer retValue = new StringBuffer(identifier.length() + 2);
+
+        final char quote = '"';
+
+        retValue.append(quote);
+
+        for (int i = 0; i < identifier.length(); i++) {
+            char ch = identifier.charAt(i);
+            if (ch == quote) {
+                retValue.append(quote);
+            }
+            retValue.append(ch);
+        }
+
+        retValue.append(quote);
+
+        return retValue.toString();
+    }
+
     static String getStringFromBytes(byte[] bytes) {
         if (bytes == null) {
             return "{}";
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SavepointJdbc30Test.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SavepointJdbc30Test.java
index 1d038696..8cc0da6e 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SavepointJdbc30Test.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SavepointJdbc30Test.java
@@ -898,6 +898,30 @@ public void testReleaseNullSavepoint() throws SQLException {
         }
     }
 
+    /**
+     * Test that savepoint names can have double-quote characters. The client
+     * driver used to fail with a syntax error when the names contained such
+     * characters. DERBY-5170.
+     */
+    public void testQuotes() throws SQLException {
+        setAutoCommit(false);
+        Statement s = createStatement();
+        s.execute("create table test_quotes(x int)");
+        s.execute("insert into test_quotes values 1");
+
+        Savepoint sp = getConnection().setSavepoint("a \" b ' c");
+
+        s.execute("insert into test_quotes values 2");
+
+        getConnection().rollback(sp);
+
+        JDBC.assertSingleValueResultSet(
+                s.executeQuery("select * from test_quotes"),
+                "1");
+
+        getConnection().releaseSavepoint(sp);
+    }
+
     /** ********************* */
 
     /*
