diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java
index 0daa28c0..7c6a41a9 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java
@@ -37,6 +37,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.types.TypeId;
 import org.apache.derby.iapi.types.DataTypeDescriptor;
+import org.apache.derby.iapi.types.StringDataValue;
 
 import org.apache.derby.iapi.reference.SQLState;
 
@@ -212,7 +213,38 @@ public void checkExistingConstraints(TableDescriptor td)
 				getCompilerContext().createDependency(existingConstraint);
 			}
 		}
+    }
 
+	/**
+	 * If the column being modified is of character string type, then it should
+	 * get it's collation from the corresponding column in the TableDescriptor.
+	 * This will ensure that at alter table time, the existing character string
+	 * type columns do not loose their collation type. If the alter table is 
+	 * doing a drop column, then we do not need to worry about collation info.
+	 * 
+	 * @param td Table Descriptor that holds the column which is being altered
+	 * @throws StandardException
+	 */
+	public void useExistingCollation(TableDescriptor td)
+    throws StandardException
+    {
+		ColumnDescriptor cd;
+
+		// First verify that the column exists
+		cd = td.getColumnDescriptor(name);
+		if (cd == null)
+		{
+			throw StandardException.newException(SQLState.LANG_COLUMN_NOT_FOUND_IN_TABLE, name, td.getName());
+		}
+		//getType() == null means we are dealing with drop column and hence 
+		//no need to worry about collation info
+		if (getDataTypeServices() != null) {
+			if (getDataTypeServices().getTypeId().isStringTypeId()) {
+				this.getDataTypeServices().setCollationType(cd.getType().getCollationType());
+				this.getDataTypeServices().setCollationDerivation(StringDataValue.COLLATION_DERIVATION_IMPLICIT);
+			
+			}
+		}
 	}
 	/**
 	 * Get the action associated with this node.
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/TableElementList.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/TableElementList.java
index 6705957e..f7347db1 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/TableElementList.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/TableElementList.java
@@ -204,6 +204,7 @@ void validate(DDLStatementNode ddlStmt,
 				{
 					ModifyColumnNode mcdn = (ModifyColumnNode)cdn;
 					mcdn.checkExistingConstraints(td);
+					mcdn.useExistingCollation(td);
 				} else if (cdn.isAutoincrementColumn())
 					numAutoCols ++;
 			}
diff --git a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
index 97e3a1e8..ffc7521d 100644
--- a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
+++ b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
@@ -986,6 +986,14 @@ private void commonTestingForTerritoryBasedDB(Statement s) throws SQLException{
     rs.close();
     ps.close();
 
+    //DERBY-2973
+    //alter table modify column should not give an error
+    s.execute("CREATE TABLE DERBY_2973 (V VARCHAR(40))");
+    s.execute("CREATE INDEX DERBY_2973_I1 ON DERBY_2973 (V)");
+    s.execute("ALTER TABLE DERBY_2973 ALTER V SET DATA TYPE VARCHAR(4096)");
+    s.execute("INSERT INTO DERBY_2973 VALUES('hello')");
+    s.close();
+ 
 }
 
 private void setUpTable(Statement s) throws SQLException {
