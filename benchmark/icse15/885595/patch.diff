diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java
index 72fe17ee..e8010207 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java
@@ -295,8 +295,18 @@ public void bindStatement() throws StandardException
 				" on return from RS.bindExpressions()");
 		}
 
-		/* Replace any DEFAULTs with the associated tree */
-		resultSet.replaceDefaults(targetTableDescriptor, targetColumnList);
+        /* Replace any DEFAULTs with the associated tree, or flag DEFAULTs if
+         * not allowed (inside top level set operator nodes). Subqueries are
+         * checked for illegal DEFAULTs elsewhere.
+         */
+        boolean isTableConstructor =
+            (resultSet instanceof UnionNode &&
+             ((UnionNode)resultSet).tableConstructor()) ||
+            resultSet instanceof RowResultSetNode;
+
+        resultSet.replaceOrForbidDefaults(targetTableDescriptor,
+                                          targetColumnList,
+                                          isTableConstructor);
 
 		/* Bind the expressions now that the result columns are bound 
 		 * NOTE: This will be the 2nd time for those underlying ResultSets
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
index 6e4c355d..9b3509ad 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
@@ -3864,14 +3864,18 @@ boolean reusableResult()
 	}
 
 	/**
-	 * Replace any DEFAULTs with the associated tree for the default.
+	 * Replace any DEFAULTs with the associated tree for the default if
+	 * allowed, or flag.
 	 *
 	 * @param ttd	The TableDescriptor for the target table.
 	 * @param tcl	The RCL for the target table.
+     * @param allowDefaults true if allowed
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
-	void replaceDefaults(TableDescriptor ttd, ResultColumnList tcl) 
+	void replaceOrForbidDefaults(TableDescriptor ttd,
+                                 ResultColumnList tcl,
+                                 boolean allowDefaults)
 		throws StandardException
 	{
 		int size = size();
@@ -3882,6 +3886,11 @@ void replaceDefaults(TableDescriptor ttd, ResultColumnList tcl)
 
 			if (rc.isDefaultColumn())
 			{
+                if (!allowDefaults) {
+                    throw StandardException.newException(
+                        SQLState.LANG_INVALID_USE_OF_DEFAULT);
+                }
+
 				//				DefaultNode defaultNode = (DefaultNode) rc.getExpression();
 				// Get ColumnDescriptor by name or by position?
 				ColumnDescriptor cd;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
index e0697f04..5a39ff13 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
@@ -1764,17 +1764,26 @@ boolean returnsAtMostOneRow()
 	}
 
 	/**
-	 * Replace any DEFAULTs with the associated tree for the default.
+     * Replace any DEFAULTs with the associated tree for the default if
+     * allowed, or flag (when inside top level set operator nodes). Subqueries
+     * are checked for illegal DEFAULTs elsewhere.
 	 *
 	 * @param ttd	The TableDescriptor for the target table.
 	 * @param tcl	The RCL for the target table.
+     * @param allowDefaults true if allowed
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
-	void replaceDefaults(TableDescriptor ttd, ResultColumnList tcl) 
+    void replaceOrForbidDefaults(TableDescriptor ttd,
+                                 ResultColumnList tcl,
+                                 boolean allowDefaults)
 		throws StandardException
 	{
-		// Only subclasses with something to do override this.
+        if (SanityManager.DEBUG) {
+            SanityManager.THROWASSERT(
+                "replaceOrForbidDefaults() not expected to be called for " +
+                this.getClass().getName());
+        }
 	}
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java
index f1a4021a..87a1d3f4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java
@@ -853,17 +853,14 @@ public void generate(ActivationClassBuilder acb,
 	}
 
 	/**
-	 * Replace any DEFAULTs with the associated tree for the default.
-	 *
-	 * @param ttd	The TableDescriptor for the target table.
-	 * @param tcl	The RCL for the target table.
-	 *
-	 * @exception StandardException		Thrown on error
+     * {@inheritDoc}
 	 */
-	void replaceDefaults(TableDescriptor ttd, ResultColumnList tcl) 
+	void replaceOrForbidDefaults(TableDescriptor ttd,
+                                 ResultColumnList tcl,
+                                 boolean allowDefaults)
 		throws StandardException
 	{
-		resultColumns.replaceDefaults(ttd, tcl);
+		resultColumns.replaceOrForbidDefaults(ttd, tcl, allowDefaults);
 	}
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
index b62832b1..df0c2318 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
@@ -2423,4 +2423,16 @@ public static void checkNoWindowFunctions(QueryTreeNode clause,
 				clauseName);
 		}
 	}
+
+    /**
+     * {@inheritDoc}
+     *
+     * A no-op for SelectNode.
+     */
+    void replaceOrForbidDefaults(TableDescriptor ttd,
+                                 ResultColumnList tcl,
+                                 boolean allowDefaults)
+        throws StandardException
+    {
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java
index 1f9cac2a..4754a8b5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SetOperatorNode.java
@@ -687,6 +687,19 @@ public void bindUntypedNullsToResultColumns(ResultColumnList rcl)
 	}
 
 	/**
+     * {@inheritDoc}
+     */
+    void replaceOrForbidDefaults(TableDescriptor ttd,
+                                 ResultColumnList tcl,
+                                 boolean allowDefaults)
+        throws StandardException
+    {
+        leftResultSet.replaceOrForbidDefaults(ttd, tcl, allowDefaults);
+        rightResultSet.replaceOrForbidDefaults(ttd, tcl, allowDefaults);
+    }
+
+
+    /**
 	 * Get the parameter types from the given RowResultSetNode into the
 	 * given array of types.  If an array position is already filled in,
 	 * don't clobber it.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java
index 14fe4f6b..0b818d7c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SingleChildResultSetNode.java
@@ -554,20 +554,6 @@ protected boolean reflectionNeededForProjection()
 		return ! (resultColumns.allExpressionsAreColumns(childResult));
 	}
 
-	/**
-	 * Replace any DEFAULTs with the associated tree for the default.
-	 *
-	 * @param ttd	The TableDescriptor for the target table.
-	 * @param tcl	The RCL for the target table.
-	 *
-	 * @exception StandardException		Thrown on error
-	 */
-	void replaceDefaults(TableDescriptor ttd, ResultColumnList tcl) 
-		throws StandardException
-	{
-		childResult.replaceDefaults(ttd, tcl);
-	}
-
 	/**
 	 * @see ResultSetNode#adjustForSortElimination
 	 */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java
index d06378c3..2cdf2fde 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableOperatorNode.java
@@ -928,21 +928,6 @@ void decrementLevel(int decrement)
 		rightResultSet.decrementLevel(decrement);
 	}
 
-	/**
-	 * Replace any DEFAULTs with the associated tree for the default.
-	 *
-	 * @param ttd	The TableDescriptor for the target table.
-	 * @param tcl	The RCL for the target table.
-	 *
-	 * @exception StandardException		Thrown on error
-	 */
-	void replaceDefaults(TableDescriptor ttd, ResultColumnList tcl) 
-		throws StandardException
-	{
-		leftResultSet.replaceDefaults(ttd, tcl);
-		rightResultSet.replaceDefaults(ttd, tcl);
-	}
-
 	/**
 	 * @see ResultSetNode#adjustForSortElimination
 	 */
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ColumnDefaultsTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ColumnDefaultsTest.java
index 08b6bdf8..579fdc8f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ColumnDefaultsTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ColumnDefaultsTest.java
@@ -145,6 +145,18 @@ public void testNegativeTestsForColumnDefaults() throws Exception
         assertStatementError("42802", st,
             " insert into neg values (default, 1)");
         
+
+        // DERBY-4426
+        assertStatementError("42Y85", st,
+            " insert into neg values (default) union values (default)");
+
+        assertStatementError("42Y85", st,
+            " insert into neg values (default) except values (default)");
+
+        // Make sure sub-queries are inspected for illegal DEFAULT also.
+        assertStatementError("42Y85", st,
+            " insert into neg select * from (values default) t");
+
         st.executeUpdate( " drop table neg");
         
         st.executeUpdate( "drop function asdf");
@@ -403,6 +415,20 @@ public void testPositiveTestsForColumnDefaults()
         
         JDBC.assertFullResultSet(rs, expRS, true);
         
+        // DERBY-4426: make sure we don't forbid inside a multi-value table
+        // constructor since this is represented as a UnionNode
+        st.executeUpdate( "delete from t7");
+        st.executeUpdate( "insert into t7 values 1, default");
+        rs = st.executeQuery( " select * from t7");
+
+        expRS = new String [][]
+        {
+            {"1"},
+            {"10"}
+        };
+
+        JDBC.assertFullResultSet(rs, expRS, true);
+
         st.executeUpdate( " drop table t1");
         
         st.executeUpdate( " drop table t7");
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java
index 7dc1cd11..56b41e52 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsHelper.java
@@ -87,6 +87,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     protected static  final   String  CASCADED_COLUMN_DROP_WARNING = "01009";
     protected static  final   String  CONSTRAINT_DROPPED_WARNING = "01500";
     protected static  final   String  TRIGGER_DROPPED_WARNING = "01502";
+    protected static  final   String  LANG_INVALID_USE_OF_DEFAULT = "42Y85";
     
     ///////////////////////////////////////////////////////////////////////////////////
     //
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
index faafbe91..3d46b2ce 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GeneratedColumnsTest.java
@@ -233,6 +233,43 @@ public void testDerby_4448_4451() throws SQLException {
         rollback();
     }
 
+
+    /**
+     * Test for DERBY-4426
+     */
+    public void testDerby_4426() throws SQLException {
+
+        Statement s = createStatement();
+        ResultSet rs = null;
+        setAutoCommit(false);
+
+        s.execute("create table t(a int, b generated always as (-a))");
+        s.execute("insert into t(b,a) values (default,1)");
+
+        // Wrong use of default
+        expectCompilationError
+            (
+             LANG_INVALID_USE_OF_DEFAULT,
+             "insert into t(b,a) values (default,3) intersect " +
+             "                   values (default,3)"
+             );
+
+        expectCompilationError
+            (
+             LANG_INVALID_USE_OF_DEFAULT,
+             "insert into t(a,b) values (3,default) except values (3,default)"
+             );
+
+        expectCompilationError
+            (
+             LANG_INVALID_USE_OF_DEFAULT,
+             "insert into t values (3,default) union values (3,default)"
+             );
+
+
+        rollback();
+    }
+
     /**
      * <p>
      * Test that the stored system procedures and functions are non-deterministic. If you want
