diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/IndexSchema.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
index 31c38ded..e8aa3600 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
@@ -740,7 +740,20 @@ public void registerCopyField(String source, String dest, int maxChars) {
     boolean sourceIsDynamicFieldReference = false;
     boolean sourceIsExplicitFieldGlob = false;
     
-    if (null == sourceSchemaField && isValidFieldGlob(source)) {
+
+    final String invalidGlobMessage = "is an invalid glob: either it contains more than one asterisk,"
+                                    + " or the asterisk occurs neither at the start nor at the end.";
+    final boolean sourceIsGlob = isValidFieldGlob(source);
+    if (source.contains("*") && ! sourceIsGlob) {
+      String msg = "copyField source :'" + source + "' " + invalidGlobMessage;
+      throw new SolrException(ErrorCode.SERVER_ERROR, msg);
+    }
+    if (dest.contains("*") && ! isValidFieldGlob(dest)) {
+      String msg = "copyField dest :'" + dest + "' " + invalidGlobMessage;
+      throw new SolrException(ErrorCode.SERVER_ERROR, msg);
+    }
+
+    if (null == sourceSchemaField && sourceIsGlob) {
       Pattern pattern = Pattern.compile(source.replace("*", ".*")); // glob->regex
       for (String field : fields.keySet()) {
         if (pattern.matcher(field).matches()) {
@@ -777,19 +790,19 @@ public void registerCopyField(String source, String dest, int maxChars) {
         }
       }
     }
-    if (null == sourceSchemaField && ! sourceIsDynamicFieldReference && ! sourceIsExplicitFieldGlob) {
-      String msg = "copyField source :'" + source + "' doesn't match any explicit field or dynamicField.";
+    if (null == sourceSchemaField && ! sourceIsGlob && ! sourceIsDynamicFieldReference) {
+      String msg = "copyField source :'" + source + "' is not a glob and doesn't match any explicit field or dynamicField.";
       throw new SolrException(ErrorCode.SERVER_ERROR, msg);
     }
     if (null == destSchemaField) {
       String msg = "copyField dest :'" + dest + "' is not an explicit field and doesn't match a dynamicField.";
       throw new SolrException(ErrorCode.SERVER_ERROR, msg);
     }
-    if (sourceIsDynamicFieldReference || sourceIsExplicitFieldGlob) {
-      if (null != destDynamicField) { // source: dynamic field ref or explicit field glob; dest: dynamic field ref
+    if (sourceIsDynamicFieldReference || sourceIsGlob) {
+      if (null != destDynamicField) { // source: glob or no-asterisk dynamic field ref; dest: dynamic field ref
         registerDynamicCopyField(new DynamicCopy(source, destDynamicField, maxChars, sourceDynamicBase, destDynamicBase));
         incrementCopyFieldTargetCount(destSchemaField);
-      } else {                        // source: dynamic field reference; dest: explicit field
+      } else {                        // source: glob or no-asterisk dynamic field ref; dest: explicit field
         destDynamicField = new DynamicField(destSchemaField);
         registerDynamicCopyField(new DynamicCopy(source, destDynamicField, maxChars, sourceDynamicBase, null));
         incrementCopyFieldTargetCount(destSchemaField);
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/BadCopyFieldTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/BadCopyFieldTest.java
index e69de29b..01711434 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/BadCopyFieldTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/BadCopyFieldTest.java
@@ -0,0 +1,85 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.schema;
+
+import org.apache.solr.SolrTestCaseJ4;
+import org.junit.Test;
+
+/**
+ * SOLR-4650: copyField source with no asterisk should trigger an error if it doesn't match an explicit or dynamic field 
+ */
+public class BadCopyFieldTest extends SolrTestCaseJ4 {
+ 
+  @Test
+  public void testNonGlobCopyFieldSourceMatchingNothingShouldFail() {
+    try {
+      initCore("solrconfig.xml","bad-schema-non-glob-copyfield-source-matching-nothing-should-fail-test.xml");
+    } catch (Exception e) {
+      assertEquals
+          ("copyField source :'matches_nothing' is not a glob and doesn't match any explicit field or dynamicField.", 
+           e.getMessage());
+    }
+  }
+
+  @Test
+  public void testMultipleAsteriskCopyFieldSourceShouldFail() {
+    try {
+      initCore("solrconfig.xml","bad-schema-multiple-asterisk-copyfield-source-should-fail-test.xml");
+    } catch (Exception e) {
+      assertEquals
+          ("copyField source :'*too_many_asterisks*' is an invalid glob: either it contains more than one asterisk,"
+          +" or the asterisk occurs neither at the start nor at the end.",
+           e.getMessage());
+    }
+  }
+
+  @Test
+  public void testMisplacedAsteriskCopyFieldSourceShouldFail() {
+    try {
+      initCore("solrconfig.xml","bad-schema-misplaced-asterisk-copyfield-source-should-fail-test.xml");
+    } catch (Exception e) {
+      assertEquals
+          ("copyField source :'misplaced_*_asterisk' is an invalid glob: either it contains more than one asterisk,"
+          +" or the asterisk occurs neither at the start nor at the end.",
+           e.getMessage());
+    }
+  }
+
+  public void testMultipleAsteriskCopyFieldDestShouldFail() {
+    try {
+      initCore("solrconfig.xml","bad-schema-multiple-asterisk-copyfield-dest-should-fail-test.xml");
+    } catch (Exception e) {
+      assertEquals
+          ("copyField dest :'*too_many_asterisks*' is an invalid glob: either it contains more than one asterisk,"
+          +" or the asterisk occurs neither at the start nor at the end.",
+           e.getMessage());
+    }
+  }
+
+  @Test
+  public void testMisplacedAsteriskCopyFieldDestShouldFail() {
+    try {
+      initCore("solrconfig.xml","bad-schema-misplaced-asterisk-copyfield-dest-should-fail-test.xml");
+    } catch (Exception e) {
+      assertEquals
+          ("copyField dest :'misplaced_*_asterisk' is an invalid glob: either it contains more than one asterisk,"
+          +" or the asterisk occurs neither at the start nor at the end.",
+           e.getMessage());
+    }
+  }
+}
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/CopyFieldTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/CopyFieldTest.java
index fcecf6bd..01d11578 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/CopyFieldTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/CopyFieldTest.java
@@ -223,4 +223,28 @@ public void testExplicitSourceGlob()
     assertQ("sku2 copied to dest_sub_no_ast_s (*_s subset pattern no asterisk)", req
         ,"//*[@numFound='1']");
   }
+
+  @Test
+  public void testSourceGlobMatchesNoDynamicOrExplicitField()
+  {
+    // SOLR-4650: copyField source globs should not have to match an explicit or dynamic field 
+    SolrCore core = h.getCore();
+    IndexSchema schema = core.getSchema();
+
+    assertNull("'testing123_*' should not be (or match) a dynamic or explicit field", schema.getFieldOrNull("testing123_*"));
+
+    assertTrue("schema should contain dynamic field '*_s'", schema.getDynamicPattern("*_s").equals("*_s"));
+
+    assertU(adoc("id", "A5", "sku1", "10-1839ACX-93", "testing123_s", "AAM46"));
+    assertU(commit());
+
+    Map<String,String> args = new HashMap<String, String>();
+    args.put( CommonParams.Q, "text:AAM46" );
+    args.put( "indent", "true" );
+    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );
+    assertQ("sku2 copied to text", req
+        ,"//*[@numFound='1']"
+        ,"//result/doc[1]/str[@name='id'][.='A5']"
+    );
+ }
 }
