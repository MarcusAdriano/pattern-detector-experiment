diff --git a/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/servlet/HessianServiceServlet.java b/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/servlet/HessianServiceServlet.java
index e69de29b..7d45c7d7 100644
--- a/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/servlet/HessianServiceServlet.java
+++ b/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/servlet/HessianServiceServlet.java
@@ -0,0 +1,71 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.gdata.hivemind.servlet;
+
+import java.io.IOException;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.hivemind.Registry;
+import org.apache.hivemind.servlet.HiveMindFilter;
+import org.apache.lucene.gdata.hivemind.webservice.HessianServiceSkeletonInvoker;
+import org.apache.lucene.gdata.hivemind.webservice.HessianSkeletonProvider;
+
+/**
+ * Central Hessian servlet which provides access to all hessian exposed services
+ * via a single servlet.
+ * 
+ * @author Simon Willnauer
+ * 
+ */
+public class HessianServiceServlet extends HttpServlet {
+
+    /**
+     * 
+     */
+    private static final long serialVersionUID = 5519783120466089391L;
+
+    /**
+     * @see javax.servlet.http.HttpServlet#doPost(javax.servlet.http.HttpServletRequest,
+     *      javax.servlet.http.HttpServletResponse)
+     */
+    @Override
+    protected void doPost(HttpServletRequest arg0, HttpServletResponse arg1)
+            throws ServletException, IOException {
+        try {
+            HessianSkeletonProvider provider = getSkeletonProvider(arg0);
+            HessianServiceSkeletonInvoker invoker = provider
+                    .getServiceSkeletonInvoker(arg0);
+            invoker.invoke(arg0, arg1);
+        } catch (Throwable e) {
+            throw new ServletException("Nested Exception occured -- Message: "
+                    + e.getMessage(), e);
+        }
+
+    }
+
+    private HessianSkeletonProvider getSkeletonProvider(
+            HttpServletRequest request) {
+        Registry reg = HiveMindFilter.getRegistry(request);
+        return (HessianSkeletonProvider) reg
+                .getService(HessianSkeletonProvider.class);
+    }
+
+}
diff --git a/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/HessianServiceSkeletonInvoker.java b/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/HessianServiceSkeletonInvoker.java
index e69de29b..57cd7226 100644
--- a/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/HessianServiceSkeletonInvoker.java
+++ b/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/HessianServiceSkeletonInvoker.java
@@ -0,0 +1,41 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.gdata.hivemind.webservice;
+
+import java.io.IOException;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+/**
+ * Internal invoker interface to support more than one version of the protocol. <b>Currently only Version 3.0.20 is supported.<b>
+ * 
+ * @author Simon Willnauer
+ * 
+ */
+public interface HessianServiceSkeletonInvoker {
+
+    /**
+     * @param arg0 - httpServletRequest to access the input stream for processing
+     * @param arg1 - httpServletResponse to access the output stream for processing
+     * @throws IOException - if reading or writeing causes an IOException
+     * @throws Throwable - if the Hessian Impl. causes an error
+     */
+    public abstract void invoke(HttpServletRequest arg0, HttpServletResponse arg1)
+            throws IOException, Throwable;
+
+}
diff --git a/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/HessianServiceSkeletonInvokerImpl.java b/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/HessianServiceSkeletonInvokerImpl.java
index e69de29b..189fa758 100644
--- a/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/HessianServiceSkeletonInvokerImpl.java
+++ b/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/HessianServiceSkeletonInvokerImpl.java
@@ -0,0 +1,116 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.gdata.hivemind.webservice;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import com.caucho.hessian.io.AbstractHessianOutput;
+import com.caucho.hessian.io.Hessian2Input;
+import com.caucho.hessian.io.Hessian2Output;
+import com.caucho.hessian.io.HessianOutput;
+import com.caucho.hessian.io.SerializerFactory;
+import com.caucho.hessian.server.HessianSkeleton;
+
+/**
+ * Wrapps the hessian skeleton invokation logic.
+ * This is based on the protocol description of the hessian protocol
+ * @author Simon Willnauer
+ *
+ */
+class HessianServiceSkeletonInvokerImpl implements
+        HessianServiceSkeletonInvoker {
+    private static final Log LOG = LogFactory.getLog(HessianServiceSkeletonInvokerImpl.class);
+    private SerializerFactory serializerFactory;
+    private final HessianSkeleton skeleton;
+    /**
+     * Creates a new HessianServiceSkeletonInvoker
+     * @param skeleton - The skeleton instance to invoke to process the request
+     * 
+     */
+    HessianServiceSkeletonInvokerImpl(final HessianSkeleton skeleton) {
+        this.skeleton = skeleton;
+       
+    }
+
+    /**
+     * @throws Throwable 
+     * @see org.apache.lucene.gdata.hivemind.webservice.HessianServiceSkeletonInvoker#invoke(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
+     */
+    public void invoke(HttpServletRequest arg0, HttpServletResponse arg1) throws Throwable {
+        InputStream inputStream = arg0.getInputStream();
+        OutputStream outputStream = arg1.getOutputStream();
+        /*
+         *This works only with hessian >= hessian-3.0.20!!
+         *but remember this is not a framework  
+         */
+        Hessian2Input hessianInput = new Hessian2Input(inputStream);
+        if (this.serializerFactory != null) {
+                hessianInput.setSerializerFactory(this.serializerFactory);
+        }
+
+        int code = hessianInput.read();
+        if (code != 'c') {
+                throw new IOException("expected 'c' in hessian input at " + code);
+        }
+
+        AbstractHessianOutput  hessianOutput = null;
+        int major = hessianInput.read();
+        // useless read just get the stream in the right position.
+        int minor = hessianInput.read();
+        if (major >= 2) {
+                hessianOutput = new Hessian2Output(outputStream);
+        }
+        else {
+                hessianOutput = new HessianOutput(outputStream);
+        }
+        if (this.serializerFactory != null) {
+                hessianOutput.setSerializerFactory(this.serializerFactory);
+        }
+
+        try {
+            this.skeleton.invoke(hessianInput, hessianOutput);
+        } catch (Throwable e) {
+            LOG.error("Unexpected Exception thrown -- "+e.getMessage(),e);
+            throw e;
+            
+        }
+
+    }
+
+    /**
+     * @return Returns the serializerFactory.
+     */
+    public SerializerFactory getSerializerFactory() {
+        return this.serializerFactory;
+    }
+
+    /**
+     * @param serializerFactory The serializerFactory to set.
+     */
+    public void setSerializerFactory(SerializerFactory serializerFactory) {
+        this.serializerFactory = serializerFactory;
+    }
+
+}
diff --git a/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/HessianSkeletonProvider.java b/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/HessianSkeletonProvider.java
index e69de29b..a54400d9 100644
--- a/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/HessianSkeletonProvider.java
+++ b/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/HessianSkeletonProvider.java
@@ -0,0 +1,50 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.lucene.gdata.hivemind.webservice;
+
+import javax.servlet.http.HttpServletRequest;
+
+/**
+ * Serviceprovider for within hivemind configured services to expose as
+ * webservices. This SkeletonProvider will return the corresponding service to
+ * the given <code>HttpServletRequest</code>.
+ * <p>
+ * Services exported via this provider will be available via a Hessian service
+ * endpoint, accessible via a Hessian proxy
+ * </p>
+ * <p>
+ * Fo information on Hessian see: <a
+ * href="http://www.caucho.com/hessian">Hessian protocol</a>
+ * </p>
+ * 
+ * @author Simon Willnauer
+ * 
+ */
+public interface HessianSkeletonProvider {
+
+    /**
+     * Selects the configured Service according to the given request.
+     * 
+     * @param arg0 -
+     *            the current HttpServletRequest
+     * @return - a corresponding HessianServiceSkeletonInvoker
+     */
+    HessianServiceSkeletonInvoker getServiceSkeletonInvoker(
+            HttpServletRequest arg0);
+
+}
diff --git a/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/HessianSkeletonProviderImpl.java b/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/HessianSkeletonProviderImpl.java
index e69de29b..85701264 100644
--- a/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/HessianSkeletonProviderImpl.java
+++ b/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/HessianSkeletonProviderImpl.java
@@ -0,0 +1,109 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.lucene.gdata.hivemind.webservice;
+
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
+
+import javax.servlet.http.HttpServletRequest;
+
+import com.caucho.hessian.server.HessianSkeleton;
+
+/**
+ * Simple provider implementation.
+ * @author Simon Willnauer
+ * 
+ */
+public class HessianSkeletonProviderImpl implements HessianSkeletonProvider {
+    private Map<String, WebserviceMappingBean> mapping;
+
+    private ConcurrentHashMap<String, HessianSkeleton> skeletonCache = new ConcurrentHashMap<String, HessianSkeleton>();
+
+    /**
+     * Creates a new HessianSkeletonProviderImpl instance
+     */
+    public HessianSkeletonProviderImpl() {
+        super();
+
+    }
+
+    /**
+     * The last part of the request URL is used to identify a configured service
+     * mapping.
+     * 
+     * @param path -
+     *            the servletrequest path info
+     * @return - the corresponding HessianSkeleton
+     */
+    protected HessianSkeleton getMappingFromPath(String path) {
+        if (path.endsWith("/"))
+            path = path.substring(0, path.length() - 1);
+        String requestedService = path.substring(path.lastIndexOf("/") + 1);
+        HessianSkeleton retVal = this.skeletonCache.get(requestedService);
+        if (retVal == null) {
+            WebserviceMappingBean wsBean = this.mapping.get(requestedService);
+            if (wsBean == null)
+                throw new NoSuchServiceException();
+            if (!checkInterface(wsBean))
+                throw new RuntimeException(
+                        "The configured webservice interface is not assignable from the corresponding service");
+            retVal = new HessianSkeleton(wsBean.getServiceImpl(), wsBean
+                    .getServiceInterface());
+            /*
+             * rather create this service twice as synchronize the whole block
+             */
+            this.skeletonCache.putIfAbsent(requestedService, retVal);
+        }
+        return retVal;
+    }
+
+    @SuppressWarnings("unchecked")
+    private boolean checkInterface(WebserviceMappingBean bean) {
+        return bean.getServiceInterface().isAssignableFrom(
+                bean.getServiceImpl().getClass());
+    }
+
+    /**
+     * @see org.apache.lucene.gdata.hivemind.webservice.HessianSkeletonProvider#getServiceSkeletonInvoker(javax.servlet.http.HttpServletRequest)
+     */
+    public HessianServiceSkeletonInvoker getServiceSkeletonInvoker(
+            HttpServletRequest arg0) {
+        if (arg0 == null)
+            throw new IllegalArgumentException(
+                    "HttpServletRequest must not be null");
+        HessianSkeleton mappingFromRequest = getMappingFromPath(arg0
+                .getPathInfo());
+        return new HessianServiceSkeletonInvokerImpl(mappingFromRequest);
+    }
+
+    /**
+     * @return Returns the mapping.
+     */
+    public Map<String, WebserviceMappingBean> getMapping() {
+        return this.mapping;
+    }
+
+    /**
+     * @param mapping
+     *            The mapping to set.
+     */
+    public void setMapping(Map<String, WebserviceMappingBean> mapping) {
+        this.mapping = mapping;
+    }
+
+}
diff --git a/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/NoSuchServiceException.java b/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/NoSuchServiceException.java
index e69de29b..05b480a2 100644
--- a/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/NoSuchServiceException.java
+++ b/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/NoSuchServiceException.java
@@ -0,0 +1,33 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.lucene.gdata.hivemind.webservice;
+
+/**
+ * Service Exception thrown if the requested service is not registered or not available.
+ * @author Simon Willnauer
+ *
+ */
+public class NoSuchServiceException extends RuntimeException {
+
+    /**
+     * 
+     */
+    private static final long serialVersionUID = -3485216993407631494L;
+
+   
+}
diff --git a/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/WebserviceMappingBean.java b/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/WebserviceMappingBean.java
index e69de29b..7560728b 100644
--- a/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/WebserviceMappingBean.java
+++ b/lucene/java/trunk/contrib/gdata-server/src/hivemind/org/apache/lucene/gdata/hivemind/webservice/WebserviceMappingBean.java
@@ -0,0 +1,77 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.lucene.gdata.hivemind.webservice;
+
+/**
+ * This class is a simple configuration bean to expose a certain service via a
+ * hessian webservice. The configuration requieres the classtype of the
+ * interface and an instance of a subclass to invoke the interface methodes.
+ * <p>
+ * This bean will be created by Hivemind for each configured service and will be
+ * passed to the
+ * {@link org.apache.lucene.gdata.hivemind.webservice.HessianSkeletonProvider}
+ * as a Map.
+ * </p>
+ * 
+ * @author Simon Willnauer
+ * 
+ */
+public class WebserviceMappingBean {
+    private Class serviceInterface;
+
+    private Object serviceImpl;
+
+    /**
+     * Bean constructor
+     */
+    public WebserviceMappingBean() {
+        super();
+
+    }
+
+    /**
+     * @return Returns the serviceImpl.
+     */
+    public Object getServiceImpl() {
+        return this.serviceImpl;
+    }
+
+    /**
+     * @param serviceImpl
+     *            The serviceImpl to set.
+     */
+    public void setServiceImpl(Object serviceImpl) {
+        this.serviceImpl = serviceImpl;
+    }
+
+    /**
+     * @return Returns the serviceInterface.
+     */
+    public Class getServiceInterface() {
+        return this.serviceInterface;
+    }
+
+    /**
+     * @param serviceInterface
+     *            The serviceInterface to set.
+     */
+    public void setServiceInterface(Class serviceInterface) {
+        this.serviceInterface = serviceInterface;
+    }
+
+}
diff --git a/lucene/java/trunk/contrib/gdata-server/src/test/org/apache/lucene/gdata/hivemind/webservice/HessianSkeletonProviderImplTest.java b/lucene/java/trunk/contrib/gdata-server/src/test/org/apache/lucene/gdata/hivemind/webservice/HessianSkeletonProviderImplTest.java
index e69de29b..da3efcb8 100644
--- a/lucene/java/trunk/contrib/gdata-server/src/test/org/apache/lucene/gdata/hivemind/webservice/HessianSkeletonProviderImplTest.java
+++ b/lucene/java/trunk/contrib/gdata-server/src/test/org/apache/lucene/gdata/hivemind/webservice/HessianSkeletonProviderImplTest.java
@@ -0,0 +1,134 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.lucene.gdata.hivemind.webservice;
+
+import java.io.Serializable;
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.servlet.http.HttpServletRequest;
+
+import junit.framework.TestCase;
+
+import org.easymock.MockControl;
+
+import com.caucho.hessian.server.HessianSkeleton;
+
+/**
+ * @author Simon Willnauer
+ * 
+ */
+public class HessianSkeletonProviderImplTest extends TestCase {
+    HessianSkeletonProviderImpl provider;
+
+    MockControl<HttpServletRequest> mockControl;
+
+    HttpServletRequest mockedRequest;
+
+    static String mapKey = "test";
+
+    static String testPathSuccess = "/endpoint/" + mapKey;
+
+    static String testPathFail = "/endpoint/fail";
+
+    private Map<String, WebserviceMappingBean> mapping;
+
+    protected void setUp() throws Exception {
+        this.mockControl = MockControl.createControl(HttpServletRequest.class);
+        this.mockedRequest = this.mockControl.getMock();
+        this.provider = new HessianSkeletonProviderImpl();
+        this.mapping = new HashMap<String, WebserviceMappingBean>();
+        WebserviceMappingBean bean = new WebserviceMappingBean();
+
+        bean.setServiceImpl(new TestService());
+        bean.setServiceInterface(Serializable.class);
+        this.mapping.put(mapKey, bean);
+        this.provider.setMapping(this.mapping);
+
+    }
+
+    protected void tearDown() throws Exception {
+        super.tearDown();
+    }
+
+    /*
+     * Test method for
+     * 'org.apache.lucene.gdata.hivemind.webservice.HessianSkeletonProviderImpl.getServiceSkeletonInvoker(HttpServletRequest)'
+     */
+    public void testGetServiceSkeletonInvoker() {
+        this.mockControl.expectAndDefaultReturn(this.mockedRequest
+                .getPathInfo(), testPathSuccess);
+        this.mockControl.replay();
+        assertNotNull(this.provider
+                .getServiceSkeletonInvoker(this.mockedRequest));
+        this.mockControl.verify();
+        this.mockControl.reset();
+
+        this.mockControl.expectAndDefaultReturn(this.mockedRequest
+                .getPathInfo(), testPathFail);
+        this.mockControl.replay();
+        try {
+            assertNotNull(this.provider
+                    .getServiceSkeletonInvoker(this.mockedRequest));
+            fail("Service should not be found");
+        } catch (NoSuchServiceException e) {
+            //
+        }
+        this.mockControl.verify();
+        this.mockControl.reset();
+    }
+
+    /**
+     * 
+     */
+    public void testGetMappingFromPath() {
+        try {
+            this.provider.getMappingFromPath(testPathFail);
+            fail("Service should not be found");
+        } catch (NoSuchServiceException e) {
+            //
+        }
+
+        HessianSkeleton retVal = this.provider
+                .getMappingFromPath(testPathSuccess);
+        assertNotNull(retVal);
+        HessianSkeleton retVal1 = this.provider
+                .getMappingFromPath(testPathSuccess + "/");
+        assertEquals(retVal, retVal1);
+        assertNotNull(retVal);
+        assertEquals(Serializable.class.getName(), retVal.getAPIClassName());
+
+    }
+
+    /**
+     * 
+     */
+    public void testVerifyInterfaceImpl() {
+        this.mapping.get(mapKey).setServiceImpl(new WebserviceMappingBean());
+        try {
+            this.provider.getMappingFromPath(testPathSuccess);
+            fail("Impl is not assignable to Interface");
+        } catch (RuntimeException e) {
+            //
+        }
+    }
+
+    private static class TestService implements Serializable {
+        // just for test case
+    }
+
+}
