diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java
index c4c53cbc..acfd7cd8 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java
@@ -39,7 +39,7 @@ public void doVerb(Message message)
 
         try
         {
-            RowMutation rm = RowMutation.serializer().deserialize(new DataInputStream(buffer));
+            RowMutation rm = RowMutation.serializer().deserialize(new DataInputStream(buffer), message.getVersion());
             rm.applyBinary();
 
             WriteResponse response = new WriteResponse(rm.getTable(), rm.key(), true);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnIndexer.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnIndexer.java
index 8b2dc1c2..186ac721 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnIndexer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnIndexer.java
@@ -142,6 +142,7 @@ private static void writeBloomFilter(DataOutput dos, BloomFilter bf) throws IOEx
         BloomFilter.serializer().serialize(bf, bufOut);
         dos.writeInt(bufOut.getLength());
         dos.write(bufOut.getData(), 0, bufOut.getLength());
+        bufOut.flush();
     }
 
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/CounterMutation.java b/cassandra/trunk/src/java/org/apache/cassandra/db/CounterMutation.java
index 1c6ef46f..cf347477 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/CounterMutation.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/CounterMutation.java
@@ -150,7 +150,7 @@ public Message makeMutationMessage(int version) throws IOException
     {
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         DataOutputStream dos = new DataOutputStream(bos);
-        serializer().serialize(this, dos);
+        serializer().serialize(this, dos, version);
         return new Message(FBUtilities.getLocalAddress(), StorageService.Verb.COUNTER_MUTATION, bos.toByteArray(), version);
     }
 
@@ -218,15 +218,15 @@ public String toString(boolean shallow)
 
 class CounterMutationSerializer implements ICompactSerializer<CounterMutation>
 {
-    public void serialize(CounterMutation cm, DataOutputStream dos) throws IOException
+    public void serialize(CounterMutation cm, DataOutputStream dos, int version) throws IOException
     {
-        RowMutation.serializer().serialize(cm.rowMutation(), dos);
+        RowMutation.serializer().serialize(cm.rowMutation(), dos, version);
         dos.writeUTF(cm.consistency().name());
     }
 
-    public CounterMutation deserialize(DataInputStream dis) throws IOException
+    public CounterMutation deserialize(DataInputStream dis, int version) throws IOException
     {
-        RowMutation rm = RowMutation.serializer().deserialize(dis);
+        RowMutation rm = RowMutation.serializer().deserialize(dis, version);
         ConsistencyLevel consistency = Enum.valueOf(ConsistencyLevel.class, dis.readUTF());
         return new CounterMutation(rm, consistency);
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/CounterMutationVerbHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/db/CounterMutationVerbHandler.java
index 2aecf2ad..e8a2deb5 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/CounterMutationVerbHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/CounterMutationVerbHandler.java
@@ -49,7 +49,7 @@ public void doVerb(Message message)
         try
         {
             DataInputStream is = new DataInputStream(buffer);
-            CounterMutation cm = CounterMutation.serializer().deserialize(is);
+            CounterMutation cm = CounterMutation.serializer().deserialize(is, message.getVersion());
             if (logger.isDebugEnabled())
               logger.debug("Applying forwarded " + cm);
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/DefinitionsUpdateResponseVerbHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/db/DefinitionsUpdateResponseVerbHandler.java
index fadf3cfa..c01215de 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/DefinitionsUpdateResponseVerbHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/DefinitionsUpdateResponseVerbHandler.java
@@ -54,7 +54,7 @@ public void doVerb(final Message message)
                 final UUID version = UUIDGen.getUUID(col.name());
                 if (version.timestamp() > DatabaseDescriptor.getDefsVersion().timestamp())
                 {
-                    final Migration m = Migration.deserialize(col.value());
+                    final Migration m = Migration.deserialize(col.value(), message.getVersion());
                     assert m.getVersion().equals(version);
                     StageManager.getStage(Stage.MIGRATION).submit(new WrappedRunnable()
                     {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceCommand.java b/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceCommand.java
index 6292d49a..791d2d5f 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceCommand.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceCommand.java
@@ -89,7 +89,7 @@ public RangeSliceCommand(String keyspace, String column_family, ByteBuffer super
     public Message getMessage(int version) throws IOException
     {
         DataOutputBuffer dob = new DataOutputBuffer();
-        serializer.serialize(this, dob);
+        serializer.serialize(this, dob, version);
         return new Message(FBUtilities.getLocalAddress(),
                            StorageService.Verb.RANGE_SLICE,
                            Arrays.copyOf(dob.getData(), dob.getLength()), version);
@@ -112,13 +112,13 @@ public static RangeSliceCommand read(Message message) throws IOException
     {
         byte[] bytes = message.getMessageBody();
         ByteArrayInputStream bis = new ByteArrayInputStream(bytes);
-        return serializer.deserialize(new DataInputStream(bis));
+        return serializer.deserialize(new DataInputStream(bis), message.getVersion());
     }
 }
 
 class RangeSliceCommandSerializer implements ICompactSerializer<RangeSliceCommand>
 {
-    public void serialize(RangeSliceCommand sliceCommand, DataOutputStream dos) throws IOException
+    public void serialize(RangeSliceCommand sliceCommand, DataOutputStream dos, int version) throws IOException
     {
         dos.writeUTF(sliceCommand.keyspace);
         dos.writeUTF(sliceCommand.column_family);
@@ -133,7 +133,7 @@ public void serialize(RangeSliceCommand sliceCommand, DataOutputStream dos) thro
         dos.writeInt(sliceCommand.max_keys);
     }
 
-    public RangeSliceCommand deserialize(DataInputStream dis) throws IOException
+    public RangeSliceCommand deserialize(DataInputStream dis, int version) throws IOException
     {
         String keyspace = dis.readUTF();
         String column_family = dis.readUTF();
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceReply.java b/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceReply.java
index d4f41247..49e06df5 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceReply.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceReply.java
@@ -46,7 +46,7 @@ public Message getReply(Message originalMessage) throws IOException
         dob.writeInt(rows.size());
         for (Row row : rows)
         {
-            Row.serializer().serialize(row, dob);
+            Row.serializer().serialize(row, dob, originalMessage.getVersion());
         }
         byte[] data = Arrays.copyOf(dob.getData(), dob.getLength());
         return originalMessage.getReply(FBUtilities.getLocalAddress(), data, originalMessage.getVersion());
@@ -60,7 +60,7 @@ public String toString()
                '}';
     }
 
-    public static RangeSliceReply read(byte[] body) throws IOException
+    public static RangeSliceReply read(byte[] body, int version) throws IOException
     {
         ByteArrayInputStream bufIn = new ByteArrayInputStream(body);
         DataInputStream dis = new DataInputStream(bufIn);
@@ -68,7 +68,7 @@ public static RangeSliceReply read(byte[] body) throws IOException
         List<Row> rows = new ArrayList<Row>(rowCount);
         for (int i = 0; i < rowCount; i++)
         {
-            rows.add(Row.serializer().deserialize(dis));
+            rows.add(Row.serializer().deserialize(dis, version));
         }
         return new RangeSliceReply(rows);
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ReadCommand.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ReadCommand.java
index 0f4408e4..f1b7d442 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ReadCommand.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ReadCommand.java
@@ -51,7 +51,7 @@ public Message getMessage(int version) throws IOException
     {
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         DataOutputStream dos = new DataOutputStream(bos);
-        ReadCommand.serializer().serialize(this, dos);
+        ReadCommand.serializer().serialize(this, dos, version);
         return new Message(FBUtilities.getLocalAddress(), StorageService.Verb.READ, bos.toByteArray(), version);
     }
 
@@ -104,17 +104,17 @@ protected AbstractType getComparator()
     }
 
 
-    public void serialize(ReadCommand rm, DataOutputStream dos) throws IOException
+    public void serialize(ReadCommand rm, DataOutputStream dos, int version) throws IOException
     {
         dos.writeByte(rm.commandType);
         ReadCommandSerializer ser = CMD_SERIALIZER_MAP.get(rm.commandType);
-        ser.serialize(rm, dos);
+        ser.serialize(rm, dos, version);
     }
 
-    public ReadCommand deserialize(DataInputStream dis) throws IOException
+    public ReadCommand deserialize(DataInputStream dis, int version) throws IOException
     {
         byte msgType = dis.readByte();
-        return CMD_SERIALIZER_MAP.get(msgType).deserialize(dis);
+        return CMD_SERIALIZER_MAP.get(msgType).deserialize(dis, version);
     }
         
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ReadRepairVerbHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ReadRepairVerbHandler.java
index e03f5cc2..ec0429f0 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ReadRepairVerbHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ReadRepairVerbHandler.java
@@ -40,7 +40,7 @@ public void doVerb(Message message)
         
         try
         {
-            RowMutation rm = RowMutation.serializer().deserialize(new DataInputStream(buffer));
+            RowMutation rm = RowMutation.serializer().deserialize(new DataInputStream(buffer), message.getVersion());
             rm.apply();
         }
         catch (IOException e)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ReadResponse.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ReadResponse.java
index fa48758b..64dbb168 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ReadResponse.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ReadResponse.java
@@ -81,7 +81,7 @@ public boolean isDigestQuery()
 
 class ReadResponseSerializer implements ICompactSerializer<ReadResponse>
 {
-	public void serialize(ReadResponse rm, DataOutputStream dos) throws IOException
+	public void serialize(ReadResponse rm, DataOutputStream dos, int version) throws IOException
 	{
         dos.writeInt(rm.isDigestQuery() ? rm.digest().remaining() : 0);
         ByteBuffer buffer = rm.isDigestQuery() ? rm.digest() : ByteBufferUtil.EMPTY_BYTE_BUFFER;
@@ -90,11 +90,11 @@ public void serialize(ReadResponse rm, DataOutputStream dos) throws IOException
 
         if (!rm.isDigestQuery())
         {
-            Row.serializer().serialize(rm.row(), dos);
+            Row.serializer().serialize(rm.row(), dos, version);
         }
     }
 	
-    public ReadResponse deserialize(DataInputStream dis) throws IOException
+    public ReadResponse deserialize(DataInputStream dis, int version) throws IOException
     {
         byte[] digest = null;
         int digestSize = dis.readInt();
@@ -109,7 +109,7 @@ public ReadResponse deserialize(DataInputStream dis) throws IOException
         Row row = null;
         if (!isDigest)
         {
-            row = Row.serializer().deserialize(dis);
+            row = Row.serializer().deserialize(dis, version);
         }
 
         return isDigest ? new ReadResponse(ByteBuffer.wrap(digest)) : new ReadResponse(row);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java
index de0cdc44..cd76266d 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java
@@ -64,14 +64,14 @@ public void doVerb(Message message)
                 /* Don't service reads! */
                 throw new RuntimeException("Cannot service reads while bootstrapping!");
             }
-            ReadCommand command = ReadCommand.serializer().deserialize(new DataInputStream(readCtx.bufIn_));
+            ReadCommand command = ReadCommand.serializer().deserialize(new DataInputStream(readCtx.bufIn_), message.getVersion());
             Table table = Table.open(command.table);
             Row row = command.getRow(table);
             ReadResponse readResponse = getResponse(command, row);
             /* serialize the ReadResponseMessage. */
             readCtx.bufOut_.reset();
 
-            ReadResponse.serializer().serialize(readResponse, readCtx.bufOut_);
+            ReadResponse.serializer().serialize(readResponse, readCtx.bufOut_, message.getVersion());
 
             byte[] bytes = new byte[readCtx.bufOut_.getLength()];
             System.arraycopy(readCtx.bufOut_.getData(), 0, bytes, 0, bytes.length);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/Row.java b/cassandra/trunk/src/java/org/apache/cassandra/db/Row.java
index 96122437..e229a601 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/Row.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/Row.java
@@ -62,13 +62,13 @@ public String toString()
 
 class RowSerializer implements ICompactSerializer<Row>
 {
-    public void serialize(Row row, DataOutputStream dos) throws IOException
+    public void serialize(Row row, DataOutputStream dos, int version) throws IOException
     {
         ByteBufferUtil.writeWithShortLength(row.key.key, dos);
         ColumnFamily.serializer().serialize(row.cf, dos);
     }
 
-    public Row deserialize(DataInputStream dis) throws IOException
+    public Row deserialize(DataInputStream dis, int version) throws IOException
     {
         return new Row(StorageService.getPartitioner().decorateKey(ByteBufferUtil.readWithShortLength(dis)),
                        ColumnFamily.serializer().deserialize(dis));
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java b/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java
index 28f95de6..4b82daad 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java
@@ -57,7 +57,7 @@ public static RowMutationSerializer serializer()
     // map of column family id to mutations for that column family.
     protected Map<Integer, ColumnFamily> modifications_ = new HashMap<Integer, ColumnFamily>();
     
-    private byte[] preserializedBuffer = null;
+    private Map<Integer, byte[]> preserializedBuffers = new HashMap<Integer, byte[]>();
 
     public RowMutation(String table, ByteBuffer key)
     {
@@ -237,16 +237,17 @@ public static RowMutation getRowMutationFromMutations(String keyspace, ByteBuffe
         return rm;
     }
 
-    // todo: we'll use version in the next patch.
     public synchronized byte[] getSerializedBuffer(int version) throws IOException
     {
+        byte[] preserializedBuffer = preserializedBuffers.get(version);
         if (preserializedBuffer == null)
         {
             ByteArrayOutputStream bout = new ByteArrayOutputStream();
             DataOutputStream dout = new DataOutputStream(bout);
-            RowMutation.serializer().serialize(this, dout);
+            RowMutation.serializer().serialize(this, dout, version);
             dout.close();
             preserializedBuffer = bout.toByteArray();
+            preserializedBuffers.put(version, preserializedBuffer);
         }
         return preserializedBuffer;
     }
@@ -310,10 +311,10 @@ private static void deleteColumnOrSuperColumnToRowMutation(RowMutation rm, Strin
         }
     }
 
-    static RowMutation fromBytes(byte[] raw) throws IOException
+    static RowMutation fromBytes(byte[] raw, int version) throws IOException
     {
-        RowMutation rm = serializer_.deserialize(new DataInputStream(new ByteArrayInputStream(raw)));
-        rm.preserializedBuffer = raw;
+        RowMutation rm = serializer_.deserialize(new DataInputStream(new ByteArrayInputStream(raw)), version);
+        rm.preserializedBuffers.put(version, raw);
         return rm;
     }
 
@@ -334,7 +335,7 @@ public RowMutation deepCopy()
 
     public static class RowMutationSerializer implements ICompactSerializer<RowMutation>
     {
-        public void serialize(RowMutation rm, DataOutputStream dos) throws IOException
+        public void serialize(RowMutation rm, DataOutputStream dos, int version) throws IOException
         {
             dos.writeUTF(rm.getTable());
             ByteBufferUtil.writeWithShortLength(rm.key(), dos);
@@ -352,7 +353,7 @@ public void serialize(RowMutation rm, DataOutputStream dos) throws IOException
             }
         }
 
-        public RowMutation deserialize(DataInputStream dis) throws IOException
+        public RowMutation deserialize(DataInputStream dis, int version) throws IOException
         {
             String table = dis.readUTF();
             ByteBuffer key = ByteBufferUtil.readWithShortLength(dis);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
index be6ca810..59b5a5fd 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
@@ -46,7 +46,7 @@ public void doVerb(Message message)
     {
         try
         {
-            RowMutation rm = RowMutation.fromBytes(message.getMessageBody());
+            RowMutation rm = RowMutation.fromBytes(message.getMessageBody(), message.getVersion());
             if (logger_.isDebugEnabled())
               logger_.debug("Applying " + rm);
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/SliceByNamesReadCommand.java b/cassandra/trunk/src/java/org/apache/cassandra/db/SliceByNamesReadCommand.java
index 5cb2ae39..634e47ff 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/SliceByNamesReadCommand.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/SliceByNamesReadCommand.java
@@ -76,7 +76,7 @@ public String toString()
 class SliceByNamesReadCommandSerializer extends ReadCommandSerializer
 {
     @Override
-    public void serialize(ReadCommand rm, DataOutputStream dos) throws IOException
+    public void serialize(ReadCommand rm, DataOutputStream dos, int version) throws IOException
     {
         SliceByNamesReadCommand realRM = (SliceByNamesReadCommand)rm;
         dos.writeBoolean(realRM.isDigestQuery());
@@ -94,7 +94,7 @@ public void serialize(ReadCommand rm, DataOutputStream dos) throws IOException
     }
 
     @Override
-    public ReadCommand deserialize(DataInputStream dis) throws IOException
+    public ReadCommand deserialize(DataInputStream dis, int version) throws IOException
     {
         boolean isDigest = dis.readBoolean();
         String table = dis.readUTF();
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/SliceFromReadCommand.java b/cassandra/trunk/src/java/org/apache/cassandra/db/SliceFromReadCommand.java
index baa12ff2..5b883099 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/SliceFromReadCommand.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/SliceFromReadCommand.java
@@ -81,7 +81,7 @@ public String toString()
 class SliceFromReadCommandSerializer extends ReadCommandSerializer
 {
     @Override
-    public void serialize(ReadCommand rm, DataOutputStream dos) throws IOException
+    public void serialize(ReadCommand rm, DataOutputStream dos, int version) throws IOException
     {
         SliceFromReadCommand realRM = (SliceFromReadCommand)rm;
         dos.writeBoolean(realRM.isDigestQuery());
@@ -95,7 +95,7 @@ public void serialize(ReadCommand rm, DataOutputStream dos) throws IOException
     }
 
     @Override
-    public ReadCommand deserialize(DataInputStream dis) throws IOException
+    public ReadCommand deserialize(DataInputStream dis, int version) throws IOException
     {
         boolean isDigest = dis.readBoolean();
         SliceFromReadCommand rm = new SliceFromReadCommand(dis.readUTF(),
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/TruncateResponse.java b/cassandra/trunk/src/java/org/apache/cassandra/db/TruncateResponse.java
index 3593bf8b..19c567b7 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/TruncateResponse.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/TruncateResponse.java
@@ -53,7 +53,7 @@ public static Message makeTruncateResponseMessage(Message original, TruncateResp
     {
     	ByteArrayOutputStream bos = new ByteArrayOutputStream();
         DataOutputStream dos = new DataOutputStream(bos);
-        TruncateResponse.serializer().serialize(truncateResponseMessage, dos);
+        TruncateResponse.serializer().serialize(truncateResponseMessage, dos, original.getVersion());
         return original.getReply(FBUtilities.getLocalAddress(), bos.toByteArray(), original.getVersion());
     }
 
@@ -65,14 +65,14 @@ public TruncateResponse(String keyspace, String columnFamily, boolean success) {
 
     public static class TruncateResponseSerializer implements ICompactSerializer<TruncateResponse>
     {
-        public void serialize(TruncateResponse tr, DataOutputStream dos) throws IOException
+        public void serialize(TruncateResponse tr, DataOutputStream dos, int version) throws IOException
         {
             dos.writeUTF(tr.keyspace);
             dos.writeUTF(tr.columnFamily);
             dos.writeBoolean(tr.success);
         }
 
-        public TruncateResponse deserialize(DataInputStream dis) throws IOException
+        public TruncateResponse deserialize(DataInputStream dis, int version) throws IOException
         {
             String keyspace = dis.readUTF();
             String columnFamily = dis.readUTF();
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/TruncateVerbHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/db/TruncateVerbHandler.java
index d8a48bd8..bb13230e 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/TruncateVerbHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/TruncateVerbHandler.java
@@ -47,7 +47,7 @@ public void doVerb(Message message)
 
         try
         {
-            Truncation t = Truncation.serializer().deserialize(new DataInputStream(buffer));
+            Truncation t = Truncation.serializer().deserialize(new DataInputStream(buffer), message.getVersion());
             logger.debug("Applying {}", t);
 
             try
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/Truncation.java b/cassandra/trunk/src/java/org/apache/cassandra/db/Truncation.java
index 8ab521c3..e4edf33c 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/Truncation.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/Truncation.java
@@ -71,7 +71,7 @@ public Message getMessage(int version) throws IOException
     {
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         DataOutputStream dos = new DataOutputStream(bos);
-        serializer().serialize(this, dos);
+        serializer().serialize(this, dos, version);
         return new Message(FBUtilities.getLocalAddress(), StorageService.Verb.TRUNCATE, bos.toByteArray(), version);
     }
 
@@ -83,13 +83,13 @@ public String toString()
 
 class TruncationSerializer implements ICompactSerializer<Truncation>
 {
-    public void serialize(Truncation t, DataOutputStream dos) throws IOException
+    public void serialize(Truncation t, DataOutputStream dos, int version) throws IOException
     {
         dos.writeUTF(t.keyspace);
         dos.writeUTF(t.columnFamily);
     }
 
-    public Truncation deserialize(DataInputStream dis) throws IOException
+    public Truncation deserialize(DataInputStream dis, int version) throws IOException
     {
         String keyspace = dis.readUTF();
         String columnFamily = dis.readUTF();
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/WriteResponse.java b/cassandra/trunk/src/java/org/apache/cassandra/db/WriteResponse.java
index 3c51aa17..1b918dc2 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/WriteResponse.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/WriteResponse.java
@@ -48,7 +48,7 @@ public static Message makeWriteResponseMessage(Message original, WriteResponse w
     {
     	ByteArrayOutputStream bos = new ByteArrayOutputStream();
         DataOutputStream dos = new DataOutputStream( bos );
-        WriteResponse.serializer().serialize(writeResponseMessage, dos);
+        WriteResponse.serializer().serialize(writeResponseMessage, dos, original.getVersion());
         return original.getReply(FBUtilities.getLocalAddress(), bos.toByteArray(), original.getVersion());
     }
 
@@ -79,14 +79,14 @@ public boolean isSuccess()
 
     public static class WriteResponseSerializer implements ICompactSerializer<WriteResponse>
     {
-        public void serialize(WriteResponse wm, DataOutputStream dos) throws IOException
+        public void serialize(WriteResponse wm, DataOutputStream dos, int version) throws IOException
         {
             dos.writeUTF(wm.table());
             ByteBufferUtil.writeWithShortLength(wm.key(), dos);
             dos.writeBoolean(wm.isSuccess());
         }
 
-        public WriteResponse deserialize(DataInputStream dis) throws IOException
+        public WriteResponse deserialize(DataInputStream dis, int version) throws IOException
         {
             String table = dis.readUTF();
             ByteBuffer key = ByteBufferUtil.readWithShortLength(dis);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLog.java b/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLog.java
index 654cfdb9..f0b5458b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLog.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLog.java
@@ -27,6 +27,7 @@
 import java.util.zip.CRC32;
 import java.util.zip.Checksum;
 
+import org.apache.cassandra.net.MessagingService;
 import org.apache.commons.lang.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -245,7 +246,9 @@ public static void recover(File[] clogs) throws IOException
                     RowMutation rm = null;
                     try
                     {
-                        rm = RowMutation.serializer().deserialize(new DataInputStream(bufIn));
+                        // assuming version here. We've gone to lengths to make sure what gets written to the CL is in
+                        // the current version.  so do make sure the CL is drained prior to upgrading a node.
+                        rm = RowMutation.serializer().deserialize(new DataInputStream(bufIn), MessagingService.version_);
                     }
                     catch (UnserializableColumnFamilyException ex)
                     {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java
index e15e1424..288e86ab 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java
@@ -28,6 +28,7 @@
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
 
+import org.apache.cassandra.net.MessagingService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -257,7 +258,7 @@ public ByteBuffer serialize() throws IOException
         DataOutputBuffer dob = new DataOutputBuffer();
         try
         {
-            RowMutation.serializer().serialize(rm, dob);
+            RowMutation.serializer().serialize(rm, dob, MessagingService.version_);
         }
         catch (IOException e)
         {
@@ -272,7 +273,7 @@ public ByteBuffer serialize() throws IOException
         return SerDeUtils.serializeWithSchema(mi);
     }
 
-    public static Migration deserialize(ByteBuffer bytes) throws IOException
+    public static Migration deserialize(ByteBuffer bytes, int version) throws IOException
     {
         // deserialize
         org.apache.cassandra.db.migration.avro.Migration mi = SerDeUtils.deserializeWithSchema(bytes, new org.apache.cassandra.db.migration.avro.Migration());
@@ -296,7 +297,7 @@ public static Migration deserialize(ByteBuffer bytes) throws IOException
         migration.newVersion = UUIDGen.getUUID(ByteBuffer.wrap(mi.new_version.bytes()));
         try
         {
-            migration.rm = RowMutation.serializer().deserialize(SerDeUtils.createDataInputStream(mi.row_mutation));
+            migration.rm = RowMutation.serializer().deserialize(SerDeUtils.createDataInputStream(mi.row_mutation), version);
         }
         catch (IOException e)
         {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/gms/EndpointState.java b/cassandra/trunk/src/java/org/apache/cassandra/gms/EndpointState.java
index c45bd781..0715b51e 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/gms/EndpointState.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/gms/EndpointState.java
@@ -138,11 +138,11 @@ public boolean getHasToken()
 {
     private static Logger logger = LoggerFactory.getLogger(EndpointStateSerializer.class);
     
-    public void serialize(EndpointState epState, DataOutputStream dos) throws IOException
+    public void serialize(EndpointState epState, DataOutputStream dos, int version) throws IOException
     {
         /* serialize the HeartBeatState */
         HeartBeatState hbState = epState.getHeartBeatState();
-        HeartBeatState.serializer().serialize(hbState, dos);
+        HeartBeatState.serializer().serialize(hbState, dos, version);
 
         /* serialize the map of ApplicationState objects */
         int size = epState.applicationState.size();
@@ -153,14 +153,14 @@ public void serialize(EndpointState epState, DataOutputStream dos) throws IOExce
             if (value != null)
             {
                 dos.writeInt(entry.getKey().ordinal());
-                VersionedValue.serializer.serialize(value, dos);
+                VersionedValue.serializer.serialize(value, dos, version);
             }
         }
     }
 
-    public EndpointState deserialize(DataInputStream dis) throws IOException
+    public EndpointState deserialize(DataInputStream dis, int version) throws IOException
     {
-        HeartBeatState hbState = HeartBeatState.serializer().deserialize(dis);
+        HeartBeatState hbState = HeartBeatState.serializer().deserialize(dis, version);
         EndpointState epState = new EndpointState(hbState);
 
         int appStateSize = dis.readInt();
@@ -172,7 +172,7 @@ public EndpointState deserialize(DataInputStream dis) throws IOException
             }
 
             int key = dis.readInt();
-            VersionedValue value = VersionedValue.serializer.deserialize(dis);
+            VersionedValue value = VersionedValue.serializer.deserialize(dis, version);
             epState.addApplicationState(Gossiper.STATES[key], value);
         }
         return epState;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigest.java b/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigest.java
index 4f793b50..9fe48a96 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigest.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigest.java
@@ -91,18 +91,18 @@ public String toString()
 
 class GossipDigestSerializer implements ICompactSerializer<GossipDigest>
 {       
-    public void serialize(GossipDigest gDigest, DataOutputStream dos) throws IOException
+    public void serialize(GossipDigest gDigest, DataOutputStream dos, int version) throws IOException
     {        
         CompactEndpointSerializationHelper.serialize(gDigest.endpoint, dos);
         dos.writeInt(gDigest.generation);
         dos.writeInt(gDigest.maxVersion);
     }
 
-    public GossipDigest deserialize(DataInputStream dis) throws IOException
+    public GossipDigest deserialize(DataInputStream dis, int version) throws IOException
     {
         InetAddress endpoint = CompactEndpointSerializationHelper.deserialize(dis);
         int generation = dis.readInt();
-        int version = dis.readInt();
-        return new GossipDigest(endpoint, generation, version);
+        int maxVersion = dis.readInt();
+        return new GossipDigest(endpoint, generation, maxVersion);
     }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAck2Message.java b/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAck2Message.java
index 8086e4ef..dc91ef93 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAck2Message.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAck2Message.java
@@ -61,15 +61,15 @@
 
 class GossipDigestAck2MessageSerializer implements ICompactSerializer<GossipDigestAck2Message>
 {
-    public void serialize(GossipDigestAck2Message gDigestAck2Message, DataOutputStream dos) throws IOException
+    public void serialize(GossipDigestAck2Message gDigestAck2Message, DataOutputStream dos, int version) throws IOException
     {
         /* Use the EndpointState */
-        EndpointStatesSerializationHelper.serialize(gDigestAck2Message.epStateMap_, dos);
+        EndpointStatesSerializationHelper.serialize(gDigestAck2Message.epStateMap_, dos, version);
     }
 
-    public GossipDigestAck2Message deserialize(DataInputStream dis) throws IOException
+    public GossipDigestAck2Message deserialize(DataInputStream dis, int version) throws IOException
     {
-        Map<InetAddress, EndpointState> epStateMap = EndpointStatesSerializationHelper.deserialize(dis);
+        Map<InetAddress, EndpointState> epStateMap = EndpointStatesSerializationHelper.deserialize(dis, version);
         return new GossipDigestAck2Message(epStateMap);        
     }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAck2VerbHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAck2VerbHandler.java
index 1c8f341f..f4b65e9d 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAck2VerbHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAck2VerbHandler.java
@@ -48,7 +48,7 @@ public void doVerb(Message message)
         GossipDigestAck2Message gDigestAck2Message;
         try
         {
-            gDigestAck2Message = GossipDigestAck2Message.serializer().deserialize(dis);
+            gDigestAck2Message = GossipDigestAck2Message.serializer().deserialize(dis, message.getVersion());
         }
         catch (IOException e)
         {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAckMessage.java b/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAckMessage.java
index 85197881..fce037bd 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAckMessage.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAckMessage.java
@@ -71,18 +71,18 @@
 
 class GossipDigestAckMessageSerializer implements ICompactSerializer<GossipDigestAckMessage>
 {
-    public void serialize(GossipDigestAckMessage gDigestAckMessage, DataOutputStream dos) throws IOException
+    public void serialize(GossipDigestAckMessage gDigestAckMessage, DataOutputStream dos, int version) throws IOException
     {
-        GossipDigestSerializationHelper.serialize(gDigestAckMessage.gDigestList_, dos);
+        GossipDigestSerializationHelper.serialize(gDigestAckMessage.gDigestList_, dos, version);
         dos.writeBoolean(true); // 0.6 compatibility
-        EndpointStatesSerializationHelper.serialize(gDigestAckMessage.epStateMap_, dos);
+        EndpointStatesSerializationHelper.serialize(gDigestAckMessage.epStateMap_, dos, version);
     }
 
-    public GossipDigestAckMessage deserialize(DataInputStream dis) throws IOException
+    public GossipDigestAckMessage deserialize(DataInputStream dis, int version) throws IOException
     {
-        List<GossipDigest> gDigestList = GossipDigestSerializationHelper.deserialize(dis);
+        List<GossipDigest> gDigestList = GossipDigestSerializationHelper.deserialize(dis, version);
         dis.readBoolean(); // 0.6 compatibility
-        Map<InetAddress, EndpointState> epStateMap = EndpointStatesSerializationHelper.deserialize(dis);
+        Map<InetAddress, EndpointState> epStateMap = EndpointStatesSerializationHelper.deserialize(dis, version);
         return new GossipDigestAckMessage(gDigestList, epStateMap);
     }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAckVerbHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAckVerbHandler.java
index cf06abc7..a8726a5e 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAckVerbHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAckVerbHandler.java
@@ -57,7 +57,7 @@ public void doVerb(Message message)
 
         try
         {
-            GossipDigestAckMessage gDigestAckMessage = GossipDigestAckMessage.serializer().deserialize(dis);
+            GossipDigestAckMessage gDigestAckMessage = GossipDigestAckMessage.serializer().deserialize(dis, message.getVersion());
             List<GossipDigest> gDigestList = gDigestAckMessage.getGossipDigestList();
             Map<InetAddress, EndpointState> epStateMap = gDigestAckMessage.getEndpointStateMap();
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestSynMessage.java b/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestSynMessage.java
index 7cf28204..6af6981b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestSynMessage.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestSynMessage.java
@@ -72,16 +72,16 @@ public GossipDigestSynMessage(String clusterId, List<GossipDigest> gDigests)
 {
     private static Logger logger_ = LoggerFactory.getLogger(GossipDigestSerializationHelper.class);
     
-    static void serialize(List<GossipDigest> gDigestList, DataOutputStream dos) throws IOException
+    static void serialize(List<GossipDigest> gDigestList, DataOutputStream dos, int version) throws IOException
     {
         dos.writeInt(gDigestList.size());
         for ( GossipDigest gDigest : gDigestList )
         {
-            GossipDigest.serializer().serialize( gDigest, dos );
+            GossipDigest.serializer().serialize( gDigest, dos, version);
         }
     }
 
-    static List<GossipDigest> deserialize(DataInputStream dis) throws IOException
+    static List<GossipDigest> deserialize(DataInputStream dis, int version) throws IOException
     {
         int size = dis.readInt();            
         List<GossipDigest> gDigests = new ArrayList<GossipDigest>(size);
@@ -89,7 +89,7 @@ static void serialize(List<GossipDigest> gDigestList, DataOutputStream dos) thro
         for ( int i = 0; i < size; ++i )
         {
             assert dis.available() > 0;
-            gDigests.add(GossipDigest.serializer().deserialize(dis));                
+            gDigests.add(GossipDigest.serializer().deserialize(dis, version));                
         }        
         return gDigests;
     }
@@ -99,18 +99,18 @@ static void serialize(List<GossipDigest> gDigestList, DataOutputStream dos) thro
 {
     private static final Logger logger_ = LoggerFactory.getLogger(EndpointStatesSerializationHelper.class);
 
-    static void serialize(Map<InetAddress, EndpointState> epStateMap, DataOutputStream dos) throws IOException
+    static void serialize(Map<InetAddress, EndpointState> epStateMap, DataOutputStream dos, int version) throws IOException
     {
         dos.writeInt(epStateMap.size());
         for (Entry<InetAddress, EndpointState> entry : epStateMap.entrySet())
         {
             InetAddress ep = entry.getKey();
             CompactEndpointSerializationHelper.serialize(ep, dos);
-            EndpointState.serializer().serialize(entry.getValue(), dos);
+            EndpointState.serializer().serialize(entry.getValue(), dos, version);
         }
     }
 
-    static Map<InetAddress, EndpointState> deserialize(DataInputStream dis) throws IOException
+    static Map<InetAddress, EndpointState> deserialize(DataInputStream dis, int version) throws IOException
     {
         int size = dis.readInt();            
         Map<InetAddress, EndpointState> epStateMap = new HashMap<InetAddress, EndpointState>(size);
@@ -119,7 +119,7 @@ static void serialize(Map<InetAddress, EndpointState> epStateMap, DataOutputStre
         {
             assert dis.available() > 0;
             InetAddress ep = CompactEndpointSerializationHelper.deserialize(dis);
-            EndpointState epState = EndpointState.serializer().deserialize(dis);
+            EndpointState epState = EndpointState.serializer().deserialize(dis, version);
             epStateMap.put(ep, epState);
         }
         return epStateMap;
@@ -128,16 +128,16 @@ static void serialize(Map<InetAddress, EndpointState> epStateMap, DataOutputStre
 
 class GossipDigestSynMessageSerializer implements ICompactSerializer<GossipDigestSynMessage>
 {   
-    public void serialize(GossipDigestSynMessage gDigestSynMessage, DataOutputStream dos) throws IOException
+    public void serialize(GossipDigestSynMessage gDigestSynMessage, DataOutputStream dos, int version) throws IOException
     {    
         dos.writeUTF(gDigestSynMessage.clusterId_);
-        GossipDigestSerializationHelper.serialize(gDigestSynMessage.gDigests_, dos);
+        GossipDigestSerializationHelper.serialize(gDigestSynMessage.gDigests_, dos, version);
     }
 
-    public GossipDigestSynMessage deserialize(DataInputStream dis) throws IOException
+    public GossipDigestSynMessage deserialize(DataInputStream dis, int version) throws IOException
     {
         String clusterId = dis.readUTF();
-        List<GossipDigest> gDigests = GossipDigestSerializationHelper.deserialize(dis);
+        List<GossipDigest> gDigests = GossipDigestSerializationHelper.deserialize(dis, version);
         return new GossipDigestSynMessage(clusterId, gDigests);
     }
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestSynVerbHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestSynVerbHandler.java
index c8e9e9ff..e4cfaf6d 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestSynVerbHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestSynVerbHandler.java
@@ -56,7 +56,7 @@ public void doVerb(Message message)
 
         try
         {
-            GossipDigestSynMessage gDigestMessage = GossipDigestSynMessage.serializer().deserialize(dis);
+            GossipDigestSynMessage gDigestMessage = GossipDigestSynMessage.serializer().deserialize(dis, message.getVersion());
             /* If the message is from a different cluster throw it away. */
             if ( !gDigestMessage.clusterId_.equals(DatabaseDescriptor.getClusterName()) )
             {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java b/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
index f16d41d0..51aaa789 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
@@ -332,7 +332,7 @@ Message makeGossipDigestSynMessage(List<GossipDigest> gDigests, int version) thr
         GossipDigestSynMessage gDigestMessage = new GossipDigestSynMessage(DatabaseDescriptor.getClusterName(), gDigests);
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         DataOutputStream dos = new DataOutputStream( bos );
-        GossipDigestSynMessage.serializer().serialize(gDigestMessage, dos);
+        GossipDigestSynMessage.serializer().serialize(gDigestMessage, dos, version);
         return new Message(FBUtilities.getLocalAddress(), StorageService.Verb.GOSSIP_DIGEST_SYN, bos.toByteArray(), version);
     }
 
@@ -340,7 +340,7 @@ Message makeGossipDigestAckMessage(GossipDigestAckMessage gDigestAckMessage, int
     {
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         DataOutputStream dos = new DataOutputStream(bos);
-        GossipDigestAckMessage.serializer().serialize(gDigestAckMessage, dos);
+        GossipDigestAckMessage.serializer().serialize(gDigestAckMessage, dos, version);
         return new Message(FBUtilities.getLocalAddress(), StorageService.Verb.GOSSIP_DIGEST_ACK, bos.toByteArray(), version);
     }
 
@@ -348,7 +348,7 @@ Message makeGossipDigestAck2Message(GossipDigestAck2Message gDigestAck2Message,
     {
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         DataOutputStream dos = new DataOutputStream(bos);
-        GossipDigestAck2Message.serializer().serialize(gDigestAck2Message, dos);
+        GossipDigestAck2Message.serializer().serialize(gDigestAck2Message, dos, version);
         return new Message(FBUtilities.getLocalAddress(), StorageService.Verb.GOSSIP_DIGEST_ACK2, bos.toByteArray(), version);
     }
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/gms/HeartBeatState.java b/cassandra/trunk/src/java/org/apache/cassandra/gms/HeartBeatState.java
index 5bd2cb78..eef4d79b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/gms/HeartBeatState.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/gms/HeartBeatState.java
@@ -75,13 +75,13 @@ int getHeartBeatVersion()
 
 class HeartBeatStateSerializer implements ICompactSerializer<HeartBeatState>
 {
-    public void serialize(HeartBeatState hbState, DataOutputStream dos) throws IOException
+    public void serialize(HeartBeatState hbState, DataOutputStream dos, int version) throws IOException
     {
         dos.writeInt(hbState.getGeneration());
         dos.writeInt(hbState.getHeartBeatVersion());
     }
     
-    public HeartBeatState deserialize(DataInputStream dis) throws IOException
+    public HeartBeatState deserialize(DataInputStream dis, int version) throws IOException
     {
         return new HeartBeatState(dis.readInt(), dis.readInt());
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/gms/VersionedValue.java b/cassandra/trunk/src/java/org/apache/cassandra/gms/VersionedValue.java
index 1a80a46d..6d285e7e 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/gms/VersionedValue.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/gms/VersionedValue.java
@@ -146,17 +146,17 @@ public VersionedValue rack(String rackId)
 
     private static class VersionedValueSerializer implements ICompactSerializer<VersionedValue>
     {
-        public void serialize(VersionedValue value, DataOutputStream dos) throws IOException
+        public void serialize(VersionedValue value, DataOutputStream dos, int version) throws IOException
         {
             dos.writeUTF(value.value);
             dos.writeInt(value.version);
         }
 
-        public VersionedValue deserialize(DataInputStream dis) throws IOException
+        public VersionedValue deserialize(DataInputStream dis, int version) throws IOException
         {
             String value = dis.readUTF();
-            int version = dis.readInt();
-            return new VersionedValue(value, version);
+            int valVersion = dis.readInt();
+            return new VersionedValue(value, valVersion);
         }
     }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/ICompactSerializer.java b/cassandra/trunk/src/java/org/apache/cassandra/io/ICompactSerializer.java
index 9114ce5e..05ea59d7 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/ICompactSerializer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/ICompactSerializer.java
@@ -34,7 +34,7 @@
      * @param dos DataOutput into which serialization needs to happen.
      * @throws IOException
      */
-    public void serialize(T t, DataOutputStream dos) throws IOException;
+    public void serialize(T t, DataOutputStream dos, int version) throws IOException;
 
     /**
      * Deserialize into the specified DataInputStream instance.
@@ -42,5 +42,5 @@
      * @throws IOException
      * @return the type that was deserialized
      */
-    public T deserialize(DataInputStream dis) throws IOException;
+    public T deserialize(DataInputStream dis, int version) throws IOException;
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/IndexHelper.java b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/IndexHelper.java
index 0a4e1f25..f14614c7 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/IndexHelper.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/IndexHelper.java
@@ -106,7 +106,7 @@ public static Filter defreezeBloomFilter(FileDataInput file, boolean useOldBuffe
         DataInputStream stream = new DataInputStream(ByteBufferUtil.inputStream(bytes));
 
         return useOldBuffer
-                ? LegacyBloomFilter.serializer().deserialize(stream)
+                ? LegacyBloomFilter.serializer().deserialize(stream, 0) // version means nothing there.
                 : BloomFilter.serializer().deserialize(stream);
     }
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableReader.java b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableReader.java
index 56753c23..b208cdd1 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableReader.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableReader.java
@@ -250,7 +250,7 @@ void loadBloomFilter() throws IOException
             stream = new DataInputStream(new BufferedInputStream(new FileInputStream(descriptor.filenameFor(Component.FILTER))));
             if (descriptor.usesOldBloomFilter)
             {
-                bf = LegacyBloomFilter.serializer().deserialize(stream);
+                bf = LegacyBloomFilter.serializer().deserialize(stream, 0); // version means nothing.
             }
             else
             {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/net/Header.java b/cassandra/trunk/src/java/org/apache/cassandra/net/Header.java
index 221b1eda..ef112500 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/net/Header.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/net/Header.java
@@ -111,7 +111,7 @@ void removeDetail(String key)
 
 class HeaderSerializer implements ICompactSerializer<Header>
 {
-    public void serialize(Header t, DataOutputStream dos) throws IOException
+    public void serialize(Header t, DataOutputStream dos, int version) throws IOException
     {           
         dos.writeUTF(t.getMessageId());
         CompactEndpointSerializationHelper.serialize(t.getFrom(), dos);
@@ -131,7 +131,7 @@ public void serialize(Header t, DataOutputStream dos) throws IOException
         }
     }
 
-    public Header deserialize(DataInputStream dis) throws IOException
+    public Header deserialize(DataInputStream dis, int version) throws IOException
     {
         String id = dis.readUTF();
         InetAddress from = CompactEndpointSerializationHelper.deserialize(dis);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/net/IncomingTcpConnection.java b/cassandra/trunk/src/java/org/apache/cassandra/net/IncomingTcpConnection.java
index 164d37d2..781364da 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/net/IncomingTcpConnection.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/net/IncomingTcpConnection.java
@@ -90,8 +90,7 @@ public void run()
                     int size = input.readInt();
                     byte[] headerBytes = new byte[size];
                     input.readFully(headerBytes);
-                    // todo: need to be aware of message version.
-                    stream(StreamHeader.serializer().deserialize(new DataInputStream(new ByteArrayInputStream(headerBytes))), input);
+                    stream(StreamHeader.serializer().deserialize(new DataInputStream(new ByteArrayInputStream(headerBytes)), version), input);
                     break;
                 }
                 else
@@ -105,7 +104,7 @@ public void run()
                     else
                     {
                         // todo: need to be aware of message version.
-                        Message message = Message.serializer().deserialize(new DataInputStream(new ByteArrayInputStream(contentBytes)));
+                        Message message = Message.serializer().deserialize(new DataInputStream(new ByteArrayInputStream(contentBytes)), version);
                         MessagingService.instance().receive(message);
                     }
                 }
@@ -114,6 +113,7 @@ public void run()
                 int header = input.readInt();
                 version = MessagingService.getBits(header, 15, 8);
                 assert isStream == (MessagingService.getBits(header, 3, 1) == 1) : "Connections cannot change type: " + isStream;
+                assert version == MessagingService.getBits(header, 15, 8) : "Protocol version shouldn't change during a session";
             }
             catch (EOFException e)
             {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/net/Message.java b/cassandra/trunk/src/java/org/apache/cassandra/net/Message.java
index aa72ee8b..292c4830 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/net/Message.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/net/Message.java
@@ -31,7 +31,6 @@
 public class Message
 {
     private static ICompactSerializer<Message> serializer_;
-    public static final int UNKNOWN = -1;
 
     static
     {
@@ -142,22 +141,22 @@ public String toString()
     
     private static class MessageSerializer implements ICompactSerializer<Message>
     {
-        public void serialize(Message t, DataOutputStream dos) throws IOException
+        public void serialize(Message t, DataOutputStream dos, int version) throws IOException
         {
-            Header.serializer().serialize( t.header_, dos);
+            assert t.getVersion() == version : "internode protocol version mismatch"; // indicates programmer error.
+            Header.serializer().serialize( t.header_, dos, version);
             byte[] bytes = t.getMessageBody();
             dos.writeInt(bytes.length);
             dos.write(bytes);
         }
     
-        public Message deserialize(DataInputStream dis) throws IOException
+        public Message deserialize(DataInputStream dis, int version) throws IOException
         {
-            Header header = Header.serializer().deserialize(dis);
+            Header header = Header.serializer().deserialize(dis, version);
             int size = dis.readInt();
             byte[] bytes = new byte[size];
             dis.readFully(bytes);
-            // return new Message(header.getMessageId(), header.getFrom(), header.getMessageType(), header.getVerb(), new Object[]{bytes});
-            return new Message(header, bytes, UNKNOWN);
+            return new Message(header, bytes, version);
         }
     }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java b/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
index 90352fa2..baa8f06c 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
@@ -347,7 +347,7 @@ public void sendOneWay(Message message, InetAddress to)
         try
         {
             DataOutputBuffer buffer = new DataOutputBuffer();
-            Message.serializer().serialize(message, buffer);
+            Message.serializer().serialize(message, buffer, message.getVersion());
             data = buffer.getData();
         }
         catch (IOException e)
@@ -355,7 +355,7 @@ public void sendOneWay(Message message, InetAddress to)
             throw new RuntimeException(e);
         }
         assert data.length > 0;
-        ByteBuffer buffer = packIt(data , false);
+        ByteBuffer buffer = packIt(data , false, message.getVersion());
 
         // write it
         connection.write(buffer);
@@ -449,7 +449,7 @@ public static int getBits(int x, int p, int n)
         return x >>> (p + 1) - n & ~(-1 << n);
     }
 
-    public ByteBuffer packIt(byte[] bytes, boolean compress)
+    public ByteBuffer packIt(byte[] bytes, boolean compress, int version)
     {
         /*
              Setting up the protocol header. This is 4 bytes long
@@ -468,7 +468,7 @@ public ByteBuffer packIt(byte[] bytes, boolean compress)
         if (compress)
             header |= 4;
         // Setting up the version bit
-        header |= (version_ << 8);
+        header |= (version << 8);
 
         ByteBuffer buffer = ByteBuffer.allocate(4 + 4 + 4 + bytes.length);
         buffer.putInt(PROTOCOL_MAGIC);
@@ -479,7 +479,7 @@ public ByteBuffer packIt(byte[] bytes, boolean compress)
         return buffer;
     }
 
-    public ByteBuffer constructStreamHeader(StreamHeader streamHeader, boolean compress)
+    public ByteBuffer constructStreamHeader(StreamHeader streamHeader, boolean compress, int version)
     {
         /*
         Setting up the protocol header. This is 4 bytes long
@@ -500,7 +500,7 @@ public ByteBuffer constructStreamHeader(StreamHeader streamHeader, boolean compr
         // set streaming bit
         header |= 8;
         // Setting up the version bit
-        header |= (version_ << 8);
+        header |= (version << 8);
         /* Finished the protocol header setup */
 
         /* Adding the StreamHeader which contains the session Id along
@@ -512,7 +512,7 @@ public ByteBuffer constructStreamHeader(StreamHeader streamHeader, boolean compr
         try
         {
             DataOutputBuffer buffer = new DataOutputBuffer();
-            StreamHeader.serializer().serialize(streamHeader, buffer);
+            StreamHeader.serializer().serialize(streamHeader, buffer, version);
             bytes = buffer.getData();
         }
         catch (IOException e)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java b/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
index 7be74816..2eda1423 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
@@ -553,7 +553,7 @@ static Message makeVerb(TreeRequest request, int version)
             {
                 ByteArrayOutputStream bos = new ByteArrayOutputStream();
                 DataOutputStream dos = new DataOutputStream(bos);
-                SERIALIZER.serialize(request, dos);
+                SERIALIZER.serialize(request, dos, version);
                 return new Message(FBUtilities.getLocalAddress(), StorageService.Verb.TREE_REQUEST, bos.toByteArray(), version);
             }
             catch(IOException e)
@@ -562,7 +562,7 @@ static Message makeVerb(TreeRequest request, int version)
             }
         }
 
-        public void serialize(TreeRequest request, DataOutputStream dos) throws IOException
+        public void serialize(TreeRequest request, DataOutputStream dos, int version) throws IOException
         {
             dos.writeUTF(request.sessionid);
             CompactEndpointSerializationHelper.serialize(request.endpoint, dos);
@@ -570,7 +570,7 @@ public void serialize(TreeRequest request, DataOutputStream dos) throws IOExcept
             dos.writeUTF(request.cf.right);
         }
 
-        public TreeRequest deserialize(DataInputStream dis) throws IOException
+        public TreeRequest deserialize(DataInputStream dis, int version) throws IOException
         {
             return new TreeRequest(dis.readUTF(),
                                    CompactEndpointSerializationHelper.deserialize(dis),
@@ -587,7 +587,7 @@ public void doVerb(Message message)
             DataInputStream buffer = new DataInputStream(new ByteArrayInputStream(bytes));
             try
             {
-                TreeRequest remotereq = this.deserialize(buffer);
+                TreeRequest remotereq = this.deserialize(buffer, message.getVersion());
                 TreeRequest request = new TreeRequest(remotereq.sessionid, message.getFrom(), remotereq.cf);
 
                 // trigger readonly-compaction
@@ -616,7 +616,7 @@ static Message makeVerb(InetAddress local, Validator validator)
             {
                 ByteArrayOutputStream bos = new ByteArrayOutputStream();
                 DataOutputStream dos = new DataOutputStream(bos);
-                SERIALIZER.serialize(validator, dos);
+                SERIALIZER.serialize(validator, dos, Gossiper.instance.getVersion(validator.request.endpoint));
                 return new Message(local, 
                                    StorageService.Verb.TREE_RESPONSE, 
                                    bos.toByteArray(), 
@@ -628,17 +628,17 @@ static Message makeVerb(InetAddress local, Validator validator)
             }
         }
 
-        public void serialize(Validator v, DataOutputStream dos) throws IOException
+        public void serialize(Validator v, DataOutputStream dos, int version) throws IOException
         {
-            TreeRequestVerbHandler.SERIALIZER.serialize(v.request, dos);
+            TreeRequestVerbHandler.SERIALIZER.serialize(v.request, dos, version);
             ObjectOutputStream oos = new ObjectOutputStream(dos);
             oos.writeObject(v.tree);
             oos.flush();
         }
 
-        public Validator deserialize(DataInputStream dis) throws IOException
+        public Validator deserialize(DataInputStream dis, int version) throws IOException
         {
-            final TreeRequest request = TreeRequestVerbHandler.SERIALIZER.deserialize(dis);
+            final TreeRequest request = TreeRequestVerbHandler.SERIALIZER.deserialize(dis, version);
             ObjectInputStream ois = new ObjectInputStream(dis);
             try
             {
@@ -658,7 +658,7 @@ public void doVerb(Message message)
             try
             {
                 // deserialize the remote tree, and register it
-                Validator response = this.deserialize(buffer);
+                Validator response = this.deserialize(buffer, message.getVersion());
                 TreeRequest request = new TreeRequest(response.request.sessionid, message.getFrom(), response.request.cf);
                 AntiEntropyService.instance.rendezvous(request, response.tree);
             }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/MigrationManager.java b/cassandra/trunk/src/java/org/apache/cassandra/service/MigrationManager.java
index 044e9158..0da3af09 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/MigrationManager.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/MigrationManager.java
@@ -137,7 +137,9 @@ public static void applyMigrations(final UUID from, final UUID to) throws IOExce
         Collection<IColumn> migrations = Migration.getLocalMigrations(from, to);
         for (IColumn col : migrations)
         {
-            final Migration migration = Migration.deserialize(col.value());
+            // assuming MessagingService.version_ is a bit of a risk, but you're playing with fire if you purposefully
+            // take down a node to upgrade it during the middle of a schema update.
+            final Migration migration = Migration.deserialize(col.value(), MessagingService.version_);
             Future update = StageManager.getStage(Stage.MIGRATION).submit(new Runnable()
             {
                 public void run()
@@ -207,6 +209,12 @@ private static Message makeMigrationMessage(Collection<IColumn> migrations, int
         ByteArrayOutputStream bout = new ByteArrayOutputStream();
         DataOutputStream dout = new DataOutputStream(bout);
         dout.writeInt(migrations.size());
+        // riddle me this: how do we know that these binary values (which contained serialized row mutations) are compatible
+        // with the destination?  Further, since these migrations may be old, how do we know if they are compatible with
+        // the current version?  The bottom line is that we don't.  For this reason, running migrations from a new node
+        // to an old node will be a crap shoot.  Pushing migrations from an old node to a new node should work, so long
+        // as the oldest migrations are only one version old.  We need a way of flattening schemas so that this isn't a
+        // problem during upgrades.
         for (IColumn col : migrations)
         {
             assert col instanceof Column;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java b/cassandra/trunk/src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java
index 6660cf74..fe328d75 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java
@@ -57,7 +57,7 @@ public RangeSliceResponseResolver(String table, List<InetAddress> sources)
     public List<Row> getData() throws IOException
     {
         Message response = responses.iterator().next();
-        RangeSliceReply reply = RangeSliceReply.read(response.getMessageBody());
+        RangeSliceReply reply = RangeSliceReply.read(response.getMessageBody(), response.getVersion());
         return reply.rows;
     }
 
@@ -76,7 +76,7 @@ public int compare(Pair<Row,InetAddress> o1, Pair<Row,InetAddress> o2)
         int n = 0;
         for (Message response : responses)
         {
-            RangeSliceReply reply = RangeSliceReply.read(response.getMessageBody());
+            RangeSliceReply reply = RangeSliceReply.read(response.getMessageBody(), response.getVersion());
             n = Math.max(n, reply.rows.size());
             collator.addIterator(new RowIterator(reply.rows.iterator(), response.getFrom()));
         }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/ReadResponseResolver.java b/cassandra/trunk/src/java/org/apache/cassandra/service/ReadResponseResolver.java
index 251f17e7..2125bafa 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/ReadResponseResolver.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/ReadResponseResolver.java
@@ -240,7 +240,7 @@ public void preprocess(Message message)
         ByteArrayInputStream bufIn = new ByteArrayInputStream(body);
         try
         {
-            ReadResponse result = ReadResponse.serializer().deserialize(new DataInputStream(bufIn));
+            ReadResponse result = ReadResponse.serializer().deserialize(new DataInputStream(bufIn), message.getVersion());
             if (logger_.isDebugEnabled())
                 logger_.debug("Preprocessed {} response", result.isDigestQuery() ? "digest" : "data");
             results.put(message, result);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/FileStreamTask.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/FileStreamTask.java
index c46c99a3..7fe120af 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/FileStreamTask.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/FileStreamTask.java
@@ -27,6 +27,7 @@
 import java.nio.channels.FileChannel;
 import java.nio.channels.SocketChannel;
 
+import org.apache.cassandra.gms.Gossiper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -84,7 +85,7 @@ public void runMayThrow() throws IOException
 
     private void stream() throws IOException
     {
-        ByteBuffer buffer = MessagingService.instance().constructStreamHeader(header, false);
+        ByteBuffer buffer = MessagingService.instance().constructStreamHeader(header, false, Gossiper.instance.getVersion(to));
         writeHeader(buffer);
 
         if (header.file == null)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/PendingFile.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/PendingFile.java
index cc0f2ff6..0984f2e2 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/PendingFile.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/PendingFile.java
@@ -103,7 +103,7 @@ public String toString()
 
     public static class PendingFileSerializer implements ICompactSerializer<PendingFile>
     {
-        public void serialize(PendingFile sc, DataOutputStream dos) throws IOException
+        public void serialize(PendingFile sc, DataOutputStream dos, int version) throws IOException
         {
             if (sc == null)
             {
@@ -121,7 +121,7 @@ public void serialize(PendingFile sc, DataOutputStream dos) throws IOException
             dos.writeUTF(sc.type.name());
         }
 
-        public PendingFile deserialize(DataInputStream dis) throws IOException
+        public PendingFile deserialize(DataInputStream dis, int version) throws IOException
         {
             String filename = dis.readUTF();
             if (filename.isEmpty())
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamHeader.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamHeader.java
index c8b0b159..3714738d 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamHeader.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamHeader.java
@@ -71,29 +71,29 @@ public StreamHeader(String table, long sessionId, PendingFile first, Collection<
 
     private static class StreamHeaderSerializer implements ICompactSerializer<StreamHeader>
     {
-        public void serialize(StreamHeader sh, DataOutputStream dos) throws IOException
+        public void serialize(StreamHeader sh, DataOutputStream dos, int version) throws IOException
         {
             dos.writeUTF(sh.table);
             dos.writeLong(sh.sessionId);
-            PendingFile.serializer().serialize(sh.file, dos);
+            PendingFile.serializer().serialize(sh.file, dos, version);
             dos.writeInt(sh.pendingFiles.size());
             for(PendingFile file : sh.pendingFiles)
             {
-                PendingFile.serializer().serialize(file, dos);
+                PendingFile.serializer().serialize(file, dos, version);
             }
         }
 
-        public StreamHeader deserialize(DataInputStream dis) throws IOException
+        public StreamHeader deserialize(DataInputStream dis, int version) throws IOException
         {
             String table = dis.readUTF();
             long sessionId = dis.readLong();
-            PendingFile file = PendingFile.serializer().deserialize(dis);
+            PendingFile file = PendingFile.serializer().deserialize(dis, version);
             int size = dis.readInt();
 
             List<PendingFile> pendingFiles = new ArrayList<PendingFile>(size);
             for (int i = 0; i < size; i++)
             {
-                pendingFiles.add(PendingFile.serializer().deserialize(dis));
+                pendingFiles.add(PendingFile.serializer().deserialize(dis, version));
             }
 
             return new StreamHeader(table, sessionId, file, pendingFiles);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamReply.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamReply.java
index bcd32dd2..c2b28a89 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamReply.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamReply.java
@@ -58,7 +58,7 @@ public Message getMessage(int version) throws IOException
     {
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         DataOutputStream dos = new DataOutputStream( bos );
-        serializer.serialize(this, dos);
+        serializer.serialize(this, dos, version);
         return new Message(FBUtilities.getLocalAddress(), StorageService.Verb.STREAM_REPLY, bos.toByteArray(), version);
     }
 
@@ -74,14 +74,14 @@ public String toString()
 
     private static class FileStatusSerializer implements ICompactSerializer<StreamReply>
     {
-        public void serialize(StreamReply reply, DataOutputStream dos) throws IOException
+        public void serialize(StreamReply reply, DataOutputStream dos, int version) throws IOException
         {
             dos.writeLong(reply.sessionId);
             dos.writeUTF(reply.file);
             dos.writeInt(reply.action.ordinal());
         }
 
-        public StreamReply deserialize(DataInputStream dis) throws IOException
+        public StreamReply deserialize(DataInputStream dis, int version) throws IOException
         {
             long sessionId = dis.readLong();
             String targetFile = dis.readUTF();
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamReplyVerbHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamReplyVerbHandler.java
index 2a3e7485..d556c36a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamReplyVerbHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamReplyVerbHandler.java
@@ -43,7 +43,7 @@ public void doVerb(Message message)
 
         try
         {
-            StreamReply reply = StreamReply.serializer.deserialize(new DataInputStream(bufIn));
+            StreamReply reply = StreamReply.serializer.deserialize(new DataInputStream(bufIn), message.getVersion());
             logger.debug("Received StreamReply {}", reply);
             StreamOutSession session = StreamOutSession.get(message.getFrom(), reply.sessionId);
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamRequestMessage.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamRequestMessage.java
index 8b24d842..9f3cbbc8 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamRequestMessage.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamRequestMessage.java
@@ -93,7 +93,7 @@ public Message getMessage(int version)
         DataOutputStream dos = new DataOutputStream(bos);
         try
         {
-            StreamRequestMessage.serializer().serialize(this, dos);
+            StreamRequestMessage.serializer().serialize(this, dos, version);
         }
         catch (IOException e)
         {
@@ -127,14 +127,14 @@ public String toString()
 
     private static class StreamRequestMessageSerializer implements ICompactSerializer<StreamRequestMessage>
     {
-        public void serialize(StreamRequestMessage srm, DataOutputStream dos) throws IOException
+        public void serialize(StreamRequestMessage srm, DataOutputStream dos, int version) throws IOException
         {
             dos.writeLong(srm.sessionId);
             CompactEndpointSerializationHelper.serialize(srm.target, dos);
             if (srm.file != null)
             {
                 dos.writeBoolean(true);
-                PendingFile.serializer().serialize(srm.file, dos);
+                PendingFile.serializer().serialize(srm.file, dos, version);
             }
             else
             {
@@ -149,14 +149,14 @@ public void serialize(StreamRequestMessage srm, DataOutputStream dos) throws IOE
             }
         }
 
-        public StreamRequestMessage deserialize(DataInputStream dis) throws IOException
+        public StreamRequestMessage deserialize(DataInputStream dis, int version) throws IOException
         {
             long sessionId = dis.readLong();
             InetAddress target = CompactEndpointSerializationHelper.deserialize(dis);
             boolean singleFile = dis.readBoolean();
             if (singleFile)
             {
-                PendingFile file = PendingFile.serializer().deserialize(dis);
+                PendingFile file = PendingFile.serializer().deserialize(dis, version);
                 return new StreamRequestMessage(target, file, sessionId);
             }
             else
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamRequestVerbHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamRequestVerbHandler.java
index dfde43b9..3e3836bc 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamRequestVerbHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamRequestVerbHandler.java
@@ -46,7 +46,7 @@ public void doVerb(Message message)
         ByteArrayInputStream bufIn = new ByteArrayInputStream(body);
         try
         {
-            StreamRequestMessage srm = StreamRequestMessage.serializer().deserialize(new DataInputStream(bufIn));
+            StreamRequestMessage srm = StreamRequestMessage.serializer().deserialize(new DataInputStream(bufIn), message.getVersion());
             if (logger.isDebugEnabled())
                 logger.debug(srm.toString());
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/utils/BloomFilter.java b/cassandra/trunk/src/java/org/apache/cassandra/utils/BloomFilter.java
index 49ee50b9..9ad21d14 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/utils/BloomFilter.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/utils/BloomFilter.java
@@ -20,6 +20,7 @@
 
 import java.nio.ByteBuffer;
 
+import org.apache.cassandra.io.ICompactSerializer2;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -31,7 +32,7 @@
 
     private static final Logger logger = LoggerFactory.getLogger(BloomFilter.class);
     private static final int EXCESS = 20;
-    static ICompactSerializer<BloomFilter> serializer_ = new BloomFilterSerializer();
+    static ICompactSerializer2<BloomFilter> serializer_ = new BloomFilterSerializer();
 
     public OpenBitSet bitset;
 
@@ -41,7 +42,7 @@
         bitset = bs;
     }
 
-    public static ICompactSerializer<BloomFilter> serializer()
+    public static ICompactSerializer2<BloomFilter> serializer()
     {
         return serializer_;
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/utils/BloomFilterSerializer.java b/cassandra/trunk/src/java/org/apache/cassandra/utils/BloomFilterSerializer.java
index ad59e7c2..87e10559 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/utils/BloomFilterSerializer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/utils/BloomFilterSerializer.java
@@ -21,15 +21,16 @@
  */
 
 
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
+import java.io.DataInput;
+import java.io.DataOutput;
 import java.io.IOException;
+
+import org.apache.cassandra.io.ICompactSerializer2;
 import org.apache.cassandra.utils.obs.OpenBitSet;
-import org.apache.cassandra.io.ICompactSerializer;
 
-class BloomFilterSerializer implements ICompactSerializer<BloomFilter>
+class BloomFilterSerializer implements ICompactSerializer2<BloomFilter>
 {
-    public void serialize(BloomFilter bf, DataOutputStream dos) throws IOException
+    public void serialize(BloomFilter bf, DataOutput dos) throws IOException
     {
         long[] bits = bf.bitset.getBits();
         int bitLength = bits.length;
@@ -39,10 +40,9 @@ public void serialize(BloomFilter bf, DataOutputStream dos) throws IOException
 
         for (int i = 0; i < bitLength; i++)
             dos.writeLong(bits[i]);
-        dos.flush();
     }
 
-    public BloomFilter deserialize(DataInputStream dis) throws IOException
+    public BloomFilter deserialize(DataInput dis) throws IOException
     {
         int hashes = dis.readInt();
         int bitLength = dis.readInt();
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/utils/EstimatedHistogram.java b/cassandra/trunk/src/java/org/apache/cassandra/utils/EstimatedHistogram.java
index 7056d4bf..a652b7b6 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/utils/EstimatedHistogram.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/utils/EstimatedHistogram.java
@@ -18,13 +18,16 @@
 */
 package org.apache.cassandra.utils;
 
+import java.io.DataInput;
 import java.io.DataInputStream;
+import java.io.DataOutput;
 import java.io.DataOutputStream;
 import java.io.IOException;
 import java.util.Arrays;
 import java.util.concurrent.atomic.AtomicLongArray;
 
 import org.apache.cassandra.io.ICompactSerializer;
+import org.apache.cassandra.io.ICompactSerializer2;
 
 public class EstimatedHistogram
 {
@@ -154,9 +157,9 @@ public long median()
         return median;
     }
 
-    public static class EstimatedHistogramSerializer implements ICompactSerializer<EstimatedHistogram>
+    public static class EstimatedHistogramSerializer implements ICompactSerializer2<EstimatedHistogram>
     {
-        public void serialize(EstimatedHistogram eh, DataOutputStream dos) throws IOException
+        public void serialize(EstimatedHistogram eh, DataOutput dos) throws IOException
         {
             long[] offsets = eh.getBucketOffsets();
             long[] buckets = eh.get(false);
@@ -168,7 +171,7 @@ public void serialize(EstimatedHistogram eh, DataOutputStream dos) throws IOExce
             }
         }
 
-        public EstimatedHistogram deserialize(DataInputStream dis) throws IOException
+        public EstimatedHistogram deserialize(DataInput dis) throws IOException
         {
             int size = dis.readInt();
             long[] offsets = new long[size - 1];
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java b/cassandra/trunk/src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java
index 62b2df62..7bea8032 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/utils/LegacyBloomFilterSerializer.java
@@ -25,23 +25,22 @@
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
-import java.io.ObjectOutputStream;
 import java.io.ObjectInputStream;
-import org.apache.cassandra.utils.obs.OpenBitSet;
 import org.apache.cassandra.io.ICompactSerializer;
 
 class LegacyBloomFilterSerializer implements ICompactSerializer<LegacyBloomFilter>
 {
-    public void serialize(LegacyBloomFilter bf, DataOutputStream dos)
+    public void serialize(LegacyBloomFilter bf, DataOutputStream dos, int version)
             throws IOException
     {
-        dos.writeInt(bf.getHashCount());
-        ObjectOutputStream oos = new ObjectOutputStream(dos);
-        oos.writeObject(bf.getBitSet());
-        oos.flush();
+        throw new UnsupportedOperationException("Shouldn't be serializing legacy bloom filters");
+//        dos.writeInt(bf.getHashCount());
+//        ObjectOutputStream oos = new ObjectOutputStream(dos);
+//        oos.writeObject(bf.getBitSet());
+//        oos.flush();
     }
 
-    public LegacyBloomFilter deserialize(DataInputStream dis) throws IOException
+    public LegacyBloomFilter deserialize(DataInputStream dis, int version) throws IOException
     {
         int hashes = dis.readInt();
         ObjectInputStream ois = new ObjectInputStream(dis);
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/AbstractSerializationsTester.java b/cassandra/trunk/test/unit/org/apache/cassandra/AbstractSerializationsTester.java
index da70713f..d47dd7e2 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/AbstractSerializationsTester.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/AbstractSerializationsTester.java
@@ -27,13 +27,24 @@
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
 
 public class AbstractSerializationsTester extends SchemaLoader
 {
     protected static final String CUR_VER = System.getProperty("cassandra.version", "0.7");
+    protected static final Map<String, Integer> VERSION_MAP = new HashMap<String, Integer> () 
+    {{
+        put("0.7", 1);
+    }};
     
     protected static final boolean EXECUTE_WRITES = new Boolean(System.getProperty("cassandra.test-serialization-writes", "False")).booleanValue();
     
+    protected final int getVersion()
+    {
+        return VERSION_MAP.get(CUR_VER);
+    }
+    
     protected static DataInputStream getInput(String name) throws IOException
     {
         File f = new File("test/data/serialization/" + CUR_VER + "/" + name);
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
index e742b116..6255b7a3 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
@@ -58,6 +58,7 @@
 import org.apache.cassandra.io.SerDeUtils;
 import org.apache.cassandra.locator.OldNetworkTopologyStrategy;
 import org.apache.cassandra.locator.SimpleStrategy;
+import org.apache.cassandra.net.MessagingService;
 import org.apache.cassandra.thrift.IndexType;
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.utils.UUIDGen;
@@ -238,7 +239,7 @@ public void testMigrations() throws IOException, ConfigurationException
         for (IColumn col : serializedMigrations)
         {
             UUID version = UUIDGen.getUUID(col.name());
-            reconstituded[i] = Migration.deserialize(col.value());
+            reconstituded[i] = Migration.deserialize(col.value(), MessagingService.version_);
             assert version.equals(reconstituded[i].getVersion());
             i++;
         }
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/ReadMessageTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/ReadMessageTest.java
index 8dfabe9a..9a4577eb 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/ReadMessageTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/ReadMessageTest.java
@@ -32,6 +32,7 @@
 import org.apache.cassandra.db.filter.QueryPath;
 import org.apache.cassandra.io.util.DataOutputBuffer;
 
+import org.apache.cassandra.net.MessagingService;
 import org.junit.Test;
 import org.apache.cassandra.utils.ByteBufferUtil;
 
@@ -75,9 +76,9 @@ private ReadCommand serializeAndDeserializeReadMessage(ReadCommand rm) throws IO
         DataOutputBuffer dos = new DataOutputBuffer();
         ByteArrayInputStream bis;
 
-        rms.serialize(rm, dos);
+        rms.serialize(rm, dos, MessagingService.version_);
         bis = new ByteArrayInputStream(dos.getData(), 0, dos.getLength());
-        return rms.deserialize(new DataInputStream(bis));
+        return rms.deserialize(new DataInputStream(bis), MessagingService.version_);
     }
     
     @Test
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/SerializationsTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/SerializationsTest.java
index 5629be0d..757ffa2d 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/SerializationsTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/SerializationsTest.java
@@ -71,12 +71,12 @@ private void testRangeSliceCommandWrite() throws IOException
         
         DataOutputStream dout = getOutput("db.RangeSliceCommand.bin");
         
-        Message.serializer().serialize(namesCmd, dout);
-        Message.serializer().serialize(emptyRangeCmd, dout);
-        Message.serializer().serialize(regRangeCmd, dout);
-        Message.serializer().serialize(namesCmdSup, dout);
-        Message.serializer().serialize(emptyRangeCmdSup, dout);
-        Message.serializer().serialize(regRangeCmdSup, dout);
+        Message.serializer().serialize(namesCmd, dout, getVersion());
+        Message.serializer().serialize(emptyRangeCmd, dout, getVersion());
+        Message.serializer().serialize(regRangeCmd, dout, getVersion());
+        Message.serializer().serialize(namesCmdSup, dout, getVersion());
+        Message.serializer().serialize(emptyRangeCmdSup, dout, getVersion());
+        Message.serializer().serialize(regRangeCmdSup, dout, getVersion());
         dout.close();
     }
     
@@ -89,7 +89,7 @@ public void testRangeSliceCommandRead() throws IOException
         DataInputStream in = getInput("db.RangeSliceCommand.bin");
         for (int i = 0; i < 6; i++)
         {
-            Message msg = Message.serializer().deserialize(in);
+            Message msg = Message.serializer().deserialize(in, getVersion());
             RangeSliceCommand cmd = RangeSliceCommand.read(msg);
         }
         in.close();
@@ -101,12 +101,12 @@ private void testSliceByNamesReadCommandWrite() throws IOException
         SliceByNamesReadCommand superCmd = new SliceByNamesReadCommand(Statics.KS, Statics.Key, Statics.SuperPath, Statics.NamedCols);
         
         DataOutputStream out = getOutput("db.SliceByNamesReadCommand.bin");
-        SliceByNamesReadCommand.serializer().serialize(standardCmd, out);
-        SliceByNamesReadCommand.serializer().serialize(superCmd, out);
-        ReadCommand.serializer().serialize(standardCmd, out);
-        ReadCommand.serializer().serialize(superCmd, out);
-        Message.serializer().serialize(standardCmd.getMessage(MessagingService.version_), out);
-        Message.serializer().serialize(superCmd.getMessage(MessagingService.version_), out);
+        SliceByNamesReadCommand.serializer().serialize(standardCmd, out, getVersion());
+        SliceByNamesReadCommand.serializer().serialize(superCmd, out, getVersion());
+        ReadCommand.serializer().serialize(standardCmd, out, getVersion());
+        ReadCommand.serializer().serialize(superCmd, out, getVersion());
+        Message.serializer().serialize(standardCmd.getMessage(getVersion()), out, getVersion());
+        Message.serializer().serialize(superCmd.getMessage(getVersion()), out, getVersion());
         out.close();
     }
     
@@ -117,12 +117,12 @@ public void testSliceByNamesReadCommandRead() throws IOException
             testSliceByNamesReadCommandWrite();
         
         DataInputStream in = getInput("db.SliceByNamesReadCommand.bin");
-        assert SliceByNamesReadCommand.serializer().deserialize(in) != null;
-        assert SliceByNamesReadCommand.serializer().deserialize(in) != null;
-        assert ReadCommand.serializer().deserialize(in) != null;
-        assert ReadCommand.serializer().deserialize(in) != null;
-        assert Message.serializer().deserialize(in) != null;
-        assert Message.serializer().deserialize(in) != null;
+        assert SliceByNamesReadCommand.serializer().deserialize(in, getVersion()) != null;
+        assert SliceByNamesReadCommand.serializer().deserialize(in, getVersion()) != null;
+        assert ReadCommand.serializer().deserialize(in, getVersion()) != null;
+        assert ReadCommand.serializer().deserialize(in, getVersion()) != null;
+        assert Message.serializer().deserialize(in, getVersion()) != null;
+        assert Message.serializer().deserialize(in, getVersion()) != null;
         in.close();
     }
     
@@ -131,12 +131,12 @@ private void testSliceFromReadCommandWrite() throws IOException
         SliceFromReadCommand standardCmd = new SliceFromReadCommand(Statics.KS, Statics.Key, Statics.StandardPath, Statics.Start, Statics.Stop, true, 100);
         SliceFromReadCommand superCmd = new SliceFromReadCommand(Statics.KS, Statics.Key, Statics.SuperPath, Statics.Start, Statics.Stop, true, 100);
         DataOutputStream out = getOutput("db.SliceFromReadCommand.bin");
-        SliceFromReadCommand.serializer().serialize(standardCmd, out);
-        SliceFromReadCommand.serializer().serialize(superCmd, out);
-        ReadCommand.serializer().serialize(standardCmd, out);
-        ReadCommand.serializer().serialize(superCmd, out);
-        Message.serializer().serialize(standardCmd.getMessage(MessagingService.version_), out);
-        Message.serializer().serialize(superCmd.getMessage(MessagingService.version_), out);
+        SliceFromReadCommand.serializer().serialize(standardCmd, out, getVersion());
+        SliceFromReadCommand.serializer().serialize(superCmd, out, getVersion());
+        ReadCommand.serializer().serialize(standardCmd, out, getVersion());
+        ReadCommand.serializer().serialize(superCmd, out, getVersion());
+        Message.serializer().serialize(standardCmd.getMessage(getVersion()), out, getVersion());
+        Message.serializer().serialize(superCmd.getMessage(getVersion()), out, getVersion());
         out.close();
     }
     
@@ -147,21 +147,21 @@ public void testSliceFromReadCommandRead() throws IOException
             testSliceFromReadCommandWrite();
         
         DataInputStream in = getInput("db.SliceFromReadCommand.bin");
-        assert SliceFromReadCommand.serializer().deserialize(in) != null;
-        assert SliceFromReadCommand.serializer().deserialize(in) != null;
-        assert ReadCommand.serializer().deserialize(in) != null;
-        assert ReadCommand.serializer().deserialize(in) != null;
-        assert Message.serializer().deserialize(in) != null;
-        assert Message.serializer().deserialize(in) != null;
+        assert SliceFromReadCommand.serializer().deserialize(in, getVersion()) != null;
+        assert SliceFromReadCommand.serializer().deserialize(in, getVersion()) != null;
+        assert ReadCommand.serializer().deserialize(in, getVersion()) != null;
+        assert ReadCommand.serializer().deserialize(in, getVersion()) != null;
+        assert Message.serializer().deserialize(in, getVersion()) != null;
+        assert Message.serializer().deserialize(in, getVersion()) != null;
         in.close();
     }
     
     private void testRowWrite() throws IOException
     {
         DataOutputStream out = getOutput("db.Row.bin");
-        Row.serializer().serialize(Statics.StandardRow, out);
-        Row.serializer().serialize(Statics.SuperRow, out);
-        Row.serializer().serialize(Statics.NullRow, out);
+        Row.serializer().serialize(Statics.StandardRow, out, getVersion());
+        Row.serializer().serialize(Statics.SuperRow, out, getVersion());
+        Row.serializer().serialize(Statics.NullRow, out, getVersion());
         out.close();
     }
     
@@ -172,9 +172,9 @@ public void testRowRead() throws IOException
             testRowWrite();
         
         DataInputStream in = getInput("db.Row.bin");
-        assert Row.serializer().deserialize(in) != null;
-        assert Row.serializer().deserialize(in) != null;
-        assert Row.serializer().deserialize(in) != null;
+        assert Row.serializer().deserialize(in, getVersion()) != null;
+        assert Row.serializer().deserialize(in, getVersion()) != null;
+        assert Row.serializer().deserialize(in, getVersion()) != null;
         in.close();
     }
     
@@ -193,18 +193,18 @@ private void restRowMutationWrite() throws IOException
         RowMutation mixedRm = new RowMutation(Statics.KS, Statics.Key, mods);
         
         DataOutputStream out = getOutput("db.RowMutation.bin");
-        RowMutation.serializer().serialize(emptyRm, out);
-        RowMutation.serializer().serialize(standardRowRm, out);
-        RowMutation.serializer().serialize(superRowRm, out);
-        RowMutation.serializer().serialize(standardRm, out);
-        RowMutation.serializer().serialize(superRm, out);
-        RowMutation.serializer().serialize(mixedRm, out);
-        Message.serializer().serialize(emptyRm.getMessage(MessagingService.version_), out);
-        Message.serializer().serialize(standardRowRm.getMessage(MessagingService.version_), out);
-        Message.serializer().serialize(superRowRm.getMessage(MessagingService.version_), out);
-        Message.serializer().serialize(standardRm.getMessage(MessagingService.version_), out);
-        Message.serializer().serialize(superRm.getMessage(MessagingService.version_), out);
-        Message.serializer().serialize(mixedRm.getMessage(MessagingService.version_), out);
+        RowMutation.serializer().serialize(emptyRm, out, getVersion());
+        RowMutation.serializer().serialize(standardRowRm, out, getVersion());
+        RowMutation.serializer().serialize(superRowRm, out, getVersion());
+        RowMutation.serializer().serialize(standardRm, out, getVersion());
+        RowMutation.serializer().serialize(superRm, out, getVersion());
+        RowMutation.serializer().serialize(mixedRm, out, getVersion());
+        Message.serializer().serialize(emptyRm.getMessage(getVersion()), out, getVersion());
+        Message.serializer().serialize(standardRowRm.getMessage(getVersion()), out, getVersion());
+        Message.serializer().serialize(superRowRm.getMessage(getVersion()), out, getVersion());
+        Message.serializer().serialize(standardRm.getMessage(getVersion()), out, getVersion());
+        Message.serializer().serialize(superRm.getMessage(getVersion()), out, getVersion());
+        Message.serializer().serialize(mixedRm.getMessage(getVersion()), out, getVersion());
         out.close(); 
     }
     
@@ -215,18 +215,18 @@ public void testRowMutationRead() throws IOException
             restRowMutationWrite();
         
         DataInputStream in = getInput("db.RowMutation.bin");
-        assert RowMutation.serializer().deserialize(in) != null;
-        assert RowMutation.serializer().deserialize(in) != null;
-        assert RowMutation.serializer().deserialize(in) != null;
-        assert RowMutation.serializer().deserialize(in) != null;
-        assert RowMutation.serializer().deserialize(in) != null;
-        assert RowMutation.serializer().deserialize(in) != null;
-        assert Message.serializer().deserialize(in) != null;
-        assert Message.serializer().deserialize(in) != null;
-        assert Message.serializer().deserialize(in) != null;
-        assert Message.serializer().deserialize(in) != null;
-        assert Message.serializer().deserialize(in) != null;
-        assert Message.serializer().deserialize(in) != null;
+        assert RowMutation.serializer().deserialize(in, getVersion()) != null;
+        assert RowMutation.serializer().deserialize(in, getVersion()) != null;
+        assert RowMutation.serializer().deserialize(in, getVersion()) != null;
+        assert RowMutation.serializer().deserialize(in, getVersion()) != null;
+        assert RowMutation.serializer().deserialize(in, getVersion()) != null;
+        assert RowMutation.serializer().deserialize(in, getVersion()) != null;
+        assert Message.serializer().deserialize(in, getVersion()) != null;
+        assert Message.serializer().deserialize(in, getVersion()) != null;
+        assert Message.serializer().deserialize(in, getVersion()) != null;
+        assert Message.serializer().deserialize(in, getVersion()) != null;
+        assert Message.serializer().deserialize(in, getVersion()) != null;
+        assert Message.serializer().deserialize(in, getVersion()) != null;
         in.close();
     }
     
@@ -236,12 +236,12 @@ public void testTruncateWrite() throws IOException
         TruncateResponse aff = new TruncateResponse(Statics.KS, "Doesn't Matter Either", true);
         TruncateResponse neg = new TruncateResponse(Statics.KS, "Still Doesn't Matter", false);
         DataOutputStream out = getOutput("db.Truncation.bin");
-        Truncation.serializer().serialize(tr, out);
-        TruncateResponse.serializer().serialize(aff, out);
-        TruncateResponse.serializer().serialize(neg, out);
-        Message.serializer().serialize(tr.getMessage(MessagingService.version_), out);
-        Message.serializer().serialize(TruncateResponse.makeTruncateResponseMessage(tr.getMessage(MessagingService.version_), aff), out);
-        Message.serializer().serialize(TruncateResponse.makeTruncateResponseMessage(tr.getMessage(MessagingService.version_), neg), out);
+        Truncation.serializer().serialize(tr, out, getVersion());
+        TruncateResponse.serializer().serialize(aff, out, getVersion());
+        TruncateResponse.serializer().serialize(neg, out, getVersion());
+        Message.serializer().serialize(tr.getMessage(getVersion()), out, getVersion());
+        Message.serializer().serialize(TruncateResponse.makeTruncateResponseMessage(tr.getMessage(getVersion()), aff), out, getVersion());
+        Message.serializer().serialize(TruncateResponse.makeTruncateResponseMessage(tr.getMessage(getVersion()), neg), out, getVersion());
         // todo: notice how CF names weren't validated.
         out.close();
     }
@@ -253,12 +253,12 @@ public void testTruncateRead() throws IOException
             testTruncateWrite();
         
         DataInputStream in = getInput("db.Truncation.bin");
-        assert Truncation.serializer().deserialize(in) != null;
-        assert TruncateResponse.serializer().deserialize(in) != null;
-        assert TruncateResponse.serializer().deserialize(in) != null;
-        assert Message.serializer().deserialize(in) != null;
-        assert Message.serializer().deserialize(in) != null;
-        assert Message.serializer().deserialize(in) != null;
+        assert Truncation.serializer().deserialize(in, getVersion()) != null;
+        assert TruncateResponse.serializer().deserialize(in, getVersion()) != null;
+        assert TruncateResponse.serializer().deserialize(in, getVersion()) != null;
+        assert Message.serializer().deserialize(in, getVersion()) != null;
+        assert Message.serializer().deserialize(in, getVersion()) != null;
+        assert Message.serializer().deserialize(in, getVersion()) != null;
         in.close();
     }
     
@@ -267,8 +267,8 @@ private void testWriteResponseWrite() throws IOException
         WriteResponse aff = new WriteResponse(Statics.KS, Statics.Key, true);
         WriteResponse neg = new WriteResponse(Statics.KS, Statics.Key, false);
         DataOutputStream out = getOutput("db.WriteResponse.bin");
-        WriteResponse.serializer().serialize(aff, out);
-        WriteResponse.serializer().serialize(neg, out);
+        WriteResponse.serializer().serialize(aff, out, getVersion());
+        WriteResponse.serializer().serialize(neg, out, getVersion());
         out.close();
     }
     
@@ -279,8 +279,8 @@ public void testWriteResponseRead() throws IOException
             testWriteResponseWrite();
         
         DataInputStream in = getInput("db.WriteResponse.bin");
-        assert WriteResponse.serializer().deserialize(in) != null;
-        assert WriteResponse.serializer().deserialize(in) != null;
+        assert WriteResponse.serializer().deserialize(in, getVersion()) != null;
+        assert WriteResponse.serializer().deserialize(in, getVersion()) != null;
         in.close();
     }
     
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/gms/GossipDigestTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/gms/GossipDigestTest.java
index 1353ac9a..b8f4aba4 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/gms/GossipDigestTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/gms/GossipDigestTest.java
@@ -29,6 +29,8 @@
 
 import org.apache.cassandra.io.util.DataOutputBuffer;
 import java.net.InetAddress;
+
+import org.apache.cassandra.net.MessagingService;
 import org.junit.Test;
 
 public class GossipDigestTest
@@ -48,10 +50,10 @@ public void test() throws IOException
         
         //test the serialization and equals
         DataOutputBuffer output = new DataOutputBuffer();
-        GossipDigest.serializer().serialize(expected, output);
+        GossipDigest.serializer().serialize(expected, output, MessagingService.version_);
         
         ByteArrayInputStream input = new ByteArrayInputStream(output.getData(), 0, output.getLength());
-        GossipDigest actual = GossipDigest.serializer().deserialize(new DataInputStream(input));
+        GossipDigest actual = GossipDigest.serializer().deserialize(new DataInputStream(input), MessagingService.version_);
         assertEquals(0, expected.compareTo(actual));
     }
 
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/gms/SerializationsTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/gms/SerializationsTest.java
index 3ef3338e..0140afa5 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/gms/SerializationsTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/gms/SerializationsTest.java
@@ -40,10 +40,10 @@
     private void testEndpointStateWrite() throws IOException 
     {
         DataOutputStream out = getOutput("gms.EndpointState.bin");
-        HeartBeatState.serializer().serialize(Statics.HeartbeatSt, out);
-        EndpointState.serializer().serialize(Statics.EndpointSt, out);
-        VersionedValue.serializer.serialize(Statics.vv0, out);
-        VersionedValue.serializer.serialize(Statics.vv1, out);
+        HeartBeatState.serializer().serialize(Statics.HeartbeatSt, out, getVersion());
+        EndpointState.serializer().serialize(Statics.EndpointSt, out, getVersion());
+        VersionedValue.serializer.serialize(Statics.vv0, out, getVersion());
+        VersionedValue.serializer.serialize(Statics.vv1, out, getVersion());
         out.close();
     }
     
@@ -54,10 +54,10 @@ public void testEndpointStateRead() throws IOException
             testEndpointStateWrite();
         
         DataInputStream in = getInput("gms.EndpointState.bin");
-        assert HeartBeatState.serializer().deserialize(in) != null;
-        assert EndpointState.serializer().deserialize(in) != null;
-        assert VersionedValue.serializer.deserialize(in) != null;
-        assert VersionedValue.serializer.deserialize(in) != null;
+        assert HeartBeatState.serializer().deserialize(in, getVersion()) != null;
+        assert EndpointState.serializer().deserialize(in, getVersion()) != null;
+        assert VersionedValue.serializer.deserialize(in, getVersion()) != null;
+        assert VersionedValue.serializer.deserialize(in, getVersion()) != null;
         in.close();
     }
      
@@ -72,10 +72,10 @@ private void testGossipDigestWrite() throws IOException
         
         DataOutputStream out = getOutput("gms.Gossip.bin");
         for (GossipDigest gd : Statics.Digests)
-            GossipDigest.serializer().serialize(gd, out);
-        GossipDigestAckMessage.serializer().serialize(ack, out);
-        GossipDigestAck2Message.serializer().serialize(ack2, out);
-        GossipDigestSynMessage.serializer().serialize(syn, out);
+            GossipDigest.serializer().serialize(gd, out, getVersion());
+        GossipDigestAckMessage.serializer().serialize(ack, out, getVersion());
+        GossipDigestAck2Message.serializer().serialize(ack2, out, getVersion());
+        GossipDigestSynMessage.serializer().serialize(syn, out, getVersion());
         out.close();
     }
     
@@ -88,10 +88,10 @@ public void testGossipDigestRead() throws IOException
         int count = 0;
         DataInputStream in = getInput("gms.Gossip.bin");
         while (count < Statics.Digests.size())
-            assert GossipDigestAck2Message.serializer().deserialize(in) != null;
-        assert GossipDigestAckMessage.serializer().deserialize(in) != null;
-        assert GossipDigestAck2Message.serializer().deserialize(in) != null;
-        assert GossipDigestSynMessage.serializer().deserialize(in) != null;
+            assert GossipDigestAck2Message.serializer().deserialize(in, getVersion()) != null;
+        assert GossipDigestAckMessage.serializer().deserialize(in, getVersion()) != null;
+        assert GossipDigestAck2Message.serializer().deserialize(in, getVersion()) != null;
+        assert GossipDigestSynMessage.serializer().deserialize(in, getVersion()) != null;
         in.close();
     }
     
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/io/CompactSerializerTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/io/CompactSerializerTest.java
index 749445a8..0781995f 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/io/CompactSerializerTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/io/CompactSerializerTest.java
@@ -67,8 +67,6 @@ public static void scanClasspath()
         expectedClassNames.add("StreamHeaderSerializer");
         expectedClassNames.add("FileStatusSerializer");
         expectedClassNames.add("StreamRequestMessageSerializer");
-        expectedClassNames.add("BloomFilterSerializer");
-        expectedClassNames.add("EstimatedHistogramSerializer");
         expectedClassNames.add("LegacyBloomFilterSerializer");
         expectedClassNames.add("CounterMutationSerializer");
         
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/io/LazilyCompactedRowTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/io/LazilyCompactedRowTest.java
index b1124a7a..010bef5c 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/io/LazilyCompactedRowTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/io/LazilyCompactedRowTest.java
@@ -43,6 +43,7 @@
 import org.apache.cassandra.io.sstable.SSTableReader;
 import org.apache.cassandra.io.util.DataOutputBuffer;
 import org.apache.cassandra.io.util.MappedFileDataInput;
+import org.apache.cassandra.net.MessagingService;
 import org.apache.cassandra.utils.ByteBufferUtil;
 
 import org.junit.Test;
@@ -202,7 +203,7 @@ public void testOneRowManyColumns() throws IOException, ExecutionException, Inte
             rm.add(new QueryPath("Standard1", null, ByteBufferUtil.bytes(i)), ByteBufferUtil.EMPTY_BYTE_BUFFER, 0);
         rm.apply();
         DataOutputBuffer out = new DataOutputBuffer();
-        RowMutation.serializer().serialize(rm, out);
+        RowMutation.serializer().serialize(rm, out, MessagingService.version_);
         assert out.getLength() > DatabaseDescriptor.getColumnIndexSize();
         cfs.forceBlockingFlush();
 
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/service/SerializationsTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/service/SerializationsTest.java
index 798032a4..bb000c0c 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/service/SerializationsTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/service/SerializationsTest.java
@@ -42,8 +42,8 @@
     private void testTreeRequestWrite() throws IOException
     {
         DataOutputStream out = getOutput("service.TreeRequest.bin");
-        AntiEntropyService.TreeRequestVerbHandler.SERIALIZER.serialize(Statics.req, out);
-        Message.serializer().serialize(AntiEntropyService.TreeRequestVerbHandler.makeVerb(Statics.req, MessagingService.version_), out);
+        AntiEntropyService.TreeRequestVerbHandler.SERIALIZER.serialize(Statics.req, out, getVersion());
+        Message.serializer().serialize(AntiEntropyService.TreeRequestVerbHandler.makeVerb(Statics.req, getVersion()), out, getVersion());
         out.close();
     }
     
@@ -54,8 +54,8 @@ public void testTreeRequestRead() throws IOException
             testTreeRequestWrite();
         
         DataInputStream in = getInput("service.TreeRequest.bin");
-        assert AntiEntropyService.TreeRequestVerbHandler.SERIALIZER.deserialize(in) != null;
-        assert Message.serializer().deserialize(in) != null;
+        assert AntiEntropyService.TreeRequestVerbHandler.SERIALIZER.deserialize(in, getVersion()) != null;
+        assert Message.serializer().deserialize(in, getVersion()) != null;
         in.close();
     }
     
@@ -73,10 +73,10 @@ private void testTreeResponseWrite() throws IOException
         }
         AntiEntropyService.Validator v1 = new AntiEntropyService.Validator(Statics.req, mt);
         DataOutputStream out = getOutput("service.TreeResponse.bin");
-        AntiEntropyService.TreeResponseVerbHandler.SERIALIZER.serialize(v0, out);
-        AntiEntropyService.TreeResponseVerbHandler.SERIALIZER.serialize(v1, out);
-        Message.serializer().serialize(AntiEntropyService.TreeResponseVerbHandler.makeVerb(FBUtilities.getLocalAddress(), v0), out);
-        Message.serializer().serialize(AntiEntropyService.TreeResponseVerbHandler.makeVerb(FBUtilities.getLocalAddress(), v1), out);
+        AntiEntropyService.TreeResponseVerbHandler.SERIALIZER.serialize(v0, out, getVersion());
+        AntiEntropyService.TreeResponseVerbHandler.SERIALIZER.serialize(v1, out, getVersion());
+        Message.serializer().serialize(AntiEntropyService.TreeResponseVerbHandler.makeVerb(FBUtilities.getLocalAddress(), v0), out, getVersion());
+        Message.serializer().serialize(AntiEntropyService.TreeResponseVerbHandler.makeVerb(FBUtilities.getLocalAddress(), v1), out, getVersion());
         out.close();
     }
     
@@ -87,10 +87,10 @@ public void testTreeResponseRead() throws IOException
             testTreeResponseWrite();
         
         DataInputStream in = getInput("service.TreeResponse.bin");
-        assert AntiEntropyService.TreeResponseVerbHandler.SERIALIZER.deserialize(in) != null;
-        assert AntiEntropyService.TreeResponseVerbHandler.SERIALIZER.deserialize(in) != null;
-        assert Message.serializer().deserialize(in) != null;
-        assert Message.serializer().deserialize(in) != null;
+        assert AntiEntropyService.TreeResponseVerbHandler.SERIALIZER.deserialize(in, getVersion()) != null;
+        assert AntiEntropyService.TreeResponseVerbHandler.SERIALIZER.deserialize(in, getVersion()) != null;
+        assert Message.serializer().deserialize(in, getVersion()) != null;
+        assert Message.serializer().deserialize(in, getVersion()) != null;
         in.close();
     }
     
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/streaming/SerializationsTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/streaming/SerializationsTest.java
index c0767bc7..f72e51be 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/streaming/SerializationsTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/streaming/SerializationsTest.java
@@ -55,10 +55,10 @@ private void testPendingFileWrite() throws IOException
         PendingFile noSST = makePendingFile(false, "also_fake", 100, OperationType.RESTORE_REPLICA_COUNT);
         
         DataOutputStream out = getOutput("streaming.PendingFile.bin");
-        PendingFile.serializer().serialize(normal, out);
-        PendingFile.serializer().serialize(noSections, out);
-        PendingFile.serializer().serialize(noSST, out);
-        PendingFile.serializer().serialize(null, out);
+        PendingFile.serializer().serialize(normal, out, getVersion());
+        PendingFile.serializer().serialize(noSections, out, getVersion());
+        PendingFile.serializer().serialize(noSST, out, getVersion());
+        PendingFile.serializer().serialize(null, out, getVersion());
         out.close();
     }
     
@@ -69,10 +69,10 @@ public void testPendingFileRead() throws IOException
             testPendingFileWrite();
         
         DataInputStream in = getInput("streaming.PendingFile.bin");
-        assert PendingFile.serializer().deserialize(in) != null;
-        assert PendingFile.serializer().deserialize(in) != null;
-        assert PendingFile.serializer().deserialize(in) != null;
-        assert PendingFile.serializer().deserialize(in) == null;
+        assert PendingFile.serializer().deserialize(in, getVersion()) != null;
+        assert PendingFile.serializer().deserialize(in, getVersion()) != null;
+        assert PendingFile.serializer().deserialize(in, getVersion()) != null;
+        assert PendingFile.serializer().deserialize(in, getVersion()) == null;
         in.close();
     }
     
@@ -88,11 +88,11 @@ private void testStreamHeaderWrite() throws IOException
         StreamHeader sh4 = new StreamHeader("Keyspace1", 125L, makePendingFile(true, "bb", 100, OperationType.BOOTSTRAP), new ArrayList<PendingFile>());
         
         DataOutputStream out = getOutput("streaming.StreamHeader.bin");
-        StreamHeader.serializer().serialize(sh0, out);
-        StreamHeader.serializer().serialize(sh1, out);
-        StreamHeader.serializer().serialize(sh2, out);
-        StreamHeader.serializer().serialize(sh3, out);
-        StreamHeader.serializer().serialize(sh4, out);
+        StreamHeader.serializer().serialize(sh0, out, getVersion());
+        StreamHeader.serializer().serialize(sh1, out, getVersion());
+        StreamHeader.serializer().serialize(sh2, out, getVersion());
+        StreamHeader.serializer().serialize(sh3, out, getVersion());
+        StreamHeader.serializer().serialize(sh4, out, getVersion());
         out.close();
     }
     
@@ -103,11 +103,11 @@ public void testStreamHeaderRead() throws IOException
             testStreamHeaderWrite();
         
         DataInputStream in = getInput("streaming.StreamHeader.bin");
-        assert StreamHeader.serializer().deserialize(in) != null;
-        assert StreamHeader.serializer().deserialize(in) != null;
-        assert StreamHeader.serializer().deserialize(in) != null;
-        assert StreamHeader.serializer().deserialize(in) != null;
-        assert StreamHeader.serializer().deserialize(in) != null;
+        assert StreamHeader.serializer().deserialize(in, getVersion()) != null;
+        assert StreamHeader.serializer().deserialize(in, getVersion()) != null;
+        assert StreamHeader.serializer().deserialize(in, getVersion()) != null;
+        assert StreamHeader.serializer().deserialize(in, getVersion()) != null;
+        assert StreamHeader.serializer().deserialize(in, getVersion()) != null;
         in.close();
     }
     
@@ -115,8 +115,8 @@ private void testStreamReplyWrite() throws IOException
     {
         StreamReply rep = new StreamReply("this is a file", 123L, StreamReply.Status.FILE_FINISHED);
         DataOutputStream out = getOutput("streaming.StreamReply.bin");
-        StreamReply.serializer.serialize(rep, out);
-        Message.serializer().serialize(rep.getMessage(MessagingService.version_), out);
+        StreamReply.serializer.serialize(rep, out, getVersion());
+        Message.serializer().serialize(rep.getMessage(getVersion()), out, getVersion());
         out.close();
     }
     
@@ -127,8 +127,8 @@ public void testStreamReplyRead() throws IOException
             testStreamReplyWrite();
         
         DataInputStream in = getInput("streaming.StreamReply.bin");
-        assert StreamReply.serializer.deserialize(in) != null;
-        assert Message.serializer().deserialize(in) != null;
+        assert StreamReply.serializer.deserialize(in, getVersion()) != null;
+        assert Message.serializer().deserialize(in, getVersion()) != null;
         in.close();
     }
     
@@ -151,12 +151,12 @@ private void testStreamRequestMessageWrite() throws IOException
         StreamRequestMessage msg2 = new StreamRequestMessage(FBUtilities.getLocalAddress(), makePendingFile(false, "aa", 100, OperationType.BOOTSTRAP), 124L);
         
         DataOutputStream out = getOutput("streaming.StreamRequestMessage.bin");
-        StreamRequestMessage.serializer().serialize(msg0, out);
-        StreamRequestMessage.serializer().serialize(msg1, out);
-        StreamRequestMessage.serializer().serialize(msg2, out);
-        Message.serializer().serialize(msg0.getMessage(MessagingService.version_), out);
-        Message.serializer().serialize(msg1.getMessage(MessagingService.version_), out);
-        Message.serializer().serialize(msg2.getMessage(MessagingService.version_), out);
+        StreamRequestMessage.serializer().serialize(msg0, out, getVersion());
+        StreamRequestMessage.serializer().serialize(msg1, out, getVersion());
+        StreamRequestMessage.serializer().serialize(msg2, out, getVersion());
+        Message.serializer().serialize(msg0.getMessage(getVersion()), out, getVersion());
+        Message.serializer().serialize(msg1.getMessage(getVersion()), out, getVersion());
+        Message.serializer().serialize(msg2.getMessage(getVersion()), out, getVersion());
         out.close();
     }
     
@@ -167,12 +167,12 @@ public void testStreamRequestMessageRead() throws IOException
             testStreamRequestMessageWrite();
         
         DataInputStream in = getInput("streaming.StreamRequestMessage.bin");
-        assert StreamRequestMessage.serializer().deserialize(in) != null;
-        assert StreamRequestMessage.serializer().deserialize(in) != null;
-        assert StreamRequestMessage.serializer().deserialize(in) != null;
-        assert Message.serializer().deserialize(in) != null;
-        assert Message.serializer().deserialize(in) != null;
-        assert Message.serializer().deserialize(in) != null;
+        assert StreamRequestMessage.serializer().deserialize(in, getVersion()) != null;
+        assert StreamRequestMessage.serializer().deserialize(in, getVersion()) != null;
+        assert StreamRequestMessage.serializer().deserialize(in, getVersion()) != null;
+        assert Message.serializer().deserialize(in, getVersion()) != null;
+        assert Message.serializer().deserialize(in, getVersion()) != null;
+        assert Message.serializer().deserialize(in, getVersion()) != null;
         in.close();
     }
     
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/streaming/StreamUtil.java b/cassandra/trunk/test/unit/org/apache/cassandra/streaming/StreamUtil.java
index cfd370b5..e029666b 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/streaming/StreamUtil.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/streaming/StreamUtil.java
@@ -41,7 +41,7 @@ static public void finishStreamRequest(Message msg, InetAddress to)
 
         try
         {
-            StreamRequestMessage srm = StreamRequestMessage.serializer().deserialize(new DataInputStream(bufIn));
+            StreamRequestMessage srm = StreamRequestMessage.serializer().deserialize(new DataInputStream(bufIn), MessagingService.version_);
             StreamInSession session = StreamInSession.get(to, srm.sessionId);
             session.closeIfFinished();
         }
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/utils/LegacyBloomFilterTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/utils/LegacyBloomFilterTest.java
index 1d3b1669..e5aaa4e0 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/utils/LegacyBloomFilterTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/utils/LegacyBloomFilterTest.java
@@ -43,10 +43,10 @@ public static Filter testSerialize(LegacyBloomFilter f) throws IOException
     {
         f.add(ByteBufferUtil.bytes("a"));
         DataOutputBuffer out = new DataOutputBuffer();
-        f.serializer().serialize(f, out);
+        f.serializer().serialize(f, out, 0);
 
         ByteArrayInputStream in = new ByteArrayInputStream(out.getData(), 0, out.getLength());
-        LegacyBloomFilter f2 = f.serializer().deserialize(new DataInputStream(in));
+        LegacyBloomFilter f2 = f.serializer().deserialize(new DataInputStream(in), 0);
 
         assert f2.isPresent(ByteBufferUtil.bytes("a"));
         assert !f2.isPresent(ByteBufferUtil.bytes("b"));
@@ -107,12 +107,6 @@ public void testWords()
                                       new KeyGenerator.WordGenerator(1, 2));
     }
 
-    @Test
-    public void testSerialize() throws IOException
-    {
-        LegacyBloomFilterTest.testSerialize(bf);
-    }
-
     public void testManyHashes(Iterator<ByteBuffer> keys)
     {
         int MAX_HASH_COUNT = 128;
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/utils/SerializationsTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/utils/SerializationsTest.java
index eebed99f..31f894d5 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/utils/SerializationsTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/utils/SerializationsTest.java
@@ -65,8 +65,8 @@ private void testLegacyBloomFilterWrite() throws IOException
             b.add(key);
         }
         DataOutputStream out = getOutput("utils.LegacyBloomFilter.bin");
-        LegacyBloomFilter.serializer().serialize(a, out);
-        LegacyBloomFilter.serializer().serialize(b, out);
+        LegacyBloomFilter.serializer().serialize(a, out, getVersion());
+        LegacyBloomFilter.serializer().serialize(b, out, getVersion());
         out.close();
     }
     
@@ -77,7 +77,7 @@ public void testLegacyBloomFilterRead() throws IOException
             testLegacyBloomFilterWrite();
         
         DataInputStream in = getInput("utils.LegacyBloomFilter.bin");
-        assert LegacyBloomFilter.serializer().deserialize(in) != null;
+        assert LegacyBloomFilter.serializer().deserialize(in, getVersion()) != null;
         in.close();
     }
     
