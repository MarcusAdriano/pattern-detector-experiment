diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/load/ColumnInfo.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/load/ColumnInfo.java
index 5f1bebf1..43e6e268 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/load/ColumnInfo.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/load/ColumnInfo.java
@@ -33,6 +33,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.ResultSetMetaData;
 import java.sql.DatabaseMetaData;
 import java.util.*;
+import org.apache.derby.iapi.jdbc.EngineConnection;
 
 /**
  *	
@@ -86,6 +87,11 @@ public ColumnInfo(Connection conn,
 		noOfColumns = 0;
 		this.conn = conn;
 
+        if (sName == null) {
+            // Use the current schema if no schema is specified.
+            sName = ((EngineConnection) conn).getCurrentSchemaName();
+        }
+
 		this.schemaName = sName;
 		this.tableName =  tName;
 
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportTest.java
index 7a0b39c6..a2760429 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportTest.java
@@ -161,6 +161,25 @@ public void testEarlyEndOfFile() throws Exception {
 		}
 	}
 
+    /**
+     * Test that import to a table in the default schema works if a table
+     * with the same name exists in a different schema (DERBY-3296).
+     */
+    public void testImportWithSameNameInDifferentSchema() throws Exception {
+        resetTables();
+        doExport(null, "T1", null, null, null);
+        Statement s = createStatement();
+        s.executeUpdate("create table otherschema.t2(x int)");
+        // toSchema must be null to trigger the bug. The bug is not exposed if
+        // the schema is explicit.
+        doImport("T1", null, "T2", null, null, null, 0);
+        // Check that the rows were imported to the correct table (APP.T2)
+        JDBC.assertSingleValueResultSet(
+                s.executeQuery("select count(*) from app.t2"), "4");
+        setAutoCommit(false); // requirement for dropSchema()
+        JDBC.dropSchema(getConnection().getMetaData(), "OTHERSCHEMA");
+    }
+
     /**
      * Test that quotes in the arguments to the export and import procedures
      * are handled properly (DERBY-4042).
