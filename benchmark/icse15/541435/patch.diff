diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/error/StandardException.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/error/StandardException.java
index 8f66a22c..b8415351 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/error/StandardException.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/error/StandardException.java
@@ -24,6 +24,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.reference.SQLState;
 
 import org.apache.derby.impl.jdbc.EmbedSQLException;
+import org.apache.derby.impl.jdbc.Util;
 import org.apache.derby.iapi.error.ExceptionSeverity;
 import org.apache.derby.iapi.services.i18n.MessageService;
 import org.apache.derby.iapi.services.sanity.SanityManager;
@@ -436,6 +437,18 @@ public static StandardException newPreLocalizedException( String MessageID,
 
 	public static StandardException unexpectedUserException(Throwable t)
 	{
+        // If the exception is an SQLException generated by Derby, it has an
+        // argument ferry which is an EmbedSQLException. Use this to check
+        // whether the exception was generated by Derby.
+        EmbedSQLException ferry = null;
+        if (t instanceof SQLException) {
+            SQLException sqle =
+                Util.getExceptionFactory().getArgumentFerry((SQLException) t);
+            if (sqle instanceof EmbedSQLException) {
+                ferry = (EmbedSQLException) sqle;
+            }
+        }
+
 		/*
 		** If we have a SQLException that isn't an EmbedSQLException
 		** (i.e. it didn't come from Derby), then we check
@@ -443,8 +456,7 @@ public static StandardException unexpectedUserException(Throwable t)
 		** (38001-38XXX).  If so, then we convert it into a 
 		** StandardException without further ado.
 		*/ 
-		if ((t instanceof SQLException) &&
-		    !(t instanceof EmbedSQLException)) 
+		if ((t instanceof SQLException) && (ferry == null))
 		{
 			SQLException sqlex  = (SQLException)t;
 			String state = sqlex.getSQLState();
@@ -463,10 +475,9 @@ public static StandardException unexpectedUserException(Throwable t)
 		}
 
 		// Look for simple wrappers for 3.0.1 - will be cleaned up in main
-		if (t instanceof EmbedSQLException) {
-			EmbedSQLException csqle = (EmbedSQLException) t;
-			if (csqle.isSimpleWrapper()) {
-				Throwable wrapped = csqle.getCause();
+		if (ferry != null) {
+			if (ferry.isSimpleWrapper()) {
+				Throwable wrapped = ferry.getCause();
 				if (wrapped instanceof StandardException)
 					return (StandardException) wrapped;
 			}
@@ -514,8 +525,8 @@ public static StandardException unexpectedUserException(Throwable t)
 			String	detailMessage;
 			boolean derbyException = false;
 
-			if (t instanceof EmbedSQLException) {
-				detailMessage = ((EmbedSQLException) t).toString();
+			if (ferry != null) {
+				detailMessage = ferry.toString();
 				derbyException = true;
 			}
 			else {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
index 3c78877b..e0fbd201 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
@@ -4404,7 +4404,7 @@ static final SQLException noStateChangeException(Throwable thrownException) {
 		// the ResultSet or the Statement. So we only need
 		// to convert the exception to a SQLException.
 
-		return TransactionResourceImpl.wrapInSQLException((SQLException) null, thrownException);
+		return TransactionResourceImpl.wrapInSQLException(thrownException);
 
 	}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java
index 9cb95816..a3612e5f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/SQLExceptionFactory40.java
@@ -133,7 +133,9 @@ public	SQLException	getArgumentFerry(SQLException se)
 	{
         // Generate an EmbedSQLException
         SQLException e =
-            super.getSQLException(message, messageId, next, severity, t, args);
+            super.getSQLException(message, messageId,
+                (next == null ? null : getArgumentFerry(next)),
+                severity, t, args);
         return e;
 	}
 	
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java
index 44cbda27..472d33a5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java
@@ -342,7 +342,7 @@ final SQLException handleException(Throwable thrownException,
 
 
 
-			return wrapInSQLException((SQLException) null, thrownException);
+			return wrapInSQLException(thrownException);
 
 		} catch (Throwable t) {
 
@@ -355,16 +355,16 @@ final SQLException handleException(Throwable thrownException,
 			   We assume if we are in this degenerate
 			   case that it is actually a java exception
 			 */
-			throw wrapInSQLException((SQLException) null, t);
+			throw wrapInSQLException(t);
 			//throw t;
 		}
 
 	}
 		 
-	public static final SQLException wrapInSQLException(SQLException sqlException, Throwable thrownException) {
+	public static SQLException wrapInSQLException(Throwable thrownException) {
 
 		if (thrownException == null)
-			return sqlException;
+			return null;
 
 		SQLException nextSQLException;
 
@@ -377,30 +377,17 @@ else if (thrownException instanceof StandardException) {
 
 			StandardException se = (StandardException) thrownException;
 
+            if (se.getCause() == null) {
 			nextSQLException = Util.generateCsSQLException(se);
-
-			wrapInSQLException(nextSQLException, se.getCause());
-
 		} else {
-
-			nextSQLException = Util.javaException(thrownException);
-
-			// special case some java exceptions that have nested exceptions themselves
-			Throwable nestedByJVM = null;
-			if (thrownException instanceof ExceptionInInitializerError) {
-				nestedByJVM = ((ExceptionInInitializerError) thrownException).getException();
-			} else if (thrownException instanceof java.lang.reflect.InvocationTargetException) {
-				nestedByJVM = ((java.lang.reflect.InvocationTargetException) thrownException).getTargetException();
+                nextSQLException = Util.seeNextException(se.getMessageId(),
+                        se.getArguments(), wrapInSQLException(se.getCause()));
 			}
 
-			if (nestedByJVM != null) {
-				wrapInSQLException(nextSQLException, nestedByJVM);
-			}
+		} else {
 			
-		}
+			nextSQLException = Util.javaException(thrownException);
 
-		if (sqlException != null) {
-			sqlException.setNextException(nextSQLException);
 		}
 
 		return nextSQLException;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util.java
index c78baae7..f743b311 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/Util.java
@@ -231,8 +231,20 @@ public static SQLException javaException(Throwable t) {
 		msg = t.getMessage();
 		if (msg == null) msg = "";
 		name = t.getClass().getName();
+        SQLException next = null;
+        Throwable cause = t.getCause();
+        if (cause != null) {
+            if (cause instanceof SQLException) {
+                next = (SQLException) cause;
+            } else if (cause instanceof StandardException) {
+                next = generateCsSQLException((StandardException) cause);
+            } else {
+                next = javaException(cause);
+            }
+        }
 		return newEmbedSQLException(SQLState.JAVA_EXCEPTION,
-			new Object[] {name, msg}, ExceptionSeverity.NO_APPLICABLE_SEVERITY, t);
+                new Object[] {name, msg}, next,
+                ExceptionSeverity.NO_APPLICABLE_SEVERITY, t);
 	}
 
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedXAResource.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedXAResource.java
index db53fcd7..b5ae2759 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedXAResource.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedXAResource.java
@@ -771,8 +771,7 @@ else if (message != null)
      */
     private static XAException wrapInXAException(StandardException se) {
         return wrapInXAException(
-                TransactionResourceImpl.wrapInSQLException(
-                (SQLException) null, se));
+                TransactionResourceImpl.wrapInSQLException(se));
     }
     
     /**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java
index 3347272b..9a758503 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ProcedureInTriggerTest.java
@@ -235,12 +235,8 @@ public void testModifiesSql() throws SQLException {
         try {
             s.execute("insert into t2 values (1,2), (2,4)");
         } catch (SQLException se) {
-            //--- Bug DERBY-1629 -- in JDK 1.6 you only get 38001, not 38000
-            if (!JDBC.vmSupportsJDBC4())
-            {
                 assertSQLState("38000", se);
                 se = se.getNextException();
-            }
             // Client does not get chained exceptions
             if (usingEmbedded())
                 assertSQLState("38001", se);           
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java
index c1be48c2..763c9c82 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java
@@ -625,13 +625,7 @@ private void checkIllegalUses(Statement st, String vtiTableName,
         cSt.setString(1, "SYSCS_DIAG");
         cSt.setString(2, vtiTableName.toUpperCase());
 
-        /* Currently BaseJDBCTestCase.assertSQLState() is unable
-         * to find nested SQLSTATEs with 1.6 JVMs, so we have to
-         * check for the top-level SQLSTATE in that case.  When
-         * that changes the "JDBC.vmSupportsJDBC4()" call can be
-         * removed from the following line.  DERBY-1440.
-         */
-        assertStatementError(JDBC.vmSupportsJDBC4() ? "38000" : "42X62", cSt);
+        assertStatementError("42X62", cSt);
         
         cSt = prepareCall(
             "call SYSCS_UTIL.SYSCS_INPLACE_COMPRESS_TABLE(?, ?, 1, 1, 1)");
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLTypeAndOpsTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLTypeAndOpsTest.java
index 00a49271..fa29da58 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLTypeAndOpsTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XMLTypeAndOpsTest.java
@@ -349,18 +349,12 @@ public void testIllegalOps() throws Exception
             "CALL SYSCS_UTIL.SYSCS_EXPORT_TABLE ("
             + "  null, 'T1', 'xmlexport.del', null, null, null)");
 
-        /* Currently BaseJDBCTestCase.assertSQLState() is unable
-         * to find nested SQLSTATEs with 1.6 JVMs, so we have to
-         * check for the top-level SQLSTATE in that case.  When
-         * that changes the "JDBC.vmSupportsJDBC4()" call can be
-         * removed from the following line.
-         */
-        assertStatementError(JDBC.vmSupportsJDBC4() ? "38000" : "42Z71", cSt);
+        assertStatementError("42Z71", cSt);
         
         cSt = prepareCall(
             " CALL SYSCS_UTIL.SYSCS_EXPORT_QUERY("
             + "  'select x from t1', 'xmlexport.del', null, null, null)");
-        assertStatementError(JDBC.vmSupportsJDBC4() ? "38000" : "42Z71", cSt);
+        assertStatementError("42Z71", cSt);
 
         cSt = prepareCall(
             " CALL SYSCS_UTIL.SYSCS_IMPORT_TABLE ("
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportBinaryDataTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportBinaryDataTest.java
index 672eb388..d9ab4603 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportBinaryDataTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportBinaryDataTest.java
@@ -195,25 +195,17 @@ public void testImportExportInvalideDelimiters()
 
         doExportTable("APP", "BIN_TAB", fileName, null, null , null);
 
-        /* Currently BaseJDBCTestCase.assertSQLState() is unable
-         * to find nested SQLSTATEs with 1.6 JVMs, so we have to
-         * check for the top-level SQLSTATE in that case.  When
-         * that changes the "JDBC.vmSupportsJDBC4()" call can be
-         * removed from the following assertSQLState() calls.
-         * (DERBY-1440)
-         */
-
         try {
             doImportTable("APP", "BIN_TAB_IMP", fileName, "2", null, null, 0);
         } catch (SQLException e) {
-             assertSQLState(JDBC.vmSupportsJDBC4() ? "38000": "XIE0J", e);
+             assertSQLState("XIE0J", e);
         }
 
         try {
             doImportData(null, "BIN_TAB_IMP", null, 
                          null,  fileName, null, "c", null, 1);
         } catch (SQLException e) {
-            assertSQLState(JDBC.vmSupportsJDBC4() ? "38000": "XIE0J", e);
+            assertSQLState("XIE0J", e);
         }
     }
 
@@ -258,7 +250,7 @@ public void testImportWitgInvalidHexStrings()
             doImportTable("APP", "BIN_TAB_IMP", fileName, null, null, null, 0);
             fail("import did not fail on data with invalid hex string");
         } catch (SQLException e) {
-             assertSQLState(JDBC.vmSupportsJDBC4() ? "XIE0R": "XIE0N", e);
+             assertSQLState("XIE0N", e);
         }
 
         try {
@@ -268,7 +260,7 @@ public void testImportWitgInvalidHexStrings()
                          fileName, null, null, null, 1);
             fail("import did not fail on data with invalid hex strings");
         } catch (SQLException e) {
-            assertSQLState(JDBC.vmSupportsJDBC4() ? "XIE0R": "XIE0N", e);
+            assertSQLState("XIE0N", e);
         }
         
         try {
@@ -278,7 +270,7 @@ public void testImportWitgInvalidHexStrings()
                          fileName, null, null, null, 1);
             fail("import did not fail on data with invalid hex strings");
         } catch (SQLException e) {
-            assertSQLState(JDBC.vmSupportsJDBC4() ? "XIE0R": "XIE0N", e);
+            assertSQLState("XIE0N", e);
         }
     }
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportLobTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportLobTest.java
index 0c6407c8..609f9ebf 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportLobTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportLobTest.java
@@ -226,7 +226,7 @@ public void testImportWithInvalidHexStrings()
             doImportTable("APP", "BOOKS_IMP", fileName, null, null, null, 0);
             fail("import did not fail on data with invalid hex string");
         } catch (SQLException e) {
-             assertSQLState(JDBC.vmSupportsJDBC4() ? "XIE0R": "XIE0N", e);
+             assertSQLState("XIE0N", e);
         }
 
         try {
@@ -238,7 +238,7 @@ public void testImportWithInvalidHexStrings()
                          fileName, null, null, null, 1);
             fail("import did not fail on data with invalid hex strings");
         } catch (SQLException e) {
-            assertSQLState(JDBC.vmSupportsJDBC4() ? "XIE0R": "XIE0N", e);
+            assertSQLState("XIE0N", e);
         }
 
         try {
@@ -250,7 +250,7 @@ public void testImportWithInvalidHexStrings()
                          fileName, null, null, null, 1);
             fail("import did not fail on data with invalid hex strings");
         } catch (SQLException e) {
-            assertSQLState(JDBC.vmSupportsJDBC4() ? "XIE0R": "XIE0N", e);
+            assertSQLState("XIE0N", e);
         }
     }
 
@@ -375,27 +375,18 @@ public void testImportExportInvalideDelimiters()
         doExportQueryLobsToExtFile("select * from BOOKS where id < 10", 
                                    fileName, null, null, null, lobsFileName);
 
-
-        /* Currently BaseJDBCTestCase.assertSQLState() is unable
-         * to find nested SQLSTATEs with 1.6 JVMs, so we have to
-         * check for the top-level SQLSTATE in that case.  When
-         * that changes the "JDBC.vmSupportsJDBC4()" call can be
-         * removed from the following assertSQLState() calls.
-         * (DERBY-1440)
-         */
-
         try {
             doImportTableLobsFromExtFile("APP", "BOOKS_IMP", fileName, "2", 
                                          null, null, 0);
         } catch (SQLException e) {
-             assertSQLState(JDBC.vmSupportsJDBC4() ? "38000": "XIE0J", e);
+             assertSQLState("XIE0J", e);
         }
 
         try {
             doImportDataLobsFromExtFile(null, "BOOKS_IMP", null, 
                                       null,  fileName, null, "c", null, 1);
         } catch (SQLException e) {
-            assertSQLState(JDBC.vmSupportsJDBC4() ? "38000": "XIE0J", e);
+            assertSQLState("XIE0J", e);
         }
     }
 
@@ -432,7 +423,7 @@ public void testImportTableExportWithInvalidLobFileName()
             doImportTableLobsFromExtFile("APP", "BOOKS_IMP", fileName, 
                                          null, null, null, 0);
         }catch (SQLException e) {
-            assertSQLState(JDBC.vmSupportsJDBC4() ? "XIE0R": "XIE0P", e);
+            assertSQLState("XIE0P", e);
         }
     }
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportTest.java
index 788add19..caf08446 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/ImportExportTest.java
@@ -91,8 +91,7 @@ public void testImportFromNonExistantFile() {
 			Connection c = getConnection();
 			doImport(c, "Z" , "T1" , null , null , null, 0);
 		} catch (SQLException e) {
-            // DERBY-1440: JDBC 4 client driver doesn't include nested exception SQLStates
-			assertSQLState(JDBC.vmSupportsJDBC4() ? "38000" : "XIE04", e);
+			assertSQLState("XIE04", e);
 		}
 	}
 	
@@ -101,8 +100,7 @@ public void testNullDataFile() {
 			Connection c = getConnection();
 			doImport(c, null, "T1" , null , null, null, 0);
 		} catch (SQLException e) {
-            // DERBY-1440: JDBC 4 client driver doesn't include nested exception SQLStates
-			assertSQLState(JDBC.vmSupportsJDBC4() ? "38000" : "XIE05", e);
+			assertSQLState("XIE05", e);
 		}
 	}
 	
@@ -166,8 +164,7 @@ public void testEarlyEndOfFile() throws Exception {
 		try {
 			doImportFromFile(c, "extin/EndOfFile.txt" , "T4" , null , null , null, 0);
 		} catch (SQLException e) {
-			// DERBY-1440: JDBC 4 client driver doesn't include nested exception SQLStates
-			assertSQLState(JDBC.vmSupportsJDBC4() ? "XIE0R" : "XIE0E", e);
+			assertSQLState("XIE0E", e);
 		}
 	}
 	
