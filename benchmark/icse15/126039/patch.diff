diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
index 517f4c9f..e0d0c37c 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
@@ -233,12 +233,10 @@ void removeActivation(Activation a)
 	public TableDescriptor getTableDescriptorForDeclaredGlobalTempTable(String tableName);
 
 	/**
-	 * Drop all the declared global temporary tables associated with this connection. This gets called
-	 * when a getConnection() is done on a PooledConnection. This will ensure all the temporary tables
-	 * declared on earlier connection handle associated with this physical database connection are dropped
-	 * before a new connection handle is issued on that same physical database connection.
+		Reset the connection before it is returned (indirectly) by
+		a PooledConnection object. See EmbeddedConnection.
 	 */
-	public void dropAllDeclaredGlobalTempTables()
+	public void resetFromPool()
 		 throws StandardException;
 
 	/**
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection20.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection20.java
index c010047f..9ffc80e1 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection20.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection20.java
@@ -62,18 +62,19 @@ public EmbedConnection20(EmbedConnection inputConnection)
 	}
 
 	/**
-	 * Drop all the declared global temporary tables associated with this connection. This gets called
-	 * when a getConnection() is done on a PooledConnection. This will ensure all the temporary tables
-	 * declared on earlier connection handle associated with this physical database connection are dropped
-	 * before a new connection handle is issued on that same physical database connection.
-	 *
+		Reset the connection before it is returned from a PooledConnection
+		to a new application request (wrapped by a BrokeredConnection).
+		Examples of reset covered here is dropping session temporary tables
+		and reseting IDENTITY_VAL_LOCAL.
+		Most JDBC level reset is handled by calling standard java.sql.Connection
+		methods from EmbedPooledConnection.
 	 */
-	public void dropAllDeclaredGlobalTempTables() throws SQLException {
+	public void resetFromPool() throws SQLException {
 		synchronized (getConnectionSynchronization())
 		{
 			setupContextStack();
 			try {
-				getLanguageConnection().dropAllDeclaredGlobalTempTables();
+				getLanguageConnection().resetFromPool();
 			} catch (StandardException t) {
 				throw handleException(t);
 			}
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
index 0cf2d699..d27a4981 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
@@ -523,9 +523,26 @@ private void tempTablesAndCommit() {
 	}
 
 	/**
-	 * @see LanguageConnectionContext#dropAllDeclaredGlobalTempTables
+		Reset the connection before it is returned (indirectly) by
+		a PooledConnection object. See EmbeddedConnection.
 	 */
-	public void dropAllDeclaredGlobalTempTables() throws StandardException {
+	public void resetFromPool()
+		 throws StandardException
+	{
+		// Reset IDENTITY_VAL_LOCAL
+		identityNotNull = false;
+
+		// drop all temp tables.
+		dropAllDeclaredGlobalTempTables();
+	}
+
+	/**
+	 * Drop all the declared global temporary tables associated with this connection. This gets called
+	 * when a getConnection() is done on a PooledConnection. This will ensure all the temporary tables
+	 * declared on earlier connection handle associated with this physical database connection are dropped
+	 * before a new connection handle is issued on that same physical database connection.
+	 */
+	private void dropAllDeclaredGlobalTempTables() throws StandardException {
 		if (allDeclaredGlobalTempTables == null)
 			return;
     
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java
index 6341b7a6..82080d4b 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbedPooledConnection.java
@@ -202,8 +202,8 @@ protected void resetRealConnection() throws SQLException {
 		if (realConnection.getHoldability() != JDBC30Translation.HOLD_CURSORS_OVER_COMMIT)
 			realConnection.setHoldability(JDBC30Translation.HOLD_CURSORS_OVER_COMMIT);
 
-		// drop any temporary tables that may have been declared by the previous user
-		realConnection.dropAllDeclaredGlobalTempTables();
+		// reset any remaining state of the connection
+		realConnection.resetFromPool();
 	}
 
 	/**
