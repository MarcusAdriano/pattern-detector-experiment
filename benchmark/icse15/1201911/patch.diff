diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/common/Parameters.java b/mahout/trunk/core/src/main/java/org/apache/mahout/common/Parameters.java
index 07fdbfa4..e3039e5c 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/common/Parameters.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/common/Parameters.java
@@ -58,6 +58,11 @@ public void set(String key, String value) {
     params.put(key, value);
   }
   
+  public int getInt(String key, int defaultValue) {
+    String ret = params.get(key);
+    return ret == null ? defaultValue : Integer.parseInt(ret);
+  }
+
   @Override
   public String toString() {
     Configuration conf = new Configuration();
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java
index 3cf40076..0c3ed2f4 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthDriver.java
@@ -66,7 +66,8 @@ public int run(String[] args) throws Exception {
     addOption("minSupport", "s", "(Optional) The minimum number of times a co-occurrence must be present. Default Value: 3", "3");
     addOption("maxHeapSize", "k", "(Optional) Maximum Heap Size k, to denote the requirement to mine top K items. Default value: 50", "50");
     addOption("numGroups", "g", "(Optional) Number of groups the features should be divided in the map-reduce version."
-            + " Doesn't work in sequential version Default Value:1000", "1000");
+            + " Doesn't work in sequential version Default Value:" + PFPGrowth.NUM_GROUPS_DEFAULT,
+	      Integer.toString(PFPGrowth.NUM_GROUPS_DEFAULT));
     addOption("splitterPattern", "regex", "Regular Expression pattern used to split given string transaction into itemsets."
             + " Default value splits comma separated itemsets.  Default Value:"
             + " \"[ ,\\t]*[,|\\t][ ,\\t]*\" ", "[ ,\t]*[,|\t][ ,\t]*");
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java
index 4d6c7d35..e711b797 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/PFPGrowth.java
@@ -67,6 +67,7 @@
   public static final String F_LIST = "fList";
   public static final String G_LIST = "gList";
   public static final String NUM_GROUPS = "numGroups";
+  public static final int NUM_GROUPS_DEFAULT = 1000;
   public static final String OUTPUT = "output";
   public static final String MIN_SUPPORT = "minSupport";
   public static final String MAX_HEAPSIZE = "maxHeapSize";
@@ -282,7 +283,7 @@ public static void startAggregating(Parameters params, Configuration conf)
    */
   public static void startGroupingItems(Parameters params, Configuration conf) throws IOException {
     List<Pair<String,Long>> fList = readFList(params);
-    Integer numGroups = Integer.valueOf(params.get(NUM_GROUPS, "50"));
+    int numGroups = params.getInt(NUM_GROUPS, NUM_GROUPS_DEFAULT);
     
     Map<String,Long> gList = Maps.newHashMap();
     long maxPerGroup = fList.size() / numGroups;
@@ -354,6 +355,17 @@ public static void startTransactionSorting(Parameters params, Configuration conf
     Job job = new Job(conf, "PFP Transaction Sorting running over input" + input);
     job.setJarByClass(PFPGrowth.class);
     
+    Integer numGroups = Integer.valueOf(params.get(NUM_GROUPS, "-1"));
+    int numRed = job.getNumReduceTasks();
+    if (numGroups < 0) {
+      if (NUM_GROUPS_DEFAULT < numRed) {
+        params.set(NUM_GROUPS, Integer.toString(numRed));
+      }
+    }
+    if (numRed > numGroups) {
+      log.info("Warning: running with less groups of work than  reducers!");
+    }
+
     job.setMapOutputKeyClass(LongWritable.class);
     job.setMapOutputValueClass(TransactionTree.class);
     
