diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java
index b4660865..f75c539b 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java
@@ -31,7 +31,7 @@
 
 /** Partially deprecated until unit tests are in place.  Until this time, this class/interface is unsupported. */
 public class Probability extends Constants {
-  private static final Normal unitNormal = new Normal(0, 1, null);
+  private static final Normal UNIT_NORMAL = new Normal(0, 1, null);
 
   /**
    * ********************************************** COEFFICIENTS FOR METHOD  normalInverse()   *
@@ -72,6 +72,7 @@
       -3.50424626827848203418E-2,
       -8.57456785154685413611E-4,
   };
+
   private static final double[] Q1 = {
       /*  1.00000000000000000000E0,*/
       1.57799883256466749731E1,
@@ -171,7 +172,7 @@ public static double binomial(int k, int n, double p) {
     }
 
     if (k == n) {
-      return (1.0);
+      return 1.0;
     }
     if (k == 0) {
       return Math.pow(1.0 - p, n);
@@ -207,7 +208,7 @@ public static double binomialComplemented(int k, int n, double p) {
     }
 
     if (k == n) {
-      return (0.0);
+      return 0.0;
     }
     if (k == 0) {
       return 1.0 - Math.pow(1.0 - p, n);
@@ -235,7 +236,7 @@ public static double binomialComplemented(int k, int n, double p) {
    * @param x integration end point.
    */
   @Deprecated
-  public static double chiSquare(double v, double x) throws ArithmeticException {
+  public static double chiSquare(double v, double x) {
     if (x < 0.0 || v < 1.0) {
       return 0.0;
     }
@@ -266,7 +267,7 @@ public static double chiSquare(double v, double x) throws ArithmeticException {
    * @param v degrees of freedom.
    */
   @Deprecated
-  public static double chiSquareComplemented(double v, double x) throws ArithmeticException {
+  public static double chiSquareComplemented(double v, double x) {
     if (x < 0.0 || v < 1.0) {
       return 0.0;
     }
@@ -284,23 +285,25 @@ public static double chiSquareComplemented(double v, double x) throws Arithmetic
    *                          -
    *                           0
    * </pre>
-   * <b>Implementation:</b> For <tt>0 <= |x| < 1, erf(x) = x * P4(x**2)/Q5(x**2)</tt>; otherwise <tt>erf(x) = 1 -
-   * erfc(x)</tt>. <p> Code adapted from the <A HREF="http://www.sci.usq.edu.au/staff/leighb/graph/Top.html">Java 2D
-   * Graph Package 2.4</A>, which in turn is a port from the <A HREF="http://people.ne.mediaone.net/moshier/index.html#Cephes">Cephes
+   * <b>Implementation:</b> For <tt>0 <= |x| < 1, erf(x) = x * P4(x**2)/Q5(x**2)</tt>; otherwise
+   * <tt>erf(x) = 1 - erfc(x)</tt>. <p> Code adapted from the
+   * <A HREF="http://www.sci.usq.edu.au/staff/leighb/graph/Top.html">Java 2D
+   * Graph Package 2.4</A>, which in turn is a port from the
+   * <A HREF="http://people.ne.mediaone.net/moshier/index.html#Cephes">Cephes
    * 2.2</A> Math Library (C).
    *
    * @param x the argument to the function.
    */
   @Deprecated
-  public static double errorFunction(double x) throws ArithmeticException {
-    double[] T = {
+  public static double errorFunction(double x) {
+    double[] t = {
         9.60497373987051638749E0,
         9.00260197203842689217E1,
         2.23200534594684319226E3,
         7.00332514112805075473E3,
         5.55923013010394962768E4
     };
-    double[] U = {
+    double[] u = {
         //1.00000000000000000000E0,
         3.35617141647503099647E1,
         5.21357949780152679795E2,
@@ -310,10 +313,10 @@ public static double errorFunction(double x) throws ArithmeticException {
     };
 
     if (Math.abs(x) > 1.0) {
-      return (1.0 - errorFunctionComplemented(x));
+      return 1.0 - errorFunctionComplemented(x);
     }
     double z = x * x;
-    return x * Polynomial.polevl(z, T, 4) / Polynomial.p1evl(z, U, 5);
+    return x * Polynomial.polevl(z, t, 4) / Polynomial.p1evl(z, u, 5);
   }
 
   /**
@@ -337,10 +340,10 @@ public static double errorFunction(double x) throws ArithmeticException {
    * @param a the argument to the function.
    */
   @Deprecated
-  public static double errorFunctionComplemented(double a) throws ArithmeticException {
+  public static double errorFunctionComplemented(double a) {
     double x;
 
-    double[] P = {
+    double[] p = {
         2.46196981473530512524E-10,
         5.64189564831068821977E-1,
         7.46321056442269912687E0,
@@ -351,7 +354,7 @@ public static double errorFunctionComplemented(double a) throws ArithmeticExcept
         1.02755188689515710272E3,
         5.57535335369399327526E2
     };
-    double[] Q = {
+    double[] q = {
         //1.0
         1.32281951154744992508E1,
         8.67072140885989742329E1,
@@ -363,7 +366,7 @@ public static double errorFunctionComplemented(double a) throws ArithmeticExcept
         5.57535340817727675546E2
     };
 
-    double[] R = {
+    double[] r = {
         5.64189583547755073984E-1,
         1.27536670759978104416E0,
         5.01905042251180477414E0,
@@ -371,7 +374,7 @@ public static double errorFunctionComplemented(double a) throws ArithmeticExcept
         7.40974269950448939160E0,
         2.97886665372100240670E0
     };
-    double[] S = {
+    double[] s = {
         //1.00000000000000000000E0,
         2.26052863220117276590E0,
         9.39603524938001434673E0,
@@ -395,17 +398,17 @@ public static double errorFunctionComplemented(double a) throws ArithmeticExcept
 
     z = Math.exp(z);
 
-    double q;
-    double p;
+    double qval;
+    double pval;
     if (x < 8.0) {
-      p = Polynomial.polevl(x, P, 8);
-      q = Polynomial.p1evl(x, Q, 8);
+      pval = Polynomial.polevl(x, p, 8);
+      qval = Polynomial.p1evl(x, q, 8);
     } else {
-      p = Polynomial.polevl(x, R, 5);
-      q = Polynomial.p1evl(x, S, 6);
+      pval = Polynomial.polevl(x, r, 5);
+      qval = Polynomial.p1evl(x, s, 6);
     }
 
-    double y = (z * p) / q;
+    double y = (z * pval) / qval;
 
     if (a < 0) {
       y = 2.0 - y;
@@ -553,7 +556,7 @@ public static double negativeBinomialComplemented(int k, int n, double p) {
    * and http://en.wikipedia.org/wiki/Normal_distribution#Numerical_approximations_of_the_normal_cdf
    */
 
-  public static double normal(double a) throws ArithmeticException {
+  public static double normal(double a) {
     if (a < 0) {
       return 1 - normal(-a);
     }
@@ -564,7 +567,7 @@ public static double normal(double a) throws ArithmeticException {
     double b4 = -1.821255978;
     double b5 = 1.330274429;
     double t = 1 / (1 + b0 * a);
-    return 1 - unitNormal.pdf(a) * t * (b1 + t * (b2 + t * (b3 + t * (b4 + t * b5))));
+    return 1 - UNIT_NORMAL.pdf(a) * t * (b1 + t * (b2 + t * (b3 + t * (b4 + t * b5))));
   }
 
   /**
@@ -586,7 +589,7 @@ public static double normal(double a) throws ArithmeticException {
    * @param variance the variance of the normal distribution.
    * @param x        the integration limit.
    */
-  public static double normal(double mean, double variance, double x) throws ArithmeticException {
+  public static double normal(double mean, double variance, double x) {
     return normal((x - mean) / Math.sqrt(variance));
   }
 
@@ -600,7 +603,7 @@ public static double normal(double mean, double variance, double x) throws Arith
    * R(w**2)/S(w**2))</tt>.
    */
   @Deprecated
-  public static double normalInverse(double y0) throws ArithmeticException {
+  public static double normalInverse(double y0) {
 
     double s2pi = Math.sqrt(2.0 * Math.PI);
 
@@ -623,7 +626,7 @@ public static double normalInverse(double y0) throws ArithmeticException {
       double y2 = y * y;
       x = y + y * (y2 * Polynomial.polevl(y2, P0, 4) / Polynomial.p1evl(y2, Q0, 8));
       x *= s2pi;
-      return (x);
+      return x;
     }
 
     x = Math.sqrt(-2.0 * Math.log(y));
@@ -640,7 +643,7 @@ public static double normalInverse(double y0) throws ArithmeticException {
     if (code != 0) {
       x = -x;
     }
-    return (x);
+    return x;
   }
 
   /**
@@ -660,7 +663,7 @@ public static double normalInverse(double y0) throws ArithmeticException {
    * @param k    number of terms.
    * @param mean the mean of the poisson distribution.
    */
-  public static double poisson(int k, double mean) throws ArithmeticException {
+  public static double poisson(int k, double mean) {
     if (mean < 0) {
       throw new IllegalArgumentException();
     }
@@ -688,7 +691,7 @@ public static double poisson(int k, double mean) throws ArithmeticException {
    * @param mean the mean of the poisson distribution.
    */
   @Deprecated
-  public static double poissonComplemented(int k, double mean) throws ArithmeticException {
+  public static double poissonComplemented(int k, double mean) {
     if (mean < 0) {
       throw new IllegalArgumentException();
     }
@@ -722,12 +725,12 @@ public static double poissonComplemented(int k, double mean) throws ArithmeticEx
    * @param t integration end point.
    */
   @Deprecated
-  public static double studentT(double k, double t) throws ArithmeticException {
+  public static double studentT(double k, double t) {
     if (k <= 0) {
       throw new IllegalArgumentException();
     }
     if (t == 0) {
-      return (0.5);
+      return 0.5;
     }
 
     double cdf = 0.5 * Gamma.incompleteBeta(0.5 * k, 0.5, k / (k + t * t));
