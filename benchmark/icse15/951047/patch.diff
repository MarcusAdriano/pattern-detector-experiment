diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBoolean.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBoolean.java
index 23e89133..64eb3f7f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBoolean.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBoolean.java
@@ -30,6 +30,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.io.StoredFormatIds;
 
 import org.apache.derby.iapi.error.StandardException;
+import org.apache.derby.iapi.reference.SQLState;
 
 import org.apache.derby.iapi.types.DataValueDescriptor;
 import org.apache.derby.iapi.types.TypeId;
@@ -628,7 +629,14 @@ void setObject(Object theValue)
 	}
 	protected void setFrom(DataValueDescriptor theValue) throws StandardException {
 
-		setValue(theValue.getBoolean());
+        if ( theValue instanceof SQLChar ) { setValue( theValue.getString() ); }
+		else if ( theValue instanceof SQLBoolean ){ setValue(theValue.getBoolean()); }
+        else
+        {
+            throw StandardException.newException
+                ( SQLState.LANG_DATA_TYPE_SET_MISMATCH, theValue.getTypeName(), getTypeName() );
+
+        }
 	}
 
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java
index 038784e9..8dadb94e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BooleanTypeCompiler.java
@@ -68,10 +68,8 @@ public boolean compatible(TypeId otherType)
 	/** @see TypeCompiler#storable */
 	public boolean storable(TypeId otherType, ClassFactory cf)
 	{
-		/* Are the types the same or is other type a string or number type? */
-		if (otherType.isBooleanTypeId() ||
-				otherType.isStringTypeId() ||
-				otherType.isNumericTypeId())
+		/* Are the types the same or is other type a string */
+		if ( otherType.isBooleanTypeId() || otherType.isStringTypeId() )
 		{
 			return true;
 		}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java
index ff866efe..cc73b79c 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java
@@ -50,6 +50,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
     private static final String ILLEGAL_GET = "22005";
     private static final String ILLEGAL_XML_SELECTION = "42Z71";
+    private static final String BAD_CAST = "22018";
+    private static final String NOT_UNION_COMPATIBLE = "42X61";
 
     ///////////////////////////////////////////////////////////////////////////////////
     //
@@ -319,6 +321,7 @@ protected void    setUp()
      * <ul>
      * <li>Add a new column to ALL_TYPES and corresponding rows (see setUp())</li>
      * <li>Add the new datatype to one of the tests below</li>
+     * <li>Add a new bad implicit cast to test_06_implicitCasts()</li>
      * </ul>
      */
     public void test_01_datatypeCount() throws Exception
@@ -387,6 +390,7 @@ public void test_04_undefinedAndIllegal() throws Exception
         vet_getBooleanIsIllegal( conn, "TIMESTAMP_COL" );
         vet_getBooleanIsIllegal( conn, "VARCHAR_FOR_BIT_DATA_COL" );
     }
+    
     /**
      * <p>
      * Regression tests for outliers. If this behavior changes,
@@ -408,6 +412,7 @@ public void test_05_undefinedIllegalOutliers() throws Exception
                  );
         }
     }
+
     /**
      * <p>
      * Test that ResultSet.getBoolean() returns  the correct value. Expects to
@@ -488,6 +493,124 @@ private void vet_getBooleanException( Connection conn, String columnName, String
 
     }
     
+    /**
+     * <p>
+     * Test that values are implicitly cast to boolean according to the rules in the SQL Standard,
+     * part 2, section 6.12 (<cast specification>), general rule 20. Other than booleans themselves,
+     * the only legal casts are from string types to boolean. The following transformations are applied
+     * to the strings:
+     * </p>
+     *
+     * <ul>
+     * <li>Trim whitespace off the string</li>
+     * <li>Then apply the rules in section 5.3 (<literal>). This means that the trimmed string must be 'TRUE', 'FALSE', or 'UNKNOWN', regardless of case.</li>
+     * <li>Otherwise, raise an exception.</li>
+     * </ul>
+     *
+     * <p>
+     * See <a href="https://issues.apache.org/jira/browse/DERBY-4658">DERBY-4658</a>.
+     * </p>
+     */
+    public void test_06_implicitCasts() throws Exception
+    {
+        Connection conn = getConnection();
+
+        vetGoodImplicitCastFromString( conn, "'true'", Boolean.TRUE );
+        vetGoodImplicitCastFromString( conn, "'false'", Boolean.FALSE );
+        vetGoodImplicitCastFromString( conn, "'TRUE'", Boolean.TRUE );
+        vetGoodImplicitCastFromString( conn, "'FALSE'", Boolean.FALSE );
+        vetGoodImplicitCastFromString( conn, "' true '", Boolean.TRUE );
+        vetGoodImplicitCastFromString( conn, "' false '", Boolean.FALSE );
+
+        vetGoodImplicitCastFromString( conn, "cast (null as char( 10 ) )", null );
+        vetGoodImplicitCastFromString( conn, "cast (null as clob )", null );
+        vetGoodImplicitCastFromString( conn, "cast (null as long varchar )", null );
+        vetGoodImplicitCastFromString( conn, "cast (null as varchar( 10 ) )", null );
+
+        vetGoodImplicitCastFromString( conn, "cast ('true' as char( 10 ) )", Boolean.TRUE );
+        vetGoodImplicitCastFromString( conn, "cast ('true' as clob )", Boolean.TRUE );
+        vetGoodImplicitCastFromString( conn, "cast ('true' as long varchar)", Boolean.TRUE );
+        vetGoodImplicitCastFromString( conn, "cast ('true' as varchar( 10 ) )", Boolean.TRUE );
+
+        vetGoodImplicitCastFromString( conn, "cast ('false' as char( 10 ) )", Boolean.FALSE );
+        vetGoodImplicitCastFromString( conn, "cast ('false' as clob )", Boolean.FALSE );
+        vetGoodImplicitCastFromString( conn, "cast ('false' as long varchar)", Boolean.FALSE );
+        vetGoodImplicitCastFromString( conn, "cast ('false' as varchar( 10 ) )", Boolean.FALSE );
+        
+        expectExecutionError( conn, BAD_CAST, makeImplicitCast( "'neither'" ) );
+
+        expectExecutionError( conn, BAD_CAST, makeImplicitCast( "cast ('neither' as char(10))" ) );
+        expectExecutionError( conn, BAD_CAST, makeImplicitCast( "cast ('neither' as clob)" ) );
+        expectExecutionError( conn, BAD_CAST, makeImplicitCast( "cast ('neither' as long varchar)" ) );
+        expectExecutionError( conn, BAD_CAST, makeImplicitCast( "cast ('neither' as varchar(10))" ) );
+
+        vetBadImplicitCasts( conn, "bigint_col" );
+        vetBadImplicitCasts( conn, "blob_col" );
+        // char type ok
+        vetBadImplicitCasts( conn, "char_for_bit_data_col" );
+        // clob type ok
+        vetBadImplicitCasts( conn, "date_col" );
+        vetBadImplicitCasts( conn, "decimal_col" );
+        vetBadImplicitCasts( conn, "real_col" );
+        vetBadImplicitCasts( conn, "double_col" );
+        vetBadImplicitCasts( conn, "int_col" );
+        // long varchar type ok
+        vetBadImplicitCasts( conn, "long_varchar_for_bit_data_col" );
+        vetBadImplicitCasts( conn, "numeric_col" );
+        vetBadImplicitCasts( conn, "smallint_col" );
+        vetBadImplicitCasts( conn, "time_col" );
+        vetBadImplicitCasts( conn, "timestamp_col" );
+        // varchar type ok
+        vetBadImplicitCasts( conn, "varchar_for_bit_data_col" );
+        if ( _supportsXML ) { vetBadImplicitCasts( conn, "xml_col" ); }
+    }
+    private void vetGoodImplicitCastFromString( Connection conn, String text, Boolean booleanValue ) throws Exception
+    {
+        String expectedValue = null;
+        if ( booleanValue != null ) { expectedValue = booleanValue.toString(); }
+
+        assertResults
+            (
+             conn,
+             makeImplicitCast( text ),
+             new String[][]
+             {
+                 { expectedValue },
+             },
+             false
+             );
+    }
+    private String makeImplicitCast( String text )
+    {
+        return
+            "select isindex from sys.sysconglomerates where conglomeratename = 'foo'\n" +
+            "union\n" +
+            "values ( " + text + " )\n";
+    }
+    private void vetBadImplicitCasts( Connection conn, String columnName ) throws Exception
+    {
+        vetBadImplicitCastToBoolean( conn, columnName );
+        vetBadImplicitCastFromBoolean( conn, columnName );
+    }
+    private void vetBadImplicitCastToBoolean( Connection conn, String columnName ) throws Exception
+    {
+        String query =
+            "select isindex from sys.sysconglomerates where conglomeratename = 'foo'\n" +
+            "union\n" +
+            "select " + columnName + " from all_types\n";
+        
+        expectCompilationError( NOT_UNION_COMPATIBLE, query );
+    }
+    private void vetBadImplicitCastFromBoolean( Connection conn, String columnName ) throws Exception
+    {
+        String query =
+            "select " + columnName + " from all_types\n" +
+            "union\n" +
+            "select isindex from sys.sysconglomerates\n";
+        
+        expectCompilationError( NOT_UNION_COMPATIBLE, query );
+    }
+
     ///////////////////////////////////////////////////////////////////////////////////
     //
     // SQL ROUTINES
