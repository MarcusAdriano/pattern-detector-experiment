diff --git a/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/Context.java b/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/Context.java
index 95747873..d8fee013 100644
--- a/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/Context.java
+++ b/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/Context.java
@@ -72,18 +72,21 @@
   public abstract VariableResolver getVariableResolver();
 
   /**
-   * Gets the datasource instance defined for this entity.
+   * Gets the datasource instance defined for this entity. Do not close() this instance.
+   * Transformers should use the getDataSource(String name) method.
    *
    * @return a new DataSource instance as configured for the current entity
    * @see org.apache.solr.handler.dataimport.DataSource
+   * @see #getDataSource(String)
    */
   public abstract DataSource getDataSource();
 
   /**
-   * Gets a new DataSource instance with a name.
+   * Gets a new DataSource instance with a name. Ensure that you close() this after use
+   * because this is created just for this method call.
    *
    * @param name Name of the dataSource as defined in the dataSource tag
-   * @return a new DataSource instance as configured for the named entity
+   * @return a new DataSource instance
    * @see org.apache.solr.handler.dataimport.DataSource
    */
   public abstract DataSource getDataSource(String name);
diff --git a/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ContextImpl.java b/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ContextImpl.java
index 87b1fa81..bafe7510 100644
--- a/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ContextImpl.java
+++ b/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ContextImpl.java
@@ -63,7 +63,7 @@ public DataSource getDataSource() {
   }
 
   public DataSource getDataSource(String name) {
-    return dataImporter.getDataSourceInstance(entity);
+    return dataImporter.getDataSourceInstance(entity, name, this);
   }
 
   public boolean isRootEntity() {
diff --git a/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.java b/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.java
index 059aa8eb..5499de5d 100644
--- a/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.java
+++ b/lucene/solr/trunk/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImporter.java
@@ -270,20 +270,20 @@ public void addDataSource(DataConfig.Entity key) {
       key.dataSrc = new MockDataSource();
       return;
     }
-    key.dataSrc = getDataSourceInstance(key);
+    key.dataSrc = getDataSourceInstance(key, key.dataSource, null);
   }
 
-  DataSource getDataSourceInstance(DataConfig.Entity key) {
-    Properties p = dataSourceProps.get(key.dataSource);
+  DataSource getDataSourceInstance(DataConfig.Entity key, String name, Context ctx ) {
+    Properties p = dataSourceProps.get(name);
     if (p == null)
-      p = config.dataSources.get(key.dataSource);
+      p = config.dataSources.get(name);
     if (p == null)
       p = dataSourceProps.get(null);// for default data source
     if (p == null)
       p = config.dataSources.get(null);
     if (p == null)
       throw new DataImportHandlerException(DataImportHandlerException.SEVERE,
-              "No dataSource :" + key.dataSource + " available for entity :"
+              "No dataSource :" + name + " available for entity :"
                       + key.name);
     String impl = p.getProperty(TYPE);
     DataSource dataSrc = null;
@@ -300,8 +300,10 @@ DataSource getDataSourceInstance(DataConfig.Entity key) {
     try {
       Properties copyProps = new Properties();
       copyProps.putAll(p);
-      dataSrc.init(new ContextImpl(key, null, dataSrc, 0,
-              Collections.EMPTY_MAP, new HashMap(), null, this), copyProps);
+      if(ctx == null)
+        ctx = new ContextImpl(key, null, dataSrc, 0,
+              Collections.EMPTY_MAP, new HashMap(), null, this);
+      dataSrc.init(ctx, copyProps);
     } catch (Exception e) {
       throw new DataImportHandlerException(DataImportHandlerException.SEVERE,
               "Failed to initialize DataSource: " + key.dataSource, e);
diff --git a/lucene/solr/trunk/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder2.java b/lucene/solr/trunk/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder2.java
index 70a5f044..b9b73fec 100644
--- a/lucene/solr/trunk/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder2.java
+++ b/lucene/solr/trunk/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestDocBuilder2.java
@@ -21,9 +21,11 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.Assert;
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Map;
 
 /**
  * <p>
@@ -67,4 +69,25 @@ public void testSingleEntity() throws Exception {
     assertQ(req("id:1"), "//*[@numFound='1']");
   }
 
+  @Test
+  @SuppressWarnings("unchecked")
+  public void testContext() throws Exception {
+    List rows = new ArrayList();
+    rows.add(createMap("id", "1", "desc", "one"));
+    MockDataSource.setIterator("select * from x", rows.iterator());
+
+    super.runFullImport(loadDataConfig("data-config-with-transformer.xml"));
+  }
+
+  public static class MockTransformer extends Transformer {
+    public Object transformRow(Map<String, Object> row, Context context) {
+      Assert.assertTrue("Context gave incorrect data source", context.getDataSource("mockDs") instanceof MockDataSource2);
+      return row;
+    }
+  }
+
+  public static class MockDataSource2 extends MockDataSource  {
+    
+  }
+
 }
