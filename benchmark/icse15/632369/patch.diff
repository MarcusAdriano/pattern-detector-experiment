diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/db/Database.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/db/Database.java
index 6c2e912a..f428ccd0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/db/Database.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/db/Database.java
@@ -133,13 +133,14 @@ public AuthenticationService getAuthenticationService()
      *
      * @param dbname the replication database that is being failed over.
      *
-     * @exception SQLException   1) If the failover succeeds, an exception is
-     *                              thrown to indicate that the master database
-     *                              was shutdown after a successful failover
+     * @exception StandardException 1) If the failover succeeds, an exception
+     *                                 is thrown to indicate that the master
+     *                                 database was shutdown after a successful
+     *                                 failover
      *                           2) If a failure occurs during network
      *                              communication with slave.
      */
-    public void failover(String dbname) throws SQLException;
+    public void failover(String dbname) throws StandardException;
 
     /**
      * Used to indicated whether the database is in the replication
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/BasicDatabase.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/BasicDatabase.java
index 7fedafcf..4194d7f7 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/BasicDatabase.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/BasicDatabase.java
@@ -412,12 +412,8 @@ public boolean isInSlaveMode() {
     /**
      * @see org.apache.derby.iapi.db.Database#failover(String)
      */
-    public void failover(String dbname) throws SQLException {
-        try {
+    public void failover(String dbname) throws StandardException {
             af.failover(dbname);
-        } catch (StandardException se) {
-            throw PublicAPI.wrapStandardException(se);
-        }
     }
 
 	public void freeze() throws SQLException
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/SlaveDatabase.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/SlaveDatabase.java
index 02969213..fa6f0bf3 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/SlaveDatabase.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/db/SlaveDatabase.java
@@ -253,8 +253,7 @@ public  void stopReplicationSlave() throws SQLException {
         slaveFac = null;
     }
 
-    public void failover(String dbname) throws SQLException {
-        try {
+    public void failover(String dbname) throws StandardException {
             if (inReplicationSlaveMode) {
                 slaveFac.failover();
                 // SlaveFactory#failover will make the 
@@ -275,9 +274,6 @@ public void failover(String dbname) throws SQLException {
                 // earlier
                 super.failover(dbname);
             }
-        } catch (StandardException se) {
-            throw PublicAPI.wrapStandardException(se);
-        }
     }
     
     /////////////////
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
index fd43c8b0..987d1ab6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
@@ -852,15 +852,15 @@ private void internalStopReplicationSlave(Database database, Properties p)
      * 
      * @param tr an instance of TransactionResourceImpl Links the connection 
      *           to the database.
-     * @throws java.sql.SQLException 1) Thrown upon a authorization failure 
-     *                           2) If the failover succeeds, an exception is
+     * @throws StandardException 1) If the failover succeeds, an exception is
      *                              thrown to indicate that the master database
      *                              was shutdown after a successful failover
-     *                           3) If a failure occurs during network 
+     *                           2) If a failure occurs during network
      *                              communication with slave.
+     * @throws SQLException      1) Thrown upon a authorization failure.
      */
     private void handleFailoverMaster(TransactionResourceImpl tr)
-        throws SQLException {
+        throws SQLException, StandardException {
 
         // If authorization is turned on, we need to check if this
         // user is database owner.
@@ -906,7 +906,11 @@ private void handleFailoverSlave(Database database)
         // databases in slave mode since the AuthenticationService has
         // not been booted for the database
 
+        try {
         database.failover(getTR().getDBName());
+        } catch (StandardException se) {
+            throw Util.generateCsSQLException(se);
+        }
     }
 	/**
 	 * Remove any encryption or upgarde properties from the given properties
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/replication/master/MasterController.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/replication/master/MasterController.java
index faabe2a9..87e43584 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/replication/master/MasterController.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/replication/master/MasterController.java
@@ -278,6 +278,13 @@ public void startFailover() throws StandardException {
             //The exception thrown is of Database Severity, this shuts
             //down the master database.
             teardownNetwork();
+
+            //If we require an exception of Database Severity to shutdown the
+            //database to shutdown the database we need to unfreeze first
+            //before throwing the exception. Unless we unfreeze the shutdown
+            //hangs.
+            rawStoreFactory.unfreeze();
+
             throw StandardException.newException
                     (SQLState.REPLICATION_FAILOVER_SUCCESSFUL, dbname);  
         } else {
