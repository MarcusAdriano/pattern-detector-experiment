diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java
index ab60f525..8c4b7db7 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java
@@ -33,6 +33,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.sql.compile.TypeCompiler;
 
+import org.apache.derby.iapi.reference.Limits;
 import org.apache.derby.iapi.reference.SQLState;
 
 
@@ -607,6 +608,16 @@ public ValueNode preprocess(
 
             int maxWidth = receiver.getTypeServices().getMaximumWidth();
 
+            // DERBY-6477: Skip this optimization if the receiver column has
+            // a very high maximum width (typically columns in the system
+            // tables, as they don't have the same restrictions as columns
+            // in user tables). Since greaterEqualString and lessThanString
+            // are padded to the maximum width, this optimization may cause
+            // OOME if the maximum width is high.
+            if (maxWidth > Limits.DB2_LONGVARCHAR_MAXWIDTH) {
+                return this;
+            }
+
             greaterEqualString = 
                 Like.greaterEqualString(pattern, escape, maxWidth);
 
diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LikeTest.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LikeTest.java
index d2e560b9..65c0bf3c 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LikeTest.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/LikeTest.java
@@ -26,7 +26,6 @@
 import junit.framework.Test;
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.JDBC;
-import org.apache.derbyTesting.junit.RuntimeStatisticsParser;
 import org.apache.derbyTesting.junit.SQLUtilities;
 import org.apache.derbyTesting.junit.TestConfiguration;
 
@@ -70,4 +69,13 @@ public void testOptimizeConcatenatedStringLiterals() throws SQLException {
                 expectedRows);
         assertTrue(SQLUtilities.getRuntimeStatisticsParser(s).usedIndexScan());
     }
+
+    public void testDerby6477() throws SQLException {
+        // DERBY-6477: This statement used to fail with an OutOfMemoryError.
+        JDBC.assertSingleValueResultSet(createStatement().executeQuery(
+                "select javaclassname from sys.sysaliases where "
+                    + "javaclassname like "
+                    + "'org.apache.derby.catalog.Java5SystemProcedures%'"),
+                "org.apache.derby.catalog.Java5SystemProcedures");
+    }
 }
