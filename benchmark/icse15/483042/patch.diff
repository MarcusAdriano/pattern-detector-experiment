diff --git a/db/derby/code/branches/10.2/java/engine/org/apache/derby/iapi/types/Like.java b/db/derby/code/branches/10.2/java/engine/org/apache/derby/iapi/types/Like.java
index 5b6107e9..4ad29acc 100644
--- a/db/derby/code/branches/10.2/java/engine/org/apache/derby/iapi/types/Like.java
+++ b/db/derby/code/branches/10.2/java/engine/org/apache/derby/iapi/types/Like.java
@@ -668,7 +668,7 @@ public static Boolean like(int[] value, int valueLength, int[] pattern, int patt
 
 	/**
 	 * Determine whether or not this LIKE can be transformed into optimizable
-	 * clauses.  It can if the pattern is non-null, of length > 0 and
+	 * clauses.  It can if the pattern is non-null and if the length == 0 or
 	 * the first character is not a wild card.
 	 *
 	 * @param pattern	The right side of the LIKE
@@ -678,11 +678,15 @@ public static Boolean like(int[] value, int valueLength, int[] pattern, int patt
 
 	public static boolean isOptimizable(String pattern)
 	{
-		if (pattern == null || (pattern.length() == 0))
+		if (pattern == null)
 		{
 			return false;
 		}
 
+        if (pattern.length() == 0) {
+            return true;
+        }
+
 		// if we have pattern matching at start of string, no optimization
 		char firstChar = pattern.charAt(0);
 
@@ -871,7 +875,6 @@ public static String lessThanStringFromParameterWithEsc(String pattern, String e
 
 	/**
 	 * Return the substring from the pattern for the < clause.
-	 * (NOTE: This may be null if the pattern is an empty string.)
 	 *
 	 * @param pattern	The right side of the LIKE
 	 * @param escape	The escape clause
@@ -888,12 +891,6 @@ public static String lessThanString(String pattern, String escape, int maxWidth)
 		char	newLastChar;
 		final int escChar;
 
-		if (pattern.length() == 0)
-		{
-			// pattern is ""
-			return null;
-		}
-
 		if ((escape != null) && (escape.length() !=0))
 		{
 			escChar = escape.charAt(0);
@@ -911,7 +908,7 @@ public static String lessThanString(String pattern, String escape, int maxWidth)
 		 *
 		 *	pattern			return
 		 *	-------			------
-		 *	""				null
+		 *	""				SUPER_STRING (match against super string)
 		 *	"%..."			SUPER_STRING (match against super string)
 		 *	"_..."			SUPER_STRING (match against super string)
 		 *	"asdf%"			"asdg"
@@ -934,7 +931,7 @@ public static String lessThanString(String pattern, String escape, int maxWidth)
 			upperLimit.append(c);
 		}
 
-		// Pattern starts with wildcard.
+		// Pattern is empty or starts with wildcard.
 		if (upperLimit.length() == 0) {
 			return SUPER_STRING;
 		}
