diff --git a/incubator/cassandra/trunk/contrib/mutex/src/org/apache/cassandra/mutex/ClusterMutex.java b/incubator/cassandra/trunk/contrib/mutex/src/org/apache/cassandra/mutex/ClusterMutex.java
index 5e47c8bd..91b91a4d 100644
--- a/incubator/cassandra/trunk/contrib/mutex/src/org/apache/cassandra/mutex/ClusterMutex.java
+++ b/incubator/cassandra/trunk/contrib/mutex/src/org/apache/cassandra/mutex/ClusterMutex.java
@@ -23,7 +23,8 @@
 
 import org.apache.cassandra.config.DatabaseDescriptor;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.zookeeper.ZooKeeper;
 import org.apache.zookeeper.Watcher;
@@ -38,7 +39,7 @@
 
 public class ClusterMutex implements Watcher
 {
-    private static Logger logger = Logger.getLogger(ClusterMutex.class);
+    private static Logger logger = LoggerFactory.getLogger(ClusterMutex.class);
 
     private static ClusterMutex instance;
 
diff --git a/incubator/cassandra/trunk/contrib/property_snitch/src/java/org/apache/cassandra/locator/PropertyFileEndPointSnitch.java b/incubator/cassandra/trunk/contrib/property_snitch/src/java/org/apache/cassandra/locator/PropertyFileEndPointSnitch.java
index fea5356b..58b624c6 100644
--- a/incubator/cassandra/trunk/contrib/property_snitch/src/java/org/apache/cassandra/locator/PropertyFileEndPointSnitch.java
+++ b/incubator/cassandra/trunk/contrib/property_snitch/src/java/org/apache/cassandra/locator/PropertyFileEndPointSnitch.java
@@ -31,7 +31,8 @@
 
 import org.apache.cassandra.locator.EndPointSnitch;
 import java.net.InetAddress;
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * PropertyFileEndPointSnitch
@@ -61,7 +62,7 @@
     /**
      * Reference to the logger.
      */
-    private static Logger logger_ = Logger.getLogger(PropertyFileEndPointSnitch.class);     
+    private static Logger logger_ = LoggerFactory.getLogger(PropertyFileEndPointSnitch.class);     
 
     public PropertyFileEndPointSnitch() throws IOException {
         reloadConfiguration();
@@ -88,7 +89,7 @@ public PropertyFileEndPointSnitch() throws IOException {
         String value = hostProperties.getProperty(key);
         if (value == null)
         {
-            logger_.error("Could not find end point information for " + key + ", will use default.");
+            logger_.error("Could not find end point information for {}, will use default.", key);
             value = hostProperties.getProperty("default");
         }
         StringTokenizer st = new StringTokenizer(value, ":");
diff --git a/incubator/cassandra/trunk/contrib/word_count/src/WordCount.java b/incubator/cassandra/trunk/contrib/word_count/src/WordCount.java
index 33e4fe86..b7ae3669 100644
--- a/incubator/cassandra/trunk/contrib/word_count/src/WordCount.java
+++ b/incubator/cassandra/trunk/contrib/word_count/src/WordCount.java
@@ -21,7 +21,8 @@
 import java.util.SortedMap;
 import java.util.StringTokenizer;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.db.IColumn;
 import org.apache.cassandra.hadoop.ColumnFamilyInputFormat;
@@ -47,7 +48,7 @@
  */
 public class WordCount extends Configured implements Tool
 {
-    private static final Logger logger = Logger.getLogger(WordCount.class);
+    private static final Logger logger = LoggerFactory.getLogger(WordCount.class);
 
     static final String KEYSPACE = "Keyspace1";
     static final String COLUMN_FAMILY = "Standard1";
diff --git a/incubator/cassandra/trunk/contrib/word_count/src/WordCountSetup.java b/incubator/cassandra/trunk/contrib/word_count/src/WordCountSetup.java
index 7bf3aa16..db3dc317 100644
--- a/incubator/cassandra/trunk/contrib/word_count/src/WordCountSetup.java
+++ b/incubator/cassandra/trunk/contrib/word_count/src/WordCountSetup.java
@@ -18,7 +18,8 @@
 
 import java.util.Arrays;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.db.*;
 import org.apache.cassandra.service.StorageProxy;
@@ -27,7 +28,7 @@
 
 public class WordCountSetup
 {
-    private static final Logger logger = Logger.getLogger(WordCountSetup.class);
+    private static final Logger logger = LoggerFactory.getLogger(WordCountSetup.class);
 
     public static final int TEST_COUNT = 4;
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraDaemon.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraDaemon.java
index 0523f125..f06c8296 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraDaemon.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraDaemon.java
@@ -32,7 +32,10 @@
 import org.apache.cassandra.db.commitlog.CommitLog;
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.utils.FBUtilities;
-import org.apache.log4j.Logger;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import org.apache.log4j.PropertyConfigurator;
 
 /**
@@ -40,7 +43,7 @@
  *
  */
 public class CassandraDaemon {
-    private static Logger logger = Logger.getLogger(CassandraDaemon.class);
+    private static Logger logger = LoggerFactory.getLogger(CassandraDaemon.class);
     private HttpServer server;
     private InetAddress listenAddr;
     private int listenPort;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java
index 76f8d21e..f63922b2 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java
@@ -45,12 +45,13 @@
 import org.apache.cassandra.db.filter.QueryPath;
 import org.apache.cassandra.db.marshal.MarshalException;
 import org.apache.cassandra.service.StorageProxy;
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import static org.apache.cassandra.avro.AvroRecordFactory.*;
 import static org.apache.cassandra.avro.ErrorFactory.*;
 
 public class CassandraServer implements Cassandra {
-    private static Logger logger = Logger.getLogger(CassandraServer.class);
+    private static Logger logger = LoggerFactory.getLogger(CassandraServer.class);
 
     private final static GenericArray<Column> EMPTY_SUBCOLUMNS = new GenericData.Array<Column>(0, Schema.parse("{\"type\":\"array\",\"items\":" + Column.SCHEMA$ + "}"));
     private final static Utf8 API_VERSION = new Utf8("0.0.0");
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/client/RingCache.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/client/RingCache.java
index 9fa6db72..f69b4b22 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/client/RingCache.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/client/RingCache.java
@@ -30,7 +30,8 @@
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.thrift.Cassandra;
 import org.apache.cassandra.thrift.CassandraServer;
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.thrift.TException;
 import org.apache.thrift.protocol.TBinaryProtocol;
 import org.apache.thrift.transport.TSocket;
@@ -45,7 +46,7 @@
  */
 public class RingCache
 {
-    final private static Logger logger_ = Logger.getLogger(RingCache.class);
+    final private static Logger logger_ = LoggerFactory.getLogger(RingCache.class);
 
     private Set<String> seeds_ = new HashSet<String>();
     final private int port_= DatabaseDescriptor.getRpcPort();
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java
index 1290d489..86e545be 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java
@@ -23,11 +23,12 @@
 
 import java.util.concurrent.*;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class DebuggableThreadPoolExecutor extends ThreadPoolExecutor
 {
-    protected static Logger logger = Logger.getLogger(JMXEnabledThreadPoolExecutor.class);
+    protected static Logger logger = LoggerFactory.getLogger(JMXEnabledThreadPoolExecutor.class);
 
     public DebuggableThreadPoolExecutor(String threadPoolName)
     {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index c5c52fa3..615b0a9e 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -32,7 +32,8 @@
 import org.apache.cassandra.io.util.FileUtils;
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.utils.XMLUtils;
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
 import org.xml.sax.SAXException;
@@ -50,7 +51,7 @@
 
 public class DatabaseDescriptor
 {
-    private static Logger logger = Logger.getLogger(DatabaseDescriptor.class);
+    private static Logger logger = LoggerFactory.getLogger(DatabaseDescriptor.class);
 
     // don't capitalize these; we need them to match what's in the config file for CLS.valueOf to parse
     public static enum CommitLogSync {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtable.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtable.java
index 55250091..c0073ec3 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtable.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryMemtable.java
@@ -26,7 +26,8 @@
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.dht.IPartitioner;
@@ -38,7 +39,7 @@
 
 public class BinaryMemtable implements IFlushable
 {
-    private static final Logger logger = Logger.getLogger(BinaryMemtable.class);
+    private static final Logger logger = LoggerFactory.getLogger(BinaryMemtable.class);
     private final int threshold = DatabaseDescriptor.getBMTThreshold() * 1024 * 1024;
     private final AtomicInteger currentSize = new AtomicInteger(0);
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java
index e6fc2922..ee26cc7d 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java
@@ -24,11 +24,12 @@
 import org.apache.cassandra.net.IVerbHandler;
 import org.apache.cassandra.net.Message;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class BinaryVerbHandler implements IVerbHandler
 {
-    private static Logger logger_ = Logger.getLogger(BinaryVerbHandler.class);
+    private static Logger logger_ = LoggerFactory.getLogger(BinaryVerbHandler.class);
 
     public void doVerb(Message message)
     { 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java
index d9401b58..0afbad85 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java
@@ -23,7 +23,8 @@
 import java.security.MessageDigest;
 import java.io.IOException;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.commons.lang.ArrayUtils;
 
 import org.apache.cassandra.db.marshal.AbstractType;
@@ -38,7 +39,7 @@
 
 public class Column implements IColumn
 {
-    private static Logger logger_ = Logger.getLogger(Column.class);
+    private static Logger logger_ = LoggerFactory.getLogger(Column.class);
 
     private static ColumnSerializer serializer_ = new ColumnSerializer();
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
index 63c65391..e816376d 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
@@ -29,7 +29,8 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.io.ICompactSerializer2;
@@ -43,7 +44,7 @@
     /* The column serializer for this Column Family. Create based on config. */
     private static ColumnFamilySerializer serializer_ = new ColumnFamilySerializer();
 
-    private static Logger logger_ = Logger.getLogger( ColumnFamily.class );
+    private static Logger logger_ = LoggerFactory.getLogger( ColumnFamily.class );
     private static Map<String, String> columnTypes_ = new HashMap<String, String>();
     String type_;
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index a05a78c2..dbdd474e 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -32,7 +32,8 @@
 import javax.management.MBeanServer;
 import javax.management.ObjectName;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.commons.collections.IteratorUtils;
 
 import com.google.common.base.Predicate;
@@ -61,7 +62,7 @@
 
 public class ColumnFamilyStore implements ColumnFamilyStoreMBean
 {
-    private static Logger logger_ = Logger.getLogger(ColumnFamilyStore.class);
+    private static Logger logger_ = LoggerFactory.getLogger(ColumnFamilyStore.class);
 
     /*
      * submitFlush first puts [Binary]Memtable.getSortedContents on the flushSorter executor,
@@ -129,7 +130,7 @@
         binaryMemtable_ = new AtomicReference<BinaryMemtable>(new BinaryMemtable(this));
 
         if (logger_.isDebugEnabled())
-            logger_.debug("Starting CFS " + columnFamily_);
+            logger_.debug("Starting CFS {}", columnFamily_);
         // scan for data files corresponding to this CF
         List<File> sstableFiles = new ArrayList<File>();
         Pattern auxFilePattern = Pattern.compile("(.*)(-Filter\\.db$|-Index\\.db$)");
@@ -563,7 +564,7 @@ void replaceCompactedSSTables(Collection<SSTableReader> sstables, Iterable<SSTab
      */
     Condition submitFlush(IFlushable flushable)
     {
-        logger_.info("Enqueuing flush of " + flushable);
+        logger_.info("Enqueuing flush of {}", flushable);
         final Condition condition = new SimpleCondition();
         flushable.flushAndSignal(condition, flushSorter_, flushWriter_);
         return condition;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java
index 42fb2f6a..8ae3d254 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java
@@ -30,7 +30,10 @@
 
 import org.apache.cassandra.db.filter.QueryPath;
 import org.apache.cassandra.db.filter.SliceQueryFilter;
-import org.apache.log4j.Logger;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 
 import org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor;
 import org.apache.cassandra.dht.Range;
@@ -53,7 +56,7 @@
 public class CompactionManager implements CompactionManagerMBean
 {
     public static final String MBEAN_OBJECT_NAME = "org.apache.cassandra.db:type=CompactionManager";
-    private static final Logger logger = Logger.getLogger(CompactionManager.class);
+    private static final Logger logger = LoggerFactory.getLogger(CompactionManager.class);
     public static final CompactionManager instance;
 
     private int minimumCompactionThreshold = 4; // compact this many sstables min at a time
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/HintedHandOffManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/HintedHandOffManager.java
index 10e82a50..76f19082 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/HintedHandOffManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/HintedHandOffManager.java
@@ -24,7 +24,8 @@
 import java.util.concurrent.ExecutorService;
 import java.io.IOException;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor;
 import org.apache.cassandra.config.DatabaseDescriptor;
@@ -81,7 +82,7 @@
 {
     public static final HintedHandOffManager instance = new HintedHandOffManager();
 
-    private static final Logger logger_ = Logger.getLogger(HintedHandOffManager.class);
+    private static final Logger logger_ = LoggerFactory.getLogger(HintedHandOffManager.class);
     final static long INTERVAL_IN_MS = 3600 * 1000; // check for ability to deliver hints this often
     public static final String HINTS_CF = "HintsColumnFamily";
     private static final int PAGE_SIZE = 10000;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java
index f4cc6a8e..35f1e600 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java
@@ -26,7 +26,8 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.locks.Condition;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.commons.lang.ArrayUtils;
 
 import org.apache.cassandra.config.DatabaseDescriptor;
@@ -41,7 +42,7 @@
 
 public class Memtable implements Comparable<Memtable>, IFlushable
 {
-    private static final Logger logger = Logger.getLogger(Memtable.class);
+    private static final Logger logger = LoggerFactory.getLogger(Memtable.class);
 
     private boolean isFrozen;
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadRepairVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadRepairVerbHandler.java
index 4683eafb..8dbc06c8 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadRepairVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadRepairVerbHandler.java
@@ -23,11 +23,12 @@
 import org.apache.cassandra.net.IVerbHandler;
 import org.apache.cassandra.net.Message;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class ReadRepairVerbHandler implements IVerbHandler
 {
-    private static Logger logger_ = Logger.getLogger(ReadRepairVerbHandler.class);    
+    private static Logger logger_ = LoggerFactory.getLogger(ReadRepairVerbHandler.class);    
     
     public void doVerb(Message message)
     {          
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java
index 8114e4da..d0347bc6 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java
@@ -32,7 +32,8 @@
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.utils.FBUtilities;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class ReadVerbHandler implements IVerbHandler
 {
@@ -42,7 +43,7 @@
         protected DataOutputBuffer bufOut_ = new DataOutputBuffer();
     }
 
-    private static Logger logger_ = Logger.getLogger( ReadVerbHandler.class );
+    private static Logger logger_ = LoggerFactory.getLogger( ReadVerbHandler.class );
     /* We use this so that we can reuse the same row mutation context for the mutation. */
     private static ThreadLocal<ReadVerbHandler.ReadContext> tls_ = new InheritableThreadLocal<ReadVerbHandler.ReadContext>();
     
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Row.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Row.java
index 635e7f3d..a2ef14ec 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Row.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Row.java
@@ -25,13 +25,14 @@
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.io.ICompactSerializer;
 
 public class Row
 {
-    private static Logger logger_ = Logger.getLogger(Row.class);
+    private static Logger logger_ = LoggerFactory.getLogger(Row.class);
     private static RowSerializer serializer = new RowSerializer();
 
     static RowSerializer serializer()
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
index 07b212ff..438b2bef 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
@@ -26,14 +26,15 @@
 import org.apache.cassandra.net.IVerbHandler;
 import org.apache.cassandra.net.Message;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.net.*;
 import org.apache.cassandra.utils.FBUtilities;
 
 public class RowMutationVerbHandler implements IVerbHandler
 {
-    private static Logger logger_ = Logger.getLogger(RowMutationVerbHandler.class);
+    private static Logger logger_ = LoggerFactory.getLogger(RowMutationVerbHandler.class);
 
     public void doVerb(Message message)
     {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java
index 82438a7b..50c63047 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java
@@ -25,7 +25,8 @@
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.io.ICompactSerializer2;
 import org.apache.cassandra.io.util.DataOutputBuffer;
@@ -35,7 +36,7 @@
 
 public class SuperColumn implements IColumn, IColumnContainer
 {
-	private static Logger logger_ = Logger.getLogger(SuperColumn.class);
+	private static Logger logger_ = LoggerFactory.getLogger(SuperColumn.class);
 
     public static SuperColumnSerializer serializer(AbstractType comparator)
     {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java
index 0b0c9436..96b41393 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java
@@ -25,8 +25,10 @@
 import org.apache.cassandra.config.CFMetaData;
 import org.apache.cassandra.db.filter.SliceQueryFilter;
 import org.apache.cassandra.utils.FBUtilities;
+
 import org.apache.commons.lang.ArrayUtils;
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.dht.Token;
@@ -44,7 +46,7 @@
 
 public class SystemTable
 {
-    private static Logger logger = Logger.getLogger(SystemTable.class);
+    private static Logger logger = LoggerFactory.getLogger(SystemTable.class);
     public static final String STATUS_CF = "LocationInfo"; // keep the old CF string for backwards-compatibility
     private static final String LOCATION_KEY = "L";
     private static final String BOOTSTRAP_KEY = "Bootstrap";
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
index cdda4229..7e769ab6 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
@@ -44,14 +44,15 @@
 import org.apache.cassandra.db.filter.*;
 import org.cliffc.high_scale_lib.NonBlockingHashMap;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class Table 
 {
     public static final String SYSTEM_TABLE = "system";
     public static final String DEFINITIONS = "definitions";
 
-    private static final Logger logger = Logger.getLogger(Table.class);
+    private static final Logger logger = LoggerFactory.getLogger(Table.class);
     private static final String SNAPSHOT_SUBDIR_NAME = "snapshots";
     /* we use this lock to drain updaters before calling a flush. */
     static final ReentrantReadWriteLock flusherLock = new ReentrantReadWriteLock(true);
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLog.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLog.java
index a0ab2bd6..188af1a4 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLog.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLog.java
@@ -34,7 +34,8 @@
 import org.apache.cassandra.concurrent.StageManager;
 
 import org.apache.commons.lang.StringUtils;
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.*;
 import java.util.*;
@@ -77,7 +78,7 @@
 {
     private static volatile int SEGMENT_SIZE = 128*1024*1024; // roll after log gets this big
 
-    static final Logger logger = Logger.getLogger(CommitLog.class);
+    static final Logger logger = LoggerFactory.getLogger(CommitLog.class);
 
     public static CommitLog instance()
     {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java
index ebf09cfc..ec54e6ec 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/commitlog/CommitLogSegment.java
@@ -28,7 +28,9 @@
 import java.util.zip.Checksum;
 
 import org.apache.cassandra.config.CFMetaData;
-import org.apache.log4j.Logger;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.db.ColumnFamily;
@@ -39,7 +41,7 @@
 
 public class CommitLogSegment
 {
-    private static final Logger logger = Logger.getLogger(CommitLogSegment.class);
+    private static final Logger logger = LoggerFactory.getLogger(CommitLogSegment.class);
 
     private final BufferedRandomAccessFile logWriter;
     private final CommitLogHeader header;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SliceQueryFilter.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SliceQueryFilter.java
index 88cfc734..a0b91b0a 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SliceQueryFilter.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SliceQueryFilter.java
@@ -24,7 +24,8 @@
 import java.io.IOException;
 import java.util.*;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.commons.collections.comparators.ReverseComparator;
 import org.apache.commons.collections.iterators.ReverseListIterator;
 import org.apache.commons.collections.IteratorUtils;
@@ -40,7 +41,7 @@
 
 public class SliceQueryFilter extends QueryFilter
 {
-    private static Logger logger = Logger.getLogger(SliceQueryFilter.class);
+    private static Logger logger = LoggerFactory.getLogger(SliceQueryFilter.class);
 
     public final byte[] start, finish;
     public final List<byte[]> bitmasks;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
index 349bfa96..fe91a5bb 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
@@ -25,7 +25,8 @@
  import java.net.InetAddress;
 
  import org.apache.commons.lang.StringUtils;
- import org.apache.log4j.Logger;
+ import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
  import org.apache.commons.lang.ArrayUtils;
 
@@ -45,7 +46,7 @@
 
 public class BootStrapper
 {
-    private static final Logger logger = Logger.getLogger(BootStrapper.class);
+    private static final Logger logger = LoggerFactory.getLogger(BootStrapper.class);
 
     /* endpoints that need to be bootstrapped */
     protected final InetAddress address;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/EndPointState.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/EndPointState.java
index ce8c7e58..cc9c3075 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/EndPointState.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/EndPointState.java
@@ -25,7 +25,8 @@
 import org.apache.cassandra.io.ICompactSerializer;
 import org.apache.cassandra.service.StorageService;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * This abstraction represents both the HeartBeatState and the ApplicationState in an EndPointState
@@ -156,7 +157,7 @@ public int compare(Map.Entry<String, ApplicationState> lhs, Map.Entry<String, Ap
 
 class EndPointStateSerializer implements ICompactSerializer<EndPointState>
 {
-    private static Logger logger_ = Logger.getLogger(EndPointStateSerializer.class);
+    private static Logger logger_ = LoggerFactory.getLogger(EndPointStateSerializer.class);
     
     public void serialize(EndPointState epState, DataOutputStream dos) throws IOException
     {
@@ -177,7 +178,7 @@ public void serialize(EndPointState epState, DataOutputStream dos) throws IOExce
             {
                 if ( Gossiper.MAX_GOSSIP_PACKET_SIZE - dos.size() < estimate )
                 {
-                    logger_.info("@@@@ Breaking out to respect the MTU size in EndPointState serializer. Estimate is " + estimate + " @@@@");
+                    logger_.info("@@@@ Breaking out to respect the MTU size in EndPointState serializer. Estimate is {} @@@@", estimate);;
                     break;
                 }
             
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/FailureDetector.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/FailureDetector.java
index 2804afdc..c4498011 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/FailureDetector.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/FailureDetector.java
@@ -33,7 +33,8 @@
 import java.net.InetAddress;
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.utils.BoundedStatsDeque;
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * This FailureDetector is an implementation of the paper titled
@@ -43,7 +44,7 @@
 public class FailureDetector implements IFailureDetector, FailureDetectorMBean
 {
     public static final IFailureDetector instance = new FailureDetector();
-    private static Logger logger_ = Logger.getLogger(FailureDetector.class);
+    private static Logger logger_ = LoggerFactory.getLogger(FailureDetector.class);
     private static final int sampleSize_ = 1000;
     private static final int phiConvictThreshold_ = 8;
     /* The Failure Detector has to have been up for at least 1 min. */
@@ -126,7 +127,7 @@ public boolean isAlive(InetAddress ep)
     public void report(InetAddress ep)
     {
         if (logger_.isTraceEnabled())
-            logger_.trace("reporting " + ep);
+            logger_.trace("reporting {}", ep);
         long now = System.currentTimeMillis();
         ArrivalWindow heartbeatWindow = arrivalSamples_.get(ep);
         if ( heartbeatWindow == null )
@@ -197,7 +198,7 @@ public static void main(String[] args) throws Throwable
 
 class ArrivalWindow
 {
-    private static Logger logger_ = Logger.getLogger(ArrivalWindow.class);
+    private static Logger logger_ = LoggerFactory.getLogger(ArrivalWindow.class);
     private double tLast_ = 0L;
     private BoundedStatsDeque arrivalIntervals_;
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestSynMessage.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestSynMessage.java
index 22bfed5f..86c929c3 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestSynMessage.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestSynMessage.java
@@ -27,7 +27,8 @@
 import org.apache.cassandra.io.ICompactSerializer;
 import org.apache.cassandra.net.CompactEndPointSerializationHelper;
 import java.net.InetAddress;
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 
 /**
@@ -65,7 +66,7 @@ public GossipDigestSynMessage(String clusterId, List<GossipDigest> gDigests)
 
 class GossipDigestSerializationHelper
 {
-    private static Logger logger_ = Logger.getLogger(GossipDigestSerializationHelper.class);
+    private static Logger logger_ = LoggerFactory.getLogger(GossipDigestSerializationHelper.class);
     
     static boolean serialize(List<GossipDigest> gDigestList, DataOutputStream dos) throws IOException
     {
@@ -112,7 +113,7 @@ static boolean serialize(List<GossipDigest> gDigestList, DataOutputStream dos) t
 
 class EndPointStatesSerializationHelper
 {
-    private static final Logger logger_ = Logger.getLogger(EndPointStatesSerializationHelper.class);
+    private static final Logger logger_ = LoggerFactory.getLogger(EndPointStatesSerializationHelper.class);
 
     static boolean serialize(Map<InetAddress, EndPointState> epStateMap, DataOutputStream dos) throws IOException
     {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
index 0a9e451a..36fb60bb 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
@@ -30,7 +30,8 @@
 import org.apache.cassandra.net.MessagingService;
 import org.apache.cassandra.service.StorageService;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * This module is responsible for Gossiping information for the local endpoint. This abstraction
@@ -101,7 +102,7 @@ public void run()
 
     final static int MAX_GOSSIP_PACKET_SIZE = 1428;
     public final static int intervalInMillis_ = 1000;
-    private static Logger logger_ = Logger.getLogger(Gossiper.class);
+    private static Logger logger_ = LoggerFactory.getLogger(Gossiper.class);
     public static final Gossiper instance = new Gossiper();
 
     private Timer gossipTimer_;
@@ -176,7 +177,7 @@ public void convict(InetAddress endpoint)
         EndPointState epState = endPointStateMap_.get(endpoint);
         if (epState.isAlive())
         {
-            logger_.info("InetAddress " + endpoint + " is now dead.");
+            logger_.info("InetAddress {} is now dead.", endpoint);;
             isAlive(endpoint, epState, false);
         }
     }
@@ -317,7 +318,7 @@ boolean sendGossip(Message message, Set<InetAddress> epSet)
         int index = (size == 1) ? 0 : random_.nextInt(size);
         InetAddress to = liveEndPoints.get(index);
         if (logger_.isTraceEnabled())
-            logger_.trace("Sending a GossipDigestSynMessage to " + to + " ...");
+            logger_.trace("Sending a GossipDigestSynMessage to {} ...", to);;
         MessagingService.instance.sendOneWay(message, to);
         return seeds_.contains(to);
     }
@@ -561,11 +562,11 @@ void notifyFailureDetector(Map<InetAddress, EndPointState> remoteEpStateMap)
     void markAlive(InetAddress addr, EndPointState localState)
     {
         if (logger_.isTraceEnabled())
-            logger_.trace("marking as alive " + addr);
+            logger_.trace("marking as alive {}", addr);
         if ( !localState.isAlive() )
         {
             isAlive(addr, localState, true);
-            logger_.info("InetAddress " + addr + " is now UP");
+            logger_.info("InetAddress {} is now UP", addr);;
         }
     }
 
@@ -573,13 +574,13 @@ private void handleNewJoin(InetAddress ep, EndPointState epState)
     {
         if (justRemovedEndPoints_.containsKey(ep))
             return;
-    	logger_.info("Node " + ep + " is now part of the cluster");
+    	logger_.info("Node {} is now part of the cluster", ep);;
         handleMajorStateChange(ep, epState, false);
     }
 
     private void handleGenerationChange(InetAddress ep, EndPointState epState)
     {
-        logger_.info("Node " + ep + " has restarted, now UP again");
+        logger_.info("Node {} has restarted, now UP again", ep);;
         handleMajorStateChange(ep, epState, true);
     }
 
@@ -867,13 +868,13 @@ public void stop()
 
     public static class JoinVerbHandler implements IVerbHandler
     {
-        private static Logger logger_ = Logger.getLogger( JoinVerbHandler.class);
+        private static Logger logger_ = LoggerFactory.getLogger( JoinVerbHandler.class);
 
         public void doVerb(Message message)
         {
             InetAddress from = message.getFrom();
             if (logger_.isDebugEnabled())
-              logger_.debug("Received a JoinMessage from " + from);
+              logger_.debug("Received a JoinMessage from {}", from);
 
             byte[] bytes = message.getMessageBody();
             DataInputStream dis = new DataInputStream( new ByteArrayInputStream(bytes) );
@@ -896,13 +897,13 @@ public void doVerb(Message message)
 
     public static class GossipDigestSynVerbHandler implements IVerbHandler
     {
-        private static Logger logger_ = Logger.getLogger( GossipDigestSynVerbHandler.class);
+        private static Logger logger_ = LoggerFactory.getLogger( GossipDigestSynVerbHandler.class);
 
         public void doVerb(Message message)
         {
             InetAddress from = message.getFrom();
             if (logger_.isTraceEnabled())
-                logger_.trace("Received a GossipDigestSynMessage from " + from);
+                logger_.trace("Received a GossipDigestSynMessage from {}", from);
 
             byte[] bytes = message.getMessageBody();
             DataInputStream dis = new DataInputStream( new ByteArrayInputStream(bytes) );
@@ -927,7 +928,7 @@ public void doVerb(Message message)
                 GossipDigestAckMessage gDigestAck = new GossipDigestAckMessage(deltaGossipDigestList, deltaEpStateMap);
                 Message gDigestAckMessage = Gossiper.instance.makeGossipDigestAckMessage(gDigestAck);
                 if (logger_.isTraceEnabled())
-                    logger_.trace("Sending a GossipDigestAckMessage to " + from);
+                    logger_.trace("Sending a GossipDigestAckMessage to {}", from);
                 MessagingService.instance.sendOneWay(gDigestAckMessage, from);
             }
             catch (IOException e)
@@ -982,13 +983,13 @@ private void doSort(List<GossipDigest> gDigestList)
 
     public static class GossipDigestAckVerbHandler implements IVerbHandler
     {
-        private static Logger logger_ = Logger.getLogger(GossipDigestAckVerbHandler.class);
+        private static Logger logger_ = LoggerFactory.getLogger(GossipDigestAckVerbHandler.class);
 
         public void doVerb(Message message)
         {
             InetAddress from = message.getFrom();
             if (logger_.isTraceEnabled())
-                logger_.trace("Received a GossipDigestAckMessage from " + from);
+                logger_.trace("Received a GossipDigestAckMessage from {}", from);
 
             byte[] bytes = message.getMessageBody();
             DataInputStream dis = new DataInputStream( new ByteArrayInputStream(bytes) );
@@ -1019,7 +1020,7 @@ public void doVerb(Message message)
                 GossipDigestAck2Message gDigestAck2 = new GossipDigestAck2Message(deltaEpStateMap);
                 Message gDigestAck2Message = Gossiper.instance.makeGossipDigestAck2Message(gDigestAck2);
                 if (logger_.isTraceEnabled())
-                    logger_.trace("Sending a GossipDigestAck2Message to " + from);
+                    logger_.trace("Sending a GossipDigestAck2Message to {}", from);
                 MessagingService.instance.sendOneWay(gDigestAck2Message, from);
             }
             catch ( IOException e )
@@ -1031,13 +1032,13 @@ public void doVerb(Message message)
 
     public static class GossipDigestAck2VerbHandler implements IVerbHandler
     {
-        private static Logger logger_ = Logger.getLogger(GossipDigestAck2VerbHandler.class);
+        private static Logger logger_ = LoggerFactory.getLogger(GossipDigestAck2VerbHandler.class);
 
         public void doVerb(Message message)
         {
             InetAddress from = message.getFrom();
             if (logger_.isTraceEnabled())
-                logger_.trace("Received a GossipDigestAck2Message from " + from);
+                logger_.trace("Received a GossipDigestAck2Message from {}", from);
 
             byte[] bytes = message.getMessageBody();
             DataInputStream dis = new DataInputStream( new ByteArrayInputStream(bytes) );
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java
index d4c66055..578a5cba 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java
@@ -24,7 +24,8 @@
 import java.io.IOException;
 import java.util.*;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.db.IColumn;
@@ -58,7 +59,7 @@
 public class ColumnFamilyInputFormat extends InputFormat<String, SortedMap<byte[], IColumn>>
 {
 
-    private static final Logger logger = Logger.getLogger(StorageService.class);
+    private static final Logger logger = LoggerFactory.getLogger(StorageService.class);
 
     private void validateConfiguration(Configuration conf)
     {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/CompactionIterator.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/CompactionIterator.java
index adf8b5eb..1853aeb1 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/CompactionIterator.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/CompactionIterator.java
@@ -28,7 +28,8 @@
 import java.util.ArrayList;
 import java.util.Iterator;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.commons.collections.iterators.CollatingIterator;
 
 import org.apache.cassandra.utils.ReducingIterator;
@@ -42,7 +43,7 @@
 
 public class CompactionIterator extends ReducingIterator<IteratingRow, CompactionIterator.CompactedRow> implements Closeable
 {
-    private static Logger logger = Logger.getLogger(CompactionIterator.class);
+    private static Logger logger = LoggerFactory.getLogger(CompactionIterator.class);
 
     protected static final int FILE_BUFFER_SIZE = 1024 * 1024;
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/RowIndexedReader.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/RowIndexedReader.java
index bd5a426a..8e051cc3 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/RowIndexedReader.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/RowIndexedReader.java
@@ -26,7 +26,8 @@
 import java.nio.channels.FileChannel;
 import java.nio.MappedByteBuffer;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.cache.InstrumentedCache;
 import org.apache.cassandra.dht.IPartitioner;
@@ -52,7 +53,7 @@
  */
 class RowIndexedReader extends SSTableReader
 {
-    private static final Logger logger = Logger.getLogger(RowIndexedReader.class);
+    private static final Logger logger = LoggerFactory.getLogger(RowIndexedReader.class);
 
     private static final long BUFFER_SIZE = Integer.MAX_VALUE;
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/RowIndexedScanner.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/RowIndexedScanner.java
index 8402557a..118a0acd 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/RowIndexedScanner.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/RowIndexedScanner.java
@@ -30,12 +30,13 @@
 import org.apache.cassandra.io.util.BufferedRandomAccessFile;
 import org.apache.cassandra.io.util.FileDataInput;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 
 public class RowIndexedScanner extends SSTableScanner
 {
-    private static Logger logger = Logger.getLogger(RowIndexedScanner.class);
+    private static Logger logger = LoggerFactory.getLogger(RowIndexedScanner.class);
 
     private final BufferedRandomAccessFile file;
     private final SSTableReader sstable;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTable.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTable.java
index ca6eaff1..a44a1ba5 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTable.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTable.java
@@ -26,7 +26,8 @@
 import java.util.Map;
 import java.util.StringTokenizer;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.commons.lang.StringUtils;
 
 import org.apache.cassandra.dht.IPartitioner;
@@ -50,7 +51,7 @@
  */
 public abstract class SSTable
 {
-    static final Logger logger = Logger.getLogger(SSTable.class);
+    static final Logger logger = LoggerFactory.getLogger(SSTable.class);
 
     public static final int FILES_ON_DISK = 3; // data, index, and bloom filter
     public static final String COMPONENT_DATA = "Data.db";
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableDeletingReference.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableDeletingReference.java
index 8d6cc27a..8b8eed26 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableDeletingReference.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableDeletingReference.java
@@ -27,14 +27,15 @@
 import java.util.Timer;
 import java.util.TimerTask;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.io.DeletionService;
 import org.apache.cassandra.io.util.FileUtils;
 
 public class SSTableDeletingReference extends PhantomReference<SSTableReader>
 {
-    private static final Logger logger = Logger.getLogger(SSTableDeletingReference.class);
+    private static final Logger logger = LoggerFactory.getLogger(SSTableDeletingReference.class);
 
     private static final Timer timer = new Timer("SSTABLE-CLEANUP-TIMER");
     public static final int RETRY_DELAY = 10000;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableReader.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableReader.java
index a502a225..b01a2db6 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableReader.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableReader.java
@@ -26,7 +26,8 @@
 import java.nio.channels.FileChannel;
 import java.nio.MappedByteBuffer;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.cache.InstrumentedCache;
 import org.apache.cassandra.dht.IPartitioner;
@@ -49,7 +50,7 @@
  */
 public abstract class SSTableReader extends SSTable implements Comparable<SSTableReader>
 {
-    private static final Logger logger = Logger.getLogger(SSTableReader.class);
+    private static final Logger logger = LoggerFactory.getLogger(SSTableReader.class);
 
     // `finalizers` is required to keep the PhantomReferences alive after the enclosing SSTR is itself
     // unreferenced.  otherwise they will never get enqueued.
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableScanner.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableScanner.java
index cc96c161..ac7bc1bb 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableScanner.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableScanner.java
@@ -30,8 +30,6 @@
 import org.apache.cassandra.io.util.BufferedRandomAccessFile;
 import org.apache.cassandra.io.util.FileDataInput;
 
-import org.apache.log4j.Logger;
-
 
 public abstract class SSTableScanner implements Iterator<IteratingRow>, Closeable
 {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableTracker.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableTracker.java
index 49f84b66..beeeb112 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableTracker.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableTracker.java
@@ -29,11 +29,12 @@
 import org.apache.cassandra.db.DecoratedKey;
 import org.apache.cassandra.utils.Pair;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class SSTableTracker implements Iterable<SSTableReader>
 {
-    private static final Logger logger = Logger.getLogger(SSTableTracker.class);
+    private static final Logger logger = LoggerFactory.getLogger(SSTableTracker.class);
 
     private volatile Set<SSTableReader> sstables;
     private final AtomicLong liveSize = new AtomicLong();
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableWriter.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableWriter.java
index 698afb7f..129444ca 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableWriter.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableWriter.java
@@ -26,7 +26,8 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.db.DecoratedKey;
@@ -39,7 +40,7 @@
 
 public class SSTableWriter extends SSTable
 {
-    private static Logger logger = Logger.getLogger(SSTableWriter.class);
+    private static Logger logger = LoggerFactory.getLogger(SSTableWriter.class);
 
     private long keysWritten;
     private BufferedRandomAccessFile dataFile;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/util/FileUtils.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/util/FileUtils.java
index 2bbe7e86..ac194e71 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/util/FileUtils.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/util/FileUtils.java
@@ -25,12 +25,13 @@
 
 import org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 
 public class FileUtils
 {
-    private static Logger logger_ = Logger.getLogger(FileUtils.class);
+    private static Logger logger_ = LoggerFactory.getLogger(FileUtils.class);
     private static final DecimalFormat df_ = new DecimalFormat("#.##");
     private static final double kb_ = 1024d;
     private static final double mb_ = 1024*1024d;
@@ -106,7 +107,7 @@ public static boolean delete(List<String> files) throws IOException
             if (bVal)
             {
             	if (logger_.isDebugEnabled())
-            	  logger_.debug("Deleted file " + file);
+            	  logger_.debug("Deleted file {}", file);
                 files.remove(i);
             }
         }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java
index 313b3722..222ec44a 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/AbstractReplicationStrategy.java
@@ -22,7 +22,8 @@
 import java.util.*;
 
 import org.apache.cassandra.config.DatabaseDescriptor;
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import com.google.common.collect.HashMultimap;
 import com.google.common.collect.Multimap;
@@ -41,7 +42,7 @@
 */
 public abstract class AbstractReplicationStrategy
 {
-    protected static final Logger logger_ = Logger.getLogger(AbstractReplicationStrategy.class);
+    protected static final Logger logger_ = LoggerFactory.getLogger(AbstractReplicationStrategy.class);
 
     private TokenMetadata tokenMetadata_;
     protected final IEndPointSnitch snitch_;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/DatacenterEndPointSnitch.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/DatacenterEndPointSnitch.java
index d376f0d7..c6af9ee8 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/DatacenterEndPointSnitch.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/locator/DatacenterEndPointSnitch.java
@@ -27,7 +27,8 @@
 import java.util.*;
 import javax.xml.parsers.ParserConfigurationException;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.utils.XMLUtils;
 import org.xml.sax.SAXException;
@@ -60,7 +61,7 @@
     /**
      * Reference to the logger.
      */
-    private static Logger logger_ = Logger.getLogger(DatacenterEndPointSnitch.class);
+    private static Logger logger_ = LoggerFactory.getLogger(DatacenterEndPointSnitch.class);
 
     /**
      * Constructor, intialize XML config and read the config in...
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/AsyncResult.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/AsyncResult.java
index 2a3b4427..13f679d6 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/AsyncResult.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/AsyncResult.java
@@ -25,11 +25,12 @@
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 class AsyncResult implements IAsyncResult
 {
-    private static Logger logger_ = Logger.getLogger( AsyncResult.class );
+    private static Logger logger_ = LoggerFactory.getLogger( AsyncResult.class );
     private byte[] result_;
     private AtomicBoolean done_ = new AtomicBoolean(false);
     private Lock lock_ = new ReentrantLock();
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/FileStreamTask.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/FileStreamTask.java
index c9746ac0..de217d44 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/FileStreamTask.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/FileStreamTask.java
@@ -27,14 +27,15 @@
 
 import org.apache.cassandra.streaming.StreamOutManager;
 import org.apache.cassandra.utils.FBUtilities;
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.utils.WrappedRunnable;
 
 public class FileStreamTask extends WrappedRunnable
 {
-    private static Logger logger = Logger.getLogger( FileStreamTask.class );
+    private static Logger logger = LoggerFactory.getLogger( FileStreamTask.class );
     
     public static final int CHUNK_SIZE = 32*1024*1024;
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/IncomingTcpConnection.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/IncomingTcpConnection.java
index 07794dab..67905080 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/IncomingTcpConnection.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/IncomingTcpConnection.java
@@ -24,13 +24,14 @@
 import java.io.*;
 import java.net.Socket;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.streaming.IncomingStreamReader;
 
 public class IncomingTcpConnection extends Thread
 {
-    private static Logger logger = Logger.getLogger(IncomingTcpConnection.class);
+    private static Logger logger = LoggerFactory.getLogger(IncomingTcpConnection.class);
 
     private final DataInputStream input;
     private Socket socket;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessageDeliveryTask.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessageDeliveryTask.java
index 88cce5bf..f65c10fb 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessageDeliveryTask.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessageDeliveryTask.java
@@ -18,14 +18,15 @@
 
 package org.apache.cassandra.net;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.service.StorageService;
 
 public class MessageDeliveryTask implements Runnable
 {
     private Message message_;
-    private static Logger logger_ = Logger.getLogger(MessageDeliveryTask.class);    
+    private static Logger logger_ = LoggerFactory.getLogger(MessageDeliveryTask.class);    
     
     public MessageDeliveryTask(Message message)
     {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessageDeserializationTask.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessageDeserializationTask.java
index 86e512f1..f7ffd0e3 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessageDeserializationTask.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessageDeserializationTask.java
@@ -24,11 +24,12 @@
 
 import org.apache.cassandra.net.sink.SinkManager;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 class MessageDeserializationTask implements Runnable
 {
-    private static Logger logger_ = Logger.getLogger(MessageDeserializationTask.class);
+    private static Logger logger_ = LoggerFactory.getLogger(MessageDeserializationTask.class);
     
     private ByteArrayInputStream bytes;
     
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
index 47b5ccc7..409a21eb 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
@@ -29,7 +29,8 @@
 import org.apache.cassandra.utils.*;
 import org.cliffc.high_scale_lib.NonBlockingHashMap;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
 import java.net.ServerSocket;
@@ -70,7 +71,7 @@
     
     private static NonBlockingHashMap<InetAddress, OutboundTcpConnectionPool> connectionManagers_ = new NonBlockingHashMap<InetAddress, OutboundTcpConnectionPool>();
     
-    private static Logger logger_ = Logger.getLogger(MessagingService.class);
+    private static Logger logger_ = LoggerFactory.getLogger(MessagingService.class);
     
     public static final MessagingService instance = new MessagingService();
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/OutboundTcpConnection.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/OutboundTcpConnection.java
index 9da33fae..1d0e8f35 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/OutboundTcpConnection.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/OutboundTcpConnection.java
@@ -30,13 +30,14 @@
 import java.util.concurrent.LinkedBlockingQueue;
 
 import org.apache.cassandra.utils.FBUtilities;
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.config.DatabaseDescriptor;
 
 public class OutboundTcpConnection extends Thread
 {
-    private static final Logger logger = Logger.getLogger(OutboundTcpConnection.class);
+    private static final Logger logger = LoggerFactory.getLogger(OutboundTcpConnection.class);
 
     private static final ByteBuffer CLOSE_SENTINEL = ByteBuffer.allocate(0);
     private static final int OPEN_RETRY_DELAY = 100; // ms between retries
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/OutboundTcpConnectionPool.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/OutboundTcpConnectionPool.java
index 1878a3f4..f27845f4 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/OutboundTcpConnectionPool.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/OutboundTcpConnectionPool.java
@@ -21,8 +21,6 @@
 import java.io.IOException;
 import java.net.InetAddress;
 
-import org.apache.log4j.Logger;
-
 import org.apache.cassandra.concurrent.StageManager;
 
 class OutboundTcpConnectionPool
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/ResponseVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/ResponseVerbHandler.java
index 28d76700..020d1876 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/ResponseVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/ResponseVerbHandler.java
@@ -18,11 +18,12 @@
 
 package org.apache.cassandra.net;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class ResponseVerbHandler implements IVerbHandler
 {
-    private static final Logger logger_ = Logger.getLogger( ResponseVerbHandler.class );
+    private static final Logger logger_ = LoggerFactory.getLogger( ResponseVerbHandler.class );
     
     public void doVerb(Message message)
     {     
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
index 6f06d0bf..816f53ff 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
@@ -41,7 +41,8 @@
 import org.apache.cassandra.net.MessagingService;
 import org.apache.cassandra.utils.*;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import com.google.common.collect.Collections2;
 import com.google.common.base.Predicate;
@@ -87,7 +88,7 @@
  */
 public class AntiEntropyService
 {
-    private static final Logger logger = Logger.getLogger(AntiEntropyService.class);
+    private static final Logger logger = LoggerFactory.getLogger(AntiEntropyService.class);
 
     // millisecond lifetime to store trees before they become stale
     public final static long TREE_STORE_TIMEOUT = 600000;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ConsistencyManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ConsistencyManager.java
index d21d5bd9..ce3d8743 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ConsistencyManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ConsistencyManager.java
@@ -28,7 +28,6 @@
 import java.util.List;
 import java.util.concurrent.LinkedBlockingQueue;
 
-import org.apache.log4j.Logger;
 import org.apache.commons.lang.StringUtils;
 
 import org.apache.cassandra.cache.ICacheExpungeHook;
@@ -42,10 +41,12 @@
 import org.apache.cassandra.utils.ExpiringMap;
 import org.apache.cassandra.utils.FBUtilities;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 class ConsistencyManager implements Runnable
 {
-	private static Logger logger_ = Logger.getLogger(ConsistencyManager.class);
+	private static Logger logger_ = LoggerFactory.getLogger(ConsistencyManager.class);
     private final String table_;
 
     class DigestResponseHandler implements IAsyncCallback
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/GCInspector.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/GCInspector.java
index 82768a05..74db3d17 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/GCInspector.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/GCInspector.java
@@ -1,6 +1,7 @@
 package org.apache.cassandra.service;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.util.*;
 import java.util.concurrent.ExecutorService;
@@ -18,7 +19,7 @@
 {
     public static final GCInspector instance = new GCInspector();
 
-    private static final Logger logger = Logger.getLogger(GCInspector.class);
+    private static final Logger logger = LoggerFactory.getLogger(GCInspector.class);
     final static long INTERVAL_IN_MS = 10 * 1000;
     final static long MIN_DURATION = 200;
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/LoadDisseminator.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/LoadDisseminator.java
index a3aeb36f..45428c65 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/LoadDisseminator.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/LoadDisseminator.java
@@ -22,11 +22,12 @@
 import org.apache.cassandra.gms.ApplicationState;
 import org.apache.cassandra.gms.Gossiper;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 class LoadDisseminator extends TimerTask
 {
-    private final static Logger logger_ = Logger.getLogger(LoadDisseminator.class);
+    private final static Logger logger_ = LoggerFactory.getLogger(LoadDisseminator.class);
     protected final static String loadInfo_= "LOAD-INFORMATION";
     
     public void run()
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/QuorumResponseHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/QuorumResponseHandler.java
index 05022ad8..c8e5b07b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/QuorumResponseHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/QuorumResponseHandler.java
@@ -33,11 +33,12 @@
 import org.apache.cassandra.net.MessagingService;
 import org.apache.cassandra.utils.SimpleCondition;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class QuorumResponseHandler<T> implements IAsyncCallback
 {
-    protected static final Logger logger = Logger.getLogger( QuorumResponseHandler.class );
+    protected static final Logger logger = LoggerFactory.getLogger( QuorumResponseHandler.class );
     protected final SimpleCondition condition = new SimpleCondition();
     protected final Collection<Message> responses;
     private IResponseResolver<T> responseResolver;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java
index c9a761ca..2b1fadf2 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/RangeSliceResponseResolver.java
@@ -22,7 +22,8 @@
 import java.net.InetAddress;
 import java.util.*;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.commons.collections.iterators.CollatingIterator;
 
@@ -40,7 +41,7 @@
  */
 public class RangeSliceResponseResolver implements IResponseResolver<List<Row>>
 {
-    private static final Logger logger_ = Logger.getLogger(RangeSliceResponseResolver.class);
+    private static final Logger logger_ = LoggerFactory.getLogger(RangeSliceResponseResolver.class);
     private final String table;
     private final List<InetAddress> sources;
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/RangeSliceVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/RangeSliceVerbHandler.java
index 2ff27625..d6a5cf96 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/RangeSliceVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/RangeSliceVerbHandler.java
@@ -25,12 +25,13 @@
 import org.apache.cassandra.net.IVerbHandler;
 import org.apache.cassandra.net.Message;
 import org.apache.cassandra.net.MessagingService;
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class RangeSliceVerbHandler implements IVerbHandler
 {
 
-    private static final Logger logger = Logger.getLogger(RangeSliceVerbHandler.class);
+    private static final Logger logger = LoggerFactory.getLogger(RangeSliceVerbHandler.class);
 
     public void doVerb(Message message)
     {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadRepairManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadRepairManager.java
index ccf9f766..63856314 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadRepairManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadRepairManager.java
@@ -31,7 +31,8 @@
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.cache.ICacheExpungeHook;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 
 /*
@@ -45,7 +46,7 @@
  */
 class ReadRepairManager
 {
-    private static final Logger logger_ = Logger.getLogger(ReadRepairManager.class);
+    private static final Logger logger_ = LoggerFactory.getLogger(ReadRepairManager.class);
     private static final long expirationTimeInMillis = 2000;
     public static final ReadRepairManager instance = new ReadRepairManager();
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadResponseResolver.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadResponseResolver.java
index ae7a3d6a..ea781328 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadResponseResolver.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ReadResponseResolver.java
@@ -36,7 +36,8 @@
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.config.DatabaseDescriptor;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Turns ReadResponse messages into Row objects, resolving to the most recent
@@ -44,7 +45,7 @@
  */
 public class ReadResponseResolver implements IResponseResolver<Row>
 {
-	private static Logger logger_ = Logger.getLogger(ReadResponseResolver.class);
+	private static Logger logger_ = LoggerFactory.getLogger(ReadResponseResolver.class);
     private final String table;
     private final int responseCount;
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageLoadBalancer.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageLoadBalancer.java
index e8d74ca8..813ec75a 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageLoadBalancer.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageLoadBalancer.java
@@ -22,7 +22,8 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.concurrent.JMXEnabledThreadPoolExecutor;
 import org.apache.cassandra.dht.Token;
@@ -70,14 +71,14 @@ public void run()
             int myLoad = localLoad();            
             InetAddress predecessor = StorageService.instance.getPredecessor(StorageService.getLocalStorageEndPoint());
             if (logger_.isDebugEnabled())
-              logger_.debug("Trying to relocate the predecessor " + predecessor);
+              logger_.debug("Trying to relocate the predecessor {}", predecessor);
             boolean value = tryThisNode(myLoad, threshold, predecessor);
             if ( !value )
             {
                 loadInfo2_.remove(predecessor);
                 InetAddress successor = StorageService.instance.getSuccessor(StorageService.getLocalStorageEndPoint());
                 if (logger_.isDebugEnabled())
-                  logger_.debug("Trying to relocate the successor " + successor);
+                  logger_.debug("Trying to relocate the successor {}", successor);
                 value = tryThisNode(myLoad, threshold, successor);
                 if ( !value )
                 {
@@ -88,7 +89,7 @@ public void run()
                         if ( target != null )
                         {
                             if (logger_.isDebugEnabled())
-                              logger_.debug("Trying to relocate the random node " + target);
+                              logger_.debug("Trying to relocate the random node {}", target);
                             value = tryThisNode(myLoad, threshold, target);
                             if ( !value )
                             {
@@ -137,7 +138,7 @@ private boolean tryThisNode(int myLoad, int threshold, InetAddress target)
                 MoveMessage moveMessage = new MoveMessage(targetToken);
                 Message message = new Message(StorageService.getLocalStorageEndPoint(), StorageLoadBalancer.lbStage_, StorageLoadBalancer.moveMessageVerbHandler_, new Object[]{moveMessage});
                 if (logger_.isDebugEnabled())
-                  logger_.debug("Sending a move message to " + target);
+                  logger_.debug("Sending a move message to {}", target);
                 IAsyncResult result = MessagingService.getMessagingInstance().sendRR(message, target);
                 value = (Boolean)result.get()[0];
                 if (logger_.isDebugEnabled())
@@ -167,7 +168,7 @@ public void doVerb(Message message)
 
     public static final StorageLoadBalancer instance = new StorageLoadBalancer();
 
-    private static final Logger logger_ = Logger.getLogger(StorageLoadBalancer.class);
+    private static final Logger logger_ = LoggerFactory.getLogger(StorageLoadBalancer.class);
     /* time to delay in minutes the actual load balance procedure if heavily loaded */
     private static final int delay_ = 5;
     /* If a node's load is this factor more than the average, it is considered Heavy */
@@ -262,7 +263,7 @@ private double averageSystemLoad()
         }
         double averageLoad = (nodeCount > 0) ? (systemLoad / nodeCount) : 0;
         if (logger_.isDebugEnabled())
-            logger_.debug("Average system load is " + averageLoad);
+            logger_.debug("Average system load is {}", averageLoad);
         return averageLoad;
     }
 
@@ -362,7 +363,7 @@ public void waitForLoadInfo()
         int duration = BROADCAST_INTERVAL + StorageService.RING_DELAY;
         try
         {
-            logger_.info("Sleeping " + duration + " ms to wait for load information...");
+            logger_.info("Sleeping {} ms to wait for load information...", duration);
             Thread.sleep(duration);
         }
         catch (InterruptedException e)
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
index 7c21e222..8fb0bc49 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -30,7 +30,8 @@
 import javax.management.MBeanServer;
 import javax.management.ObjectName;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.commons.lang.ArrayUtils;
 import org.apache.commons.lang.StringUtils;
 
@@ -58,7 +59,7 @@
 
 public class StorageProxy implements StorageProxyMBean
 {
-    private static final Logger logger = Logger.getLogger(StorageProxy.class);
+    private static final Logger logger = LoggerFactory.getLogger(StorageProxy.class);
 
     // mbean stuff
     private static final LatencyTracker readStats = new LatencyTracker();
@@ -550,7 +551,7 @@ private static int determineBlockFor(int expandedTargets, ConsistencyLevel consi
     throws IOException, UnavailableException, TimeoutException
     {
         if (logger.isDebugEnabled())
-            logger.debug(command);
+            logger.debug(command.toString());
         long startTime = System.nanoTime();
 
         final String table = command.keyspace;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index 87d6fa81..8393db67 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -51,7 +51,9 @@
 import org.apache.cassandra.utils.WrappedRunnable;
 import org.apache.cassandra.io.util.FileUtils;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import org.apache.log4j.Level;
 import org.apache.commons.lang.StringUtils;
 
@@ -66,7 +68,7 @@
  */
 public class StorageService implements IEndPointStateChangeSubscriber, StorageServiceMBean
 {
-    private static Logger logger_ = Logger.getLogger(StorageService.class);     
+    private static Logger logger_ = LoggerFactory.getLogger(StorageService.class);     
 
     public static final int RING_DELAY = 30 * 1000; // delay after which we assume ring has stablized
 
@@ -185,7 +187,7 @@ private void finishBootstrapping()
     public void setToken(Token token)
     {
         if (logger_.isDebugEnabled())
-            logger_.debug("Setting token to " + token);
+            logger_.debug("Setting token to {}", token);
         SystemTable.updateToken(token);
         tokenMetadata_.updateNormalToken(token, FBUtilities.getLocalAddress());
     }
@@ -673,7 +675,7 @@ public static void calculatePendingRanges(AbstractReplicationStrategy strategy,
         if (bootstrapTokens.isEmpty() && leavingEndPoints.isEmpty())
         {
             if (logger_.isDebugEnabled())
-                logger_.debug("No bootstrapping or leaving nodes -> empty pending ranges for " + table);
+                logger_.debug("No bootstrapping or leaving nodes -> empty pending ranges for {}", table);
             tm.setPendingRanges(table, pendingRanges);
             return;
         }
@@ -1205,7 +1207,7 @@ public InetAddress findSuitableEndPoint(String table, String key) throws IOExcep
     public void setLog4jLevel(String classQualifier, String rawLevel)
     {
         Level level = Level.toLevel(rawLevel);
-        Logger.getLogger(classQualifier).setLevel(level);
+        org.apache.log4j.Logger.getLogger(classQualifier).setLevel(level);
         logger_.info("set log level to " + level + " for classes under '" + classQualifier + "' (if the level doesn't look like '" + rawLevel + "' then log4j couldn't parse '" + rawLevel + "')");
     }
 
@@ -1418,7 +1420,7 @@ public void runMayThrow() throws IOException
 		    StorageLoadBalancer.instance.waitForLoadInfo();
 		    bootstrapToken = BootStrapper.getBalancedToken(tokenMetadata_, StorageLoadBalancer.instance.getLoadInfo());
 		}
-                logger_.info("re-bootstrapping to new token " + bootstrapToken);
+                logger_.info("re-bootstrapping to new token {}", bootstrapToken);
                 startBootstrap(bootstrapToken);
             }
         };
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/WriteResponseHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/WriteResponseHandler.java
index dd32f3bb..8bd3c4aa 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/WriteResponseHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/WriteResponseHandler.java
@@ -34,11 +34,12 @@
 import org.apache.cassandra.net.MessagingService;
 import org.apache.cassandra.utils.SimpleCondition;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class WriteResponseHandler implements IAsyncCallback
 {
-    protected static final Logger logger = Logger.getLogger( WriteResponseHandler.class );
+    protected static final Logger logger = LoggerFactory.getLogger( WriteResponseHandler.class );
     protected final SimpleCondition condition = new SimpleCondition();
     private final int responseCount;
     protected final Collection<Message> responses;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/IncomingStreamReader.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/IncomingStreamReader.java
index a7893c7f..a218f091 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/IncomingStreamReader.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/IncomingStreamReader.java
@@ -24,13 +24,14 @@
 import java.nio.channels.SocketChannel;
 import java.io.*;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.net.FileStreamTask;
 
 public class IncomingStreamReader
 {
-    private static Logger logger = Logger.getLogger(IncomingStreamReader.class);
+    private static Logger logger = LoggerFactory.getLogger(IncomingStreamReader.class);
     private PendingFile pendingFile;
     private CompletedFileStatus streamStatus;
     private SocketChannel socketChannel;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamCompletionHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamCompletionHandler.java
index 02b97ac1..345c32bb 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamCompletionHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamCompletionHandler.java
@@ -23,7 +23,8 @@
 import java.io.IOException;
 import java.net.InetAddress;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.db.Table;
 import org.apache.cassandra.io.sstable.SSTableReader;
@@ -41,7 +42,7 @@
 */
 class StreamCompletionHandler implements IStreamComplete
 {
-    private static Logger logger = Logger.getLogger(StreamCompletionHandler.class);
+    private static Logger logger = LoggerFactory.getLogger(StreamCompletionHandler.class);
 
     public void onStreamCompletion(InetAddress host, PendingFile pendingFile, CompletedFileStatus streamStatus) throws IOException
     {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamFinishedVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamFinishedVerbHandler.java
index 759aa469..72af2766 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamFinishedVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamFinishedVerbHandler.java
@@ -26,7 +26,8 @@
 import java.io.IOError;
 import java.io.IOException;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.net.IVerbHandler;
 import org.apache.cassandra.net.Message;
@@ -34,7 +35,7 @@
 
 public class StreamFinishedVerbHandler implements IVerbHandler
 {
-    private static Logger logger = Logger.getLogger(StreamFinishedVerbHandler.class);
+    private static Logger logger = LoggerFactory.getLogger(StreamFinishedVerbHandler.class);
 
     public void doVerb(Message message)
     {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamIn.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamIn.java
index 5ff3e06e..f210bbca 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamIn.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamIn.java
@@ -24,7 +24,8 @@
 import java.net.InetAddress;
 import java.util.Collection;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.commons.lang.StringUtils;
 
 import org.apache.cassandra.dht.Range;
@@ -35,7 +36,7 @@
 /** for streaming data from other nodes in to this one */
 public class StreamIn
 {
-    private static Logger logger = Logger.getLogger(StreamOut.class);
+    private static Logger logger = LoggerFactory.getLogger(StreamOut.class);
 
     /**
      * Request ranges to be transferred from source to local node
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamInManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamInManager.java
index 9ac96d8b..b58a4814 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamInManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamInManager.java
@@ -26,11 +26,12 @@
 import com.google.common.collect.Multimaps;
 import org.apache.cassandra.streaming.IStreamComplete;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 class StreamInManager
 {
-    private static final Logger logger = Logger.getLogger(StreamInManager.class);
+    private static final Logger logger = LoggerFactory.getLogger(StreamInManager.class);
 
     /* Maintain a stream context per host that is the source of the stream */
     public static final Map<InetAddress, List<PendingFile>> ctxBag_ = new Hashtable<InetAddress, List<PendingFile>>();
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamInitiateDoneVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamInitiateDoneVerbHandler.java
index 32a272ff..f48a2f53 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamInitiateDoneVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamInitiateDoneVerbHandler.java
@@ -21,7 +21,8 @@
  */
 
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.net.IVerbHandler;
 import org.apache.cassandra.net.Message;
@@ -29,7 +30,7 @@
 
 public class StreamInitiateDoneVerbHandler implements IVerbHandler
 {
-    private static Logger logger = Logger.getLogger(StreamInitiateDoneVerbHandler.class);
+    private static Logger logger = LoggerFactory.getLogger(StreamInitiateDoneVerbHandler.class);
 
     public void doVerb(Message message)
     {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamInitiateVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamInitiateVerbHandler.java
index 971b85e6..fbb7bdb3 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamInitiateVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamInitiateVerbHandler.java
@@ -23,7 +23,8 @@
 import java.net.InetAddress;
 import java.util.*;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.db.ColumnFamilyStore;
@@ -39,7 +40,7 @@
 
 public class StreamInitiateVerbHandler implements IVerbHandler
 {
-    private static Logger logger = Logger.getLogger(StreamInitiateVerbHandler.class);
+    private static Logger logger = LoggerFactory.getLogger(StreamInitiateVerbHandler.class);
 
     /*
      * Here we handle the StreamInitiateMessage. Here we get the
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamOut.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamOut.java
index bef1a724..127ce8f4 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamOut.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamOut.java
@@ -27,7 +27,8 @@
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.commons.lang.StringUtils;
 
 import org.apache.cassandra.dht.Range;
@@ -53,7 +54,7 @@
  */
 public class StreamOut
 {
-    private static Logger logger = Logger.getLogger(StreamOut.class);
+    private static Logger logger = LoggerFactory.getLogger(StreamOut.class);
 
     static String TABLE_NAME = "STREAMING-TABLE-NAME";
     
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamOutManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamOutManager.java
index 699c5d1d..0d5f1851 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamOutManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamOutManager.java
@@ -37,14 +37,15 @@
 import org.apache.cassandra.io.util.FileUtils;
 import org.apache.cassandra.utils.SimpleCondition;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * This class manages the streaming of multiple files one after the other.
 */
 public class StreamOutManager
 {   
-    private static Logger logger = Logger.getLogger( StreamOutManager.class );
+    private static Logger logger = LoggerFactory.getLogger( StreamOutManager.class );
         
     private static ConcurrentMap<InetAddress, StreamOutManager> streamManagers = new ConcurrentHashMap<InetAddress, StreamOutManager>();
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamRequestVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamRequestVerbHandler.java
index d0d98143..e2c8cbf8 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamRequestVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamRequestVerbHandler.java
@@ -26,7 +26,8 @@
 import org.apache.cassandra.net.IVerbHandler;
 import org.apache.cassandra.net.Message;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
  /**
  * This verb handler handles the StreamRequestMessage that is sent by
@@ -34,7 +35,7 @@
 */
 public class StreamRequestVerbHandler implements IVerbHandler
 {
-    private static Logger logger_ = Logger.getLogger(StreamRequestVerbHandler.class);
+    private static Logger logger_ = LoggerFactory.getLogger(StreamRequestVerbHandler.class);
     
     public void doVerb(Message message)
     {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamingService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamingService.java
index b457ed86..609119a5 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamingService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamingService.java
@@ -18,7 +18,8 @@
 
 package org.apache.cassandra.streaming;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import javax.management.MBeanServer;
 import javax.management.ObjectName;
@@ -31,7 +32,7 @@
 
 public class StreamingService implements StreamingServiceMBean
 {
-    private static final Logger logger = Logger.getLogger(StreamingService.class);
+    private static final Logger logger = LoggerFactory.getLogger(StreamingService.class);
     public static final String MBEAN_OBJECT_NAME = "org.apache.cassandra.streaming:type=StreamingService";
     public static final StreamingService instance = new StreamingService();
     static final String NOTHING = "Nothing is happening";
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraDaemon.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraDaemon.java
index 54618a96..915c5c61 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraDaemon.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraDaemon.java
@@ -23,7 +23,9 @@
 import java.net.InetSocketAddress;
 import java.net.InetAddress;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import org.apache.log4j.PropertyConfigurator;
 
 import org.apache.cassandra.db.commitlog.CommitLog;
@@ -52,7 +54,7 @@
 
 public class CassandraDaemon
 {
-    private static Logger logger = Logger.getLogger(CassandraDaemon.class);
+    private static Logger logger = LoggerFactory.getLogger(CassandraDaemon.class);
     private TThreadPoolServer serverEngine;
 
     private void setup() throws IOException, TTransportException
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
index dc87e38e..72e3cd8e 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
@@ -24,7 +24,8 @@
 import java.util.*;
 import java.util.concurrent.TimeoutException;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 import org.apache.commons.lang.ArrayUtils;
 
 import org.apache.cassandra.auth.AllowAllAuthenticator;
@@ -46,7 +47,7 @@
 public class CassandraServer implements Cassandra.Iface
 {
     public static String TOKEN_MAP = "token map";
-    private static Logger logger = Logger.getLogger(CassandraServer.class);
+    private static Logger logger = LoggerFactory.getLogger(CassandraServer.class);
 
     private final static List<ColumnOrSuperColumn> EMPTY_COLUMNS = Collections.emptyList();
     private final static List<Column> EMPTY_SUBCOLUMNS = Collections.emptyList();
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/BloomFilter.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/BloomFilter.java
index 1be3a8ac..372f22c9 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/BloomFilter.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/BloomFilter.java
@@ -25,11 +25,12 @@
 
 import org.apache.cassandra.io.ICompactSerializer;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class BloomFilter extends Filter
 {
-    private static final Logger logger = Logger.getLogger(BloomFilter.class);
+    private static final Logger logger = LoggerFactory.getLogger(BloomFilter.class);
     static ICompactSerializer<BloomFilter> serializer_ = new BloomFilterSerializer();
 
     private static final int EXCESS = 20;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/ExpiringMap.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/ExpiringMap.java
index 34c74a10..e2812519 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/ExpiringMap.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/ExpiringMap.java
@@ -21,7 +21,8 @@
 import java.util.*;
 import java.util.Map.Entry;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.cache.ICacheExpungeHook;
 
@@ -118,7 +119,7 @@ else if (globalHook_ != null)
     private Map<K, ICacheExpungeHook<K, V>> hooks_;
     private Timer timer_;
     private static int counter_ = 0;
-    private static final Logger LOGGER = Logger.getLogger(ExpiringMap.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(ExpiringMap.class);
 
     private void init(long expiration)
     {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
index 53a4aed3..4c78f6ef 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
@@ -30,7 +30,8 @@
 import java.util.zip.Deflater;
 import java.util.zip.Inflater;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import org.apache.commons.collections.iterators.CollatingIterator;
 
@@ -46,7 +47,7 @@
 
 public class FBUtilities
 {
-    private static Logger logger_ = Logger.getLogger(FBUtilities.class);
+    private static Logger logger_ = LoggerFactory.getLogger(FBUtilities.class);
 
     public static final BigInteger TWO = new BigInteger("2");
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/GuidGenerator.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/GuidGenerator.java
index 13301ed3..42e1cc12 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/GuidGenerator.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/GuidGenerator.java
@@ -18,14 +18,15 @@
 
 package org.apache.cassandra.utils;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.util.*;
 import java.net.*;
 import java.security.*;
 
 public class GuidGenerator {
-    private static Logger logger_ = Logger.getLogger(GuidGenerator.class);
+    private static Logger logger_ = LoggerFactory.getLogger(GuidGenerator.class);
     private static Random myRand;
     private static SecureRandom mySecureRand;
     private static String s_id;
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/CleanupHelper.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/CleanupHelper.java
index df835de2..0a2e986e 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/CleanupHelper.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/CleanupHelper.java
@@ -26,11 +26,12 @@
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.io.util.FileUtils;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class CleanupHelper
 {
-    private static Logger logger = Logger.getLogger(CleanupHelper.class);
+    private static Logger logger = LoggerFactory.getLogger(CleanupHelper.class);
 
     @BeforeClass
     public static void cleanupAndLeaveDirs() throws IOException
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/utils/MerkleTreeTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/utils/MerkleTreeTest.java
index 6f32fe0b..57c955b0 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/utils/MerkleTreeTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/utils/MerkleTreeTest.java
@@ -25,7 +25,8 @@
 import org.apache.cassandra.dht.*;
 import static org.apache.cassandra.utils.MerkleTree.*;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import com.google.common.collect.AbstractIterator;
 
@@ -35,7 +36,7 @@
 
 public class MerkleTreeTest
 {
-    private static final Logger logger = Logger.getLogger(MerkleTreeTest.class);
+    private static final Logger logger = LoggerFactory.getLogger(MerkleTreeTest.class);
 
     public static byte[] DUMMY = "blah".getBytes();
 
