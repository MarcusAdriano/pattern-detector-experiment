diff --git a/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index a45aef28..c0e80988 100644
--- a/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/branches/cassandra-1.0/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -669,7 +669,6 @@ public String getTempSSTablePath(String directory)
             }
 
             assert getMemtableThreadSafe() == oldMemtable;
-            oldMemtable.freeze();
             final ReplayPosition ctx = writeCommitLog ? CommitLog.instance.getContext() : ReplayPosition.NONE;
             logger.debug("flush position is {}", ctx);
 
@@ -678,9 +677,14 @@ public String getTempSSTablePath(String directory)
             // don't assume that this.memtable is dirty; forceFlush can bring us here during index build even if it is not
             for (ColumnFamilyStore cfs : concatWithIndexes())
             {
-                if (!cfs.getMemtableThreadSafe().isClean())
+                Memtable mt = cfs.getMemtableThreadSafe();
+                if (!mt.isClean() && !mt.isFrozen())
+                {
+                    // We need to freeze indexes too because they can be concurrently flushed too (#3547)
+                    mt.freeze();
                     icc.add(cfs);
             }
+            }
             final CountDownLatch latch = new CountDownLatch(icc.size());
             for (ColumnFamilyStore cfs : icc)
             {
@@ -689,11 +693,6 @@ public String getTempSSTablePath(String directory)
                 memtable.flushAndSignal(latch, flushWriter, ctx);
             }
 
-            // we marked our memtable as frozen as part of the concurrency control,
-            // so even if there was nothing to flush we need to switch it out
-            if (!icc.contains(this))
-                data.renewMemtable();
-
             if (memtableSwitchCount == Integer.MAX_VALUE)
                 memtableSwitchCount = 0;
             memtableSwitchCount++;
