diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/Overseer.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/Overseer.java
index 1c3c5efd..26484975 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/Overseer.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/Overseer.java
@@ -379,8 +379,12 @@ private ClusterState createShard(ClusterState clusterState, ZkNodeProps message)
         Map<String, Object> sliceProps = new HashMap<String, Object>();
         String shardRange = message.getStr(ZkStateReader.SHARD_RANGE_PROP);
         String shardState = message.getStr(ZkStateReader.SHARD_STATE_PROP);
+        String shardParent = message.getStr(ZkStateReader.SHARD_PARENT_PROP);
         sliceProps.put(Slice.RANGE, shardRange);
         sliceProps.put(Slice.STATE, shardState);
+        if (shardParent != null)  {
+          sliceProps.put(Slice.PARENT, shardParent);
+        }
         slice = new Slice(shardId, replicas, sliceProps);
         clusterState = updateSlice(clusterState, collection, slice);
       } else  {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
index 30771a6d..9981c64c 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
@@ -949,6 +949,17 @@ private boolean splitShard(ClusterState clusterState, ZkNodeProps message, Named
             + subSlice + " of collection " + collectionName + " on "
             + nodeName);
 
+        Map<String, Object> propMap = new HashMap<String, Object>();
+        propMap.put(Overseer.QUEUE_OPERATION, "createshard");
+        propMap.put(ZkStateReader.SHARD_ID_PROP, subSlice);
+        propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);
+        propMap.put(ZkStateReader.SHARD_RANGE_PROP, subRange.toString());
+        propMap.put(ZkStateReader.SHARD_STATE_PROP, Slice.CONSTRUCTION);
+        propMap.put(ZkStateReader.SHARD_PARENT_PROP, parentSlice.getName());
+        ZkNodeProps m = new ZkNodeProps(propMap);
+        DistributedQueue inQueue = Overseer.getInQueue(zkStateReader.getZkClient());
+        inQueue.offer(ZkStateReader.toJSON(m));
+
         ModifiableSolrParams params = new ModifiableSolrParams();
         params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());
 
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCore.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCore.java
index 0bda3460..567860d1 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCore.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCore.java
@@ -31,6 +31,7 @@
 import org.apache.lucene.store.LockObtainFailedException;
 import org.apache.solr.cloud.CloudDescriptor;
 import org.apache.solr.common.SolrException;
+import org.apache.solr.common.cloud.ClusterState;
 import org.apache.solr.common.cloud.Slice;
 import org.apache.solr.common.params.CommonParams;
 import org.apache.solr.common.params.CommonParams.EchoParamStyle;
@@ -867,13 +868,13 @@ public DirectoryReader call() throws Exception {
             "SolrCloud will always use full index replication instead of the more efficient PeerSync method.");
       }
 
-      if (Slice.CONSTRUCTION.equals(cd.getCloudDescriptor().getShardState())) {
+      // ZK pre-Register would have already happened so we read slice properties now
+      ClusterState clusterState = cc.getZkController().getClusterState();
+      Slice slice = clusterState.getSlice(cd.getCloudDescriptor().getCollectionName(),
+          cd.getCloudDescriptor().getShardId());
+      if (Slice.CONSTRUCTION.equals(slice.getState())) {
         // set update log to buffer before publishing the core
         getUpdateHandler().getUpdateLog().bufferUpdates();
-
-        cd.getCloudDescriptor().setShardState(null);
-        cd.getCloudDescriptor().setShardRange(null);
-        cd.getCloudDescriptor().setShardParent(null);
       }
     }
     // For debugging   
