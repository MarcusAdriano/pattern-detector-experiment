diff --git a/aries/trunk/jpa/jpa-blueprint-aries/src/main/java/org/apache/aries/jpa/blueprint/aries/impl/NSHandler.java b/aries/trunk/jpa/jpa-blueprint-aries/src/main/java/org/apache/aries/jpa/blueprint/aries/impl/NSHandler.java
index 324f3153..3e85f5ef 100644
--- a/aries/trunk/jpa/jpa-blueprint-aries/src/main/java/org/apache/aries/jpa/blueprint/aries/impl/NSHandler.java
+++ b/aries/trunk/jpa/jpa-blueprint-aries/src/main/java/org/apache/aries/jpa/blueprint/aries/impl/NSHandler.java
@@ -19,6 +19,8 @@
 package org.apache.aries.jpa.blueprint.aries.impl;
 
 import java.net.URL;
+import java.util.Arrays;
+import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
@@ -106,6 +108,10 @@
 
     /** The blueprint attribute value to make a bean eager */
     private static final String ACTIVATION_EAGER = "EAGER";
+    
+    /** The interface to proxy for managed persistence contexts */
+    private static final Collection<Class<?>> IFACES = Arrays.asList(new Class<?>[] {EntityManager.class});
+    
     /** The {@link PersistenceManager} to register contexts with */
     private PersistenceContextProvider manager;
     /** Used to indicate whether the PersistenceContextProvider is available */
@@ -336,11 +342,15 @@ private ComponentMetadata createTargetMetadata(boolean isPersistenceUnit,
      * @return
      */
     private ComponentMetadata createInjectionBeanMetedata(ParserContext ctx,
-        ComponentMetadata factory) {
+        MutableReferenceMetadata factory) {
 
         if (_logger.isDebugEnabled())
             _logger.debug("Creating a managed persistence context definition for injection");
 
+        //We want the EntityManager objects created from this factory to be damped too
+        
+        factory.setProxyChildBeanClasses(IFACES);
+        
         // Register the factory bean, and then create an entitymanager from it
         ctx.getComponentDefinitionRegistry().registerComponentDefinition(
                 factory);
diff --git a/aries/trunk/jpa/jpa-container-itest/src/test/java/org/apache/aries/jpa/blueprint/aries/itest/JPAInjectionTest.java b/aries/trunk/jpa/jpa-container-itest/src/test/java/org/apache/aries/jpa/blueprint/aries/itest/JPAInjectionTest.java
index 4ecdf426..e2e3c9f0 100644
--- a/aries/trunk/jpa/jpa-container-itest/src/test/java/org/apache/aries/jpa/blueprint/aries/itest/JPAInjectionTest.java
+++ b/aries/trunk/jpa/jpa-container-itest/src/test/java/org/apache/aries/jpa/blueprint/aries/itest/JPAInjectionTest.java
@@ -25,6 +25,7 @@
 import org.junit.runner.RunWith;
 import org.ops4j.pax.exam.Option;
 import org.ops4j.pax.exam.junit.JUnit4TestRunner;
+import org.osgi.framework.BundleException;
 
 @RunWith(JUnit4TestRunner.class)
 public class JPAInjectionTest extends AbstractIntegrationTest {
@@ -48,6 +49,17 @@ public void findResources_110() throws Exception {
     assertTrue("No persistence context injection", bean.pContextAvailable());
   }
 
+  @Test
+  public void testLifecycle() throws Exception {
+    JPATestBean bean = context().getService(JPATestBean.class, "(lifecycle=true)");
+    
+    assertTrue("No persistence context injection", bean.pContextAvailable());
+    
+    context().getBundleByName("org.apache.aries.jpa.org.apache.aries.jpa.container.itest.bundle").update();
+    
+    assertTrue("No persistence context injection", bean.pContextAvailable());
+  }
+
   @org.ops4j.pax.exam.junit.Configuration
   public static Option[] configuration() {
     return testOptions(
@@ -70,6 +82,7 @@ public void findResources_110() throws Exception {
         mavenBundle("commons-lang", "commons-lang"),
         mavenBundle("commons-collections", "commons-collections"),
         mavenBundle("commons-pool", "commons-pool"),
+        mavenBundle("org.apache.derby", "derby"),
         mavenBundle("org.apache.servicemix.bundles", "org.apache.servicemix.bundles.serp"),
         mavenBundle("org.apache.openjpa", "openjpa"),
 
@@ -78,6 +91,8 @@ public void findResources_110() throws Exception {
 //        mavenBundle("org.eclipse.persistence", "org.eclipse.persistence.asm"),
         
         mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.blueprint.itest.bundle"),
+        //For lifecycle testing
+        mavenBundle("org.apache.aries.jpa", "org.apache.aries.jpa.container.itest.bundle"),
         
         equinox().version("3.5.0"));
   }
