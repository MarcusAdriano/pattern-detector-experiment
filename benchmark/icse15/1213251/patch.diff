diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java
index c18643cf..41e48355 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java
@@ -26,6 +26,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.net.InetAddress;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Iterator;
 import java.util.Properties;
 
 import java.sql.*;
@@ -161,6 +162,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     /** The exception thrown as a result of a startSlave connection attempt  */
     private volatile Exception startSlaveException = null;
 
+    /**
+     * List of threads that have been started by the tests and not explicitly
+     * waited for. Wait for these to complete in {@link #tearDown()} so that
+     * they don't interfere with subsequent test cases.
+     */
+    private ArrayList helperThreads = new ArrayList();
+
     /**
      * Creates a new instance of ReplicationRun
      * @param testcaseName Identifying the test.
@@ -193,6 +201,13 @@ protected void tearDown() throws Exception
         stopServer(jvmVersion, derbyVersion,
                 masterServerHost, masterServerPort);
 
+        // Wait for all threads to complete.
+        for (Iterator it = helperThreads.iterator(); it.hasNext(); ) {
+            Thread t = (Thread) it.next();
+            t.join();
+        }
+        helperThreads = null;
+
         super.tearDown();
     }
     
@@ -1201,6 +1216,7 @@ public void run()
             }
             );
             connThread.start();
+            registerThread(connThread);
             util.DEBUG("startSlave_direct exit.");
     }
     
@@ -1715,6 +1731,7 @@ public void run()
             );
             util.DEBUG(ID+"************** Do .start(). ");
             serverThread.start();
+            registerThread(serverThread);
             // serverThread.join();
             // DEBUG(ID+"************** Done .join().");
             
@@ -2123,6 +2140,7 @@ public void run()
             long iterations = startTimeout / PINGSERVER_SLEEP_TIME_MILLIS;		
             util.DEBUG(debugId+"************** Do .start().");
             serverThread.start();
+            registerThread(serverThread);
             pingServer(serverHost, serverPort, (int) iterations); // Wait for the server to come up in a reasonable time....
 
         }
@@ -2399,6 +2417,16 @@ private void processDEBUGOutput(String id, Process proc)
         
     }
 
+    /**
+     * Register that a thread has been started so that we can wait for it to
+     * complete in {@link #tearDown()}.
+     *
+     * @param thread a thread that has been started
+     */
+    private void registerThread(Thread thread) {
+        helperThreads.add(thread);
+    }
+
     private void pingServer( String hostName, int port, int iterations)
     throws Exception
     {
