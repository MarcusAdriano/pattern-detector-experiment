diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement.java
index ffb52659..c2942b55 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement.java
@@ -214,10 +214,25 @@ public final void registerOutParameter(int paramIndex,
 	** Control methods
 	*/
 
-	protected final CallableStatement getCallableStatement() throws SQLException {
+    /**
+     * Access the underlying CallableStatement. This method
+     * is package protected to restrict access to the underlying
+     * object to the brokered objects. Allowing the application to
+     * access the underlying object thtough a public method would
+     * 
+     */
+    final CallableStatement getCallableStatement() throws SQLException {
 		return control.getRealCallableStatement();
 	}
-	public final PreparedStatement getPreparedStatement() throws SQLException {
+	
+    /**
+     * Access the underlying PreparedStatement. This method
+     * is package protected to restrict access to the underlying
+     * object to the brokered objects. Allowing the application to
+     * access the underlying object thtough a public method would
+     * 
+     */
+    final PreparedStatement getPreparedStatement() throws SQLException {
 		return getCallableStatement();
 	}
 	/**
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java
index 90d48983..acbde777 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java
@@ -38,7 +38,7 @@
 	/**
 		SQL used to create me.
 	*/
-	protected final String	sql;
+	final String	sql;
 
     public BrokeredPreparedStatement(BrokeredStatementControl control, int jdbcLevel, String sql) throws SQLException
     {
@@ -491,7 +491,14 @@ public final void setTimestamp(int i,
 	** Control methods.
 	*/
 
-	public PreparedStatement getPreparedStatement() throws SQLException {
+    /**
+     * Access the underlying PreparedStatement. This method
+     * is package protected to restrict access to the underlying
+     * object to the brokered objects. Allowing the application to
+     * access the underlying object thtough a public method would
+     * 
+     */
+    PreparedStatement getPreparedStatement() throws SQLException {
 		return control.getRealPreparedStatement();
 	}
 
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java
index da33befd..2e47d49d 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java
@@ -44,12 +44,12 @@
 		when calling a check method. This will result in the correct exception
 		being thrown if the statement is already closed.
 	*/
-	protected final BrokeredStatementControl control;
+	final BrokeredStatementControl control;
 
-	protected final int jdbcLevel;
-	protected final int resultSetType;
-	protected final int resultSetConcurrency;
-	protected final int resultSetHoldability;
+	final int jdbcLevel;
+	final int resultSetType;
+	final int resultSetConcurrency;
+	final int resultSetHoldability;
 
 	/**
 		My state
@@ -57,7 +57,7 @@
 	private String cursorName;
 	private Boolean escapeProcessing;
 
-    protected BrokeredStatement(BrokeredStatementControl control, int jdbcLevel) throws SQLException
+    BrokeredStatement(BrokeredStatementControl control, int jdbcLevel) throws SQLException
     {
 		this.control = control;
 		this.jdbcLevel = jdbcLevel;
@@ -497,7 +497,7 @@ public Statement createDuplicateStatement(Connection conn, Statement oldStatemen
 		return newStatement;
 	}
 
-	protected void setStatementState(Statement oldStatement, Statement newStatement) throws SQLException {
+	void setStatementState(Statement oldStatement, Statement newStatement) throws SQLException {
 		if (cursorName != null)
 			newStatement.setCursorName(cursorName);
 		if (escapeProcessing != null)
@@ -513,8 +513,18 @@ protected void setStatementState(Statement oldStatement, Statement newStatement)
 	public Statement getStatement() throws SQLException {
 		return control.getRealStatement();
 	}
-	protected final ResultSet wrapResultSet(ResultSet rs) {
-		return control.wrapResultSet(rs);
+    
+    /**
+     * Provide the control access to every ResultSet we return.
+     * If required the control can wrap the ResultSet, but
+     * it (the control) must ensure a underlying ResultSet is
+     * only wrapped once, if say java.sql.Statement.getResultSet
+     * is returned twice.
+     * 
+     * @param rs ResultSet being returned, can be null.
+     */
+	final ResultSet wrapResultSet(ResultSet rs) {
+		return control.wrapResultSet(this, rs);
 	}
 
 	/**
@@ -522,7 +532,7 @@ protected final ResultSet wrapResultSet(ResultSet rs) {
 		Obtained indirectly to ensure that the correct exception is
 		thrown if the Statement has been closed.
 	*/
-	protected final BrokeredStatementControl controlCheck() throws SQLException
+	final BrokeredStatementControl controlCheck() throws SQLException
 	{
 		// simplest method that will throw an exception if the Statement is closed
 		getStatement().getConnection();
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatementControl.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatementControl.java
index 6e125123..56247f1b 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatementControl.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatementControl.java
@@ -53,6 +53,7 @@
 
 	/**
 		Optionally wrap a returned ResultSet in another ResultSet.
+        @param s Statement that created the ResultSet.
 	*/
-	public ResultSet	wrapResultSet(ResultSet rs);
+	public ResultSet	wrapResultSet(Statement s, ResultSet rs);
 }
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
index 8383b6b9..67168227 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
@@ -136,13 +136,29 @@
     private int NumberofFetchedRows;
 
 
-	/*
+	/**
+     * The statement object that originally created us.
 		we hang on to the statement to prevent GC from
 		closing it under us
 	 */
-	protected final EmbedStatement stmt;
+	private final EmbedStatement stmt;
+    
+    /**
+     * The statement that currently owns this ResultSet.
+     * Statements created in procedures are passed off
+     * to the Statement that called the procedure.
+     * This is to avoid the ResultSet being closed
+     * due to the Statement within the procedure
+     * or the nested Connection being closed.
+     */
 	private EmbedStatement owningStmt;
 
+    /**
+     * Statement object the application used to
+     * create this ResultSet.
+     */
+    private Statement applicationStmt;
+    
 	protected final boolean isAtomic;
 
 	protected final int concurrencyOfThisResultSet;
@@ -170,7 +186,7 @@ public EmbedResultSet(EmbedConnection conn, ResultSet resultsToWrap,
 		SanityManager.ASSERT(resultsToWrap!=null);
 		theResults = resultsToWrap;
 		this.forMetaData = forMetaData;
-		this.stmt = owningStmt = stmt;
+        this.applicationStmt = this.stmt = owningStmt = stmt;
 		this.isAtomic = isAtomic;
 
 		//If the Statement object has CONCUR_READ_ONLY set on it then the concurrency on the ResultSet object will be CONCUR_READ_ONLY also.
@@ -1620,7 +1636,17 @@ public final int findColumn(String columnName) throws SQLException {
 	 */
 	public final Statement getStatement()
     {
-            return stmt;
+            return applicationStmt;
+    }
+    
+    /**
+     * Set the application Statement object that created this ResultSet.
+     * Used when the Statement objects returned to the application
+     * are wrapped for XA.
+     */
+    public final void setApplicationStatement(Statement applicationStmt)
+    {
+        this.applicationStmt = applicationStmt;
     }
 
 	//---------------------------------------------------------------------
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/jdbc/XAStatementControl.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/jdbc/XAStatementControl.java
index a5f473e0..61a824d3 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/jdbc/XAStatementControl.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/jdbc/XAStatementControl.java
@@ -26,6 +26,7 @@
 import org.apache.derby.iapi.jdbc.BrokeredPreparedStatement;
 import org.apache.derby.iapi.jdbc.BrokeredCallableStatement;
 import org.apache.derby.impl.jdbc.EmbedConnection;
+import org.apache.derby.impl.jdbc.EmbedResultSet;
 import org.apache.derby.impl.jdbc.EmbedStatement;
 import org.apache.derby.impl.jdbc.EmbedPreparedStatement;
 
@@ -182,7 +183,14 @@ public CallableStatement getRealCallableStatement() throws SQLException {
 		return realCallableStatement;
 	}
 
-	public ResultSet wrapResultSet(ResultSet rs) {
+    /**
+     * Don't need to wrap the ResultSet but do need to update its
+     * application Statement reference to be the one the application
+     * used to create the ResultSet.
+     */
+	public ResultSet wrapResultSet(Statement s, ResultSet rs) {
+        if (rs != null)
+            ((EmbedResultSet) rs).setApplicationStatement(s);
 		return rs;
 	}
 
