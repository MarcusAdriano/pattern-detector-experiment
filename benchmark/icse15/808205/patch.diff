diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/BytesType.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/BytesType.java
index c3d8274e..fb46ce69 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/BytesType.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/BytesType.java
@@ -23,30 +23,13 @@
 
 import java.util.Arrays;
 
+import org.apache.cassandra.utils.FBUtilities;
+
 public class BytesType extends AbstractType
 {
     public int compare(byte[] o1, byte[] o2)
     {
-        int length = Math.max(o1.length, o2.length);
-        for (int i = 0; i < length; i++)
-        {
-            int index = i + 1;
-            if (index > o1.length && index <= o2.length)
-            {
-                return -1;
-            }
-            if (index > o2.length && index <= o1.length)
-            {
-                return 1;
-            }
-
-            int delta = o1[i] - o2[i];
-            if (delta != 0)
-            {
-                return delta;
-            }
-        }
-        return 0;
+        return FBUtilities.compareByteArrays(o1, o2);
     }
 
     public String getString(byte[] bytes)
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BigIntegerToken.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BigIntegerToken.java
index 8cd2cd63..a2c34f81 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BigIntegerToken.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BigIntegerToken.java
@@ -31,4 +31,10 @@ public BigIntegerToken(BigInteger token)
     public BigIntegerToken(String token) {
         this(new BigInteger(token));
     }
+
+    @Override
+    public int compareTo(Token<BigInteger> o)
+    {
+        return token.compareTo(o.token);
+    }
 }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BytesToken.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BytesToken.java
index e69de29b..f006fd65 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BytesToken.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BytesToken.java
@@ -0,0 +1,43 @@
+/*
+* Licensed to the Apache Software Foundation (ASF) under one
+* or more contributor license agreements.  See the NOTICE file
+* distributed with this work for additional information
+* regarding copyright ownership.  The ASF licenses this file
+* to you under the Apache License, Version 2.0 (the
+* "License"); you may not use this file except in compliance
+* with the License.  You may obtain a copy of the License at
+*
+*    http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing,
+* software distributed under the License is distributed on an
+* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+* KIND, either express or implied.  See the License for the
+* specific language governing permissions and limitations
+* under the License.
+*/
+package org.apache.cassandra.dht;
+
+import java.math.BigInteger;
+
+import org.apache.cassandra.utils.FBUtilities;
+
+public class BytesToken extends Token<byte[]>
+{
+    public BytesToken(byte... token)
+    {
+        super(token);
+    }
+    
+    @Override
+    public String toString()
+    {
+        return "Token(bytes[" + FBUtilities.bytesToHex(token) + "])";
+    }
+
+    @Override
+    public int compareTo(Token<byte[]> o)
+    {
+        return FBUtilities.compareByteArrays(token, o.token);
+    }
+}
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/CollatingOrderPreservingPartitioner.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/CollatingOrderPreservingPartitioner.java
index 983d6719..ef45523f 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/CollatingOrderPreservingPartitioner.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/CollatingOrderPreservingPartitioner.java
@@ -20,17 +20,25 @@
 package org.apache.cassandra.dht;
 
 import java.io.UnsupportedEncodingException;
+import java.math.BigInteger;
 import java.text.Collator;
+import java.util.Arrays;
 import java.util.Comparator;
 import java.util.Locale;
 import java.util.Random;
 
 import org.apache.cassandra.config.DatabaseDescriptor;
+import org.apache.cassandra.utils.FBUtilities;
 
-public class CollatingOrderPreservingPartitioner extends OrderPreservingPartitioner
+public class CollatingOrderPreservingPartitioner implements IPartitioner<BytesToken>
 {
     static final Collator collator = Collator.getInstance(new Locale("en", "US"));
 
+    public static final BytesToken MINIMUM = new BytesToken(new byte[0]);
+
+    /**
+     * Comparators for decorated keys.
+     */
     private static final Comparator<String> comparator = new Comparator<String>() {
         public int compare(String o1, String o2)
         {
@@ -44,6 +52,16 @@ public int compare(String o1, String o2)
         }
     };
 
+    public String decorateKey(String key)
+    {
+        return key;
+    }
+
+    public String undecorateKey(String decoratedKey)
+    {
+        return decoratedKey;
+    }
+
     public Comparator<String> getDecoratedKeyComparator()
     {
         return comparator;
@@ -53,4 +71,60 @@ public int compare(String o1, String o2)
     {
         return reverseComparator;
     }
+
+    public BytesToken getMinimumToken()
+    {
+        return MINIMUM;
+    }
+
+    public BytesToken getDefaultToken()
+    {
+        String initialToken = DatabaseDescriptor.getInitialToken();
+        if (initialToken != null)
+            // assume that the user specified the intial Token as a String key
+            return getToken(initialToken);
+
+        // generate random token
+        Random r = new Random();
+        byte[] buffer = new byte[16];
+        r.nextBytes(buffer);
+        return new BytesToken(buffer);
+    }
+
+    private final Token.TokenFactory<byte[]> tokenFactory = new Token.TokenFactory<byte[]>() {
+        public byte[] toByteArray(Token<byte[]> bytesToken)
+        {
+            return bytesToken.token;
+        }
+
+        public Token<byte[]> fromByteArray(byte[] bytes)
+        {
+            return new BytesToken(bytes);
+        }
+
+        public String toString(Token<byte[]> bytesToken)
+        {
+            return FBUtilities.bytesToHex(bytesToken.token);
+        }
+
+        public Token<byte[]> fromString(String string)
+        {
+            return new BytesToken(FBUtilities.hexToBytes(string));
+        }
+    };
+
+    public Token.TokenFactory<byte[]> getTokenFactory()
+    {
+        return tokenFactory;
+    }
+
+    public boolean preservesOrder()
+    {
+        return true;
+    }
+
+    public BytesToken getToken(String key)
+    {
+        return new BytesToken(collator.getCollationKey(key).toByteArray());
+    }
 }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/IPartitioner.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/IPartitioner.java
index e90342ba..027af33a 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/IPartitioner.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/IPartitioner.java
@@ -20,11 +20,11 @@
 
 import java.util.Comparator;
 
-public interface IPartitioner
+public interface IPartitioner<T extends Token>
 {
     /**
-     * transform key to on-disk format s.t. keys are stored in node comparison order.
-     * this lets bootstrap rip out parts of the sstable sequentially instead of doing random seeks.
+     * Transform key to on-disk format s.t. keys are stored in node comparison order.
+     * This lets bootstrap rip out parts of the sstable sequentially instead of doing random seeks.
      *
      * @param key the raw, client-facing key
      * @return decorated on-disk version of key
@@ -37,17 +37,28 @@
 
     public Comparator<String> getReverseDecoratedKeyComparator();
 
+    /**
+	 * @return The minimum possible Token in the range that is being partitioned.
+	 */
+	public T getMinimumToken();
+
     /**
      * @return a Token that can be used to route a given key
      */
-    public Token getToken(String key);
+    public T getToken(String key);
 
     /**
      * @return the default Token to represent this node if none was saved.
      * Uses the one given in the InitialToken configuration directive,
      * or picks one automatically if that was not given.
      */
-    public Token getDefaultToken();
+    public T getDefaultToken();
 
     public Token.TokenFactory getTokenFactory();
+    
+    /**
+     * @return True if the implementing class preserves key order in the Tokens
+     * it generates.
+     */
+    public boolean preservesOrder();
 }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java
index 2cce5364..cca54ce1 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java
@@ -19,13 +19,19 @@
 package org.apache.cassandra.dht;
 
 import java.io.UnsupportedEncodingException;
+import java.util.Arrays;
 import java.util.Comparator;
 import java.util.Random;
 
 import org.apache.cassandra.config.DatabaseDescriptor;
 
-public class OrderPreservingPartitioner implements IPartitioner
+public class OrderPreservingPartitioner implements IPartitioner<StringToken>
 {
+    public static final StringToken MINIMUM = new StringToken("");
+
+    /**
+     * Comparators for decorated keys.
+     */
     private static final Comparator<String> comparator = new Comparator<String>() {
         public int compare(String o1, String o2)
         {
@@ -59,6 +65,11 @@ public String undecorateKey(String decoratedKey)
         return reverseComparator;
     }
 
+    public StringToken getMinimumToken()
+    {
+        return MINIMUM;
+    }
+
     public StringToken getDefaultToken()
     {
         String initialToken = DatabaseDescriptor.getInitialToken();
@@ -116,7 +127,12 @@ public String toString(Token<String> stringToken)
         return tokenFactory;
     }
 
-    public Token getToken(String key)
+    public boolean preservesOrder()
+    {
+        return true;
+    }
+
+    public StringToken getToken(String key)
     {
         return new StringToken(key);
     }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/RandomPartitioner.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/RandomPartitioner.java
index 5a6c2bcd..7e3b3424 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/RandomPartitioner.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/RandomPartitioner.java
@@ -29,8 +29,10 @@
 /**
  * This class generates a BigIntegerToken using MD5 hash.
  */
-public class RandomPartitioner implements IPartitioner
+public class RandomPartitioner implements IPartitioner<BigIntegerToken>
 {
+    public static final BigIntegerToken MINIMUM = new BigIntegerToken("0");
+
     private static final Comparator<String> comparator = new Comparator<String>()
     {
         public int compare(String o1, String o2)
@@ -79,6 +81,11 @@ public String undecorateKey(String decoratedKey)
         return rcomparator;
     }
 
+	public BigIntegerToken getMinimumToken()
+    {
+        return MINIMUM;
+    }
+
     public BigIntegerToken getDefaultToken()
     {
         String initialToken = DatabaseDescriptor.getInitialToken();
@@ -120,7 +127,12 @@ public String toString(Token<BigInteger> bigIntegerToken)
         return tokenFactory;
     }
 
-    public Token getToken(String key)
+    public boolean preservesOrder()
+    {
+        return false;
+    }
+
+    public BigIntegerToken getToken(String key)
     {
         return new BigIntegerToken(FBUtilities.hash(key));
     }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/StringToken.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/StringToken.java
index 3ae1728c..407691b0 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/StringToken.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/StringToken.java
@@ -27,9 +27,9 @@ public StringToken(String token)
         super(token);
     }
 
+    @Override
     public int compareTo(Token<String> o)
     {
-        assert StorageService.getPartitioner() instanceof OrderPreservingPartitioner;
-        return StorageService.getPartitioner().getDecoratedKeyComparator().compare(this.token, o.token);
+        return token.compareTo(o.token);
     }
 }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/Token.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/Token.java
index 45302f98..e02c1463 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/Token.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/Token.java
@@ -26,7 +26,7 @@
 import org.apache.cassandra.io.ICompactSerializer;
 import org.apache.cassandra.service.StorageService;
 
-public abstract class Token<T extends Comparable> implements Comparable<Token<T>>, Serializable
+public abstract class Token<T> implements Comparable<Token<T>>, Serializable
 {
     private static final TokenSerializer serializer = new TokenSerializer();
     public static TokenSerializer serializer()
@@ -44,10 +44,7 @@ protected Token(T token)
     /**
      * This determines the comparison for node destination purposes.
      */
-    public int compareTo(Token<T> o)
-    {
-        return token.compareTo(o.token);
-    }
+    abstract public int compareTo(Token<T> o);
 
     public String toString()
     {
@@ -67,7 +64,7 @@ public int hashCode()
         return token.hashCode();
     }
 
-    public static abstract class TokenFactory<T extends Comparable>
+    public static abstract class TokenFactory<T>
     {
         public abstract byte[] toByteArray(Token<T> token);
         public abstract Token<T> fromByteArray(byte[] bytes);
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
index 59e9c756..5238382b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
@@ -36,7 +36,7 @@
 import org.apache.cassandra.net.EndPoint;
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.utils.LogUtil;
-import org.apache.cassandra.dht.OrderPreservingPartitioner;
+import org.apache.cassandra.dht.IPartitioner;
 import org.apache.cassandra.dht.Token;
 import org.apache.thrift.TException;
 
@@ -481,7 +481,7 @@ else if (propertyName.equals("version"))
         if (logger.isDebugEnabled())
             logger.debug("get_key_range");
         ThriftValidation.validateCommand(tablename, columnFamily);
-        if (!(StorageService.getPartitioner() instanceof OrderPreservingPartitioner))
+        if (!StorageService.getPartitioner().preservesOrder())
         {
             throw new InvalidRequestException("range queries may only be performed against an order-preserving partitioner");
         }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
index 4d1aebd7..0d6b40d2 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
@@ -26,6 +26,7 @@
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Date;
 import java.util.List;
 import java.util.StringTokenizer;
@@ -41,6 +42,8 @@
 {
     private static Logger logger_ = Logger.getLogger(FBUtilities.class);
 
+    private static final char[] HEX_CHARS = "0123456789abcdef".toCharArray();
+    
     private static InetAddress localInetAddress_;
 
     public static String getTimestamp()
@@ -387,4 +390,26 @@ public static void writeByteArray(byte[] bytes, DataOutput out) throws IOExcepti
         }
         return bytes;
     }
+    
+    public static byte[] hexToBytes(String str)
+    {
+        assert str.length() % 2 == 0;
+        byte[] bytes = new byte[str.length()/2];
+        for (int i = 0; i < bytes.length; i++)
+        {
+            bytes[i] = (byte)Integer.parseInt(str.substring(i, i+2), 16);
+        }
+        return bytes;
+    }
+
+    public static String bytesToHex(byte[] buf)
+    {
+        char[] chars = new char[2*buf.length];
+        for (int i = 0; i < buf.length; i++)
+        {
+            chars[i*2] = HEX_CHARS[(buf[i] & 0xF0) >>> 4];
+            chars[i*2+1] = HEX_CHARS[buf[i] & 0x0F];
+        }
+        return new String(chars);
+    }
 }
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/BootstrapTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/BootstrapTest.java
index f11e6dfa..66ba27e7 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/BootstrapTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/BootstrapTest.java
@@ -38,7 +38,6 @@
 public class BootstrapTest
 {
     /**
-     * 
      * Writes out a bunch of keys into an SSTable, then runs anticompaction on a range.
      * Checks to see if anticompaction returns true.
      */
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/BytesTypeTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/BytesTypeTest.java
index e69de29b..219895d4 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/BytesTypeTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/BytesTypeTest.java
@@ -0,0 +1,21 @@
+package org.apache.cassandra.db.marshal;
+
+import org.apache.commons.lang.ArrayUtils;
+
+import org.junit.Test;
+
+public class BytesTypeTest
+{
+    @Test
+    public void testCompare()
+    {
+        BytesType comparator = new BytesType();
+        assert comparator.compare(ArrayUtils.EMPTY_BYTE_ARRAY, "asdf".getBytes()) < 0;
+        assert comparator.compare("asdf".getBytes(), ArrayUtils.EMPTY_BYTE_ARRAY) > 0;
+        assert comparator.compare(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY) == 0;
+        assert comparator.compare("z".getBytes(), "a".getBytes()) > 0;
+        assert comparator.compare("a".getBytes(), "z".getBytes()) < 0;
+        assert comparator.compare("asdf".getBytes(), "asdf".getBytes()) == 0;
+        assert comparator.compare("asdz".getBytes(), "asdf".getBytes()) > 0;
+    }
+}
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/dht/CollatingOrderPreservingPartitionerTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/dht/CollatingOrderPreservingPartitionerTest.java
index e69de29b..58bd2894 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/dht/CollatingOrderPreservingPartitionerTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/dht/CollatingOrderPreservingPartitionerTest.java
@@ -0,0 +1,65 @@
+/*
+* Licensed to the Apache Software Foundation (ASF) under one
+* or more contributor license agreements.  See the NOTICE file
+* distributed with this work for additional information
+* regarding copyright ownership.  The ASF licenses this file
+* to you under the Apache License, Version 2.0 (the
+* "License"); you may not use this file except in compliance
+* with the License.  You may obtain a copy of the License at
+*
+*    http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing,
+* software distributed under the License is distributed on an
+* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+* KIND, either express or implied.  See the License for the
+* specific language governing permissions and limitations
+* under the License.
+*/
+package org.apache.cassandra.dht;
+
+import java.math.BigInteger;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import org.apache.cassandra.utils.FBUtilities;
+
+public class CollatingOrderPreservingPartitionerTest extends PartitionerTestCase<BytesToken> {
+    @Override
+    public IPartitioner<BytesToken> getPartitioner()
+    {
+        return new CollatingOrderPreservingPartitioner();
+    }
+
+    @Override
+    public BytesToken tok(String string)
+    {
+        // we just need some kind of byte array
+        try
+        {
+            return new BytesToken(string.getBytes("US-ASCII"));
+        }
+        catch(Exception e)
+        {
+            throw new RuntimeException(e);
+        }
+    }
+
+    @Override
+    public String tos(BytesToken token)
+    {
+        return FBUtilities.bytesToHex(token.token);
+    }
+
+    /**
+     * Test that a non-UTF-8 byte array can still be encoded.
+     */
+    @Test
+    public void testTokenFactoryStringsNonUTF()
+    {
+        Token.TokenFactory factory = this.part.getTokenFactory();
+        BytesToken tok = new BytesToken((byte)0xFF, (byte)0xFF);
+        assert tok.compareTo(factory.fromString(factory.toString(tok))) == 0;
+    }
+}
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/dht/OrderPreservingPartitionerTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/dht/OrderPreservingPartitionerTest.java
index e69de29b..467d7375 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/dht/OrderPreservingPartitionerTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/dht/OrderPreservingPartitionerTest.java
@@ -0,0 +1,46 @@
+/*
+* Licensed to the Apache Software Foundation (ASF) under one
+* or more contributor license agreements.  See the NOTICE file
+* distributed with this work for additional information
+* regarding copyright ownership.  The ASF licenses this file
+* to you under the Apache License, Version 2.0 (the
+* "License"); you may not use this file except in compliance
+* with the License.  You may obtain a copy of the License at
+*
+*    http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing,
+* software distributed under the License is distributed on an
+* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+* KIND, either express or implied.  See the License for the
+* specific language governing permissions and limitations
+* under the License.
+*/
+package org.apache.cassandra.dht;
+
+import java.math.BigInteger;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import org.apache.cassandra.utils.FBUtilities;
+
+public class OrderPreservingPartitionerTest extends PartitionerTestCase<StringToken> {
+    @Override
+    public IPartitioner<StringToken> getPartitioner()
+    {
+        return new OrderPreservingPartitioner();
+    }
+
+    @Override
+    public StringToken tok(String string)
+    {
+        return new StringToken(string);
+    }
+
+    @Override
+    public String tos(StringToken token)
+    {
+        return FBUtilities.bytesToHex(token.token.getBytes());
+    }
+}
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/dht/PartitionerTestCase.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/dht/PartitionerTestCase.java
index 3f24d583..33f13f3a 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/dht/PartitionerTestCase.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/dht/PartitionerTestCase.java
@@ -1 +1,67 @@
   + native
+/*
+* Licensed to the Apache Software Foundation (ASF) under one
+* or more contributor license agreements.  See the NOTICE file
+* distributed with this work for additional information
+* regarding copyright ownership.  The ASF licenses this file
+* to you under the Apache License, Version 2.0 (the
+* "License"); you may not use this file except in compliance
+* with the License.  You may obtain a copy of the License at
+*
+*    http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing,
+* software distributed under the License is distributed on an
+* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+* KIND, either express or implied.  See the License for the
+* specific language governing permissions and limitations
+* under the License.
+*/
+package org.apache.cassandra.dht;
+
+import java.math.BigInteger;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import org.apache.cassandra.utils.FBUtilities;
+
+public abstract class PartitionerTestCase<T extends Token> {
+    protected IPartitioner<T> part;
+
+    public abstract IPartitioner<T> getPartitioner();
+    public abstract T tok(String string);
+    public abstract String tos(T token);
+
+    @Before
+    public void clean()
+    {
+        this.part = this.getPartitioner();
+    }
+
+    @Test
+    public void testCompare()
+    {
+        assert tok("").compareTo(tok("asdf")) < 0;
+        assert tok("asdf").compareTo(tok("")) > 0;
+        assert tok("").compareTo(tok("")) == 0;
+        assert tok("z").compareTo(tok("a")) > 0;
+        assert tok("a").compareTo(tok("z")) < 0;
+        assert tok("asdf").compareTo(tok("asdf")) == 0;
+        assert tok("asdz").compareTo(tok("asdf")) > 0;
+    }
+
+    @Test
+    public void testTokenFactoryBytes()
+    {
+        Token.TokenFactory factory = this.part.getTokenFactory();
+        assert tok("a").compareTo(factory.fromByteArray(factory.toByteArray(tok("a")))) == 0;
+    }
+    
+    @Test
+    public void testTokenFactoryStrings()
+    {
+        Token.TokenFactory factory = this.part.getTokenFactory();
+        assert tok("a").compareTo(factory.fromString(factory.toString(tok("a")))) == 0;
+    }
+}
