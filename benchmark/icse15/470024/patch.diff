diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/PrepareExecuteDDL.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/PrepareExecuteDDL.java
index 66a7bf91..4393373f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/PrepareExecuteDDL.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/PrepareExecuteDDL.java
@@ -23,6 +23,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.JDBC;
+import org.apache.derbyTesting.junit.TestConfiguration;
 
 import java.sql.*;
 
@@ -80,12 +81,15 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	
 	/**
 	 * Create a suite of tests, one per statement in DDL.
+     * This test is for testing the embedded dependency system
+     * though possibly it could be used for testing in client
+     * as well.
 	 */
     public static Test suite() {
         TestSuite suite = new TestSuite("PrepareExecuteDDL");
         for (int i = 0; i < DDL.length; i++)
         	suite.addTest(new PrepareExecuteDDL("testPrepareExcute", DDL[i]));
-        return suite;
+        return TestConfiguration.sqlAuthorizationDecorator(suite);
     }
 	private final String ddl;
 	
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
index 651ec5a0..68bbf4f3 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/_Suite.java
@@ -58,7 +58,7 @@ public static Test suite() {
         // the nightly runs.
         // suite.addTest(largeCodeGen.suite());
 
-		// suite.addTest(PrepareExecuteDDL.suite());
+		suite.addTest(PrepareExecuteDDL.suite());
 		suite.addTest(LangScripts.suite());
         suite.addTest(GroupByExpressionTest.suite());
         suite.addTest(MathTrigFunctionsTest.suite());
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBC.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBC.java
index ac602e0d..f3075bb6 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBC.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBC.java
@@ -439,7 +439,7 @@ public static void assertDrainResults(ResultSet rs,
 		}
 		rs.close();
 
-		if (rows >= 0)
+		if (expectedRows >= 0)
 			Assert.assertEquals("Unexpected row count:", expectedRows, rows); 
 	}
 	
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
index 72db7472..389dd59f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
@@ -41,6 +41,8 @@
      * Default values for configurations
      */
     private final static String DEFAULT_DBNAME = "wombat";
+    private final static String DEFAULT_DBNAME_SQL = "dbsqlauth";
+    
     private final static String DEFAULT_USER_NAME = "APP";
     private final static String DEFAULT_USER_PASSWORD = "APP";
     private final static int    DEFAULT_PORT = 1527;
@@ -59,11 +61,6 @@
     private final static String KEY_VERBOSE = "derby.tests.debug";    
     private final static String KEY_SINGLE_LEG_XA = "derbyTesting.xa.single";
 
-    /**
-     * Possible values of system properties.
-     */
-    private final static String UNUSED = "file://unused/";
-    
     /**
      * Simple count to provide a unique number for database
      * names.
@@ -280,10 +277,60 @@ public static Test singleUseDatabaseDecorator(Test test)
                 new DropDatabaseSetup(test));
     }
     
+    /**
+     * Decorate a test changing the default user name and password.
+     * Typically used along with DatabasePropertyTestSetup.builtinAuthentication.
+     * The tearDown method resets the default user and password value to
+     * their previous settings.
+     * 
+     * @param test Test to decorate
+     * @param user New default user
+     * @param password New password
+     * @return decorated test
+     * 
+     * @see DatabasePropertyTestSetup#builtinAuthentication(Test, String[], String)
+     */
     public static Test changeUserDecorator(Test test, String user, String password)
     {
         return new ChangeUserSetup(test, user, password);
     }    
+    
+    /**
+     * Decorate a test to use the default database that has
+     * was created in SQL authorization mode.
+     * The tearDown reverts the configuration to the previous
+     * configuration.
+     * 
+     * Tests can use this in conjunction with
+     * DatabasePropertyTestSetup.builtinAuthentication
+     * to set up BUILTIN authentication and changeUserDecorator
+     * to switch users.
+     * 
+     * @param test Test to be decorated
+     * @return decorated test.
+     * 
+     * @see DatabasePropertyTestSetup#builtinAuthentication(Test, String[], String)
+     */
+    public static Test sqlAuthorizationDecorator(Test test)
+    {
+        TestConfiguration config = TestConfiguration.getCurrent();
+        TestConfiguration newDBconfig = 
+            new TestConfiguration(config, DEFAULT_DBNAME_SQL);
+        
+        // Set the SQL authorization mode as a database property
+        // with a modified DatabasePropertyTestSetup that does not
+        // reset it.
+        final Properties sqlAuth = new Properties();
+        sqlAuth.setProperty("derby.database.sqlAuthorization", "true");
+        Test setSQLAuthMode = new DatabasePropertyTestSetup(test,
+                sqlAuth, true) {
+            protected void tearDown() {
+            }
+        };
+
+        return new ChangeConfigurationSetup(newDBconfig, setSQLAuthMode);
+    }
+    
     /**
      * Default embedded configuration
      *
