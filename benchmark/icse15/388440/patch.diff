diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java
index f7aa60ea..731603ec 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java
@@ -318,7 +318,7 @@ void  setup() throws StandardException
 			rlColumnNumber = noTriggersOrFks ? 1: numberOfBaseColumns;
 			if(cascadeDelete)
 			{
-				rowHolder = new TemporaryRowHolderImpl(tc, properties, 
+				rowHolder = new TemporaryRowHolderImpl(activation, properties, 
 						(resultDescription != null) ?
 							resultDescription.truncateColumns(rlColumnNumber) :
 							null, false);
@@ -327,7 +327,7 @@ void  setup() throws StandardException
 			}else
 			{
 
-				rowHolder = new TemporaryRowHolderImpl(tc, properties, 
+				rowHolder = new TemporaryRowHolderImpl(activation, properties, 
 						(resultDescription != null) ?
 							resultDescription.truncateColumns(rlColumnNumber) :
 							null);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteVTIResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteVTIResultSet.java
index 93347d93..d27f1e86 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteVTIResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DeleteVTIResultSet.java
@@ -100,7 +100,9 @@ protected void openCore() throws StandardException
 		{
 			activation.clearIndexScanInfo();
             if( null == rowHolder)
-                rowHolder = new TemporaryRowHolderImpl( tc, new Properties(), (ResultDescription) null);
+                rowHolder =
+                    new TemporaryRowHolderImpl(activation, new Properties(),
+                                               (ResultDescription) null);
 		}
 
         try
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java
index dcbea5b5..3a189d24 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java
@@ -430,7 +430,8 @@ private void doDeferredInsert()
 			** row holder (the description is needed when the row
 			** holder is going to be handed to users for triggers).
 			*/
-			rowHolder = new TemporaryRowHolderImpl(tc, properties, (ResultDescription)null);
+			rowHolder = new TemporaryRowHolderImpl(activation, properties,
+												   (ResultDescription) null);
 		}
 
 		/*
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
index afbeb7e2..cce2da8e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
@@ -924,7 +924,8 @@ private void normalInsertCore(LanguageConnectionContext lcc, boolean firstExecut
 			/*
 			** If deferred we save a copy of the entire row.
 			*/
-			rowHolder = new TemporaryRowHolderImpl(tc, properties, resultDescription);
+			rowHolder = new TemporaryRowHolderImpl(activation, properties,
+												   resultDescription);
 			rowChanger.setRowHolder(rowHolder);
 		}
 
@@ -945,7 +946,8 @@ private void normalInsertCore(LanguageConnectionContext lcc, boolean firstExecut
 			}
 
 			rd = lcc.getLanguageFactory().getResultDescription(resultDescription,columnIndexes);
-			autoGeneratedKeysRowsHolder = new TemporaryRowHolderImpl(tc, properties, rd);
+			autoGeneratedKeysRowsHolder =
+				new TemporaryRowHolderImpl(activation, properties, rd);
 		}
 
 
@@ -1231,7 +1233,9 @@ private long bulkInsertCore(LanguageConnectionContext lcc,
 		*/
 		if (hasBeforeRowTrigger && rowHolder != null)
 		{
-			rowHolder = new TemporaryRowHolderImpl(tc, properties, resultDescription);
+			rowHolder =
+				new TemporaryRowHolderImpl(activation, properties,
+										   resultDescription);
 		}
 
 		// Add any new properties or change the values of any existing properties
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java
index b9e10ac7..e1b7c538 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java
@@ -134,7 +134,9 @@ protected void openCore() throws StandardException
 			/*
 			** If deferred we save a copy of the entire row.
 			*/
-			rowHolder = new TemporaryRowHolderImpl(tc, properties, resultDescription);
+			rowHolder =
+				new TemporaryRowHolderImpl(activation, properties,
+										   resultDescription);
 		}
 
 		while ( row != null )
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RowTriggerExecutor.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RowTriggerExecutor.java
index 7aebdbf9..e2d03970 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RowTriggerExecutor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RowTriggerExecutor.java
@@ -90,11 +90,13 @@
 	
 				tec.setBeforeResultSet(brs == null ? 
 						null : 
-						TemporaryRowHolderResultSet.getNewRSOnCurrentRow(activation.getTransactionController(), brs));
+						TemporaryRowHolderResultSet.
+									   getNewRSOnCurrentRow(activation, brs));
 					
 				tec.setAfterResultSet(ars == null ? 
 									  null : 
-									  TemporaryRowHolderResultSet.getNewRSOnCurrentRow(activation.getTransactionController(), ars));
+									  TemporaryRowHolderResultSet.
+									  getNewRSOnCurrentRow(activation, ars));
 
 				/* 	
 					This is the key to handling autoincrement values that might
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java
index 2428df7e..7866153e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java
@@ -26,6 +26,7 @@
 import org.apache.derby.iapi.sql.execute.ExecRow;
 import org.apache.derby.iapi.sql.execute.ExecutionFactory;
 import org.apache.derby.iapi.sql.execute.TemporaryRowHolder;
+import org.apache.derby.iapi.sql.Activation;
 import org.apache.derby.iapi.sql.ResultDescription;
 import org.apache.derby.iapi.store.access.ConglomerateController;
 import org.apache.derby.iapi.store.access.ScanController;
@@ -52,7 +53,7 @@
  *
  * @author jamie
  */
-public class TemporaryRowHolderImpl implements TemporaryRowHolder
+class TemporaryRowHolderImpl implements TemporaryRowHolder
 {
 	public static final int DEFAULT_OVERFLOWTHRESHOLD = 5;
 
@@ -71,8 +72,9 @@
 	private ConglomerateController	cc;
 	private Properties				properties;
 	private ScanController			scan;
-	private TransactionController	tc;
 	private	ResultDescription		resultDescription;
+	/** Activation object with local state information. */
+	Activation						activation;
 
 	private boolean     isUniqueStream;
 
@@ -98,7 +100,7 @@
 	 * Uses the default overflow to
  	 * a conglomerate threshold (5).
 	 *
-	 * @param tc the xact controller
+	 * @param activation the activation
 	 * @param properties the properties of the original table.  Used
 	 *		to help the store use optimal page size, etc.
 	 * @param resultDescription the result description.  Relevant for the getResultDescription
@@ -106,19 +108,20 @@
 	 */
 	public TemporaryRowHolderImpl
 	(
-		TransactionController	tc, 
+		Activation				activation, 
 		Properties 				properties, 
 		ResultDescription		resultDescription
 	) 
 	{
-		this(tc, properties, resultDescription, DEFAULT_OVERFLOWTHRESHOLD, false, false);
+		this(activation, properties, resultDescription,
+			 DEFAULT_OVERFLOWTHRESHOLD, false, false);
 	}
 	
 	/**
 	 * Uses the default overflow to
  	 * a conglomerate threshold (5).
 	 *
-	 * @param tc the xact controller
+	 * @param activation the activation
 	 * @param properties the properties of the original table.  Used
 	 *		to help the store use optimal page size, etc.
 	 * @param resultDescription the result description.  Relevant for the getResultDescription
@@ -127,20 +130,21 @@
 	 */
 	public TemporaryRowHolderImpl
 	(
-		TransactionController	tc, 
+		Activation				activation, 
 		Properties 				properties, 
 		ResultDescription		resultDescription,
 		boolean                 isUniqueStream
 	) 
 	{
-		this(tc, properties, resultDescription, 1, isUniqueStream, false);
+		this(activation, properties, resultDescription, 1, isUniqueStream,
+			 false);
 	}
 
 
 	/**
 	 * Create a temporary row holder with the defined overflow to conglom
 	 *
-	 * @param tc the xact controller
+	 * @param activation the activation
 	 * @param properties the properties of the original table.  Used
 	 *		to help the store use optimal page size, etc.
 	 * @param resultDescription the result description.  Relevant for the getResultDescription
@@ -151,7 +155,7 @@
 	 */
 	public TemporaryRowHolderImpl
 	(
-		TransactionController 	tc, 
+		Activation			 	activation, 
 		Properties				properties,
 		ResultDescription		resultDescription,
 		int 					overflowToConglomThreshold,
@@ -170,7 +174,7 @@
 			}
 		}
 
-		this.tc = tc;
+		this.activation = activation;
 		this.properties = properties;
 		this.resultDescription = resultDescription;
 		this.isUniqueStream = isUniqueStream;
@@ -250,6 +254,8 @@ public void insert(ExecRow inputRow)
 			
 		if (!conglomCreated)
 		{
+			TransactionController tc = activation.getTransactionController();
+
 			/*
 			** Create the conglomerate with the template row.
 			*/
@@ -320,6 +326,8 @@ private boolean isRowAlreadyExist(ExecRow inputRow) throws  StandardException
 		
 			if(!uniqueIndexCreated)
 			{
+				TransactionController tc =
+					activation.getTransactionController();
 				int numKeys = 2;
 				uniqueIndexRow = new DataValueDescriptor[numKeys];
 				uniqueIndexRow[0] = baseRowLocation;
@@ -378,6 +386,7 @@ private void insertToPositionIndex(int position, RowLocation rl ) throws  Standa
 	{
 		if(!positionIndexCreated)
 		{
+			TransactionController tc = activation.getTransactionController();
 			int numKeys = 2;
 			position_sqllong = new SQLLongint();
 			positionIndexRow = new DataValueDescriptor[numKeys];
@@ -413,6 +422,7 @@ private void insertToPositionIndex(int position, RowLocation rl ) throws  Standa
 	public CursorResultSet getResultSet()
 	{
 		state = STATE_DRAIN;
+		TransactionController tc = activation.getTransactionController();
 		if(isUniqueStream)
 		{
 			return new TemporaryRowHolderResultSet(tc, rowArray,
@@ -455,6 +465,7 @@ public void truncate() throws StandardException
 		*/
 		if (conglomCreated)
 		{
+			TransactionController tc = activation.getTransactionController();
 			tc.dropConglomerate(CID);
 			conglomCreated = false;
 		}
@@ -521,6 +532,8 @@ public void close() throws StandardException
 			positionIndex_cc = null;
 		}
 
+		TransactionController tc = activation.getTransactionController();
+
 		if (uniqueIndexCreated)
 		{
 			tc.dropConglomerate(uniqueIndexConglomId);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java
index a4591413..c239afc0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java
@@ -57,7 +57,7 @@
  *
  * @author jamie
  */
-public class TemporaryRowHolderResultSet implements CursorResultSet, NoPutResultSet, Cloneable
+class TemporaryRowHolderResultSet implements CursorResultSet, NoPutResultSet, Cloneable
 {
 	private ExecRow[] 				rowArray;
 	private int						numRowsOut;
@@ -181,7 +181,7 @@ public void reStartScan(long currentConglomId, long pconglomId) throws  Standard
 	 * Whip up a new Temp ResultSet that has a single
 	 * row, the current row of this result set.
 	 * 
-	 * @param tc the xact controller
+	 * @param activation the activation
 	 * @param rs the result set 
 	 * 
 	 * @return a single row result set
@@ -190,11 +190,13 @@ public void reStartScan(long currentConglomId, long pconglomId) throws  Standard
 	 */
 	public static TemporaryRowHolderResultSet getNewRSOnCurrentRow
 	(
-		TransactionController	tc,
+		Activation				activation,
 		CursorResultSet 		rs
 	) throws StandardException
 	{
-		TemporaryRowHolderImpl singleRow = new TemporaryRowHolderImpl(tc, null, rs.getResultDescription());
+		TemporaryRowHolderImpl singleRow =
+			new TemporaryRowHolderImpl(activation, null,
+									   rs.getResultDescription());
 		singleRow.insert(rs.getCurrentRow());
 		return (TemporaryRowHolderResultSet) singleRow.getResultSet();
 	}
@@ -1130,9 +1132,12 @@ public Object clone()
 		return null;
 	}
 
-	public Activation getActivation() {
-		if (SanityManager.DEBUG)
-			SanityManager.THROWASSERT("getActivation() called for " + getClass());
-		return null;
+	/**
+	 * Return the <code>Activation</code> for this result set.
+	 *
+	 * @return activation
+	 */
+	public final Activation getActivation() {
+		return holder.activation;
 	}
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java
index ae0f2bbf..13cd45b9 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java
@@ -400,9 +400,13 @@ void setup() throws StandardException
 			// Get the properties on the heap
 			rowChanger.getHeapConglomerateController().getInternalTablePropertySet(properties);
 			if(beforeUpdateCopyRequired){
-				deletedRowHolder = new TemporaryRowHolderImpl(tc, properties, triggerResultDescription);
+				deletedRowHolder =
+					new TemporaryRowHolderImpl(activation, properties,
+											   triggerResultDescription);
 			}
-			insertedRowHolder = new TemporaryRowHolderImpl(tc, properties, triggerResultDescription);
+			insertedRowHolder =
+				new TemporaryRowHolderImpl(activation, properties,
+										   triggerResultDescription);
 
 			rowChanger.setRowHolder(insertedRowHolder);
 		}
@@ -748,7 +752,7 @@ else if (key.equals(newBaseRow[k], key).equals(true))
 						// in-memory heap grows), hopefully we never spill temp table to disk.
 
 						tableScan.futureForUpdateRows = new TemporaryRowHolderImpl
-							(tc, null, null, 100, false, true);
+							(activation, null, null, 100, false, true);
 					}
 
 					rlRow.setColumn(1, rowLoc);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateVTIResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateVTIResultSet.java
index 8d0f17be..f4e7812a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateVTIResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/UpdateVTIResultSet.java
@@ -96,7 +96,9 @@ protected void openCore() throws StandardException
 			/*
 			** If deferred we save a copy of the entire row.
 			*/
-			rowHolder = new TemporaryRowHolderImpl(tc, properties, resultDescription);
+			rowHolder =
+				new TemporaryRowHolderImpl(activation, properties,
+										   resultDescription);
 		}
 
         try
