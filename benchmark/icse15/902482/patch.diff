diff --git a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
index 24d88d22..7ab2a6b0 100644
--- a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
+++ b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
@@ -18,6 +18,8 @@
  */
 package org.apache.aries.jndi.services;
 
+import java.util.Arrays;
+import java.util.Comparator;
 import java.util.HashSet;
 import java.util.LinkedList;
 import java.util.List;
@@ -146,9 +148,19 @@ public static Object getService(String className, String filter) throws IllegalA
     Object service = null;
     try {
       BundleContext callerCtx = getBundleContext();
-      ServiceReference[] refs = callerCtx.getAllServiceReferences(className, filter);
+      ServiceReference[] refs = callerCtx.getServiceReferences(className, filter);
       
       if (refs != null) {
+        // we need to sort the references returned in case they are out of order
+        // we need to sort in the reverse natural order, services with higher 
+        // ranking or lower id should be processed first so should be earlier in the array.
+        Arrays.sort(refs, new Comparator<ServiceReference>() {
+          public int compare(ServiceReference o1, ServiceReference o2)
+          {
+            return o2.compareTo(o1);
+          }
+        });
+        
         for (ServiceReference ref : refs) {
           List<Object> services = getServices(callerCtx, className, filter, ref);
           if (!!!services.isEmpty()) {
diff --git a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/ServiceRegistryContext.java b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/ServiceRegistryContext.java
index b722d5b6..1473b8e5 100644
--- a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/ServiceRegistryContext.java
+++ b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/ServiceRegistryContext.java
@@ -54,7 +54,7 @@
    * 
    * @param environment
    */
-  public ServiceRegistryContext(@SuppressWarnings("unused") Hashtable<?, ?> environment)
+  public ServiceRegistryContext(Hashtable<?, ?> environment)
   {
     env = new HashMap<Object, Object>();
     env.putAll(environment);
diff --git a/incubator/aries/trunk/jndi/jndi-url/src/test/java/org/apache/aries/jndi/url/ServiceRegistryContextTest.java b/incubator/aries/trunk/jndi/jndi-url/src/test/java/org/apache/aries/jndi/url/ServiceRegistryContextTest.java
index 84b86cf9..1aeecd0a 100644
--- a/incubator/aries/trunk/jndi/jndi-url/src/test/java/org/apache/aries/jndi/url/ServiceRegistryContextTest.java
+++ b/incubator/aries/trunk/jndi/jndi-url/src/test/java/org/apache/aries/jndi/url/ServiceRegistryContextTest.java
@@ -21,6 +21,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertSame;
 import static org.junit.Assert.assertTrue;
 
 import java.lang.reflect.Field;
@@ -41,6 +42,7 @@
 import org.junit.Test;
 import org.osgi.framework.Bundle;
 import org.osgi.framework.BundleContext;
+import org.osgi.framework.Constants;
 import org.osgi.framework.ServiceFactory;
 import org.osgi.framework.ServiceReference;
 import org.osgi.framework.ServiceRegistration;
@@ -165,7 +167,7 @@ public void simpleJNDILookup() throws NamingException
     
     Skeleton skel = Skeleton.getSkeleton(mock.getBundleContext());
     
-    skel.assertCalled(new MethodCall(BundleContext.class, "getAllServiceReferences", "java.lang.Runnable", null));
+    skel.assertCalled(new MethodCall(BundleContext.class, "getServiceReferences", "java.lang.Runnable", null));
 
     mock = new BundleMock("scooby.doo", new Properties());
     
@@ -185,7 +187,7 @@ public void simpleJNDILookup() throws NamingException
     assertEquals("The SR did not return the object we expected", service, s);
 
     skel = Skeleton.getSkeleton(mock.getBundleContext());
-    skel.assertCalled(new MethodCall(BundleContext.class, "getAllServiceReferences", "java.lang.Runnable", null));
+    skel.assertCalled(new MethodCall(BundleContext.class, "getServiceReferences", "java.lang.Runnable", null));
   }
 
   /**
@@ -207,7 +209,7 @@ public void jndiLookupWithFilter() throws NamingException
     
     assertEquals("The SR did not return the object we expected", service, s);
     
-    Skeleton.getSkeleton(bc).assertCalled(new MethodCall(BundleContext.class, "getAllServiceReferences", "java.lang.Runnable", "(rubbish=smelly)"));
+    Skeleton.getSkeleton(bc).assertCalled(new MethodCall(BundleContext.class, "getServiceReferences", "java.lang.Runnable", "(rubbish=smelly)"));
   }
   
   /**
@@ -267,7 +269,40 @@ public void listRepositoryContents() throws NamingException
     checkThreadRetrievedViaListMethod(serviceList);
     
     assertFalse("The repository contained more objects than we expected", serviceList.hasMoreElements());
+  }
+
+  @Test
+  public void checkServiceOrderObserved() throws NamingException
+  {
+    InitialContext ctx = new InitialContext();
+    
+    String className = Runnable.class.getName();
+    
+    Thread t = new Thread();
+    Thread t2 = new Thread();
+    
+    // we don't want the default service
+    reg.unregister();
+    
+    ServiceRegistration reg = bc.registerService(className, t, null);
+    ServiceRegistration reg2 = bc.registerService(className, t2, null);
+    
+    Runnable r = (Runnable) ctx.lookup("osgi:services/java.lang.Runnable");
+    
+    assertSame("The wrong runnable was returned", t, r);
+    
+    reg.unregister();
+    reg2.unregister();
+    
+    Hashtable<String, Object> props = new Hashtable<String, Object>();
+    props.put(Constants.SERVICE_RANKING, 55);
+    
+    reg = bc.registerService(className, t, null);
+    reg2 = bc.registerService(className, t2, props);
+    
+    r = (Runnable) ctx.lookup("osgi:services/java.lang.Runnable");
     
+    assertSame("The wrong runnable was returned", t2, r);
   }
 
   /**
