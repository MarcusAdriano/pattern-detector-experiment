diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java
index e69de29b..679d173a 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/FullCollationTests.java
@@ -0,0 +1,55 @@
+/**
+ *  Derby - Class org.apache.derbyTesting.functionTests.tests.lang.CollationTest
+ *  
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.derbyTesting.functionTests.tests.lang;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.derbyTesting.junit.Decorator;
+
+
+public class FullCollationTests extends CollationTest {
+    
+    public FullCollationTests(String name) {
+        super(name);
+       
+    }
+
+    
+    /**
+     * Return a suite that uses a single use database with
+     * a primary fixture from this test plus all tests
+     * @param locale Locale to use for the database
+     * @param baseFixture Base fixture from this test.
+     * @return suite of tests to run for the given locale
+     */
+    public static Test suite() 
+    {
+        TestSuite suite = new TestSuite("FullCollationTests:territory=" +"no_NO");
+        suite.addTest(new CollationTest("testNorwayCollation"));
+        suite.addTest(org.apache.derbyTesting.functionTests.tests.lang._Suite.suite());
+        suite.addTest(org.apache.derbyTesting.functionTests.tests.jdbcapi._Suite.suite());
+        suite.addTest(org.apache.derbyTesting.functionTests.tests.store._Suite.suite());
+        return Decorator.territoryCollatedDatabase(suite, "no_NO");
+    }
+
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java
index 60aee933..b315469d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java
@@ -22,10 +22,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import java.sql.DatabaseMetaData;
 import java.sql.PreparedStatement;
+import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;
 
 import org.apache.derby.iapi.services.io.DerbyIOException;
+import org.apache.derbyTesting.junit.JDBC;
+import org.apache.derbyTesting.junit.TestConfiguration;
 
 import junit.framework.Test;
 import junit.framework.TestSuite;
@@ -129,6 +132,58 @@ public void testDML() throws SQLException {
         commit();
     }
     
+    /**
+     * Make sure table created in soft upgrade mode can be 
+     * accessed after shutdown.  DERBY-2931
+     * @throws SQLException
+     */
+    public void testCreateTable() throws SQLException
+    {
+        
+        Statement stmt = createStatement();
+        try {
+            stmt.executeUpdate("DROP table t");
+        } catch (SQLException se) {
+            // ignore table does not exist error on
+            // on drop table.
+            assertSQLState("42Y55",se ); 
+        }
+        stmt.executeUpdate("CREATE TABLE T (I INT)");
+        TestConfiguration.getCurrent().shutdownDatabase();
+        stmt = createStatement();
+        ResultSet rs = stmt.executeQuery("SELECT * from t");
+        JDBC.assertEmpty(rs);  
+        rs.close();
+    }
+    
+
+    /**
+     * Test table with index can be read after
+     * shutdown DERBY-2931
+     * @throws SQLException
+     */
+    public void testIndex() throws SQLException 
+    {
+        Statement stmt = createStatement();
+        try {
+            stmt.executeUpdate("DROP table ti");
+        } catch (SQLException se) {
+            // ignore table does not exist error on
+            // on drop table.
+            assertSQLState("42Y55",se ); 
+        }
+        stmt.executeUpdate("CREATE TABLE TI (I INT primary key not null)");
+        stmt.executeUpdate("INSERT INTO  TI values(1)");
+        stmt.executeUpdate("INSERT INTO  TI values(2)");
+        stmt.executeUpdate("INSERT INTO  TI values(3)");
+        TestConfiguration.getCurrent().shutdownDatabase();
+        stmt = createStatement();
+        ResultSet rs = stmt.executeQuery("SELECT * from TI ORDER BY I");
+        JDBC.assertFullResultSet(rs, new String[][] {{"1"},{"2"},{"3"}});
+        rs.close();        
+    }
+
+    
     /**
      * Ensure that after hard upgrade (with the old version)
      * we can no longer connect to the database.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_3.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_3.java
index 4df807fe..764a8c19 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_3.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_3.java
@@ -81,51 +81,6 @@ public Changes10_3(String name) {
         super(name);
     }
     
-
-    /**
-     * Make sure table created in soft upgrade mode can be 
-     * accessed after shutdown.  DERBY-2931
-     * @throws SQLException
-     */
-    public void testCreateTable() throws SQLException
-    {
-        
-        Statement stmt = createStatement();
-        try {
-            stmt.executeUpdate("DROP table t");
-        } catch (SQLException se) {
-            // ignore table does not exist error on
-            // on drop table.
-            assertSQLState("42Y55",se ); 
-        }
-        stmt.executeUpdate("CREATE TABLE T (I INT)");
-        TestConfiguration.getCurrent().shutdownDatabase();
-        stmt = createStatement();
-        ResultSet rs = stmt.executeQuery("SELECT * from t");
-        JDBC.assertEmpty(rs);  
-        rs.close();
-    }
-    
-    public void testIndex() throws SQLException 
-    {
-        Statement stmt = createStatement();
-        try {
-            stmt.executeUpdate("DROP table ti");
-        } catch (SQLException se) {
-            // ignore table does not exist error on
-            // on drop table.
-            assertSQLState("42Y55",se ); 
-        }
-        stmt.executeUpdate("CREATE TABLE TI (I INT primary key not null)");
-        stmt.executeUpdate("INSERT INTO  TI values(1)");
-        stmt.executeUpdate("INSERT INTO  TI values(2)");
-        stmt.executeUpdate("INSERT INTO  TI values(3)");
-        TestConfiguration.getCurrent().shutdownDatabase();
-        stmt = createStatement();
-        ResultSet rs = stmt.executeQuery("SELECT * from TI ORDER BY I");
-        JDBC.assertFullResultSet(rs, new String[][] {{"1"},{"2"},{"3"}});
-        rs.close();        
-    }
     /**
      * Verify the compilation schema is nullable after upgrade to 10.3
      * or later. (See DERBY-630)
