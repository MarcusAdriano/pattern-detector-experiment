diff --git a/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraDaemon.java b/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraDaemon.java
index 9afeaa5c..a3311b3b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraDaemon.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraDaemon.java
@@ -117,6 +117,8 @@ public void uncaughtException(Thread t, Throwable e)
             MigrationManager.applyMigrations(currentMigration, lastMigration);
         }
 
+        SystemTable.purgeIncompatibleHints();
+
         // start server internals
         StorageService.instance.initServer();
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java b/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java
index 4736bb4e..eefa193f 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java
@@ -52,6 +52,7 @@
     private static final byte[] LOCATION_KEY = "L".getBytes(UTF_8);
     private static final byte[] BOOTSTRAP_KEY = "Bootstrap".getBytes(UTF_8);
     private static final byte[] GRAVEYARD_KEY = "Graveyard".getBytes(UTF_8);
+    private static final byte[] COOKIE_KEY = "Cookies".getBytes(UTF_8);
     private static final byte[] BOOTSTRAP = "B".getBytes(UTF_8);
     private static final byte[] TOKEN = "Token".getBytes(UTF_8);
     private static final byte[] GENERATION = "Generation".getBytes(UTF_8);
@@ -64,6 +65,25 @@ private static DecoratedKey decorate(byte[] key)
         return StorageService.getPartitioner().decorateKey(key);
     }
 
+    /* if hints become incompatible across versions of cassandra, that logic (and associated purging) is managed here. */
+    public static void purgeIncompatibleHints() throws IOException
+    {
+        // 0.6->0.7
+        final byte[] hintsPurged6to7 = "Hints purged as part of upgrading from 0.6.x to 0.7".getBytes();
+        Table table = Table.open(Table.SYSTEM_TABLE);
+        QueryFilter dotSeven = QueryFilter.getNamesFilter(decorate(COOKIE_KEY), new QueryPath(STATUS_CF), hintsPurged6to7);
+        ColumnFamily cf = table.getColumnFamilyStore(STATUS_CF).getColumnFamily(dotSeven);
+        if (cf == null)
+        {
+            // upgrading from 0.6 to 0.7.
+            logger.info("Upgrading to 0.7. Purging hints if there are any. Old hints will be snapshotted.");
+            new Truncation(Table.SYSTEM_TABLE, HintedHandOffManager.HINTS_CF).apply();
+            RowMutation rm = new RowMutation(Table.SYSTEM_TABLE, COOKIE_KEY);
+            rm.add(new QueryPath(STATUS_CF, null, hintsPurged6to7), "oh yes, it they were purged.".getBytes(), new TimestampClock(System.currentTimeMillis()));
+            rm.apply();
+        }
+    }
+
     /**
      * Record token being used by another node
      */
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraDaemon.java b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraDaemon.java
index d63e900d..abd2b7db 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraDaemon.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraDaemon.java
@@ -133,6 +133,8 @@ public void uncaughtException(Thread t, Throwable e)
             MigrationManager.applyMigrations(currentMigration, lastMigration);
         }
         
+        SystemTable.purgeIncompatibleHints();
+        
         // start server internals
         StorageService.instance.initServer();
         
