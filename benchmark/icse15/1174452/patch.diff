diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/qr/QRFirstStep.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/qr/QRFirstStep.java
index 61dd5939..cdb018ba 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/qr/QRFirstStep.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/stochasticsvd/qr/QRFirstStep.java
@@ -54,7 +54,8 @@
  * 
  */
 @SuppressWarnings("deprecation")
-public class QRFirstStep implements Closeable, OutputCollector<Writable, Vector> {
+public class QRFirstStep implements Closeable,
+    OutputCollector<Writable, Vector> {
 
   public static final String PROP_K = "ssvd.k";
   public static final String PROP_P = "ssvd.p";
@@ -259,7 +260,9 @@ protected void cleanup() throws IOException {
       // then at least it is always sequential.
       String taskTmpDir = System.getProperty("java.io.tmpdir");
       FileSystem localFs = FileSystem.getLocal(jobConf);
-      tempQPath = new Path(new Path(taskTmpDir), "q-temp.seq");
+      tempQPath =
+        new Path(new Path(taskTmpDir),
+                 String.format("q-temp-%d.seq", System.currentTimeMillis()));
       tempQw =
         SequenceFile.createWriter(localFs,
                                   jobConf,
@@ -277,7 +280,6 @@ protected void cleanup() throws IOException {
   @Override
   public void collect(Writable key, Vector vw) throws IOException {
     map(key, vw);
-
   }
 
 }
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/math/hadoop/stochasticsvd/LocalSSVDSolverDenseTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/math/hadoop/stochasticsvd/LocalSSVDSolverDenseTest.java
index ccdb41fc..f4987222 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/math/hadoop/stochasticsvd/LocalSSVDSolverDenseTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/math/hadoop/stochasticsvd/LocalSSVDSolverDenseTest.java
@@ -44,9 +44,9 @@
   private static final double s_epsilon = 1.0E-10d;
 
   // I actually never saw errors more than 3% worst case for this test,
-  // but since it's non-deterministic test, it still may ocasionally produce
+  // but since it's non-deterministic test, it still may occasionally produce
   // bad results with a non-zero probability, so i put this pct% for error
-  // margin higher so it never fails.
+  // margin high enough so it (almost) never fails.
   private static final double s_precisionPct = 10;
 
   @Test
@@ -112,9 +112,6 @@ public void runSSVDSolver(int q) throws IOException {
 
     Path svdOutPath = new Path(tempDirPath, "SSVD-out");
 
-    // make sure we wipe out previous test results, just a convenience
-    fs.delete(svdOutPath, true);
-
     // Solver starts here:
     System.out.println("Input prepared, starting solver...");
 
