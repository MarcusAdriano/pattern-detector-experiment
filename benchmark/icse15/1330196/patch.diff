diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestSetup.java
index ee9b9fb3..31959761 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestSetup.java
@@ -90,6 +90,14 @@ public void println(final String text) {
     protected void tearDown()
     throws java.lang.Exception
     {
+        clearConnection();
+    }
+
+    /**
+     * Close the default connection and null out the reference to it.
+     * Typically only called from {@code tearDown()}.
+     */
+    void clearConnection() throws SQLException {
     	JDBC.cleanup(conn);
         conn = null;
     }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DatabasePropertyTestSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DatabasePropertyTestSetup.java
index 9635eb10..b07e241e 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DatabasePropertyTestSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DatabasePropertyTestSetup.java
@@ -192,12 +192,16 @@ public static Test builtinAuthenticationNoTeardown(Test test, String[] users,
         return test;
     }
 
-    private static DatabasePropertyTestSetup getNoTeardownInstance(
+    static DatabasePropertyTestSetup getNoTeardownInstance(
         Test test, Properties p, boolean staticp)
     {
         return new DatabasePropertyTestSetup(test, p, staticp) {
                 protected void tearDown()
                         throws java.lang.Exception {
+                    // We don't want to reset the properties, but we should
+                    // still clear the reference to the default connection to
+                    // allow it to be garbage collected.
+                    clearConnection();
                 }
             };
     }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
index e822fe2e..08aba0f4 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
@@ -911,11 +911,8 @@ public static Test sqlAuthorizationDecorator(Test test)
         // reset it.
         final Properties sqlAuth = new Properties();
         sqlAuth.setProperty("derby.database.sqlAuthorization", "true");
-        Test setSQLAuthMode = new DatabasePropertyTestSetup(test,
-                sqlAuth, true) {
-            protected void tearDown() {
-            }
-        };
+        Test setSQLAuthMode = DatabasePropertyTestSetup.getNoTeardownInstance(
+                test, sqlAuth, true);
         
         return changeUserDecorator(
             new DatabaseChangeSetup(setSQLAuthMode, DEFAULT_DBNAME_SQL, DEFAULT_DBNAME_SQL, true),
@@ -939,11 +936,8 @@ public static Test sqlAuthorizationDecoratorSingleUse(Test test)
         // reset it.
         final Properties sqlAuth = new Properties();
         sqlAuth.setProperty("derby.database.sqlAuthorization", "true");
-        Test setSQLAuthMode = new DatabasePropertyTestSetup(test,
-                                                            sqlAuth, true) {
-                protected void tearDown() { }
-            };
-
+        Test setSQLAuthMode = DatabasePropertyTestSetup.getNoTeardownInstance(
+                test, sqlAuth, true);
 
         setSQLAuthMode = new DatabaseChangeSetup(
             new DropDatabaseSetup(setSQLAuthMode, DEFAULT_DBNAME_SQL) {
