diff --git a/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.java b/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.java
index fb5e2ceb..4f15c05b 100644
--- a/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.java
+++ b/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.java
@@ -85,7 +85,6 @@ public static void checkCodeVersion(Directory dir, String segment) throws IOExce
     } finally {
       idxStream.close();
     }
-  
   }
   
   // Used only by clone
diff --git a/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter.java b/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter.java
index 3ffdb960..23e08008 100644
--- a/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter.java
+++ b/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsWriter.java
@@ -21,7 +21,6 @@
 import org.apache.lucene.codecs.StoredFieldsReader;
 import org.apache.lucene.codecs.StoredFieldsWriter;
 import org.apache.lucene.document.Document;
-import org.apache.lucene.document.NumericField;
 import org.apache.lucene.index.CorruptIndexException;
 import org.apache.lucene.index.FieldInfo;
 import org.apache.lucene.index.IndexFileNames;
@@ -51,10 +50,10 @@
   static final int FIELD_IS_NUMERIC_LONG = 2 << _NUMERIC_BIT_SHIFT;
   static final int FIELD_IS_NUMERIC_FLOAT = 3 << _NUMERIC_BIT_SHIFT;
   static final int FIELD_IS_NUMERIC_DOUBLE = 4 << _NUMERIC_BIT_SHIFT;
-  // currently unused: static final int FIELD_IS_NUMERIC_SHORT = 5 << _NUMERIC_BIT_SHIFT;
-  // currently unused: static final int FIELD_IS_NUMERIC_BYTE = 6 << _NUMERIC_BIT_SHIFT;
 
   // the next possible bits are: 1 << 6; 1 << 7
+  // currently unused: static final int FIELD_IS_NUMERIC_SHORT = 5 << _NUMERIC_BIT_SHIFT;
+  // currently unused: static final int FIELD_IS_NUMERIC_BYTE = 6 << _NUMERIC_BIT_SHIFT;
   
   // Lucene 3.0: Removal of compressed fields
   static final int FORMAT_LUCENE_3_0_NO_COMPRESSED_FIELDS = 2;
@@ -137,19 +136,19 @@ public void writeField(FieldInfo info, IndexableField field) throws IOException
     // this way we don't bake into indexer all these
     // specific encodings for different fields?  and apps
     // can customize...
-    final NumericField.DataType numericType = field.fieldType().numericType();
-    if (numericType != null) {
-      switch (numericType) {
-        case INT:
-          bits |= FIELD_IS_NUMERIC_INT; break;
-        case LONG:
-          bits |= FIELD_IS_NUMERIC_LONG; break;
-        case FLOAT:
-          bits |= FIELD_IS_NUMERIC_FLOAT; break;
-        case DOUBLE:
-          bits |= FIELD_IS_NUMERIC_DOUBLE; break;
-        default:
-          assert false : "Should never get here";
+
+    Number number = field.numericValue();
+    if (number != null) {
+      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {
+        bits |= FIELD_IS_NUMERIC_INT;
+      } else if (number instanceof Long) {
+        bits |= FIELD_IS_NUMERIC_LONG;
+      } else if (number instanceof Float) {
+        bits |= FIELD_IS_NUMERIC_FLOAT;
+      } else if (number instanceof Double) {
+        bits |= FIELD_IS_NUMERIC_DOUBLE;
+      } else {
+        throw new IllegalArgumentException("cannot store numeric type " + number.getClass());
       }
       string = null;
       bytes = null;
@@ -160,6 +159,9 @@ public void writeField(FieldInfo info, IndexableField field) throws IOException
         string = null;
       } else {
         string = field.stringValue();
+        if (string == null) {
+          throw new IllegalArgumentException("field " + field.name() + " is stored but does not have binaryValue, stringValue nor numericValue");
+        }
       }
     }
 
@@ -172,20 +174,16 @@ public void writeField(FieldInfo info, IndexableField field) throws IOException
       fieldsStream.writeString(field.stringValue());
     } else {
       final Number n = field.numericValue();
-      if (n == null) {
-        throw new IllegalArgumentException("field " + field.name() + " is stored but does not have binaryValue, stringValue nor numericValue");
-      }
-      switch (field.fieldType().numericType()) {
-        case INT:
-          fieldsStream.writeInt(n.intValue()); break;
-        case LONG:
-          fieldsStream.writeLong(n.longValue()); break;
-        case FLOAT:
-          fieldsStream.writeInt(Float.floatToIntBits(n.floatValue())); break;
-        case DOUBLE:
-          fieldsStream.writeLong(Double.doubleToLongBits(n.doubleValue())); break;
-        default:
-          assert false : "Should never get here";
+      if (number instanceof Byte || number instanceof Short || number instanceof Integer) {
+        fieldsStream.writeInt(number.intValue());
+      } else if (number instanceof Long) {
+        fieldsStream.writeLong(number.longValue());
+      } else if (number instanceof Float) {
+        fieldsStream.writeInt(Float.floatToIntBits(number.floatValue()));
+      } else if (number instanceof Double) {
+        fieldsStream.writeLong(Double.doubleToLongBits(number.doubleValue()));
+      } else {
+        assert false;
       }
     }
   }
diff --git a/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter.java b/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter.java
index 67bd9b59..6438c453 100644
--- a/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter.java
+++ b/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextStoredFieldsWriter.java
@@ -20,7 +20,6 @@
 import java.io.IOException;
 
 import org.apache.lucene.codecs.StoredFieldsWriter;
-import org.apache.lucene.document.NumericField;
 import org.apache.lucene.index.FieldInfo;
 import org.apache.lucene.index.IndexFileNames;
 import org.apache.lucene.index.IndexableField;
@@ -99,48 +98,39 @@ public void writeField(FieldInfo info, IndexableField field) throws IOException
     newLine();
     
     write(TYPE);
-    final NumericField.DataType numericType = field.fieldType().numericType();
+    final Number n = field.numericValue();
 
-    if (numericType != null) {
-      switch (numericType) {
-        case INT:
+    if (n != null) {
+      if (n instanceof Byte || n instanceof Short || n instanceof Integer) {
           write(TYPE_INT);
           newLine();
           
           write(VALUE);
-          write(Integer.toString(field.numericValue().intValue()));
+        write(Integer.toString(n.intValue()));
           newLine();
-          
-          break;
-        case LONG:
+      } else if (n instanceof Long) {
           write(TYPE_LONG);
           newLine();
           
           write(VALUE);
-          write(Long.toString(field.numericValue().longValue()));
+        write(Long.toString(n.longValue()));
           newLine();
-          
-          break;
-        case FLOAT:
+      } else if (n instanceof Float) {
           write(TYPE_FLOAT);
           newLine();
           
           write(VALUE);
-          write(Float.toString(field.numericValue().floatValue()));
+        write(Float.toString(n.floatValue()));
           newLine();
-          
-          break;
-        case DOUBLE:
+      } else if (n instanceof Double) {
           write(TYPE_DOUBLE);
           newLine();
           
           write(VALUE);
-          write(Double.toString(field.numericValue().doubleValue()));
+        write(Double.toString(n.doubleValue()));
           newLine();
-          
-          break;
-        default:
-          assert false : "Should never get here";
+      } else {
+        throw new IllegalArgumentException("cannot store numeric type " + n.getClass());
       }
     } else { 
       BytesRef bytes = field.binaryValue();
diff --git a/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/document/BinaryField.java b/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/document/BinaryField.java
index 813ba401..e69de29b 100644
--- a/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/document/BinaryField.java
+++ b/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/document/BinaryField.java
@@ -1,46 +0,0 @@
-package org.apache.lucene.document;
-
-import org.apache.lucene.util.BytesRef;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/** A field with byte[] value that is only stored. */
-
-public final class BinaryField extends Field {
-
-  public static final FieldType TYPE_STORED = new FieldType();
-  static {
-    TYPE_STORED.setStored(true);
-    TYPE_STORED.freeze();
-  }
-
-  /** Creates a new BinaryField */
-  public BinaryField(String name, byte[] value) {
-    super(name, value, BinaryField.TYPE_STORED);
-  }
-  
-  /** Creates a new BinaryField */
-  public BinaryField(String name, byte[] value, int offset, int length) {
-    super(name, value, offset, length, BinaryField.TYPE_STORED);
-  }
-
-  /** Creates a new BinaryField */
-  public BinaryField(String name, BytesRef bytes) {
-    super(name, bytes, BinaryField.TYPE_STORED);
-  }
-}
diff --git a/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/document/DocumentStoredFieldVisitor.java b/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/document/DocumentStoredFieldVisitor.java
index 5ee7961a..94376928 100644
--- a/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/document/DocumentStoredFieldVisitor.java
+++ b/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/document/DocumentStoredFieldVisitor.java
@@ -57,7 +57,7 @@ public DocumentStoredFieldVisitor() {
 
   @Override
   public void binaryField(FieldInfo fieldInfo, byte[] value, int offset, int length) throws IOException {
-    doc.add(new BinaryField(fieldInfo.name, value));
+    doc.add(new StoredField(fieldInfo.name, value));
   }
 
   @Override
@@ -73,26 +73,22 @@ public void stringField(FieldInfo fieldInfo, String value) throws IOException {
 
   @Override
   public void intField(FieldInfo fieldInfo, int value) {
-    FieldType ft = NumericField.getFieldType(NumericField.DataType.INT, true);
-    doc.add(new NumericField(fieldInfo.name, Integer.valueOf(value), ft));
+    doc.add(new StoredField(fieldInfo.name, value));
   }
 
   @Override
   public void longField(FieldInfo fieldInfo, long value) {
-    FieldType ft = NumericField.getFieldType(NumericField.DataType.LONG, true);
-    doc.add(new NumericField(fieldInfo.name, Long.valueOf(value), ft));
+    doc.add(new StoredField(fieldInfo.name, value));
   }
 
   @Override
   public void floatField(FieldInfo fieldInfo, float value) {
-    FieldType ft = NumericField.getFieldType(NumericField.DataType.FLOAT, true);
-    doc.add(new NumericField(fieldInfo.name, Float.valueOf(value), ft));
+    doc.add(new StoredField(fieldInfo.name, value));
   }
 
   @Override
   public void doubleField(FieldInfo fieldInfo, double value) {
-    FieldType ft = NumericField.getFieldType(NumericField.DataType.DOUBLE, true);
-    doc.add(new NumericField(fieldInfo.name, Double.valueOf(value), ft));
+    doc.add(new StoredField(fieldInfo.name, value));
   }
 
   @Override
diff --git a/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/document/StoredField.java b/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/document/StoredField.java
index e69de29b..da57fb32 100644
--- a/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/document/StoredField.java
+++ b/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/document/StoredField.java
@@ -0,0 +1,69 @@
+package org.apache.lucene.document;
+
+import org.apache.lucene.util.BytesRef;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/** A field whose value is stored so that {@link
+ *  IndexSearcher.doc} and {@link IndexReader.doc} will
+ *  return the field and its value. */
+public final class StoredField extends Field {
+
+  public final static FieldType TYPE;
+  static {
+    TYPE = new FieldType();
+    TYPE.setStored(true);
+    TYPE.freeze();
+  }
+
+  public StoredField(String name, byte[] value) {
+    super(name, value, TYPE);
+  }
+  
+  public StoredField(String name, byte[] value, int offset, int length) {
+    super(name, value, offset, length, TYPE);
+  }
+
+  public StoredField(String name, BytesRef value) {
+    super(name, value, TYPE);
+  }
+
+  public StoredField(String name, String value) {
+    super(name, value, TYPE);
+  }
+
+  public StoredField(String name, int value) {
+    super(name, TYPE);
+    fieldsData = value;
+  }
+
+  public StoredField(String name, float value) {
+    super(name, TYPE);
+    fieldsData = value;
+  }
+
+  public StoredField(String name, long value) {
+    super(name, TYPE);
+    fieldsData = value;
+  }
+
+  public StoredField(String name, double value) {
+    super(name, TYPE);
+    fieldsData = value;
+  }
+}
diff --git a/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/index/IndexableFieldType.java b/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/index/IndexableFieldType.java
index f00a4b10..4080c9c2 100644
--- a/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/index/IndexableFieldType.java
+++ b/lucene/dev/branches/lucene3453/lucene/src/java/org/apache/lucene/index/IndexableFieldType.java
@@ -56,7 +56,9 @@
 
   /** Numeric {@link NumericField.DataType}; if
    * non-null then the field's value will be indexed
-   * numerically. */
+   *  numerically so that {@link NumericRangeQuery} can be
+   *  used at search time. */
+  // nocommit: should this be in FT not IFT...?
   public NumericField.DataType numericType();
 
   /** Precision step for numeric field. */
diff --git a/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/document/TestBinaryDocument.java b/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/document/TestBinaryDocument.java
index 2f41c208..7e8b29cf 100644
--- a/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/document/TestBinaryDocument.java
+++ b/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/document/TestBinaryDocument.java
@@ -37,7 +37,7 @@ public void testBinaryFieldInIndex()
   {
     FieldType ft = new FieldType();
     ft.setStored(true);
-    IndexableField binaryFldStored = new BinaryField("binaryStored", binaryValStored.getBytes());
+    IndexableField binaryFldStored = new StoredField("binaryStored", binaryValStored.getBytes());
     IndexableField stringFldStored = new Field("stringStored", binaryValStored, ft);
 
     Document doc = new Document();
@@ -75,8 +75,8 @@ public void testBinaryFieldInIndex()
   }
   
   public void testCompressionTools() throws Exception {
-    IndexableField binaryFldCompressed = new BinaryField("binaryCompressed", CompressionTools.compress(binaryValCompressed.getBytes()));
-    IndexableField stringFldCompressed = new BinaryField("stringCompressed", CompressionTools.compressString(binaryValCompressed));
+    IndexableField binaryFldCompressed = new StoredField("binaryCompressed", CompressionTools.compress(binaryValCompressed.getBytes()));
+    IndexableField stringFldCompressed = new StoredField("stringCompressed", CompressionTools.compressString(binaryValCompressed));
     
     Document doc = new Document();
     
diff --git a/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/document/TestDocument.java b/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/document/TestDocument.java
index e9057cb3..1e977ec1 100644
--- a/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/document/TestDocument.java
+++ b/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/document/TestDocument.java
@@ -51,8 +51,8 @@ public void testBinaryField() throws Exception {
     FieldType ft = new FieldType();
     ft.setStored(true);
     IndexableField stringFld = new Field("string", binaryVal, ft);
-    IndexableField binaryFld = new BinaryField("binary", binaryVal.getBytes());
-    IndexableField binaryFld2 = new BinaryField("binary", binaryVal2.getBytes());
+    IndexableField binaryFld = new StoredField("binary", binaryVal.getBytes());
+    IndexableField binaryFld2 = new StoredField("binary", binaryVal2.getBytes());
     
     doc.add(stringFld);
     doc.add(binaryFld);
diff --git a/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers.java b/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers.java
index ca48ff2e..92931011 100644
--- a/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers.java
+++ b/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/index/TestConsistentFieldNumbers.java
@@ -20,10 +20,10 @@
 import java.io.IOException;
 
 import org.apache.lucene.analysis.MockAnalyzer;
-import org.apache.lucene.document.BinaryField;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
+import org.apache.lucene.document.StoredField;
 import org.apache.lucene.document.StringField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.store.Directory;
@@ -189,7 +189,7 @@ public void testFieldNumberGaps() throws IOException {
                 : NoMergePolicy.COMPOUND_FILES));
         Document d = new Document();
         d.add(new Field("f1", "d2 first field", TextField.TYPE_STORED));
-        d.add(new BinaryField("f3", new byte[] { 1, 2, 3 }));
+        d.add(new StoredField("f3", new byte[] { 1, 2, 3 }));
         writer.addDocument(d);
         writer.close();
         SegmentInfos sis = new SegmentInfos();
@@ -212,7 +212,7 @@ public void testFieldNumberGaps() throws IOException {
         Document d = new Document();
         d.add(new Field("f1", "d3 first field", TextField.TYPE_STORED));
         d.add(new Field("f2", "d3 second field", TextField.TYPE_STORED));
-        d.add(new BinaryField("f3", new byte[] { 1, 2, 3, 4, 5 }));
+        d.add(new StoredField("f3", new byte[] { 1, 2, 3, 4, 5 }));
         writer.addDocument(d);
         writer.close();
         SegmentInfos sis = new SegmentInfos();
diff --git a/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/index/TestFieldsReader.java b/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/index/TestFieldsReader.java
index 23890599..3bb525f5 100644
--- a/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/index/TestFieldsReader.java
+++ b/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/index/TestFieldsReader.java
@@ -27,6 +27,7 @@
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
 import org.apache.lucene.document.NumericField;
+import org.apache.lucene.document.StoredField;
 import org.apache.lucene.document.StringField;
 import org.apache.lucene.index.FieldInfo.IndexOptions;
 import org.apache.lucene.index.IndexWriterConfig.OpenMode;
@@ -285,10 +286,8 @@ public void testNumericField() throws Exception {
       for(int docID=0;docID<sub.numDocs();docID++) {
         final Document doc = sub.document(docID);
         final Field f = (Field) doc.getField("nf");
-        assertTrue("got f=" + f, f instanceof NumericField);
-        final NumericField nf = (NumericField) f;
-        assertEquals(answers[ids[docID]], nf.numericValue());
-        assertSame(typeAnswers[ids[docID]], nf.fieldType().numericType());
+        assertTrue("got f=" + f, f instanceof StoredField);
+        assertEquals(answers[ids[docID]], f.numericValue());
       }
     }
     r.close();
diff --git a/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/index/TestIndexReader.java b/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/index/TestIndexReader.java
index f1796271..5a1c625e 100644
--- a/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/index/TestIndexReader.java
+++ b/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/index/TestIndexReader.java
@@ -30,10 +30,10 @@
 
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.codecs.lucene40.Lucene40PostingsFormat;
-import org.apache.lucene.document.BinaryField;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
+import org.apache.lucene.document.StoredField;
 import org.apache.lucene.document.StringField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.IndexWriterConfig.OpenMode;
@@ -297,7 +297,7 @@ public void testBinaryFields() throws IOException {
         writer.close();
         writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.APPEND).setMergePolicy(newLogMergePolicy()));
         Document doc = new Document();
-        doc.add(new BinaryField("bin1", bin));
+        doc.add(new StoredField("bin1", bin));
         doc.add(new TextField("junk", "junk text"));
         writer.addDocument(doc);
         writer.close();
diff --git a/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java b/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java
index f4e44a72..97aad9df 100644
--- a/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java
+++ b/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/index/TestIndexWriter.java
@@ -32,10 +32,10 @@
 import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
 import org.apache.lucene.codecs.Codec;
 import org.apache.lucene.codecs.simpletext.SimpleTextCodec;
-import org.apache.lucene.document.BinaryField;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
+import org.apache.lucene.document.StoredField;
 import org.apache.lucene.document.StringField;
 import org.apache.lucene.document.TextField;
 import org.apache.lucene.index.IndexWriterConfig.OpenMode;
@@ -921,7 +921,7 @@ public void testBinaryFieldOffsetLength() throws IOException {
       b[i] = (byte) (i+77);
 
     Document doc = new Document();
-    Field f = new BinaryField("binary", b, 10, 17);
+    Field f = new StoredField("binary", b, 10, 17);
     byte[] bx = f.binaryValue().bytes;
     assertTrue(bx != null);
     assertEquals(50, bx.length);
@@ -1177,7 +1177,7 @@ public void testIndexStoreCombos() throws Exception {
 
     Document doc = new Document();
 
-    FieldType customType = new FieldType(BinaryField.TYPE_STORED);
+    FieldType customType = new FieldType(StoredField.TYPE);
     customType.setTokenized(true);
     
     Field f = new Field("binary", b, 10, 17, customType);
diff --git a/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/index/TestIndexableField.java b/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/index/TestIndexableField.java
index 324d37b4..3d6faec4 100644
--- a/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/index/TestIndexableField.java
+++ b/lucene/dev/branches/lucene3453/lucene/src/test/org/apache/lucene/index/TestIndexableField.java
@@ -150,7 +150,11 @@ public Reader readerValue() {
 
     @Override
     public Number numericValue() {
+      if (counter%10 == 9) {
       return counter;
+      } else {
+        return null;
+      }
     }
 
     @Override
@@ -269,10 +273,7 @@ public void remove() {
               assertEquals((byte) (idx+counter), b.bytes[b.offset+idx]);
             }
           } else if (numeric) {
-            assertTrue(f instanceof NumericField);
-            final NumericField nf = (NumericField) f;
-            assertEquals(NumericField.DataType.INT, nf.fieldType().numericType());
-            assertEquals(counter, nf.numericValue().intValue());
+            assertEquals(counter, f.numericValue().intValue());
           } else {
             assert stringValue != null;
             assertEquals(stringValue, f.stringValue());
diff --git a/lucene/dev/branches/lucene3453/lucene/src/test-framework/java/org/apache/lucene/index/DocHelper.java b/lucene/dev/branches/lucene3453/lucene/src/test-framework/java/org/apache/lucene/index/DocHelper.java
index e0b30f0c..ab4233ec 100644
--- a/lucene/dev/branches/lucene3453/lucene/src/test-framework/java/org/apache/lucene/index/DocHelper.java
+++ b/lucene/dev/branches/lucene3453/lucene/src/test-framework/java/org/apache/lucene/index/DocHelper.java
@@ -26,13 +26,13 @@
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.analysis.MockTokenizer;
-import org.apache.lucene.document.BinaryField;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
-import org.apache.lucene.document.StringField;
-import org.apache.lucene.index.FieldInfo.IndexOptions;
 import org.apache.lucene.document.FieldType;
+import org.apache.lucene.document.StoredField;
+import org.apache.lucene.document.StringField;
 import org.apache.lucene.document.TextField;
+import org.apache.lucene.index.FieldInfo.IndexOptions;
 import org.apache.lucene.search.similarities.SimilarityProvider;
 import org.apache.lucene.store.Directory;
 
@@ -197,7 +197,7 @@
       LAZY_FIELD_BINARY_BYTES = "These are some binary field bytes".getBytes("UTF8");
     } catch (UnsupportedEncodingException e) {
     }
-    lazyFieldBinary = new BinaryField(LAZY_FIELD_BINARY_KEY, LAZY_FIELD_BINARY_BYTES);
+    lazyFieldBinary = new StoredField(LAZY_FIELD_BINARY_KEY, LAZY_FIELD_BINARY_BYTES);
     fields[fields.length - 2] = lazyFieldBinary;
     LARGE_LAZY_FIELD_TEXT = buffer.toString();
     largeLazyField = new Field(LARGE_LAZY_FIELD_KEY, LARGE_LAZY_FIELD_TEXT, customType);
diff --git a/lucene/dev/branches/lucene3453/solr/core/src/java/org/apache/solr/response/transform/BaseEditorialTransformer.java b/lucene/dev/branches/lucene3453/solr/core/src/java/org/apache/solr/response/transform/BaseEditorialTransformer.java
index 3ed970e8..1d8aa458 100644
--- a/lucene/dev/branches/lucene3453/solr/core/src/java/org/apache/solr/response/transform/BaseEditorialTransformer.java
+++ b/lucene/dev/branches/lucene3453/solr/core/src/java/org/apache/solr/response/transform/BaseEditorialTransformer.java
@@ -19,7 +19,6 @@
  */
 
 import org.apache.lucene.document.Field;
-import org.apache.lucene.document.NumericField;
 import org.apache.solr.common.SolrDocument;
 import org.apache.solr.schema.FieldType;
 
@@ -65,8 +64,14 @@ public void transform(SolrDocument doc, int docid) {
   protected String getKey(SolrDocument doc) {
     String key;
     Object field = doc.get(idFieldName);
-    if (field instanceof NumericField){
-      key = ((Field)field).numericValue().toString();
+    final Number n;
+    if (field instanceof Field) {
+      n = ((Field) field).numericValue();
+    } else {
+      n = null;
+    }
+    if (n != null) {
+      key = n.toString();
       key = ft.readableToIndexed(key);
     } else if (field instanceof Field){
       key = ((Field)field).stringValue();
diff --git a/lucene/dev/branches/lucene3453/solr/core/src/java/org/apache/solr/schema/BinaryField.java b/lucene/dev/branches/lucene3453/solr/core/src/java/org/apache/solr/schema/BinaryField.java
index 0223ed51..77e1a1ca 100644
--- a/lucene/dev/branches/lucene3453/solr/core/src/java/org/apache/solr/schema/BinaryField.java
+++ b/lucene/dev/branches/lucene3453/solr/core/src/java/org/apache/solr/schema/BinaryField.java
@@ -81,7 +81,7 @@ public IndexableField createField(SchemaField field, Object val, float boost) {
       len = buf.length;
     }
 
-    Field f = new org.apache.lucene.document.BinaryField(field.getName(), buf, offset, len);
+    Field f = new org.apache.lucene.document.StoredField(field.getName(), buf, offset, len);
     f.setBoost(boost);
     return f;
   }
diff --git a/lucene/dev/branches/lucene3453/solr/core/src/java/org/apache/solr/schema/TrieField.java b/lucene/dev/branches/lucene3453/solr/core/src/java/org/apache/solr/schema/TrieField.java
index 973767d3..77734982 100644
--- a/lucene/dev/branches/lucene3453/solr/core/src/java/org/apache/solr/schema/TrieField.java
+++ b/lucene/dev/branches/lucene3453/solr/core/src/java/org/apache/solr/schema/TrieField.java
@@ -104,9 +104,8 @@ protected void init(IndexSchema schema, Map<String, String> args) {
 
   @Override
   public Object toObject(IndexableField f) {
-    if (f.fieldType().numericType() != null) {
       final Number val = f.numericValue();
-      if (val==null) return badFieldString(f);
+    if (val != null) {
       return (type == TrieTypes.DATE) ? new Date(val.longValue()) : val;
     } else {
       // the following code is "deprecated" and only to support pre-3.2 indexes using the old BinaryField encoding:
@@ -405,10 +404,8 @@ public Object toObject(SchemaField sf, BytesRef term) {
   @Override
   public String storedToIndexed(IndexableField f) {
     final BytesRef bytes = new BytesRef(NumericUtils.BUF_SIZE_LONG);
-    if (f instanceof org.apache.lucene.document.NumericField) {
-      final Number val = ((org.apache.lucene.document.NumericField) f).numericValue();
-      if (val==null)
-        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Invalid field contents: "+f.name());
+    final Number val = f.numericValue();
+    if (val != null) {
       switch (type) {
         case INTEGER:
           NumericUtils.intToPrefixCoded(val.intValue(), 0, bytes);
diff --git a/lucene/dev/branches/lucene3453/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java b/lucene/dev/branches/lucene3453/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
index 2ecf57e3..ff2fdca8 100644
--- a/lucene/dev/branches/lucene3453/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
+++ b/lucene/dev/branches/lucene3453/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
@@ -23,7 +23,7 @@
 import java.util.*;
 import java.util.concurrent.atomic.AtomicLong;
 
-import org.apache.lucene.document.BinaryField;
+import org.apache.lucene.document.StoredField;
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.FieldType;
@@ -418,7 +418,7 @@ public Status needsField(FieldInfo fieldInfo) {
 
     @Override
     public void binaryField(FieldInfo fieldInfo, byte[] value, int offset, int length) throws IOException {
-      doc.add(new BinaryField(fieldInfo.name, value));
+      doc.add(new StoredField(fieldInfo.name, value));
     }
 
     @Override
