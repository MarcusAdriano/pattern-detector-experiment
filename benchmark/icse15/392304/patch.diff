diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/CallableStatement.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/CallableStatement.java
index bc1669e1..e5e1c94d 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/CallableStatement.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/CallableStatement.java
@@ -264,19 +264,10 @@ private void registerOutParameterX(int parameterIndex, int jdbcType, int scale)
     }
 
     public void registerOutParameter(int parameterIndex, int jdbcType, String typeName) throws SQLException {
-        try
-        {
-            synchronized (connection_) {
                 if (agent_.loggingEnabled()) {
                     agent_.logWriter_.traceEntry(this, "registerOutParameter", parameterIndex, jdbcType, typeName);
                 }
-                super.checkForClosedStatement();
-            }
-        }
-        catch ( SqlException se )
-        {
-            throw se.getSQLException();
-        }
+        throw jdbcMethodNotImplemented();
     }
 
     public boolean wasNull() throws SQLException {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/callable.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/callable.java
index c68940ac..1ae82cd1 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/callable.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/callable.java
@@ -109,6 +109,30 @@ public static void main (String args[])
 			cs.close();
 			// stmt.execute("DROP FUNCTION method4");
 
+			// DERBY-1184: User-defined output parameter not supported:
+			if (!TestUtil.isJCCFramework())
+			{
+				cs = conn.prepareCall("? = call method4()");
+				try
+				{
+					cs.registerOutParameter (1, java.sql.Types.INTEGER,
+							"user-def");
+					System.out.println("DERBY-1184 FAIL: Expected exception");
+				}
+				catch (SQLException expectedException)
+				{
+					if (! "0AX01".equals(expectedException.getSQLState()))
+					{
+						System.out.println("DERBY-1184: Caught UNexpected: " +
+							expectedException.getMessage());
+						System.out.println("DERBY-1184: SQLState: " +
+							expectedException.getSQLState() + ", errorCode: " +
+							expectedException.getErrorCode());
+					}
+				}
+				cs.close();
+			}
+
 			// different parameter types, also method overload
 			stmt.execute("CREATE PROCEDURE method4P(" +
 					"IN P1 SMALLINT, IN P2 INT, IN P3 BIGINT, IN P4 REAL, " +
