diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Col.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Col.java
index 75baf3b4..e69de29b 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Col.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Col.java
@@ -1,23 +0,0 @@
-package org.apache.cassandra.cql.driver;
-
-public class Col<N, V>
-{
-    public final N name;
-    public final V value;
-    
-    public Col(N name, V value)
-    {
-        this.name = name;
-        this.value = value;
-    }
-    
-    public N getName()
-    {
-        return name;
-    }
-    
-    public V getValue()
-    {
-        return value;
-    }
-}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/ColumnDecoder.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/ColumnDecoder.java
index 519cbb85..e69de29b 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/ColumnDecoder.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/ColumnDecoder.java
@@ -1,143 +0,0 @@
-package org.apache.cassandra.cql.driver;
-
-import org.apache.cassandra.config.ConfigurationException;
-import org.apache.cassandra.db.marshal.AbstractType;
-import org.apache.cassandra.db.marshal.AsciiType;
-import org.apache.cassandra.db.marshal.BytesType;
-import org.apache.cassandra.db.marshal.IntegerType;
-import org.apache.cassandra.db.marshal.LexicalUUIDType;
-import org.apache.cassandra.db.marshal.LongType;
-import org.apache.cassandra.db.marshal.TimeUUIDType;
-import org.apache.cassandra.db.marshal.UTF8Type;
-import org.apache.cassandra.thrift.CfDef;
-import org.apache.cassandra.thrift.KsDef;
-import org.apache.cassandra.utils.ByteBufferUtil;
-import org.apache.cassandra.utils.FBUtilities;
-import org.apache.cassandra.utils.UUIDGen;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.io.UnsupportedEncodingException;
-import java.math.BigInteger;
-import java.nio.ByteBuffer;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-/** Decodes columns from bytes into instances of their respective expected types. */
-public class ColumnDecoder 
-{
-    private static final Logger logger = LoggerFactory.getLogger(ColumnDecoder.class);
-    private static final String MapFormatString = "%s.%s.%s";
-    
-    // basically denotes column or value.
-    enum Specifier
-    {
-        Comparator,
-        Validator
-    }
-    
-    private Map<String, CfDef> cfDefs = new HashMap<String, CfDef>();
-    
-    // cache the comparators for efficiency.
-    private Map<String, AbstractType> comparators = new HashMap<String, AbstractType>();
-    
-    /** is specific per set of keyspace definitions. */
-    public ColumnDecoder(List<KsDef> defs)
-    {
-        for (KsDef ks : defs) 
-            for (CfDef cf : ks.getCf_defs())
-                cfDefs.put(String.format("%s.%s", ks.getName(), cf.getName()), cf);
-    }
-
-    /**
-     * @param keyspace ALWAYS specify
-     * @param columnFamily ALWAYS specify
-     * @param specifier ALWAYS specify
-     * @param def avoids additional map lookup if specified. null is ok though.
-     * @return
-     */
-    private AbstractType getComparator(String keyspace, String columnFamily, Specifier specifier, CfDef def) 
-    {
-        // check cache first.
-        String key = String.format(MapFormatString, keyspace, columnFamily, specifier.name());
-        AbstractType comparator = comparators.get(key);
-
-        // make and put in cache.
-        if (comparator == null) 
-        {
-            if (def == null)
-                def = cfDefs.get(String.format("%s.%s", keyspace, columnFamily));
-            try 
-            {
-                switch (specifier)
-                {
-                    case Validator:
-                        comparator = FBUtilities.getComparator(def.getDefault_validation_class());
-                        break;
-                    case Comparator:
-                    default:
-                        comparator = FBUtilities.getComparator(def.getComparator_type());
-                        break;
-                }
-                comparators.put(key, comparator);
-            }
-            catch (ConfigurationException ex)
-            {
-                throw new RuntimeException(ex);
-            }
-        }
-        return comparator;
-    }
-
-    /**
-     * uses the AbstractType to map a column name to a string.  Relies on AT.fromString() and AT.getString()
-     * @param keyspace
-     * @param columnFamily
-     * @param name
-     * @return
-     */
-    public String colNameAsString(String keyspace, String columnFamily, String name) 
-    {
-        AbstractType comparator = getComparator(keyspace, columnFamily, Specifier.Comparator, null);
-        ByteBuffer bb = comparator.fromString(name);
-        return comparator.getString(bb);
-    }
-
-    /**
-     * uses the AbstractType to map a column name to a string.
-     * @param keyspace
-     * @param columnFamily
-     * @param name
-     * @return
-     */
-    public String colNameAsString(String keyspace, String columnFamily, byte[] name) 
-    {
-        AbstractType comparator = getComparator(keyspace, columnFamily, Specifier.Comparator, null);
-        return comparator.getString(ByteBuffer.wrap(name));
-    }
-
-    /**
-     * converts a column value to a string.
-     * @param value
-     * @return
-     */
-    public static String colValueAsString(Object value) {
-        if (value instanceof String)
-            return (String)value;
-        else if (value instanceof byte[])
-            return ByteBufferUtil.bytesToHex(ByteBuffer.wrap((byte[])value));
-        else
-            return value.toString();
-    }
-    
-    /** constructs a typed column */
-    public Col makeCol(String keyspace, String columnFamily, byte[] name, byte[] value)
-    {
-        CfDef cfDef = cfDefs.get(String.format("%s.%s", keyspace, columnFamily));
-        AbstractType comparator = getComparator(keyspace, columnFamily, Specifier.Comparator, cfDef);
-        AbstractType validator = getComparator(keyspace, columnFamily, Specifier.Validator, null);
-        // todo: generate less garbage.
-        return new Col(comparator.compose(ByteBuffer.wrap(name)), validator.compose(ByteBuffer.wrap(value)));
-    }
-}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Connection.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Connection.java
index 61b70dad..e69de29b 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Connection.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Connection.java
@@ -1,171 +0,0 @@
-/*
- * 
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * 
- *   http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- * 
- */
-
-package org.apache.cassandra.cql.driver;
-
-import java.util.HashMap;
-import java.util.Map;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-import org.apache.cassandra.thrift.AuthenticationException;
-import org.apache.cassandra.thrift.AuthenticationRequest;
-import org.apache.cassandra.thrift.AuthorizationException;
-import org.apache.cassandra.thrift.Cassandra;
-import org.apache.cassandra.thrift.Compression;
-import org.apache.cassandra.thrift.CqlResult;
-import org.apache.cassandra.thrift.InvalidRequestException;
-import org.apache.cassandra.thrift.TimedOutException;
-import org.apache.cassandra.thrift.UnavailableException;
-import org.apache.thrift.TException;
-import org.apache.thrift.protocol.TBinaryProtocol;
-import org.apache.thrift.protocol.TProtocol;
-import org.apache.thrift.transport.TFramedTransport;
-import org.apache.thrift.transport.TSocket;
-import org.apache.thrift.transport.TTransport;
-import org.apache.thrift.transport.TTransportException;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/** CQL connection object. */
-public class Connection
-{
-    private static final Pattern KeyspacePattern = Pattern.compile("USE (\\w+);?", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
-    private static final Pattern SelectPattern = Pattern.compile("SELECT\\s+.+\\s+FROM\\s+(\\w+).*", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
-    
-    public static Compression defaultCompression = Compression.GZIP;
-    public final String hostName;
-    public final int portNo;
-    
-    private static final Logger logger = LoggerFactory.getLogger(Connection.class);
-    protected long timeOfLastFailure = 0;
-    protected int numFailures = 0;
-    private Cassandra.Client client;
-    private TTransport transport;
-    
-    // todo: encapsulate.
-    public String curKeyspace;
-    public String curColumnFamily;
-    public ColumnDecoder decoder;
-    
-    /**
-     * Create a new <code>Connection</code> instance.
-     * 
-     * @param hostName hostname or IP address of the remote host
-     * @param portNo TCP port number
-     * @throws TTransportException if unable to connect
-     */
-    public Connection(String hostName, int portNo) throws TTransportException
-    {
-        this.hostName = hostName;
-        this.portNo = portNo;
-        TSocket socket = new TSocket(hostName, portNo);
-        transport = new TFramedTransport(socket);
-        TProtocol protocol = new TBinaryProtocol(transport);
-        client = new Cassandra.Client(protocol);
-        socket.open();
-        
-        logger.info("Connected to {}:{}", hostName, portNo);
-    }
-    
-
-    /**
-     * Create a new <code>Connection</code> instance.
-     * 
-     * @param hostName hostname or IP address of the remote host
-     * @param portNo TCP port number
-     * @throws AuthorizationException if authorization fails
-     * @throws AuthenticationException for authentication failures
-     * @throws TException on errors encountered issuing the request(s) 
-     */
-    public Connection(String hostName, int portNo, String userName, String password)
-    throws AuthenticationException, AuthorizationException, TException
-    {
-        this(hostName, portNo);
-        
-        Map<String, String> credentials = new HashMap<String, String>();
-        AuthenticationRequest areq = new AuthenticationRequest(credentials);
-        client.login(areq) ;
-    }
-    
-    /**
-     * Execute a CQL query.
-     * 
-     * @param queryStr a CQL query string
-     * @return the query results encoded as a CqlResult struct
-     * @throws InvalidRequestException on poorly constructed or illegal requests
-     * @throws UnavailableException when not all required replicas could be created/read
-     * @throws TimedOutException when a cluster operation timed out
-     * @throws TException
-     */
-    public CqlResult execute(String queryStr)
-    throws InvalidRequestException, UnavailableException, TimedOutException, TException
-    {
-        return execute(queryStr, defaultCompression);
-    }
-    
-    /**
-     * Execute a CQL query.
-     * 
-     * @param queryStr a CQL query string
-     * @param compress query compression to use
-     * @return the query results encoded as a CqlResult struct
-     * @throws InvalidRequestException on poorly constructed or illegal requests
-     * @throws UnavailableException when not all required replicas could be created/read
-     * @throws TimedOutException when a cluster operation timed out
-     * @throws TException
-     */
-    public CqlResult execute(String queryStr, Compression compress)
-    throws InvalidRequestException, UnavailableException, TimedOutException, TException
-    {
-        if (decoder == null)
-            decoder = new ColumnDecoder(client.describe_keyspaces());
-        
-        Matcher isKeyspace = KeyspacePattern.matcher(queryStr);
-        if (isKeyspace.matches())
-            curKeyspace = isKeyspace.group(1);
-        Matcher isSelect = SelectPattern.matcher(queryStr);
-        if (isSelect.matches())
-            curColumnFamily = isSelect.group(1);
-        try
-        {
-            return client.execute_cql_query(Utils.compressQuery(queryStr, compress), compress);
-        }
-        catch (TException error)
-        {
-            numFailures++;
-            timeOfLastFailure = System.currentTimeMillis();
-            throw error;
-        }
-    }
-    
-    /** Shutdown the remote connection */
-    public void close()
-    {
-        transport.close();
-    }
-    
-    /** Connection state. */
-    public boolean isOpen()
-    {
-        return transport.isOpen();
-    }
-}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/ConnectionPool.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/ConnectionPool.java
index 16df0963..e69de29b 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/ConnectionPool.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/ConnectionPool.java
@@ -1,176 +0,0 @@
-/*
- * 
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * 
- *   http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- * 
- */
-
-package org.apache.cassandra.cql.driver;
-
-import java.util.Date;
-import java.util.Timer;
-import java.util.TimerTask;
-import java.util.concurrent.ConcurrentLinkedQueue;
-
-import org.apache.thrift.transport.TTransportException;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-/**
- * Simple connection-caching pool implementation.
- * 
- * <p>A <code>ConnectionPool</code> provides the simplest possible connection
- * pooling, lazily creating new connections if needed as
- * <code>borrowClient</code> is called.  Connections are re-added to the pool
- * by <code>returnConnection</code>, unless doing so would exceed the maximum
- * pool size.</p>
- * 
- * <p>Example usage:</p>
- * 
- * <code>
- * IConnectionPool pool = new ConnectionPool("localhost", 9160);<br />
- * Connection conn = pool.borrowConnection();<br />
- * conn.execute(...);<br />
- * pool.returnConnection(pool);<br />
- * </code>
- */
-public class ConnectionPool implements IConnectionPool
-{
-    public static final int DEFAULT_MAX_CONNECTIONS = 25;
-    public static final int DEFAULT_PORT = 9160;
-    public static final int DEFAULT_MAX_IDLE = 5;
-    public static final long DEFAULT_EVICTION_DELAY_MILLIS = 10000; // 10 seconds
-    private static final Logger logger = LoggerFactory.getLogger(ConnectionPool.class);
-    
-    private ConcurrentLinkedQueue<Connection> connections = new ConcurrentLinkedQueue<Connection>();
-    private Timer eviction;
-    private String hostName;
-    private int portNo;
-    private int maxConns, maxIdle;
-    
-    /**
-     * Create a new <code>ConnectionPool</code> for a given hostname.
-     * 
-     * @param hostName hostname or IP address to open connections to
-     * @throws TTransportException if unable to connect
-     */
-    public ConnectionPool(String hostName) throws TTransportException
-    {
-        this(hostName, DEFAULT_PORT, DEFAULT_MAX_CONNECTIONS, DEFAULT_MAX_IDLE, DEFAULT_EVICTION_DELAY_MILLIS);
-    }
-    
-    /**
-     * Create a new <code>ConnectionPool</code> for the given hostname and
-     * port number.
-     * 
-     * @param hostName hostname or IP address to open connections to
-     * @param portNo port number to connect to
-     * @throws TTransportException if unable to connect
-     */
-    public ConnectionPool(String hostName, int portNo) throws TTransportException
-    {
-        this(hostName, portNo, DEFAULT_MAX_CONNECTIONS, DEFAULT_MAX_IDLE, DEFAULT_EVICTION_DELAY_MILLIS);
-    }
-    
-    /**
-     * Create a new <code>ConnectionPool</code>.
-     * 
-     * @param hostName hostname or IP address to open connections to
-     * @param portNo portNo port number to connect to
-     * @param maxConns the maximum number of connections to save in the pool
-     * @param maxIdle the max number of connections allowed in the pool after an eviction
-     * @param evictionDelay the number milliseconds between eviction runs
-     * @throws TTransportException if unable to connect
-     */
-    public ConnectionPool(String hostName, int portNo, int maxConns, int maxIdle, long evictionDelay)
-    throws TTransportException
-    {
-        this.hostName = hostName;
-        this.portNo = portNo;
-        this.maxConns = maxConns;
-        this.maxIdle = maxIdle;
-        
-        eviction = new Timer("EVICTION-THREAD", true);
-        eviction.schedule(new EvictionTask(), new Date(), evictionDelay);
-        
-        connections.add(new Connection(hostName, portNo));
-    }
-    
-    /**
-     * Check a <code>Connection</code> instance out from the pool, creating a
-     * new one if the pool is exhausted.
-     */
-    public Connection borrowConnection()
-    {
-        Connection conn = null;
-        
-        if ((conn = connections.poll()) == null)
-        {
-            try
-            {
-                conn = new Connection(hostName, portNo);
-            }
-            catch (TTransportException error)
-            {
-                logger.error(String.format("Error connecting to %s:%s", hostName, portNo), error);
-            }
-        }
-        
-        return conn;
-    }
-    
-    /**
-     * Returns an <code>Connection</code> instance to the pool.  If the pool
-     * already contains the maximum number of allowed connections, then the
-     * instance's <code>close</code> method is called and it is discarded.
-     */
-    public void returnConnection(Connection connection)
-    {
-        if (connections.size() >= maxConns)
-        {
-            if (connection.isOpen()) connection.close();
-            logger.warn("Max pool size reached; Connection discarded.");
-            return;
-        }
-        
-        if (!connection.isOpen())
-        {
-            logger.warn("Stubbornly refusing to return a closed connection to the pool (discarded instead).");
-            return;
-        }
-        
-        connections.add(connection);
-    }
-    
-    private class EvictionTask extends TimerTask
-    {
-        public void run()
-        {
-            int count = 0;
-            
-            while (connections.size() > maxIdle)
-            {
-                Connection conn = connections.poll();
-                if (conn.isOpen()) conn.close();
-                count++;
-            }
-            
-            if (count > 0)
-                logger.debug("Eviction run complete: {} connections evicted.", count);
-        }
-    }
-}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/IConnectionPool.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/IConnectionPool.java
index fde91fab..e69de29b 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/IConnectionPool.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/IConnectionPool.java
@@ -1,38 +0,0 @@
-/*
- * 
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * 
- *   http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- * 
- */
-
-package org.apache.cassandra.cql.driver;
-
-public interface IConnectionPool
-{
-    /**
-     * Check a <code>Connection</code> instance out from the pool, creating a
-     * new one if the pool is exhausted.
-     */
-    public Connection borrowConnection();
-    
-    /**
-     * Returns an <code>Connection</code> instance to the pool.  If the pool
-     * already contains the maximum number of allowed connections, then the
-     * instance's <code>close</code> method is called and it is discarded.
-     */
-    public void returnConnection(Connection connection);
-}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Results.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Results.java
index 4d22711d..e69de29b 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Results.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Results.java
@@ -1,21 +0,0 @@
-package org.apache.cassandra.cql.driver;
-
-
-public class Results
-{
-    private final ColumnDecoder decoder;
-    private final String keyspace;
-    private final String columnFamily;
-    
-    public Results(ColumnDecoder decoder, String keyspace, String columnFamily) 
-    {
-        this.decoder = decoder;
-        this.keyspace = keyspace;
-        this.columnFamily = columnFamily;
-    }
-    
-    public Col makeCol(byte[] name, byte[] value) {
-        return decoder.makeCol(keyspace, columnFamily, name, value);
-    }
-    
-}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Utils.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Utils.java
index ce001325..e69de29b 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Utils.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/Utils.java
@@ -1,58 +0,0 @@
-/*
- * 
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * 
- *   http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- * 
- */
-
-package org.apache.cassandra.cql.driver;
-
-import java.io.ByteArrayOutputStream;
-import java.nio.ByteBuffer;
-import java.util.zip.Deflater;
-
-import org.apache.cassandra.thrift.Compression;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-public class Utils
-{
-    private static final Logger logger = LoggerFactory.getLogger(Utils.class);
-    
-    public static ByteBuffer compressQuery(String queryStr, Compression compression)
-    {
-        byte[] data = queryStr.getBytes();
-        Deflater compressor = new Deflater();
-        compressor.setInput(data);
-        compressor.finish();
-        
-        ByteArrayOutputStream byteArray = new ByteArrayOutputStream();
-        byte[] buffer = new byte[1024];
-        
-        while (!compressor.finished())
-        {
-            int size = compressor.deflate(buffer);
-            byteArray.write(buffer, 0, size);
-        }
-        
-        logger.trace("Compressed query statement {} bytes in length to {} bytes",
-                     data.length,
-                     byteArray.size());
-        
-        return ByteBuffer.wrap(byteArray.toByteArray());
-    }
-}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraConnection.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraConnection.java
index 091afdf1..e69de29b 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraConnection.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraConnection.java
@@ -1,653 +0,0 @@
-/*
- * 
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * 
- *   http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- * 
- */
-package org.apache.cassandra.cql.driver.jdbc;
-
-import java.sql.Array;
-import java.sql.Blob;
-import java.sql.CallableStatement;
-import java.sql.Clob;
-import java.sql.Connection;
-import java.sql.DatabaseMetaData;
-import java.sql.NClob;
-import java.sql.PreparedStatement;
-import java.sql.SQLClientInfoException;
-import java.sql.SQLException;
-import java.sql.SQLWarning;
-import java.sql.SQLXML;
-import java.sql.Savepoint;
-import java.sql.Statement;
-import java.sql.Struct;
-import java.util.Map;
-import java.util.Properties;
-
-import org.apache.cassandra.thrift.AuthenticationException;
-import org.apache.cassandra.thrift.AuthorizationException;
-import org.apache.cassandra.thrift.InvalidRequestException;
-import org.apache.cassandra.thrift.TimedOutException;
-import org.apache.cassandra.thrift.UnavailableException;
-import org.apache.thrift.TException;
-import org.apache.thrift.transport.TTransportException;
-
-/**
- * Implementation class for {@link Connection}.
- */
-public class CassandraConnection implements Connection
-{
-    
-    /** The cassandra con. */
-    private org.apache.cassandra.cql.driver.Connection cassandraCon;
-    
-    /**
-     * Instantiates a new cassandra connection.
-     *
-     * @param url the url
-     */
-    public CassandraConnection(String url)
-    {
-        try
-        {
-            final int splitIndex = url.indexOf('@');
-            final String usr_pwd = url.substring(0, splitIndex);
-            final String host_port = url.substring(splitIndex + 1);
-            final int usr_colonIdx = usr_pwd.lastIndexOf(':');
-            final int usr_backwardIdx = usr_pwd.indexOf('/');
-            final String userName = usr_pwd.substring(usr_colonIdx + 1, usr_backwardIdx);
-            final String password = usr_pwd.substring(usr_backwardIdx + 1);
-            final int host_colonIdx = host_port.indexOf(':');
-            final String hostName = host_port.substring(0, host_colonIdx);
-            final int host_backwardIdx = host_port.indexOf('/');
-            final String port = host_port.substring(host_colonIdx + 1, host_backwardIdx);
-            final String keyspace = host_port.substring(host_backwardIdx + 1);
-            cassandraCon = new org.apache.cassandra.cql.driver.Connection(hostName, Integer.valueOf(port), userName,
-                                                                                                                             password);
-            final String useQ = "USE " + keyspace;
-            cassandraCon.execute(useQ);
-        }
-        catch (NumberFormatException e)
-        {
-            throw new DriverResolverException(e.getMessage());
-        }
-        catch (TTransportException e)
-        {
-            throw new DriverResolverException(e.getMessage());
-        }
-        catch (AuthenticationException e)
-        {
-            throw new DriverResolverException(e.getMessage());
-        }
-        catch (AuthorizationException e)
-        {
-            throw new DriverResolverException(e.getMessage());
-        }
-        catch (TException e)
-        {
-            throw new DriverResolverException(e.getMessage());
-        }
-        catch (InvalidRequestException e)
-        {
-            throw new DriverResolverException(e.getMessage());
-        }
-        catch (UnavailableException e)
-        {
-            throw new DriverResolverException(e.getMessage());
-        }
-        catch (TimedOutException e)
-        {
-            throw new DriverResolverException(e.getMessage());
-        }
-
-    }
-    
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public boolean isWrapperFor(Class<?> arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @param <T>
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public <T> T unwrap(Class<T> arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-
-    /**
-     * @throws SQLException
-     */
-    public void clearWarnings() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * On close of connection.
-     *
-     * @throws SQLException the sQL exception
-     */
-    public void close() throws SQLException
-    {
-        if (cassandraCon != null)
-        {
-            cassandraCon.close();
-        }
-    }
-
-
-    /**
-     * @throws SQLException
-     */
-    public void commit() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @return
-     * @throws SQLException
-     */
-    public Array createArrayOf(String arg0, Object[] arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public Blob createBlob() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public Clob createClob() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public NClob createNClob() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public SQLXML createSQLXML() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public Statement createStatement() throws SQLException
-    {
-        return new CassandraStatement(this.cassandraCon);
-    }
-
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @return
-     * @throws SQLException
-     */
-    public Statement createStatement(int arg0, int arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @return
-     * @throws SQLException
-     */
-    public Statement createStatement(int arg0, int arg1, int arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @return
-     * @throws SQLException
-     */
-    public Struct createStruct(String arg0, Object[] arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public boolean getAutoCommit() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public String getCatalog() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public Properties getClientInfo() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public String getClientInfo(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public int getHoldability() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public DatabaseMetaData getMetaData() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public int getTransactionIsolation() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public Map<String, Class<?>> getTypeMap() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public SQLWarning getWarnings() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public boolean isClosed() throws SQLException
-    {
-        return false;
-    }
-
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public boolean isReadOnly() throws SQLException
-    {
-        return false;
-    }
-
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public boolean isValid(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public String nativeSQL(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public CallableStatement prepareCall(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @return
-     * @throws SQLException
-     */
-    public CallableStatement prepareCall(String arg0, int arg1, int arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @param arg3
-     * @return
-     * @throws SQLException
-     */
-    public CallableStatement prepareCall(String arg0, int arg1, int arg2, int arg3) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @param sql
-     * @return
-     * @throws SQLException
-     */
-    public PreparedStatement prepareStatement(String sql) throws SQLException
-    {
-        return new CassandraStatement(this.cassandraCon, sql);
-    }
-
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @return
-     * @throws SQLException
-     */
-    public PreparedStatement prepareStatement(String arg0, int arg1) throws SQLException
-    {
-        return null;
-    }
-
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @return
-     * @throws SQLException
-     */
-    public PreparedStatement prepareStatement(String arg0, int[] arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @return
-     * @throws SQLException
-     */
-    public PreparedStatement prepareStatement(String arg0, String[] arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @return
-     * @throws SQLException
-     */
-    public PreparedStatement prepareStatement(String arg0, int arg1, int arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @param arg3
-     * @return
-     * @throws SQLException
-     */
-    public PreparedStatement prepareStatement(String arg0, int arg1, int arg2, int arg3) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @param arg0
-     * @throws SQLException
-     */
-    public void releaseSavepoint(Savepoint arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-
-    /**
-     * @throws SQLException
-     */ 
-    public void rollback() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-
-    /**
-     * @param arg0
-     * @throws SQLException
-     */
-    public void rollback(Savepoint arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-
-    /**
-     * @param arg0
-     * @throws SQLException
-     */
-    public void setAutoCommit(boolean arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-
-    /**
-     * @param arg0
-     * @throws SQLException
-     */
-    public void setCatalog(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @param arg0
-     * @throws SQLClientInfoException
-     */
-    public void setClientInfo(Properties arg0) throws SQLClientInfoException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLClientInfoException
-     */
-    public void setClientInfo(String arg0, String arg1) throws SQLClientInfoException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-
-    /**
-     * @param arg0
-     * @throws SQLException
-     */
-    public void setHoldability(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-    
-
-    /**
-     * @param arg0
-     * @throws SQLException
-     */
-    public void setReadOnly(boolean arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-    
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public Savepoint setSavepoint() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-    
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public Savepoint setSavepoint(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-    
-
-    /**
-     * @param arg0
-     * @throws SQLException
-     */
-    public void setTransactionIsolation(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-    
-
-    /**
-     * @param arg0
-     * @throws SQLException
-     */
-    public void setTypeMap(Map<String, Class<?>> arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraDriver.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraDriver.java
index 2023cc65..e69de29b 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraDriver.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraDriver.java
@@ -1,134 +0,0 @@
-/*
- * 
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * 
- *   http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- * 
- */
-package org.apache.cassandra.cql.driver.jdbc;
-
-import java.sql.Connection;
-import java.sql.Driver;
-import java.sql.DriverManager;
-import java.sql.DriverPropertyInfo;
-import java.sql.SQLException;
-import java.util.Properties;
-
-/**
-  * The Class CassandraDriver.
-  */
- public class CassandraDriver implements Driver
-{
-    
-    /** The Constant MAJOR_VERSION. */
-    private static final int MAJOR_VERSION = 1;
-    
-    /** The Constant MINOR_VERSION. */
-    private static final int MINOR_VERSION = 0;
-
-    /** The ACCEPT s_ url. */
-    private static String ACCEPTS_URL = "jdbc:cassandra";
-    
-//    private static final Logger logger = LoggerFactory.getLogger(CassandraDriver.class); 
-
-    static
-    {
-        // Register the CassandraDriver with DriverManager
-        try
-        {
-            CassandraDriver driverInst = new CassandraDriver();
-            DriverManager.registerDriver(driverInst);
-        }
-        catch (SQLException e)
-        {
-            throw new DriverResolverException(e.getMessage());
-        }
-    }
-
-    
-    /**
-     * Method to validate whether provided connection url matches with pattern or not.
-     *
-     * @param url  connection url.
-     * @return true, if successful
-     * @throws SQLException the sQL exception
-     */
-    public boolean acceptsURL(String url) throws SQLException
-    {
-        return url.startsWith(ACCEPTS_URL);
-    }
-
-    /**
-     * Method to return connection instance for given connection url and connection props.
-     *
-     * @param url               connection url.
-     * @param props          connection properties.
-     * @return connection connection instance.
-     * @throws SQLException the sQL exception
-     */
-    public Connection connect(String url, Properties props) throws SQLException
-    {
-        if (acceptsURL(url))
-        {
-            return new CassandraConnection(url);
-        }
-        else
-        {
-            throw new InvalidUrlException("Invalid connection url:" + url + ". should start with jdbc:cassandra");
-        }
-    }
-
-    /**
-     * Returns default major version.
-     * @return MAJOR_VERSION major version.
-     */
-    public int getMajorVersion()
-    {
-        return MAJOR_VERSION;
-    }
-
-    /**
-     * Returns default minor version.
-     * @return MINOR_VERSION minor version.
-     */
-    public int getMinorVersion()
-    {
-        return MINOR_VERSION;
-    }
-
-    /**
-     * Returns default driver property info object.
-     *
-     * @param arg0 the arg0
-     * @param arg1 the arg1
-     * @return driverPropertyInfo
-     * @throws SQLException the sQL exception
-     */
-    public DriverPropertyInfo[] getPropertyInfo(String arg0, Properties arg1) throws SQLException
-    {
-        return new DriverPropertyInfo[0];
-    }
-
-   /**
-    * Returns true, if it is jdbc compliant.    
-    * @return value true, if it is jdbc compliant.
-    */
-    public boolean jdbcCompliant()
-    {
-        return false;
-    }
-
-}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraResultSet.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraResultSet.java
index e160f6ea..e69de29b 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraResultSet.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraResultSet.java
@@ -1,1999 +0,0 @@
-/*
- * 
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * 
- *   http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- * 
- */
-package org.apache.cassandra.cql.driver.jdbc;
-
-import java.io.InputStream;
-import java.io.Reader;
-import java.math.BigDecimal;
-import java.math.BigInteger;
-import java.net.URL;
-import java.sql.Array;
-import java.sql.Blob;
-import java.sql.Clob;
-import java.sql.Date;
-import java.sql.NClob;
-import java.sql.Ref;
-import java.sql.ResultSet;
-import java.sql.ResultSetMetaData;
-import java.sql.RowId;
-import java.sql.SQLException;
-import java.sql.SQLWarning;
-import java.sql.SQLXML;
-import java.sql.Statement;
-import java.sql.Time;
-import java.sql.Timestamp;
-import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.WeakHashMap;
-
-import org.apache.cassandra.cql.driver.Col;
-import org.apache.cassandra.cql.driver.ColumnDecoder;
-import org.apache.cassandra.thrift.Column;
-import org.apache.cassandra.thrift.CqlResult;
-import org.apache.cassandra.thrift.CqlRow;
-
-/**
- * The Class CassandraResultSet.
- */
-class CassandraResultSet implements ResultSet
-{
-    
-    /** The r set. */
-    private final CqlResult rSet; 
-    
-    private final ColumnDecoder decoder;
-    private final String keyspace;
-    private final String columnFamily;
-    
-    /** The r set iter. */
-    private Iterator<CqlRow> rSetIter;
-    
-//    /** The row. */
-//    private CqlRow row;
-    
-    /** The values. */
-    private List<Col> values = new ArrayList<Col>();
-    
-    /** The value map. */
-    private Map<String, Object> valueMap = new WeakHashMap<String, Object>();
-
-    /**
-     * Instantiates a new cassandra result set.
-     *
-     * @param resultSet the result set
-     */
-    CassandraResultSet(CqlResult resultSet, ColumnDecoder decoder, String keyspace, String columnFamily)
-    {
-        this.rSet = resultSet;
-        this.decoder = decoder;
-        this.keyspace = keyspace;
-        this.columnFamily = columnFamily;
-        rSetIter = rSet.getRowsIterator();
-    }
-
-    /**
-     * @param iface
-     * @return
-     * @throws SQLException
-     */
-    public boolean isWrapperFor(Class<?> iface) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param <T>
-     * @param iface
-     * @return
-     * @throws SQLException
-     */
-    public <T> T unwrap(Class<T> iface) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public boolean absolute(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @throws SQLException
-     */
-    public void afterLast() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @throws SQLException
-     */
-    public void beforeFirst() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @throws SQLException
-     */
-    public void cancelRowUpdates() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @throws SQLException
-     */
-    public void clearWarnings() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @throws SQLException
-     */
-    public void close() throws SQLException
-    {
-        valueMap.clear();
-        values.clear();
-        valueMap = null;
-        values = null;
-    }
-
-    /**
-     * @throws SQLException
-     */
-    public void deleteRow() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public int findColumn(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public boolean first() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public Array getArray(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public Array getArray(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public InputStream getAsciiStream(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public InputStream getAsciiStream(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public BigDecimal getBigDecimal(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public BigDecimal getBigDecimal(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @return
-     * @throws SQLException
-     */
-    public BigDecimal getBigDecimal(int arg0, int arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @return
-     * @throws SQLException
-     */
-    public BigDecimal getBigDecimal(String arg0, int arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public InputStream getBinaryStream(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public InputStream getBinaryStream(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public Blob getBlob(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public Blob getBlob(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public boolean getBoolean(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public boolean getBoolean(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public byte getByte(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public byte getByte(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param index
-     * @return
-     * @throws SQLException
-     */
-    public byte[] getBytes(int index) throws SQLException
-    {
-        return values.get(index) != null ? (byte[])values.get(index).getValue() : null;
-    }
-
-    /**
-     * @param name
-     * @return
-     * @throws SQLException
-     */
-    public byte[] getBytes(String name) throws SQLException
-    {
-        String nameAsString = decoder.colNameAsString(keyspace, columnFamily, name);
-        return valueMap.get(nameAsString) != null ? (byte[])valueMap.get(nameAsString) : null;
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public Reader getCharacterStream(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public Reader getCharacterStream(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public Clob getClob(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public Clob getClob(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public int getConcurrency() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public String getCursorName() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public Date getDate(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public Date getDate(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @return
-     * @throws SQLException
-     */
-    public Date getDate(int arg0, Calendar arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @return
-     * @throws SQLException
-     */
-    public Date getDate(String arg0, Calendar arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public double getDouble(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public double getDouble(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public int getFetchDirection() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public int getFetchSize() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public float getFloat(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public float getFloat(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public int getHoldability() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param index
-     * @return
-     * @throws SQLException
-     */
-    public int getInt(int index) throws SQLException
-    {
-        return values.get(index) != null ? ((BigInteger)values.get(index).getValue()).intValue() : null;
-    }
-
-    /**
-     * @param name
-     * @return
-     * @throws SQLException
-     */
-    public int getInt(String name) throws SQLException
-    {
-        String nameAsString = decoder.colNameAsString(keyspace, columnFamily, name);
-        return valueMap.get(nameAsString) != null ? ((BigInteger)valueMap.get(nameAsString)).intValue() : null;
-    }
-
-    /**
-     * @param index
-     * @return
-     * @throws SQLException
-     */
-    public long getLong(int index) throws SQLException
-    {
-        return values.get(index) != null ? (Long)values.get(index).getValue() : null;
-    }
-
-    /**
-     * @param name
-     * @return
-     * @throws SQLException
-     */
-    public long getLong(String name) throws SQLException
-    {
-        String nameAsString = decoder.colNameAsString(keyspace, columnFamily, name);
-        return valueMap.get(nameAsString) != null ? (Long)valueMap.get(nameAsString) : null;
-    }
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public ResultSetMetaData getMetaData() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public Reader getNCharacterStream(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public Reader getNCharacterStream(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public NClob getNClob(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public NClob getNClob(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public String getNString(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public String getNString(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param index
-     * @return
-     * @throws SQLException
-     */
-    public Object getObject(int index) throws SQLException
-    {
-        return values.get(index) == null ? null : values.get(index).getValue();
-    }
-
-    /**
-     * @param name
-     * @return
-     * @throws SQLException
-     */
-    public Object getObject(String name) throws SQLException
-    {
-        String nameAsString = decoder.colNameAsString(keyspace, columnFamily, name);
-        return valueMap.get(nameAsString);
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @return
-     * @throws SQLException
-     */
-    public Object getObject(int arg0, Map<String, Class<?>> arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @return
-     * @throws SQLException
-     */
-    public Object getObject(String arg0, Map<String, Class<?>> arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public Ref getRef(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public Ref getRef(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public int getRow() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public RowId getRowId(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public RowId getRowId(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public SQLXML getSQLXML(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public SQLXML getSQLXML(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public short getShort(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public short getShort(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public Statement getStatement() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param index
-     * @return
-     * @throws SQLException
-     */
-    public String getString(int index) throws SQLException 
-    {
-        return values.get(index) != null ? ColumnDecoder.colValueAsString(values.get(index).getValue()) : null;
-    }
-
-    /**
-     * @param name
-     * @return
-     * @throws SQLException
-     */
-    public String getString(String name) throws SQLException
-    {
-        String nameAsString = this.decoder.colNameAsString(this.keyspace, this.columnFamily, name);
-        return valueMap.get(nameAsString) != null ? ColumnDecoder.colValueAsString(valueMap.get(nameAsString)) : null;
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public Time getTime(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public Time getTime(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @return
-     * @throws SQLException
-     */
-    public Time getTime(int arg0, Calendar arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @return
-     * @throws SQLException
-     */
-    public Time getTime(String arg0, Calendar arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public Timestamp getTimestamp(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public Timestamp getTimestamp(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @return
-     * @throws SQLException
-     */
-    public Timestamp getTimestamp(int arg0, Calendar arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @return
-     * @throws SQLException
-     */
-    public Timestamp getTimestamp(String arg0, Calendar arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public int getType() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public URL getURL(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public URL getURL(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public InputStream getUnicodeStream(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public InputStream getUnicodeStream(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public SQLWarning getWarnings() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @throws SQLException
-     */
-    public void insertRow() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public boolean isAfterLast() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public boolean isBeforeFirst() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public boolean isClosed() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public boolean isFirst() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public boolean isLast() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public boolean last() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @throws SQLException
-     */
-    public void moveToCurrentRow() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @throws SQLException
-     */
-    public void moveToInsertRow() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public synchronized boolean next() throws SQLException
-    {
-        if (!values.isEmpty() || !valueMap.isEmpty())
-        {
-            values.clear();
-            valueMap.clear();
-        }
-        if (rSetIter != null && rSetIter.hasNext())
-        {
-            CqlRow row = rSetIter.next();
-            List<Column> cols = row.getColumns();
-            for (Column col : cols)
-            {
-                byte[] name = col.getName();
-                byte[] value = col.getValue();
-                Col c = decoder.makeCol(keyspace, columnFamily, name, value);
-                values.add(c);
-                valueMap.put(decoder.colNameAsString(keyspace, columnFamily, name), c.getValue());
-            }
-            return !(values.isEmpty() && valueMap.isEmpty());
-        } 
-        else
-        {
-            return false;
-        }
-    }
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public boolean previous() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @throws SQLException
-     */
-    public void refreshRow() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public boolean relative(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public boolean rowDeleted() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public boolean rowInserted() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public boolean rowUpdated() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @throws SQLException
-     */
-    public void setFetchDirection(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @throws SQLException
-     */
-    public void setFetchSize(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateArray(int arg0, Array arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateArray(String arg0, Array arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateAsciiStream(int arg0, InputStream arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateAsciiStream(String arg0, InputStream arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @throws SQLException
-     */
-    public void updateAsciiStream(int arg0, InputStream arg1, int arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @throws SQLException
-     */
-    public void updateAsciiStream(String arg0, InputStream arg1, int arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @throws SQLException
-     */
-    public void updateAsciiStream(int arg0, InputStream arg1, long arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @throws SQLException
-     */
-    public void updateAsciiStream(String arg0, InputStream arg1, long arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateBigDecimal(int arg0, BigDecimal arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateBigDecimal(String arg0, BigDecimal arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateBinaryStream(int arg0, InputStream arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateBinaryStream(String arg0, InputStream arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @throws SQLException
-     */
-    public void updateBinaryStream(int arg0, InputStream arg1, int arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @throws SQLException
-     */
-    public void updateBinaryStream(String arg0, InputStream arg1, int arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @throws SQLException
-     */
-    public void updateBinaryStream(int arg0, InputStream arg1, long arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @throws SQLException
-     */
-    public void updateBinaryStream(String arg0, InputStream arg1, long arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateBlob(int arg0, Blob arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateBlob(String arg0, Blob arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateBlob(int arg0, InputStream arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateBlob(String arg0, InputStream arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @throws SQLException
-     */
-    public void updateBlob(int arg0, InputStream arg1, long arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @throws SQLException
-     */
-    public void updateBlob(String arg0, InputStream arg1, long arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateBoolean(int arg0, boolean arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateBoolean(String arg0, boolean arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateByte(int arg0, byte arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateByte(String arg0, byte arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateBytes(int arg0, byte[] arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateBytes(String arg0, byte[] arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateCharacterStream(int arg0, Reader arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateCharacterStream(String arg0, Reader arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @throws SQLException
-     */
-    public void updateCharacterStream(int arg0, Reader arg1, int arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @throws SQLException
-     */
-    public void updateCharacterStream(String arg0, Reader arg1, int arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @throws SQLException
-     */
-    public void updateCharacterStream(int arg0, Reader arg1, long arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @throws SQLException
-     */
-    public void updateCharacterStream(String arg0, Reader arg1, long arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateClob(int arg0, Clob arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateClob(String arg0, Clob arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateClob(int arg0, Reader arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateClob(String arg0, Reader arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @throws SQLException
-     */
-    public void updateClob(int arg0, Reader arg1, long arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @throws SQLException
-     */
-    public void updateClob(String arg0, Reader arg1, long arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateDate(int arg0, Date arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateDate(String arg0, Date arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateDouble(int arg0, double arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateDouble(String arg0, double arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateFloat(int arg0, float arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateFloat(String arg0, float arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateInt(int arg0, int arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateInt(String arg0, int arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateLong(int arg0, long arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateLong(String arg0, long arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateNCharacterStream(int arg0, Reader arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateNCharacterStream(String arg0, Reader arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @throws SQLException
-     */
-    public void updateNCharacterStream(int arg0, Reader arg1, long arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @throws SQLException
-     */
-    public void updateNCharacterStream(String arg0, Reader arg1, long arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateNClob(int arg0, NClob arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateNClob(String arg0, NClob arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateNClob(int arg0, Reader arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateNClob(String arg0, Reader arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @throws SQLException
-     */
-    public void updateNClob(int arg0, Reader arg1, long arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @throws SQLException
-     */
-    public void updateNClob(String arg0, Reader arg1, long arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateNString(int arg0, String arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateNString(String arg0, String arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @throws SQLException
-     */
-    public void updateNull(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @throws SQLException
-     */
-    public void updateNull(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateObject(int arg0, Object arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateObject(String arg0, Object arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @throws SQLException
-     */
-    public void updateObject(int arg0, Object arg1, int arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @param arg2
-     * @throws SQLException
-     */
-    public void updateObject(String arg0, Object arg1, int arg2) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateRef(int arg0, Ref arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateRef(String arg0, Ref arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @throws SQLException
-     */
-    public void updateRow() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateRowId(int arg0, RowId arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateRowId(String arg0, RowId arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateSQLXML(int arg0, SQLXML arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateSQLXML(String arg0, SQLXML arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateShort(int arg0, short arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateShort(String arg0, short arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateString(int arg0, String arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateString(String arg0, String arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateTime(int arg0, Time arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateTime(String arg0, Time arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateTimestamp(int arg0, Timestamp arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @param arg0
-     * @param arg1
-     * @throws SQLException
-     */
-    public void updateTimestamp(String arg0, Timestamp arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public boolean wasNull() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraStatement.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraStatement.java
index 4431da6b..e69de29b 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraStatement.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/CassandraStatement.java
@@ -1,1232 +0,0 @@
-/*
- * 
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * 
- *   http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- * 
- */
-package org.apache.cassandra.cql.driver.jdbc;
-
-import java.io.InputStream;
-import java.io.Reader;
-import java.math.BigDecimal;
-import java.net.URL;
-import java.sql.Array;
-import java.sql.Blob;
-import java.sql.Clob;
-import java.sql.Connection;
-import java.sql.Date;
-import java.sql.NClob;
-import java.sql.ParameterMetaData;
-import java.sql.PreparedStatement;
-import java.sql.Ref;
-import java.sql.ResultSet;
-import java.sql.ResultSetMetaData;
-import java.sql.RowId;
-import java.sql.SQLException;
-import java.sql.SQLWarning;
-import java.sql.SQLXML;
-import java.sql.Time;
-import java.sql.Timestamp;
-import java.util.Calendar;
-
-import org.apache.cassandra.cql.driver.Results;
-import org.apache.cassandra.thrift.CqlResult;
-import org.apache.cassandra.thrift.InvalidRequestException;
-import org.apache.cassandra.thrift.TimedOutException;
-import org.apache.cassandra.thrift.UnavailableException;
-import org.apache.thrift.TException;
-
-/**
- * Cassandra statement: implementation class for {@link PreparedStatement}.
- */
-
-class CassandraStatement implements PreparedStatement
-{
-    
-    /** The connection. */
-    private org.apache.cassandra.cql.driver.Connection connection;
-    
-    /** The cql. */
-    private String cql;
-
-    /**
-     * Constructor using fields.
-     * @param con     cassandra connection.
-     */
-    CassandraStatement(org.apache.cassandra.cql.driver.Connection con)
-    {
-        this.connection = con;
-    }
-
-    /**
-     * Constructor using fields.
-     *
-     * @param con     cassandra connection
-     * @param cql the cql
-     */
-    CassandraStatement(org.apache.cassandra.cql.driver.Connection con, String cql)
-    {
-        this.connection = con;
-        this.cql = cql;
-    }
-
-    
-    /**
-     * @param iface
-     * @return
-     * @throws SQLException
-     */
-    public boolean isWrapperFor(Class<?> iface) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-    
-    /**
-     * @param <T>
-     * @param iface
-     * @return
-     * @throws SQLException
-     */
-    public <T> T unwrap(Class<T> iface) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @param arg0
-     * @throws SQLException
-     */
-    public void addBatch(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @throws SQLException
-     */
-    public void cancel() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @throws SQLException
-     */
-    public void clearBatch() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @throws SQLException
-     */
-    public void clearWarnings() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @throws SQLException
-     */
-    public void close() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param query
-     * @return
-     * @throws SQLException
-     */
-    public boolean execute(String query) throws SQLException
-    {
-        try
-        {
-            return connection.execute(query) != null;
-        } 
-        catch (InvalidRequestException e)
-        {
-            throw new SQLException(e.getWhy());
-        }
-        catch (UnavailableException e)
-        {
-            throw new SQLException("Cassandra was unavialable", e);
-        }
-        catch (TimedOutException e)
-        {
-            throw new SQLException(e.getMessage());
-        }
-        catch (TException e)
-        {
-            throw new SQLException(e.getMessage());
-        }
-    }
-
-    
-    /**
-     * @param arg0
-     * @param arg1
-     * @return
-     * @throws SQLException
-     */
-    public boolean execute(String arg0, int arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @param arg0
-     * @param arg1
-     * @return
-     * @throws SQLException
-     */
-    public boolean execute(String arg0, int[] arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @param arg0
-     * @param arg1
-     * @return
-     * @throws SQLException
-     */
-    public boolean execute(String arg0, String[] arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public int[] executeBatch() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @param query
-     * @return
-     * @throws SQLException
-     */
-    public ResultSet executeQuery(String query) throws SQLException
-    {
-        try
-        {
-            CqlResult rSet = connection.execute(query);
-            // todo: encapsulate.
-            return new CassandraResultSet(rSet, connection.decoder, connection.curKeyspace, connection.curColumnFamily);
-        }
-        catch (InvalidRequestException e)
-        {
-            throw new SQLException(e.getMessage());
-        }
-        catch (UnavailableException e)
-        {
-            throw new SQLException(e.getMessage());
-        }
-        catch (TimedOutException e)
-        {
-            throw new SQLException(e.getMessage());
-        }
-        catch (TException e)
-        {
-            throw new SQLException(e.getMessage());
-        }
-    }
-
-    
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public int executeUpdate(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @param arg0
-     * @param arg1
-     * @return
-     * @throws SQLException
-     */
-    public int executeUpdate(String arg0, int arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @param arg0
-     * @param arg1
-     * @return
-     * @throws SQLException
-     */
-    public int executeUpdate(String arg0, int[] arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @param arg0
-     * @param arg1
-     * @return
-     * @throws SQLException
-     */
-    public int executeUpdate(String arg0, String[] arg1) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public Connection getConnection() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public int getFetchDirection() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public int getFetchSize() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public ResultSet getGeneratedKeys() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public int getMaxFieldSize() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public int getMaxRows() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public boolean getMoreResults() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @param arg0
-     * @return
-     * @throws SQLException
-     */
-    public boolean getMoreResults(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public int getQueryTimeout() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public ResultSet getResultSet() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public int getResultSetConcurrency() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public int getResultSetHoldability() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public int getResultSetType() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public int getUpdateCount() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public SQLWarning getWarnings() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public boolean isClosed() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public boolean isPoolable() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @param arg0
-     * @throws SQLException
-     */
-    public void setCursorName(String arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param arg0
-     * @throws SQLException
-     */
-    public void setEscapeProcessing(boolean arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param arg0
-     * @throws SQLException
-     */
-    public void setFetchDirection(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param arg0
-     * @throws SQLException
-     */
-    public void setFetchSize(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param arg0
-     * @throws SQLException
-     */
-    public void setMaxFieldSize(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param arg0
-     * @throws SQLException
-     */
-    public void setMaxRows(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param arg0
-     * @throws SQLException
-     */
-    public void setPoolable(boolean arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param arg0
-     * @throws SQLException
-     */
-    public void setQueryTimeout(int arg0) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @throws SQLException
-     */
-    public void addBatch() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @throws SQLException
-     */
-    public void clearParameters() throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public boolean execute() throws SQLException
-    {
-        return this.cql != null ? execute(cql) : false;
-    }
-
-    
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public ResultSet executeQuery() throws SQLException
-    {
-        return this.cql != null ? executeQuery(cql) : null;
-    }
-
-    
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public int executeUpdate() throws SQLException
-    {
-        return 0;
-    }
-
-    
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public ResultSetMetaData getMetaData() throws SQLException
-    {
-        return null;
-    }
-
-    
-    /**
-     * @return
-     * @throws SQLException
-     */
-    public ParameterMetaData getParameterMetaData() throws SQLException
-    {
-        return null;
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @throws SQLException
-     */
-    public void setArray(int parameterIndex, Array x) throws SQLException
-    {
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @throws SQLException
-     */
-    public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @param length
-     * @throws SQLException
-     */
-    public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @param length
-     * @throws SQLException
-     */
-    public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @throws SQLException
-     */
-    public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @throws SQLException
-     */
-    public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @param length
-     * @throws SQLException
-     */
-    public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @param length
-     * @throws SQLException
-     */
-    public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @throws SQLException
-     */
-    public void setBlob(int parameterIndex, Blob x) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param inputStream
-     * @throws SQLException
-     */
-    public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param inputStream
-     * @param length
-     * @throws SQLException
-     */
-    public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @throws SQLException
-     */
-    public void setBoolean(int parameterIndex, boolean x) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @throws SQLException
-     */
-    public void setByte(int parameterIndex, byte x) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @throws SQLException
-     */
-    public void setBytes(int parameterIndex, byte[] x) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param reader
-     * @throws SQLException
-     */
-    public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param reader
-     * @param length
-     * @throws SQLException
-     */
-    public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param reader
-     * @param length
-     * @throws SQLException
-     */
-    public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @throws SQLException
-     */
-    public void setClob(int parameterIndex, Clob x) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param reader
-     * @throws SQLException
-     */
-    public void setClob(int parameterIndex, Reader reader) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param reader
-     * @param length
-     * @throws SQLException
-     */
-    public void setClob(int parameterIndex, Reader reader, long length) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @throws SQLException
-     */
-    public void setDate(int parameterIndex, Date x) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @param cal
-     * @throws SQLException
-     */
-    public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @throws SQLException
-     */
-    public void setDouble(int parameterIndex, double x) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @throws SQLException
-     */
-    public void setFloat(int parameterIndex, float x) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @throws SQLException
-     */
-    public void setInt(int parameterIndex, int x) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @throws SQLException
-     */
-    public void setLong(int parameterIndex, long x) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param value
-     * @throws SQLException
-     */
-    public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param value
-     * @param length
-     * @throws SQLException
-     */
-    public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param value
-     * @throws SQLException
-     */
-    public void setNClob(int parameterIndex, NClob value) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param reader
-     * @throws SQLException
-     */
-    public void setNClob(int parameterIndex, Reader reader) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param reader
-     * @param length
-     * @throws SQLException
-     */
-    public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param value
-     * @throws SQLException
-     */
-    public void setNString(int parameterIndex, String value) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param sqlType
-     * @throws SQLException
-     */
-    public void setNull(int parameterIndex, int sqlType) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param sqlType
-     * @param typeName
-     * @throws SQLException
-     */
-    public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @throws SQLException
-     */
-    public void setObject(int parameterIndex, Object x) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @param targetSqlType
-     * @throws SQLException
-     */
-    public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @param targetSqlType
-     * @param scaleOrLength
-     * @throws SQLException
-     */
-    public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @throws SQLException
-     */
-    public void setRef(int parameterIndex, Ref x) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @throws SQLException
-     */
-    public void setRowId(int parameterIndex, RowId x) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param xmlObject
-     * @throws SQLException
-     */
-    public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @throws SQLException
-     */
-    public void setShort(int parameterIndex, short x) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @throws SQLException
-     */
-    public void setString(int parameterIndex, String x) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @throws SQLException
-     */
-    public void setTime(int parameterIndex, Time x) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @param cal
-     * @throws SQLException
-     */
-    public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @throws SQLException
-     */
-    public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @param cal
-     * @throws SQLException
-     */
-    public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @throws SQLException
-     */
-    public void setURL(int parameterIndex, URL x) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-    
-    /**
-     * @param parameterIndex
-     * @param x
-     * @param length
-     * @throws SQLException
-     */
-    public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException
-    {
-        throw new UnsupportedOperationException("method not supported");
-    }
-
-}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/DriverResolverException.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/DriverResolverException.java
index 0532c46d..e69de29b 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/DriverResolverException.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/DriverResolverException.java
@@ -1,39 +0,0 @@
-/*
- * 
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * 
- *   http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- * 
- */
-package org.apache.cassandra.cql.driver.jdbc;
-/**
- * Runtime exception handling in case of runtime error during Driver resolving. 
- */
-public class DriverResolverException extends RuntimeException {
-
-	/**
-	 * Default serial version UID. 
-	 */
-	private static final long serialVersionUID = 1L;
-
-	/**
-	 * Constructor using fields.
-	 * @param errMsg error message.
-	 */
-	public DriverResolverException(String errMsg) {
-		super(errMsg);
-	}
-}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/InvalidUrlException.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/InvalidUrlException.java
index 507f69d0..e69de29b 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/InvalidUrlException.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/driver/jdbc/InvalidUrlException.java
@@ -1,41 +0,0 @@
-/*
- * 
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * 
- *   http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- * 
- */
-package org.apache.cassandra.cql.driver.jdbc;
-
-/**
- * Runtime exception handling during incorrect connection url provided.
- */
-public class InvalidUrlException extends RuntimeException {
-	
-	/**
-	 *  Default serial version UID
-	 */
-	private static final long serialVersionUID = 1L;
-
-	/**
-	 * Constructor using fields.
-	 * @param errMsg error message.
-	 */
-	public InvalidUrlException(String errMsg) {
-		super(errMsg);
-	}
-
-}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/CassandraConnection.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/CassandraConnection.java
index e69de29b..ce5ffb90 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/CassandraConnection.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/CassandraConnection.java
@@ -0,0 +1,653 @@
+/*
+ * 
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ * 
+ */
+package org.apache.cassandra.cql.jdbc;
+
+import java.sql.Array;
+import java.sql.Blob;
+import java.sql.CallableStatement;
+import java.sql.Clob;
+import java.sql.Connection;
+import java.sql.DatabaseMetaData;
+import java.sql.NClob;
+import java.sql.PreparedStatement;
+import java.sql.SQLClientInfoException;
+import java.sql.SQLException;
+import java.sql.SQLWarning;
+import java.sql.SQLXML;
+import java.sql.Savepoint;
+import java.sql.Statement;
+import java.sql.Struct;
+import java.util.Map;
+import java.util.Properties;
+
+import org.apache.cassandra.thrift.AuthenticationException;
+import org.apache.cassandra.thrift.AuthorizationException;
+import org.apache.cassandra.thrift.InvalidRequestException;
+import org.apache.cassandra.thrift.TimedOutException;
+import org.apache.cassandra.thrift.UnavailableException;
+import org.apache.thrift.TException;
+import org.apache.thrift.transport.TTransportException;
+
+/**
+ * Implementation class for {@link Connection}.
+ */
+public class CassandraConnection implements Connection
+{
+    
+    /** The cassandra con. */
+    private org.apache.cassandra.cql.jdbc.Connection cassandraCon;
+    
+    /**
+     * Instantiates a new cassandra connection.
+     *
+     * @param url the url
+     */
+    public CassandraConnection(String url)
+    {
+        try
+        {
+            final int splitIndex = url.indexOf('@');
+            final String usr_pwd = url.substring(0, splitIndex);
+            final String host_port = url.substring(splitIndex + 1);
+            final int usr_colonIdx = usr_pwd.lastIndexOf(':');
+            final int usr_backwardIdx = usr_pwd.indexOf('/');
+            final String userName = usr_pwd.substring(usr_colonIdx + 1, usr_backwardIdx);
+            final String password = usr_pwd.substring(usr_backwardIdx + 1);
+            final int host_colonIdx = host_port.indexOf(':');
+            final String hostName = host_port.substring(0, host_colonIdx);
+            final int host_backwardIdx = host_port.indexOf('/');
+            final String port = host_port.substring(host_colonIdx + 1, host_backwardIdx);
+            final String keyspace = host_port.substring(host_backwardIdx + 1);
+            cassandraCon = new org.apache.cassandra.cql.jdbc.Connection(hostName, Integer.valueOf(port), userName,
+                                                                                                                             password);
+            final String useQ = "USE " + keyspace;
+            cassandraCon.execute(useQ);
+        }
+        catch (NumberFormatException e)
+        {
+            throw new DriverResolverException(e.getMessage());
+        }
+        catch (TTransportException e)
+        {
+            throw new DriverResolverException(e.getMessage());
+        }
+        catch (AuthenticationException e)
+        {
+            throw new DriverResolverException(e.getMessage());
+        }
+        catch (AuthorizationException e)
+        {
+            throw new DriverResolverException(e.getMessage());
+        }
+        catch (TException e)
+        {
+            throw new DriverResolverException(e.getMessage());
+        }
+        catch (InvalidRequestException e)
+        {
+            throw new DriverResolverException(e.getMessage());
+        }
+        catch (UnavailableException e)
+        {
+            throw new DriverResolverException(e.getMessage());
+        }
+        catch (TimedOutException e)
+        {
+            throw new DriverResolverException(e.getMessage());
+        }
+
+    }
+    
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public boolean isWrapperFor(Class<?> arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @param <T>
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public <T> T unwrap(Class<T> arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+
+    /**
+     * @throws SQLException
+     */
+    public void clearWarnings() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * On close of connection.
+     *
+     * @throws SQLException the sQL exception
+     */
+    public void close() throws SQLException
+    {
+        if (cassandraCon != null)
+        {
+            cassandraCon.close();
+        }
+    }
+
+
+    /**
+     * @throws SQLException
+     */
+    public void commit() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @return
+     * @throws SQLException
+     */
+    public Array createArrayOf(String arg0, Object[] arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public Blob createBlob() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public Clob createClob() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public NClob createNClob() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public SQLXML createSQLXML() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public Statement createStatement() throws SQLException
+    {
+        return new CassandraStatement(this.cassandraCon);
+    }
+
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @return
+     * @throws SQLException
+     */
+    public Statement createStatement(int arg0, int arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @return
+     * @throws SQLException
+     */
+    public Statement createStatement(int arg0, int arg1, int arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @return
+     * @throws SQLException
+     */
+    public Struct createStruct(String arg0, Object[] arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public boolean getAutoCommit() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public String getCatalog() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public Properties getClientInfo() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public String getClientInfo(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public int getHoldability() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public DatabaseMetaData getMetaData() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public int getTransactionIsolation() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public Map<String, Class<?>> getTypeMap() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public SQLWarning getWarnings() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public boolean isClosed() throws SQLException
+    {
+        return false;
+    }
+
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public boolean isReadOnly() throws SQLException
+    {
+        return false;
+    }
+
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public boolean isValid(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public String nativeSQL(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public CallableStatement prepareCall(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @return
+     * @throws SQLException
+     */
+    public CallableStatement prepareCall(String arg0, int arg1, int arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @param arg3
+     * @return
+     * @throws SQLException
+     */
+    public CallableStatement prepareCall(String arg0, int arg1, int arg2, int arg3) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @param sql
+     * @return
+     * @throws SQLException
+     */
+    public PreparedStatement prepareStatement(String sql) throws SQLException
+    {
+        return new CassandraStatement(this.cassandraCon, sql);
+    }
+
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @return
+     * @throws SQLException
+     */
+    public PreparedStatement prepareStatement(String arg0, int arg1) throws SQLException
+    {
+        return null;
+    }
+
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @return
+     * @throws SQLException
+     */
+    public PreparedStatement prepareStatement(String arg0, int[] arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @return
+     * @throws SQLException
+     */
+    public PreparedStatement prepareStatement(String arg0, String[] arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @return
+     * @throws SQLException
+     */
+    public PreparedStatement prepareStatement(String arg0, int arg1, int arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @param arg3
+     * @return
+     * @throws SQLException
+     */
+    public PreparedStatement prepareStatement(String arg0, int arg1, int arg2, int arg3) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @param arg0
+     * @throws SQLException
+     */
+    public void releaseSavepoint(Savepoint arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+
+    /**
+     * @throws SQLException
+     */ 
+    public void rollback() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+
+    /**
+     * @param arg0
+     * @throws SQLException
+     */
+    public void rollback(Savepoint arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+
+    /**
+     * @param arg0
+     * @throws SQLException
+     */
+    public void setAutoCommit(boolean arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+
+    /**
+     * @param arg0
+     * @throws SQLException
+     */
+    public void setCatalog(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @param arg0
+     * @throws SQLClientInfoException
+     */
+    public void setClientInfo(Properties arg0) throws SQLClientInfoException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLClientInfoException
+     */
+    public void setClientInfo(String arg0, String arg1) throws SQLClientInfoException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+
+    /**
+     * @param arg0
+     * @throws SQLException
+     */
+    public void setHoldability(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+    
+
+    /**
+     * @param arg0
+     * @throws SQLException
+     */
+    public void setReadOnly(boolean arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+    
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public Savepoint setSavepoint() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+    
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public Savepoint setSavepoint(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+    
+
+    /**
+     * @param arg0
+     * @throws SQLException
+     */
+    public void setTransactionIsolation(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+    
+
+    /**
+     * @param arg0
+     * @throws SQLException
+     */
+    public void setTypeMap(Map<String, Class<?>> arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/CassandraDriver.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/CassandraDriver.java
index e69de29b..037f88f7 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/CassandraDriver.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/CassandraDriver.java
@@ -0,0 +1,134 @@
+/*
+ * 
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ * 
+ */
+package org.apache.cassandra.cql.jdbc;
+
+import java.sql.Connection;
+import java.sql.Driver;
+import java.sql.DriverManager;
+import java.sql.DriverPropertyInfo;
+import java.sql.SQLException;
+import java.util.Properties;
+
+/**
+  * The Class CassandraDriver.
+  */
+ public class CassandraDriver implements Driver
+{
+    
+    /** The Constant MAJOR_VERSION. */
+    private static final int MAJOR_VERSION = 1;
+    
+    /** The Constant MINOR_VERSION. */
+    private static final int MINOR_VERSION = 0;
+
+    /** The ACCEPT s_ url. */
+    private static String ACCEPTS_URL = "jdbc:cassandra";
+    
+//    private static final Logger logger = LoggerFactory.getLogger(CassandraDriver.class); 
+
+    static
+    {
+        // Register the CassandraDriver with DriverManager
+        try
+        {
+            CassandraDriver driverInst = new CassandraDriver();
+            DriverManager.registerDriver(driverInst);
+        }
+        catch (SQLException e)
+        {
+            throw new DriverResolverException(e.getMessage());
+        }
+    }
+
+    
+    /**
+     * Method to validate whether provided connection url matches with pattern or not.
+     *
+     * @param url  connection url.
+     * @return true, if successful
+     * @throws SQLException the sQL exception
+     */
+    public boolean acceptsURL(String url) throws SQLException
+    {
+        return url.startsWith(ACCEPTS_URL);
+    }
+
+    /**
+     * Method to return connection instance for given connection url and connection props.
+     *
+     * @param url               connection url.
+     * @param props          connection properties.
+     * @return connection connection instance.
+     * @throws SQLException the sQL exception
+     */
+    public Connection connect(String url, Properties props) throws SQLException
+    {
+        if (acceptsURL(url))
+        {
+            return new CassandraConnection(url);
+        }
+        else
+        {
+            throw new InvalidUrlException("Invalid connection url:" + url + ". should start with jdbc:cassandra");
+        }
+    }
+
+    /**
+     * Returns default major version.
+     * @return MAJOR_VERSION major version.
+     */
+    public int getMajorVersion()
+    {
+        return MAJOR_VERSION;
+    }
+
+    /**
+     * Returns default minor version.
+     * @return MINOR_VERSION minor version.
+     */
+    public int getMinorVersion()
+    {
+        return MINOR_VERSION;
+    }
+
+    /**
+     * Returns default driver property info object.
+     *
+     * @param arg0 the arg0
+     * @param arg1 the arg1
+     * @return driverPropertyInfo
+     * @throws SQLException the sQL exception
+     */
+    public DriverPropertyInfo[] getPropertyInfo(String arg0, Properties arg1) throws SQLException
+    {
+        return new DriverPropertyInfo[0];
+    }
+
+   /**
+    * Returns true, if it is jdbc compliant.    
+    * @return value true, if it is jdbc compliant.
+    */
+    public boolean jdbcCompliant()
+    {
+        return false;
+    }
+
+}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/CassandraResultSet.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/CassandraResultSet.java
index e69de29b..97706890 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/CassandraResultSet.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/CassandraResultSet.java
@@ -0,0 +1,1997 @@
+/*
+ * 
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ * 
+ */
+package org.apache.cassandra.cql.jdbc;
+
+import java.io.InputStream;
+import java.io.Reader;
+import java.math.BigDecimal;
+import java.math.BigInteger;
+import java.net.URL;
+import java.sql.Array;
+import java.sql.Blob;
+import java.sql.Clob;
+import java.sql.Date;
+import java.sql.NClob;
+import java.sql.Ref;
+import java.sql.ResultSet;
+import java.sql.ResultSetMetaData;
+import java.sql.RowId;
+import java.sql.SQLException;
+import java.sql.SQLWarning;
+import java.sql.SQLXML;
+import java.sql.Statement;
+import java.sql.Time;
+import java.sql.Timestamp;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.WeakHashMap;
+
+import org.apache.cassandra.thrift.Column;
+import org.apache.cassandra.thrift.CqlResult;
+import org.apache.cassandra.thrift.CqlRow;
+
+/**
+ * The Class CassandraResultSet.
+ */
+class CassandraResultSet implements ResultSet
+{
+    
+    /** The r set. */
+    private final CqlResult rSet; 
+    
+    private final ColumnDecoder decoder;
+    private final String keyspace;
+    private final String columnFamily;
+    
+    /** The r set iter. */
+    private Iterator<CqlRow> rSetIter;
+    
+//    /** The row. */
+//    private CqlRow row;
+    
+    /** The values. */
+    private List<Col> values = new ArrayList<Col>();
+    
+    /** The value map. */
+    private Map<String, Object> valueMap = new WeakHashMap<String, Object>();
+
+    /**
+     * Instantiates a new cassandra result set.
+     *
+     * @param resultSet the result set
+     */
+    CassandraResultSet(CqlResult resultSet, ColumnDecoder decoder, String keyspace, String columnFamily)
+    {
+        this.rSet = resultSet;
+        this.decoder = decoder;
+        this.keyspace = keyspace;
+        this.columnFamily = columnFamily;
+        rSetIter = rSet.getRowsIterator();
+    }
+
+    /**
+     * @param iface
+     * @return
+     * @throws SQLException
+     */
+    public boolean isWrapperFor(Class<?> iface) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param <T>
+     * @param iface
+     * @return
+     * @throws SQLException
+     */
+    public <T> T unwrap(Class<T> iface) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public boolean absolute(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @throws SQLException
+     */
+    public void afterLast() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @throws SQLException
+     */
+    public void beforeFirst() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @throws SQLException
+     */
+    public void cancelRowUpdates() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @throws SQLException
+     */
+    public void clearWarnings() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @throws SQLException
+     */
+    public void close() throws SQLException
+    {
+        valueMap.clear();
+        values.clear();
+        valueMap = null;
+        values = null;
+    }
+
+    /**
+     * @throws SQLException
+     */
+    public void deleteRow() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public int findColumn(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public boolean first() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public Array getArray(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public Array getArray(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public InputStream getAsciiStream(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public InputStream getAsciiStream(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public BigDecimal getBigDecimal(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public BigDecimal getBigDecimal(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @return
+     * @throws SQLException
+     */
+    public BigDecimal getBigDecimal(int arg0, int arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @return
+     * @throws SQLException
+     */
+    public BigDecimal getBigDecimal(String arg0, int arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public InputStream getBinaryStream(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public InputStream getBinaryStream(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public Blob getBlob(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public Blob getBlob(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public boolean getBoolean(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public boolean getBoolean(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public byte getByte(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public byte getByte(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param index
+     * @return
+     * @throws SQLException
+     */
+    public byte[] getBytes(int index) throws SQLException
+    {
+        return values.get(index) != null ? (byte[])values.get(index).getValue() : null;
+    }
+
+    /**
+     * @param name
+     * @return
+     * @throws SQLException
+     */
+    public byte[] getBytes(String name) throws SQLException
+    {
+        String nameAsString = decoder.colNameAsString(keyspace, columnFamily, name);
+        return valueMap.get(nameAsString) != null ? (byte[])valueMap.get(nameAsString) : null;
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public Reader getCharacterStream(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public Reader getCharacterStream(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public Clob getClob(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public Clob getClob(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public int getConcurrency() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public String getCursorName() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public Date getDate(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public Date getDate(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @return
+     * @throws SQLException
+     */
+    public Date getDate(int arg0, Calendar arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @return
+     * @throws SQLException
+     */
+    public Date getDate(String arg0, Calendar arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public double getDouble(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public double getDouble(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public int getFetchDirection() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public int getFetchSize() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public float getFloat(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public float getFloat(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public int getHoldability() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param index
+     * @return
+     * @throws SQLException
+     */
+    public int getInt(int index) throws SQLException
+    {
+        return values.get(index) != null ? ((BigInteger)values.get(index).getValue()).intValue() : null;
+    }
+
+    /**
+     * @param name
+     * @return
+     * @throws SQLException
+     */
+    public int getInt(String name) throws SQLException
+    {
+        String nameAsString = decoder.colNameAsString(keyspace, columnFamily, name);
+        return valueMap.get(nameAsString) != null ? ((BigInteger)valueMap.get(nameAsString)).intValue() : null;
+    }
+
+    /**
+     * @param index
+     * @return
+     * @throws SQLException
+     */
+    public long getLong(int index) throws SQLException
+    {
+        return values.get(index) != null ? (Long)values.get(index).getValue() : null;
+    }
+
+    /**
+     * @param name
+     * @return
+     * @throws SQLException
+     */
+    public long getLong(String name) throws SQLException
+    {
+        String nameAsString = decoder.colNameAsString(keyspace, columnFamily, name);
+        return valueMap.get(nameAsString) != null ? (Long)valueMap.get(nameAsString) : null;
+    }
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public ResultSetMetaData getMetaData() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public Reader getNCharacterStream(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public Reader getNCharacterStream(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public NClob getNClob(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public NClob getNClob(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public String getNString(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public String getNString(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param index
+     * @return
+     * @throws SQLException
+     */
+    public Object getObject(int index) throws SQLException
+    {
+        return values.get(index) == null ? null : values.get(index).getValue();
+    }
+
+    /**
+     * @param name
+     * @return
+     * @throws SQLException
+     */
+    public Object getObject(String name) throws SQLException
+    {
+        String nameAsString = decoder.colNameAsString(keyspace, columnFamily, name);
+        return valueMap.get(nameAsString);
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @return
+     * @throws SQLException
+     */
+    public Object getObject(int arg0, Map<String, Class<?>> arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @return
+     * @throws SQLException
+     */
+    public Object getObject(String arg0, Map<String, Class<?>> arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public Ref getRef(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public Ref getRef(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public int getRow() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public RowId getRowId(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public RowId getRowId(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public SQLXML getSQLXML(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public SQLXML getSQLXML(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public short getShort(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public short getShort(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public Statement getStatement() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param index
+     * @return
+     * @throws SQLException
+     */
+    public String getString(int index) throws SQLException 
+    {
+        return values.get(index) != null ? ColumnDecoder.colValueAsString(values.get(index).getValue()) : null;
+    }
+
+    /**
+     * @param name
+     * @return
+     * @throws SQLException
+     */
+    public String getString(String name) throws SQLException
+    {
+        String nameAsString = this.decoder.colNameAsString(this.keyspace, this.columnFamily, name);
+        return valueMap.get(nameAsString) != null ? ColumnDecoder.colValueAsString(valueMap.get(nameAsString)) : null;
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public Time getTime(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public Time getTime(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @return
+     * @throws SQLException
+     */
+    public Time getTime(int arg0, Calendar arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @return
+     * @throws SQLException
+     */
+    public Time getTime(String arg0, Calendar arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public Timestamp getTimestamp(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public Timestamp getTimestamp(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @return
+     * @throws SQLException
+     */
+    public Timestamp getTimestamp(int arg0, Calendar arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @return
+     * @throws SQLException
+     */
+    public Timestamp getTimestamp(String arg0, Calendar arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public int getType() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public URL getURL(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public URL getURL(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public InputStream getUnicodeStream(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public InputStream getUnicodeStream(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public SQLWarning getWarnings() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @throws SQLException
+     */
+    public void insertRow() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public boolean isAfterLast() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public boolean isBeforeFirst() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public boolean isClosed() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public boolean isFirst() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public boolean isLast() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public boolean last() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @throws SQLException
+     */
+    public void moveToCurrentRow() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @throws SQLException
+     */
+    public void moveToInsertRow() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public synchronized boolean next() throws SQLException
+    {
+        if (!values.isEmpty() || !valueMap.isEmpty())
+        {
+            values.clear();
+            valueMap.clear();
+        }
+        if (rSetIter != null && rSetIter.hasNext())
+        {
+            CqlRow row = rSetIter.next();
+            List<Column> cols = row.getColumns();
+            for (Column col : cols)
+            {
+                byte[] name = col.getName();
+                byte[] value = col.getValue();
+                Col c = decoder.makeCol(keyspace, columnFamily, name, value);
+                values.add(c);
+                valueMap.put(decoder.colNameAsString(keyspace, columnFamily, name), c.getValue());
+            }
+            return !(values.isEmpty() && valueMap.isEmpty());
+        } 
+        else
+        {
+            return false;
+        }
+    }
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public boolean previous() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @throws SQLException
+     */
+    public void refreshRow() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public boolean relative(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public boolean rowDeleted() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public boolean rowInserted() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public boolean rowUpdated() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @throws SQLException
+     */
+    public void setFetchDirection(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @throws SQLException
+     */
+    public void setFetchSize(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateArray(int arg0, Array arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateArray(String arg0, Array arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateAsciiStream(int arg0, InputStream arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateAsciiStream(String arg0, InputStream arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @throws SQLException
+     */
+    public void updateAsciiStream(int arg0, InputStream arg1, int arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @throws SQLException
+     */
+    public void updateAsciiStream(String arg0, InputStream arg1, int arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @throws SQLException
+     */
+    public void updateAsciiStream(int arg0, InputStream arg1, long arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @throws SQLException
+     */
+    public void updateAsciiStream(String arg0, InputStream arg1, long arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateBigDecimal(int arg0, BigDecimal arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateBigDecimal(String arg0, BigDecimal arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateBinaryStream(int arg0, InputStream arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateBinaryStream(String arg0, InputStream arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @throws SQLException
+     */
+    public void updateBinaryStream(int arg0, InputStream arg1, int arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @throws SQLException
+     */
+    public void updateBinaryStream(String arg0, InputStream arg1, int arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @throws SQLException
+     */
+    public void updateBinaryStream(int arg0, InputStream arg1, long arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @throws SQLException
+     */
+    public void updateBinaryStream(String arg0, InputStream arg1, long arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateBlob(int arg0, Blob arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateBlob(String arg0, Blob arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateBlob(int arg0, InputStream arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateBlob(String arg0, InputStream arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @throws SQLException
+     */
+    public void updateBlob(int arg0, InputStream arg1, long arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @throws SQLException
+     */
+    public void updateBlob(String arg0, InputStream arg1, long arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateBoolean(int arg0, boolean arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateBoolean(String arg0, boolean arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateByte(int arg0, byte arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateByte(String arg0, byte arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateBytes(int arg0, byte[] arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateBytes(String arg0, byte[] arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateCharacterStream(int arg0, Reader arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateCharacterStream(String arg0, Reader arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @throws SQLException
+     */
+    public void updateCharacterStream(int arg0, Reader arg1, int arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @throws SQLException
+     */
+    public void updateCharacterStream(String arg0, Reader arg1, int arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @throws SQLException
+     */
+    public void updateCharacterStream(int arg0, Reader arg1, long arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @throws SQLException
+     */
+    public void updateCharacterStream(String arg0, Reader arg1, long arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateClob(int arg0, Clob arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateClob(String arg0, Clob arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateClob(int arg0, Reader arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateClob(String arg0, Reader arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @throws SQLException
+     */
+    public void updateClob(int arg0, Reader arg1, long arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @throws SQLException
+     */
+    public void updateClob(String arg0, Reader arg1, long arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateDate(int arg0, Date arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateDate(String arg0, Date arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateDouble(int arg0, double arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateDouble(String arg0, double arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateFloat(int arg0, float arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateFloat(String arg0, float arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateInt(int arg0, int arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateInt(String arg0, int arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateLong(int arg0, long arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateLong(String arg0, long arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateNCharacterStream(int arg0, Reader arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateNCharacterStream(String arg0, Reader arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @throws SQLException
+     */
+    public void updateNCharacterStream(int arg0, Reader arg1, long arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @throws SQLException
+     */
+    public void updateNCharacterStream(String arg0, Reader arg1, long arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateNClob(int arg0, NClob arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateNClob(String arg0, NClob arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateNClob(int arg0, Reader arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateNClob(String arg0, Reader arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @throws SQLException
+     */
+    public void updateNClob(int arg0, Reader arg1, long arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @throws SQLException
+     */
+    public void updateNClob(String arg0, Reader arg1, long arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateNString(int arg0, String arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateNString(String arg0, String arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @throws SQLException
+     */
+    public void updateNull(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @throws SQLException
+     */
+    public void updateNull(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateObject(int arg0, Object arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateObject(String arg0, Object arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @throws SQLException
+     */
+    public void updateObject(int arg0, Object arg1, int arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @param arg2
+     * @throws SQLException
+     */
+    public void updateObject(String arg0, Object arg1, int arg2) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateRef(int arg0, Ref arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateRef(String arg0, Ref arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @throws SQLException
+     */
+    public void updateRow() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateRowId(int arg0, RowId arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateRowId(String arg0, RowId arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateSQLXML(int arg0, SQLXML arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateSQLXML(String arg0, SQLXML arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateShort(int arg0, short arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateShort(String arg0, short arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateString(int arg0, String arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateString(String arg0, String arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateTime(int arg0, Time arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateTime(String arg0, Time arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateTimestamp(int arg0, Timestamp arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @param arg0
+     * @param arg1
+     * @throws SQLException
+     */
+    public void updateTimestamp(String arg0, Timestamp arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public boolean wasNull() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/CassandraStatement.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/CassandraStatement.java
index e69de29b..2979b4ec 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/CassandraStatement.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/CassandraStatement.java
@@ -0,0 +1,1231 @@
+/*
+ * 
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ * 
+ */
+package org.apache.cassandra.cql.jdbc;
+
+import java.io.InputStream;
+import java.io.Reader;
+import java.math.BigDecimal;
+import java.net.URL;
+import java.sql.Array;
+import java.sql.Blob;
+import java.sql.Clob;
+import java.sql.Connection;
+import java.sql.Date;
+import java.sql.NClob;
+import java.sql.ParameterMetaData;
+import java.sql.PreparedStatement;
+import java.sql.Ref;
+import java.sql.ResultSet;
+import java.sql.ResultSetMetaData;
+import java.sql.RowId;
+import java.sql.SQLException;
+import java.sql.SQLWarning;
+import java.sql.SQLXML;
+import java.sql.Time;
+import java.sql.Timestamp;
+import java.util.Calendar;
+
+import org.apache.cassandra.thrift.CqlResult;
+import org.apache.cassandra.thrift.InvalidRequestException;
+import org.apache.cassandra.thrift.TimedOutException;
+import org.apache.cassandra.thrift.UnavailableException;
+import org.apache.thrift.TException;
+
+/**
+ * Cassandra statement: implementation class for {@link PreparedStatement}.
+ */
+
+class CassandraStatement implements PreparedStatement
+{
+    
+    /** The connection. */
+    private org.apache.cassandra.cql.jdbc.Connection connection;
+    
+    /** The cql. */
+    private String cql;
+
+    /**
+     * Constructor using fields.
+     * @param con     cassandra connection.
+     */
+    CassandraStatement(org.apache.cassandra.cql.jdbc.Connection con)
+    {
+        this.connection = con;
+    }
+
+    /**
+     * Constructor using fields.
+     *
+     * @param con     cassandra connection
+     * @param cql the cql
+     */
+    CassandraStatement(org.apache.cassandra.cql.jdbc.Connection con, String cql)
+    {
+        this.connection = con;
+        this.cql = cql;
+    }
+
+    
+    /**
+     * @param iface
+     * @return
+     * @throws SQLException
+     */
+    public boolean isWrapperFor(Class<?> iface) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+    
+    /**
+     * @param <T>
+     * @param iface
+     * @return
+     * @throws SQLException
+     */
+    public <T> T unwrap(Class<T> iface) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @param arg0
+     * @throws SQLException
+     */
+    public void addBatch(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @throws SQLException
+     */
+    public void cancel() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @throws SQLException
+     */
+    public void clearBatch() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @throws SQLException
+     */
+    public void clearWarnings() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @throws SQLException
+     */
+    public void close() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param query
+     * @return
+     * @throws SQLException
+     */
+    public boolean execute(String query) throws SQLException
+    {
+        try
+        {
+            return connection.execute(query) != null;
+        } 
+        catch (InvalidRequestException e)
+        {
+            throw new SQLException(e.getWhy());
+        }
+        catch (UnavailableException e)
+        {
+            throw new SQLException("Cassandra was unavialable", e);
+        }
+        catch (TimedOutException e)
+        {
+            throw new SQLException(e.getMessage());
+        }
+        catch (TException e)
+        {
+            throw new SQLException(e.getMessage());
+        }
+    }
+
+    
+    /**
+     * @param arg0
+     * @param arg1
+     * @return
+     * @throws SQLException
+     */
+    public boolean execute(String arg0, int arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @param arg0
+     * @param arg1
+     * @return
+     * @throws SQLException
+     */
+    public boolean execute(String arg0, int[] arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @param arg0
+     * @param arg1
+     * @return
+     * @throws SQLException
+     */
+    public boolean execute(String arg0, String[] arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public int[] executeBatch() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @param query
+     * @return
+     * @throws SQLException
+     */
+    public ResultSet executeQuery(String query) throws SQLException
+    {
+        try
+        {
+            CqlResult rSet = connection.execute(query);
+            // todo: encapsulate.
+            return new CassandraResultSet(rSet, connection.decoder, connection.curKeyspace, connection.curColumnFamily);
+        }
+        catch (InvalidRequestException e)
+        {
+            throw new SQLException(e.getMessage());
+        }
+        catch (UnavailableException e)
+        {
+            throw new SQLException(e.getMessage());
+        }
+        catch (TimedOutException e)
+        {
+            throw new SQLException(e.getMessage());
+        }
+        catch (TException e)
+        {
+            throw new SQLException(e.getMessage());
+        }
+    }
+
+    
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public int executeUpdate(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @param arg0
+     * @param arg1
+     * @return
+     * @throws SQLException
+     */
+    public int executeUpdate(String arg0, int arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @param arg0
+     * @param arg1
+     * @return
+     * @throws SQLException
+     */
+    public int executeUpdate(String arg0, int[] arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @param arg0
+     * @param arg1
+     * @return
+     * @throws SQLException
+     */
+    public int executeUpdate(String arg0, String[] arg1) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public Connection getConnection() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public int getFetchDirection() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public int getFetchSize() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public ResultSet getGeneratedKeys() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public int getMaxFieldSize() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public int getMaxRows() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public boolean getMoreResults() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @param arg0
+     * @return
+     * @throws SQLException
+     */
+    public boolean getMoreResults(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public int getQueryTimeout() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public ResultSet getResultSet() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public int getResultSetConcurrency() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public int getResultSetHoldability() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public int getResultSetType() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public int getUpdateCount() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public SQLWarning getWarnings() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public boolean isClosed() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public boolean isPoolable() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @param arg0
+     * @throws SQLException
+     */
+    public void setCursorName(String arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param arg0
+     * @throws SQLException
+     */
+    public void setEscapeProcessing(boolean arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param arg0
+     * @throws SQLException
+     */
+    public void setFetchDirection(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param arg0
+     * @throws SQLException
+     */
+    public void setFetchSize(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param arg0
+     * @throws SQLException
+     */
+    public void setMaxFieldSize(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param arg0
+     * @throws SQLException
+     */
+    public void setMaxRows(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param arg0
+     * @throws SQLException
+     */
+    public void setPoolable(boolean arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param arg0
+     * @throws SQLException
+     */
+    public void setQueryTimeout(int arg0) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @throws SQLException
+     */
+    public void addBatch() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @throws SQLException
+     */
+    public void clearParameters() throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public boolean execute() throws SQLException
+    {
+        return this.cql != null ? execute(cql) : false;
+    }
+
+    
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public ResultSet executeQuery() throws SQLException
+    {
+        return this.cql != null ? executeQuery(cql) : null;
+    }
+
+    
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public int executeUpdate() throws SQLException
+    {
+        return 0;
+    }
+
+    
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public ResultSetMetaData getMetaData() throws SQLException
+    {
+        return null;
+    }
+
+    
+    /**
+     * @return
+     * @throws SQLException
+     */
+    public ParameterMetaData getParameterMetaData() throws SQLException
+    {
+        return null;
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @throws SQLException
+     */
+    public void setArray(int parameterIndex, Array x) throws SQLException
+    {
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @throws SQLException
+     */
+    public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @param length
+     * @throws SQLException
+     */
+    public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @param length
+     * @throws SQLException
+     */
+    public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @throws SQLException
+     */
+    public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @throws SQLException
+     */
+    public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @param length
+     * @throws SQLException
+     */
+    public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @param length
+     * @throws SQLException
+     */
+    public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @throws SQLException
+     */
+    public void setBlob(int parameterIndex, Blob x) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param inputStream
+     * @throws SQLException
+     */
+    public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param inputStream
+     * @param length
+     * @throws SQLException
+     */
+    public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @throws SQLException
+     */
+    public void setBoolean(int parameterIndex, boolean x) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @throws SQLException
+     */
+    public void setByte(int parameterIndex, byte x) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @throws SQLException
+     */
+    public void setBytes(int parameterIndex, byte[] x) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param reader
+     * @throws SQLException
+     */
+    public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param reader
+     * @param length
+     * @throws SQLException
+     */
+    public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param reader
+     * @param length
+     * @throws SQLException
+     */
+    public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @throws SQLException
+     */
+    public void setClob(int parameterIndex, Clob x) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param reader
+     * @throws SQLException
+     */
+    public void setClob(int parameterIndex, Reader reader) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param reader
+     * @param length
+     * @throws SQLException
+     */
+    public void setClob(int parameterIndex, Reader reader, long length) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @throws SQLException
+     */
+    public void setDate(int parameterIndex, Date x) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @param cal
+     * @throws SQLException
+     */
+    public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @throws SQLException
+     */
+    public void setDouble(int parameterIndex, double x) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @throws SQLException
+     */
+    public void setFloat(int parameterIndex, float x) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @throws SQLException
+     */
+    public void setInt(int parameterIndex, int x) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @throws SQLException
+     */
+    public void setLong(int parameterIndex, long x) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param value
+     * @throws SQLException
+     */
+    public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param value
+     * @param length
+     * @throws SQLException
+     */
+    public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param value
+     * @throws SQLException
+     */
+    public void setNClob(int parameterIndex, NClob value) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param reader
+     * @throws SQLException
+     */
+    public void setNClob(int parameterIndex, Reader reader) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param reader
+     * @param length
+     * @throws SQLException
+     */
+    public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param value
+     * @throws SQLException
+     */
+    public void setNString(int parameterIndex, String value) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param sqlType
+     * @throws SQLException
+     */
+    public void setNull(int parameterIndex, int sqlType) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param sqlType
+     * @param typeName
+     * @throws SQLException
+     */
+    public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @throws SQLException
+     */
+    public void setObject(int parameterIndex, Object x) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @param targetSqlType
+     * @throws SQLException
+     */
+    public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @param targetSqlType
+     * @param scaleOrLength
+     * @throws SQLException
+     */
+    public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @throws SQLException
+     */
+    public void setRef(int parameterIndex, Ref x) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @throws SQLException
+     */
+    public void setRowId(int parameterIndex, RowId x) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param xmlObject
+     * @throws SQLException
+     */
+    public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @throws SQLException
+     */
+    public void setShort(int parameterIndex, short x) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @throws SQLException
+     */
+    public void setString(int parameterIndex, String x) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @throws SQLException
+     */
+    public void setTime(int parameterIndex, Time x) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @param cal
+     * @throws SQLException
+     */
+    public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @throws SQLException
+     */
+    public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @param cal
+     * @throws SQLException
+     */
+    public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @throws SQLException
+     */
+    public void setURL(int parameterIndex, URL x) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+    
+    /**
+     * @param parameterIndex
+     * @param x
+     * @param length
+     * @throws SQLException
+     */
+    public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException
+    {
+        throw new UnsupportedOperationException("method not supported");
+    }
+
+}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/Col.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/Col.java
index e69de29b..1a9fa0c0 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/Col.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/Col.java
@@ -0,0 +1,23 @@
+package org.apache.cassandra.cql.jdbc;
+
+class Col<N, V>
+{
+    public final N name;
+    public final V value;
+    
+    public Col(N name, V value)
+    {
+        this.name = name;
+        this.value = value;
+    }
+    
+    public N getName()
+    {
+        return name;
+    }
+    
+    public V getValue()
+    {
+        return value;
+    }
+}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/ColumnDecoder.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/ColumnDecoder.java
index e69de29b..34e28cd2 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/ColumnDecoder.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/ColumnDecoder.java
@@ -0,0 +1,133 @@
+package org.apache.cassandra.cql.jdbc;
+
+import org.apache.cassandra.config.ConfigurationException;
+import org.apache.cassandra.db.marshal.AbstractType;
+import org.apache.cassandra.thrift.CfDef;
+import org.apache.cassandra.thrift.KsDef;
+import org.apache.cassandra.utils.ByteBufferUtil;
+import org.apache.cassandra.utils.FBUtilities;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.nio.ByteBuffer;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+/** Decodes columns from bytes into instances of their respective expected types. */
+class ColumnDecoder 
+{
+    private static final Logger logger = LoggerFactory.getLogger(ColumnDecoder.class);
+    private static final String MapFormatString = "%s.%s.%s";
+    
+    // basically denotes column or value.
+    enum Specifier
+    {
+        Comparator,
+        Validator
+    }
+    
+    private Map<String, CfDef> cfDefs = new HashMap<String, CfDef>();
+    
+    // cache the comparators for efficiency.
+    private Map<String, AbstractType> comparators = new HashMap<String, AbstractType>();
+    
+    /** is specific per set of keyspace definitions. */
+    public ColumnDecoder(List<KsDef> defs)
+    {
+        for (KsDef ks : defs) 
+            for (CfDef cf : ks.getCf_defs())
+                cfDefs.put(String.format("%s.%s", ks.getName(), cf.getName()), cf);
+    }
+
+    /**
+     * @param keyspace ALWAYS specify
+     * @param columnFamily ALWAYS specify
+     * @param specifier ALWAYS specify
+     * @param def avoids additional map lookup if specified. null is ok though.
+     * @return
+     */
+    private AbstractType getComparator(String keyspace, String columnFamily, Specifier specifier, CfDef def) 
+    {
+        // check cache first.
+        String key = String.format(MapFormatString, keyspace, columnFamily, specifier.name());
+        AbstractType comparator = comparators.get(key);
+
+        // make and put in cache.
+        if (comparator == null) 
+        {
+            if (def == null)
+                def = cfDefs.get(String.format("%s.%s", keyspace, columnFamily));
+            try 
+            {
+                switch (specifier)
+                {
+                    case Validator:
+                        comparator = FBUtilities.getComparator(def.getDefault_validation_class());
+                        break;
+                    case Comparator:
+                    default:
+                        comparator = FBUtilities.getComparator(def.getComparator_type());
+                        break;
+                }
+                comparators.put(key, comparator);
+            }
+            catch (ConfigurationException ex)
+            {
+                throw new RuntimeException(ex);
+            }
+        }
+        return comparator;
+    }
+
+    /**
+     * uses the AbstractType to map a column name to a string.  Relies on AT.fromString() and AT.getString()
+     * @param keyspace
+     * @param columnFamily
+     * @param name
+     * @return
+     */
+    public String colNameAsString(String keyspace, String columnFamily, String name) 
+    {
+        AbstractType comparator = getComparator(keyspace, columnFamily, Specifier.Comparator, null);
+        ByteBuffer bb = comparator.fromString(name);
+        return comparator.getString(bb);
+    }
+
+    /**
+     * uses the AbstractType to map a column name to a string.
+     * @param keyspace
+     * @param columnFamily
+     * @param name
+     * @return
+     */
+    public String colNameAsString(String keyspace, String columnFamily, byte[] name) 
+    {
+        AbstractType comparator = getComparator(keyspace, columnFamily, Specifier.Comparator, null);
+        return comparator.getString(ByteBuffer.wrap(name));
+    }
+
+    /**
+     * converts a column value to a string.
+     * @param value
+     * @return
+     */
+    public static String colValueAsString(Object value) {
+        if (value instanceof String)
+            return (String)value;
+        else if (value instanceof byte[])
+            return ByteBufferUtil.bytesToHex(ByteBuffer.wrap((byte[])value));
+        else
+            return value.toString();
+    }
+    
+    /** constructs a typed column */
+    public Col makeCol(String keyspace, String columnFamily, byte[] name, byte[] value)
+    {
+        CfDef cfDef = cfDefs.get(String.format("%s.%s", keyspace, columnFamily));
+        AbstractType comparator = getComparator(keyspace, columnFamily, Specifier.Comparator, cfDef);
+        AbstractType validator = getComparator(keyspace, columnFamily, Specifier.Validator, null);
+        // todo: generate less garbage.
+        return new Col(comparator.compose(ByteBuffer.wrap(name)), validator.compose(ByteBuffer.wrap(value)));
+    }
+}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/Connection.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/Connection.java
index e69de29b..090b8632 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/Connection.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/Connection.java
@@ -0,0 +1,171 @@
+/*
+ * 
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ * 
+ */
+
+package org.apache.cassandra.cql.jdbc;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import org.apache.cassandra.thrift.AuthenticationException;
+import org.apache.cassandra.thrift.AuthenticationRequest;
+import org.apache.cassandra.thrift.AuthorizationException;
+import org.apache.cassandra.thrift.Cassandra;
+import org.apache.cassandra.thrift.Compression;
+import org.apache.cassandra.thrift.CqlResult;
+import org.apache.cassandra.thrift.InvalidRequestException;
+import org.apache.cassandra.thrift.TimedOutException;
+import org.apache.cassandra.thrift.UnavailableException;
+import org.apache.thrift.TException;
+import org.apache.thrift.protocol.TBinaryProtocol;
+import org.apache.thrift.protocol.TProtocol;
+import org.apache.thrift.transport.TFramedTransport;
+import org.apache.thrift.transport.TSocket;
+import org.apache.thrift.transport.TTransport;
+import org.apache.thrift.transport.TTransportException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/** CQL connection object. */
+class Connection
+{
+    private static final Pattern KeyspacePattern = Pattern.compile("USE (\\w+);?", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
+    private static final Pattern SelectPattern = Pattern.compile("SELECT\\s+.+\\s+FROM\\s+(\\w+).*", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
+    
+    public static Compression defaultCompression = Compression.GZIP;
+    public final String hostName;
+    public final int portNo;
+    
+    private static final Logger logger = LoggerFactory.getLogger(Connection.class);
+    protected long timeOfLastFailure = 0;
+    protected int numFailures = 0;
+    private Cassandra.Client client;
+    private TTransport transport;
+    
+    // todo: encapsulate.
+    public String curKeyspace;
+    public String curColumnFamily;
+    public ColumnDecoder decoder;
+    
+    /**
+     * Create a new <code>Connection</code> instance.
+     * 
+     * @param hostName hostname or IP address of the remote host
+     * @param portNo TCP port number
+     * @throws TTransportException if unable to connect
+     */
+    public Connection(String hostName, int portNo) throws TTransportException
+    {
+        this.hostName = hostName;
+        this.portNo = portNo;
+        TSocket socket = new TSocket(hostName, portNo);
+        transport = new TFramedTransport(socket);
+        TProtocol protocol = new TBinaryProtocol(transport);
+        client = new Cassandra.Client(protocol);
+        socket.open();
+        
+        logger.info("Connected to {}:{}", hostName, portNo);
+    }
+    
+
+    /**
+     * Create a new <code>Connection</code> instance.
+     * 
+     * @param hostName hostname or IP address of the remote host
+     * @param portNo TCP port number
+     * @throws AuthorizationException if authorization fails
+     * @throws AuthenticationException for authentication failures
+     * @throws TException on errors encountered issuing the request(s) 
+     */
+    public Connection(String hostName, int portNo, String userName, String password)
+    throws AuthenticationException, AuthorizationException, TException
+    {
+        this(hostName, portNo);
+        
+        Map<String, String> credentials = new HashMap<String, String>();
+        AuthenticationRequest areq = new AuthenticationRequest(credentials);
+        client.login(areq) ;
+    }
+    
+    /**
+     * Execute a CQL query.
+     * 
+     * @param queryStr a CQL query string
+     * @return the query results encoded as a CqlResult struct
+     * @throws InvalidRequestException on poorly constructed or illegal requests
+     * @throws UnavailableException when not all required replicas could be created/read
+     * @throws TimedOutException when a cluster operation timed out
+     * @throws TException
+     */
+    public CqlResult execute(String queryStr)
+    throws InvalidRequestException, UnavailableException, TimedOutException, TException
+    {
+        return execute(queryStr, defaultCompression);
+    }
+    
+    /**
+     * Execute a CQL query.
+     * 
+     * @param queryStr a CQL query string
+     * @param compress query compression to use
+     * @return the query results encoded as a CqlResult struct
+     * @throws InvalidRequestException on poorly constructed or illegal requests
+     * @throws UnavailableException when not all required replicas could be created/read
+     * @throws TimedOutException when a cluster operation timed out
+     * @throws TException
+     */
+    public CqlResult execute(String queryStr, Compression compress)
+    throws InvalidRequestException, UnavailableException, TimedOutException, TException
+    {
+        if (decoder == null)
+            decoder = new ColumnDecoder(client.describe_keyspaces());
+        
+        Matcher isKeyspace = KeyspacePattern.matcher(queryStr);
+        if (isKeyspace.matches())
+            curKeyspace = isKeyspace.group(1);
+        Matcher isSelect = SelectPattern.matcher(queryStr);
+        if (isSelect.matches())
+            curColumnFamily = isSelect.group(1);
+        try
+        {
+            return client.execute_cql_query(Utils.compressQuery(queryStr, compress), compress);
+        }
+        catch (TException error)
+        {
+            numFailures++;
+            timeOfLastFailure = System.currentTimeMillis();
+            throw error;
+        }
+    }
+    
+    /** Shutdown the remote connection */
+    public void close()
+    {
+        transport.close();
+    }
+    
+    /** Connection state. */
+    public boolean isOpen()
+    {
+        return transport.isOpen();
+    }
+}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/ConnectionPool.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/ConnectionPool.java
index e69de29b..be57dffc 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/ConnectionPool.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/ConnectionPool.java
@@ -0,0 +1,176 @@
+/*
+ * 
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ * 
+ */
+
+package org.apache.cassandra.cql.jdbc;
+
+import java.util.Date;
+import java.util.Timer;
+import java.util.TimerTask;
+import java.util.concurrent.ConcurrentLinkedQueue;
+
+import org.apache.thrift.transport.TTransportException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Simple connection-caching pool implementation.
+ * 
+ * <p>A <code>ConnectionPool</code> provides the simplest possible connection
+ * pooling, lazily creating new connections if needed as
+ * <code>borrowClient</code> is called.  Connections are re-added to the pool
+ * by <code>returnConnection</code>, unless doing so would exceed the maximum
+ * pool size.</p>
+ * 
+ * <p>Example usage:</p>
+ * 
+ * <code>
+ * ConnectionPool pool = new ConnectionPool("localhost", 9160);<br />
+ * Connection conn = pool.borrowConnection();<br />
+ * conn.execute(...);<br />
+ * pool.returnConnection(pool);<br />
+ * </code>
+ */
+class ConnectionPool
+{
+    public static final int DEFAULT_MAX_CONNECTIONS = 25;
+    public static final int DEFAULT_PORT = 9160;
+    public static final int DEFAULT_MAX_IDLE = 5;
+    public static final long DEFAULT_EVICTION_DELAY_MILLIS = 10000; // 10 seconds
+    private static final Logger logger = LoggerFactory.getLogger(ConnectionPool.class);
+    
+    private ConcurrentLinkedQueue<Connection> connections = new ConcurrentLinkedQueue<Connection>();
+    private Timer eviction;
+    private String hostName;
+    private int portNo;
+    private int maxConns, maxIdle;
+    
+    /**
+     * Create a new <code>ConnectionPool</code> for a given hostname.
+     * 
+     * @param hostName hostname or IP address to open connections to
+     * @throws TTransportException if unable to connect
+     */
+    public ConnectionPool(String hostName) throws TTransportException
+    {
+        this(hostName, DEFAULT_PORT, DEFAULT_MAX_CONNECTIONS, DEFAULT_MAX_IDLE, DEFAULT_EVICTION_DELAY_MILLIS);
+    }
+    
+    /**
+     * Create a new <code>ConnectionPool</code> for the given hostname and
+     * port number.
+     * 
+     * @param hostName hostname or IP address to open connections to
+     * @param portNo port number to connect to
+     * @throws TTransportException if unable to connect
+     */
+    public ConnectionPool(String hostName, int portNo) throws TTransportException
+    {
+        this(hostName, portNo, DEFAULT_MAX_CONNECTIONS, DEFAULT_MAX_IDLE, DEFAULT_EVICTION_DELAY_MILLIS);
+    }
+    
+    /**
+     * Create a new <code>ConnectionPool</code>.
+     * 
+     * @param hostName hostname or IP address to open connections to
+     * @param portNo portNo port number to connect to
+     * @param maxConns the maximum number of connections to save in the pool
+     * @param maxIdle the max number of connections allowed in the pool after an eviction
+     * @param evictionDelay the number milliseconds between eviction runs
+     * @throws TTransportException if unable to connect
+     */
+    public ConnectionPool(String hostName, int portNo, int maxConns, int maxIdle, long evictionDelay)
+    throws TTransportException
+    {
+        this.hostName = hostName;
+        this.portNo = portNo;
+        this.maxConns = maxConns;
+        this.maxIdle = maxIdle;
+        
+        eviction = new Timer("EVICTION-THREAD", true);
+        eviction.schedule(new EvictionTask(), new Date(), evictionDelay);
+        
+        connections.add(new Connection(hostName, portNo));
+    }
+    
+    /**
+     * Check a <code>Connection</code> instance out from the pool, creating a
+     * new one if the pool is exhausted.
+     */
+    public Connection borrowConnection()
+    {
+        Connection conn = null;
+        
+        if ((conn = connections.poll()) == null)
+        {
+            try
+            {
+                conn = new Connection(hostName, portNo);
+            }
+            catch (TTransportException error)
+            {
+                logger.error(String.format("Error connecting to %s:%s", hostName, portNo), error);
+            }
+        }
+        
+        return conn;
+    }
+    
+    /**
+     * Returns an <code>Connection</code> instance to the pool.  If the pool
+     * already contains the maximum number of allowed connections, then the
+     * instance's <code>close</code> method is called and it is discarded.
+     */
+    public void returnConnection(Connection connection)
+    {
+        if (connections.size() >= maxConns)
+        {
+            if (connection.isOpen()) connection.close();
+            logger.warn("Max pool size reached; Connection discarded.");
+            return;
+        }
+        
+        if (!connection.isOpen())
+        {
+            logger.warn("Stubbornly refusing to return a closed connection to the pool (discarded instead).");
+            return;
+        }
+        
+        connections.add(connection);
+    }
+    
+    private class EvictionTask extends TimerTask
+    {
+        public void run()
+        {
+            int count = 0;
+            
+            while (connections.size() > maxIdle)
+            {
+                Connection conn = connections.poll();
+                if (conn.isOpen()) conn.close();
+                count++;
+            }
+            
+            if (count > 0)
+                logger.debug("Eviction run complete: {} connections evicted.", count);
+        }
+    }
+}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/DriverResolverException.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/DriverResolverException.java
index e69de29b..d07507ef 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/DriverResolverException.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/DriverResolverException.java
@@ -0,0 +1,39 @@
+/*
+ * 
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ * 
+ */
+package org.apache.cassandra.cql.jdbc;
+/**
+ * Runtime exception handling in case of runtime error during Driver resolving. 
+ */
+public class DriverResolverException extends RuntimeException {
+
+	/**
+	 * Default serial version UID. 
+	 */
+	private static final long serialVersionUID = 1L;
+
+	/**
+	 * Constructor using fields.
+	 * @param errMsg error message.
+	 */
+	public DriverResolverException(String errMsg) {
+		super(errMsg);
+	}
+}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/InvalidUrlException.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/InvalidUrlException.java
index e69de29b..5b9fd222 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/InvalidUrlException.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/InvalidUrlException.java
@@ -0,0 +1,41 @@
+/*
+ * 
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ * 
+ */
+package org.apache.cassandra.cql.jdbc;
+
+/**
+ * Runtime exception handling during incorrect connection url provided.
+ */
+public class InvalidUrlException extends RuntimeException {
+	
+	/**
+	 *  Default serial version UID
+	 */
+	private static final long serialVersionUID = 1L;
+
+	/**
+	 * Constructor using fields.
+	 * @param errMsg error message.
+	 */
+	public InvalidUrlException(String errMsg) {
+		super(errMsg);
+	}
+
+}
diff --git a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/Utils.java b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/Utils.java
index e69de29b..30b09f72 100644
--- a/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/Utils.java
+++ b/cassandra/trunk/drivers/java/src/org/apache/cassandra/cql/jdbc/Utils.java
@@ -0,0 +1,58 @@
+/*
+ * 
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ * 
+ */
+
+package org.apache.cassandra.cql.jdbc;
+
+import java.io.ByteArrayOutputStream;
+import java.nio.ByteBuffer;
+import java.util.zip.Deflater;
+
+import org.apache.cassandra.thrift.Compression;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+class Utils
+{
+    private static final Logger logger = LoggerFactory.getLogger(Utils.class);
+    
+    public static ByteBuffer compressQuery(String queryStr, Compression compression)
+    {
+        byte[] data = queryStr.getBytes();
+        Deflater compressor = new Deflater();
+        compressor.setInput(data);
+        compressor.finish();
+        
+        ByteArrayOutputStream byteArray = new ByteArrayOutputStream();
+        byte[] buffer = new byte[1024];
+        
+        while (!compressor.finished())
+        {
+            int size = compressor.deflate(buffer);
+            byteArray.write(buffer, 0, size);
+        }
+        
+        logger.trace("Compressed query statement {} bytes in length to {} bytes",
+                     data.length,
+                     byteArray.size());
+        
+        return ByteBuffer.wrap(byteArray.toByteArray());
+    }
+}
diff --git a/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/EmbeddedServiceBase.java b/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/EmbeddedServiceBase.java
index e69de29b..b88f238d 100644
--- a/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/EmbeddedServiceBase.java
+++ b/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/EmbeddedServiceBase.java
@@ -0,0 +1,76 @@
+package org.apache.cassandra.cql;
+
+import java.io.IOException;
+import java.net.Socket;
+import java.net.UnknownHostException;
+
+import org.apache.cassandra.config.CFMetaData;
+import org.apache.cassandra.config.ConfigurationException;
+import org.apache.cassandra.config.DatabaseDescriptor;
+import org.apache.cassandra.config.KSMetaData;
+import org.apache.cassandra.service.EmbeddedCassandraService;
+
+/**
+ * The abstract BaseClass.
+ */
+public abstract class EmbeddedServiceBase
+{
+
+    /** The embedded server cassandra. */
+    private static EmbeddedCassandraService cassandra;
+    
+    /**
+     * Start cassandra server.
+     * @throws ConfigurationException 
+     *
+     * @throws Exception the exception
+     */
+    static void startCassandraServer() throws IOException, ConfigurationException
+    {
+        if (!checkIfServerRunning())
+        {
+            loadData();
+            cassandra = new EmbeddedCassandraService();
+            cassandra.start();
+        }
+    }
+
+    
+    /**
+     * Load yaml tables.
+     *
+     * @throws ConfigurationException the configuration exception
+     */
+    static void loadData() throws ConfigurationException
+    {
+        for (KSMetaData table : DatabaseDescriptor.readTablesFromYaml())
+        {
+            for (CFMetaData cfm : table.cfMetaData().values())
+            {
+                CFMetaData.map(cfm);
+            }
+            DatabaseDescriptor.setTableDefinition(table, DatabaseDescriptor.getDefsVersion());
+        }
+    }
+    /**
+     * Check if server running.
+     *
+     * @return true, if successful
+     */
+    static boolean checkIfServerRunning()
+    {
+        try
+        {
+            Socket socket = new Socket("127.0.0.1", 9170);
+            return socket.getInetAddress() != null;
+        } 
+        catch (UnknownHostException e)
+        {
+            return false;
+        }
+        catch (IOException e)
+        {
+            return false;
+        }
+    }
+}
diff --git a/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/JdbcDriverTest.java b/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/JdbcDriverTest.java
index e69de29b..5e018900 100644
--- a/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/JdbcDriverTest.java
+++ b/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/JdbcDriverTest.java
@@ -0,0 +1,262 @@
+package org.apache.cassandra.cql;
+/*
+ * 
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ * 
+ */
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.nio.FloatBuffer;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+import org.apache.cassandra.utils.FBUtilities;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+/**
+ * Test case for unit test of various methods of JDBC implementation.
+ */
+public class JdbcDriverTest extends EmbeddedServiceBase
+{
+    private static java.sql.Connection con = null;
+    private static final String first = FBUtilities.bytesToHex("first".getBytes());
+    private static final String firstrec = FBUtilities.bytesToHex("firstrec".getBytes());
+    private static final String last = FBUtilities.bytesToHex("last".getBytes());
+    private static final String lastrec = FBUtilities.bytesToHex("lastrec".getBytes());
+
+    /** SetUp */
+    @BeforeClass
+    public static void startServer() throws Exception
+    {
+        startCassandraServer();
+        Class.forName("org.apache.cassandra.cql.jdbc.CassandraDriver");
+        con = DriverManager.getConnection("jdbc:cassandra:root/root@localhost:9170/Keyspace1");
+        String[] inserts = 
+        {
+//            String.format("UPDATE Standard1 SET \"%s\" = \"%s\", \"%s\" = \"%s\" WHERE KEY = \"jsmith\"", first, firstrec, last, lastrec),    
+            "UPDATE JdbcInteger SET 1 = 11, 2 = 22 WHERE KEY = \"jsmith\"",
+            "UPDATE JdbcInteger SET 3 = 33, 4 = 44 WHERE KEY = \"jsmith\"",
+            "UPDATE JdbcLong SET 1L = 11L, 2L = 22L WHERE KEY = \"jsmith\"",
+            "UPDATE JdbcAscii SET \"first\" = \"firstrec\", \"last\" = \"lastrec\" WHERE key = \"jsmith\"",
+//            String.format("UPDATE JdbcBytes SET \"%s\" = \"%s\", \"%s\" = \"%s\" WHERE key = \"jsmith\"", first, firstrec, last, lastrec),
+            "UPDATE JdbcUtf8 SET \"first\" = \"firstrec\", \"last\" = \"lastrec\" WHERE key = \"jsmith\"",
+        };
+        for (String q : inserts)
+            executeNoResults(con, q);
+    }
+    
+    /** Method to test statement. */
+    @Test
+    public void testWithStatement() throws SQLException
+    {
+        Statement stmt = con.createStatement();
+        
+//        String selectQ = String.format("SELECT \"%s\", \"%s\" FROM Standard1 WHERE KEY=\"jsmith\"", first, last);
+//        checkResultSet(stmt.executeQuery(selectQ), "Bytes", 1, first, last);
+        
+        String selectQ = "SELECT 1, 2 FROM JdbcInteger WHERE KEY=\"jsmith\"";
+        checkResultSet(stmt.executeQuery(selectQ), "Int", 1, "1", "2");
+        
+        selectQ = "SELECT 3, 4 FROM JdbcInteger WHERE KEY=\"jsmith\"";
+        checkResultSet(stmt.executeQuery(selectQ), "Int", 1, "3", "4");
+        
+        selectQ = "SELECT 1, 2, 3, 4 FROM JdbcInteger WHERE KEY=\"jsmith\"";
+        checkResultSet(stmt.executeQuery(selectQ), "Int", 1, "1", "2", "3", "4");
+        
+        selectQ = "SELECT 1L, 2L FROM JdbcLong WHERE KEY=\"jsmith\"";
+        checkResultSet(stmt.executeQuery(selectQ), "Long", 1, "1", "2");
+        
+        selectQ = "SELECT \"first\", \"last\" FROM JdbcAscii WHERE KEY=\"jsmith\"";
+        checkResultSet(stmt.executeQuery(selectQ), "String", 1, "first", "last");
+        
+//        selectQ = String.format("SELECT \"%s\", \"%s\" FROM JdbcBytes WHERE KEY=\"jsmith\"", first, last);
+//        checkResultSet(stmt.executeQuery(selectQ), "Bytes", 1, first, last);
+        
+        selectQ = "SELECT \"first\", \"last\" FROM JdbcUtf8 WHERE KEY=\"jsmith\"";
+        checkResultSet(stmt.executeQuery(selectQ), "String", 1, "first", "last");
+    }
+
+   /** Method to test with prepared statement.*/
+   @Test
+    public void testWithPreparedStatement() throws SQLException
+    {
+//        String selectQ = "SELECT \"first\", \"last\" FROM Standard1 WHERE KEY=\"jsmith\"";
+//        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Bytes", 1, "first", "last");
+        
+        String selectQ = "SELECT 1, 2 FROM JdbcInteger WHERE KEY=\"jsmith\"";
+        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Int", 1, "1", "2");
+        
+        selectQ = "SELECT 3, 4 FROM JdbcInteger WHERE KEY=\"jsmith\"";
+        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Int", 1, "3", "4");
+        
+        selectQ = "SELECT 1, 2, 3, 4 FROM JdbcInteger WHERE KEY=\"jsmith\"";
+        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Int", 1, "1", "2", "3", "4");
+        
+        selectQ = "SELECT 1L, 2L FROM JdbcLong WHERE KEY=\"jsmith\"";
+        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Long", 1, "1", "2");
+        
+        selectQ = "SELECT \"first\", \"last\" FROM JdbcAscii WHERE KEY=\"jsmith\"";
+        checkResultSet(executePreparedStatementWithResults(con, selectQ), "String", 1, "first", "last");
+        
+//        selectQ = "SELECT \"first\", \"last\" FROM JdbcBytes WHERE KEY=\"jsmith\"";
+//        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Bytes", 1, "first", "last");
+        
+        selectQ = "SELECT \"first\", \"last\" FROM JdbcUtf8 WHERE KEY=\"jsmith\"";
+        checkResultSet(executePreparedStatementWithResults(con, selectQ), "String", 1, "first", "last");
+    }
+
+    /* Method to test with Delete statement. */
+    @Test
+    public void testWithDeleteStatement() throws SQLException
+    {
+        // the pattern: 0) a deltion, 1) ensure deletion 2) ensure deletion wasn't over-eager.
+        String[] statements = 
+        {
+//                "DELETE \"firstN\", \"lastN\" FROM Standard1 WHERE KEY=\"jsmith\"",
+//                "SELECT \"firstN\", \"lastN\" FROM Standard1 WHERE KEY=\"jsmith\"",
+//                "SELECT \"first\" FROM Standard1 WHERE KEY=\"jsmith\"",
+                
+                "DELETE 1, 3 FROM JdbcInteger WHERE KEY=\"jsmith\"",
+                "SELECT 1, 3 FROM JdbcInteger WHERE KEY=\"jsmith\"", // fails.
+                "SELECT 2, 4 FROM JdbcInteger WHERE KEY=\"jsmith\"",
+                
+                "DELETE 1L FROM JdbcLong WHERE KEY=\"jsmith\"",
+                "SELECT 1L FROM JdbcLong WHERE KEY=\"jsmith\"",
+                "SELECT 2L FROM JdbcLong WHERE KEY=\"jsmith\"",
+                
+                "DELETE \"first\" FROM JdbcAscii WHERE KEY=\"jsmith\"",
+                "SELECT \"first\" FROM JdbcAscii WHERE KEY=\"jsmith\"",
+                "SELECT \"last\" FROM JdbcAscii WHERE KEY=\"jsmith\"",
+                
+//                "DELETE \"first\" FROM JdbcBytes WHERE KEY=\"jsmith\"",
+//                "SELECT \"first\" FROM JdbcBytes WHERE KEY=\"jsmith\"",
+//                "SELECT \"last\" FROM JdbcBytes WHERE KEY=\"jsmith\"",
+                
+                "DELETE \"first\" FROM JdbcUtf8 WHERE KEY=\"jsmith\"",
+                "SELECT \"first\" FROM JdbcUtf8 WHERE KEY=\"jsmith\"",
+                "SELECT \"last\" FROM JdbcUtf8 WHERE KEY=\"jsmith\"",
+        };
+        
+        for (int i = 0; i < statements.length/3; i++) 
+        {
+            executeNoResults(con, statements[3*i]);
+            ResultSet rs = executePreparedStatementWithResults(con, statements[3*i+1]);
+            assert !rs.next() : statements[3*i+1];
+            rs.close();
+            rs = executePreparedStatementWithResults(con, statements[3*i+2]);
+            assert rs.next() : statements[3*i+2];
+        }
+    }
+
+    @AfterClass
+    public static void stopServer() throws SQLException
+    {
+        if (con != null)
+        {
+            String[] stmts = 
+            {
+//                "TRUNCATE Standard1",
+//                "TRUNCATE JcbcAscii", // todo: this one is broken for some reason.
+                "TRUNCATE JdbcInteger",
+                "TRUNCATE JdbcLong",
+//                "TRUNCATE JdbcBytes",
+                "TRUNCATE JdbcUtf8",
+            };
+            for (String stmt : stmts)
+            {
+                try 
+                {
+                    executeNoResults(con, stmt);
+                }
+                catch (SQLException ex)
+                {
+                    throw new SQLException(stmt, ex);
+                }
+            }
+            con.close();
+            con = null;
+        }
+    }
+    
+    // todo: check expected values as well.
+    /** iterates over a result set checking columns */
+    private static void checkResultSet(ResultSet rs, String accessor, int expectedRows, String... cols) throws SQLException
+    {
+        int actualRows = 0;
+        assert rs != null;
+        while (rs.next())
+        {
+            actualRows++;
+            for (int c = 0; c < cols.length; c++)
+            {
+                // getString and getObject should always work.
+                assert rs.getString(cols[c]) != null;
+                assert rs.getString(c) != null;
+                assert rs.getObject(cols[c]) != null;
+                assert rs.getObject(c) != null;
+                
+                // now call the accessor.
+                try
+                {
+                    Method byInt = rs.getClass().getDeclaredMethod("get" + accessor, int.class);
+                    byInt.setAccessible(true);
+                    assert byInt.invoke(rs, c) != null;
+                    
+                    Method byString = rs.getClass().getDeclaredMethod("get" + accessor, String.class);
+                    byString.setAccessible(true);
+                    assert byString.invoke(rs, cols[c]) != null;
+                }
+                catch (NoSuchMethodException ex)
+                {
+                    throw new RuntimeException(ex);
+                }
+                catch (IllegalAccessException ex)
+                {
+                    throw new RuntimeException(ex);
+                }
+                catch (InvocationTargetException ex) 
+                {
+                    throw new RuntimeException(ex);
+                }
+            }
+        }
+        
+        assert actualRows == expectedRows;
+    }
+    
+    /** executes a prepared statement */
+    private static ResultSet executePreparedStatementWithResults(final Connection con, final String selectQ) throws SQLException
+    {
+        PreparedStatement statement = con.prepareStatement(selectQ);
+        return statement.executeQuery();
+    }
+
+    /** executes an prepared statement */
+    private static void executeNoResults(final Connection con, final String cql) throws SQLException
+    {
+        PreparedStatement statement = con.prepareStatement(cql);
+        statement.execute();
+    }
+}
diff --git a/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/driver/jdbc/EmbeddedServiceBase.java b/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/driver/jdbc/EmbeddedServiceBase.java
index 2bc9a538..e69de29b 100644
--- a/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/driver/jdbc/EmbeddedServiceBase.java
+++ b/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/driver/jdbc/EmbeddedServiceBase.java
@@ -1,76 +0,0 @@
-package org.apache.cassandra.cql.driver.jdbc;
-
-import java.io.IOException;
-import java.net.Socket;
-import java.net.UnknownHostException;
-
-import org.apache.cassandra.config.CFMetaData;
-import org.apache.cassandra.config.ConfigurationException;
-import org.apache.cassandra.config.DatabaseDescriptor;
-import org.apache.cassandra.config.KSMetaData;
-import org.apache.cassandra.service.EmbeddedCassandraService;
-
-/**
- * The abstract BaseClass.
- */
-public abstract class EmbeddedServiceBase
-{
-
-    /** The embedded server cassandra. */
-    private static EmbeddedCassandraService cassandra;
-    
-    /**
-     * Start cassandra server.
-     * @throws ConfigurationException 
-     *
-     * @throws Exception the exception
-     */
-    static void startCassandraServer() throws IOException, ConfigurationException
-    {
-        if (!checkIfServerRunning())
-        {
-            loadData();
-            cassandra = new EmbeddedCassandraService();
-            cassandra.start();
-        }
-    }
-
-    
-    /**
-     * Load yaml tables.
-     *
-     * @throws ConfigurationException the configuration exception
-     */
-    static void loadData() throws ConfigurationException
-    {
-        for (KSMetaData table : DatabaseDescriptor.readTablesFromYaml())
-        {
-            for (CFMetaData cfm : table.cfMetaData().values())
-            {
-                CFMetaData.map(cfm);
-            }
-            DatabaseDescriptor.setTableDefinition(table, DatabaseDescriptor.getDefsVersion());
-        }
-    }
-    /**
-     * Check if server running.
-     *
-     * @return true, if successful
-     */
-    static boolean checkIfServerRunning()
-    {
-        try
-        {
-            Socket socket = new Socket("127.0.0.1", 9170);
-            return socket.getInetAddress() != null;
-        } 
-        catch (UnknownHostException e)
-        {
-            return false;
-        }
-        catch (IOException e)
-        {
-            return false;
-        }
-    }
-}
diff --git a/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/driver/jdbc/JdbcDriverTest.java b/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/driver/jdbc/JdbcDriverTest.java
index 54090846..e69de29b 100644
--- a/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/driver/jdbc/JdbcDriverTest.java
+++ b/cassandra/trunk/drivers/java/test/org/apache/cassandra/cql/driver/jdbc/JdbcDriverTest.java
@@ -1,262 +0,0 @@
-package org.apache.cassandra.cql.driver.jdbc;
-/*
- * 
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * 
- *   http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- * 
- */
-
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.nio.FloatBuffer;
-import java.sql.Connection;
-import java.sql.DriverManager;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.sql.Statement;
-
-import org.apache.cassandra.utils.FBUtilities;
-import org.junit.AfterClass;
-import org.junit.BeforeClass;
-import org.junit.Test;
-
-/**
- * Test case for unit test of various methods of JDBC implementation.
- */
-public class JdbcDriverTest extends EmbeddedServiceBase
-{
-    private static java.sql.Connection con = null;
-    private static final String first = FBUtilities.bytesToHex("first".getBytes());
-    private static final String firstrec = FBUtilities.bytesToHex("firstrec".getBytes());
-    private static final String last = FBUtilities.bytesToHex("last".getBytes());
-    private static final String lastrec = FBUtilities.bytesToHex("lastrec".getBytes());
-
-    /** SetUp */
-    @BeforeClass
-    public static void startServer() throws Exception
-    {
-        startCassandraServer();
-        Class.forName("org.apache.cassandra.cql.driver.jdbc.CassandraDriver");
-        con = DriverManager.getConnection("jdbc:cassandra:root/root@localhost:9170/Keyspace1");
-        String[] inserts = 
-        {
-//            String.format("UPDATE Standard1 SET \"%s\" = \"%s\", \"%s\" = \"%s\" WHERE KEY = \"jsmith\"", first, firstrec, last, lastrec),    
-            "UPDATE JdbcInteger SET 1 = 11, 2 = 22 WHERE KEY = \"jsmith\"",
-            "UPDATE JdbcInteger SET 3 = 33, 4 = 44 WHERE KEY = \"jsmith\"",
-            "UPDATE JdbcLong SET 1L = 11L, 2L = 22L WHERE KEY = \"jsmith\"",
-            "UPDATE JdbcAscii SET \"first\" = \"firstrec\", \"last\" = \"lastrec\" WHERE key = \"jsmith\"",
-//            String.format("UPDATE JdbcBytes SET \"%s\" = \"%s\", \"%s\" = \"%s\" WHERE key = \"jsmith\"", first, firstrec, last, lastrec),
-            "UPDATE JdbcUtf8 SET \"first\" = \"firstrec\", \"last\" = \"lastrec\" WHERE key = \"jsmith\"",
-        };
-        for (String q : inserts)
-            executeNoResults(con, q);
-    }
-    
-    /** Method to test statement. */
-    @Test
-    public void testWithStatement() throws SQLException
-    {
-        Statement stmt = con.createStatement();
-        
-//        String selectQ = String.format("SELECT \"%s\", \"%s\" FROM Standard1 WHERE KEY=\"jsmith\"", first, last);
-//        checkResultSet(stmt.executeQuery(selectQ), "Bytes", 1, first, last);
-        
-        String selectQ = "SELECT 1, 2 FROM JdbcInteger WHERE KEY=\"jsmith\"";
-        checkResultSet(stmt.executeQuery(selectQ), "Int", 1, "1", "2");
-        
-        selectQ = "SELECT 3, 4 FROM JdbcInteger WHERE KEY=\"jsmith\"";
-        checkResultSet(stmt.executeQuery(selectQ), "Int", 1, "3", "4");
-        
-        selectQ = "SELECT 1, 2, 3, 4 FROM JdbcInteger WHERE KEY=\"jsmith\"";
-        checkResultSet(stmt.executeQuery(selectQ), "Int", 1, "1", "2", "3", "4");
-        
-        selectQ = "SELECT 1L, 2L FROM JdbcLong WHERE KEY=\"jsmith\"";
-        checkResultSet(stmt.executeQuery(selectQ), "Long", 1, "1", "2");
-        
-        selectQ = "SELECT \"first\", \"last\" FROM JdbcAscii WHERE KEY=\"jsmith\"";
-        checkResultSet(stmt.executeQuery(selectQ), "String", 1, "first", "last");
-        
-//        selectQ = String.format("SELECT \"%s\", \"%s\" FROM JdbcBytes WHERE KEY=\"jsmith\"", first, last);
-//        checkResultSet(stmt.executeQuery(selectQ), "Bytes", 1, first, last);
-        
-        selectQ = "SELECT \"first\", \"last\" FROM JdbcUtf8 WHERE KEY=\"jsmith\"";
-        checkResultSet(stmt.executeQuery(selectQ), "String", 1, "first", "last");
-    }
-
-   /** Method to test with prepared statement.*/
-   @Test
-    public void testWithPreparedStatement() throws SQLException
-    {
-//        String selectQ = "SELECT \"first\", \"last\" FROM Standard1 WHERE KEY=\"jsmith\"";
-//        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Bytes", 1, "first", "last");
-        
-        String selectQ = "SELECT 1, 2 FROM JdbcInteger WHERE KEY=\"jsmith\"";
-        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Int", 1, "1", "2");
-        
-        selectQ = "SELECT 3, 4 FROM JdbcInteger WHERE KEY=\"jsmith\"";
-        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Int", 1, "3", "4");
-        
-        selectQ = "SELECT 1, 2, 3, 4 FROM JdbcInteger WHERE KEY=\"jsmith\"";
-        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Int", 1, "1", "2", "3", "4");
-        
-        selectQ = "SELECT 1L, 2L FROM JdbcLong WHERE KEY=\"jsmith\"";
-        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Long", 1, "1", "2");
-        
-        selectQ = "SELECT \"first\", \"last\" FROM JdbcAscii WHERE KEY=\"jsmith\"";
-        checkResultSet(executePreparedStatementWithResults(con, selectQ), "String", 1, "first", "last");
-        
-//        selectQ = "SELECT \"first\", \"last\" FROM JdbcBytes WHERE KEY=\"jsmith\"";
-//        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Bytes", 1, "first", "last");
-        
-        selectQ = "SELECT \"first\", \"last\" FROM JdbcUtf8 WHERE KEY=\"jsmith\"";
-        checkResultSet(executePreparedStatementWithResults(con, selectQ), "String", 1, "first", "last");
-    }
-
-    /* Method to test with Delete statement. */
-    @Test
-    public void testWithDeleteStatement() throws SQLException
-    {
-        // the pattern: 0) a deltion, 1) ensure deletion 2) ensure deletion wasn't over-eager.
-        String[] statements = 
-        {
-//                "DELETE \"firstN\", \"lastN\" FROM Standard1 WHERE KEY=\"jsmith\"",
-//                "SELECT \"firstN\", \"lastN\" FROM Standard1 WHERE KEY=\"jsmith\"",
-//                "SELECT \"first\" FROM Standard1 WHERE KEY=\"jsmith\"",
-                
-                "DELETE 1, 3 FROM JdbcInteger WHERE KEY=\"jsmith\"",
-                "SELECT 1, 3 FROM JdbcInteger WHERE KEY=\"jsmith\"", // fails.
-                "SELECT 2, 4 FROM JdbcInteger WHERE KEY=\"jsmith\"",
-                
-                "DELETE 1L FROM JdbcLong WHERE KEY=\"jsmith\"",
-                "SELECT 1L FROM JdbcLong WHERE KEY=\"jsmith\"",
-                "SELECT 2L FROM JdbcLong WHERE KEY=\"jsmith\"",
-                
-                "DELETE \"first\" FROM JdbcAscii WHERE KEY=\"jsmith\"",
-                "SELECT \"first\" FROM JdbcAscii WHERE KEY=\"jsmith\"",
-                "SELECT \"last\" FROM JdbcAscii WHERE KEY=\"jsmith\"",
-                
-//                "DELETE \"first\" FROM JdbcBytes WHERE KEY=\"jsmith\"",
-//                "SELECT \"first\" FROM JdbcBytes WHERE KEY=\"jsmith\"",
-//                "SELECT \"last\" FROM JdbcBytes WHERE KEY=\"jsmith\"",
-                
-                "DELETE \"first\" FROM JdbcUtf8 WHERE KEY=\"jsmith\"",
-                "SELECT \"first\" FROM JdbcUtf8 WHERE KEY=\"jsmith\"",
-                "SELECT \"last\" FROM JdbcUtf8 WHERE KEY=\"jsmith\"",
-        };
-        
-        for (int i = 0; i < statements.length/3; i++) 
-        {
-            executeNoResults(con, statements[3*i]);
-            ResultSet rs = executePreparedStatementWithResults(con, statements[3*i+1]);
-            assert !rs.next() : statements[3*i+1];
-            rs.close();
-            rs = executePreparedStatementWithResults(con, statements[3*i+2]);
-            assert rs.next() : statements[3*i+2];
-        }
-    }
-
-    @AfterClass
-    public static void stopServer() throws SQLException
-    {
-        if (con != null)
-        {
-            String[] stmts = 
-            {
-//                "TRUNCATE Standard1",
-//                "TRUNCATE JcbcAscii", // todo: this one is broken for some reason.
-                "TRUNCATE JdbcInteger",
-                "TRUNCATE JdbcLong",
-//                "TRUNCATE JdbcBytes",
-                "TRUNCATE JdbcUtf8",
-            };
-            for (String stmt : stmts)
-            {
-                try 
-                {
-                    executeNoResults(con, stmt);
-                }
-                catch (SQLException ex)
-                {
-                    throw new SQLException(stmt, ex);
-                }
-            }
-            con.close();
-            con = null;
-        }
-    }
-    
-    // todo: check expected values as well.
-    /** iterates over a result set checking columns */
-    private static void checkResultSet(ResultSet rs, String accessor, int expectedRows, String... cols) throws SQLException
-    {
-        int actualRows = 0;
-        assert rs != null;
-        while (rs.next())
-        {
-            actualRows++;
-            for (int c = 0; c < cols.length; c++)
-            {
-                // getString and getObject should always work.
-                assert rs.getString(cols[c]) != null;
-                assert rs.getString(c) != null;
-                assert rs.getObject(cols[c]) != null;
-                assert rs.getObject(c) != null;
-                
-                // now call the accessor.
-                try
-                {
-                    Method byInt = rs.getClass().getDeclaredMethod("get" + accessor, int.class);
-                    byInt.setAccessible(true);
-                    assert byInt.invoke(rs, c) != null;
-                    
-                    Method byString = rs.getClass().getDeclaredMethod("get" + accessor, String.class);
-                    byString.setAccessible(true);
-                    assert byString.invoke(rs, cols[c]) != null;
-                }
-                catch (NoSuchMethodException ex)
-                {
-                    throw new RuntimeException(ex);
-                }
-                catch (IllegalAccessException ex)
-                {
-                    throw new RuntimeException(ex);
-                }
-                catch (InvocationTargetException ex) 
-                {
-                    throw new RuntimeException(ex);
-                }
-            }
-        }
-        
-        assert actualRows == expectedRows;
-    }
-    
-    /** executes a prepared statement */
-    private static ResultSet executePreparedStatementWithResults(final Connection con, final String selectQ) throws SQLException
-    {
-        PreparedStatement statement = con.prepareStatement(selectQ);
-        return statement.executeQuery();
-    }
-
-    /** executes an prepared statement */
-    private static void executeNoResults(final Connection con, final String cql) throws SQLException
-    {
-        PreparedStatement statement = con.prepareStatement(cql);
-        statement.execute();
-    }
-}
