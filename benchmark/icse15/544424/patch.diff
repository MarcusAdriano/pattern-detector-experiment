diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Clob.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Clob.java
index 74abedc7..f81b5bc3 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Clob.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Clob.java
@@ -100,7 +100,7 @@ public Clob(Agent agent,
     }
 
     // CTOR for ascii/unicode stream input
-    //"US-ASCII", "UTF-8", or "UnicodeBigUnmarked"
+    //"ISO-8859-1", "UTF-8", or "UnicodeBigUnmarked"
     public Clob(Agent agent,
                 java.io.InputStream inputStream,
                 String encoding,
@@ -111,7 +111,7 @@ public Clob(Agent agent,
 
         setSqlLength(length);
 
-        if (encoding.equals("US-ASCII")) {
+        if (encoding.equals("ISO-8859-1")) {
             asciiStream_ = inputStream;
             dataType_ |= ASCII_STREAM;
         } else if (encoding.equals("UTF-8")) { // "UTF-8"
@@ -141,7 +141,7 @@ public Clob(Agent agent,
      *
      * @param agent
      * @param inputStream the data to insert
-     * @param encoding encoding to use for characters. Only "US-ASCII" is
+     * @param encoding encoding to use for characters. Only "ISO-8859-1" is
      *      allowed.
      */
     public Clob(Agent agent, java.io.InputStream inputStream, String encoding)
@@ -150,7 +150,7 @@ public Clob(Agent agent, java.io.InputStream inputStream, String encoding)
         this(agent,
              isLayerBStreamingPossible( agent ));
         
-        if (encoding.equals("US-ASCII")) {
+        if (encoding.equals("ISO-8859-1")) {
             asciiStream_ = inputStream;
             dataType_ |= ASCII_STREAM;
         } else {
@@ -1004,12 +1004,12 @@ protected Clob createClobWrapper(java.sql.Clob clob) throws SqlException {
     public void convertFromAsciiToCharacterStream() throws SqlException {
         try {
             characterStream_ =
-                    new java.io.InputStreamReader(asciiStream_, "US-ASCII");
+                    new java.io.InputStreamReader(asciiStream_, "ISO-8859-1");
             dataType_ = CHARACTER_STREAM;
         } catch (java.io.UnsupportedEncodingException e) {
             throw new SqlException(agent_.logWriter_, 
                 new ClientMessageId(SQLState.UNSUPPORTED_ENCODING), 
-                "US-ASCII", "CharacterStream", e);
+                "ISO-8859-1", "CharacterStream", e);
         }
     }
 
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClobOutputStream.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClobOutputStream.java
index cba1a0ce..f2a8932d 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClobOutputStream.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClobOutputStream.java
@@ -67,7 +67,7 @@ private void writeBytes(byte b[])  throws java.io.IOException
     {
         // Since this is an OutputStream returned by Clob.setAsciiStream 
         // use Ascii encoding when creating the String from bytes
-        String str = new String(b, "US-ASCII");
+        String str = new String(b, "ISO-8859-1");
         clob_.string_ = clob_.string_.substring(0, (int) offset_ - 1);
         clob_.string_ = clob_.string_.concat(str);
         clob_.asciiStream_ = new java.io.StringBufferInputStream(clob_.string_);
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Cursor.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Cursor.java
index e0622a08..6cbf7fbd 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Cursor.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Cursor.java
@@ -1041,7 +1041,7 @@ final String getString(int column) throws SqlException {
                 return c.getAsciiStream();
             case java.sql.Types.CHAR:
                 try {
-                    return new java.io.ByteArrayInputStream(getCHAR(column).getBytes("US-ASCII"));
+                    return new java.io.ByteArrayInputStream(getCHAR(column).getBytes("ISO-8859-1"));
                 } catch (java.io.UnsupportedEncodingException e) {
                     throw new SqlException(agent_.logWriter_, 
                     		new ClientMessageId (SQLState.UNSUPPORTED_ENCODING), 
@@ -1050,7 +1050,7 @@ final String getString(int column) throws SqlException {
             case java.sql.Types.VARCHAR:
             case java.sql.Types.LONGVARCHAR:
                 try {
-                    return new java.io.ByteArrayInputStream(getVARCHAR(column).getBytes("US-ASCII"));
+                    return new java.io.ByteArrayInputStream(getVARCHAR(column).getBytes("ISO-8859-1"));
                 } catch (java.io.UnsupportedEncodingException e) {
                     throw new SqlException(agent_.logWriter_, 
                     		new ClientMessageId (SQLState.UNSUPPORTED_ENCODING), 
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java
index 489dbfaf..27e39081 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java
@@ -1095,7 +1095,7 @@ public void setAsciiStream(int parameterIndex,
                         new ClientMessageId(SQLState.CLIENT_LENGTH_OUTSIDE_RANGE_FOR_DATATYPE),
                         new Long(length), new Integer(Integer.MAX_VALUE)).getSQLException();
                 }
-                setInput(parameterIndex, new Clob(agent_, x, "US-ASCII", (int)length));
+                setInput(parameterIndex, new Clob(agent_, x, "ISO-8859-1", (int)length));
             }
         }
         catch ( SqlException se )
@@ -2570,7 +2570,7 @@ public void setAsciiStream(int parameterIndex, InputStream x)
                     setNull(parameterIndex, java.sql.Types.LONGVARCHAR);
                     return;
                 }
-                setInput(parameterIndex, new Clob(agent_, x, "US-ASCII"));
+                setInput(parameterIndex, new Clob(agent_, x, "ISO-8859-1"));
             } catch (SqlException se) {
                 throw se.getSQLException();
             }
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
index bcdd97a4..cb5ab831 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ResultSet.java
@@ -3040,7 +3040,7 @@ public void updateAsciiStream(int column,
                     agent_.logWriter_.traceEntry(this, "updateAsciiStream", column, x, length);
                 }
                 checkUpdatePreconditions(column, "updateAsciiStream");
-                updateColumn(column, agent_.crossConverters_.setObjectFromCharacterStream(resultSetMetaData_.types_[column - 1], x, "US-ASCII", length));
+                updateColumn(column, agent_.crossConverters_.setObjectFromCharacterStream(resultSetMetaData_.types_[column - 1], x, "ISO-8859-1", length));
             }
         }
         catch ( SqlException se )
@@ -5563,7 +5563,7 @@ public void updateAsciiStream(int columnIndex, InputStream x)
                         agent_.crossConverters_.setObjectFromCharacterStream(
                             resultSetMetaData_.types_[columnIndex -1],
                             x,
-                            "US-ASCII",
+                            "ISO-8859-1",
                             CrossConverters.UNKNOWN_LENGTH));
             } catch (SqlException se) {
                 throw se.getSQLException();
