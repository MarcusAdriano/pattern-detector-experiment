diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/Query.java b/lucene/java/trunk/src/java/org/apache/lucene/search/Query.java
index 715e9079..4202889d 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/Query.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/Query.java
@@ -60,10 +60,17 @@
   public float getBoost() { return boost; }
 
   /** Prints a query to a string, with <code>field</code> as the default field
-   * for terms.  <p>The representation used is one that is readable by
-   * {@link org.apache.lucene.queryParser.QueryParser QueryParser}
-   * (although, if the query was created by the parser, the printed
-   * representation may not be exactly what was parsed).
+   * for terms.  <p>The representation used is one that is supposed to be readable
+   * by {@link org.apache.lucene.queryParser.QueryParser QueryParser}. However,
+   * there are the following limitations:
+   * <ul>
+   *  <li>If the query was created by the parser, the printed
+   *  representation may not be exactly what was parsed. For example,
+   *  characters that need to be escaped will be represented without
+   *  the required backslash.</li>
+   * <li>Some of the more complicated queries (e.g. span queries)
+   *  don't have a representation that can be parsed by QueryParser.</li>
+   * </ul>
    */
   public abstract String toString(String field);
 
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/TermQuery.java b/lucene/java/trunk/src/java/org/apache/lucene/search/TermQuery.java
index adf003f8..51786bfd 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/TermQuery.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/TermQuery.java
@@ -22,7 +22,6 @@
 import org.apache.lucene.index.Term;
 import org.apache.lucene.index.TermDocs;
 import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.queryParser.QueryParser;
 
 /** A Query that matches documents containing a term.
   This may be combined with other terms with a {@link BooleanQuery}.
@@ -145,10 +144,10 @@ protected Weight createWeight(Searcher searcher) {
   public String toString(String field) {
     StringBuffer buffer = new StringBuffer();
     if (!term.field().equals(field)) {
-      buffer.append(QueryParser.escape(term.field()));
+      buffer.append(term.field());
       buffer.append(":");
     }
-    buffer.append(QueryParser.escape(term.text()));
+    buffer.append(term.text());
     if (getBoost() != 1.0f) {
       buffer.append("^");
       buffer.append(Float.toString(getBoost()));
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/queryParser/TestQueryParser.java b/lucene/java/trunk/src/test/org/apache/lucene/queryParser/TestQueryParser.java
index 211c8189..55222b8d 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/queryParser/TestQueryParser.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/queryParser/TestQueryParser.java
@@ -317,7 +317,8 @@ public void testDateRange() throws Exception {
 
   public void testEscaped() throws Exception {
     Analyzer a = new WhitespaceAnalyzer();
-    assertQueryEquals("\\[brackets", a, "\\[brackets");
+    
+    /*assertQueryEquals("\\[brackets", a, "\\[brackets");
     assertQueryEquals("\\[brackets", null, "brackets");
     assertQueryEquals("\\\\", a, "\\\\");
     assertQueryEquals("\\+blah", a, "\\+blah");
@@ -337,21 +338,19 @@ public void testEscaped() throws Exception {
     assertQueryEquals("\\~blah", a, "\\~blah");
     assertQueryEquals("\\*blah", a, "\\*blah");
     assertQueryEquals("\\?blah", a, "\\?blah");
-    
-    // TODO: what about these?
     //assertQueryEquals("foo \\&\\& bar", a, "foo \\&\\& bar");
     //assertQueryEquals("foo \\|| bar", a, "foo \\|| bar");
-    //assertQueryEquals("foo \\AND bar", a, "foo \\AND bar");
+    //assertQueryEquals("foo \\AND bar", a, "foo \\AND bar");*/
 
-    assertQueryEquals("a\\-b:c", a, "a\\-b:c");
-    assertQueryEquals("a\\+b:c", a, "a\\+b:c");
-    assertQueryEquals("a\\:b:c", a, "a\\:b:c");
-    assertQueryEquals("a\\\\b:c", a, "a\\\\b:c");
+    assertQueryEquals("a\\-b:c", a, "a-b:c");
+    assertQueryEquals("a\\+b:c", a, "a+b:c");
+    assertQueryEquals("a\\:b:c", a, "a:b:c");
+    assertQueryEquals("a\\\\b:c", a, "a\\b:c");
 
-    assertQueryEquals("a:b\\-c", a, "a:b\\-c");
-    assertQueryEquals("a:b\\+c", a, "a:b\\+c");
-    assertQueryEquals("a:b\\:c", a, "a:b\\:c");
-    assertQueryEquals("a:b\\\\c", a, "a:b\\\\c");
+    assertQueryEquals("a:b\\-c", a, "a:b-c");
+    assertQueryEquals("a:b\\+c", a, "a:b+c");
+    assertQueryEquals("a:b\\:c", a, "a:b:c");
+    assertQueryEquals("a:b\\\\c", a, "a:b\\c");
 
     assertQueryEquals("a:b\\-c*", a, "a:b-c*");
     assertQueryEquals("a:b\\+c*", a, "a:b+c*");
@@ -363,7 +362,7 @@ public void testEscaped() throws Exception {
     assertQueryEquals("a:b\\+?c", a, "a:b+?c");
     assertQueryEquals("a:b\\:?c", a, "a:b:?c");
 
-    assertQueryEquals("a:b\\\\?c", a, "a:b\\\\\\?c");
+    assertQueryEquals("a:b\\\\?c", a, "a:b\\?c");
 
     assertQueryEquals("a:b\\-c~", a, "a:b-c~");
     assertQueryEquals("a:b\\+c~", a, "a:b+c~");
