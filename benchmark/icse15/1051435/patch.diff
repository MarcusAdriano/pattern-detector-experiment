diff --git a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java
index c0dbfd73..11c476d4 100644
--- a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java
+++ b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java
@@ -43,6 +43,20 @@ public void start(BundleContext context)
         ctx = context;
         proxyManager = new SingleServiceTracker<ProxyManager>(context, ProxyManager.class, this);
         proxyManager.open();
+        // Blueprint URL scheme requires access to the BlueprintContainer service.
+        // We have an optional import
+        // on org.osgi.service.blueprint.container: only register the blueprint:comp/URL
+        // scheme if it's present
+        try {
+          ctx.getBundle().loadClass("org.osgi.service.blueprint.container.BlueprintContainer");
+          Hashtable<Object, Object> blueprintURlSchemeProps = new Hashtable<Object, Object>();
+          blueprintURlSchemeProps.put(JNDIConstants.JNDI_URLSCHEME, new String[] { "blueprint" });
+          blueprintUrlReg = ctx.registerService(ObjectFactory.class.getName(),
+              new BlueprintURLContextServiceFactory(), blueprintURlSchemeProps);
+        } catch (ClassNotFoundException cnfe) {
+          // The blueprint packages aren't available, so do nothing. That's fine.
+          cnfe.printStackTrace();
+        }
     }
 
     @Override
@@ -60,20 +74,6 @@ public void serviceFound()
     osgiUrlprops.put(JNDIConstants.JNDI_URLSCHEME, new String[] { "osgi", "aries" });
     osgiUrlReg = ctx.registerService(ObjectFactory.class.getName(),
         new OsgiURLContextServiceFactory(), osgiUrlprops);
-
-    // Blueprint URL scheme requires access to the BlueprintContainer service.
-    // We have an optional import
-    // on org.osgi.service.blueprint.container: only register the blueprint:comp/URL
-    // scheme if it's present
-    try {
-      ctx.getBundle().loadClass("org.osgi.service.blueprint.container.BlueprintContainer");
-      Hashtable<Object, Object> blueprintURlSchemeProps = new Hashtable<Object, Object>();
-      blueprintURlSchemeProps.put(JNDIConstants.JNDI_URLSCHEME, new String[] { "blueprint" });
-      blueprintUrlReg = ctx.registerService(ObjectFactory.class.getName(),
-          new BlueprintURLContextServiceFactory(), blueprintURlSchemeProps);
-    } catch (ClassNotFoundException cnfe) {
-      // The blueprint packages aren't available, so do nothing. That's fine.
-    }
   }
 
   @Override
@@ -81,8 +81,6 @@ public void serviceLost()
   {
     if (osgiUrlReg != null) osgiUrlReg.unregister();
     osgiUrlReg = null;
-    if (blueprintUrlReg != null) blueprintUrlReg.unregister();
-    blueprintUrlReg = null;
   }
 
   @Override
diff --git a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/BlueprintURLContext.java b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/BlueprintURLContext.java
index fcdf48bf..8457bf87 100644
--- a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/BlueprintURLContext.java
+++ b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/BlueprintURLContext.java
@@ -444,7 +444,7 @@ private static ServiceReference getBlueprintContainerRef(Bundle b) throws Servic
       st.close();
     }
     if (result == null) { 
-      throw new ServiceUnavailableException ("The BlueprintContainer service could not be located");
+      throw new ServiceUnavailableException ("The BlueprintContainer service for bundle: " + b.getSymbolicName() + '_' + b.getVersion() + " not be located");
     }
     return result;
   }
