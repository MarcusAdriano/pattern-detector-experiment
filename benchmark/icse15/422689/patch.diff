diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
index 5f989347..2343f2b7 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
@@ -850,18 +850,35 @@ private void setBinaryStreamInternal(int parameterIndex, InputStream x,
 	/////////////////////////////////////////////////////////////////////////
 
     /**
+     *
      * JDBC 2.0
      *
-     * Set null for user-named types and REF type parameters
+     * Sets the designated parameter to SQL <code>NULL</code>.
+     * This version of the method <code>setNull</code> should
+     * be used for user-defined types and REF type parameters.  Examples
+     * of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and
+     * named array types.
+     *
+     * @param paramIndex the first parameter is 1, the second is 2, ...
+     * @param sqlType a value from <code>java.sql.Types</code>
+     * @param typeName the fully-qualified name of an SQL user-defined type;
+     *  ignored if the parameter is not a user-defined type or REF
+     * @exception SQLException if a database access error occurs or
+     * this method is called on a closed <code>PreparedStatement</code>
+     * @exception SQLFeatureNotSupportedException if <code>sqlType</code> is
+     * a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
+     * <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
+     * <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
+     *  <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
+     * or  <code>STRUCT</code> data type and the JDBC driver does not support
+     * this data type or if the JDBC driver does not support this method
      * 
-     * @exception SQLException if a database-access error occurs.
      */
 	public void setNull(int paramIndex,
 						int sqlType,
 						String typeName)
-		 throws SQLException
-	{
-		throw Util.notImplemented("setNull");
+        throws SQLException {
+        setNull(paramIndex,sqlType);
 	}
 
     /**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/prepStmtNull.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/prepStmtNull.java
index c712455d..5c5f5643 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/prepStmtNull.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/prepStmtNull.java
@@ -43,6 +43,9 @@ public static void test1(String []args) {
    			pStmt.setString(1,"work");
 			pStmt.setNull(2,java.sql.Types.TIMESTAMP);
 			pStmt.addBatch();
+			pStmt.setString(1,"work1");
+			pStmt.setNull(2,java.sql.Types.TIMESTAMP,"");
+			pStmt.addBatch();
 
 		
 			pStmt.executeBatch();
@@ -94,6 +97,9 @@ public static void test2(String []args) {
    			pStmt.setString(1,"blob");
 			pStmt.setNull(2,java.sql.Types.BLOB);
 			pStmt.addBatch();
+			pStmt.setString(1,"blob1");
+			pStmt.setNull(2,java.sql.Types.BLOB,"");
+			pStmt.addBatch();
 
 		
 			pStmt.executeBatch();
@@ -145,6 +151,9 @@ public static void test3(String []args) {
                pStmt.setNull(1, Types.VARCHAR);
                pStmt.setBytes(2, b2);
                pStmt.execute();
+               pStmt.setNull(1, Types.VARCHAR,"");
+               pStmt.setBytes(2, b2);
+               pStmt.execute();
 
                stmt1 = con.createStatement();
                rs = stmt1.executeQuery("select * from ClobBlob");
