diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/load/ColumnInfo.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/load/ColumnInfo.java
index ff664aac..9eddb8a2 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/load/ColumnInfo.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/load/ColumnInfo.java
@@ -80,13 +80,14 @@ public ColumnInfo(Connection conn,
 		columnTypes = new ArrayList(1);
 		noOfColumns = 0;
 		this.conn = conn;
-		this.schemaName = (sName !=null ? sName.toUpperCase(java.util.Locale.ENGLISH):sName);
-		this.tableName =  (tName !=null ? tName.toUpperCase(java.util.Locale.ENGLISH):tName);
+
+		this.schemaName = sName;
+		this.tableName =  tName;
 
 		if(insertColumnList!=null)
 		{
 			//break the comma seperated column list and initialze column info
-			//eg: c2 , c1 , c3
+			//eg: C2 , C1 , C3
 			StringTokenizer st = new StringTokenizer(insertColumnList , ",");
 			while (st.hasMoreTokens()) 
 			{
@@ -152,7 +153,7 @@ private boolean initializeColumnInfo(String columnPattern)
 		ResultSet rs = dmd.getColumns(null, 
 									  schemaName,
 									  tableName,
-									  (columnPattern !=null ? columnPattern.toUpperCase(java.util.Locale.ENGLISH):columnPattern));
+									  columnPattern);
 		boolean foundTheColumn=false;
 		while (rs.next())
 		{
@@ -306,8 +307,9 @@ public String getColumnNamesWithCasts()
 			return sb.toString();
 	}
 
-	/* returns comma seperated column Names for insert statement
-	 * eg: c1, c2 , c3 , c4 
+	/* returns comma seperated column Names delimited by quotes for the insert 
+     * statement
+	 * eg: "C1", "C2" , "C3" , "C4" 
 	 */
 	public String getInsertColumnNames()
 	{
@@ -319,7 +321,11 @@ public String getInsertColumnNames()
 				sb.append(", ");
 			else
 				first = false;
+			// column names can be SQL reserved words, so it 
+			// is necessary delimit them using quotes for insert to work correctly. 
+			sb.append("\"");
 			sb.append(insertColumnNames.get(index));
+			sb.append("\"");
 		}
 	
 		//there is no column info available
@@ -359,6 +365,3 @@ private boolean tableExists() throws SQLException
 
 
 
-
-
-
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/load/ExportResultSetForObject.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/load/ExportResultSetForObject.java
index 924dc7a9..eaa63926 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/load/ExportResultSetForObject.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/load/ExportResultSetForObject.java
@@ -24,6 +24,8 @@
 import java.sql.Statement;
 import java.sql.ResultSet;
 import java.sql.ResultSetMetaData;
+import java.sql.DatabaseMetaData;
+import java.sql.SQLException;
 
 //uses the passed connection and table/view name to make the resultset on
 //that entity. If the entity to be exported has non-sql types in it, an
@@ -31,8 +33,7 @@
 class ExportResultSetForObject {
 
   private Connection con;
-  private String entityName;
-  private String selectStatement;
+    private String selectQuery;
   private ResultSet rs;
   private int columnCount;
   private String columnNames[];
@@ -40,39 +41,48 @@
   private int columnLengths[];
 
 	private Statement expStmt = null; 
+    private String schemaName;
+    private String tableName;
 
-	//uses the passed connection and table/view name to make the resultset on
-	//that entity.
+	/* set up the connection and table/view name or the select query
+	 * to make the result set, whose data is exported. 
+	 **/
 	public ExportResultSetForObject(Connection con, String schemaName, 
-									String tableName, String selectStatement 
+									String tableName, String selectQuery 
 									) 
 	{
 		this.con = con;
-		if( selectStatement == null)
-			this.entityName = (schemaName == null ? tableName : schemaName + "." + tableName); 
-		this.selectStatement = selectStatement;
+		if( selectQuery == null)
+		{
+			this.schemaName = schemaName;
+			this.tableName = tableName;
+			
+			// delimit schema Name and table Name using quotes because
+			// they can be case-sensitive names or SQL reserved words. Export
+			// procedures are expected to be called with case-senisitive names. 
+			// undelimited names are passed in upper case, because that is
+			// the form database stores them. 
+			
+			this.selectQuery = "select * from " + 
+				(schemaName == null ? "\"" + tableName + "\"" : 
+				 "\"" + schemaName + "\"" + "." + "\"" + tableName + "\""); 
+		}
+        else
+		{
+			this.selectQuery = selectQuery;
+		}
 	}
 
 
-  public ResultSet getResultSet() throws Exception {
+    public ResultSet getResultSet() throws SQLException {
     rs = null;
-    String queryString = getQuery();
-    //execute select on passed enitity and keep it's meta data info ready
-    Statement expStmt = con.createStatement();
-    rs = expStmt.executeQuery(queryString);
+        //execute the select query and keep it's meta data info ready
+        expStmt = con.createStatement();
+        rs = expStmt.executeQuery(selectQuery);
     getMetaDataInfo();
     return rs;
   }
 
-  public String getQuery(){
-	  if(selectStatement != null)
-		  return selectStatement;
-	  else
-	  {
-		  selectStatement = "select * from " + entityName;
-		  return selectStatement;
-	  }
-  }
 
   public int getColumnCount() {
     return columnCount;
@@ -91,21 +101,22 @@ public int getColumnCount() {
   }
 
   //if the entity to be exported has non-sql types in it, an exception will be thrown
-  private void getMetaDataInfo() throws Exception {
+    private void getMetaDataInfo() throws SQLException {
     ResultSetMetaData metaData = rs.getMetaData();
     columnCount = metaData.getColumnCount();
 	  int numColumns = columnCount;
     columnNames = new String[numColumns];
 	columnTypes = new String[numColumns];
     columnLengths = new int[numColumns];
+
     for (int i=0; i<numColumns; i++) {
 	  int jdbcTypeId = metaData.getColumnType(i+1);
 	  columnNames[i] = metaData.getColumnName(i+1);
 	  columnTypes[i] = metaData.getColumnTypeName(i+1);
 	  if(!ColumnInfo.importExportSupportedType(jdbcTypeId))
 	  {
-		  throw LoadError.nonSupportedTypeColumn(columnNames[i],
-												 columnTypes[i]); 
+                throw LoadError.nonSupportedTypeColumn(
+                            columnNames[i], columnTypes[i]); 
       }
       	 
       columnLengths[i] = metaData.getColumnDisplaySize(i+1);
@@ -118,8 +129,3 @@ public void  close() throws Exception
 			expStmt.close();
 	}
 }
-
-
-
-
-
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/load/Import.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/load/Import.java
index 9217b1c2..9be60cdb 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/load/Import.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/impl/load/Import.java
@@ -160,9 +160,9 @@ private static void performImport(Connection connection, String schemaName,
 		if (connection == null)
 			throw LoadError.connectionNull();
 		
-		String entityName = (schemaName == null ? tableName : schemaName + "." + tableName); 
 		
-		if (entityName == null)
+		
+		if (tableName == null)
 			throw LoadError.entityNameMissing();
 		
 
@@ -197,6 +197,18 @@ private static void performImport(Connection connection, String schemaName,
 
 		String importvti = sb.toString();
 
+		// delimit the table and schema names with quotes.
+		// because they might have been  created as quoted
+		// identifiers(for example when reserved words are used, names are quoted)
+		
+		// Import procedures are to be called with case-senisitive names. 
+		// Incase of delimited table names, they need to be passed as defined
+		// and when they are not delimited, they need to be passed in upper
+		// case, because all undelimited names are stored in the upper case 
+		// in the database. 
+
+		String entityName = (schemaName == null ? "\""+ tableName + "\"" : 
+							 "\"" + schemaName + "\"" + "." + "\"" + tableName + "\""); 
 
 		String insertModeValue;
 		if(replace > 0)
