diff --git a/lucene/java/trunk/src/java/org/apache/lucene/analysis/de/GermanAnalyzer.java b/lucene/java/trunk/src/java/org/apache/lucene/analysis/de/GermanAnalyzer.java
index 7ede39e8..537701bc 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/analysis/de/GermanAnalyzer.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/analysis/de/GermanAnalyzer.java
@@ -76,8 +76,8 @@
  * @author    Gerhard Schwarz
  * @version   $Id$
  */
-public class GermanAnalyzer extends Analyzer {
-
+public class GermanAnalyzer extends Analyzer
+{
 	/**
 	 * List of typical german stopwords.
 	 */
@@ -100,6 +100,7 @@
 	 * Contains the stopwords used with the StopFilter.
 	 */
 	private Hashtable stoptable = new Hashtable();
+
 	/**
 	 * Contains words that should be indexed but not stemmed.
 	 */
@@ -108,47 +109,56 @@
 	/**
 	 * Builds an analyzer.
 	 */
-	public GermanAnalyzer() {
+    public GermanAnalyzer()
+    {
 		stoptable = StopFilter.makeStopTable( GERMAN_STOP_WORDS );
 	}
 
 	/**
 	 * Builds an analyzer with the given stop words.
 	 */
-	public GermanAnalyzer( String[] stopwords ) {
+    public GermanAnalyzer( String[] stopwords )
+    {
 		stoptable = StopFilter.makeStopTable( stopwords );
 	}
 
 	/**
 	 * Builds an analyzer with the given stop words.
 	 */
-	public GermanAnalyzer( Hashtable stopwords ) {
+    public GermanAnalyzer( Hashtable stopwords )
+    {
 		stoptable = stopwords;
 	}
 
 	/**
 	 * Builds an analyzer with the given stop words.
 	 */
-	public GermanAnalyzer( File stopwords ) {
+    public GermanAnalyzer( File stopwords )
+    {
 		stoptable = WordlistLoader.getWordtable( stopwords );
 	}
 
 	/**
 	 * Builds an exclusionlist from an array of Strings.
 	 */
-	public void setStemExclusionTable( String[] exclusionlist ) {
+    public void setStemExclusionTable( String[] exclusionlist )
+    {
 		excltable = StopFilter.makeStopTable( exclusionlist );
 	}
+
 	/**
 	 * Builds an exclusionlist from a Hashtable.
 	 */
-	public void setStemExclusionTable( Hashtable exclusionlist ) {
+    public void setStemExclusionTable( Hashtable exclusionlist )
+    {
 		excltable = exclusionlist;
 	}
+
 	/**
 	 * Builds an exclusionlist from the words contained in the given file.
 	 */
-	public void setStemExclusionTable( File exclusionlist ) {
+    public void setStemExclusionTable( File exclusionlist )
+    {
 		excltable = WordlistLoader.getWordtable( exclusionlist );
 	}
 	
@@ -158,7 +168,8 @@ public void setStemExclusionTable( File exclusionlist ) {
 	 * @return  A TokenStream build from a StandardTokenizer filtered with
 	 * 			StandardFilter, StopFilter, GermanStemFilter and LowerCaseFilter
 	 */
-	public TokenStream tokenStream( String fieldName, Reader reader ) {
+    public TokenStream tokenStream( String fieldName, Reader reader )
+    {
 		TokenStream result = new StandardTokenizer( reader );
 		result = new StandardFilter( result );
 		result = new StopFilter( result, stoptable );
@@ -166,4 +177,3 @@ public TokenStream tokenStream( String fieldName, Reader reader ) {
 		return result;
 	}
 }
-
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/analysis/de/GermanStemFilter.java b/lucene/java/trunk/src/java/org/apache/lucene/analysis/de/GermanStemFilter.java
index 40e8b63d..52b3b666 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/analysis/de/GermanStemFilter.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/analysis/de/GermanStemFilter.java
@@ -70,8 +70,8 @@
  * @author    Gerhard Schwarz
  * @version   $Id$
  */
-public final class GermanStemFilter extends TokenFilter {
-
+public final class GermanStemFilter extends TokenFilter
+{
 	/**
 	 * The actual token in the input stream.
 	 */
@@ -79,7 +79,8 @@
 	private GermanStemmer stemmer = null;
 	private Hashtable exclusions = null;
 	
-	public GermanStemFilter( TokenStream in ) {
+    public GermanStemFilter( TokenStream in )
+    {
 		stemmer = new GermanStemmer();
 		input = in;
 	}
@@ -87,7 +88,8 @@ public GermanStemFilter( TokenStream in ) {
 	/**
 	 * Builds a GermanStemFilter that uses an exclusiontable.
 	 */
-	public GermanStemFilter( TokenStream in, Hashtable exclusiontable ) {
+    public GermanStemFilter( TokenStream in, Hashtable exclusiontable )
+    {
 		this( in );
 		exclusions = exclusiontable;
 	}
@@ -96,7 +98,8 @@ public GermanStemFilter( TokenStream in, Hashtable exclusiontable ) {
 	 * @return  Returns the next token in the stream, or null at EOS
 	 */
 	public final Token next()
-		throws IOException {
+	throws IOException
+    {
 		if ( ( token = input.next() ) == null ) {
 			return null;
 		}
@@ -114,18 +117,22 @@ else if ( exclusions != null && exclusions.contains( token.termText() ) ) {
 			return token;
 		}
 	}
+
 	/**
 	 * Set a alternative/custom GermanStemmer for this filter.
 	 */
-	public void setStemmer( GermanStemmer stemmer ) {
+    public void setStemmer( GermanStemmer stemmer )
+    {
 		if ( stemmer != null ) {
 			this.stemmer = stemmer;
 		}
 	}
+
 	/**
 	 * Set an alternative exclusion list for this filter.
 	 */
-	public void setExclusionTable( Hashtable exclusiontable ) {
+    public void setExclusionTable( Hashtable exclusiontable )
+    {
 		exclusions = exclusiontable;
 	}
 }
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/analysis/de/GermanStemmer.java b/lucene/java/trunk/src/java/org/apache/lucene/analysis/de/GermanStemmer.java
index fca11c8f..80be7f77 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/analysis/de/GermanStemmer.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/analysis/de/GermanStemmer.java
@@ -64,17 +64,18 @@
  * @author    Gerhard Schwarz
  * @version   $Id$
  */
-
-public class GermanStemmer {
-
+public class GermanStemmer
+{
     /**
      * Buffer for the terms while stemming them.
      */
     private StringBuffer sb = new StringBuffer();
+
 	/**
 	 * Indicates if a term is handled as a noun.
      */
     private boolean uppercase = false;
+
     /**
      * Amount of characters that are removed with <tt>substitute()</tt> while stemming.
      */
@@ -86,12 +87,14 @@
      * @param term  The term that should be stemmed.
      * @return      Discriminator for <tt>term</tt>
      */
-    protected String stem( String term ) {
+    protected String stem( String term )
+    {
 		// Mark a possible noun.
 		uppercase = Character.isUpperCase( term.charAt( 0 ) );
 		// Use lowercase for medium stemming.
 		term = term.toLowerCase();
-		if ( !isStemmable( term ) ) return term;
+	if ( !isStemmable( term ) )
+	    return term;
 		// Reset the StringBuffer.
 		sb.delete( 0, sb.length() );
 		sb.insert( 0, term );
@@ -109,7 +112,8 @@ protected String stem( String term ) {
      *
      * @return  true if, and only if, the given term consists in letters.
      */
-    private boolean isStemmable( String term ) {
+    private boolean isStemmable( String term )
+    {
 		for ( int c = 0; c < term.length(); c++ ) {
 			if ( !Character.isLetter( term.charAt( c ) ) ) return false;
 		}
@@ -124,16 +128,21 @@ private boolean isStemmable( String term ) {
 	 * discriminators in the most of those cases.
 	 * The algorithm is context free, except of the length restrictions.
 	 */
-	private void strip( StringBuffer buffer ) {
+    private void strip( StringBuffer buffer )
+    {
 		boolean doMore = true;
 		while ( doMore && buffer.length() > 3 ) {
-			if ( ( buffer.length() + substCount > 5 ) && buffer.substring( buffer.length() - 2, buffer.length() ).equals( "nd" ) ) {
+	    if ( ( buffer.length() + substCount > 5 ) &&
+		buffer.substring( buffer.length() - 2, buffer.length() ).equals( "nd" ) )
+	    {
 				buffer.delete( buffer.length() - 2, buffer.length() );
 			}
-			else if ( ( buffer.length() + substCount > 4 ) && buffer.substring( buffer.length() - 2, buffer.length() ).equals( "em" ) ) {
+	    else if ( ( buffer.length() + substCount > 4 ) &&
+		buffer.substring( buffer.length() - 2, buffer.length() ).equals( "em" ) ) {
 				buffer.delete( buffer.length() - 2, buffer.length() );
 			}
-			else if ( ( buffer.length() + substCount > 4 ) && buffer.substring( buffer.length() - 2, buffer.length() ).equals( "er" ) ) {
+	    else if ( ( buffer.length() + substCount > 4 ) &&
+		buffer.substring( buffer.length() - 2, buffer.length() ).equals( "er" ) ) {
 				buffer.delete( buffer.length() - 2, buffer.length() );
 			}
 			else if ( buffer.charAt( buffer.length() - 1 ) == 'e' ) {
@@ -161,7 +170,8 @@ else if ( buffer.charAt( buffer.length() - 1 ) == 't' && !uppercase ) {
 	 *
 	 * @return  The term with the optimizations applied.
 	 */
-	private void optimize( StringBuffer buffer ) {
+    private void optimize( StringBuffer buffer )
+    {
 		// Additional step for female plurals of professions and inhabitants.
 		if ( buffer.length() > 5 && buffer.substring( buffer.length() - 5, buffer.length() ).equals( "erin*" ) ) {
 			buffer.deleteCharAt( buffer.length() -1 );
@@ -176,7 +186,8 @@ private void optimize( StringBuffer buffer ) {
     /**
      * Removes a particle denotion ("ge") from a term.
      */
-    private void removeParticleDenotion( StringBuffer buffer ) {
+    private void removeParticleDenotion( StringBuffer buffer )
+    {
 		if ( buffer.length() > 4 ) {
 			for ( int c = 0; c < buffer.length() - 3; c++ ) {
 				if ( buffer.substring( c, c + 4 ).equals( "gege" ) ) {
@@ -197,7 +208,8 @@ private void removeParticleDenotion( StringBuffer buffer ) {
      * - Substitute some common character combinations with a token:
      *   sch/ch/ei/ie/ig/st -> $/§/%/&/#/!
      */
-    private void substitute( StringBuffer buffer ) {
+    private void substitute( StringBuffer buffer )
+    {
 		substCount = 0;
 		for ( int c = 0; c < buffer.length(); c++ ) {
 			// Replace the second char of a pair of the equal characters with an asterisk
@@ -222,7 +234,9 @@ private void substitute( StringBuffer buffer ) {
 					substCount++;
 				}
 				// Masking several common character combinations with an token
-				else if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' ) {
+		else if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' &&
+		    buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' )
+		{
 					buffer.setCharAt( c, '$' );
 					buffer.delete( c + 1, c + 3 );
 					substCount =+ 2;
@@ -261,7 +275,8 @@ else if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {
      * character combinations. Umlauts will remain as their corresponding vowel,
      * as "ß" remains as "ss".
      */
-    private void resubstitute( StringBuffer buffer ) {
+    private void resubstitute( StringBuffer buffer )
+    {
 		for ( int c = 0; c < buffer.length(); c++ ) {
 			if ( buffer.charAt( c ) == '*' ) {
 				char x = buffer.charAt( c - 1 );
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/analysis/de/WordlistLoader.java b/lucene/java/trunk/src/java/org/apache/lucene/analysis/de/WordlistLoader.java
index 78f43638..2dd4a6cc 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/analysis/de/WordlistLoader.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/analysis/de/WordlistLoader.java
@@ -68,8 +68,8 @@
  * @author    Gerhard Schwarz
  * @version   $Id$
  */
-public class WordlistLoader {
-
+public class WordlistLoader
+{
 	/**
 	 * @param path      Path to the wordlist
 	 * @param wordfile  Name of the wordlist
@@ -80,6 +80,7 @@ public static Hashtable getWordtable( String path, String wordfile ) {
 		}
 		return getWordtable( new File( path, wordfile ) );
 	}
+
 	/**
 	 * @param wordfile  Complete path to the wordlist
 	 */
@@ -135,4 +136,3 @@ private static Hashtable makeWordTable( String[] words, int length ) {
 		return table;
 	}
 }
-
