diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/schema/CurrencyField.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/schema/CurrencyField.java
index b6134ce8..577747db 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/schema/CurrencyField.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/schema/CurrencyField.java
@@ -144,10 +144,13 @@ public boolean isPolyField() {
     CurrencyValue value = CurrencyValue.parse(externalVal, defaultCurrency);
 
     Fieldable[] f = new Fieldable[field.stored() ? 3 : 2];
-    f[0] = getAmountField(field).createField(String.valueOf(value.getAmount()), boost);
-    f[1] = getCurrencyField(field).createField(value.getCurrencyCode(), boost);
+    SchemaField amountField = getAmountField(field);
+    f[0] = amountField.createField(String.valueOf(value.getAmount()), amountField.omitNorms() ? 1F : boost);
+    SchemaField currencyField = getCurrencyField(field);
+    f[1] = currencyField.createField(value.getCurrencyCode(), currencyField.omitNorms() ? 1F : boost);
 
     if (field.stored()) {
+      // TODO: funky to omit norms on a stored-only field here!
       String storedValue = externalVal.toString().trim();
       if (storedValue.indexOf(",") < 0) {
         storedValue += "," + defaultCurrency;
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/schema/LatLonType.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/schema/LatLonType.java
index 060c24d5..314a63dd 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/schema/LatLonType.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/schema/LatLonType.java
@@ -69,10 +69,12 @@ protected void init(IndexSchema schema, Map<String, String> args) {
         throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);
       }
       //latitude
-      f[i] = subField(field, i).createField(String.valueOf(latLon[LAT]), boost);
+      SchemaField lat = subField(field, i);
+      f[i] = lat.createField(String.valueOf(latLon[LAT]), lat.omitNorms() ? 1F : boost);
       i++;
       //longitude
-      f[i] = subField(field, i).createField(String.valueOf(latLon[LONG]), boost);
+      SchemaField lon = subField(field, i);
+      f[i] = lon.createField(String.valueOf(latLon[LONG]), lon.omitNorms() ? 1F : boost);
 
     }
 
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/DocumentBuilder.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/DocumentBuilder.java
index caa169e6..9d4050e5 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/DocumentBuilder.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/DocumentBuilder.java
@@ -313,6 +313,10 @@ public static Document toDocument( SolrInputDocument doc, IndexSchema schema )
             }
             if (fields != null) { // null fields are not added
               for (Fieldable f : fields) {
+                if (f.getBoost() != 1.0F && f.getOmitNorms()) {
+                  // the field wasnt explicitly boosted, null out the boost
+                  f.setBoost(1.0F);
+                }
                 out.add(f);
               }
             }
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/update/DocumentBuilderTest.java b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/update/DocumentBuilderTest.java
index 7e5ce154..9b15559a 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/update/DocumentBuilderTest.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/update/DocumentBuilderTest.java
@@ -24,6 +24,7 @@
 import org.apache.solr.common.SolrInputDocument;
 import org.apache.solr.core.SolrCore;
 import org.apache.solr.schema.FieldType;
+import org.apache.solr.schema.IndexSchema;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
@@ -114,4 +115,121 @@ public void testMultiField() throws Exception {
     assertNotNull( out.getFieldable( "home_1" + FieldType.POLY_FIELD_SEPARATOR + "double" ) );
   }
 
+  @Test
+  public void testCopyFieldWithDocumentBoost() {
+    SolrCore core = h.getCore();
+    IndexSchema schema = core.getSchema();
+    assertFalse(schema.getField("title").omitNorms());
+    assertTrue(schema.getField("title_stringNoNorms").omitNorms());
+    SolrInputDocument doc = new SolrInputDocument();
+    doc.setDocumentBoost(3f);
+    doc.addField( "title", "mytitle");
+    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );
+    assertNotNull( out.get( "title_stringNoNorms" ) );
+    assertTrue("title_stringNoNorms has the omitNorms attribute set to true, if the boost is different than 1.0, it will fail",1.0f == out.getField( "title_stringNoNorms" ).getBoost() );
+  }
+  
+  
+  @Test
+  public void testCopyFieldWithFieldBoost() {
+    SolrCore core = h.getCore();
+    IndexSchema schema = core.getSchema();
+    assertFalse(schema.getField("title").omitNorms());
+    assertTrue(schema.getField("title_stringNoNorms").omitNorms());
+    SolrInputDocument doc = new SolrInputDocument();
+    doc.addField( "title", "mytitle", 3.0f );
+    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );
+    assertNotNull( out.get( "title_stringNoNorms" ) );
+    assertTrue("title_stringNoNorms has the omitNorms attribute set to true, if the boost is different than 1.0, it will fail",1.0f == out.getField( "title_stringNoNorms" ).getBoost() );
+    assertTrue("It is OK that title has a boost of 3",3.0f == out.getField( "title" ).getBoost() );
+  }
+  
+  @Test
+  public void testWithPolyFieldsAndFieldBoost() {
+    SolrCore core = h.getCore();
+    IndexSchema schema = core.getSchema();
+    assertFalse(schema.getField("store").omitNorms());
+    assertTrue(schema.getField("store_0_coordinate").omitNorms());
+    assertTrue(schema.getField("store_1_coordinate").omitNorms());
+    assertFalse(schema.getField("amount").omitNorms());
+    assertTrue(schema.getField("amount" + FieldType.POLY_FIELD_SEPARATOR + "_currency").omitNorms());
+    assertTrue(schema.getField("amount" + FieldType.POLY_FIELD_SEPARATOR + "_amount_raw").omitNorms());
+    
+    SolrInputDocument doc = new SolrInputDocument();
+    doc.addField( "store", "40.7143,-74.006", 3.0f );
+    doc.addField( "amount", "10.5", 3.0f );
+    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );
+    assertNotNull( out.get( "store" ) );
+    assertNotNull( out.get( "amount" ) );
+    assertNotNull(out.getFieldable("store_0_coordinate"));
+    //NOTE: As the subtypes have omitNorm=true, they must have boost=1F, otherwise this is going to fail when adding the doc to Lucene.
+    assertTrue(1f == out.getFieldable("store_0_coordinate").getBoost());
+    assertTrue(1f == out.getFieldable("store_1_coordinate").getBoost());
+    assertTrue(1f == out.getFieldable("amount" + FieldType.POLY_FIELD_SEPARATOR + "_currency").getBoost());
+    assertTrue(1f == out.getFieldable("amount" + FieldType.POLY_FIELD_SEPARATOR + "_amount_raw").getBoost());
+  }
+  
+  @Test
+  public void testWithPolyFieldsAndDocumentBoost() {
+    SolrCore core = h.getCore();
+    IndexSchema schema = core.getSchema();
+    assertFalse(schema.getField("store").omitNorms());
+    assertTrue(schema.getField("store_0_coordinate").omitNorms());
+    assertTrue(schema.getField("store_1_coordinate").omitNorms());
+    assertFalse(schema.getField("amount").omitNorms());
+    assertTrue(schema.getField("amount" + FieldType.POLY_FIELD_SEPARATOR + "_currency").omitNorms());
+    assertTrue(schema.getField("amount" + FieldType.POLY_FIELD_SEPARATOR + "_amount_raw").omitNorms());
+    
+    SolrInputDocument doc = new SolrInputDocument();
+    doc.setDocumentBoost(3.0f);
+    doc.addField( "store", "40.7143,-74.006");
+    doc.addField( "amount", "10.5");
+    Document out = DocumentBuilder.toDocument( doc, core.getSchema() );
+    assertNotNull( out.get( "store" ) );
+    assertNotNull(out.getFieldable("store_0_coordinate"));
+    //NOTE: As the subtypes have omitNorm=true, they must have boost=1F, otherwise this is going to fail when adding the doc to Lucene.
+    assertTrue(1f == out.getFieldable("store_0_coordinate").getBoost());
+    assertTrue(1f == out.getFieldable("store_1_coordinate").getBoost());
+    assertTrue(1f == out.getFieldable("amount" + FieldType.POLY_FIELD_SEPARATOR + "_currency").getBoost());
+    assertTrue(1f == out.getFieldable("amount" + FieldType.POLY_FIELD_SEPARATOR + "_amount_raw").getBoost());
+  }
+  
+  /**
+   * Its ok to boost a field if it has norms
+   */
+  public void testBoost() throws Exception {
+    XmlDoc xml = new XmlDoc();
+    xml.xml = "<doc>"
+        + "<field name=\"id\">0</field>"
+        + "<field name=\"title\" boost=\"3.0\">mytitle</field>"
+        + "</doc>";
+    assertNull(h.validateUpdate(add(xml, new String[0])));
+  }
+  
+  /**
+   * Its not ok to boost a field if it omits norms
+   */
+  public void testBoostOmitNorms() throws Exception {
+    XmlDoc xml = new XmlDoc();
+    xml.xml = "<doc>"
+        + "<field name=\"id\">1</field>"
+        + "<field name=\"title_stringNoNorms\" boost=\"3.0\">mytitle</field>"
+        + "</doc>";
+    ignoreException("cannot set an index-time boost");
+    assertNotNull(h.validateUpdate(add(xml, new String[0])));
+    resetExceptionIgnores();
+  }
+  
+  /**
+   * Its ok to supply a document boost even if a field omits norms
+   */
+  public void testDocumentBoostOmitNorms() throws Exception {
+    XmlDoc xml = new XmlDoc();
+    xml.xml = "<doc boost=\"3.0\">"
+        + "<field name=\"id\">2</field>"
+        + "<field name=\"title_stringNoNorms\">mytitle</field>"
+        + "</doc>";
+    assertNull(h.validateUpdate(add(xml, new String[0])));
+  }
+
 }
