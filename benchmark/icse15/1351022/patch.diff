diff --git a/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/AbstractBasicProxyTest.java b/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/AbstractBasicProxyTest.java
index e69de29b..a1d5658c 100644
--- a/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/AbstractBasicProxyTest.java
+++ b/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/AbstractBasicProxyTest.java
@@ -0,0 +1,89 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.proxy.itests;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.ops4j.pax.exam.CoreOptions.equinox;
+import static org.apache.aries.itest.ExtraOptions.*;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.concurrent.Callable;
+
+import org.apache.aries.proxy.FinalModifierException;
+import org.apache.aries.proxy.ProxyManager;
+import org.apache.aries.proxy.UnableToProxyException;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.ops4j.pax.exam.Option;
+import org.ops4j.pax.exam.junit.JUnit4TestRunner;
+import org.osgi.framework.Bundle;
+import org.osgi.framework.FrameworkUtil;
+import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
+import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
+
+@RunWith(JUnit4TestRunner.class)
+public class AbstractBasicProxyTest extends AbstractProxyTest
+{
+  /**
+   * This test does two things. First of all it checks that we throw a FinalModifierException if we
+   * try to proxy a final class. It also validates that the message and toString in the exception
+   * works as expected.
+   */
+  @Test
+  public void checkProxyFinalClass() throws UnableToProxyException
+  {
+    ProxyManager mgr = context().getService(ProxyManager.class);
+    Bundle b = FrameworkUtil.getBundle(this.getClass());
+    Callable<Object> c = new TestCallable();
+    Collection<Class<?>> classes = new ArrayList<Class<?>>();
+    classes.add(TestCallable.class);
+    try {
+      mgr.createDelegatingProxy(b, classes, c, null);
+    } catch (FinalModifierException e) {
+      String msg = e.getMessage();
+      assertEquals("The message didn't look right", "The class " + TestCallable.class.getName() + " is final.", msg);
+      assertTrue("The message didn't appear in the toString", e.toString().endsWith(msg));
+    }
+  }
+
+  /**
+   * This method checks that we correctly fail to proxy a class with final methods.
+   * It also does a quick validation on the exception message.
+   */
+  @Test
+  public void checkProxyFinalMethods() throws UnableToProxyException
+  {
+    ProxyManager mgr = context().getService(ProxyManager.class);
+    Bundle b = FrameworkUtil.getBundle(this.getClass());
+    Callable<Object> c = new TestCallable();
+    Collection<Class<?>> classes = new ArrayList<Class<?>>();
+    Runnable r = new Runnable() {
+      public final void run() {
+      }
+    };
+    classes.add(r.getClass());
+    try {
+      mgr.createDelegatingProxy(b, classes, c, null);
+    } catch (FinalModifierException e) {
+      assertTrue("The methods didn't appear in the message", e.getMessage().contains("run"));
+    }
+  }
+}
diff --git a/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/AbstractProxyTest.java b/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/AbstractProxyTest.java
index 1a435b2a..0bca8274 100644
--- a/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/AbstractProxyTest.java
+++ b/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/AbstractProxyTest.java
@@ -18,10 +18,15 @@
  */
 package org.apache.aries.proxy.itests;
 
+import static org.apache.aries.itest.ExtraOptions.flatOptions;
+import static org.apache.aries.itest.ExtraOptions.mavenBundle;
+import static org.apache.aries.itest.ExtraOptions.paxLogging;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
+import static org.ops4j.pax.exam.CoreOptions.equinox;
+
 import java.lang.reflect.Method;
 import java.util.AbstractList;
 import java.util.ArrayList;
@@ -33,6 +38,8 @@
 import org.apache.aries.proxy.InvocationListener;
 import org.apache.aries.proxy.ProxyManager;
 import org.junit.Test;
+import org.ops4j.pax.exam.Option;
+import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
 import org.osgi.framework.Bundle;
 import org.osgi.framework.FrameworkUtil;
 
@@ -265,4 +272,49 @@ private void assertCalled(TestListener listener, boolean pre, boolean post, bool
     assertEquals(post, listener.postInvoke);
     assertEquals(ex, listener.postInvokeExceptionalReturn);
   }
+  
+  protected static Option[] generalOptions() {
+	  return  flatOptions(paxLogging("DEBUG"),
+
+	          // Bundles
+	          mavenBundle("org.apache.aries", "org.apache.aries.util"),
+	          mavenBundle("org.ow2.asm", "asm-all"),
+	          // don't install the blueprint sample here as it will be installed onto the same framework as the blueprint core bundle
+	          // mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample").noStart(),
+	          mavenBundle("org.osgi", "org.osgi.compendium")
+	         /* vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
+	          waitForFrameworkStartup(),*/
+	  );
+
+  }
+
+  protected static Option[] proxyBundles()
+  {
+	  return new Option[] {          
+	          mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy.api"),
+	          mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy.impl"),
+	  };
+  }
+
+  protected static Option[] proxyUberBundle()
+  {
+	  return new Option[] {          
+	          mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
+	  };
+  }
+
+  protected static Option[] equinox35()
+  {
+	  return new Option[] {          
+	          equinox().version("3.5.0")
+	  };
+  }
+  
+  protected static Option[] equinox37()
+  {
+	  return new Option[] {          
+			  PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),          
+	          equinox().version("3.7.0.v20110613")
+	  };
+  }
 }
diff --git a/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/AbstractWeavingProxyTest.java b/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/AbstractWeavingProxyTest.java
index e69de29b..dffea18a 100644
--- a/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/AbstractWeavingProxyTest.java
+++ b/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/AbstractWeavingProxyTest.java
@@ -0,0 +1,144 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.proxy.itests;
+
+import static org.apache.aries.itest.ExtraOptions.mavenBundle;
+import static org.apache.aries.itest.ExtraOptions.paxLogging;
+import static org.apache.aries.itest.ExtraOptions.testOptions;
+import static org.junit.Assert.assertSame;
+import static org.junit.Assert.fail;
+import static org.ops4j.pax.exam.CoreOptions.equinox;
+
+import java.util.AbstractList;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.concurrent.Callable;
+
+import org.apache.aries.proxy.FinalModifierException;
+import org.apache.aries.proxy.ProxyManager;
+import org.apache.aries.proxy.weaving.WovenProxy;
+import org.apache.aries.proxy.weavinghook.ProxyWeavingController;
+import org.apache.aries.proxy.weavinghook.WeavingHelper;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.ops4j.pax.exam.Option;
+import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
+import org.ops4j.pax.exam.junit.JUnit4TestRunner;
+import org.osgi.framework.Bundle;
+import org.osgi.framework.FrameworkUtil;
+import org.osgi.framework.hooks.weaving.WovenClass;
+
+@RunWith(JUnit4TestRunner.class)
+public class AbstractWeavingProxyTest extends AbstractProxyTest
+{
+
+  /**
+   * This test does two things. First of all it checks that we can proxy a final 
+   * class. It also validates that the class implements WovenProxy, and that the
+   * delegation still works
+   */
+  @Test
+  public void checkProxyFinalClass() throws Exception
+  {
+    ProxyManager mgr = context().getService(ProxyManager.class);
+    Bundle b = FrameworkUtil.getBundle(this.getClass());
+    TestCallable dispatcher = new TestCallable();
+    TestCallable template = new TestCallable();
+    Collection<Class<?>> classes = new ArrayList<Class<?>>();
+    classes.add(TestCallable.class);
+    Callable<Object> o = (Callable<Object>) mgr.createDelegatingProxy(b, classes, 
+        dispatcher, template);
+    if(!!!(o instanceof WovenProxy))
+      fail("Proxy should be woven!");
+
+    Object inner = new Integer(3);
+    dispatcher.setReturn(new TestCallable());
+    ((TestCallable)dispatcher.call()).setReturn(inner);
+
+    assertSame("Should return the same object", inner, o.call());
+  }
+
+  /**
+   * This method checks that we correctly proxy a class with final methods.
+   */
+  @Test
+  public void checkProxyFinalMethods() throws Exception
+  {
+    ProxyManager mgr = context().getService(ProxyManager.class);
+    Bundle b = FrameworkUtil.getBundle(this.getClass());
+    Callable<Object> c = new TestCallable();
+    Collection<Class<?>> classes = new ArrayList<Class<?>>();
+    Runnable r = new Runnable() {
+      public final void run() {
+      }
+    };
+    classes.add(r.getClass());
+    Object o = mgr.createDelegatingProxy(b, classes, c, r);
+    if(!!!(o instanceof WovenProxy))
+      fail("Proxy should be woven!");
+  }
+
+  @Test(expected = FinalModifierException.class)
+  public void checkProxyController() throws Exception
+  {
+
+    context().registerService(ProxyWeavingController.class.getName(), new ProxyWeavingController() {
+
+      public boolean shouldWeave(WovenClass arg0, WeavingHelper arg1)
+      {
+        return false;
+      }
+    }, null);
+
+    ProxyManager mgr = context().getService(ProxyManager.class);
+    Bundle b = FrameworkUtil.getBundle(this.getClass());
+    Callable<Object> c = new TestCallable();
+    Collection<Class<?>> classes = new ArrayList<Class<?>>();
+    // Don't use anonymous inner class in this test as IBM and Sun load it at a different time
+    // For IBM JDK, the anonymous inner class will be loaded prior to the controller is registered.
+    Callable<?> callable = new TestFinalDelegate();
+    classes.add(callable.getClass());
+    Object o = mgr.createDelegatingProxy(b, classes, c, callable);
+    if(o instanceof WovenProxy)
+      fail("Proxy should not have been woven!");
+  }
+
+  private static class TestFinalDelegate extends AbstractList<String> implements Callable<String> {
+
+    @Override
+    public String get(int location)
+    {
+
+      return null;
+    }
+
+    @Override
+    public int size()
+    {
+
+      return 0;
+    }
+
+    public final String call() throws Exception
+    {
+
+      return null;
+    }
+  }
+}
diff --git a/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/BasicProxyBundlesTest.java b/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/BasicProxyBundlesTest.java
index e69de29b..5a762b7a 100644
--- a/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/BasicProxyBundlesTest.java
+++ b/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/BasicProxyBundlesTest.java
@@ -0,0 +1,74 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.proxy.itests;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.ops4j.pax.exam.CoreOptions.equinox;
+import static org.apache.aries.itest.ExtraOptions.*;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.concurrent.Callable;
+
+import org.apache.aries.itest.AbstractIntegrationTest;
+import org.apache.aries.proxy.FinalModifierException;
+import org.apache.aries.proxy.ProxyManager;
+import org.apache.aries.proxy.UnableToProxyException;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.ops4j.pax.exam.CoreOptions;
+import org.ops4j.pax.exam.Option;
+import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
+import org.ops4j.pax.exam.container.def.options.CleanCachesOption;
+import org.ops4j.pax.exam.junit.JUnit4TestRunner;
+import org.osgi.framework.Bundle;
+import org.osgi.framework.FrameworkUtil;
+import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
+import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
+
+/**
+ * This test runs the basic proxy tests for the proxy bundles (not the uber bundle). 
+ * It needs to be a separate class from the uber-bundle test, since equinox configuration
+ * doesn't seem to be cleaned properly within the same test class, so we run with the 
+ * uber-bundle, which means we test nothing.
+ *
+ */
+@RunWith(JUnit4TestRunner.class)
+public class BasicProxyBundlesTest extends AbstractBasicProxyTest
+{
+  @org.ops4j.pax.exam.junit.Configuration
+  public static Option[] configuration35IndividualBundles() {
+      return testOptions(
+          generalOptions(),
+          proxyBundles(),
+          equinox35()
+      );
+  }
+  
+  @org.ops4j.pax.exam.junit.Configuration
+  public static Option[] configuration37IndividualBundles() {
+      return testOptions(
+          generalOptions(), 
+          proxyBundles(),
+          equinox37()
+      );
+  }
+}
diff --git a/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/BasicProxyTest.java b/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/BasicProxyTest.java
index e44bd9cc..e69de29b 100644
--- a/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/BasicProxyTest.java
+++ b/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/BasicProxyTest.java
@@ -1,110 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.aries.proxy.itests;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-import static org.ops4j.pax.exam.CoreOptions.equinox;
-import static org.apache.aries.itest.ExtraOptions.*;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.concurrent.Callable;
-
-import org.apache.aries.proxy.FinalModifierException;
-import org.apache.aries.proxy.ProxyManager;
-import org.apache.aries.proxy.UnableToProxyException;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.ops4j.pax.exam.Option;
-import org.ops4j.pax.exam.junit.JUnit4TestRunner;
-import org.osgi.framework.Bundle;
-import org.osgi.framework.FrameworkUtil;
-import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
-import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
-
-@RunWith(JUnit4TestRunner.class)
-public class BasicProxyTest extends AbstractProxyTest
-{
-  /**
-   * This test does two things. First of all it checks that we throw a FinalModifierException if we
-   * try to proxy a final class. It also validates that the message and toString in the exception
-   * works as expected.
-   */
-  @Test
-  public void checkProxyFinalClass() throws UnableToProxyException
-  {
-    ProxyManager mgr = context().getService(ProxyManager.class);
-    Bundle b = FrameworkUtil.getBundle(this.getClass());
-    Callable<Object> c = new TestCallable();
-    Collection<Class<?>> classes = new ArrayList<Class<?>>();
-    classes.add(TestCallable.class);
-    try {
-      mgr.createDelegatingProxy(b, classes, c, null);
-    } catch (FinalModifierException e) {
-      String msg = e.getMessage();
-      assertEquals("The message didn't look right", "The class " + TestCallable.class.getName() + " is final.", msg);
-      assertTrue("The message didn't appear in the toString", e.toString().endsWith(msg));
-    }
-  }
-  
-  /**
-   * This method checks that we correctly fail to proxy a class with final methods.
-   * It also does a quick validation on the exception message.
-   */
-  @Test
-  public void checkProxyFinalMethods() throws UnableToProxyException
-  {
-    ProxyManager mgr = context().getService(ProxyManager.class);
-    Bundle b = FrameworkUtil.getBundle(this.getClass());
-    Callable<Object> c = new TestCallable();
-    Collection<Class<?>> classes = new ArrayList<Class<?>>();
-    Runnable r = new Runnable() {
-      public final void run() {
-      }
-    };
-    classes.add(r.getClass());
-    try {
-      mgr.createDelegatingProxy(b, classes, c, null);
-    } catch (FinalModifierException e) {
-      assertTrue("The methods didn't appear in the message", e.getMessage().contains("run"));
-    }
-  }
-  
-  @org.ops4j.pax.exam.junit.Configuration
-  public static Option[] configuration() {
-      return testOptions(
-          paxLogging("DEBUG"),
-
-          // Bundles
-          mavenBundle("org.apache.aries", "org.apache.aries.util"),
-          mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
-          mavenBundle("org.ow2.asm", "asm-all"),
-          // don't install the blueprint sample here as it will be installed onto the same framework as the blueprint core bundle
-          // mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample").noStart(),
-          mavenBundle("org.osgi", "org.osgi.compendium"),
-         /* vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
-          waitForFrameworkStartup(),*/
-          
-          
-          
-          equinox().version("3.5.0")
-      );
-  }
-}
diff --git a/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/BasicProxyUberBundleTest.java b/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/BasicProxyUberBundleTest.java
index e69de29b..900e11e2 100644
--- a/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/BasicProxyUberBundleTest.java
+++ b/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/BasicProxyUberBundleTest.java
@@ -0,0 +1,76 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.proxy.itests;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.ops4j.pax.exam.CoreOptions.equinox;
+import static org.apache.aries.itest.ExtraOptions.*;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.concurrent.Callable;
+
+import org.apache.aries.itest.AbstractIntegrationTest;
+import org.apache.aries.proxy.FinalModifierException;
+import org.apache.aries.proxy.ProxyManager;
+import org.apache.aries.proxy.UnableToProxyException;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.ops4j.pax.exam.CoreOptions;
+import org.ops4j.pax.exam.Option;
+import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
+import org.ops4j.pax.exam.container.def.options.CleanCachesOption;
+import org.ops4j.pax.exam.junit.JUnit4TestRunner;
+import org.osgi.framework.Bundle;
+import org.osgi.framework.FrameworkUtil;
+import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
+import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
+
+/**
+ * This test runs the basic proxy tests for the proxy uber bundle. 
+ * It needs to be a separate class from the individual-bundle test, since equinox configuration
+ * doesn't seem to be cleaned properly within the same test class, so we always run with the 
+ * uber-bundle, which means we test nothing.
+ *
+ */
+@RunWith(JUnit4TestRunner.class)
+public class BasicProxyUberBundleTest extends AbstractBasicProxyTest
+{
+
+  @org.ops4j.pax.exam.junit.Configuration
+  public static Option[] configuration35UberBundle() {
+      return testOptions(
+          generalOptions(),
+          proxyUberBundle(),
+          equinox35()
+      );
+  }
+  
+  @org.ops4j.pax.exam.junit.Configuration
+  public static Option[] configuration37UberBundle() {
+      return testOptions(
+          generalOptions(), 
+          proxyUberBundle(),
+          equinox37()
+      );
+  }
+
+}
diff --git a/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/WeavingProxyBundlesTest.java b/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/WeavingProxyBundlesTest.java
index e69de29b..e7a2f494 100644
--- a/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/WeavingProxyBundlesTest.java
+++ b/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/WeavingProxyBundlesTest.java
@@ -0,0 +1,65 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.proxy.itests;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.ops4j.pax.exam.CoreOptions.equinox;
+import static org.apache.aries.itest.ExtraOptions.*;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.concurrent.Callable;
+
+import org.apache.aries.itest.AbstractIntegrationTest;
+import org.apache.aries.proxy.FinalModifierException;
+import org.apache.aries.proxy.ProxyManager;
+import org.apache.aries.proxy.UnableToProxyException;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.ops4j.pax.exam.CoreOptions;
+import org.ops4j.pax.exam.Option;
+import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
+import org.ops4j.pax.exam.container.def.options.CleanCachesOption;
+import org.ops4j.pax.exam.junit.JUnit4TestRunner;
+import org.osgi.framework.Bundle;
+import org.osgi.framework.FrameworkUtil;
+import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
+import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
+
+/**
+ * This test runs the weaving proxy tests for the proxy bundles (not the uber bundle). 
+ * It needs to be a separate class from the uber-bundle test, since equinox configuration
+ * doesn't seem to be cleaned properly within the same test class, so we run with the 
+ * uber-bundle, which means we test nothing.
+ *
+ */
+@RunWith(JUnit4TestRunner.class)
+public class WeavingProxyBundlesTest extends AbstractWeavingProxyTest
+{
+  @org.ops4j.pax.exam.junit.Configuration
+  public static Option[] configuration37IndividualBundles() {
+      return testOptions(
+          generalOptions(), 
+          proxyBundles(),
+          equinox37()
+      );
+  }
+}
diff --git a/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/WeavingProxyTest.java b/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/WeavingProxyTest.java
index dbfe6e72..e69de29b 100644
--- a/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/WeavingProxyTest.java
+++ b/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/WeavingProxyTest.java
@@ -1,162 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.aries.proxy.itests;
-
-import static org.apache.aries.itest.ExtraOptions.mavenBundle;
-import static org.apache.aries.itest.ExtraOptions.paxLogging;
-import static org.apache.aries.itest.ExtraOptions.testOptions;
-import static org.junit.Assert.assertSame;
-import static org.junit.Assert.fail;
-import static org.ops4j.pax.exam.CoreOptions.equinox;
-
-import java.util.AbstractList;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.concurrent.Callable;
-
-import org.apache.aries.proxy.FinalModifierException;
-import org.apache.aries.proxy.ProxyManager;
-import org.apache.aries.proxy.weaving.WovenProxy;
-import org.apache.aries.proxy.weavinghook.ProxyWeavingController;
-import org.apache.aries.proxy.weavinghook.WeavingHelper;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.ops4j.pax.exam.Option;
-import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
-import org.ops4j.pax.exam.junit.JUnit4TestRunner;
-import org.osgi.framework.Bundle;
-import org.osgi.framework.FrameworkUtil;
-import org.osgi.framework.hooks.weaving.WovenClass;
-
-@RunWith(JUnit4TestRunner.class)
-public class WeavingProxyTest extends AbstractProxyTest
-{
-
-  /**
-   * This test does two things. First of all it checks that we can proxy a final 
-   * class. It also validates that the class implements WovenProxy, and that the
-   * delegation still works
-   */
-  @Test
-  public void checkProxyFinalClass() throws Exception
-  {
-    ProxyManager mgr = context().getService(ProxyManager.class);
-    Bundle b = FrameworkUtil.getBundle(this.getClass());
-    TestCallable dispatcher = new TestCallable();
-    TestCallable template = new TestCallable();
-    Collection<Class<?>> classes = new ArrayList<Class<?>>();
-    classes.add(TestCallable.class);
-    Callable<Object> o = (Callable<Object>) mgr.createDelegatingProxy(b, classes, 
-        dispatcher, template);
-    if(!!!(o instanceof WovenProxy))
-      fail("Proxy should be woven!");
-
-    Object inner = new Integer(3);
-    dispatcher.setReturn(new TestCallable());
-    ((TestCallable)dispatcher.call()).setReturn(inner);
-
-    assertSame("Should return the same object", inner, o.call());
-  }
-
-  /**
-   * This method checks that we correctly proxy a class with final methods.
-   */
-  @Test
-  public void checkProxyFinalMethods() throws Exception
-  {
-    ProxyManager mgr = context().getService(ProxyManager.class);
-    Bundle b = FrameworkUtil.getBundle(this.getClass());
-    Callable<Object> c = new TestCallable();
-    Collection<Class<?>> classes = new ArrayList<Class<?>>();
-    Runnable r = new Runnable() {
-      public final void run() {
-      }
-    };
-    classes.add(r.getClass());
-    Object o = mgr.createDelegatingProxy(b, classes, c, r);
-    if(!!!(o instanceof WovenProxy))
-      fail("Proxy should be woven!");
-  }
-
-  @Test(expected = FinalModifierException.class)
-  public void checkProxyController() throws Exception
-  {
-
-    context().registerService(ProxyWeavingController.class.getName(), new ProxyWeavingController() {
-
-      public boolean shouldWeave(WovenClass arg0, WeavingHelper arg1)
-      {
-        return false;
-      }
-    }, null);
-
-    ProxyManager mgr = context().getService(ProxyManager.class);
-    Bundle b = FrameworkUtil.getBundle(this.getClass());
-    Callable<Object> c = new TestCallable();
-    Collection<Class<?>> classes = new ArrayList<Class<?>>();
-    // Don't use anonymous inner class in this test as IBM and Sun load it at a different time
-    // For IBM JDK, the anonymous inner class will be loaded prior to the controller is registered.
-    Callable<?> callable = new TestFinalDelegate();
-    classes.add(callable.getClass());
-    Object o = mgr.createDelegatingProxy(b, classes, c, callable);
-    if(o instanceof WovenProxy)
-      fail("Proxy should not have been woven!");
-  }
-
-  @org.ops4j.pax.exam.junit.Configuration
-  public static Option[] configuration() {
-    return testOptions(
-        paxLogging("DEBUG"),
-
-        // Bundles
-        mavenBundle("org.apache.aries", "org.apache.aries.util"),
-        mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
-        mavenBundle("org.ow2.asm", "asm-all"),
-        // don't install the blueprint sample here as it will be installed onto the same framework as the blueprint core bundle
-        // mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample").noStart(),
-        mavenBundle("org.osgi", "org.osgi.compendium"),
-        // org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
-        PaxRunnerOptions.rawPaxRunnerOption("config", "classpath:ss-runner.properties"),
-        equinox().version("3.7.0.v20110613")
-    );
-  }
-
-  private static class TestFinalDelegate extends AbstractList<String> implements Callable<String> {
-
-    @Override
-    public String get(int location)
-    {
-
-      return null;
-    }
-
-    @Override
-    public int size()
-    {
-
-      return 0;
-    }
-
-    public final String call() throws Exception
-    {
-
-      return null;
-    }
-  }
-}
diff --git a/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/WeavingProxyUberBundleTest.java b/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/WeavingProxyUberBundleTest.java
index e69de29b..a147531a 100644
--- a/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/WeavingProxyUberBundleTest.java
+++ b/aries/trunk/proxy/proxy-itests/src/test/java/org/apache/aries/proxy/itests/WeavingProxyUberBundleTest.java
@@ -0,0 +1,66 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.proxy.itests;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.ops4j.pax.exam.CoreOptions.equinox;
+import static org.apache.aries.itest.ExtraOptions.*;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.concurrent.Callable;
+
+import org.apache.aries.itest.AbstractIntegrationTest;
+import org.apache.aries.proxy.FinalModifierException;
+import org.apache.aries.proxy.ProxyManager;
+import org.apache.aries.proxy.UnableToProxyException;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.ops4j.pax.exam.CoreOptions;
+import org.ops4j.pax.exam.Option;
+import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
+import org.ops4j.pax.exam.container.def.options.CleanCachesOption;
+import org.ops4j.pax.exam.junit.JUnit4TestRunner;
+import org.osgi.framework.Bundle;
+import org.osgi.framework.FrameworkUtil;
+import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
+import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
+
+/**
+ * This test runs the weaving proxy tests for the proxy uber bundle. 
+ * It needs to be a separate class from the individual-bundle test, since equinox configuration
+ * doesn't seem to be cleaned properly within the same test class, so we always run with the 
+ * uber-bundle, which means we test nothing.
+ *
+ */
+@RunWith(JUnit4TestRunner.class)
+public class WeavingProxyUberBundleTest extends AbstractWeavingProxyTest
+{
+  @org.ops4j.pax.exam.junit.Configuration
+  public static Option[] configuration37UberBundle() {
+      return testOptions(
+          generalOptions(), 
+          proxyUberBundle(),
+          equinox37()
+      );
+  }
+
+}
