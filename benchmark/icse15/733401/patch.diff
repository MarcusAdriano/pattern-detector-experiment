diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java
index 803057a8..4db9ae63 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java
@@ -76,6 +76,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	DataValueDescriptor			defaultValue;
 	DefaultInfoImpl				defaultInfo;
 	DefaultNode					defaultNode;
+	boolean						keepCurrentDefault;
     GenerationClauseNode   generationClauseNode;
 	long						autoincrementIncrement;
 	long						autoincrementStart;
@@ -174,6 +175,17 @@ else if (defaultNode instanceof GenerationClauseNode)
                     setNullability(false);
 			}
 		}
+		// ColumnDefinitionNode instances can be subclassed by
+		// ModifyColumnNode for use in ALTER TABLE .. ALTER COLUMN
+		// statements, in which case the node represents the intended
+		// changes to the column definition. For such a case, we
+		// record whether or not the statement specified that the
+		// column's default value should be changed. If we are to
+		// keep the current default, ModifyColumnNode will re-read
+		// the current default from the system catalogs prior to
+		// performing the column alteration. See DERBY-4006
+		// for more discussion of this behavior.
+		this.keepCurrentDefault = (defaultNode == null);
 	}
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java
index fa7b5ed9..b1a33f79 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java
@@ -343,7 +343,7 @@ void bindAndValidateDefault(DataDictionary dd, TableDescriptor td)
 		// and re-use it. This way, the column alteration only changes the
 		// aspects of the autoincrement settings that it intends to change,
 		// and does not lose the other aspecs.
-		if (defaultNode == null)
+		if (keepCurrentDefault)
         { defaultInfo = (DefaultInfoImpl)cd.getDefaultInfo(); }
         else
         {
