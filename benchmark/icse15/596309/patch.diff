diff --git a/db/derby/code/branches/10.3/java/drda/org/apache/derby/drda/NetworkServerControl.java b/db/derby/code/branches/10.3/java/drda/org/apache/derby/drda/NetworkServerControl.java
index d2c771bf..2cfe42e7 100644
--- a/db/derby/code/branches/10.3/java/drda/org/apache/derby/drda/NetworkServerControl.java
+++ b/db/derby/code/branches/10.3/java/drda/org/apache/derby/drda/NetworkServerControl.java
@@ -585,6 +585,14 @@ private static  void installSecurityManager( NetworkServerControlImpl server )
         if ( PropertyUtil.getSystemProperty( Property.SYSTEM_HOME_PROPERTY ) == null )
         { System.setProperty( Property.SYSTEM_HOME_PROPERTY, PropertyUtil.getSystemProperty( "user.dir" ) ); }
 
+        //
+        // Make sure the following property is set so that it can be substituted into the
+        // policy file. That will let us grant write permission on the server's
+        // trace file.
+        //
+        if ( PropertyUtil.getSystemProperty( Property.DRDA_PROP_TRACEDIRECTORY ) == null )
+        { System.setProperty( Property.DRDA_PROP_TRACEDIRECTORY, PropertyUtil.getSystemProperty( Property.SYSTEM_HOME_PROPERTY ) ); }
+
         //
         // Forcibly set the following property so that it will be correctly
         // substituted into the default policy file. This is the hostname for
diff --git a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
index c7492950..8893843f 100644
--- a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
+++ b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
@@ -25,6 +25,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.net.URL;
+import java.security.AccessController;
+import java.security.PrivilegedAction;
 import java.sql.Connection;
 import java.sql.DriverManager;
 import java.util.ArrayList;
@@ -355,6 +357,12 @@ public void testServerStartup()
         // wildcarded (DERBY-2811)
         //
         if ( _authenticationRequired && ( _wildCardHost != null ) ) { connectToServer(); }
+
+        //
+        // make sure that we can run sysinfo and turn on tracing (DERBY-3086)
+        //
+        runsysinfo();
+        enableTracing();
     }
 
     private void    connectToServer()
@@ -376,6 +384,26 @@ private void    connectToServer()
         conn.close();
     }
 
+    private void    runsysinfo()
+        throws Exception
+    {
+        String          sysinfoOutput = runServerCommand( "sysinfo" );
+
+        if ( sysinfoOutput.indexOf( "Security Exception:" ) > -1 )
+        { fail( "Security exceptions in sysinfo output:\n\n:" + sysinfoOutput ); }
+    }
+
+    private void    enableTracing()
+        throws Exception
+    {
+        String          traceOnOutput = runServerCommand( "trace on" );
+
+        println( "Output for trace on command:\n\n" + traceOnOutput );
+
+        if ( traceOnOutput.indexOf( "Trace turned on for all sessions." ) < 0 )
+        { fail( "Security exceptions in output of trace enabling command:\n\n:" + traceOnOutput ); }
+    }
+    
     ///////////////////////////////////////////////////////////////////////////////////
     //
     // Object OVERLOADS
@@ -402,12 +430,59 @@ public String toString()
     //
     ///////////////////////////////////////////////////////////////////////////////////
 
+    /**
+     * <p>
+     * Run a NetworkServerControl command.
+     * </p>
+     */
+    private String    runServerCommand( String commandSpecifics )
+        throws Exception
+    {
+        String          portNumber = Integer.toString( getTestConfiguration().getPort() );
+        StringBuffer    buffer = new StringBuffer();
+        String          classpath = getSystemProperty( "java.class.path" );
+
+        buffer.append( "java -classpath " );
+        buffer.append( classpath );
+        buffer.append( " org.apache.derby.drda.NetworkServerControl -p " + portNumber + " " + commandSpecifics );
+
+        final   String  command = buffer.toString();
+
+        println( "Server command is " + command );
+
+        Process     serverProcess = (Process) AccessController.doPrivileged
+            (
+             new PrivilegedAction()
+             {
+                 public Object run()
+                 {
+                     Process    result = null;
+                     try {
+                        result = Runtime.getRuntime().exec( command );
+                     } catch (Exception ex) {
+                         ex.printStackTrace();
+                     }
+                     
+                     return result;
+                 }
+             }
+            );
+
+        InputStream is = serverProcess.getInputStream();
+        
+        return getProcessOutput( is, 10000 );
+    }
+
     private String  getServerOutput()
         throws Exception
     {
-        byte[]          inputBuffer = new byte[ 1000 ];
+        return getProcessOutput( _inputStreamHolder[ 0 ], 1000 );
+    }
 
-        InputStream is = _inputStreamHolder[ 0 ];
+    private String  getProcessOutput( InputStream is, int bufferLength )
+        throws Exception
+    {
+        byte[]          inputBuffer = new byte[ bufferLength ];
 
         int             bytesRead = is.read( inputBuffer );
 
diff --git a/db/derby/code/branches/10.3/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java b/db/derby/code/branches/10.3/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java
index 955b913a..810fe547 100644
--- a/db/derby/code/branches/10.3/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java
+++ b/db/derby/code/branches/10.3/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java
@@ -199,10 +199,17 @@ private static void reportDerby (java.io.PrintWriter localAW) {
 
 	  localAW.println("JRE - JDBC: " + org.apache.derby.iapi.services.info.JVMInfo.derbyVMLevel());
 
-	  String classpath;
+	  String classpath = null;
 
 	  try {
-		  classpath = System.getProperty("java.class.path");
+          classpath = (String) AccessController.doPrivileged( new PrivilegedAction()
+              {
+                  public Object run()
+                  {
+                      return System.getProperty("java.class.path");
+                  }
+              }
+              );
 	  }
 	  catch (SecurityException se) {
           localAW.println(
@@ -289,14 +296,19 @@ private static void reportJavaInfo (java.io.PrintWriter localAW) {
     security exception.
    */
 
-  private static String getJavaProperty (String whichProperty) {
+  private static String getJavaProperty (final String whichProperty) {
 
-    String property;
-    String unavailable = Main.getTextMessage ("SIF01.H");
+    final   String unavailable = Main.getTextMessage ("SIF01.H");
 
     try {
-
-      property = System.getProperty (whichProperty, unavailable);
+        String  property = (String) AccessController.doPrivileged( new PrivilegedAction()
+            {
+                public  Object  run()
+                {
+                    return System.getProperty (whichProperty, unavailable);
+                }
+            }
+            );
       return property;
     }
     catch (SecurityException se) {
@@ -889,7 +901,11 @@ public Object run() {
      *  @param cpEntry the classpath element
      *  @return a ZipInfoProperties if an info properties file is found.
      */
-    private static ZipInfoProperties checkForInfo(String cpEntry)
+    private static ZipInfoProperties checkForInfo(final String cpEntry)
+    {
+        return (ZipInfoProperties) AccessController.doPrivileged( new PrivilegedAction()
+            {
+                public Object run()
     {
         File f = new File(cpEntry);
         if ( ! f.exists())
@@ -909,6 +925,10 @@ private static ZipInfoProperties checkForInfo(String cpEntry)
             return zip;
         }
         return null;
+    }
+            }
+            );
+        
     }
 
     /**
