diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexWriter.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexWriter.java
index e9b68b4f..91dfdffa 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexWriter.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexWriter.java
@@ -686,7 +686,7 @@ public int numDeletedDocs(SegmentInfo info) throws IOException {
    * Used internally to throw an {@link
    * AlreadyClosedException} if this IndexWriter has been
    * closed.
-   * @throws AlreadyClosedException if this IndexWriter is
+   * @throws AlreadyClosedException if this IndexWriter is closed
    */
   protected final void ensureOpen(boolean includePendingClose) throws AlreadyClosedException {
     if (closed || (includePendingClose && closing)) {
diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.java
index 73a3639d..7aab6816 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/codecs/sep/SepPostingsReaderImpl.java
@@ -504,6 +504,7 @@ SepDocsAndPositionsEnum init(FieldInfo fieldInfo, SepTermState termState, Bits s
       posIndex.set(termState.posIndex);
       posSeekPending = true;
       //posIndex.seek(posReader);
+      payloadPending = false;
 
       skipOffset = termState.skipOffset;
       payloadOffset = termState.payloadOffset;
@@ -640,7 +641,6 @@ public int nextPosition() throws IOException {
           assert payloadLength >= 0;
         }
         pendingPosCount--;
-        payloadPending = true;
         position = 0;
         pendingPayloadBytes += payloadLength;
       }
@@ -653,14 +653,13 @@ public int nextPosition() throws IOException {
           assert payloadLength >= 0;
         }
         position += code >> 1;
+        pendingPayloadBytes += payloadLength;
+        payloadPending = payloadLength > 0;
       } else {
         position += code;
       }
     
-      pendingPayloadBytes += payloadLength;
-      payloadPending = payloadLength > 0;
       pendingPosCount--;
-      payloadPending = true;
       assert pendingPosCount >= 0;
       return position;
     }
diff --git a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestPayloads.java b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestPayloads.java
index debaf354..9ecd915f 100644
--- a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestPayloads.java
+++ b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestPayloads.java
@@ -245,8 +245,8 @@ private void performTest(Directory dir) throws Exception {
             for (int i = 0; i < freq; i++) {
                 for (int j = 0; j < numTerms; j++) {
                     tps[j].nextPosition();
+                    if (tps[j].hasPayload()) {
                     BytesRef br = tps[j].getPayload();
-                    if (br != null) {
                       System.arraycopy(br.bytes, br.offset, verifyPayloadData, offset, br.length);
                       offset += br.length;
                     }
@@ -604,4 +604,27 @@ synchronized int size() {
             return pool.size();
         }
     }
+
+  public void testAcrossFields() throws Exception {
+    Directory dir = newDirectory();
+    RandomIndexWriter writer = new RandomIndexWriter(random, dir,
+                                                     new MockAnalyzer(MockTokenizer.WHITESPACE, true, true));
+    Document doc = new Document();
+    doc.add(new Field("haspayload", "here we go", Field.Store.YES, Field.Index.ANALYZED));
+    writer.addDocument(doc);
+    writer.close();
+
+    writer = new RandomIndexWriter(random, dir,
+                                   new MockAnalyzer(MockTokenizer.WHITESPACE, true, false));
+    doc = new Document();
+    doc.add(new Field("nopayload", "here we go", Field.Store.YES, Field.Index.ANALYZED));
+    writer.addDocument(doc);
+    writer.addDocument(doc);
+    writer.optimize();
+    writer.close();
+
+    _TestUtil.checkIndex(dir);
+
+    dir.close();
+  }
 }
diff --git a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/search/QueryUtils.java b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/search/QueryUtils.java
index 8a4266b8..1c8b7a7b 100644
--- a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/search/QueryUtils.java
+++ b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/search/QueryUtils.java
@@ -399,7 +399,7 @@ public void setScorer(Scorer scorer) throws IOException {
       public void collect(int doc) throws IOException {
         float score = scorer.score();
         try {
-          
+          long startMS = System.currentTimeMillis();
           for (int i=lastDoc[0]+1; i<=doc; i++) {
             Weight w = q.weight(s);
             Scorer scorer = w.scorer(reader, true, false);
@@ -408,6 +408,12 @@ public void collect(int doc) throws IOException {
             float skipToScore = scorer.score();
             Assert.assertEquals("unstable skipTo("+i+") score!",skipToScore,scorer.score(),maxDiff); 
             Assert.assertEquals("query assigned doc "+doc+" a score of <"+score+"> but skipTo("+i+") has <"+skipToScore+">!",score,skipToScore,maxDiff);
+            
+            // Hurry things along if they are going slow (eg
+            // if you got SimpleText codec this will kick in):
+            if (i < doc && System.currentTimeMillis() - startMS > 5) {
+              i = doc-1;
+            }
           }
           lastDoc[0] = doc;
         } catch (IOException e) {
