diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/net/MessagingService.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/net/MessagingService.java
index 0bfca4a4..6c514707 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/net/MessagingService.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/net/MessagingService.java
@@ -20,6 +20,8 @@
 
 import org.apache.cassandra.concurrent.*;
 import org.apache.cassandra.config.DatabaseDescriptor;
+import org.apache.cassandra.gms.FailureDetector;
+import org.apache.cassandra.gms.IFailureDetectionEventListener;
 import org.apache.cassandra.net.io.SerializerType;
 import org.apache.cassandra.net.sink.SinkManager;
 import org.apache.cassandra.utils.*;
@@ -27,7 +29,6 @@
 
 import java.io.IOException;
 import java.net.ServerSocket;
-import java.net.SocketException;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.nio.ByteBuffer;
@@ -41,7 +42,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.locks.ReentrantLock;
 
-public class MessagingService
+public class MessagingService implements IFailureDetectionEventListener
 {
     private static int version_ = 1;
     //TODO: make this parameter dynamic somehow.  Not sure if config is appropriate.
@@ -185,6 +186,13 @@ protected MessagingService()
         return result;
     }
     
+    /** called by failure detection code to notify that housekeeping should be performed on downed sockets. */
+    public void convict(InetAddress ep)
+    {
+        logger_.debug("Canceling pool for " + ep);
+        getConnectionPool(FBUtilities.getLocalAddress(), ep).reset();
+    }
+
     /**
      * Listen on the specified port.
      * @param localEp InetAddress whose port to listen on.
@@ -201,6 +209,7 @@ public void listen(InetAddress localEp) throws IOException
         SelectionKey key = SelectorManager.getSelectorManager().register(serverChannel, handler, SelectionKey.OP_ACCEPT);          
         endPoints_.add(localEp);            
         listenSockets_.put(localEp, key);             
+        FailureDetector.instance().registerFailureDetectionEventListener(this);
     }
     
     /**
@@ -411,12 +420,6 @@ public void sendOneWay(Message message, InetAddress to)
             connection = MessagingService.getConnection(processedMessage.getFrom(), to, message);
             connection.write(message);
         }
-        catch (SocketException se)
-        {
-            // Shutting down the entire pool. May be too conservative an approach.
-            MessagingService.getConnectionPool(message.getFrom(), to).shutdown();
-            logger_.error("socket error writing to " + to, se);
-        }
         catch (IOException e)
         {
             if (connection != null)
@@ -493,6 +496,7 @@ public static void shutdown()
         logger_.info("Shutting down ...");
         synchronized (MessagingService.class)
         {
+            FailureDetector.instance().unregisterFailureDetectionEventListener(MessagingService.instance());
             /* Stop listening on any TCP socket */
             for (SelectionKey skey : listenSockets_.values())
             {
diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/net/TcpConnection.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/net/TcpConnection.java
index 0b85ec3a..e029b4b4 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/net/TcpConnection.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/net/TcpConnection.java
@@ -317,7 +317,7 @@ void errorClose()
         cancel(key_);
         pendingWrites_.clear();
         if (pool_ != null)
-            pool_.destroy(this);
+            pool_.reset();
     }
     
     private void cancel(SelectionKey key)
diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/net/TcpConnectionManager.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/net/TcpConnectionManager.java
index 44854353..ff023034 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/net/TcpConnectionManager.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/net/TcpConnectionManager.java
@@ -64,24 +64,12 @@ synchronized TcpConnection getConnection(Message msg) throws IOException
         }
     }
 
-    synchronized void shutdown()
+    synchronized void reset()
     {
         for (TcpConnection con : new TcpConnection[] { cmdCon, ackCon })
             if (con != null)
                 con.closeSocket();
-    }
-
-    synchronized void destroy(TcpConnection con)
-    {
-        assert con != null;
-        if (cmdCon == con)
-        {
             cmdCon = null;
-        }
-        else
-        {
-            assert ackCon == con;
             ackCon = null;
         }
-    }
 }
