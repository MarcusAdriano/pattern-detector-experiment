diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
index 0af44eb1..c67f184a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
@@ -913,8 +913,6 @@ private void executeIncr(Tree statement, long multiplier)
         String columnFamily = CliCompiler.getColumnFamily(columnFamilySpec, keyspacesMap.get(keySpace).cf_defs);
         ByteBuffer key = getKeyAsBytes(columnFamily, columnFamilySpec.getChild(1));
         int columnSpecCnt = CliCompiler.numColumnSpecifiers(columnFamilySpec);
-        CfDef cfDef = getCfDef(columnFamily);
-        boolean isSuper = cfDef.column_type.equals("Super");
         
         byte[] superColumnName = null;
         ByteBuffer columnName;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/ReplicationStrategy.java b/cassandra/trunk/src/java/org/apache/cassandra/config/ReplicationStrategy.java
index c74bc3a9..e69de29b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/ReplicationStrategy.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/ReplicationStrategy.java
@@ -1,30 +0,0 @@
-package org.apache.cassandra.config;
-/*
- * 
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * 
- *   http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- * 
- */
-
-
-import java.util.Map;
-
-public class ReplicationStrategy
-{
-    public String strategy_class;
-    public Map<String, String> strategy_options;
-}
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java
index b6fa8af0..b0491605 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ArrayBackedSortedColumns.java
@@ -181,7 +181,7 @@ private int binarySearch(ByteBuffer name)
         while (low <= high)
         {
             mid = (low + high) >> 1;
-            if ((result = -compare(get(mid).name(), name)) > 0)
+            if ((result = compare(name, get(mid).name())) > 0)
             {
                 low = mid + 1;
             }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
index cb715dea..2337dfcc 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
@@ -258,16 +258,19 @@ public long maxTimestamp()
         return maxTimestamp;
     }
 
+    @Override
     public int hashCode()
     {
         throw new RuntimeException("Not implemented.");
     }
 
+    @Override
     public boolean equals(Object o)
     {
         throw new RuntimeException("Not implemented.");
     }
 
+    @Override
     public String toString()
     {
         StringBuilder sb = new StringBuilder("ColumnFamily(");
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ExpiringColumn.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ExpiringColumn.java
index cb79590f..2290ccd3 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ExpiringColumn.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ExpiringColumn.java
@@ -170,4 +170,22 @@ public void validateFields(CFMetaData metadata) throws MarshalException
         if (localExpirationTime < 0)
             throw new MarshalException("The local expiration time should not be negative");
     }
+
+    @Override
+    public boolean equals(Object o)
+    {
+        // super.equals() returns false if o is not a CounterColumn
+        return super.equals(o)
+            && localExpirationTime == ((ExpiringColumn)o).localExpirationTime
+            && timeToLive == ((ExpiringColumn)o).timeToLive;
+    }
+
+    @Override
+    public int hashCode()
+    {
+        int result = super.hashCode();
+        result = 31 * result + localExpirationTime;
+        result = 31 * result + timeToLive;
+        return result;
+    }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/RowIteratorFactory.java b/cassandra/trunk/src/java/org/apache/cassandra/db/RowIteratorFactory.java
index a08dbca2..caad3a94 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/RowIteratorFactory.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/RowIteratorFactory.java
@@ -90,7 +90,6 @@ public boolean apply(IColumnIterator row)
             iterators.add(scanner);
         }
 
-        final Memtable firstMemtable = memtables.iterator().next();
         // reduce rows from all sources into a single row
         return MergeIterator.get(iterators, COMPARE_BY_KEY, new MergeIterator.Reducer<IColumnIterator, Row>()
         {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java b/cassandra/trunk/src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java
index 0601317a..171692e1 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/compaction/SizeTieredCompactionStrategy.java
@@ -35,7 +35,7 @@
     private static final Logger logger = LoggerFactory.getLogger(SizeTieredCompactionStrategy.class);
     protected static final long DEFAULT_MIN_SSTABLE_SIZE = 50L * 1024L * 1024L;
     protected static final String MIN_SSTABLE_SIZE_KEY = "min_sstable_size";
-    protected static long minSSTableSize;
+    protected long minSSTableSize;
     protected volatile int estimatedRemainingTasks;
 
     public SizeTieredCompactionStrategy(ColumnFamilyStore cfs, Map<String, String> options)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java
index 0ea0cdad..c7c4fa13 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java
@@ -97,11 +97,6 @@ public void collateColumns(final ColumnFamily returnCF, List<? extends Closeable
         {
             ColumnFamily curCF = returnCF.cloneMeShallow();
 
-            protected boolean isEqual(IColumn o1, IColumn o2)
-            {
-                return o1.name().equals(o2.name());
-            }
-
             public void reduce(IColumn current)
             {
                 if (curCF.isSuper() && curCF.isEmpty())
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AbstractType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AbstractType.java
index a7543e34..6cc79133 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AbstractType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AbstractType.java
@@ -89,7 +89,7 @@ public int compare(ByteBuffer o1, ByteBuffer o2)
                     return 1;
                 }
 
-                return -AbstractType.this.compare(o1, o2);
+                return AbstractType.this.compare(o2, o1);
             }
         };
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/DynamicCompositeType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/DynamicCompositeType.java
index 592f3923..ea9d9400 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/DynamicCompositeType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/DynamicCompositeType.java
@@ -248,7 +248,7 @@ public void serializeComparator(ByteBuffer bb)
         {
             int header = 0;
             if (isAlias)
-                header = 0x8000 | ((byte)comparatorName.charAt(0));
+                header = 0x8000 | (((byte)comparatorName.charAt(0)) & 0xFF);
             else
                 header = comparatorName.length();
             putShortLength(bb, header);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/ReversedType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/ReversedType.java
index 9b41f2ff..7adbd940 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/ReversedType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/ReversedType.java
@@ -69,7 +69,7 @@ public int compare(ByteBuffer o1, ByteBuffer o2)
             return 1;
         }
 
-        return -baseType.compare(o1, o2);
+        return baseType.compare(o2, o1);
     }
 
     public String getString(ByteBuffer bytes)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/dht/LocalToken.java b/cassandra/trunk/src/java/org/apache/cassandra/dht/LocalToken.java
index 4a4c15f0..43540271 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/dht/LocalToken.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/dht/LocalToken.java
@@ -24,8 +24,6 @@
 
 public class LocalToken extends Token<ByteBuffer>
 {
-    static final long serialVersionUID = 8437543776403014875L;
-
     private final AbstractType comparator;
 
     public LocalToken(AbstractType comparator, ByteBuffer token)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/dht/Token.java b/cassandra/trunk/src/java/org/apache/cassandra/dht/Token.java
index dcbea168..5156cb37 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/dht/Token.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/dht/Token.java
@@ -30,7 +30,7 @@
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.utils.ByteBufferUtil;
 
-public abstract class Token<T> implements RingPosition<Token<T>>, Serializable
+public abstract class Token<T> implements RingPosition<Token<T>>
 {
     private static final long serialVersionUID = 1L;
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/compress/CompressionMetadata.java b/cassandra/trunk/src/java/org/apache/cassandra/io/compress/CompressionMetadata.java
index 064d2479..ad972019 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/compress/CompressionMetadata.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/compress/CompressionMetadata.java
@@ -258,7 +258,7 @@ public void resetAndTruncate(int chunkIndex) throws IOException
     /**
      * Holds offset and length of the file chunk
      */
-    public class Chunk
+    public static class Chunk
     {
         public final long offset;
         public final int length;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableLoader.java b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableLoader.java
index 9c7a9a3f..163be601 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableLoader.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/sstable/SSTableLoader.java
@@ -26,6 +26,7 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
 
 import org.apache.cassandra.config.ConfigurationException;
 import org.apache.cassandra.dht.IPartitioner;
@@ -165,10 +166,12 @@ public Void get() throws InterruptedException
             return null;
         }
 
-        public Void get(long timeout, TimeUnit unit) throws InterruptedException
+        public Void get(long timeout, TimeUnit unit) throws InterruptedException, TimeoutException
         {
-            latch.await(timeout, unit);
+            if (latch.await(timeout, unit))
             return null;
+            else
+                throw new TimeoutException();
         }
 
         public boolean isCancelled()
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/locator/PropertyFileSnitch.java b/cassandra/trunk/src/java/org/apache/cassandra/locator/PropertyFileSnitch.java
index f085a38a..91fd9be8 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/locator/PropertyFileSnitch.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/locator/PropertyFileSnitch.java
@@ -142,9 +142,10 @@ public void reloadConfiguration() throws ConfigurationException
 
             if (key.equals("default"))
             {
-                defaultDCRack = value.split(":");
-                if (defaultDCRack.length < 2)
-                    defaultDCRack = new String[] { "default", "default" };
+                String[] newDefault = value.split(":");
+                if (newDefault.length < 2)
+                    newDefault = new String[] { "default", "default" };
+                defaultDCRack = newDefault;
             }
             else
             {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/net/ProtocolHeader.java b/cassandra/trunk/src/java/org/apache/cassandra/net/ProtocolHeader.java
index 1be39daa..e69de29b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/net/ProtocolHeader.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/net/ProtocolHeader.java
@@ -1,31 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.cassandra.net;
-
-public class ProtocolHeader
-{
-    public static final String SERIALIZER = "SERIALIZER";
-    public static final String COMPRESSION = "COMPRESSION";
-    public static final String VERSION = "VERSION";
-    
-    public int serializerType_;
-    public boolean isCompressed_;
-    public boolean isStreamingMode_;
-    public int version_;
-}
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java b/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
index 535f7fff..812c23a1 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/AntiEntropyService.java
@@ -595,7 +595,7 @@ public String toString()
      * Triggers repairs with all neighbors for the given table, cfs and range.
      * Typical lifecycle is: start() then join(). Executed in client threads.
      */
-    class RepairSession extends WrappedRunnable implements IEndpointStateChangeSubscriber, IFailureDetectionEventListener
+    static class RepairSession extends WrappedRunnable implements IEndpointStateChangeSubscriber, IFailureDetectionEventListener
     {
         private final String sessionName;
         private final String tablename;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/FileStreamTask.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/FileStreamTask.java
index 0df082c9..e04b9b94 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/FileStreamTask.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/FileStreamTask.java
@@ -185,7 +185,7 @@ private void receiveReply() throws IOException
         assert MessagingService.getBits(msheader, 3, 1) == 0 : "Stream received before stream reply";
         int version = MessagingService.getBits(msheader, 15, 8);
 
-        int totalSize = input.readInt();
+        input.readInt(); // Read total size
         String id = input.readUTF();
         Header header = Header.serializer().deserialize(input, version);
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/utils/EstimatedHistogram.java b/cassandra/trunk/src/java/org/apache/cassandra/utils/EstimatedHistogram.java
index 70aa250f..20e1008d 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/utils/EstimatedHistogram.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/utils/EstimatedHistogram.java
@@ -24,6 +24,8 @@
 import java.util.Arrays;
 import java.util.concurrent.atomic.AtomicLongArray;
 
+import com.google.common.base.Objects;
+
 import org.apache.cassandra.io.ISerializer;
 
 public class EstimatedHistogram
@@ -202,6 +204,12 @@ public boolean equals(Object o)
                Arrays.equals(getBuckets(false), that.getBuckets(false));
     }
 
+    @Override
+    public int hashCode()
+    {
+        return Objects.hashCode(getBucketOffsets(), getBuckets(false));
+    }
+
     public static class EstimatedHistogramSerializer implements ISerializer<EstimatedHistogram>
     {
         public void serialize(EstimatedHistogram eh, DataOutput dos) throws IOException
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java b/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
index df5ba00c..3260f379 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
@@ -414,7 +414,7 @@ public int compare(DecoratedKey o1, DecoratedKey o2)
                         // both tokens are on the same side of the wrap point
                         return o1.compareTo(o2);
                     }
-                    return -o1.compareTo(o2);
+                    return o2.compareTo(o1);
                 }
             };
             Collections.sort(keys, comparator);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/utils/NodeId.java b/cassandra/trunk/src/java/org/apache/cassandra/utils/NodeId.java
index 5b940801..9e775b73 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/utils/NodeId.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/utils/NodeId.java
@@ -25,6 +25,7 @@
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import com.google.common.base.Objects;
 
 import org.apache.cassandra.db.CounterColumn;
 import org.apache.cassandra.db.SystemTable;
@@ -242,6 +243,12 @@ public boolean equals(Object o)
             return id.equals(otherRecord.id) && timestamp == otherRecord.timestamp;
         }
 
+        @Override
+        public int hashCode()
+        {
+            return Objects.hashCode(id, timestamp);
+        }
+
         public String toString()
         {
             return String.format("(%s, %d)", id.toString(), timestamp);
