diff --git a/cassandra/trunk/src/java/org/apache/cassandra/io/util/BufferedRandomAccessFile.java b/cassandra/trunk/src/java/org/apache/cassandra/io/util/BufferedRandomAccessFile.java
index 3d680751..7554ac6b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/io/util/BufferedRandomAccessFile.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/io/util/BufferedRandomAccessFile.java
@@ -57,6 +57,7 @@
     private boolean hitEOF_; // buffer contains last file block?
     private long diskPos_; // disk position
     private long markedPointer;
+    private long fileLength = -1; // cache for file size
 
     /*
     * To describe the above fields, we introduce the following abstractions for
@@ -125,7 +126,7 @@ public BufferedRandomAccessFile(File file, String mode, int size) throws IOExcep
     {
         super(file, mode);
         path_ = file.getAbsolutePath();
-        this.init(size);
+        this.init(size, mode);
     }
     
     /**
@@ -138,14 +139,14 @@ public BufferedRandomAccessFile(String name, String mode) throws IOException
         this(name, mode, 0);
     }
     
-    public BufferedRandomAccessFile(String name, String mode, int size) throws FileNotFoundException
+    public BufferedRandomAccessFile(String name, String mode, int size) throws IOException
     {
         super(name, mode);
         path_ = name;
-        this.init(size);
+        this.init(size, mode);
     }
     
-    private void init(int size)
+    private void init(int size, String mode) throws IOException
     {
         this.dirty_ = false;
         this.lo_ = this.curr_ = this.hi_ = 0;
@@ -153,6 +154,11 @@ private void init(int size)
         this.maxHi_ = (long) BuffSz_;
         this.hitEOF_ = false;
         this.diskPos_ = 0L;
+        if ("r".equals(mode))
+        {
+            // read only file, we can cache file length
+            this.fileLength = super.length();
+        }
     }
 
     public String getPath()
@@ -266,9 +272,17 @@ public long getFilePointer()
 
     public long length() throws IOException
     {
+        if (fileLength == -1)
+        {
         // max accounts for the case where we have written past the old file length, but not yet flushed our buffer
         return Math.max(this.curr_, super.length());
     }
+        else
+        {
+            // opened as read only, file length is cached
+            return fileLength;
+        }
+    }
 
     public int read() throws IOException
     {
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/io/util/BufferedRandomAccessFileTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/io/util/BufferedRandomAccessFileTest.java
index e69de29b..8d108236 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/io/util/BufferedRandomAccessFileTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/io/util/BufferedRandomAccessFileTest.java
@@ -0,0 +1,48 @@
+package org.apache.cassandra.io.util;
+
+import static org.junit.Assert.*;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.junit.Test;
+
+public class BufferedRandomAccessFileTest
+{
+
+    @Test
+    public void testLength() throws IOException
+    {
+        File tmpFile = File.createTempFile("lengthtest", "bin");
+        BufferedRandomAccessFile rw = new BufferedRandomAccessFile(tmpFile, "rw");
+        assertEquals(0, rw.length());
+
+        // write a chunk smaller then our buffer, so will not be flushed
+        // to disk
+        byte[] lessThenBuffer = new byte[BufferedRandomAccessFile.BuffSz_ / 2];
+        rw.write(lessThenBuffer);
+        assertEquals(lessThenBuffer.length, rw.length());
+
+        // sync the data and check length
+        rw.sync();
+        assertEquals(lessThenBuffer.length, rw.length());
+
+        // write more then the buffer can hold and check length
+        byte[] biggerThenBuffer = new byte[BufferedRandomAccessFile.BuffSz_ * 2];
+        rw.write(biggerThenBuffer);
+        assertEquals(biggerThenBuffer.length + lessThenBuffer.length, rw.length());
+
+        // checking that reading doesn't interfere
+        rw.seek(0);
+        rw.read();
+        assertEquals(biggerThenBuffer.length + lessThenBuffer.length, rw.length());
+
+        rw.close();
+
+        // will use cachedlength
+        BufferedRandomAccessFile r = new BufferedRandomAccessFile(tmpFile, "r");
+        assertEquals(lessThenBuffer.length + biggerThenBuffer.length, r.length());
+        r.close();
+    }
+
+}
