diff --git a/incubator/aries/trunk/jpa/jpa-blueprint-aries/src/main/java/org/apache/aries/jpa/blueprint/aries/impl/NSHandler.java b/incubator/aries/trunk/jpa/jpa-blueprint-aries/src/main/java/org/apache/aries/jpa/blueprint/aries/impl/NSHandler.java
index bf965bd9..ab6f791a 100644
--- a/incubator/aries/trunk/jpa/jpa-blueprint-aries/src/main/java/org/apache/aries/jpa/blueprint/aries/impl/NSHandler.java
+++ b/incubator/aries/trunk/jpa/jpa-blueprint-aries/src/main/java/org/apache/aries/jpa/blueprint/aries/impl/NSHandler.java
@@ -1,5 +1,5 @@
 /**
- * Licensed to the Apache Software Foundation (ASF) under one
+f * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
  * regarding copyright ownership.  The ASF licenses this file
@@ -168,6 +168,7 @@ public ComponentMetadata decorate(Node node, ComponentMetadata component,
             Bundle client = getBlueprintBundle(context);
             String unitName = parseUnitName(element);
 
+            if (client != null) {
             HashMap<String, Object> properties = new HashMap<String, Object>();
             // Remember to add the PersistenceContextType so that we can create
             // the correct type of
@@ -182,6 +183,9 @@ public ComponentMetadata decorate(Node node, ComponentMetadata component,
                 		"The blueprint for this bundle will not start correctly unless the managed persistence context is registered through some other mechanism",
                 		new Object[] {client.getSymbolicName() + "_" + client.getVersion(), unitName, properties});
             }
+            } else {
+                _logger.debug("No bundle: this must be a dry, parse only run.");
+            }
         }
 
         bean.addProperty(beanProperty);
