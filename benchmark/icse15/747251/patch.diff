diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/IndexWriter.java b/lucene/java/trunk/src/java/org/apache/lucene/index/IndexWriter.java
index bad87fec..cdd9fa0e 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/IndexWriter.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/IndexWriter.java
@@ -3610,20 +3610,6 @@ private void commit(long sizeInBytes) throws IOException {
     finishCommit();
   }
 
-  private boolean committing;
-
-  synchronized private void waitForCommit() {
-    // Only allow a single thread to do the commit, at a time:
-    while(committing)
-      doWait();
-    committing = true;
-  }
-
-  synchronized private void doneCommit() {
-    committing = false;
-    notifyAll();
-  }
-
   /**
    * <p>Commits all pending updates (added & deleted
    * documents) to the index, and syncs all referenced index
@@ -3670,10 +3656,6 @@ public final void commit(String commitUserData) throws CorruptIndexException, IO
 
     ensureOpen();
 
-    // Only let one thread do the prepare/finish at a time
-    waitForCommit();
-
-    try {
       if (infoStream != null)
         message("commit: start");
 
@@ -3685,9 +3667,6 @@ public final void commit(String commitUserData) throws CorruptIndexException, IO
         message("commit: already prepared");
 
       finishCommit();
-    } finally {
-      doneCommit();
-    }
   }
 
   private synchronized final void finishCommit() throws CorruptIndexException, IOException {
@@ -3745,8 +3724,6 @@ private synchronized final boolean doFlush(boolean flushDocStores, boolean flush
 
     flushCount++;
 
-    // Make sure no threads are actively adding a document
-
     flushDeletes |= docWriter.deletesFull();
 
     // When autoCommit=true we must always flush deletes
@@ -3755,6 +3732,7 @@ private synchronized final boolean doFlush(boolean flushDocStores, boolean flush
     // from an updateDocument call
     flushDeletes |= autoCommit;
 
+    // Make sure no threads are actively adding a document.
     // Returns true if docWriter is currently aborting, in
     // which case we skip flushing this segment
     if (docWriter.pauseAllThreads()) {
@@ -4891,14 +4869,15 @@ private void startCommit(long sizeInBytes, String commitUserData) throws IOExcep
           // since I first started syncing my version, I can
           // safely skip saving myself since I've been
           // superseded:
-          if (myChangeCount > lastCommitChangeCount && (pendingCommit == null || myChangeCount > pendingCommitChangeCount)) {
 
-            // Wait now for any current pending commit to complete:
-            while(pendingCommit != null) {
-              if (infoStream != null)
-                message("wait for existing pendingCommit to finish...");
-              doWait();
+          while(true) {
+            if (myChangeCount <= lastCommitChangeCount) {
+              if (infoStream != null) {
+                message("sync superseded by newer infos");
             }
+              break;
+            } else if (pendingCommit == null) {
+              // My turn to commit
 
             if (segmentInfos.getGeneration() > toSync.getGeneration())
               toSync.updateGeneration(segmentInfos);
@@ -4928,8 +4907,12 @@ private void startCommit(long sizeInBytes, String commitUserData) throws IOExcep
               if (!success && infoStream != null)
                 message("hit exception committing segments file");
             }
-          } else if (infoStream != null)
-            message("sync superseded by newer infos");
+              break;
+            } else {
+              // Must wait for other commit to complete
+              doWait();
+            }
+          }
         }
 
         if (infoStream != null)
