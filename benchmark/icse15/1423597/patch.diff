diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeySafeLeaderTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeySafeLeaderTest.java
index b43c43fd..da17c5ad 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeySafeLeaderTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ChaosMonkeySafeLeaderTest.java
@@ -57,6 +57,8 @@ public static void afterSuperClass() {
   @Before
   @Override
   public void setUp() throws Exception {
+    useFactory("solr.StandardDirectoryFactory");
+
     super.setUp();
     
     System.setProperty("numShards", Integer.toString(sliceCount));
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/RecoveryZkTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/RecoveryZkTest.java
index 310a0a4c..3bf02147 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/RecoveryZkTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/RecoveryZkTest.java
@@ -89,7 +89,7 @@ public void doTest() throws Exception {
 
     // test that leader and replica have same doc count
     
-    checkShardConsistency("shard1", false); 
+    checkShardConsistency("shard1", false, false);
     SolrQuery query = new SolrQuery("*:*");
     query.setParam("distrib", "false");
     long client1Docs = shardToJetty.get("shard1").get(0).client.solrClient.query(query).getResults().getNumFound();
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/SyncSliceTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/SyncSliceTest.java
index f51d86d0..8096f44a 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/SyncSliceTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/SyncSliceTest.java
@@ -114,7 +114,7 @@ public void doTest() throws Exception {
     waitForRecoveriesToFinish(false);
 
     // shard should be inconsistent
-    String shardFailMessage = checkShardConsistency("shard1", true);
+    String shardFailMessage = checkShardConsistency("shard1", true, false);
     assertNotNull(shardFailMessage);
     
     ModifiableSolrParams params = new ModifiableSolrParams();
@@ -207,7 +207,7 @@ public void doTest() throws Exception {
     waitForRecoveriesToFinish(false);
     
     // shard should be inconsistent
-    shardFailMessage = checkShardConsistency("shard1", true);
+    shardFailMessage = checkShardConsistency("shard1", true, false);
     assertNotNull(shardFailMessage);
     
     
diff --git a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
index b810bf43..03868ad8 100644
--- a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
+++ b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
@@ -795,10 +795,14 @@ protected void indexAbunchOfDocs() throws Exception {
   }
   
   protected void checkShardConsistency(String shard) throws Exception {
-    checkShardConsistency(shard, false);
+    checkShardConsistency(shard, false, false);
   }
   
-  protected String checkShardConsistency(String shard, boolean verbose)
+  /* Returns a non-null string if replicas within the same shard are not consistent.
+   * If expectFailure==false, the exact differences found will be logged since this would be an unexpected failure.
+   * verbose causes extra debugging into to be displayed, even if everything is consistent.
+   */
+  protected String checkShardConsistency(String shard, boolean expectFailure, boolean verbose)
       throws Exception {
     
     List<CloudJettyRunner> solrJetties = shardToJetty.get(shard);
@@ -825,8 +829,7 @@ protected String checkShardConsistency(String shard, boolean verbose)
       if (verbose) System.err.println("PROPS:" + props);
       
       try {
-        SolrQuery query = new SolrQuery("*:*");
-        query.set("distrib", false);
+        SolrParams query = params("q","*:*", "rows","0", "distrib","false", "tests","checkShardConsistency"); // "tests" is just a tag that won't do anything except be echoed in logs
         num = cjetty.client.solrClient.query(query).getResults().getNumFound();
       } catch (SolrServerException e) {
         if (verbose) System.err.println("error contacting client: "
@@ -844,7 +847,6 @@ protected String checkShardConsistency(String shard, boolean verbose)
         live = true;
       }
       if (verbose) System.err.println(" live:" + live);
-      
       if (verbose) System.err.println(" num:" + num + "\n");
       
       boolean active = props.getStr(ZkStateReader.STATE_PROP).equals(
@@ -854,13 +856,14 @@ protected String checkShardConsistency(String shard, boolean verbose)
           failMessage = shard + " is not consistent.  Got " + lastNum + " from " + lastJetty.url + "lastClient"
               + " and got " + num + " from " + cjetty.url;
 
-          if (verbose || true) {
+          if (!expectFailure || verbose) {
             System.err.println("######" + failMessage);
             SolrQuery query = new SolrQuery("*:*");
             query.set("distrib", false);
             query.set("fl","id,_version_");
-            query.set("rows","1000");
+            query.set("rows","100000");
             query.set("sort","id asc");
+            query.set("tests","checkShardConsistency/showDiff");
 
             SolrDocumentList lst1 = lastJetty.client.solrClient.query(query).getResults();
             SolrDocumentList lst2 = cjetty.client.solrClient.query(query).getResults();
@@ -877,9 +880,24 @@ protected String checkShardConsistency(String shard, boolean verbose)
     
   }
   
-  void showDiff(SolrDocumentList a, SolrDocumentList b, String aName, String bName) {
-    System.err.println("######"+aName+ ": " + a);
-    System.err.println("######"+bName+ ": " + b);
+  private String toStr(SolrDocumentList lst) {
+    if (lst.size() <= 10) return lst.toString();
+
+    StringBuilder sb = new StringBuilder("SolrDocumentList[sz=" + lst.size());
+    if (lst.size() != lst.getNumFound()) {
+      sb.append(" numFound=" + lst.getNumFound());
+    }
+    sb.append("]=");
+    sb.append(lst.subList(0,5).toString());
+    sb.append(" , [...] , ");
+    sb.append(lst.subList(lst.size()-5, lst.size()).toString());
+
+    return sb.toString();
+  }
+
+  Set<Map> showDiff(SolrDocumentList a, SolrDocumentList b, String aName, String bName) {
+    System.err.println("######"+aName+ ": " + toStr(a));
+    System.err.println("######"+bName+ ": " + toStr(b));
     System.err.println("###### sizes=" + a.size() + "," + b.size());
     
     Set<Map> setA = new HashSet<Map>();
@@ -903,30 +921,30 @@ void showDiff(SolrDocumentList a, SolrDocumentList b, String aName, String bName
     if (onlyInB.size() > 0) {
       System.err.println("###### Only in " + bName + ": " + onlyInB);
     }
+
+    onlyInA.addAll(b);
+    return onlyInA;
   }
   
+  /* Checks both shard replcia consistency and against the control shard.
+  * The test will be failed if differences are found.
+  */
   protected void checkShardConsistency() throws Exception {
     checkShardConsistency(true, false);
   }
   
+  /* Checks shard consistency and optionally checks against the control shard.
+   * The test will be failed if differences are found.
+   */
   protected void checkShardConsistency(boolean checkVsControl, boolean verbose)
       throws Exception {
-    SolrParams q = params("q","*:*","fl","id","rows","100000");
-
-    SolrDocumentList controlDocList = controlClient.query(q).getResults();
-    long docs = controlDocList.getNumFound();
-
-    SolrDocumentList cloudDocList = cloudClient.query(q).getResults();
-    long cloudClientDocs = cloudDocList.getNumFound();
-
-    if (verbose) System.err.println("Control Docs:" + docs);
     
     updateMappingsFromZk(jettys, clients);
     
     Set<String> theShards = shardToJetty.keySet();
     String failMessage = null;
     for (String shard : theShards) {
-      String shardFailMessage = checkShardConsistency(shard, verbose);
+      String shardFailMessage = checkShardConsistency(shard, false, verbose);
       if (shardFailMessage != null && failMessage == null) {
         failMessage = shardFailMessage;
       }
@@ -936,7 +954,19 @@ protected void checkShardConsistency(boolean checkVsControl, boolean verbose)
       fail(failMessage);
     }
     
-    if (checkVsControl) {
+    if (!checkVsControl) return;
+
+    SolrParams q = params("q","*:*","rows","0", "tests","checkShardConsistency(vsControl)");    // add a tag to aid in debugging via logs
+
+    SolrDocumentList controlDocList = controlClient.query(q).getResults();
+    long controlDocs = controlDocList.getNumFound();
+
+    SolrDocumentList cloudDocList = cloudClient.query(q).getResults();
+    long cloudClientDocs = cloudDocList.getNumFound();
+
+
+
+
       // now check that the right # are on each shard
       theShards = shardToJetty.keySet();
       int cnt = 0;
@@ -970,12 +1000,41 @@ protected void checkShardConsistency(boolean checkVsControl, boolean verbose)
       }
       
 
-      if (docs != cnt || cloudClientDocs != docs) {
-        String msg = "document count mismatch.  control=" + docs + " sum(shards)="+ cnt + " cloudClient="+cloudClientDocs;
+    if (controlDocs != cnt || cloudClientDocs != controlDocs) {
+      String msg = "document count mismatch.  control=" + controlDocs + " sum(shards)="+ cnt + " cloudClient="+cloudClientDocs;
         log.error(msg);
-        showDiff(controlDocList, cloudDocList,"controlDocList","cloudDocList");
-        fail(msg);
+
+      // re-execute the query getting ids
+      q = params("q","*:*","rows","100000", "fl","id", "tests","checkShardConsistency(vsControl)/getIds");    // add a tag to aid in debugging via logs
+      controlDocList = controlClient.query(q).getResults();
+      if (controlDocs != controlDocList.getNumFound()) {
+        log.error("Something changed! control now " + controlDocList.getNumFound());
+      };
+
+      cloudDocList = cloudClient.query(q).getResults();
+      if (cloudClientDocs != cloudDocList.getNumFound()) {
+        log.error("Something changed! cloudClient now " + cloudDocList.getNumFound());
+      };
+
+      Set<Map> differences = showDiff(controlDocList, cloudDocList,"controlDocList","cloudDocList");
+
+      // get versions for the mismatched ids
+      StringBuilder ids = new StringBuilder("id:(");
+      for (Map doc : differences) {
+        ids.append(" "+doc.get("id"));
       }
+      ids.append(")");
+
+      // get versions for those ids that don't match
+      q = params("q",ids.toString(),"rows","100000", "fl","id,_version_", "sort","id asc",
+                 "tests","checkShardConsistency(vsControl)/getVers");    // add a tag to aid in debugging via logs
+
+      SolrDocumentList a = controlClient.query(q).getResults();
+      SolrDocumentList b = cloudClient.query(q).getResults();
+
+      log.error("controlClient :" + a + "\n\tcloudClient :" + b);
+
+      fail(msg);
     }
   }
   
@@ -1214,7 +1273,7 @@ public void waitForThingsToLevelOut(int waitForRecTimeSeconds) throws Exception
       Set<String> theShards = shardToJetty.keySet();
       String failMessage = null;
       for (String shard : theShards) {
-        failMessage = checkShardConsistency(shard, false);
+        failMessage = checkShardConsistency(shard, true, false);
       }
       
       if (failMessage != null) {
