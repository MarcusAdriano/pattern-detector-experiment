diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/io/CPFile.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/io/CPFile.java
index 5178d68d..05f83b3c 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/io/CPFile.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/io/CPFile.java
@@ -21,13 +21,9 @@
 package org.apache.derby.impl.io;
 
 import org.apache.derby.io.StorageFile;
-import org.apache.derby.io.StorageRandomAccessFile;
-
-import org.apache.derby.iapi.services.sanity.SanityManager;
 
 import java.io.InputStream;
-import java.io.OutputStream;
-import java.io.IOException;
+
 import java.io.FileNotFoundException;
 
 /**
@@ -38,8 +34,6 @@
 {
 
     private final CPStorageFactory storageFactory;
-    private int actionCode;
-    private static final int EXISTS_ACTION = 1;
 
     CPFile( CPStorageFactory storageFactory, String path)
     {
@@ -72,19 +66,24 @@ private CPFile( CPStorageFactory storageFactory, String child, int pathLen)
      */
     public boolean exists()
     {
-        if( storageFactory.useContextLoader)
-        {
             ClassLoader cl = Thread.currentThread().getContextClassLoader();
-            if( cl != null && cl.getResource( path) != null)
+    	if (cl != null)
+    		if (cl.getResource(path) != null)
                 return true;
+    	// don't assume the context class loader is tied
+    	// into the class loader that loaded this class.
+    	cl = getClass().getClassLoader();
+		// Javadoc indicates implementations can use
+		// null as a return from Class.getClassLoader()
+		// to indicate the system/bootstrap classloader.
+    	if (cl != null)
+    	{
+    		return (cl.getResource(path) != null);
         }
-        if( getClass().getResource( path) != null)
+    	else
         {
-            if( storageFactory.useContextLoader)
-                storageFactory.useContextLoader = false;
-            return true;
+    		return ClassLoader.getSystemResource(path) != null;
         }
-        return false;
     } // end of exists
 
     /**
@@ -106,19 +105,29 @@ StorageFile getParentDir( int pathLen)
      */
     public InputStream getInputStream( ) throws FileNotFoundException
     {
+    	//System.out.println("HERE FOR " + toString());
         InputStream is = null;
-        if( storageFactory.useContextLoader)
-        {
             ClassLoader cl = Thread.currentThread().getContextClassLoader();
-            is = cl.getResourceAsStream( path);
-            if( is != null)
-                return is;
+    	if (cl != null)
+    		is = cl.getResourceAsStream(path);
+    	
+       	// don't assume the context class loader is tied
+    	// into the class loader that loaded this class.
+    	if (is == null)
+    	{
+    		cl = getClass().getClassLoader();
+    		// Javadoc indicates implementations can use
+    		// null as a return from Class.getClassLoader()
+    		// to indicate the system/bootstrap classloader.
+    		if (cl != null)
+    			is = cl.getResourceAsStream(path);
+    		else
+    			is = ClassLoader.getSystemResourceAsStream(path);
         }
-        is = getClass().getResourceAsStream( path);
-        if( is != null && storageFactory.useContextLoader)
-            storageFactory.useContextLoader = false;
-        if( is == null)
-            throw new FileNotFoundException( "Not in class path: " + path);
+    	
+    	if (is == null)
+    		throw new FileNotFoundException(toString());
         return is;
+    	
     } // end of getInputStream
 }
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/io/CPStorageFactory.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/io/CPStorageFactory.java
index cc395d28..04fb8ce7 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/io/CPStorageFactory.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/io/CPStorageFactory.java
@@ -39,44 +39,6 @@
 
 public class CPStorageFactory extends BaseStorageFactory
 {
-    boolean useContextLoader = true;
-    
-    /**
-     * Classes implementing the StorageFactory interface must have a null
-     * constructor.  This method is called when the database is booted up to
-     * initialize the class. It should perform all actions necessary to start the
-     * basic storage, such as creating a temporary file directory.
-     *
-     * The init method will be called once, before any other method is called, and will not
-     * be called again.
-     *
-     * @param home The name of the directory containing the database. It comes from the system.home system property.
-     *             It may be null. A storage factory may decide to ignore this parameter. (For instance the classpath
-     *             storage factory ignores it.
-     * @param databaseName The name of the database (directory). All relative pathnames are relative to this directory.
-     *                     If null then the storage factory will only be used to deal with the directory containing
-     *                     the databases.
-     * @param create If true then the database is being created.
-     * @param tempDirName The name of the temporary file directory set in properties. If null then a default
-     *                    directory should be used. Each database should get a separate temporary file
-     *                    directory within this one to avoid collisions.
-     * @param uniqueName A unique name that can be used to create the temporary file directory for this database.
-     *
-     * @exception IOException on an error (unexpected).
-     */
-    public void init( String home, String databaseName, String tempDirName, String uniqueName)
-        throws IOException
-    {
-        // Prefix the database name with a '/' so that the class loader will not use a Cloudscape
-        // internal package.
-        if( databaseName == null
-            || ( databaseName.length() > 0
-                 && (databaseName.charAt( 0) == '/' || databaseName.charAt( 0) == getSeparator())))
-            super.init( home, databaseName, tempDirName, uniqueName);
-        else
-            super.init( home, "/" + databaseName, tempDirName, uniqueName);
-    }
-    
     /**
      * Construct a persistent StorageFile from a path name.
      *
diff --git a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/dbjarUtil.java b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/dbjarUtil.java
index e69de29b..f6db67ca 100644
--- a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/dbjarUtil.java
+++ b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/dbjarUtil.java
@@ -0,0 +1,135 @@
+/*
+
+Derby - Class org.apache.derbyTesting.functionTests.tests.lang.cursor
+
+Copyright 1999, 2005 The Apache Software Foundation or its licensors, as applicable.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+   http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+*/
+
+package org.apache.derbyTesting.functionTests.tests.lang;
+
+import java.io.BufferedInputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLClassLoader;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipOutputStream;
+
+/**
+	Simple program to archive a database up in a jar file
+	within the test harness.
+*/
+
+public class dbjarUtil
+{
+	/**
+		jarname - jarname to use
+		path - path to database
+		dbname - database name in archive
+	*/
+	public static void createArchive(String jarName, String path, String dbName) throws Exception {
+
+		String root = System.getProperty("derby.system.home", System.getProperty("user.dir"));
+
+		// get list of files
+		File top = new File(root, path);
+
+		if (!top.isDirectory())
+			throw new Exception(top.toString() + " is not a directory");
+
+		// jar file paths in the JDB CURL are relative to the root
+		// derby.system.home or user.dir, so need to create the jar there.
+		ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(new File(root, jarName))); 
+
+		addEntries(zos, top, dbName, top.getPath().length());
+		
+		zos.close(); 
+	}
+
+
+	static void addEntries(ZipOutputStream zos, File dir, String dbName, int old) throws Exception {
+
+		String[] list = dir.list();
+
+		for (int i = 0; i < list.length; i++) {
+
+			File f = new File(dir, list[i]);
+			if (f.isDirectory()) {
+				addEntries(zos, f, dbName, old);
+			} else {
+				addFile(zos, f, dbName, old);
+			}
+
+		}
+	}
+
+
+
+
+    static void addFile(
+        ZipOutputStream zos, 
+        File f, String dbName, int old) throws IOException
+    {
+
+		String s = f.getPath().replace(File.separatorChar, '/');
+
+		s = s.substring(old);
+
+		s = dbName.concat(s);
+
+		// jar has forward slashes!
+        ZipEntry ze= new ZipEntry(s); 
+        ze.setTime(f.lastModified()); 
+
+        zos.putNextEntry(ze); 
+
+		byte[] byte8= new byte[1024]; 
+        BufferedInputStream bufferedInputStream10= new BufferedInputStream((new FileInputStream(f))); 
+        while (true)
+        {
+            int int9= bufferedInputStream10.read(byte8, 0, byte8.length); 
+            if (int9 == -1)
+            {
+                break;
+            }
+            zos.write(byte8, 0, int9); 
+        }
+
+        bufferedInputStream10.close(); 
+        zos.closeEntry(); 
+    }
+  
+    public static void setDBContextClassLoader(String jarName) throws MalformedURLException
+    {
+		String root = System.getProperty("derby.system.home", System.getProperty("user.dir"));
+
+		File jar = new File(root, jarName);
+		
+		URLClassLoader cl = new URLClassLoader(new URL[] {jar.toURL()});
+    	java.lang.Thread.currentThread().setContextClassLoader(cl);
+   
+    }
+
+    public static void setNullContextClassLoader()
+    {
+    	java.lang.Thread.currentThread().setContextClassLoader(null);
+    }
+
+}
+
