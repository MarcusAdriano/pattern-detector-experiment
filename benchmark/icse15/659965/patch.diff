diff --git a/lucene/java/trunk/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java b/lucene/java/trunk/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java
index a8c8e25c..ad744d5d 100644
--- a/lucene/java/trunk/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java
+++ b/lucene/java/trunk/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java
@@ -95,7 +95,7 @@ private void closeReaders() {
   private void extract(Query query, Map terms) throws IOException {
     if (query instanceof BooleanQuery) {
       BooleanClause[] queryClauses = ((BooleanQuery) query).getClauses();
-      Map booleanTerms = new HashMap();
+      Map booleanTerms = new PositionCheckingMap();
       for (int i = 0; i < queryClauses.length; i++) {
         if (!queryClauses[i].isProhibited()) {
           extract(queryClauses[i].getQuery(), booleanTerms);
@@ -126,7 +126,7 @@ private void extract(Query query, Map terms) throws IOException {
     } else if (query instanceof FilteredQuery) {
       extract(((FilteredQuery) query).getQuery(), terms);
     } else if (query instanceof DisjunctionMaxQuery) {
-      Map disjunctTerms = new HashMap();
+      Map disjunctTerms = new PositionCheckingMap();
       for (Iterator iterator = ((DisjunctionMaxQuery) query).iterator(); iterator.hasNext();) {
         extract((Query) iterator.next(), disjunctTerms);
       }
@@ -268,7 +268,6 @@ private void extractWeightedSpanTerms(Map terms, SpanQuery spanQuery) throws IOE
         } else {
           if (spanPositions.size() > 0) {
             weightedSpanTerm.addPositionSpans(spanPositions);
-            weightedSpanTerm.positionSensitive = true;
           }
         }
       }
@@ -336,7 +335,7 @@ public Map getWeightedSpanTerms(Query query, CachingTokenFilter cachingTokenFilt
     this.fieldName = null;
     this.cachedTokenFilter = cachingTokenFilter;
 
-    Map terms = new HashMap();
+    Map terms = new PositionCheckingMap();
     try {
       extract(query, terms);
     } finally {
@@ -366,7 +365,7 @@ public Map getWeightedSpanTerms(Query query, CachingTokenFilter cachingTokenFilt
       this.fieldName = fieldName.intern();
     }
 
-    Map terms = new HashMap();
+    Map terms = new PositionCheckingMap();
     this.cachedTokenFilter = cachingTokenFilter;
     try {
       extract(query, terms);
@@ -399,7 +398,7 @@ public Map getWeightedSpanTermsWithScores(Query query, TokenStream tokenStream,
     this.fieldName = fieldName;
     this.cachedTokenFilter = new CachingTokenFilter(tokenStream);
 
-    Map terms = new HashMap();
+    Map terms = new PositionCheckingMap();
     extract(query, terms);
 
     int totalNumDocs = reader.numDocs();
@@ -430,4 +429,32 @@ public boolean isHighlightCnstScrRngQuery() {
   public void setHighlightCnstScrRngQuery(boolean highlightCnstScrRngQuery) {
     this.highlightCnstScrRngQuery = highlightCnstScrRngQuery;
   }
+  
+  /**
+   * This class makes sure that if both position sensitive and insensitive
+   * versions of the same term are added, the position insensitive one wins.
+   */
+  private class PositionCheckingMap extends HashMap {
+
+    public void putAll(Map m) {
+      Iterator it = m.keySet().iterator();
+      while (it.hasNext()) {
+        Object key = it.next();
+        Object val = m.get(key);
+        this.put(key, val);
+      }
+    }
+
+    public Object put(Object key, Object value) {
+      Object prev = super.put(key, value);
+      if (prev == null) return prev;
+      WeightedSpanTerm prevTerm = (WeightedSpanTerm)prev;
+      WeightedSpanTerm newTerm = (WeightedSpanTerm)value;
+      if (!prevTerm.positionSensitive) {
+        newTerm.positionSensitive = false;
+      }
+      return prev;
+    }
+    
+  }
 }
diff --git a/lucene/java/trunk/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java b/lucene/java/trunk/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
index 690eaa9b..2a10446c 100644
--- a/lucene/java/trunk/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
+++ b/lucene/java/trunk/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
@@ -236,6 +236,30 @@ public void testSimpleSpanPhraseHighlighting3() throws Exception {
     }
   }
 
+  // position sensitive query added after position insensitive query
+  public void testPosTermStdTerm() throws Exception {
+    doSearching("y \"x y z\"");
+
+    int maxNumFragmentsRequired = 2;
+
+    for (int i = 0; i < hits.length(); i++) {
+      String text = hits.doc(i).get(FIELD_NAME);
+      CachingTokenFilter tokenStream = new CachingTokenFilter(analyzer.tokenStream(FIELD_NAME,
+          new StringReader(text)));
+      Highlighter highlighter = new Highlighter(this,
+          new SpanScorer(query, FIELD_NAME, tokenStream));
+      highlighter.setTextFragmenter(new SimpleFragmenter(40));
+      tokenStream.reset();
+
+      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,
+          "...");
+      System.out.println("\t" + result);
+
+      assertTrue("Failed to find correct number of highlights " + numHighlights + " found",
+          numHighlights == 4);
+    }
+  }
+
   public void testSpanMultiPhraseQueryHighlighting() throws Exception {
     MultiPhraseQuery mpq = new MultiPhraseQuery();
 
