diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClientStatement.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClientStatement.java
index 78f88f5e..67ee937f 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClientStatement.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClientStatement.java
@@ -36,7 +36,16 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 public class ClientStatement implements Statement, StatementCallbackInterface{
 
     /** For use in debugging setLargeMaxRows() method added by JDBC 4.2 */
-    public  static  long    fetchedRowBase = 0L;
+    private  static  long    fetchedRowBase = 0L;
+    
+    /**
+     * Debug method used to test the setLargeMaxRows() method added by JDBC 4.2.
+     * This method is a NOP on a production (insane) build of Derby.
+     */
+    public  static  void    setFetchedRowBase( long newBase )
+    {
+        if (SanityManager.DEBUG)    { fetchedRowBase = newBase; }
+    }
     
     //---------------------navigational members-----------------------------------
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
index 825b291f..3bd18d6e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
@@ -96,7 +96,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     implements EngineResultSet, Comparable {
 
     /** For use in debugging setLargeMaxRows() method added by JDBC 4.2 */
-    public  static  long    fetchedRowBase = 0L;
+    private  static  long    fetchedRowBase = 0L;
     
 	// cursor movement
 	protected static final int FIRST = 1;
@@ -305,6 +305,15 @@ else if (stmt.resultSetConcurrency == java.sql.ResultSet.CONCUR_READ_ONLY)
 		order = conn.getResultSetOrderId();
 	}
 
+    /**
+     * Debug method used to test the setLargeMaxRows() method added by JDBC 4.2.
+     * This method is a NOP on a production (insane) build of Derby.
+     */
+    public  static  void    setFetchedRowBase( long newBase )
+    {
+        if (SanityManager.DEBUG)    { fetchedRowBase = newBase; }
+    }
+
 	private void checkNotOnInsertRow() throws SQLException {
 		if (isOnInsertRow) {
 			throw newSQLException(SQLState.NO_CURRENT_ROW);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSetMetaData.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSetMetaData.java
index 678400f4..1036551a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSetMetaData.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSetMetaData.java
@@ -21,6 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.impl.jdbc;
 
+import org.apache.derby.iapi.services.io.ArrayUtil;
 import org.apache.derby.iapi.sql.ResultDescription;
 import org.apache.derby.iapi.sql.ResultColumnDescriptor;
 import org.apache.derby.iapi.types.DataTypeDescriptor;
@@ -65,7 +66,7 @@ that it has a close() method, a getConnection() method or
 	// constructor
 	//
 	public EmbedResultSetMetaData(ResultColumnDescriptor[] columnInfo) {
-		this.columnInfo = columnInfo;
+		this.columnInfo = (ResultColumnDescriptor[]) ArrayUtil.copy( columnInfo );
 	}
 
 	//
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedSQLException.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedSQLException.java
index 1e9608be..31453a4b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedSQLException.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedSQLException.java
@@ -22,6 +22,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.impl.jdbc;
 
 import org.apache.derby.iapi.error.DerbySQLException;
+import org.apache.derby.iapi.services.io.ArrayUtil;
 import java.sql.SQLException;
 
 import org.apache.derby.iapi.error.StandardException;
@@ -73,7 +74,7 @@ public String getMessageId() {
 	}
 
 	public Object[] getArguments() {
-		return arguments;
+		return ArrayUtil.copy( arguments );
 	}
 
 	/*
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java
index 628a859c..973f75b1 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/DMLWriteResultSet.java
@@ -113,7 +113,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		needToObjectifyStream = (this.constantAction.getTriggerInfo() != null);
 	}
 
-	public final long	modifiedRowCount() { return rowCount + RowUtil.rowCountBase; }
+	public final long	modifiedRowCount() { return rowCount + RowUtil.getRowCountBase(); }
 
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RowUtil.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RowUtil.java
index 58e9f7bd..a7a32819 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RowUtil.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RowUtil.java
@@ -37,7 +37,19 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 public class RowUtil
 {
     /** Row count base added for testing JDBC 4.2 */
-    public  static  long    rowCountBase = 0L;
+    private  static  long    rowCountBase = 0L;
+
+    /**
+     * Debug method used to test the setLargeMaxRows() method added by JDBC 4.2.
+     * This method is a NOP on a production (insane) build of Derby.
+     */
+    public  static  void    setRowCountBase( long newBase )
+    {
+        if (SanityManager.DEBUG)    { rowCountBase = newBase; }
+    }
+
+    /** Retrieve the row count base */
+    public  static  long    getRowCountBase() { return rowCountBase; }
 
  	/**
 	  Get an empty ExecRow.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java
index d6a607c8..8b0338a2 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java
@@ -32,6 +32,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.*;
 import java.sql.*;
 
+import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.iapi.services.io.DerbyIOException;
 import org.apache.derby.impl.jdbc.EmbedSQLException;
 
@@ -1196,6 +1197,12 @@ public void testLargeUpdate_jdbc4_2() throws Exception
     public  static  void    largeUpdate_jdbc4_2( Connection conn )
         throws Exception
     {
+        //
+        // This test makes use of a debug entry point which is a NOP
+        // in an insane production build.
+        //
+        if (!SanityManager.DEBUG)    { return; }
+
         println( "Running large update test for JDBC 4.2" );
         
         conn.prepareStatement
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java
index 63449581..7e6609a9 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementTest.java
@@ -20,6 +20,7 @@
 
 package org.apache.derbyTesting.functionTests.tests.jdbc4;
 
+import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.vti.VTITemplate;
 import org.apache.derby.impl.jdbc.EmbedResultSet;
 import org.apache.derby.impl.sql.execute.RowUtil;
@@ -368,6 +369,13 @@ public void testLargeUpdate_jdbc4_2() throws Exception
     public  static  void    largeUpdate_jdbc4_2( Connection conn )
         throws Exception
     {
+        //
+        // This test makes use of a debug entry point which is a NOP
+        // in an insane production build.
+        //
+        if (!SanityManager.DEBUG)    { return; }
+        else { println( "Running largeUpdate_jdbc4_2() on debug code." ); }
+
         conn.prepareStatement
             (
              "create procedure setRowCountBase( newBase bigint )\n" +
@@ -394,6 +402,13 @@ public  static  void    largeUpdate_jdbc4_2( Connection conn )
     private static  void    largeUpdateTest( StatementWrapper sw, long rowCountBase )
         throws Exception
     {
+        //
+        // This test makes use of a debug entry point which is a NOP
+        // in an insane production build.
+        //
+        if (!SanityManager.DEBUG)    { return; }
+        else { println( "Running largeUpdateTest() on debug code." ); }
+
         // poke the rowCountBase into the engine. all returned row counts will be
         // increased by this amount
         setRowCountBase( sw.getWrappedStatement(), false, rowCountBase );
@@ -446,6 +461,12 @@ private static  void    vetUpdateSize( StatementWrapper sw, long expected, long
     private static  void    largeBatchTest( StatementWrapper sw, long rowCountBase )
         throws Exception
     {
+        //
+        // This test makes use of a debug entry point which is a NOP
+        // in an insane production build.
+        //
+        if (!SanityManager.DEBUG)    { return; }
+
         println( "Large batch test with rowCountBase = " + rowCountBase );
         
         // poke the rowCountBase into the engine. all returned row counts will be
@@ -473,6 +494,12 @@ private static  void    createBatch( StatementTest.StatementWrapper sw )
     private static  void    largeMaxRowsTest( StatementWrapper sw, long maxRows )
         throws Exception
     {
+        //
+        // This test makes use of a debug entry point which is a NOP
+        // in an insane production build.
+        //
+        if (!SanityManager.DEBUG)    { return; }
+
         println( "Large max rows test with maxRows = " + maxRows );
 
         long    expectedRowCount = 3L;
@@ -497,6 +524,12 @@ private static  void    largeMaxRowsTest( StatementWrapper sw, long maxRows )
     private static  void    largeBatchUpdateExceptionTest( StatementWrapper sw, long rowCountBase )
         throws Exception
     {
+        //
+        // This test makes use of a debug entry point which is a NOP
+        // in an insane production build.
+        //
+        if (!SanityManager.DEBUG)    { return; }
+
         println( "Large batch update exception test with rowCountBase = " + rowCountBase );
         
         sw.getWrappedStatement().clearBatch();
@@ -540,7 +573,7 @@ else if ( usingDerbyNetClient() )
     {
         if ( onClient )
         {
-            ClientStatement.fetchedRowBase = rowCountBase;
+            ClientStatement.setFetchedRowBase( rowCountBase );
         }
         else
         {
@@ -699,8 +732,8 @@ protected Object  invoke( String methodName, Class[] argTypes, Object[] argValue
     /** Set the base which is used for returned row counts and fetched row counters */
     public  static  void    setRowCountBase( long newBase )
     {
-        EmbedResultSet.fetchedRowBase = newBase;
-        RowUtil.rowCountBase = newBase;
+        EmbedResultSet.setFetchedRowBase( newBase );
+        RowUtil.setRowCountBase( newBase );
     }
 
 } // End class StatementTest
