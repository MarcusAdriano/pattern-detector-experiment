diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/suites/AllPackages.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/suites/AllPackages.java
index 07a8a215..3b9859a2 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/suites/AllPackages.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/suites/AllPackages.java
@@ -60,6 +60,7 @@ public static Test suite() throws Exception {
         suite.addTest(org.apache.derbyTesting.functionTests.tests.engine._Suite.suite());
         suite.addTest(org.apache.derbyTesting.functionTests.tests.demo._Suite.suite());
         suite.addTest(org.apache.derbyTesting.functionTests.tests.memory._Suite.suite());
+        suite.addTest(org.apache.derbyTesting.functionTests.tests.i18n._Suite.suite());
 
         // Suites that are compiled using Java SE 6 target need to
         // be added this way, otherwise creating the suite
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedAttributeScriptTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedAttributeScriptTest.java
index e69de29b..48c2c5e7 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedAttributeScriptTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedAttributeScriptTest.java
@@ -0,0 +1,190 @@
+/*
+ *
+ * Derby - Class org.apache.derbyTesting.functionTests.tests.i18n.LocalizedAttributeScriptTest
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, 
+ * software distributed under the License is distributed on an 
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
+ * either express or implied. See the License for the specific 
+ * language governing permissions and limitations under the License.
+ */
+
+package org.apache.derbyTesting.functionTests.tests.i18n;
+
+import java.io.File;
+import java.security.AccessController;
+import java.util.Properties;
+
+import org.apache.derby.iapi.tools.i18n.LocalizedResource;
+import org.apache.derbyTesting.functionTests.util.ScriptTestCase;
+import org.apache.derbyTesting.junit.JDBC;
+import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
+import org.apache.derbyTesting.junit.TestConfiguration;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+/**
+ * LocalizedAttributeScriptTest runs the ij scripts (.sql file) 
+ * LocalizedConnectionAttribute.sql and compares the output to a canon file in
+ * the standard master package.
+ * <BR>
+ * Its suite() method returns the test as an instance of
+ * this class for the specific script wrapped in a decorator that sets the
+ * specific encoding properties, surrounded by a clean database decorator.
+ * <BR>
+ * It can also be used as a command line program
+ *
+ */
+public final class LocalizedAttributeScriptTest extends ScriptTestCase {
+    
+    /**
+     * Run LocalizedConnectionAttribute.sql 
+     * <code>
+     * example
+     * java org.apache.derbyTesting.functionTests.tests.i18n.LocalizedAttributeScriptTest
+     * </code>
+     */
+    public static void main()
+    {
+        junit.textui.TestRunner.run(getSuite());
+    }
+
+    /**
+     * Return the suite that runs the Localized script.
+     */
+    public static Test suite() {
+
+        TestSuite suite = new TestSuite("LocalizedScripts");
+
+        // First ensure that we are running in english locale; the output
+        // master has been created in that locale, and thus, running in any
+        // other locale will fail.
+        if (!getSystemProperty("user.language").equalsIgnoreCase("en"))
+            return suite;
+        
+        // Note that it doesn't really make sense to run with network 
+        // server/client, as LocalizedConnectionAttributes.sql has a hardcoded
+        // connect with protocol, so we can test connect 'as' with a us-ascii
+        // character. So only run with embedded. 
+        // Similarly, the script cannot run with JSR169, because the connect
+        // statement automatically invokes DriverManager.
+        if (JDBC.vmSupportsJSR169())
+            return suite;
+        TestSuite localizedTests = new TestSuite("LocalizedScripts:embedded");
+        localizedTests.addTest(getSuite());
+        Test local = TestConfiguration.singleUseDatabaseDecoratorNoShutdown(
+            localizedTests);
+
+        // add those client tests into the top-level suite.
+        suite.addTest(local);
+
+        return suite;
+    }
+
+    /*
+     * A single JUnit test that runs a single Localized script, specifying the
+     * desired input encoding.
+     * Needs input encoding Cp850, or we get a syntax error on connecting to 
+     * the database with the u-umlaut in the 'as' clause.
+     */
+    private LocalizedAttributeScriptTest(String localizedTest){
+        super(localizedTest, "ISO-8859-1");
+    }
+
+    /**
+     * Return a suite of localized tests based on the 
+     * script name. The test is surrounded in a decorator
+     * that sets localization properties wrapped in a decorator
+     * that cleans the database.
+     */
+    private static Test getSuite() {
+        TestSuite suite = new TestSuite("localized scripts");
+        Properties uiProps = new Properties();
+
+        uiProps.put("derby.ui.locale","de_DE");
+        uiProps.put("derby.ui.codeset","ISO-8859-1");
+        suite.addTest(new SystemPropertyTestSetup(
+                new LocalizedAttributeScriptTest("LocalizedConnectionAttribute"), uiProps));
+        
+        return getIJConfig(suite);
+    }
+    
+    public void tearDown() throws Exception {
+        // attempt to get rid of the extra database.
+        // this also will get done if there are failures, and the database will
+        // not be saved in the 'fail' directory.
+        // We can't rely on an additionalDatabaseDecorator because 'detest'
+        // is not just a logical, but a physical db name.
+        AccessController.doPrivileged(new java.security.PrivilegedAction() {
+            public Object run() {
+                    removeDatabase("detest");
+                return null;
+            }
+            
+            void removeDatabase(String dbName)
+            {
+                //TestConfiguration config = TestConfiguration.getCurrent();
+                dbName = dbName.replace('/', File.separatorChar);
+                String dsh = getSystemProperty("derby.system.home");
+                if (dsh == null) {
+                    fail("not implemented");
+                } else {
+                    dbName = dsh + File.separator + dbName;
+                }
+                removeDirectory(dbName);
+            }
+
+            void removeDirectory(String path)
+            {
+                final File dir = new File(path);
+                removeDir(dir);
+            }
+
+            private void removeDir(File dir) {
+                
+                // Check if anything to do!
+                // Database may not have been created.
+                if (!dir.exists())
+                    return;
+
+                String[] list = dir.list();
+
+                // Some JVMs return null for File.list() when the
+                // directory is empty.
+                if (list != null) {
+                    for (int i = 0; i < list.length; i++) {
+                        File entry = new File(dir, list[i]);
+
+                        if (entry.isDirectory()) {
+                            removeDir(entry);
+                        } else {
+                            entry.delete();
+                            //assertTrue(entry.getPath(), entry.delete());
+                        }
+                    }
+                }
+                dir.delete();
+                //assertTrue(dir.getPath(), dir.delete());
+            }
+        });
+        LocalizedResource.resetLocalizedResourceCache();
+        super.tearDown();
+    }    
+    
+    /**
+     * Set up the test environment.
+     */
+    protected void setUp() {
+        LocalizedResource.resetLocalizedResourceCache();
+    }
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedDisplayScriptTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedDisplayScriptTest.java
index 3f24d583..259cf1c6 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedDisplayScriptTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/i18n/LocalizedDisplayScriptTest.java
@@ -1 +1,141 @@
   + native
+/*
+ *
+ * Derby - Class org.apache.derbyTesting.functionTests.tests.i18n.LocalizedDisplayScriptTest
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, 
+ * software distributed under the License is distributed on an 
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
+ * either express or implied. See the License for the specific 
+ * language governing permissions and limitations under the License.
+ */
+
+package org.apache.derbyTesting.functionTests.tests.i18n;
+
+import java.util.Properties;
+import java.util.TimeZone;
+
+import org.apache.derby.iapi.tools.i18n.LocalizedResource;
+import org.apache.derbyTesting.functionTests.util.ScriptTestCase;
+import org.apache.derbyTesting.junit.JDBC;
+import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
+import org.apache.derbyTesting.junit.TestConfiguration;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+/**
+ * LocalizedDisplayScriptTest runs the ij script LocalizedDisplay.sql
+ * and compares the output to a canon file in the standard master package.
+ * <BR>
+ * Its suite() method returns a set of tests where each test is an instance of
+ * this class for an individual script wrapped in a clean database decorator.
+ * <BR>
+ * It can also be used as a command line program
+ *
+ */
+public final class LocalizedDisplayScriptTest extends ScriptTestCase {
+
+    private static TimeZone defaultTimeZone;
+    
+    /**
+     * Run LocalizedDisplay.sql 
+     * <code>
+     * example
+     * java org.apache.derbyTesting.functionTests.tests.i18n.LocalizedSuite
+     * </code>
+     */
+    public static void main()
+    {
+        junit.textui.TestRunner.run(getSuite());
+    }
+
+    /**
+     * Return the suite that runs the Localized script.
+     */
+    public static Test suite() {
+        
+        TestSuite suite = new TestSuite("LocalizedDisplay");
+
+        // First ensure that we are running in english locale; the output
+        // master has been created in that locale, and thus, running in any
+        // other locale will fail.
+        if (!getSystemProperty("user.language").equalsIgnoreCase("en"))
+            return suite;
+        // This test will fail with JSR169, because lack of support for 
+        // rs.getBigDecimal() will prevent the localization of numeric and
+        // decimal datatypes, and this test includes a decimal datatype
+        // (See DERBY-470).
+        if (JDBC.vmSupportsJSR169())
+            return suite;
+        TestSuite localizedEmbeddedTests = new TestSuite("LocalizedDisplay:embedded");
+        localizedEmbeddedTests.addTest(getSuite());
+        Test embeddedrun = TestConfiguration.singleUseDatabaseDecorator(localizedEmbeddedTests);
+        // add the client test
+        suite.addTest(embeddedrun);
+
+        // It's not working to have both embedded and client run in the same
+        // setting as the database doesn't get deleted until after the suite is done.
+        // The second run will go against the already created & encoded database,
+        // resulting in localized display by default, and thus a diff with the
+        // master.
+        // Set up the script's run with the network client
+        TestSuite localizedTests = new TestSuite("LocalizedDisplay:client");
+        localizedTests.addTest(getSuite());
+        Test client = TestConfiguration.clientServerDecorator(
+            TestConfiguration.singleUseDatabaseDecorator(localizedTests));
+        // add the client test
+        suite.addTest(client);
+
+        return suite;
+    }
+
+    /*
+     * A single JUnit test that runs a single Localized script.
+     */
+    private LocalizedDisplayScriptTest(String localizedTest){
+        super(localizedTest);
+    }
+
+    /**
+     * Return a localized test based on the script name. 
+     * The test is surrounded in a decorator that sets up the
+     * desired properties which is wrapped in a decorator
+     * that cleans the database.
+     */
+    private static Test getSuite() {
+        TestSuite suite = new TestSuite("localized Display");
+        Properties uiProps = new Properties();
+        uiProps.put("derby.ui.locale","es_AR");
+        uiProps.put("derby.ui.codeset","EUC_JP");
+        suite.addTest(new SystemPropertyTestSetup(
+                new LocalizedDisplayScriptTest("LocalizedDisplay"), uiProps));
+        return getIJConfig(suite);
+    }
+    
+    /**
+     * Set up the test environment.
+     */
+    protected void setUp() {
+        // the canon contains time columns, which would display localized -
+        // and so cause errors. Thus, run this with timezone PST.
+        defaultTimeZone = TimeZone.getDefault(); 
+        TimeZone.setDefault(TimeZone.getTimeZone("America/Los_Angeles")); 
+        LocalizedResource.resetLocalizedResourceCache();
+    }
+    
+    public void tearDown() throws Exception {
+        TimeZone.setDefault(defaultTimeZone); 
+        LocalizedResource.resetLocalizedResourceCache();
+        super.tearDown();
+    }    
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/i18n/_Suite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/i18n/_Suite.java
index e69de29b..2c416208 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/i18n/_Suite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/i18n/_Suite.java
@@ -0,0 +1,67 @@
+/*
+
+   Derby - Class org.apache.derbyTesting.functionTests.tests.18n._Suite
+
+       Licensed to the Apache Software Foundation (ASF) under one
+       or more contributor license agreements.  See the NOTICE file
+       distributed with this work for additional information
+       regarding copyright ownership.  The ASF licenses this file
+       to you under the Apache License, Version 2.0 (the
+       "License"); you may not use this file except in compliance
+       with the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+       Unless required by applicable law or agreed to in writing,
+       software distributed under the License is distributed on an
+       "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+       KIND, either express or implied.  See the License for the
+       specific language governing permissions and limitations
+       under the License
+*/
+package org.apache.derbyTesting.functionTests.tests.i18n;
+
+import org.apache.derbyTesting.junit.BaseTestCase;
+import org.apache.derbyTesting.junit.JDBC;
+
+import junit.framework.Test; 
+import junit.framework.TestSuite;
+
+/**
+ * Suite to run all JUnit tests in this package:
+ * org.apache.derbyTesting.functionTests.tests.i18n
+ * <P>
+ * All tests are run "as-is", just as if they were run
+ * individually. Thus this test is just a collection
+ * of all the JUNit tests in this package (excluding itself).
+ * While the old test harness is in use, some use of decorators
+ * may be required.
+ *
+ */
+public class _Suite extends BaseTestCase  {
+
+	/**
+	 * Use suite method instead.
+	 */
+	private _Suite(String name) {
+		super(name);
+	}
+
+	public static Test suite() {
+
+		TestSuite suite = new TestSuite("i18n");
+        
+        // First ensure that we are running in english locale; the output
+        // master has been created in that locale, and thus, running in any
+        // other locale will fail.
+        if (!getSystemProperty("user.language").equalsIgnoreCase("en"))
+            return suite;
+        // Also, both these tests won't run with JSR169.
+        if (JDBC.vmSupportsJSR169())
+            return suite;
+        suite.addTest(LocalizedAttributeScriptTest.suite());
+        suite.addTest(LocalizedDisplayScriptTest.suite());
+        
+        return suite;
+	}
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java
index d657fd7f..47f45328 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/ScriptTestCase.java
@@ -50,6 +50,19 @@ public ScriptTestCase(String script)
 	}
 	
 	/**
+     * Create a ScriptTestCase to run a single test
+     * using a connection obtained from getConnection() with a
+     * different encoding
+     * @param script Base name of the .sql script
+     * excluding the .sql suffix.
+     */
+    public ScriptTestCase(String script, String encoding)
+    {
+        super(script);
+        inputEncoding = encoding;
+    }
+
+    /**
 	 * Return the folder (last element of the package) where
 	 * the .sql script lives, e.g. lang.
 	 */
diff --git a/db/derby/code/trunk/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java b/db/derby/code/trunk/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java
index d560dd78..34c59f47 100644
--- a/db/derby/code/trunk/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java
+++ b/db/derby/code/trunk/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java
@@ -100,6 +100,14 @@ public static LocalizedResource getInstance(){
 		}
 		return local;
 	}
+    // Resets the 'local' field to null. This is not needed for normal
+    // operations, however, when executing sql files in our junit tests, we use
+    // the same jvm and thus the locale will get loaded only once, resulting
+    // in trouble when testing the localization for ij.
+    public static void resetLocalizedResourceCache()
+    {
+        local=null;
+    }
 	public void init(){
 		init(null,null,null);
 	}
