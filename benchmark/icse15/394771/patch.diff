diff --git a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/CopySuppFiles.java b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/CopySuppFiles.java
index 5b9fba6b..4921683a 100644
--- a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/CopySuppFiles.java
+++ b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/CopySuppFiles.java
@@ -66,7 +66,21 @@ public static void copyFiles(File outDir, String suppFiles)
 		    fw.close();
 		    suppFile = new File(f.getCanonicalPath());
 		}
-
+                // need to make a guess so we copy text files to local encoding
+                // on non-ascii systems...
+                if ((fileName.indexOf("sql") > 0) || (fileName.indexOf("txt") > 0) || (fileName.indexOf(".view") > 0))
+                {
+                    BufferedReader inFile = new BufferedReader(new InputStreamReader(is, "UTF-8"));
+                    PrintWriter pw = new PrintWriter
+                        ( new BufferedWriter(new FileWriter(suppFile), 10000), true );
+                    int c;
+                    while ((c = inFile.read()) != -1)
+                        pw.write(c); 
+                    pw.flush();
+                    pw.close();
+                }
+                else
+                {
 
     			FileOutputStream fos = new FileOutputStream(suppFile);
                 byte[] data = new byte[4096];
@@ -79,4 +93,5 @@ public static void copyFiles(File outDir, String suppFiles)
 			}
         }
 	}
+	}
 }
diff --git a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/FileCompare.java b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/FileCompare.java
index e4d4ad52..067b056c 100644
--- a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/FileCompare.java
+++ b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/FileCompare.java
@@ -203,6 +203,20 @@ public boolean exec(String outfile, File outDir, PrintWriter pwDiff,
 		        System.out.println("SED Error: " + cfe.getMessage());
 		    }
 		}
+        else
+        { 
+            // read in in fixed format, but write out relying on default encoding 
+            File encodedOutFile = new File(outDir, testBase + ".tmpmstr");
+            BufferedReader inFile = new BufferedReader(new InputStreamReader(is, "UTF-8"));
+            PrintWriter pw = new PrintWriter
+                ( new BufferedWriter(new FileWriter(encodedOutFile), 10000), true );
+            int c;
+            while ((c = inFile.read()) != -1)
+                pw.write(c);
+            pw.flush();
+            pw.close();
+            is = new FileInputStream(encodedOutFile);
+        } 
         
         // Define the input and output files
         outFile = new BufferedReader(new FileReader(outfile));
diff --git a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java
index d87b833a..011b6420 100644
--- a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java
+++ b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java
@@ -226,7 +226,7 @@ private static void runSuites(Vector suitesToRun)
             }
 
             // Create a BufferedReader to read the list of tests to run
-            runlistFile = new BufferedReader(new InputStreamReader(is));
+            runlistFile = new BufferedReader(new InputStreamReader(is, "UTF-8"));
             if (runlistFile == null)
             {
                 System.out.println("The suite runall file could not be read.");
diff --git a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
index 0a936b4a..71ffe1ce 100644
--- a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
+++ b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
@@ -133,7 +133,7 @@
 	static String testOutName; // output name without path or extension (optional)
 	static String passFileName; // file listing passed tests
 	static String failFileName; // file listing failed tests
-	static String JCCOutName; //file name for JCC corrected master
+	static String tempMasterName; //file name for JCC corrected/local encoded master
     static File passFile;
     static File failFile;
 	static String shutdownurl = "";
@@ -150,7 +150,7 @@
     static File runDir; // where test is run and where support files are expected
     static File canonDir; // allows setting master dir other than default
     static File tmpOutFile; // tmp output file (before sed)
-    static File JCCOutFile; // master file processed for JCC
+    static File tempMasterFile; // master file processed for JCC/local encoding
     static File stdOutFile; // for tests with useoutput false
     static File finalOutFile; // final output file (after sed)
     static File appPropFile; // testname_app.properties or default
@@ -630,7 +630,7 @@ private static void setDirectories(String scriptName, Properties sp)
 
             // Read the test file and copy it to the outDir
             // except for multi tests (for multi we just need to locate it)
-            BufferedReader in = new BufferedReader(new InputStreamReader(is));
+            BufferedReader in = new BufferedReader(new InputStreamReader(is, "UTF-8"));
             if (upgradetest)
 		
                 //these calls to getCanonicalPath catch IOExceptions as a workaround to
@@ -752,10 +752,10 @@ else if (useCommonDB == true)
 
         // Create a .tmp file for doing sed later to create testBase.out
         tmpOutFile = new File(outDir, testOutName + ".tmp");
-		if (NetServer.isClientConnection(framework))
-		{
-			JCCOutName = testOutName+".tmpmstr";
-		}
+        // Always create a .tmpmstr in local encoding so we can do Diff in locale encoding
+        // With Network server, this also will get adjusted for displaywidth
+//TODO: always, except when setting a special property to force .out creation in UTF-8?
+			tempMasterName = testOutName+".tmpmstr";
 
 		// Define the .out file which will be created by massaging the tmp.out
 		finalOutFile = new File(outDir, testOutName + ".out");
@@ -788,12 +788,9 @@ else if (useCommonDB == true)
         // Delete any old .out or .tmp files
         if (tmpOutFile.exists())
             status = tmpOutFile.delete();
-		if (NetServer.isClientConnection(framework))
-		{
-        	JCCOutFile = new File(outDir, JCCOutName);
-        	if (JCCOutFile.exists())
-            	status = JCCOutFile.delete();
-		}
+        tempMasterFile = new File (outDir, tempMasterName);
+        if (tempMasterFile.exists())
+            status = tempMasterFile.delete();
         if (finalOutFile.exists())
             status = finalOutFile.delete();
         if (diffFile.exists())
@@ -1768,8 +1765,8 @@ private static void doCleanup(String javaVersion)
         //printWriter.close();
         //printWriter = null;
 
-        //Always cleanup the script files
-        if ( !(script == null) && (script.exists()) )
+        //Always cleanup the script files - except when keepfiles is true
+        if ( !(script == null) && (script.exists()) && (!keepfiles) )
         {
             status = script.delete();
             //System.out.println("Status was: " + status);
@@ -1799,12 +1796,11 @@ private static void doCleanup(String javaVersion)
             status = finalOutFile.delete();
             if (skiptest == false)
                 status = diffFile.delete();
-			// delete JCC filtered master file
-			if (NetServer.isClientConnection(framework))
-			{
-        		JCCOutFile = new File(outDir, JCCOutName);
-            	status = JCCOutFile.delete();
-			}
+
+            // delete the copied (and, for network server, modified) master file
+            tempMasterFile = new File(outDir, tempMasterName);
+            status = tempMasterFile.delete();
+
             if (deleteBaseDir)
             {
                 if (useCommonDB == false) 
@@ -2064,18 +2060,23 @@ else if ( (runDir != null) && (runDir.exists()) )
         Vector v = jvm.getCommandLine();
         if ( ij.startsWith("ij") )
         {
-            // as of cn1411-20030930, the system takes the default console encoding
-            // which in the US, on windows, is Cp437.
-            // Sun on the other hand, always forces a console encoding of 1252.
-            // To get the same result for ibm141 & jdk14*, we need to force 
-            // the console encoding to Cp1252 for ij tests.
-            // see beetle 5475.
+            // As of cn1411-20030930 IBM jvm the system takes the default
+            // console encoding, which in the US, on windows, is Cp437.
+            // Sun jvms, however, always force a console encoding of 1252.
+            // To get the same result for ibm141 & jdk14*, the harness needs to
+            // force the console encoding to Cp1252 for ij tests - unless 
+            // we're on non-ascii systems.
+            String isNotAscii = System.getProperty("platform.notASCII");
+            if ( isNotAscii == null || (isNotAscii.equals("false")))
             v.addElement("-Dconsole.encoding=Cp1252" );
             v.addElement("org.apache.derby.tools." + ij);
             if (ij.equals("ij"))
             {
-                v.addElement("-fr");
-                v.addElement(scriptFileName);
+                // TODO is there a setting/property we could check after which 
+                // we can use v.addElement("-fr"); (read from classpath)
+                // then we can also use v.addElement(scriptFile);
+                v.addElement("-f");
+                v.addElement(outDir.toString() + File.separatorChar + scriptFileName);
             }
             v.addElement("-p");
             v.addElement(propString);
diff --git a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java
index 229be11e..7170cf60 100644
--- a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java
+++ b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java
@@ -300,7 +300,7 @@ else if (key.equals("delete"))
         if (is == null)
             inFile = new BufferedReader(new FileReader(srcFile));
         else
-            inFile = new BufferedReader(new InputStreamReader(is));
+            inFile = new BufferedReader(new InputStreamReader(is, "UTF-8"));
         outFile = new PrintWriter
         ( new BufferedWriter(new FileWriter(dstFile), 10000), true );
 
diff --git a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/SkipTest.java b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/SkipTest.java
index c7c2c135..feee3f74 100644
--- a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/SkipTest.java
+++ b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/harness/SkipTest.java
@@ -53,7 +53,7 @@ public static boolean skipIt(String listFileName, String testName)
         }
         
         // Create a BufferedReader to read the list of tests to skip
-        BufferedReader listFile = new BufferedReader(new InputStreamReader(is));
+        BufferedReader listFile = new BufferedReader(new InputStreamReader(is, "UTF-8"));
         String str = "";
         // Read the list of tests to skip, compare to testName
         while ( (str = listFile.readLine()) != null )
diff --git a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/coalesceTests.java b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/coalesceTests.java
index 7764f333..fa2bf76a 100644
--- a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/coalesceTests.java
+++ b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/coalesceTests.java
@@ -1147,18 +1147,18 @@ public static void testCharForBitDataCoalesce( Connection conn) throws Throwable
     } catch(Exception ex) {}
 			s.executeUpdate("create table tC (cbd1 char(254) for bit data, cbd2 char(40) for bit data, vcbd1 varchar(253) for bit data, vcbd2 varchar(2000) for bit data, lvcbd1 long varchar for bit data, lvcbd2 long varchar for bit data, blob1 BLOB(200), blob2 BLOB(33K))");
 			ps = conn.prepareStatement("insert into tC values (?,?,?,?,?,?,?,?)");
-			ps.setBytes(1, "cbd1 not null".getBytes());
-			ps.setBytes(2, "cbd2 not null".getBytes());
-			ps.setBytes(3, "vcbd1 not null".getBytes());
-			ps.setBytes(4, "vcbd2 not null".getBytes());
-			ps.setBytes(5, "lvcbd1 not null".getBytes());
-			ps.setBytes(6, "lvcbd2 not null".getBytes());
-			ps.setBytes(7, "blob1 not null".getBytes());
-			ps.setBytes(8, "blob2 not null".getBytes());
+			ps.setBytes(1, "cbd1 not null".getBytes("US-ASCII"));
+			ps.setBytes(2, "cbd2 not null".getBytes("US-ASCII"));
+			ps.setBytes(3, "vcbd1 not null".getBytes("US-ASCII"));
+			ps.setBytes(4, "vcbd2 not null".getBytes("US-ASCII"));
+			ps.setBytes(5, "lvcbd1 not null".getBytes("US-ASCII"));
+			ps.setBytes(6, "lvcbd2 not null".getBytes("US-ASCII"));
+			ps.setBytes(7, "blob1 not null".getBytes("US-ASCII"));
+			ps.setBytes(8, "blob2 not null".getBytes("US-ASCII"));
 			ps.executeUpdate();
-			ps.setBytes(1, "cbd1 not null but cbd2 is".getBytes());
+			ps.setBytes(1, "cbd1 not null but cbd2 is".getBytes("US-ASCII"));
 			ps.setBytes(2, null);
-			ps.setBytes(3, "vcbd1 not null but vcbd2 is".getBytes());
+			ps.setBytes(3, "vcbd1 not null but vcbd2 is".getBytes("US-ASCII"));
 			ps.setBytes(4, null);
 			ps.setBytes(5, null);
 			ps.setBytes(6, null);
@@ -1166,13 +1166,13 @@ public static void testCharForBitDataCoalesce( Connection conn) throws Throwable
 			ps.setBytes(8, null);
 			ps.executeUpdate();
 			ps.setBytes(1, null);
-			ps.setBytes(2, "cbd2 not null but cbd1 is".getBytes());
+			ps.setBytes(2, "cbd2 not null but cbd1 is".getBytes("US-ASCII"));
 			ps.setBytes(3, null);
-			ps.setBytes(4, "vcbd2 not null but vcbd1 is".getBytes());
-			ps.setBytes(5, "lvcbd1 not null again".getBytes());
-			ps.setBytes(6, "lvcbd2 not null again".getBytes());
-			ps.setBytes(7, "blob1 not null again".getBytes());
-			ps.setBytes(8, "blob2 not null again".getBytes());
+			ps.setBytes(4, "vcbd2 not null but vcbd1 is".getBytes("US-ASCII"));
+			ps.setBytes(5, "lvcbd1 not null again".getBytes("US-ASCII"));
+			ps.setBytes(6, "lvcbd2 not null again".getBytes("US-ASCII"));
+			ps.setBytes(7, "blob1 not null again".getBytes("US-ASCII"));
+			ps.setBytes(8, "blob2 not null again".getBytes("US-ASCII"));
 			ps.executeUpdate();
 			ps.setBytes(1, null);
 			ps.setBytes(2, null);
@@ -1467,12 +1467,9 @@ public static void dumpRS(ResultSet s) throws SQLException
 				try{
 				row.append(s.getString(i));
 				} catch(SQLException ex){
-					if (ex.getSQLState().equals("22005")) {
-						if (s.getBytes(i) != null)
-                row.append(new String(s.getBytes(i)));
-						else
-                row.append(s.getBytes(i));
-					} else throw ex;
+					if (ex.getSQLState().equals("22005")) 
+					    row.append("Invalid Conversion Error\n");
+					else throw ex;
 				}
 			}
 			row.append("}\n");
diff --git a/db/derby/code/branches/10.1/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java b/db/derby/code/branches/10.1/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java
index 4326ff66..67a8af18 100644
--- a/db/derby/code/branches/10.1/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java
+++ b/db/derby/code/branches/10.1/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java
@@ -212,6 +212,7 @@ private void initMaxSizes2(){
 		timeSize=len;
 
 	}
+
 	public LocalizedInput getNewInput(InputStream i) {
 		try {
 			if (encode != null)
@@ -223,6 +224,16 @@ public LocalizedInput getNewInput(InputStream i) {
 		return new LocalizedInput(i);
 	}
 
+	public LocalizedInput getNewEncodedInput(InputStream i, String encoding) {
+		try {
+	          return new LocalizedInput(i,encoding);
+		}
+		catch (UnsupportedEncodingException e){
+			
+		}
+		return new LocalizedInput(i);
+        }
+
 	public LocalizedOutput getNewOutput(OutputStream o){
 		try {
 			if (encode != null)
diff --git a/db/derby/code/branches/10.1/java/tools/org/apache/derby/impl/tools/ij/utilMain.java b/db/derby/code/branches/10.1/java/tools/org/apache/derby/impl/tools/ij/utilMain.java
index 46adde14..e5f886cd 100644
--- a/db/derby/code/branches/10.1/java/tools/org/apache/derby/impl/tools/ij/utilMain.java
+++ b/db/derby/code/branches/10.1/java/tools/org/apache/derby/impl/tools/ij/utilMain.java
@@ -541,7 +541,7 @@ void newResourceInput(String resourceName) {
 		if (is==null) throw ijException.resourceNotFound();
 		oldGrabbers.push(commandGrabber[currCE]);
 	    commandGrabber[currCE] = 
-                new StatementFinder(langUtil.getNewInput(new BufferedInputStream(is, BUFFEREDFILESIZE)));
+                new StatementFinder(langUtil.getNewEncodedInput(new BufferedInputStream(is, BUFFEREDFILESIZE), "UTF8"));
 		fileInput = true;
 	}
 
