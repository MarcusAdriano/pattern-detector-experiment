diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/eigencuts/EigencutsDriver.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/eigencuts/EigencutsDriver.java
index c5041e7b..83078ab5 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/eigencuts/EigencutsDriver.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/eigencuts/EigencutsDriver.java
@@ -57,12 +57,13 @@ public static void main(String[] args) throws Exception {
   public int run(String[] arg0) throws Exception {
 
     // set up command line arguments
-    addOption("input", "i", "Path to input affinity matrix data", true);
-    addOption("output", "o", "Output of clusterings", true);
     addOption("half-life", "b", "Minimal half-life threshold", true);
     addOption("dimensions", "d", "Square dimensions of affinity matrix", true);
     addOption("epsilon", "e", "Half-life threshold coefficient", Double.toString(EPSILON_DEFAULT));
     addOption("tau", "t", "Threshold for cutting affinities", Double.toString(TAU_DEFAULT));
+    addOption("eigenrank", "k", "Number of top eigenvectors to use", true);
+    addOption(DefaultOptionCreator.inputOption().create());
+    addOption(DefaultOptionCreator.outputOption().create());
     addOption(DefaultOptionCreator.overwriteOption().create());
     Map<String, String> parsedArgs = parseArguments(arg0);
     if (parsedArgs == null) {
@@ -79,8 +80,9 @@ public int run(String[] arg0) throws Exception {
     double halflife = Double.parseDouble(parsedArgs.get("--half-life"));
     double epsilon = Double.parseDouble(parsedArgs.get("--epsilon"));
     double tau = Double.parseDouble(parsedArgs.get("--tau"));
+    int eigenrank = Integer.parseInt(parsedArgs.get("--eigenrank"));
 
-    run(getConf(), input, output, dimensions, halflife, epsilon, tau);
+    run(getConf(), input, output, eigenrank, dimensions, halflife, epsilon, tau);
 
     return 0;
   }
@@ -91,6 +93,7 @@ public int run(String[] arg0) throws Exception {
    * @param conf the Configuration to use
    * @param input the Path to the directory containing input affinity tuples
    * @param output the Path to the output directory
+   * @param eigenrank The number of top eigenvectors/eigenvalues to use
    * @param dimensions the int number of dimensions of the square affinity matrix
    * @param halflife the double minimum half-life threshold
    * @param epsilon the double coefficient for setting minimum half-life threshold
@@ -100,6 +103,7 @@ public static void run(Configuration conf,
                          Path input,
                          Path output,
                          int dimensions,
+                         int eigenrank,
                          double halflife,
                          double epsilon,
                          double tau)
@@ -125,12 +129,12 @@ public static void run(Configuration conf,
       L.setConf(new Configuration(conf));
 
       // eigendecomposition (step 3)
-      int overshoot = (int) ((double) dimensions * OVERSHOOT_MULTIPLIER);
+      int overshoot = (int) ((double) eigenrank * OVERSHOOT_MULTIPLIER);
       List<Double> eigenValues = new ArrayList<Double>(overshoot);
-      Matrix eigenVectors = new DenseMatrix(overshoot, dimensions);
-      DistributedRowMatrix U = performEigenDecomposition(conf, L, dimensions, overshoot, eigenValues, eigenVectors, outputCalc);
+      Matrix eigenVectors = new DenseMatrix(overshoot, eigenrank);
+      DistributedRowMatrix U = performEigenDecomposition(conf, L, eigenrank, overshoot, eigenValues, eigenVectors, outputCalc);
       U.setConf(new Configuration(conf));
-      eigenValues = eigenValues.subList(0, dimensions);
+      eigenValues = eigenValues.subList(0, eigenrank);
 
       // here's where things get interesting: steps 4, 5, and 6 are unique
       // to this algorithm, and depending on the final output, steps 1-3
