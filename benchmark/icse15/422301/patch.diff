diff --git a/lucene/java/trunk/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter.java b/lucene/java/trunk/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter.java
index fd0ce365..bd10e3a2 100644
--- a/lucene/java/trunk/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter.java
+++ b/lucene/java/trunk/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter.java
@@ -228,15 +228,15 @@ public final String getBestFragment(TokenStream tokenStream, String text)
 				{
 					//the current token is distinct from previous tokens - 
 					// markup the cached token group info
-					startOffset = tokenGroup.startOffset;
-					endOffset = tokenGroup.endOffset;		
+					startOffset = tokenGroup.matchStartOffset;
+					endOffset = tokenGroup.matchEndOffset;
 					tokenText = text.substring(startOffset, endOffset);
 					String markedUpText=formatter.highlightTerm(encoder.encodeText(tokenText), tokenGroup);
 					//store any whitespace etc from between this and last group
 					if (startOffset > lastEndOffset)
 						newText.append(encoder.encodeText(text.substring(lastEndOffset, startOffset)));
 					newText.append(markedUpText);
-					lastEndOffset=endOffset;
+					lastEndOffset=Math.max(endOffset, lastEndOffset);
 					tokenGroup.clear();
 
 					//check if current token marks the start of a new fragment						
@@ -263,15 +263,15 @@ public final String getBestFragment(TokenStream tokenStream, String text)
 			if(tokenGroup.numTokens>0)
 			{
 				//flush the accumulated text (same code as in above loop)
-				startOffset = tokenGroup.startOffset;
-				endOffset = tokenGroup.endOffset;		
+				startOffset = tokenGroup.matchStartOffset;
+				endOffset = tokenGroup.matchEndOffset;
 				tokenText = text.substring(startOffset, endOffset);
 				String markedUpText=formatter.highlightTerm(encoder.encodeText(tokenText), tokenGroup);
 				//store any whitespace etc from between this and last group
 				if (startOffset > lastEndOffset)
 					newText.append(encoder.encodeText(text.substring(lastEndOffset, startOffset)));
 				newText.append(markedUpText);
-				lastEndOffset=endOffset;						
+				lastEndOffset=Math.max(lastEndOffset,endOffset);
 			}
 
 			// append text after end of last token
diff --git a/lucene/java/trunk/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup.java b/lucene/java/trunk/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup.java
index 728f1759..4f252b31 100644
--- a/lucene/java/trunk/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup.java
+++ b/lucene/java/trunk/contrib/highlighter/src/java/org/apache/lucene/search/highlight/TokenGroup.java
@@ -30,6 +30,9 @@
 	int numTokens=0;
 	int startOffset=0;
 	int endOffset=0;
+	float tot;
+
+  int matchStartOffset, matchEndOffset;
 	
 
 	void addToken(Token token, float score)
@@ -38,13 +41,24 @@ void addToken(Token token, float score)
         {	    
 			if(numTokens==0)
 			{
-				startOffset=token.startOffset();		
-				endOffset=token.endOffset();		
+				startOffset=matchStartOffset=token.startOffset();
+				endOffset=matchEndOffset=token.endOffset();
+				tot += score;
 			}
 			else
 			{
 				startOffset=Math.min(startOffset,token.startOffset());		
 				endOffset=Math.max(endOffset,token.endOffset());		
+        if (score>0) {
+          if (tot==0) {
+            matchStartOffset=token.startOffset();
+            matchEndOffset=token.endOffset();
+          } else {
+            matchStartOffset=Math.min(matchStartOffset,token.startOffset());
+            matchEndOffset=Math.max(matchEndOffset,token.endOffset());
+          }
+          tot+=score;
+        }
 			}
 			tokens[numTokens]=token;
 			scores[numTokens]=score;
@@ -61,6 +75,7 @@ boolean isDistinct(Token token)
 	void clear()
 	{
 		numTokens=0;
+		tot=0;
 	}
 	
 	/**
@@ -112,11 +127,6 @@ public int getStartOffset()
 	 */
 	public float getTotalScore()
 	{
-		float total=0;
-		for (int i = 0; i < numTokens; i++)
-		{
-			total+=scores[i];
-		}
-		return total;
+		return tot;
 	}
 }
