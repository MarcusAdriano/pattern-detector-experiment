diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java
index 104eb484..1f235df0 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/concurrent/DebuggableThreadPoolExecutor.java
@@ -84,6 +84,17 @@ public void rejectedExecution(Runnable r, ThreadPoolExecutor executor)
         }
     }
 
+    /**
+     * Get the number of completed tasks
+     */
+    public long getCompletedTasks()
+    {
+        return getCompletedTaskCount();
+    }
+
+    /**
+     * Get the number of tasks waiting to be executed
+     */
     public long getPendingTasks()
     {
         return getTaskCount() - getCompletedTaskCount();
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/concurrent/IExecutorMBean.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/concurrent/IExecutorMBean.java
index d964af32..d2bb2c10 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/concurrent/IExecutorMBean.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/concurrent/IExecutorMBean.java
@@ -20,5 +20,19 @@
 
 public interface IExecutorMBean
 {
+    /**
+     * Get the current number of running tasks
+     */
+    public int getActiveCount();
+
+    /**
+     * Get the number of completed tasks
+     */
+    public long getCompletedTasks();
+
+    /**
+     * Get the number of tasks waiting to be executed
+     */
     public long getPendingTasks();
+
 }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLogExecutorService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLogExecutorService.java
index ddafe6a2..932d03f3 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLogExecutorService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CommitLogExecutorService.java
@@ -26,6 +26,8 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.*;
+import java.util.concurrent.atomic.AtomicLong;
+import java.util.concurrent.atomic.AtomicBoolean;
 import javax.management.MBeanServer;
 import javax.management.ObjectName;
 
@@ -35,6 +37,8 @@
 {
     BlockingQueue<CheaterFutureTask> queue;
 
+    private volatile long completedTaskCount = 0;
+
     public CommitLogExecutorService()
     {
         queue = new ArrayBlockingQueue<CheaterFutureTask>(10000);
@@ -49,6 +53,7 @@ public void run()
                         while (true)
                         {
                             processWithSyncBatch();
+                            completedTaskCount++;
                         }
                     }
                     else
@@ -56,6 +61,7 @@ public void run()
                         while (true)
                         {
                             process();
+                            completedTaskCount++;
                         }
                     }
                 }
@@ -78,7 +84,28 @@ public void run()
         }
     }
 
-    public long getPendingTasks() {
+
+    /**
+     * Get the current number of running tasks
+     */
+    public int getActiveCount()
+    {
+        return 1;
+    }
+
+    /**
+     * Get the number of completed tasks
+     */
+    public long getCompletedTasks()
+    {   
+        return completedTaskCount;
+    }
+
+    /**
+     * Get the number of tasks waiting to be executed
+     */
+    public long getPendingTasks()
+    {
         return queue.size();
     }
 
@@ -133,6 +160,7 @@ private void processWithSyncBatch() throws Exception
         }
     }
 
+
     @Override
     protected <T> RunnableFuture<T> newTaskFor(Runnable runnable, T value)
     {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeProbe.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeProbe.java
index 7f25e470..7894454b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeProbe.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeProbe.java
@@ -390,13 +390,23 @@ public void printThreadPoolStats(PrintStream outs)
         ObjectName query;
         try
         {
+            outs.print(String.format("%-25s", "Pool Name"));
+            outs.print(String.format("%10s", "Active"));
+            outs.print(String.format("%10s", "Pending"));
+            outs.print(String.format("%15s", "Completed"));
+            outs.println();
+
             query = new ObjectName("org.apache.cassandra.concurrent:type=*");
             Set<ObjectName> result = mbeanServerConn.queryNames(query, null);
             for (ObjectName objectName : result)
             {
                 String poolName = objectName.getKeyProperty("type");
                 IExecutorMBean threadPoolProxy = JMX.newMBeanProxy(mbeanServerConn, objectName, IExecutorMBean.class);
-                outs.println(poolName + ", pending tasks=" + threadPoolProxy.getPendingTasks());
+                outs.print(String.format("%-25s", poolName));
+                outs.print(String.format("%10d", threadPoolProxy.getActiveCount()));
+                outs.print(String.format("%10d", threadPoolProxy.getPendingTasks()));
+                outs.print(String.format("%15d", threadPoolProxy.getCompletedTasks()));
+                outs.println();
             }
         }
         catch (MalformedObjectNameException e)
@@ -464,7 +474,7 @@ private static void printUsage()
     {
         HelpFormatter hf = new HelpFormatter();
         String header = String.format(
-                "%nAvailable commands: ring, cluster, info, cleanup, compact, cfstats, snapshot [name], clearsnapshot, tpstats, flush_binary, " +
+                "%nAvailable commands: ring, info, cleanup, compact, cfstats, snapshot [name], clearsnapshot, tpstats, flush_binary, " +
                 " getcompactionthreshold, setcompactionthreshold [minthreshold] ([maxthreshold])");
         String usage = String.format("java %s -host <arg> <command>%n", NodeProbe.class.getName());
         hf.printHelp(usage, "", options, header);
