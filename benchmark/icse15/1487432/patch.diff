diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/PivotedMatrix.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/PivotedMatrix.java
index d350aa7b..fba1e981 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/PivotedMatrix.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/PivotedMatrix.java
@@ -24,11 +24,11 @@
  */
 public class PivotedMatrix extends AbstractMatrix {
 
-  private final Matrix base;
-  private final int[] rowPivot;
-  private final int[] rowUnpivot;
-  private final int[] columnPivot;
-  private final int[] columnUnpivot;
+  private Matrix base;
+  private int[] rowPivot;
+  private int[] rowUnpivot;
+  private int[] columnPivot;
+  private int[] columnUnpivot;
 
   public PivotedMatrix(Matrix base, int[] pivot) {
     this(base, pivot, java.util.Arrays.copyOf(pivot, pivot.length));
@@ -177,6 +177,21 @@ public Matrix like() {
     return new PivotedMatrix(base.like());
   }
 
+
+  @Override
+  public Matrix clone() {
+    PivotedMatrix clone = (PivotedMatrix) super.clone();
+
+    base = base.clone();
+    rowPivot = rowPivot.clone();
+    rowUnpivot = rowUnpivot.clone();
+    columnPivot = columnPivot.clone();
+    columnUnpivot = columnUnpivot.clone();
+
+    return clone;
+  }
+
+
   /**
    * Returns an empty matrix of the same underlying class as the receiver and of the specified
    * size.
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/SparseMatrix.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/SparseMatrix.java
index 0048dcc5..6f2f5649 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/SparseMatrix.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/SparseMatrix.java
@@ -57,6 +57,9 @@ public SparseMatrix(int rows, int columns) {
   public Matrix clone() {
     SparseMatrix clone = (SparseMatrix) super.clone();
     clone.rowVectors = rowVectors.clone();
+    for (int i = 0; i < numRows(); i++) {
+      clone.rowVectors.put(i, rowVectors.get(i).clone());
+    }
     return clone;
   }
 
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/random/Multinomial.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/random/Multinomial.java
index b78a0771..d79c32cd 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/random/Multinomial.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/random/Multinomial.java
@@ -165,8 +165,8 @@ public T sample(double u) {
   /**
    * Exposed for testing only.  Returns a list of the leaf weights.  These are in an
    * order such that probing just before and after the cumulative sum of these weights
-   * will touch every element of the tree twice and thus will make every possible left/right
-   * decision in navigating the tree.
+   * will touch every element of the tree twice and thus will make it possible to test
+   * every possible left/right decision in navigating the tree.
    */
   List<Double> getWeights() {
     List<Double> r = Lists.newArrayList();
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/MatrixTest.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/MatrixTest.java
index dc3be8ad..2fbc6b09 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/MatrixTest.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/MatrixTest.java
@@ -67,6 +67,19 @@ public void testCopy() {
     }
   }
 
+  @Test
+  public void testClone() {
+    double oldValue = 1.23;
+    double newValue = 2.34;
+    double[][] values = {{oldValue, 3}, {3, 5}, {7, 9}};
+    Matrix matrix = matrixFactory(values);
+    Matrix clone = matrix.clone();
+    clone.set(0, 0, newValue);
+    //test whether the update in the clone is reflected in the original matrix
+    assertEquals("Matrix clone is not independent of the original",
+      oldValue, matrix.get(0, 0), EPSILON);
+  }
+
   @Test
   public void testIterate() {
     Iterator<MatrixSlice> it = test.iterator();
@@ -528,6 +541,14 @@ public void testAssignColumnCardinality() {
   public void testViewRow() {
     Vector row = test.viewRow(1);
     assertEquals("row size", 2, row.getNumNondefaultElements());
+
+    //create a matrix with an unassigned row 0
+    Matrix matrix = new SparseMatrix(1, 1);
+    Vector view = matrix.viewRow(0);
+    final double value = 1.23;
+    view.assign(value);
+    //test whether the update in the view is reflected in the matrix
+    assertEquals("Matrix value", view.getQuick(0), matrix.getQuick(0, 0), EPSILON);
   }
 
   @Test(expected = IndexException.class)
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSparseMatrix.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSparseMatrix.java
index 89b01a25..a2e73e89 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSparseMatrix.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/TestSparseMatrix.java
@@ -31,16 +31,4 @@ public Matrix matrixFactory(double[][] values) {
     }
     return matrix;
   }
-
-  @Test
-  public void testViewRow() {
-    //create a matrix with an unassigned row 0
-    Matrix matrix = new SparseMatrix(1, 1);
-    Vector view = matrix.viewRow(0);
-    final double value = 1.23;
-    view.assign(value);
-    //test whether the update in the view is reflected in the matrix
-    assertEquals("Matrix value", view.getQuick(0), matrix.getQuick(0, 0), EPSILON);
-  }
-
 }
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/random/MultinomialTest.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/random/MultinomialTest.java
index fc07ed3d..f98690cd 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/random/MultinomialTest.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/random/MultinomialTest.java
@@ -245,7 +245,7 @@ private static void checkSelfConsistent(Multinomial<Integer> table) {
         double totalWeight = table.getWeight();
 
         double p = 0;
-        int[] k = new int[10];
+        int[] k = new int[weights.size()];
         for (double weight : weights) {
             if (weight > 0) {
                 if (p > 0) {
@@ -258,9 +258,11 @@ private static void checkSelfConsistent(Multinomial<Integer> table) {
         k[table.sample(p - 1.0e-9)]++;
         assertEquals(1, p, 1.0e-9);
 
-        for (int i = 0; i < 10; i++) {
+        for (int i = 0; i < weights.size(); i++) {
             if (table.getWeight(i) > 0) {
                 assertEquals(2, k[i]);
+            } else {
+                assertEquals(0, k[i]);
             }
         }
     }
