diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java
index 1fb07b4e..79f06ebf 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/replication/master/AsynchronousLogShipper.java
@@ -106,6 +106,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      */
     private MasterController masterController = null;
     
+    /**
+     * Object used to synchronize on while the log shipper thread
+     * is moved into the wait state, or while notifying it.
+     */
+    private Object objLSTSync = new Object(); // LST->Log Shippper Thread
+    
     /**
      * Store the log chunk that failed during a previous shipping attempt
      * so that it can be re-shipped to the slave.
@@ -197,10 +203,10 @@ public void run() {
                 shipALogChunk();
                 //calculate the shipping interval (wait time) based on the
                 //fill information obtained from the log buffer.
-                synchronized(this) {
                     shippingInterval = calculateSIfromFI();
                     if (shippingInterval != -1) {
-                        wait(shippingInterval);
+                    synchronized(objLSTSync) {
+                        objLSTSync.wait(shippingInterval);
                     }
                 }
             } catch (InterruptedException ie) {
@@ -302,11 +308,11 @@ public void forceFlush() throws IOException, StandardException {
             shipALogChunk();
         }
         
-        synchronized(this) {
+        synchronized(objLSTSync) {
             //There will still be more log to send after the forceFlush
             //has sent one chunk.  Notify the log shipping thread that
             //it is time for another send.
-            notify();
+            objLSTSync.notify();
         }
     }
     
@@ -362,8 +368,8 @@ public void workToDo() {
         if (fi >= FI_HIGH || 
                 (System.currentTimeMillis() - lastShippingTime) >
                  minShippingInterval) {
-            synchronized (this) {
-                notify();
+            synchronized (objLSTSync) {
+                objLSTSync.notify();
             }
         }
     }
