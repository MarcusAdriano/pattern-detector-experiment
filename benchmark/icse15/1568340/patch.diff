diff --git a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource.java b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource.java
index 8092bde4..cd101fb9 100644
--- a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource.java
+++ b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource.java
@@ -69,7 +69,7 @@ public void testSimple() throws Exception {
     params.set("command", "full-import");
     params.set("clean", "false");
     req.setParams(params);
-    String url = "http://127.0.0.1:" + jetty.getLocalPort() + "/solr";
+    String url = "http" + (isSSLMode() ? "s" : "") + "://127.0.0.1:" + jetty.getLocalPort() + "/solr";
     HttpSolrServer solrServer = new HttpSolrServer(url);
     solrServer.request(req);
     ModifiableSolrParams qparams = new ModifiableSolrParams();
@@ -89,7 +89,7 @@ public void testCommitWithin() throws Exception {
         "clean", "false", UpdateParams.COMMIT, "false", 
         UpdateParams.COMMIT_WITHIN, "1000");
     req.setParams(params);
-    String url = "http://127.0.0.1:" + jetty.getLocalPort() + "/solr";
+    String url = "http" + (isSSLMode() ? "s" : "") + "://127.0.0.1:" + jetty.getLocalPort() + "/solr";
     HttpSolrServer solrServer = new HttpSolrServer(url);
     solrServer.request(req);
     Thread.sleep(100);
@@ -181,7 +181,7 @@ public void tearDown() throws Exception {
 
   private JettySolrRunner createJetty(SolrInstance instance) throws Exception {
     System.setProperty("solr.data.dir", instance.getDataDir());
-    JettySolrRunner jetty = new JettySolrRunner(instance.getHomeDir(), "/solr", 0);
+    JettySolrRunner jetty = new JettySolrRunner(instance.getHomeDir(), "/solr", 0, null, null, true, null, sslConfig);
     jetty.start();
     return jetty;
   }
diff --git a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java
index 431f8188..dac92cfc 100644
--- a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java
+++ b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java
@@ -95,7 +95,7 @@ private String generateDIHConfig(String options, boolean useDeadServer) {
   }
   
   private String getSourceUrl() {
-    return "http://127.0.0.1:" + jetty.getLocalPort() + "/solr";
+    return "http" + (isSSLMode() ? "s" : "") +"://127.0.0.1:" + jetty.getLocalPort() + "/solr";
   }
   
   //TODO: fix this test to close its directories
@@ -348,7 +348,7 @@ public void tearDown() throws Exception {
   
   private JettySolrRunner createJetty(SolrInstance instance) throws Exception {
     System.setProperty("solr.data.dir", instance.getDataDir());
-    JettySolrRunner jetty = new JettySolrRunner(instance.getHomeDir(), "/solr", 0);
+    JettySolrRunner jetty = new JettySolrRunner(instance.getHomeDir(), "/solr", 0, null, null, true, null, sslConfig);
     jetty.start();
     return jetty;
   }
diff --git a/lucene/dev/branches/branch_4x/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineZkTestBase.java b/lucene/dev/branches/branch_4x/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineZkTestBase.java
index 97d82c85..b0522fa6 100644
--- a/lucene/dev/branches/branch_4x/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineZkTestBase.java
+++ b/lucene/dev/branches/branch_4x/solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineZkTestBase.java
@@ -156,7 +156,7 @@ public JettySolrRunner createJetty(File solrHome, String dataDir,
       throws Exception {
     
     JettySolrRunner jetty = new JettySolrRunner(solrHome.getAbsolutePath(),
-        context, 0, solrConfigOverride, schemaOverride);
+        context, 0, solrConfigOverride, schemaOverride, true, null, sslConfig);
 
     jetty.setShards(shardList);
     
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java
index 7dc0e0e4..7df53a8b 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner.java
@@ -193,10 +193,11 @@ public JettySolrRunner(String solrHome, String context, int port,
       this.extraRequestFilters = new TreeMap<Class,String>(extraRequestFilters.comparator());
       this.extraRequestFilters.putAll(extraRequestFilters);
     }
-    this.init(solrHome, context, port, stopAtShutdown);
     this.solrConfigFilename = solrConfigFilename;
     this.schemaFilename = schemaFileName;
     this.sslConfig = sslConfig;
+
+    this.init(solrHome, context, port, stopAtShutdown);
   }
   
   public static class SSLConfig {
@@ -359,19 +360,18 @@ private void sslInit(final boolean useSsl, final SslContextFactory sslcontext) {
         sslcontext.setKeyStorePath(sslConfig.keyStore);
       }
       if (null != sslConfig.keyStorePassword) {
-        sslcontext.setKeyStorePassword(System
-            .getProperty("solr.javax.net.ssl.keyStorePassword"));
+        sslcontext.setKeyStorePassword(sslConfig.keyStorePassword);
       }
       if (null != sslConfig.trustStore) {
         sslcontext.setTrustStore(System
-            .getProperty("solr.javax.net.ssl.trustStore"));
+            .getProperty(sslConfig.trustStore));
       }
       if (null != sslConfig.trustStorePassword) {
         sslcontext.setTrustStorePassword(sslConfig.trustStorePassword);
       }
       sslcontext.setNeedClientAuth(sslConfig.clientAuth);
     } else {
-      boolean jettySsl = Boolean.getBoolean("tests.jettySsl");
+      boolean jettySsl = Boolean.getBoolean(System.getProperty("tests.jettySsl"));
 
       if (jettySsl) {
         if (null != System.getProperty("javax.net.ssl.keyStore")) {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
index c8fc0dec..b52a1eeb 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ElectionContext.java
@@ -141,7 +141,7 @@ public ShardLeaderElectionContext(LeaderElector leaderElector,
         zkController.getZkStateReader());
     this.zkController = zkController;
     this.cc = cc;
-    syncStrategy = new SyncStrategy(cc.getUpdateShardHandler());
+    syncStrategy = new SyncStrategy(cc);
   }
   
   @Override
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
index 19b5849d..30771a6d 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.java
@@ -511,7 +511,6 @@ private void deleteReplica(ClusterState clusterState, ZkNodeProps message, Named
     
     ShardRequest sreq = new ShardRequest();
     sreq.purpose = 1;
-    if (baseUrl.startsWith("http://")) baseUrl = baseUrl.substring(7);
     sreq.shards = new String[] {baseUrl};
     sreq.actualShards = sreq.shards;
     sreq.params = new ModifiableSolrParams(new MapSolrParams(m));
@@ -765,9 +764,7 @@ private boolean createShard(ClusterState clusterState, ZkNodeProps message, Name
       ShardRequest sreq = new ShardRequest();
       params.set("qt", adminPath);
       sreq.purpose = 1;
-      String replica = zkStateReader.getZkClient()
-          .getBaseUrlForNodeName(nodeName);
-      if (replica.startsWith("http://")) replica = replica.substring(7);
+      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);
       sreq.shards = new String[]{replica};
       sreq.actualShards = sreq.shards;
       sreq.params = params;
@@ -971,7 +968,7 @@ private boolean splitShard(ClusterState clusterState, ZkNodeProps message, Named
       for (String subShardName : subShardNames) {
         // wait for parent leader to acknowledge the sub-shard core
         log.info("Asking parent leader to wait for: " + subShardName + " to be alive on: " + nodeName);
-        String coreNodeName = waitForCoreNodeName(collection, zkStateReader.getZkClient().getBaseUrlForNodeName(nodeName), subShardName);
+        String coreNodeName = waitForCoreNodeName(collection, zkStateReader.getBaseUrlForNodeName(nodeName), subShardName);
         CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();
         cmd.setCoreName(subShardName);
         cmd.setNodeName(nodeName);
@@ -1080,7 +1077,7 @@ private boolean splitShard(ClusterState clusterState, ZkNodeProps message, Named
 
           sendShardRequest(subShardNodeName, params);
 
-          String coreNodeName = waitForCoreNodeName(collection, zkStateReader.getZkClient().getBaseUrlForNodeName(subShardNodeName), shardName);
+          String coreNodeName = waitForCoreNodeName(collection, zkStateReader.getBaseUrlForNodeName(subShardNodeName), shardName);
           // wait for the replicas to be seen as active on sub shard leader
           log.info("Asking sub shard leader to wait for: " + shardName + " to be alive on: " + subShardNodeName);
           CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();
@@ -1417,7 +1414,7 @@ private void migrateKey(ClusterState clusterState, DocCollection sourceCollectio
 
     String tempCollectionReplica1 = tempSourceCollectionName + "_" + tempSourceSlice.getName() + "_replica1";
     String coreNodeName = waitForCoreNodeName(clusterState.getCollection(tempSourceCollectionName),
-        zkStateReader.getZkClient().getBaseUrlForNodeName(sourceLeader.getNodeName()), tempCollectionReplica1);
+        zkStateReader.getBaseUrlForNodeName(sourceLeader.getNodeName()), tempCollectionReplica1);
     // wait for the replicas to be seen as active on temp source leader
     log.info("Asking source leader to wait for: " + tempCollectionReplica1 + " to be alive on: " + sourceLeader.getNodeName());
     CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();
@@ -1454,7 +1451,7 @@ private void migrateKey(ClusterState clusterState, DocCollection sourceCollectio
     sendShardRequest(targetLeader.getNodeName(), params);
 
     coreNodeName = waitForCoreNodeName(clusterState.getCollection(tempSourceCollectionName),
-        zkStateReader.getZkClient().getBaseUrlForNodeName(targetLeader.getNodeName()), tempCollectionReplica2);
+        zkStateReader.getBaseUrlForNodeName(targetLeader.getNodeName()), tempCollectionReplica2);
     // wait for the replicas to be seen as active on temp source leader
     log.info("Asking temp source leader to wait for: " + tempCollectionReplica2 + " to be alive on: " + targetLeader.getNodeName());
     cmd = new CoreAdminRequest.WaitForState();
@@ -1518,8 +1515,7 @@ private void sendShardRequest(String nodeName, ModifiableSolrParams params) {
     ShardRequest sreq = new ShardRequest();
     params.set("qt", adminPath);
     sreq.purpose = 1;
-    String replica = zkStateReader.getZkClient().getBaseUrlForNodeName(nodeName);
-    if (replica.startsWith("http://")) replica = replica.substring(7);
+    String replica = zkStateReader.getBaseUrlForNodeName(nodeName);
     sreq.shards = new String[]{replica};
     sreq.actualShards = sreq.shards;
     sreq.params = params;
@@ -1653,9 +1649,7 @@ private void createCollection(ClusterState clusterState, ZkNodeProps message, Na
           ShardRequest sreq = new ShardRequest();
           params.set("qt", adminPath);
           sreq.purpose = 1;
-          String replica = zkStateReader.getZkClient()
-            .getBaseUrlForNodeName(nodeName);
-          if (replica.startsWith("http://")) replica = replica.substring(7);
+          String replica = zkStateReader.getBaseUrlForNodeName(nodeName);
           sreq.shards = new String[] {replica};
           sreq.actualShards = sreq.shards;
           sreq.params = params;
@@ -1753,8 +1747,6 @@ private void sliceCmd(ClusterState clusterState, ModifiableSolrParams params, St
         // yes, they must use same admin handler path everywhere...
         cloneParams.set("qt", adminPath);
         sreq.purpose = 1;
-        // TODO: this sucks
-        if (replica.startsWith("http://")) replica = replica.substring(7);
         sreq.shards = new String[] {replica};
         sreq.actualShards = sreq.shards;
         sreq.params = cloneParams;
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/SyncStrategy.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/SyncStrategy.java
index 138a51c4..270bb0a1 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/SyncStrategy.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/SyncStrategy.java
@@ -34,9 +34,9 @@
 import org.apache.solr.common.params.CoreAdminParams.CoreAdminAction;
 import org.apache.solr.common.params.ModifiableSolrParams;
 import org.apache.solr.common.util.NamedList;
+import org.apache.solr.core.CoreContainer;
 import org.apache.solr.core.CoreDescriptor;
 import org.apache.solr.core.SolrCore;
-import org.apache.solr.handler.component.HttpShardHandlerFactory;
 import org.apache.solr.handler.component.ShardHandler;
 import org.apache.solr.handler.component.ShardRequest;
 import org.apache.solr.handler.component.ShardResponse;
@@ -62,10 +62,10 @@
 
   private final ExecutorService updateExecutor;
   
-  public SyncStrategy(UpdateShardHandler updateShardHandler) {
+  public SyncStrategy(CoreContainer cc) {
+    UpdateShardHandler updateShardHandler = cc.getUpdateShardHandler();
     client = updateShardHandler.getHttpClient();
-    
-    shardHandler = new HttpShardHandlerFactory().getShardHandler(client);
+    shardHandler = cc.getShardHandlerFactory().getShardHandler();
     updateExecutor = updateShardHandler.getUpdateExecutor();
   }
   
@@ -245,9 +245,6 @@ private void requestSync(String baseUrl, String replica, String leaderUrl, Strin
     sreq.coreName = coreName;
     sreq.baseUrl = baseUrl;
     sreq.purpose = 1;
-    // TODO: this sucks
-    if (replica.startsWith("http://"))
-      replica = replica.substring(7);
     sreq.shards = new String[]{replica};
     sreq.actualShards = sreq.shards;
     sreq.params = new ModifiableSolrParams();
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ZkController.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ZkController.java
index e4d69ae2..dcd0a8d0 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ZkController.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/cloud/ZkController.java
@@ -59,6 +59,7 @@
 import org.apache.solr.common.cloud.ZkStateReader;
 import org.apache.solr.common.cloud.ZooKeeperException;
 import org.apache.solr.common.params.SolrParams;
+import org.apache.solr.common.util.URLUtil;
 import org.apache.solr.core.CoreContainer;
 import org.apache.solr.core.CoreDescriptor;
 import org.apache.solr.core.SolrCore;
@@ -87,10 +88,6 @@
 
   static final String NEWL = System.getProperty("line.separator");
 
-
-  private final static Pattern URL_POST = Pattern.compile("https?://(.*)");
-  private final static Pattern URL_PREFIX = Pattern.compile("(https?://).*");
-
   private final boolean SKIP_AUTO_RECOVERY = Boolean.getBoolean("solrcloud.skip.autorecovery");
   
   private final DistributedQueue overseerJobQueue;
@@ -149,7 +146,6 @@ public boolean equals(Object obj) {
 
   private final String localHostPort;      // example: 54065
   private final String localHostContext;   // example: solr
-  private final String localHost;          // example: http://127.0.0.1
   private final String hostName;           // example: 127.0.0.1
   private final String nodeName;           // example: 127.0.0.1:54065_solr
   private final String baseURL;            // example: http://127.0.0.1:54065/solr
@@ -187,11 +183,7 @@ public ZkController(final CoreContainer cc, String zkServerAddress, int zkClient
     this.zkServerAddress = zkServerAddress;
     this.localHostPort = locaHostPort;
     this.localHostContext = localHostContext;
-    this.localHost = getHostAddress(localHost);
-    this.baseURL = this.localHost + ":" + this.localHostPort + 
-      (this.localHostContext.isEmpty() ? "" : ("/" + this.localHostContext));
-
-    this.hostName = getHostNameFromAddress(this.localHost);
+    this.hostName = normalizeHostName(localHost);
     this.nodeName = generateNodeName(this.hostName, 
                                      this.localHostPort, 
                                      this.localHostContext);
@@ -286,6 +278,8 @@ public void command() {
     leaderElector = new LeaderElector(zkClient);
     zkStateReader = new ZkStateReader(zkClient);
     
+    this.baseURL = zkStateReader.getBaseUrlForNodeName(this.nodeName);
+    
     init(registerOnReconnect);
   }
 
@@ -464,9 +458,9 @@ public ClusterState getClusterState() {
     return bytes;
   }
 
-  // normalize host to url_prefix://host
+  // normalize host removing any url scheme.
   // input can be null, host, or url_prefix://host
-  private String getHostAddress(String host) throws IOException {
+  private String normalizeHostName(String host) throws IOException {
 
     if (host == null || host.length() == 0) {
       String hostaddress;
@@ -496,31 +490,16 @@ private String getHostAddress(String host) throws IOException {
               "Error while looking for a better host name than 127.0.0.1", e);
         }
       }
-      host = "http://" + hostaddress;
+      host = hostaddress;
     } else {
-      Matcher m = URL_PREFIX.matcher(host);
-      if (!m.matches()) {
-        host = "http://" + host;
+      if(URLUtil.hasScheme(host)) {
+        host = URLUtil.removeScheme(host);
       }
     }
 
     return host;
   }
 
-  // extract host from url_prefix://host
-  private String getHostNameFromAddress(String addr) {
-    Matcher m = URL_POST.matcher(addr);
-    if (m.matches()) {
-      return m.group(1);
-    } else {
-      log.error("Unrecognized host:" + addr);
-      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,
-          "Unrecognized host:" + addr);
-    }
-  }
-  
-  
-  
   public String getHostName() {
     return hostName;
   }
@@ -1585,7 +1564,7 @@ public LeaderElector getOverseerElector() {
    * @param hostPort - must consist only of digits, must not be null or the empty string
    * @param hostContext - should not begin or end with a slash (leading/trailin slashes will be ignored), must not be null, may be the empty string to denote the root context
    * @lucene.experimental
-   * @see SolrZkClient#getBaseUrlForNodeName
+   * @see ZkStateReader#getBaseUrlForNodeName
    */
   static String generateNodeName(final String hostName,
                                  final String hostPort,
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
index 25cd688a..709c3cd9 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler.java
@@ -824,7 +824,7 @@ protected void handleRequestSyncAction(SolrQueryRequest req,
     try {
       core = coreContainer.getCore(cname);
       if (core != null) {
-        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler());
+        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer());
         
         Map<String,Object> props = new HashMap<String,Object>();
         props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java
index c345675e..22166e15 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java
@@ -378,8 +378,6 @@ public void checkDistributed(ResponseBuilder rb) {
                 sliceShardsStr.append('|');
               }
               String url = ZkCoreNodeProps.getCoreUrl(replica);
-              if (url.startsWith("http://"))
-                url = url.substring(7);
               sliceShardsStr.append(url);
             }
 
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java
index b8c34380..e12a0ca0 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java
@@ -16,16 +16,17 @@
  * limitations under the License.
  */
 
+import org.apache.commons.lang.StringUtils;
 import org.apache.http.client.HttpClient;
 import org.apache.solr.client.solrj.SolrServerException;
 import org.apache.solr.client.solrj.impl.HttpClientUtil;
 import org.apache.solr.client.solrj.impl.LBHttpSolrServer;
 import org.apache.solr.client.solrj.request.QueryRequest;
-import org.apache.solr.common.SolrException;
 import org.apache.solr.common.params.ModifiableSolrParams;
 import org.apache.solr.common.util.ExecutorUtil;
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.common.util.StrUtils;
+import org.apache.solr.common.util.URLUtil;
 import org.apache.solr.core.PluginInfo;
 import org.apache.solr.util.DefaultSolrThreadFactory;
 import org.slf4j.Logger;
@@ -46,6 +47,7 @@
 
 public class HttpShardHandlerFactory extends ShardHandlerFactory implements org.apache.solr.util.plugin.PluginInfoInitialized {
   protected static Logger log = LoggerFactory.getLogger(HttpShardHandlerFactory.class);
+  private static final String DEFAULT_SCHEME = "http";
 
   // We want an executor that doesn't take up any resources if
   // it's not used, so it could be created statically for
@@ -73,7 +75,7 @@
   int queueSize = -1;
   boolean accessPolicy = false;
 
-  private String scheme = "http://"; //current default values
+  private String scheme = null;
 
   private final Random r = new Random();
 
@@ -114,8 +116,10 @@ public ShardHandler getShardHandler(final HttpClient httpClient){
   public void init(PluginInfo info) {
     NamedList args = info.initArgs;
     this.soTimeout = getParameter(args, HttpClientUtil.PROP_SO_TIMEOUT, soTimeout);
-    this.scheme = getParameter(args, INIT_URL_SCHEME, "http://");
-    this.scheme = (this.scheme.endsWith("://")) ? this.scheme : this.scheme + "://";
+    this.scheme = getParameter(args, INIT_URL_SCHEME, null);
+    if(StringUtils.endsWith(this.scheme, "://")) {
+      this.scheme = StringUtils.removeEnd(this.scheme, "://");
+    }
     this.connectionTimeout = getParameter(args, HttpClientUtil.PROP_CONNECTION_TIMEOUT, connectionTimeout);
     this.maxConnectionsPerHost = getParameter(args, HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, maxConnectionsPerHost);
     this.corePoolSize = getParameter(args, INIT_CORE_POOL_SIZE, corePoolSize);
@@ -204,7 +208,7 @@ public void close() {
   /**
    * Creates a randomized list of urls for the given shard.
    *
-   * @param shard the urls for the shard (minus "http://"), separated by '|'
+   * @param shard the urls for the shard, separated by '|'
    * @return A list of valid urls (including protocol) that are replicas for the shard
    */
   public List<String> makeURLList(String shard) {
@@ -212,7 +216,7 @@ public void close() {
 
     // convert shard to URL
     for (int i=0; i<urls.size(); i++) {
-      urls.set(i, scheme + urls.get(i));
+      urls.set(i, buildUrl(urls.get(i)));
     }
 
     //
@@ -232,4 +236,19 @@ public void close() {
   public CompletionService newCompletionService() {
     return new ExecutorCompletionService<ShardResponse>(commExecutor);
   }
+  
+  /**
+   * Rebuilds the URL replacing the URL scheme of the passed URL with the
+   * configured scheme replacement.If no scheme was configured, the passed URL's
+   * scheme is left alone.
+   */
+  private String buildUrl(String url) {
+    if(!URLUtil.hasScheme(url)) {
+      return StringUtils.defaultIfEmpty(scheme, DEFAULT_SCHEME) + "://" + url;
+    } else if(StringUtils.isNotEmpty(scheme)) {
+      return scheme + "://" + URLUtil.removeScheme(url);
+    }
+    
+    return url;
+  }
 }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/ShardHandlerFactory.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/ShardHandlerFactory.java
index 12710292..ab0e3c50 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/ShardHandlerFactory.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/component/ShardHandlerFactory.java
@@ -40,7 +40,6 @@
    * @return a new, initialized ShardHandlerFactory instance
    */
   public static ShardHandlerFactory newInstance(PluginInfo info, SolrResourceLoader loader) {
-
     if (info == null)
       info = DEFAULT_SHARDHANDLER_INFO;
 
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/PeerSync.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/PeerSync.java
index 2a7459d1..f94a4a32 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/PeerSync.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/PeerSync.java
@@ -139,7 +139,7 @@ public PeerSync(SolrCore core, List<String> replicas, int nUpdates, boolean cant
     uhandler = core.getUpdateHandler();
     ulog = uhandler.getUpdateLog();
     // TODO: shutdown
-    shardHandlerFactory = new HttpShardHandlerFactory();
+    shardHandlerFactory = (HttpShardHandlerFactory) core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();
     shardHandler = shardHandlerFactory.getShardHandler(client);
   }
 
@@ -269,9 +269,6 @@ public boolean sync() {
   private void requestVersions(String replica) {
     SyncShardRequest sreq = new SyncShardRequest();
     sreq.purpose = 1;
-    // TODO: this sucks
-    if (replica.startsWith("http://"))
-      replica = replica.substring(7);
     sreq.shards = new String[]{replica};
     sreq.actualShards = sreq.shards;
     sreq.params = new ModifiableSolrParams();
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest.java
index 293c31d9..0551eac1 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/AliasIntegrationTest.java
@@ -138,7 +138,7 @@ public void doTest() throws Exception {
     query.set("collection", "testalias");
     JettySolrRunner jetty = jettys.get(random().nextInt(jettys.size()));
     int port = jetty.getLocalPort();
-    HttpSolrServer server = new HttpSolrServer("http://127.0.0.1:" + port + context + "/testalias");
+    HttpSolrServer server = new HttpSolrServer(getBaseUrl() + port + context + "/testalias");
     res = server.query(query);
     assertEquals(3, res.getResults().getNumFound());
     
@@ -146,7 +146,7 @@ public void doTest() throws Exception {
     query = new SolrQuery("*:*");
     jetty = jettys.get(random().nextInt(jettys.size()));
     port = jetty.getLocalPort();
-    server = new HttpSolrServer("http://127.0.0.1:" + port + context + "/testalias");
+    server = new HttpSolrServer(getBaseUrl() + port + context + "/testalias");
     res = server.query(query);
     assertEquals(3, res.getResults().getNumFound());
     
@@ -173,7 +173,7 @@ public void doTest() throws Exception {
     query.set("collection", "testalias");
     jetty = jettys.get(random().nextInt(jettys.size()));
     port = jetty.getLocalPort();
-    server = new HttpSolrServer("http://127.0.0.1:" + port + context + "/testalias");
+    server = new HttpSolrServer(getBaseUrl() + port + context + "/testalias");
     res = server.query(query);
     assertEquals(5, res.getResults().getNumFound());
     
@@ -181,7 +181,7 @@ public void doTest() throws Exception {
     query = new SolrQuery("*:*");
     jetty = jettys.get(random().nextInt(jettys.size()));
     port = jetty.getLocalPort();
-    server = new HttpSolrServer("http://127.0.0.1:" + port + context + "/testalias");
+    server = new HttpSolrServer(getBaseUrl() + port + context + "/testalias");
     res = server.query(query);
     assertEquals(5, res.getResults().getNumFound());
     
@@ -243,6 +243,10 @@ public void doTest() throws Exception {
     assertTrue(sawException);
   }
 
+  private String getBaseUrl() {
+    return (isSSLMode() ? "https" : "http") + "://127.0.0.1:";
+  }
+
   private void createAlias(String alias, String collections)
       throws SolrServerException, IOException {
     if (random().nextBoolean()) {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test.java
index 36a470cf..7b2fb8d2 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZk2Test.java
@@ -20,13 +20,12 @@
 import java.io.File;
 import java.io.FilenameFilter;
 import java.io.IOException;
-import java.io.InputStream;
-import java.net.URL;
 import java.util.Arrays;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.apache.commons.io.IOUtils;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.impl.client.BasicResponseHandler;
 import org.apache.solr.client.solrj.SolrQuery;
 import org.apache.solr.client.solrj.SolrServer;
 import org.apache.solr.client.solrj.SolrServerException;
@@ -444,12 +443,9 @@ private void checkForBackupSuccess(final HttpSolrServer client, File location)
       public void run() {
         String masterUrl = client.getBaseURL() + "/replication?command="
             + ReplicationHandler.CMD_DETAILS;
-        URL url;
-        InputStream stream = null;
+        
         try {
-          url = new URL(masterUrl);
-          stream = url.openStream();
-          response = IOUtils.toString(stream, "UTF-8");
+          response = client.getHttpClient().execute(new HttpGet(masterUrl), new BasicResponseHandler());
           if (response.contains("<str name=\"status\">success</str>")) {
             Matcher m = p.matcher(response);
             if (!m.find()) {
@@ -458,12 +454,9 @@ public void run() {
             
             success = true;
           }
-          stream.close();
         } catch (Exception e) {
           e.printStackTrace();
           fail = e.getMessage();
-        } finally {
-          IOUtils.closeQuietly(stream);
         }
         
       };
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java
index f3ca7f74..45845af5 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java
@@ -440,7 +440,7 @@ private void testShardParamVariations() throws Exception {
         // each replica should also give the same numDocs
         ArrayList<String> replicaAlts = new ArrayList<String>(replicaJetties.size() * 2);
         for (CloudJettyRunner replicaJetty : shardToJetty.get(shard)) {
-          String replica = removeProtocol(replicaJetty.url);
+          String replica = replicaJetty.url;
           query.set("shards", replica);
 
           // replicas already shuffled, use this in the alternative check below
@@ -484,7 +484,7 @@ private void testShardParamVariations() throws Exception {
           ArrayList<String> replicas = new ArrayList<String>(7);
           for (CloudJettyRunner replicaJetty : shardToJetty.get(shard)) {
             if (0 == random().nextInt(3) || 0 == replicas.size()) {
-              replicas.add(removeProtocol(replicaJetty.url));
+              replicas.add(replicaJetty.url);
             }
           }
           Collections.shuffle(replicas, random());
@@ -1201,11 +1201,4 @@ public void tearDown() throws Exception {
     // insurance
     DirectUpdateHandler2.commitOnClose = true;
   }
-
-  /**
-   * Given a URL as a string, removes the leading protocol from that string
-   */
-  private static String removeProtocol(String url) {
-    return url.replaceFirst("^[^:/]{1,20}:/+","");
-  }
 }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest.java
index 17b72e4e..3c5fcbc1 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest.java
@@ -438,7 +438,7 @@ private long testIndexingWithSuss(long docId) throws Exception {
     long beforeCount = results.getResults().getNumFound();
     int cnt = TEST_NIGHTLY ? 2933 : 313;
     try {
-      suss.setConnectionTimeout(15000);
+      suss.setConnectionTimeout(30000);
       for (int i = 0; i < cnt; i++) {
         index_specific(suss, id, docId++, "text_t", "some text so that it not's negligent work to parse this doc, even though it's still a pretty short doc");
       }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest.java
index e3be35c2..e24b45b9 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest.java
@@ -207,7 +207,7 @@ public Object answer() throws Throwable {
       final String address = "localhost:" + (8963 + i) + "_solr";
       liveNodes.add(address);
       
-      solrZkClientMock.getBaseUrlForNodeName(address);
+      zkStateReaderMock.getBaseUrlForNodeName(address);
       expectLastCall().andAnswer(new IAnswer<Object>() {
         @Override
         public Object answer() throws Throwable {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest.java
index 386b71b1..92d84f40 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/OverseerRolesTest.java
@@ -17,6 +17,7 @@
  * limitations under the License.
  */
 
+
 import static org.apache.solr.cloud.OverseerCollectionProcessor.MAX_SHARDS_PER_NODE;
 import static org.apache.solr.cloud.OverseerCollectionProcessor.NUM_SLICES;
 import static org.apache.solr.cloud.OverseerCollectionProcessor.REPLICATION_FACTOR;
@@ -38,36 +39,20 @@
 import org.apache.solr.client.solrj.embedded.JettySolrRunner;
 import org.apache.solr.client.solrj.impl.CloudSolrServer;
 import org.apache.solr.client.solrj.request.QueryRequest;
-import org.apache.solr.common.cloud.SolrZkClient;
-import org.apache.solr.common.cloud.ZkStateReader;
+import org.apache.solr.common.params.CollectionParams.CollectionAction;
 import org.apache.solr.common.params.MapSolrParams;
 import org.apache.solr.common.params.SolrParams;
-import org.apache.zookeeper.KeeperException;
-import org.apache.zookeeper.data.Stat;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.BeforeClass;
-import org.junit.Ignore;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Set;
-
-import static org.apache.solr.cloud.OverseerCollectionProcessor.MAX_SHARDS_PER_NODE;
-import static org.apache.solr.cloud.OverseerCollectionProcessor.NUM_SLICES;
-import static org.apache.solr.cloud.OverseerCollectionProcessor.REPLICATION_FACTOR;
-import static org.apache.solr.cloud.OverseerCollectionProcessor.getSortedNodeNames;
-import static org.apache.solr.common.cloud.ZkNodeProps.makeMap;
-import static org.apache.solr.common.params.CollectionParams.CollectionAction;
 @LuceneTestCase.Slow
 public class OverseerRolesTest  extends AbstractFullDistribZkTestBase{
   private CloudSolrServer client;
 
+  static {
+    sslConfig = null;
+  }
+  
   @BeforeClass
   public static void beforeThisClass2() throws Exception {
 
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ZkControllerTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ZkControllerTest.java
index 9c186321..fbaefbc5 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ZkControllerTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ZkControllerTest.java
@@ -32,11 +32,10 @@
 import org.junit.Test;
 
 import java.io.File;
-import java.io.IOException;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.concurrent.TimeoutException;
 
 @Slow
 public class ZkControllerTest extends SolrTestCaseJ4 {
@@ -99,49 +98,59 @@ public void testNodeNameUrlConversion() throws Exception {
       AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());
       AbstractZkTestCase.makeSolrZkNode(server.getZkHost());
 
-      SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);
+      ZkStateReader zkStateReader = new ZkStateReader(server.getZkAddress(), TIMEOUT, TIMEOUT);
       try {
-
         // getBaseUrlForNodeName
         assertEquals("http://zzz.xxx:1234/solr",
-                     zkClient.getBaseUrlForNodeName("zzz.xxx:1234_solr"));
+                     zkStateReader.getBaseUrlForNodeName("zzz.xxx:1234_solr"));
         assertEquals("http://xxx:99",
-                     zkClient.getBaseUrlForNodeName("xxx:99_"));
+                     zkStateReader.getBaseUrlForNodeName("xxx:99_"));
         assertEquals("http://foo-bar.baz.org:9999/some_dir",
-                     zkClient.getBaseUrlForNodeName("foo-bar.baz.org:9999_some_dir"));
+                     zkStateReader.getBaseUrlForNodeName("foo-bar.baz.org:9999_some_dir"));
         assertEquals("http://foo-bar.baz.org:9999/solr/sub_dir",
-                     zkClient.getBaseUrlForNodeName("foo-bar.baz.org:9999_solr%2Fsub_dir"));
+                     zkStateReader.getBaseUrlForNodeName("foo-bar.baz.org:9999_solr%2Fsub_dir"));
         
         // generateNodeName + getBaseUrlForNodeName
         assertEquals("http://foo:9876/solr",
-                     zkClient.getBaseUrlForNodeName
+                     zkStateReader.getBaseUrlForNodeName
                      (ZkController.generateNodeName("foo","9876","solr")));
         assertEquals("http://foo:9876/solr",
-                     zkClient.getBaseUrlForNodeName
+                     zkStateReader.getBaseUrlForNodeName
                      (ZkController.generateNodeName("foo","9876","/solr")));
         assertEquals("http://foo:9876/solr",
-                     zkClient.getBaseUrlForNodeName
+                     zkStateReader.getBaseUrlForNodeName
                      (ZkController.generateNodeName("foo","9876","/solr/")));
         assertEquals("http://foo.bar.com:9876/solr/sub_dir",
-                     zkClient.getBaseUrlForNodeName
+                     zkStateReader.getBaseUrlForNodeName
                      (ZkController.generateNodeName("foo.bar.com","9876","solr/sub_dir")));
         assertEquals("http://foo.bar.com:9876/solr/sub_dir",
-                     zkClient.getBaseUrlForNodeName
+                     zkStateReader.getBaseUrlForNodeName
                      (ZkController.generateNodeName("foo.bar.com","9876","/solr/sub_dir/")));
         assertEquals("http://foo-bar:9876",
-                     zkClient.getBaseUrlForNodeName
+                     zkStateReader.getBaseUrlForNodeName
                      (ZkController.generateNodeName("foo-bar","9876","")));
         assertEquals("http://foo-bar:9876",
-                     zkClient.getBaseUrlForNodeName
+                     zkStateReader.getBaseUrlForNodeName
                      (ZkController.generateNodeName("foo-bar","9876","/")));
         assertEquals("http://foo-bar.com:80/some_dir",
-                     zkClient.getBaseUrlForNodeName
+                     zkStateReader.getBaseUrlForNodeName
                      (ZkController.generateNodeName("foo-bar.com","80","some_dir")));
         assertEquals("http://foo-bar.com:80/some_dir",
-                     zkClient.getBaseUrlForNodeName
+                     zkStateReader.getBaseUrlForNodeName
+                     (ZkController.generateNodeName("foo-bar.com","80","/some_dir")));
+        
+        //Verify the URL Scheme is taken into account
+        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,
+            ZkStateReader.toJSON(Collections.singletonMap("urlScheme", "https")), CreateMode.PERSISTENT, true);
+        
+        assertEquals("https://zzz.xxx:1234/solr",
+            zkStateReader.getBaseUrlForNodeName("zzz.xxx:1234_solr"));
+        
+        assertEquals("https://foo-bar.com:80/some_dir",
+            zkStateReader.getBaseUrlForNodeName
                      (ZkController.generateNodeName("foo-bar.com","80","/some_dir")));
       } finally {
-        zkClient.close();
+        zkStateReader.close();
       }
     } finally {
       server.shutdown();
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest.java
index 04a448cb..3cc0db86 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest.java
@@ -17,9 +17,20 @@
  * limitations under the License.
  */
 
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Random;
+import java.util.TreeMap;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicLong;
+
 import org.apache.commons.io.FileUtils;
 import org.apache.solr.SolrTestCaseJ4;
-import org.apache.solr.client.solrj.SolrServerException;
 import org.apache.solr.client.solrj.embedded.JettySolrRunner;
 import org.apache.solr.client.solrj.impl.HttpSolrServer;
 import org.apache.solr.client.solrj.request.UpdateRequest;
@@ -28,23 +39,10 @@
 import org.apache.solr.common.SolrInputDocument;
 import org.apache.solr.common.params.ModifiableSolrParams;
 import org.junit.After;
-import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import java.io.File;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Random;
-import java.util.TreeMap;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicInteger;
-import java.util.concurrent.atomic.AtomicLong;
-
 /**
  * Incorporate the open/close stress tests into unit tests.
  */
@@ -75,6 +73,11 @@
 
   static String savedFactory;
 
+  @BeforeClass
+  public static void beforeClass() {
+
+  }
+  
   @Before
   public void setupServer() throws Exception {
     coreCounts = new TreeMap<String, Long>();
@@ -84,7 +87,7 @@ public void setupServer() throws Exception {
     solrHomeDirectory = new File(TEMP_DIR, "OpenCloseCoreStressTest_");
     FileUtils.deleteDirectory(solrHomeDirectory); // Ensure that a failed test didn't leave something lying around.
 
-    jetty = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), "/solr", 0);
+    jetty = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), "/solr", 0, null, null, true, null, sslConfig);
   }
 
   @After
@@ -132,7 +135,7 @@ public void test1HourNew() throws Exception {
 
   private void getServers() throws Exception {
     jetty.start();
-    url = "http://127.0.0.1:" + jetty.getLocalPort() + "/solr/";
+    url = "http" + (isSSLMode() ? "s" : "") + "://127.0.0.1:" + jetty.getLocalPort() + "/solr/";
 
     // Mostly to keep annoying logging messages from being sent out all the time.
 
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
index b6975daa..e8537ca9 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
@@ -72,6 +72,7 @@
 import org.apache.solr.util.FileUtils;
 import org.junit.After;
 import org.junit.Before;
+import org.junit.BeforeClass;
 import org.junit.Ignore;
 import org.junit.Test;
 
@@ -99,6 +100,15 @@
   // index from previous test method
   static int nDocs = 500;
 
+  static {
+    // does not yet work with ssl
+    sslConfig = null;
+  }
+  
+  @BeforeClass
+  public static void beforeClass() {
+
+  }
 
   @Before
   public void setUp() throws Exception {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest.java
index 62cdfd41..f718331b 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest.java
@@ -11,6 +11,7 @@
 import org.apache.solr.client.solrj.response.QueryResponse;
 import org.apache.solr.common.SolrInputDocument;
 import org.apache.solr.common.util.NamedList;
+import org.junit.After;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -44,21 +45,6 @@
   @BeforeClass
   public static void beforeTest() throws Exception {
     solrHome = createSolrHome();
-    createJetty(solrHome.getAbsolutePath(), null, null);
-    
-    String url = jetty.getBaseUrl().toString();
-    collection1 = new HttpSolrServer(url);
-    collection2 = new HttpSolrServer(url + "/collection2");
-    
-    String urlCollection1 = jetty.getBaseUrl().toString() + "/" + "collection1";
-    String urlCollection2 = jetty.getBaseUrl().toString() + "/" + "collection2";
-    shard1 = urlCollection1.replaceAll("http://", "");
-    shard2 = urlCollection2.replaceAll("http://", "");
-    
-    //create second core
-    CoreAdminRequest.Create req = new CoreAdminRequest.Create();
-    req.setCoreName("collection2");
-    collection1.request(req);
   }
   
   private static File createSolrHome() throws Exception {
@@ -70,12 +56,6 @@ private static File createSolrHome() throws Exception {
 
   @AfterClass
   public static void afterTest() throws Exception {
-    collection1.shutdown();
-    collection2.shutdown();
-    collection1 = null;
-    collection2 = null;
-    jetty.stop();
-    jetty=null;
     cleanUpJettyHome(solrHome);
   }
   
@@ -83,6 +63,20 @@ public static void afterTest() throws Exception {
   @Override
   public void setUp() throws Exception {
     super.setUp();
+    createJetty(solrHome.getAbsolutePath(), null, null);
+    String url = jetty.getBaseUrl().toString();
+    collection1 = new HttpSolrServer(url);
+    collection2 = new HttpSolrServer(url + "/collection2");
+    
+    String urlCollection1 = jetty.getBaseUrl().toString() + "/" + "collection1";
+    String urlCollection2 = jetty.getBaseUrl().toString() + "/" + "collection2";
+    shard1 = urlCollection1.replaceAll("http" + (sslConfig == null || !sslConfig.useSsl ? "" : "s") + "://", "");
+    shard2 = urlCollection2.replaceAll("http" + (sslConfig == null || !sslConfig.useSsl ? "" : "s") + "://", "");
+    
+    //create second core
+    CoreAdminRequest.Create req = new CoreAdminRequest.Create();
+    req.setCoreName("collection2");
+    collection1.request(req);
     
     SolrInputDocument doc = new SolrInputDocument();
     doc.setField("id", "1");
@@ -97,6 +91,17 @@ public void setUp() throws Exception {
     
   }
   
+  @After
+  public void tearDown() throws Exception {
+    super.tearDown();
+    collection1.shutdown();
+    collection2.shutdown();
+    collection1 = null;
+    collection2 = null;
+    jetty.stop();
+    jetty=null;
+  }
+  
   @Test
   @SuppressWarnings("unchecked")
   public void testSimpleSearch() throws Exception {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/request/TestRemoteStreaming.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/request/TestRemoteStreaming.java
index 1217ecef..01fd6185 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/request/TestRemoteStreaming.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/request/TestRemoteStreaming.java
@@ -49,6 +49,11 @@
 
   private static final File solrHomeDirectory = new File(TEMP_DIR, "TestRemoteStreaming");
 
+  static {
+    // does not yet work with ssl
+    sslConfig = null;
+  }
+  
   @BeforeClass
   public static void beforeTest() throws Exception {
     //this one has handleSelect=true which a test here needs
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest.java
index 3cec9999..87cc757e 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest.java
@@ -23,17 +23,17 @@
 import java.util.Arrays;
 import java.util.Date;
 
-import com.google.common.base.Charsets;
 import org.apache.http.Header;
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.HttpRequestBase;
 import org.apache.http.impl.cookie.DateUtils;
+import org.apache.lucene.util._TestUtil;
 import org.apache.solr.common.params.CommonParams;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import org.apache.lucene.util._TestUtil;
+import com.google.common.base.Charsets;
 
 /**
  * A test case for the several HTTP cache headers emitted by Solr
@@ -41,6 +41,11 @@
 public class CacheHeaderTest extends CacheHeaderTestBase {
     private static final File solrHomeDirectory = new File(TEMP_DIR, "CacheHeaderTest");
 
+  static {
+    // does not yet work with ssl
+    sslConfig = null;
+  }
+    
   @BeforeClass
   public static void beforeTest() throws Exception {
     setupJettyTestHome(solrHomeDirectory, "collection1");
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest.java
index 3b1ef9bf..07018c30 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest.java
@@ -60,9 +60,13 @@
   
   private AtomicInteger id = new AtomicInteger();
   
+  static {
+    // no ssl currently because distrib updates read scheme from zk and no zk in this test
+    sslConfig = null;
+  }
+  
   @BeforeClass
   public static void beforeClass() throws Exception {
-
     // we can't use the Randomized merge policy because the test depends on
     // being able to call optimize to have all deletes expunged.
     System.setProperty("solr.tests.mergePolicy", LogDocMergePolicy.class.getName());
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer.java b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer.java
index e2f9c813..5a162203 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer.java
@@ -526,12 +526,7 @@ public NamedList getExceptions() {
         || request.getPath().equals("/admin/cores")) {
       Set<String> liveNodes = clusterState.getLiveNodes();
       for (String liveNode : liveNodes) {
-        int splitPointBetweenHostPortAndContext = liveNode.indexOf("_");
-        theUrlList.add("http://"
-            + liveNode.substring(0, splitPointBetweenHostPortAndContext)
-            + "/"
-            + URLDecoder.decode(liveNode, "UTF-8").substring(
-                splitPointBetweenHostPortAndContext + 1));
+        theUrlList.add(zkStateReader.getBaseUrlForNodeName(liveNode));
       }
     } else {
       String collection = reqParams.get("collection", defaultCollection);
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.java b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.java
index a9c84c88..8da774a1 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.java
@@ -95,6 +95,10 @@ public static void setConfigurer(HttpClientConfigurer newConfigurer) {
     configurer = newConfigurer;
   }
   
+  public static HttpClientConfigurer getConfigurer() {
+    return configurer;
+  }
+  
   /**
    * Creates new http client by using the provided configuration.
    * 
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java
index 54cc3c8a..f7655424 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java
@@ -490,28 +490,6 @@ public Stat setData(String path, File file, boolean retryOnConnLoss) throws IOEx
     return setData(path, data, retryOnConnLoss);
   }
 
-  /**
-   * Returns the baseURL corrisponding to a given node's nodeName -- 
-   * NOTE: does not (currently) imply that the nodeName (or resulting 
-   * baseURL) exists in the cluster.
-   * @lucene.experimental
-   */
-  public String getBaseUrlForNodeName(final String nodeName) {
-    final int _offset = nodeName.indexOf("_");
-    if (_offset < 0) {
-      throw new IllegalArgumentException("nodeName does not contain expected '_' seperator: " + nodeName);
-    }
-    final String hostAndPort = nodeName.substring(0,_offset);
-    try {
-      final String path = URLDecoder.decode(nodeName.substring(1+_offset),
-                                            "UTF-8");
-      return "http://" + hostAndPort + (path.isEmpty() ? "" : ("/" + path));
-    } catch (UnsupportedEncodingException e) {
-      throw new IllegalStateException("JVM Does not seem to support UTF-8", e);
-    }
-  }
-
-
   /**
    * Fills string with printout of current ZooKeeper layout.
    */
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java
index b59675b2..c1e1a16f 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java
@@ -18,6 +18,8 @@
  */
 
 import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.net.URLDecoder;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashSet;
@@ -619,4 +621,28 @@ public Map getClusterProps(){
     }
   }
   
+  /**
+   * Returns the baseURL corrisponding to a given node's nodeName --
+   * NOTE: does not (currently) imply that the nodeName (or resulting 
+   * baseURL) exists in the cluster.
+   * @lucene.experimental
+   */
+  public String getBaseUrlForNodeName(final String nodeName) {
+    final int _offset = nodeName.indexOf("_");
+    if (_offset < 0) {
+      throw new IllegalArgumentException("nodeName does not contain expected '_' seperator: " + nodeName);
+    }
+    final String hostAndPort = nodeName.substring(0,_offset);
+    try {
+      final String path = URLDecoder.decode(nodeName.substring(1+_offset), "UTF-8");
+      String urlScheme = (String) getClusterProps().get("urlScheme");
+      if(urlScheme == null) {
+        urlScheme = "http";
+      }
+      return urlScheme + "://" + hostAndPort + (path.isEmpty() ? "" : ("/" + path));
+    } catch (UnsupportedEncodingException e) {
+      throw new IllegalStateException("JVM Does not seem to support UTF-8", e);
+    }
+  }
+  
 }
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/util/URLUtil.java b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/util/URLUtil.java
index e69de29b..6d273ecd 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/util/URLUtil.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/util/URLUtil.java
@@ -0,0 +1,50 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.common.util;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+public class URLUtil {
+  
+  public final static Pattern URL_PREFIX = Pattern.compile("^([a-z]*?://).*");
+  
+  public static String removeScheme(String url) {
+    Matcher matcher = URL_PREFIX.matcher(url);
+    if (matcher.matches()) {
+      return url.substring(matcher.group(1).length());
+    }
+    
+    return url;
+  }
+  
+  public static boolean hasScheme(String url) {
+    Matcher matcher = URL_PREFIX.matcher(url);
+    return matcher.matches();
+  }
+  
+  public static String getScheme(String url) {
+    Matcher matcher = URL_PREFIX.matcher(url);
+    if (matcher.matches()) {
+      return matcher.group(1);
+    }
+    
+    return null;
+  }
+  
+}
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer.java b/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer.java
index a5a2a84e..0ea36c99 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer.java
@@ -260,7 +260,7 @@ public String getHomeDir() {
     }
 
     public String getUrl() {
-      return "http://127.0.0.1:" + port + "/solr";
+      return "http" + (isSSLMode() ? "s" : "") + "://127.0.0.1:" + port + "/solr";
     }
 
     public String getSchemaFile() {
@@ -315,7 +315,7 @@ public void tearDown() throws Exception {
     }
 
     public void startJetty() throws Exception {
-      jetty = new JettySolrRunner(getHomeDir(), "/solr", port, "bad_solrconfig.xml", null);
+      jetty = new JettySolrRunner(getHomeDir(), "/solr", port, "bad_solrconfig.xml", null, true, null, sslConfig);
       System.setProperty("solr.data.dir", getDataDir());
       jetty.start();
       int newPort = jetty.getLocalPort();
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest.java b/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest.java
index 61eaad6a..e356a81b 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest.java
@@ -52,7 +52,7 @@
     System.clearProperty("solr.directoryFactory");
     super.setUp();
 
-    jetty = new JettySolrRunner(getSolrHome(), context, 0 );
+    jetty = new JettySolrRunner(getSolrHome(), context, 0, null, null, true, null, sslConfig);
     jetty.start(false);
     port = jetty.getLocalPort();
 
@@ -93,7 +93,7 @@ private SolrServer createServer( String name )
   {
     try {
       // setup the server...
-      String url = "http://127.0.0.1:"+port+context+"/"+name;
+      String url = "http" + (isSSLMode() ? "s" : "") + "://127.0.0.1:"+port+context+"/"+name;
       HttpSolrServer s = new HttpSolrServer( url );
       s.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);
       s.setDefaultMaxConnectionsPerHost(100);
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest.java b/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest.java
index 3bd3b99c..81387f46 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest.java
@@ -43,7 +43,7 @@ public void testBadSetup()
   {
     try {
       // setup the server...
-      String url = "http://127.0.0.1/?core=xxx";
+      String url = "http" + (isSSLMode() ? "s" : "") +  "://127.0.0.1/?core=xxx";
       HttpSolrServer s = new HttpSolrServer( url );
       Assert.fail( "CommonsHttpSolrServer should not allow a path with a parameter: "+s.getBaseURL() );
     }
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest.java b/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest.java
index 51b4c179..9bd9f11b 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest.java
@@ -146,7 +146,7 @@ public static void beforeTest() throws Exception {
   public void testConnectionRefused() throws MalformedURLException {
     int unusedPort = findUnusedPort(); // XXX even if fwe found an unused port
                                        // it might not be unused anymore
-    HttpSolrServer server = new HttpSolrServer("http://127.0.0.1:" + unusedPort
+    HttpSolrServer server = new HttpSolrServer("http" + (isSSLMode() ? "s" : "") + "://127.0.0.1:" + unusedPort
         + "/solr");
     server.setConnectionTimeout(500);
     SolrQuery q = new SolrQuery("*:*");
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/common/util/URLUtilTest.java b/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/common/util/URLUtilTest.java
index e69de29b..7c98999f 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/common/util/URLUtilTest.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/common/util/URLUtilTest.java
@@ -0,0 +1,38 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.common.util;
+
+import static org.junit.Assert.*;
+
+import org.junit.Test;
+
+public class URLUtilTest {
+  
+  @Test
+  public void test() {
+    assertTrue(URLUtil.hasScheme("http://host:1234/"));
+    assertTrue(URLUtil.hasScheme("https://host/"));
+    assertFalse(URLUtil.hasScheme("host/"));
+    assertFalse(URLUtil.hasScheme("host:8989"));
+    assertEquals("foo/", URLUtil.removeScheme("https://foo/"));
+    assertEquals("foo:8989/", URLUtil.removeScheme("https://foo:8989/"));
+    assertEquals("http://", URLUtil.getScheme("http://host:1928"));
+    assertEquals("https://", URLUtil.getScheme("https://host:1928"));
+  }
+  
+}
diff --git a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java
index 463c2938..da60bfcf 100644
--- a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java
+++ b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java
@@ -36,8 +36,9 @@
 
 import org.apache.commons.io.FileUtils;
 import org.apache.lucene.search.FieldCache;
-import org.apache.lucene.util. _TestUtil;
 import org.apache.lucene.util.Constants;
+import org.apache.lucene.util._TestUtil;
+import org.apache.solr.client.solrj.SolrResponse;
 import org.apache.solr.client.solrj.SolrServer;
 import org.apache.solr.client.solrj.SolrServerException;
 import org.apache.solr.client.solrj.embedded.JettySolrRunner;
@@ -45,7 +46,6 @@
 import org.apache.solr.client.solrj.request.UpdateRequest;
 import org.apache.solr.client.solrj.response.QueryResponse;
 import org.apache.solr.client.solrj.response.UpdateResponse;
-import org.apache.solr.client.solrj.SolrResponse;
 import org.apache.solr.common.SolrDocument;
 import org.apache.solr.common.SolrDocumentList;
 import org.apache.solr.common.SolrInputDocument;
@@ -55,8 +55,8 @@
 import org.apache.solr.schema.TrieDateField;
 import org.apache.solr.util.AbstractSolrTestCase;
 import org.eclipse.jetty.servlet.ServletHolder;
-import org.junit.BeforeClass;
 import org.junit.AfterClass;
+import org.junit.BeforeClass;
 import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -369,7 +369,7 @@ public JettySolrRunner createJetty(File solrHome, String dataDir, String shardLi
     boolean stopAtShutdown = true;
     JettySolrRunner jetty = new JettySolrRunner
         (solrHome.getAbsolutePath(), context, 0, solrConfigOverride, schemaOverride, stopAtShutdown,
-          getExtraServlets(), null, getExtraRequestFilters());
+          getExtraServlets(), sslConfig, getExtraRequestFilters());
     jetty.setShards(shardList);
     jetty.setDataDir(dataDir);
     if (explicitCoreNodeName) {
@@ -393,7 +393,8 @@ public JettySolrRunner createJetty(File solrHome, String dataDir, String shardLi
   protected SolrServer createNewSolrServer(int port) {
     try {
       // setup the server...
-      String url = "http://127.0.0.1:" + port + context;
+      String urlScheme = isSSLMode() ? "https" : "http";
+      String url = urlScheme + "://127.0.0.1:" + port + context;
       HttpSolrServer s = new HttpSolrServer(url);
       s.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
       s.setSoTimeout(60000);
@@ -931,4 +932,5 @@ protected void setupJettySolrHome(File jettyHome) throws IOException {
       FileUtils.copyFile(new File(getSolrHome(), solrxml), new File(jettyHome, "solr.xml"));
     }
   }
+
 }
diff --git a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase.java b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase.java
index 996ed550..b043f08a 100644
--- a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase.java
+++ b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase.java
@@ -38,47 +38,10 @@
 {
   private static Logger log = LoggerFactory.getLogger(SolrJettyTestBase.class);
 
-  private static File TEST_KEYSTORE;
-  static {
-    TEST_KEYSTORE = (null == ExternalPaths.SOURCE_HOME)
-      ? null : new File(ExternalPaths.SOURCE_HOME, "example/etc/solrtest.keystore");
-  }
-
-  private static void initSSLConfig(SSLConfig sslConfig, String keystorePath) {
-    sslConfig.useSsl = false;
-    sslConfig.clientAuth = false;
-    sslConfig.keyStore = keystorePath;
-    sslConfig.keyStorePassword = "secret";
-    sslConfig.trustStore = keystorePath;
-    sslConfig.trustStorePassword = "secret";
-  }
-
-  /**
-   * Returns the File object for the example keystore used when this baseclass randomly 
-   * uses SSL.  May be null ifthis test does not appear to be running as part of the 
-   * standard solr distribution and does not have access to the example configs.
-   *
-   * @lucene.internal 
-   */
-  protected static File getExampleKeystoreFile() {
-    return TEST_KEYSTORE;
-  }
 
   @BeforeClass
   public static void beforeSolrJettyTestBase() throws Exception {
 
-
-    
-    // only randomize SSL if we are a solr test with access to the example keystore
-    if (null == getExampleKeystoreFile()) {
-      log.info("Solr's example keystore not defined (not a solr test?) skipping SSL randomization");
-      return;
-    }
-
-    assertTrue("test keystore does not exist, randomized ssl testing broken: " +
-               getExampleKeystoreFile().getAbsolutePath(), 
-               getExampleKeystoreFile().exists() );
-
   }
 
   public static JettySolrRunner jetty;
@@ -86,25 +49,6 @@ public static void beforeSolrJettyTestBase() throws Exception {
   public static SolrServer server = null;
   public static String context;
   
-  public static SSLConfig getSSLConfig() {
-    SSLConfig sslConfig = new SSLConfig();
-    
-    final boolean trySsl = random().nextBoolean();
-    final boolean trySslClientAuth = random().nextBoolean();
-    
-    log.info("Randomized ssl ({}) and clientAuth ({})", trySsl,
-        trySslClientAuth);
-    String keystorePath = null == TEST_KEYSTORE ? null : TEST_KEYSTORE
-        .getAbsolutePath();
-    initSSLConfig(sslConfig, keystorePath);
-    
-    sslConfig.useSsl = trySsl;
-    sslConfig.clientAuth = trySslClientAuth;
-    
-    initSSLConfig(sslConfig, keystorePath);
-    return sslConfig;
-  }
-
   public static JettySolrRunner createJetty(String solrHome, String configFile, String schemaFile, String context,
                                             boolean stopAtShutdown, SortedMap<ServletHolder,String> extraServlets) 
       throws Exception { 
@@ -118,7 +62,7 @@ public static JettySolrRunner createJetty(String solrHome, String configFile, St
 
     context = context==null ? "/solr" : context;
     SolrJettyTestBase.context = context;
-    jetty = new JettySolrRunner(solrHome, context, 0, configFile, schemaFile, stopAtShutdown, extraServlets, getSSLConfig());
+    jetty = new JettySolrRunner(solrHome, context, 0, configFile, schemaFile, stopAtShutdown, extraServlets, sslConfig);
 
     jetty.start();
     port = jetty.getLocalPort();
diff --git a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java
index 8c661e8f..a733591f 100644
--- a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java
+++ b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java
@@ -22,6 +22,10 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.StringWriter;
+import java.security.KeyManagementException;
+import java.security.KeyStoreException;
+import java.security.NoSuchAlgorithmException;
+import java.security.UnrecoverableKeyException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Comparator;
@@ -40,12 +44,20 @@
 
 import org.apache.commons.codec.Charsets;
 import org.apache.commons.io.FileUtils;
+import org.apache.http.conn.scheme.Scheme;
+import org.apache.http.conn.scheme.SchemeRegistry;
+import org.apache.http.conn.ssl.SSLSocketFactory;
+import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
+import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.index.IndexWriterConfig;
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.QuickPatchThreadsFilter;
 import org.apache.lucene.util._TestUtil;
+import org.apache.solr.client.solrj.embedded.JettySolrRunner.SSLConfig;
+import org.apache.solr.client.solrj.impl.HttpClientConfigurer;
+import org.apache.solr.client.solrj.impl.HttpClientUtil;
 import org.apache.solr.client.solrj.util.ClientUtils;
 import org.apache.solr.cloud.IpTables;
 import org.apache.solr.common.SolrDocument;
@@ -74,6 +86,7 @@
 import org.apache.solr.search.SolrIndexSearcher;
 import org.apache.solr.servlet.DirectSolrConnection;
 import org.apache.solr.util.AbstractSolrTestCase;
+import org.apache.solr.util.ExternalPaths;
 import org.apache.solr.util.RevertDefaultThreadHandlerRule;
 import org.apache.solr.util.TestHarness;
 import org.junit.AfterClass;
@@ -107,6 +120,7 @@
   private static String coreName = ConfigSolrXmlOld.DEFAULT_DEFAULT_CORE_NAME;
   public static int DEFAULT_CONNECTION_TIMEOUT = 30000;  // default socket connection timeout in ms
 
+  protected static volatile SSLConfig sslConfig = new SSLConfig();
 
   @ClassRule
   public static TestRule solrClassRules = 
@@ -129,6 +143,37 @@ private static void beforeClass() {
     startTrackingZkClients();
     ignoreException("ignore_exception");
     newRandomConfig();
+    sslConfig = getSSLConfig();
+    
+    
+    if(sslConfig != null && sslConfig.useSsl) {
+      // SolrCloud tests should usually clear this
+      System.setProperty("urlScheme", "https");
+      
+      // Turn off two-way SSL since it isn't configured below...
+      sslConfig.clientAuth = false;
+      HttpClientUtil.setConfigurer(new HttpClientConfigurer(){
+        @SuppressWarnings("deprecation")
+        protected void configure(DefaultHttpClient httpClient, SolrParams config) {
+          super.configure(httpClient, config);
+          SchemeRegistry registry = httpClient.getConnectionManager().getSchemeRegistry();
+          // Make sure no tests cheat by using HTTP
+          registry.unregister("http");
+          try {
+            // Don't complain that we are using self-signed certs during the test
+            registry.register(new Scheme("https", 443, new SSLSocketFactory(new TrustSelfSignedStrategy())));
+          } catch (KeyManagementException ex) {
+            throw new IllegalStateException("Unable to setup https scheme for HTTPClient to test SSL.", ex);
+          } catch (UnrecoverableKeyException ex) {
+            throw new IllegalStateException("Unable to setup https scheme for HTTPClient to test SSL.", ex);
+          } catch (NoSuchAlgorithmException ex) {
+            throw new IllegalStateException("Unable to setup https scheme for HTTPClient to test SSL.", ex);
+          } catch (KeyStoreException ex) {
+            throw new IllegalStateException("Unable to setup https scheme for HTTPClient to test SSL.", ex);
+          }
+        }
+      });
+    }
   }
 
   @AfterClass
@@ -144,10 +189,45 @@ private static void afterClass() throws Exception {
     System.clearProperty("tests.shardhandler.randomSeed");
     System.clearProperty("enable.update.log");
     System.clearProperty("useCompoundFile");
+    System.clearProperty("urlScheme");
+    
+    if(sslConfig != null && sslConfig.useSsl) {
+      HttpClientUtil.setConfigurer(new HttpClientConfigurer());
+    }
     
     IpTables.unblockAllPorts();
   }
 
+  private static File TEST_KEYSTORE;
+  static {
+    TEST_KEYSTORE = (null == ExternalPaths.SOURCE_HOME)
+      ? null : new File(ExternalPaths.SOURCE_HOME, "example/etc/solrtest.keystore");
+  }
+  
+  protected boolean isSSLMode() {
+    return sslConfig != null && sslConfig.useSsl;
+  }
+
+  private static void initSSLConfig(SSLConfig sslConfig, String keystorePath) {
+    sslConfig.useSsl = false;
+    sslConfig.clientAuth = false;
+    sslConfig.keyStore = keystorePath;
+    sslConfig.keyStorePassword = "secret";
+    sslConfig.trustStore = keystorePath;
+    sslConfig.trustStorePassword = "secret";
+  }
+
+  /**
+   * Returns the File object for the example keystore used when this baseclass randomly 
+   * uses SSL.  May be null ifthis test does not appear to be running as part of the 
+   * standard solr distribution and does not have access to the example configs.
+   *
+   * @lucene.internal 
+   */
+  protected static File getExampleKeystoreFile() {
+    return TEST_KEYSTORE;
+  }
+
   private static boolean changedFactory = false;
   private static String savedFactory;
   /** Use a different directory factory.  Passing "null" sets to an FS-based factory */
@@ -174,6 +254,40 @@ public static void resetFactory() throws Exception {
     }
   }
 
+  private static SSLConfig getSSLConfig() {
+    // test has disabled
+    if (sslConfig == null) {
+      SSLConfig sslConfig = new SSLConfig();
+      return sslConfig;
+    }
+    
+    // only randomize SSL if we are a solr test with access to the example keystore
+    if (null == getExampleKeystoreFile()) {
+      log.info("Solr's example keystore not defined (not a solr test?) skipping SSL randomization");
+      return null;
+    }
+
+    assertTrue("test keystore does not exist, randomized ssl testing broken: " +
+               getExampleKeystoreFile().getAbsolutePath(), 
+               getExampleKeystoreFile().exists() );
+    
+    SSLConfig sslConfig = new SSLConfig();
+    
+    final boolean trySsl = random().nextBoolean();
+    final boolean trySslClientAuth = false; // TODO: random().nextBoolean();
+    
+    log.info("Randomized ssl ({}) and clientAuth ({})", trySsl,
+        trySslClientAuth);
+    String keystorePath = null == TEST_KEYSTORE ? null : TEST_KEYSTORE
+        .getAbsolutePath();
+    initSSLConfig(sslConfig, keystorePath);
+    
+    sslConfig.useSsl = trySsl;
+    sslConfig.clientAuth = trySslClientAuth;
+    
+    return sslConfig;
+  }
+
   /**
    * Call this from @BeforeClass to set up the test harness and update handler with no cores.
    *
diff --git a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
index 5a8c3e8d..3e35442d 100644
--- a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
+++ b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
@@ -28,6 +28,7 @@
 import java.net.MalformedURLException;
 import java.net.URI;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -40,11 +41,13 @@
 import org.apache.commons.io.FilenameUtils;
 import org.apache.http.params.CoreConnectionPNames;
 import org.apache.lucene.util.LuceneTestCase.Slow;
+import org.apache.solr.SolrJettyTestBase;
 import org.apache.solr.client.solrj.SolrQuery;
 import org.apache.solr.client.solrj.SolrRequest;
 import org.apache.solr.client.solrj.SolrServer;
 import org.apache.solr.client.solrj.SolrServerException;
 import org.apache.solr.client.solrj.embedded.JettySolrRunner;
+import org.apache.solr.client.solrj.embedded.JettySolrRunner.SSLConfig;
 import org.apache.solr.client.solrj.impl.CloudSolrServer;
 import org.apache.solr.client.solrj.impl.HttpSolrServer;
 import org.apache.solr.client.solrj.request.QueryRequest;
@@ -70,6 +73,7 @@
 import org.apache.solr.core.SolrResourceLoader;
 import org.apache.solr.servlet.SolrDispatchFilter;
 import org.apache.solr.update.DirectUpdateHandler2;
+import org.apache.zookeeper.CreateMode;
 import org.junit.After;
 import org.junit.AfterClass;
 import org.junit.Before;
@@ -202,6 +206,19 @@ public void setUp() throws Exception {
     } else {
       System.clearProperty("numShards");
     }
+    
+    if (isSSLMode()) {
+      System.clearProperty("urlScheme");
+      ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),
+          AbstractZkTestCase.TIMEOUT, AbstractZkTestCase.TIMEOUT);
+      try {
+        zkStateReader.getZkClient().create(ZkStateReader.CLUSTER_PROPS,
+          ZkStateReader.toJSON(Collections.singletonMap("urlScheme","https")), 
+          CreateMode.PERSISTENT, true);
+      } finally {
+        zkStateReader.close();
+      }
+    }
   }
   
   @BeforeClass
@@ -454,7 +471,7 @@ public JettySolrRunner createJetty(String dataDir, String ulogDir, String shardL
       String solrConfigOverride) throws Exception {
     
     JettySolrRunner jetty = new JettySolrRunner(getSolrHome(), context, 0,
-        solrConfigOverride, null, false, getExtraServlets(), null, getExtraRequestFilters());
+        solrConfigOverride, null, false, getExtraServlets(), sslConfig, getExtraRequestFilters());
     jetty.setShards(shardList);
     jetty.setDataDir(getDataDir(dataDir));
     jetty.start();
@@ -468,7 +485,7 @@ public JettySolrRunner createJetty(File solrHome, String dataDir, String shardLi
       solrHome = getRelativeSolrHomePath(solrHome);
     }
     
-    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), context, 0, solrConfigOverride, schemaOverride, false, getExtraServlets(), null, getExtraRequestFilters());
+    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), context, 0, solrConfigOverride, schemaOverride, false, getExtraServlets(), sslConfig, getExtraRequestFilters());
     jetty.setShards(shardList);
     jetty.setDataDir(getDataDir(dataDir));
     jetty.start();
@@ -1659,7 +1676,8 @@ protected void createCollection(Map<String,List<Integer>> collectionInfos,
   protected SolrServer createNewSolrServer(int port) {
     try {
       // setup the server...
-      String url = "http://127.0.0.1:" + port + context + 
+      String urlScheme = isSSLMode() ? "https" : "http";
+      String url = urlScheme + "://127.0.0.1:" + port + context + 
         (context.endsWith("/") ? "" : "/") + DEFAULT_COLLECTION;
       HttpSolrServer s = new HttpSolrServer(url);
       s.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
@@ -1773,6 +1791,7 @@ protected CloudSolrServer getCommonCloudSolrServer() {
     }
     return commondCloudSolrServer;
   }
+  
   public static String getUrlFromZk(ClusterState clusterState, String collection) {
     Map<String,Slice> slices = clusterState.getCollection(collection).getSlicesMap();
 
diff --git a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/util/RestTestBase.java b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/util/RestTestBase.java
index ec60d59e..4aacccb0 100644
--- a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/util/RestTestBase.java
+++ b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/util/RestTestBase.java
@@ -29,19 +29,18 @@
 import org.apache.solr.common.util.StrUtils;
 import org.apache.solr.servlet.SolrRequestParsers;
 import org.eclipse.jetty.servlet.ServletHolder;
+import org.junit.BeforeClass;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.xml.sax.SAXException;
 
-import org.junit.AfterClass;
-
 abstract public class RestTestBase extends SolrJettyTestBase {
   private static final Logger log = LoggerFactory.getLogger(RestTestBase.class);
   protected static RestTestHarness restTestHarness;
 
-  @AfterClass
-  public static void cleanUpHarness() {
-    restTestHarness = null;
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+    // sslConfig = null;
   }
 
   public static void createJettyAndHarness
diff --git a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/util/RestTestHarness.java b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/util/RestTestHarness.java
index 8d293c3d..42207cb6 100644
--- a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/util/RestTestHarness.java
+++ b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/util/RestTestHarness.java
@@ -16,23 +16,30 @@
  * limitations under the License.
  */
 
-import org.apache.commons.io.IOUtils;
-
-import javax.xml.xpath.XPathExpressionException;
 import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStreamWriter;
-import java.io.StringWriter;
-import java.net.HttpURLConnection;
-import java.net.URL;
 import java.net.URLEncoder;
 
+import javax.xml.xpath.XPathExpressionException;
+
+import org.apache.http.HttpEntity;
+import org.apache.http.client.HttpClient;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.client.methods.HttpPut;
+import org.apache.http.client.methods.HttpUriRequest;
+import org.apache.http.entity.ContentType;
+import org.apache.http.entity.StringEntity;
+import org.apache.http.util.EntityUtils;
+import org.apache.solr.client.solrj.impl.HttpClientUtil;
+import org.apache.solr.common.params.ModifiableSolrParams;
+
 /**
  * Facilitates testing Solr's REST API via a provided embedded Jetty
  */
 public class RestTestHarness extends BaseTestHarness {
   private RESTfulServerProvider serverProvider;
+  private HttpClient httpClient = HttpClientUtil.createClient(new
+      ModifiableSolrParams());
   
   public RestTestHarness(RESTfulServerProvider serverProvider) {
     this.serverProvider = serverProvider;
@@ -83,22 +90,7 @@ public String validatePut(String request, String content, String... tests) throw
    * @exception Exception any exception in the response.
    */
   public String query(String request) throws Exception {
-    URL url = new URL(getBaseURL() + request);
-    HttpURLConnection connection = (HttpURLConnection)url.openConnection();
-    InputStream inputStream = null;
-    StringWriter strWriter;
-    try {
-      try {
-        inputStream = connection.getInputStream();
-      } catch (IOException e) {
-        inputStream = connection.getErrorStream();
-      }
-      strWriter = new StringWriter();
-      IOUtils.copy(new InputStreamReader(inputStream, "UTF-8"), strWriter);
-    } finally {
-      IOUtils.closeQuietly(inputStream);
-    }
-    return strWriter.toString();
+    return getResponse(new HttpGet(getBaseURL() + request));
   }
 
   /**
@@ -110,27 +102,11 @@ public String query(String request) throws Exception {
    * @return The response to the PUT request
    */
   public String put(String request, String content) throws IOException {
-    URL url = new URL(getBaseURL() + request);
-    HttpURLConnection connection = (HttpURLConnection)url.openConnection();
-    connection.setDoOutput(true);
-    connection.setRequestMethod("PUT");
-    OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream(), "UTF-8");
-    out.write(content);
-    out.close();
-    InputStream inputStream = null;
-    StringWriter stringWriter;
-    try {
-      try {
-        inputStream = connection.getInputStream();
-      } catch (IOException e) {
-        inputStream = connection.getErrorStream();
-      }
-      stringWriter = new StringWriter();
-      IOUtils.copy(new InputStreamReader(inputStream, "UTF-8"), stringWriter);
-    } finally {
-      IOUtils.closeQuietly(inputStream);
-    }
-    return stringWriter.toString();
+    HttpPut httpPut = new HttpPut(getBaseURL() + request);
+    httpPut.setEntity(new StringEntity(content, ContentType.create(
+        "application/json", "utf-8")));
+    
+    return getResponse(httpPut);
   }
 
   /**
@@ -142,29 +118,11 @@ public String put(String request, String content) throws IOException {
    * @return The response to the PUT request
    */
   public String post(String request, String content) throws IOException {
-    URL url = new URL(getBaseURL() + request);
-    HttpURLConnection connection = (HttpURLConnection)url.openConnection();
-    connection.setDoOutput(true);
-    connection.setRequestMethod("POST");
-    connection.setRequestProperty("Content-Type", "application/json; charset=utf-8");
-
-    OutputStreamWriter out = new OutputStreamWriter(connection.getOutputStream(), "UTF-8");
-    out.write(content);
-    out.close();
-    InputStream inputStream = null;
-    StringWriter stringWriter;
-    try {
-      try {
-        inputStream = connection.getInputStream();
-      } catch (IOException e) {
-        inputStream = connection.getErrorStream();
-      }
-      stringWriter = new StringWriter();
-      IOUtils.copy(new InputStreamReader(inputStream, "UTF-8"), stringWriter);
-    } finally {
-      IOUtils.closeQuietly(inputStream);
-    }
-    return stringWriter.toString();
+    HttpPost httpPost = new HttpPost(getBaseURL() + request);
+    httpPost.setEntity(new StringEntity(content, ContentType.create(
+        "application/json", "utf-8")));
+    
+    return getResponse(httpPost);
   }
 
 
@@ -202,4 +160,14 @@ public String update(String xml) {
       throw new RuntimeException(e);
     }
   }
+  
+  private String getResponse(HttpUriRequest request) throws IOException {
+    HttpEntity entity = null;
+    try {
+      entity = httpClient.execute(request).getEntity();
+      return EntityUtils.toString(entity, "UTF-8");
+    } finally {
+      EntityUtils.consumeQuietly(entity);
+    }
+  }
 }
