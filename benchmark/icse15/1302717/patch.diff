diff --git a/lucene/dev/branches/branch_3x/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java b/lucene/dev/branches/branch_3x/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
index bd88524d..c30bd86c 100644
--- a/lucene/dev/branches/branch_3x/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
+++ b/lucene/dev/branches/branch_3x/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
@@ -512,7 +512,6 @@ private void sortFields() {
   public String toString() {
     StringBuilder result = new StringBuilder(256);    
     sortFields();   
-    int sumChars = 0;
     int sumPositions = 0;
     int sumTerms = 0;
     
@@ -523,7 +522,6 @@ public String toString() {
       info.sortTerms();
       result.append(fieldName + ":\n");
       
-      int numChars = 0;
       int numPositions = 0;
       for (int j=0; j < info.sortedTerms.length; j++) {
         Map.Entry<String,ArrayIntList> e = info.sortedTerms[j];
@@ -533,22 +531,20 @@ public String toString() {
         result.append(positions.toString(stride)); // ignore offsets
         result.append("\n");
         numPositions += numPositions(positions);
-        numChars += term.length();
       }
       
       result.append("\tterms=" + info.sortedTerms.length);
       result.append(", positions=" + numPositions);
-      result.append(", Kchars=" + (numChars/1000.0f));
+      result.append(", memory=" + RamUsageEstimator.humanReadableUnits(RamUsageEstimator.sizeOf(info)));
       result.append("\n");
       sumPositions += numPositions;
-      sumChars += numChars;
       sumTerms += info.sortedTerms.length;
     }
     
     result.append("\nfields=" + sortedFields.length);
     result.append(", terms=" + sumTerms);
     result.append(", positions=" + sumPositions);
-    result.append(", Kchars=" + (sumChars/1000.0f));
+    result.append(", memory=" + RamUsageEstimator.humanReadableUnits(getMemorySize()));
     return result.toString();
   }
   
diff --git a/lucene/dev/branches/branch_3x/lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java b/lucene/dev/branches/branch_3x/lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
index ff714093..bb3ccd96 100644
--- a/lucene/dev/branches/branch_3x/lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
+++ b/lucene/dev/branches/branch_3x/lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
@@ -45,6 +45,8 @@
 import org.apache.lucene.search.spans.SpanOrQuery;
 import org.apache.lucene.search.spans.SpanQuery;
 import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.util.RamUsageEstimator;
 import org.apache.lucene.util._TestUtil;
 
 /**
@@ -111,7 +113,7 @@ public void assertAgainstRAMDirectory() throws Exception {
       termField.append(randomTerm());
     }
     
-    Directory ramdir = newDirectory();
+    Directory ramdir = new RAMDirectory();
     Analyzer analyzer = randomAnalyzer();
     IndexWriter writer = new IndexWriter(ramdir,
                                          new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));
@@ -126,6 +128,16 @@ public void assertAgainstRAMDirectory() throws Exception {
     MemoryIndex memory = new MemoryIndex();
     memory.addField("foo", fooField.toString(), analyzer);
     memory.addField("term", termField.toString(), analyzer);
+    
+    if (VERBOSE) {
+      System.out.println("Random MemoryIndex:\n" + memory.toString());
+      System.out.println("Same index as RAMDirectory: " +
+        RamUsageEstimator.humanReadableUnits(RamUsageEstimator.sizeOf(ramdir)));
+      System.out.println();
+    } else {
+      assertTrue(memory.getMemorySize() > 0L);
+    }
+
     assertAllQueries(memory, ramdir, analyzer);  
     ramdir.close();
   }
