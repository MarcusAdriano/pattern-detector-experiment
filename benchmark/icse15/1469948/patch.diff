diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java
index e2ab51f6..64355dab 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java
@@ -48,7 +48,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
         return (original == null) ? null : (Object[]) original.clone();
     }
 
-    /** Copy an array of strings; the original array could be null */
+    /** Copy a (possibly null) array of strings */
     public  static  String[]    copy( String[] original )
     {
         return (original == null) ? null : (String[]) original.clone();
@@ -60,6 +60,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
         return (original == null) ? null : (boolean[]) original.clone();
     }
 
+    /** Copy a (possibly null) array of bytes */
+    public  static  byte[]   copy( byte[] original )
+    {
+        return (original == null) ? null : (byte[]) original.clone();
+    }
+
     /** Copy a (possibly null) array of ints */
     public  static  int[]   copy( int[] original )
     {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/FormatableBitSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/FormatableBitSet.java
index 5bd27471..85e61b36 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/FormatableBitSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/FormatableBitSet.java
@@ -21,6 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.iapi.services.io;
 
+import org.apache.derby.iapi.services.io.ArrayUtil;
 import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.iapi.util.ReuseFactory;
 
@@ -133,7 +134,7 @@ private void initializeBits(int numBits)
 	 */
 	public FormatableBitSet(byte[] newValue)
 	{
-		value = newValue;
+		value = ArrayUtil.copy( newValue );
 		bitsInLastByte = 8;
 		lengthAsBits = calculateLength(newValue.length);
 	}
@@ -273,7 +274,7 @@ public int size()
 			value = data;
 		}
 
-		return value;
+		return ArrayUtil.copy( value );
 	}
 
 	/**
@@ -746,6 +747,15 @@ public void or(FormatableBitSet otherBit)
 		}
 	}
 
+	/**
+     * Copy the bytes from another FormatableBitSet. Assumes that this bit set
+     * is at least as large as the argument's bit set.
+     */
+    public  void    copyFrom( FormatableBitSet that )
+    {
+        System.arraycopy( that.getByteArray(), 0, value, 0, that.getLengthInBytes());
+    }
+
 	/**
 	 * Bitwise AND this FormatableBitSet with another
 	 * FormatableBitSet. The result is stored in this bitset. The
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java
index b0f52f85..d358b63f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java
@@ -41,14 +41,14 @@ The offset from the base format number (0 based) gives the offset in the array.
         </UL>
 */
 
-public interface RegisteredFormatIds {
+public class RegisteredFormatIds {
 
 /* one byte  format identifiers never used
-String[] OneByte = {
+private static final String[] OneByte = {
 };
 */
 
-String[] TwoByte = {
+private static final    String[] TwoByte = {
         /* 0 */         null, // null marker
         /* 1 */         null, // String marker
         /* 2 */         null, // Serializable marker
@@ -535,4 +535,19 @@ The offset from the base format number (0 based) gives the offset in the array.
         /* 474 */       "org.apache.derby.catalog.types.UDTAliasInfo",
         /* 475 */       "org.apache.derby.catalog.types.AggregateAliasInfo",
 };
+
+    /** Return the number of two-byte format ids */
+    public  static  int countTwoByteIDs() { return TwoByte.length; }
+
+    /** Return the class name bound to an index into TwoByte */
+    public  static  String  classNameForTwoByteID( int idx ) { return TwoByte[ idx ]; }
+
+    /**
+     * Set the class name associated with the DECIMAL datatype. When we
+     * stop supporting CDC, we can remove this method.
+     */
+    public  static  void    setDecimalClassName( String decimalClassName )
+    {
+        TwoByte[ StoredFormatIds.SQL_DECIMAL_ID ] = decimalClassName;
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java
index cb5f99d8..09b38d50 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataValueFactoryImpl.java
@@ -102,8 +102,7 @@ public void boot(boolean create, Properties properties) throws StandardException
     		DataValueDescriptor decimalImplementation = getNullDecimal(null);
     		
     		TypeId.decimalImplementation = decimalImplementation;
-    		RegisteredFormatIds.TwoByte[StoredFormatIds.SQL_DECIMAL_ID]
-    									= decimalImplementation.getClass().getName();
+    		RegisteredFormatIds.setDecimalClassName( decimalImplementation.getClass().getName() );
     		    		
     		// Generate a DECIMAL value represetentation of 0
     		decimalImplementation = decimalImplementation.getNewNull();
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
index efc29b53..717fddd8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
@@ -602,14 +602,14 @@ public InstanceGetter classFromIdentifier(int fmtId)
 			off = fmtId - StoredFormatIds.MIN_TWO_BYTE_FORMAT_ID;
 			iga = rc2;
 			if (iga == null) {
-				iga = rc2 = new InstanceGetter[RegisteredFormatIds.TwoByte.length];
+				iga = rc2 = new InstanceGetter[ RegisteredFormatIds.countTwoByteIDs() ];
 			}
 
 			ig = iga[off];
 			if (ig != null) {
 				return ig;
 			}
-			className = RegisteredFormatIds.TwoByte[off];
+			className = RegisteredFormatIds.classNameForTwoByteID( off );
 
 		} catch (ArrayIndexOutOfBoundsException aioobe) {
 			className = null;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java
index 458829fe..0d33c6a0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/depend/BasicDependencyManager.java
@@ -404,9 +404,7 @@ private void coreInvalidateFor(Provider p, int action, LanguageConnectionContext
 
 									if (tab.getObjectID().equals(td.getObjectID()))
 									{
-										System.arraycopy(affectedCols.getByteArray(), 0, 
-											subsetCols.getByteArray(), 0, 
-											affectedCols.getLengthInBytes());
+                                        subsetCols.copyFrom( affectedCols );
 										subsetCols.and(colMap);
 										if (subsetCols.anySetBit() != -1)
 										{
@@ -424,7 +422,7 @@ private void coreInvalidateFor(Provider p, int action, LanguageConnectionContext
 					}	// if providingCols == null
 					else
 					{
-						System.arraycopy(affectedCols.getByteArray(), 0, subsetCols.getByteArray(), 0, affectedCols.getLengthInBytes());
+                        subsetCols.copyFrom( affectedCols );
 						subsetCols.and(providingCols);
 						if (subsetCols.anySetBit() == -1)
 							continue;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
index 3cf4b56f..14cedc37 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
@@ -468,6 +468,40 @@ public static void assertThrowableEquals(Throwable t1,
                      t1.getMessage(), t2.getMessage());
     }
     
+    /**
+     * <p>
+     * Assert the equivalence of two byte arrays.
+     * </p>
+     */
+    public  static  void    assertEquals( byte[] expected, byte[] actual )
+    {
+        if ( assertSameNullness( expected, actual ) ) { return; }
+        
+        assertEquals( expected.length, actual.length );
+        for ( int i = 0; i < expected.length; i++ )
+        {
+            assertEquals( Integer.toString( i ), expected[ i ], actual[ i ] );
+        }
+    }
+
+    /**
+     * Assert that two objects are either both null or neither null.
+     * Returns true if they are null.
+     */
+    public  static  boolean assertSameNullness( Object expected, Object actual )
+    {
+        if ( expected ==  null )
+        {
+            assertNull( actual );
+            return true;
+        }
+        else
+        {
+            assertNotNull( actual );
+            return false;
+        }
+    }
+
     /**
      * <p>
      * Assert the equivalence of two int arrays.
@@ -475,6 +509,8 @@ public static void assertThrowableEquals(Throwable t1,
      */
     public  static  void    assertEquals( int[] expected, int[] actual )
     {
+        if ( assertSameNullness( expected, actual ) ) { return; }
+        
         assertEquals( expected.length, actual.length );
         for ( int i = 0; i < expected.length; i++ )
         {
@@ -489,6 +525,8 @@ public  static  void    assertEquals( int[] expected, int[] actual )
      */
     public  static  void    assertEquals( long[] expected, long[] actual )
     {
+        if ( assertSameNullness( expected, actual ) ) { return; }
+        
         assertEquals( expected.length, actual.length );
         for ( int i = 0; i < expected.length; i++ )
         {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/FormatableBitSetTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/FormatableBitSetTest.java
index 03ab3259..70338d70 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/FormatableBitSetTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/unitTests/junit/FormatableBitSetTest.java
@@ -1,6 +1,6 @@
 /*
 
-   Derby - Class org.apache.derbyTesting.unitTests.junit.FormatableBitSet
+   Derby - Class org.apache.derbyTesting.unitTests.junit.FormatableBitSetTest
 
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
