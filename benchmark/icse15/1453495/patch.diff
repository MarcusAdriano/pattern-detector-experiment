diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceHelper.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceHelper.java
index 64d170ea..102e6c82 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceHelper.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/ResourceHelper.java
@@ -15,17 +15,23 @@
 
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 import org.apache.aries.subsystem.core.archive.TypeAttribute;
 import org.osgi.framework.Constants;
 import org.osgi.framework.FrameworkUtil;
 import org.osgi.framework.InvalidSyntaxException;
 import org.osgi.framework.Version;
+import org.osgi.framework.namespace.AbstractWiringNamespace;
 import org.osgi.framework.namespace.IdentityNamespace;
 import org.osgi.framework.wiring.BundleRevision;
 import org.osgi.resource.Capability;
+import org.osgi.resource.Namespace;
 import org.osgi.resource.Requirement;
 import org.osgi.resource.Resource;
 import org.osgi.service.repository.Repository;
@@ -103,32 +109,73 @@ public static Version getVersionAttribute(Resource resource) {
 	}
 	
 	public static boolean matches(Requirement requirement, Capability capability) {
-//		if (logger.isDebugEnabled())
-//			logger.debug(LOG_ENTRY, "matches", new Object[]{requirement, capability});
-		boolean result = false;
 		if (requirement == null && capability == null)
-			result = true;
+			return true;
 		else if (requirement == null || capability == null) 
-			result = false;
+			return false;
 		else if (!capability.getNamespace().equals(requirement.getNamespace())) 
-			result = false;
+			return false;
 		else {
 			String filterStr = requirement.getDirectives().get(Constants.FILTER_DIRECTIVE);
-			if (filterStr == null)
-				result = true;
-			else {
+			if (filterStr != null) {
 				try {
-					if (FrameworkUtil.createFilter(filterStr).matches(capability.getAttributes()))
-						result = true;
+					if (!FrameworkUtil.createFilter(filterStr).matches(capability.getAttributes()))
+						return false;
 				}
 				catch (InvalidSyntaxException e) {
 					logger.debug("Requirement had invalid filter string: " + requirement, e);
-					result = false;
+					return false;
 				}
 			}
 		}
-		// TODO Check directives.
-//		logger.debug(LOG_EXIT, "matches", result);
-		return result;
+		return matchMandatoryDirective(requirement, capability);
+	}
+	
+	private static final String ATTR = "((?:\\s*[^=><~()]\\s*)+)";
+	private static final String VALUE = "(?:\\\\\\\\|\\\\\\*|\\\\\\(|\\\\\\)|[^\\*()])+";
+	private static final String FINAL = "(?:" + VALUE + ")?";
+	private static final String STAR_VALUE = "(?:" + FINAL + "(?:\\*" + FINAL + ")*)";
+	private static final String ANY = "(?:\\*" + STAR_VALUE + ")";
+	private static final String INITIAL = FINAL;
+	private static final String SUBSTRING = "(?:" + ATTR + "=" + INITIAL + ANY + FINAL + ")";
+	private static final String PRESENT = "(?:" + ATTR + "=\\*)";
+	private static final String LESS_EQ = "(?:<=)";
+	private static final String GREATER_EQ = "(?:>=)";
+	private static final String APPROX = "(?:~=)";
+	private static final String EQUAL = "(?:=)";
+	private static final String FILTER_TYPE = "(?:" + EQUAL + "|" + APPROX + "|" + GREATER_EQ + "|" + LESS_EQ + ")";
+	private static final String SIMPLE = "(?:" + ATTR + FILTER_TYPE + VALUE + ")";
+	private static final String OPERATION = "(?:" + SIMPLE + "|" + PRESENT + "|" + SUBSTRING + ")";
+	
+	private static final Pattern PATTERN = Pattern.compile(OPERATION);
+	
+	private static boolean matchMandatoryDirective(Requirement requirement, Capability capability) {
+		if (!requirement.getNamespace().startsWith("osgi.wiring."))
+			// Mandatory directives only affect osgi.wiring.* namespaces.
+			return true;
+		String mandatoryDirective = capability.getDirectives().get(AbstractWiringNamespace.CAPABILITY_MANDATORY_DIRECTIVE);
+		if (mandatoryDirective == null)
+			// There are no mandatory attributes to check.
+			return true;
+		String filterDirective = requirement.getDirectives().get(Namespace.REQUIREMENT_FILTER_DIRECTIVE);
+		if (filterDirective == null)
+			// The filter specifies none of the mandatory attributes.
+			return false;
+		Set<String> attributeNames = new HashSet<String>();
+		Matcher matcher = PATTERN.matcher(filterDirective);
+		// Collect all of the attribute names from the filter.
+		while (matcher.find())
+			attributeNames.add(matcher.group(1));
+		// Collect all of the mandatory attribute names.
+		for (String s : mandatoryDirective.split(","))
+			// Although all whitespace appears to be significant in a mandatory
+			// directive value according to OSGi syntax (since it must be quoted 
+			// due to commas), we'll anticipate issues here and trim off
+			// whitespace around the commas.
+			if (!attributeNames.contains(s.trim()))
+				// The filter does not specify a mandatory attribute.
+				return false;
+		// The filter specifies all mandatory attributes.
+		return true;
 	}
 }
diff --git a/aries/trunk/subsystem/subsystem-core/src/test/java/org/apache/aries/subsystem/core/internal/ResourceHelperTest.java b/aries/trunk/subsystem/subsystem-core/src/test/java/org/apache/aries/subsystem/core/internal/ResourceHelperTest.java
index e69de29b..1e5d2d36 100644
--- a/aries/trunk/subsystem/subsystem-core/src/test/java/org/apache/aries/subsystem/core/internal/ResourceHelperTest.java
+++ b/aries/trunk/subsystem/subsystem-core/src/test/java/org/apache/aries/subsystem/core/internal/ResourceHelperTest.java
@@ -0,0 +1,121 @@
+package org.apache.aries.subsystem.core.internal;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import org.easymock.EasyMock;
+import org.junit.Test;
+import org.osgi.framework.namespace.PackageNamespace;
+import org.osgi.resource.Capability;
+import org.osgi.resource.Requirement;
+import org.osgi.resource.Resource;
+
+public class ResourceHelperTest {
+	@Test
+	public void testMandatoryDirectiveAbsent() {
+		Capability cap = new BasicCapability.Builder()
+				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
+				.attribute(PackageNamespace.PACKAGE_NAMESPACE, "com.foo")
+				.attribute("a", "b")
+				.attribute("b", "c")
+				.attribute("c", "d")
+				.resource(EasyMock.createNiceMock(Resource.class)).build();
+		Requirement req = new BasicRequirement.Builder()
+				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
+				.directive(PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE,
+						"(&(osgi.wiring.package=com.foo)(a=b)(b=c))")
+				.resource(EasyMock.createNiceMock(Resource.class)).build();
+		assertTrue("Capability should match requirement", ResourceHelper.matches(req, cap));
+	}
+	
+	@Test
+	public void testMandatoryDirectiveAndNullFilterDirective() {
+		Capability cap = new BasicCapability.Builder()
+				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
+				.attribute(PackageNamespace.PACKAGE_NAMESPACE, "com.foo")
+				.attribute("a", "b")
+				.attribute("b", "c")
+				.attribute("c", "d")
+				.directive(PackageNamespace.CAPABILITY_MANDATORY_DIRECTIVE, "b")
+				.resource(EasyMock.createNiceMock(Resource.class)).build();
+		Requirement req = new BasicRequirement.Builder()
+				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
+				.resource(EasyMock.createNiceMock(Resource.class)).build();
+		assertFalse("Capability should not match requirement", ResourceHelper.matches(req, cap));
+	}
+	
+	@Test
+	public void testMandatoryDirectiveCaseSensitive() {
+		Capability cap = new BasicCapability.Builder()
+				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
+				.attribute(PackageNamespace.PACKAGE_NAMESPACE, "com.foo")
+				.attribute("a", "b")
+				.attribute("bAr", "c")
+				.attribute("c", "d")
+				.directive(PackageNamespace.CAPABILITY_MANDATORY_DIRECTIVE, "bAr")
+				.resource(EasyMock.createNiceMock(Resource.class)).build();
+		Requirement req = new BasicRequirement.Builder()
+				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
+				.directive(PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE,
+						"(&(osgi.wiring.package=com.foo)(a=b)(baR=c)(c=d))")
+				.resource(EasyMock.createNiceMock(Resource.class)).build();
+		assertFalse("Capability should not match requirement", ResourceHelper.matches(req, cap));
+	}
+	
+	@Test
+	public void testMandatoryDirectiveExportPackageFail() {
+		Capability cap = new BasicCapability.Builder()
+				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
+				.attribute(PackageNamespace.PACKAGE_NAMESPACE, "com.foo")
+				.attribute("a", "b")
+				.attribute("b", "c")
+				.attribute("c", "d")
+				.directive(PackageNamespace.CAPABILITY_MANDATORY_DIRECTIVE, "a,c")
+				.resource(EasyMock.createNiceMock(Resource.class))
+				.build();
+		Requirement req = new BasicRequirement.Builder()
+				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
+				.directive(PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE,
+						"(&(osgi.wiring.package=com.foo)(a=b)(b=c))")
+				.resource(EasyMock.createNiceMock(Resource.class)).build();
+		assertFalse("Capability should not match requirement", ResourceHelper.matches(req, cap));
+	}
+	
+	@Test
+	public void testMandatoryDirectiveExportPackagePass() {
+		Capability cap = new BasicCapability.Builder()
+				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
+				.attribute(PackageNamespace.PACKAGE_NAMESPACE, "com.foo")
+				.attribute("a", "b")
+				.attribute("b", "c")
+				.attribute("c", "d")
+				.directive(PackageNamespace.CAPABILITY_MANDATORY_DIRECTIVE, "a,c")
+				.resource(EasyMock.createNiceMock(Resource.class))
+				.build();
+		Requirement req = new BasicRequirement.Builder()
+				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
+				.directive(PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE,
+						"(&(osgi.wiring.package=com.foo)(a=b)(c=d))")
+				.resource(EasyMock.createNiceMock(Resource.class)).build();
+		assertTrue("Capability should match requirement", ResourceHelper.matches(req, cap));
+	}
+	
+	@Test
+	public void testMandatoryDirectiveWithWhitespace() {
+		Capability cap = new BasicCapability.Builder()
+				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
+				.attribute(PackageNamespace.PACKAGE_NAMESPACE, "com.foo")
+				.attribute("a", "b")
+				.attribute("b", "c")
+				.attribute("c", "d")
+				.directive(PackageNamespace.CAPABILITY_MANDATORY_DIRECTIVE, "\ra\n, c	")
+				.resource(EasyMock.createNiceMock(Resource.class))
+				.build();
+		Requirement req = new BasicRequirement.Builder()
+				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
+				.directive(PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE,
+						"(&(osgi.wiring.package=com.foo)(a=b)(c=d))")
+				.resource(EasyMock.createNiceMock(Resource.class)).build();
+		assertTrue("Capability should match requirement", ResourceHelper.matches(req, cap));
+	}
+}
