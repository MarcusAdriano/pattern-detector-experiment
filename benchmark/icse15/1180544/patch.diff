diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/df/Bagging.java b/mahout/trunk/core/src/main/java/org/apache/mahout/df/Bagging.java
index e5985712..37eb7b9f 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/df/Bagging.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/df/Bagging.java
@@ -23,6 +23,7 @@
 import org.apache.mahout.df.builder.TreeBuilder;
 import org.apache.mahout.df.callback.PredictionCallback;
 import org.apache.mahout.df.data.Data;
+import org.apache.mahout.df.data.Instance;
 import org.apache.mahout.df.node.Node;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -65,8 +66,9 @@ public Node build(int treeId, Random rng, PredictionCallback callback) {
       log.debug("Oob error estimation");
       for (int index = 0; index < data.size(); index++) {
         if (!sampled[index]) {
-          int prediction = tree.classify(data.get(index));
-          callback.prediction(treeId, index, prediction);
+        	Instance instance = data.get(index);
+          int prediction = tree.classify(instance);
+          callback.prediction(treeId, instance.getId(), prediction);
         }
       }
     }
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/df/mapreduce/partial/Step1Mapper.java b/mahout/trunk/core/src/main/java/org/apache/mahout/df/mapreduce/partial/Step1Mapper.java
index 712edef9..2e98df4d 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/df/mapreduce/partial/Step1Mapper.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/df/mapreduce/partial/Step1Mapper.java
@@ -65,6 +65,9 @@
   /** will contain all instances if this mapper's split */
   private final List<Instance> instances = Lists.newArrayList();
   
+  /** current instance's id */
+  private int id;
+  
   public int getFirstTreeId() {
     return firstTreeId;
   }
@@ -140,7 +143,7 @@ public static int nbTrees(int numMaps, int numTrees, int partition) {
   
   @Override
   protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
-    instances.add(converter.convert((int) key.get(), value.toString()));
+    instances.add(converter.convert(id++, value.toString()));
   }
   
   @Override
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/ga/watchmaker/OutputUtils.java b/mahout/trunk/core/src/main/java/org/apache/mahout/ga/watchmaker/OutputUtils.java
index c937016c..adfe70c1 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/ga/watchmaker/OutputUtils.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/ga/watchmaker/OutputUtils.java
@@ -48,7 +48,7 @@ private OutputUtils() {
   public static Path[] listOutputFiles(FileSystem fs, Path outpath) throws IOException {
     Collection<Path> outpaths = Lists.newArrayList();
     for (FileStatus s : fs.listStatus(outpath, PathFilters.logsCRCFilter())) {
-      if (!s.isDir()) {
+      if (!s.isDir() && !s.getPath().getName().startsWith("_")) {
         outpaths.add(s.getPath());
       }
     }
diff --git a/mahout/trunk/examples/src/main/java/org/apache/mahout/df/BreimanExample.java b/mahout/trunk/examples/src/main/java/org/apache/mahout/df/BreimanExample.java
index 5d4f14c7..af7e3340 100644
--- a/mahout/trunk/examples/src/main/java/org/apache/mahout/df/BreimanExample.java
+++ b/mahout/trunk/examples/src/main/java/org/apache/mahout/df/BreimanExample.java
@@ -99,7 +99,7 @@ private void runIteration(Random rng, Data data, int m, int nbtrees) {
     Data train = data.clone();
     Data test = train.rsplit(rng, (int) (data.size() * 0.1));
     
-    int[] trainLabels = train.extractLabels();
+    int[] labels = data.extractLabels();
     int[] testLabels = test.extractLabels();
     
     DefaultTreeBuilder treeBuilder = new DefaultTreeBuilder();
@@ -107,7 +107,7 @@ private void runIteration(Random rng, Data data, int m, int nbtrees) {
     SequentialBuilder forestBuilder = new SequentialBuilder(rng, treeBuilder, train);
     
     // grow a forest with m = log2(M)+1
-    ForestPredictions errorM = new ForestPredictions(train.size(), nblabels); // oob error when using m =
+    ForestPredictions errorM = new ForestPredictions(data.size(), nblabels); // oob error when using m =
                                                                               // log2(M)+1
     treeBuilder.setM(m);
     
@@ -117,11 +117,11 @@ private void runIteration(Random rng, Data data, int m, int nbtrees) {
     sumTimeM += System.currentTimeMillis() - time;
     numNodesM += forestM.nbNodes();
     
-    double oobM = ErrorEstimate.errorRate(trainLabels, errorM.computePredictions(rng)); // oob error estimate
+    double oobM = ErrorEstimate.errorRate(labels, errorM.computePredictions(rng)); // oob error estimate
                                                                                         // when m = log2(M)+1
     
     // grow a forest with m=1
-    ForestPredictions errorOne = new ForestPredictions(train.size(), nblabels); // oob error when using m = 1
+    ForestPredictions errorOne = new ForestPredictions(data.size(), nblabels); // oob error when using m = 1
     treeBuilder.setM(1);
     
     time = System.currentTimeMillis();
@@ -130,7 +130,7 @@ private void runIteration(Random rng, Data data, int m, int nbtrees) {
     sumTimeOne += System.currentTimeMillis() - time;
     numNodesOne += forestOne.nbNodes();
     
-    double oobOne = ErrorEstimate.errorRate(trainLabels, errorOne.computePredictions(rng)); // oob error
+    double oobOne = ErrorEstimate.errorRate(labels, errorOne.computePredictions(rng)); // oob error
                                                                                             // estimate when m
                                                                                             // = 1
     
