diff --git a/incubator/aries/trunk/jndi/jndi-api/src/main/java/org/osgi/service/jndi/JNDIConstants.java b/incubator/aries/trunk/jndi/jndi-api/src/main/java/org/osgi/service/jndi/JNDIConstants.java
index 8572c66a..3dee980c 100644
--- a/incubator/aries/trunk/jndi/jndi-api/src/main/java/org/osgi/service/jndi/JNDIConstants.java
+++ b/incubator/aries/trunk/jndi/jndi-api/src/main/java/org/osgi/service/jndi/JNDIConstants.java
@@ -1,3 +1,53 @@
   + text/html
   + Date Revision
   + native
+/*
+ * Copyright (c) OSGi Alliance (2009, 2010). All Rights Reserved.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.osgi.service.jndi;
+
+/**
+ * Constants for the JNDI implementation.
+ * 
+ * @version $Revision$
+ * @Immutable
+ */
+public class JNDIConstants {
+	/**
+	 * This service property is set by JNDI Providers that publish URL Context
+	 * Factories as OSGi Services. The value of this property should be the URL
+	 * scheme that is supported by the published service.
+	 */
+	public static final String	JNDI_URLSCHEME		= "osgi.jndi.url.scheme";
+
+	/**
+	 * This service property is set on an OSGi service to provide a name that
+	 * can be used to locate the service other than the service interface name.
+	 */
+	public static final String	JNDI_SERVICENAME	= "osgi.jndi.service.name";
+
+	/**
+	 * This JNDI environment property can be used by a JNDI client to indicate
+	 * the caller's BundleContext. This property can be set and passed to an
+	 * InitialContext constructor. This property is only useful in the
+	 * "traditional" mode of JNDI.
+	 */
+	public static final String	BUNDLE_CONTEXT		= "osgi.service.jndi.bundleContext";
+
+	private JNDIConstants() {
+		// non-instantiable
+	}
+}
diff --git a/incubator/aries/trunk/jndi/jndi-api/src/main/java/org/osgi/service/jndi/JNDIContextManager.java b/incubator/aries/trunk/jndi/jndi-api/src/main/java/org/osgi/service/jndi/JNDIContextManager.java
index ada1bb9a..3be9bb52 100644
--- a/incubator/aries/trunk/jndi/jndi-api/src/main/java/org/osgi/service/jndi/JNDIContextManager.java
+++ b/incubator/aries/trunk/jndi/jndi-api/src/main/java/org/osgi/service/jndi/JNDIContextManager.java
@@ -1,3 +1,81 @@
   + text/plain
   + Date Revision
   + native
+/*
+ * Copyright (c) OSGi Alliance (2009, 2010). All Rights Reserved.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.osgi.service.jndi;
+
+import java.util.Map;
+
+import javax.naming.Context;
+import javax.naming.NamingException;
+import javax.naming.directory.DirContext;
+
+/**
+ * This interface defines the OSGi service interface for the JNDIContextManager.
+ * 
+ * This service provides the ability to create new JNDI Context instances
+ * without relying on the InitialContext constructor.
+ * 
+ * @version $Revision$
+ * @ThreadSafe
+ */
+public interface JNDIContextManager {
+
+	/**
+	 * Creates a new JNDI initial context with the default JNDI environment
+	 * properties.
+	 * 
+	 * @return an instance of javax.naming.Context
+	 * @throws NamingException upon any error that occurs during context
+	 *         creation
+	 */
+	public Context newInitialContext() throws NamingException;
+
+	/**
+	 * Creates a new JNDI initial context with the specified JNDI environment
+	 * properties.
+	 * 
+	 * @param environment JNDI environment properties specified by caller
+	 * @return an instance of javax.naming.Context
+	 * @throws NamingException upon any error that occurs during context
+	 *         creation
+	 */
+	public Context newInitialContext(Map environment) throws NamingException;
+
+	/**
+	 * Creates a new initial DirContext with the default JNDI environment
+	 * properties.
+	 * 
+	 * @return an instance of javax.naming.directory.DirContext
+	 * @throws NamingException upon any error that occurs during context
+	 *         creation
+	 */
+	public DirContext newInitialDirContext() throws NamingException;
+
+	/**
+	 * Creates a new initial DirContext with the specified JNDI environment
+	 * properties.
+	 * 
+	 * @param environment JNDI environment properties specified by the caller
+	 * @return an instance of javax.naming.directory.DirContext
+	 * @throws NamingException upon any error that occurs during context
+	 *         creation
+	 */
+	public DirContext newInitialDirContext(Map environment)
+			throws NamingException;
+}
diff --git a/incubator/aries/trunk/jndi/jndi-api/src/main/java/org/osgi/service/jndi/JNDIProviderAdmin.java b/incubator/aries/trunk/jndi/jndi-api/src/main/java/org/osgi/service/jndi/JNDIProviderAdmin.java
index e69de29b..fc8bb6b3 100644
--- a/incubator/aries/trunk/jndi/jndi-api/src/main/java/org/osgi/service/jndi/JNDIProviderAdmin.java
+++ b/incubator/aries/trunk/jndi/jndi-api/src/main/java/org/osgi/service/jndi/JNDIProviderAdmin.java
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) OSGi Alliance (2009, 2010). All Rights Reserved.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.osgi.service.jndi;
+
+import java.util.Map;
+
+import javax.naming.Context;
+import javax.naming.Name;
+import javax.naming.directory.Attributes;
+
+/**
+ * This interface defines the OSGi service interface for the JNDIProviderAdmin
+ * service.
+ * 
+ * This service provides the ability to resolve JNDI References in a dynamic
+ * fashion that does not require calls to
+ * <code>NamingManager.getObjectInstance()</code>. The methods of this service
+ * provide similar reference resolution, but rely on the OSGi Service Registry
+ * in order to find <code>ObjectFactory</code> instances that can convert a
+ * Reference to an Object.
+ * 
+ * This service will typically be used by OSGi-aware JNDI Service Providers.
+ * 
+ * @version $Revision$
+ * @ThreadSafe
+ */
+public interface JNDIProviderAdmin {
+
+	/**
+	 * Resolve the object from the given reference.
+	 * 
+	 * @param refInfo Reference info
+	 * @param name the JNDI name associated with this reference
+	 * @param context the JNDI context associated with this reference
+	 * @param environment the JNDI environment associated with this JNDI context
+	 * @return an Object based on the reference passed in, or the original
+	 *         reference object if the reference could not be resolved.
+	 * @throws Exception in the event that an error occurs while attempting to
+	 *         resolve the JNDI reference.
+	 */
+	public Object getObjectInstance(Object refInfo, Name name, Context context,
+			Map environment) throws Exception;
+
+	/**
+	 * Resolve the object from the given reference.
+	 * 
+	 * @param refInfo Reference info
+	 * @param name the JNDI name associated with this reference
+	 * @param context the JNDI context associated with this reference
+	 * @param environment the JNDI environment associated with this JNDI context
+	 * @param attributes the naming attributes to use when resolving this object
+	 * @return an Object based on the reference passed in, or the original
+	 *         reference object if the reference could not be resolved.
+	 * @throws Exception in the event that an error occurs while attempting to
+	 *         resolve the JNDI reference.
+	 */
+	public Object getObjectInstance(Object refInfo, Name name, Context context,
+			Map environment, Attributes attributes) throws Exception;
+}
diff --git a/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java b/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
index 7fac4e58..ede34dc8 100644
--- a/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
+++ b/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
@@ -30,6 +30,7 @@
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.InvalidSyntaxException;
 import org.osgi.framework.ServiceReference;
+import org.osgi.service.jndi.JNDIConstants;
 
 /**
  * Provides helper methods for the DelegateContext. This provides the methods so
@@ -208,7 +209,7 @@ public static Context createURLContext(String urlScheme, Hashtable<?, ?> env)
 
     try {
       ServiceReference[] services = context.getServiceReferences(ObjectFactory.class.getName(),
-          "(|(osgi.jndi.urlScheme=" + urlScheme + ")(urlScheme=" + urlScheme + "))");
+                                                                 "(" + JNDIConstants.JNDI_URLSCHEME + "=" + urlScheme + ")");
 
       if (services != null) {
         ref = services[0];
diff --git a/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/DelegateContextFactory.java b/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/DelegateContextFactory.java
index 0e3a48f4..e69de29b 100644
--- a/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/DelegateContextFactory.java
+++ b/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/DelegateContextFactory.java
@@ -1,28 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.aries.jndi;
-
-import java.util.Hashtable;
-
-import javax.naming.Context;
-import javax.naming.NamingException;
-
-public interface DelegateContextFactory {
-  public Context getInitialContext(Hashtable<?, ?> envmt) throws NamingException;
-}
diff --git a/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiInitialContextFactoryBuilder.java b/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiInitialContextFactoryBuilder.java
index 4aa5ba16..55ef9eb9 100644
--- a/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiInitialContextFactoryBuilder.java
+++ b/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/OSGiInitialContextFactoryBuilder.java
@@ -18,57 +18,136 @@
  */
 package org.apache.aries.jndi;
 
+import java.util.Arrays;
 import java.util.Hashtable;
 
 import javax.naming.Context;
 import javax.naming.NamingException;
+import javax.naming.NoInitialContextException;
 import javax.naming.spi.InitialContextFactory;
 import javax.naming.spi.InitialContextFactoryBuilder;
 
 import org.osgi.framework.BundleContext;
+import org.osgi.framework.InvalidSyntaxException;
 import org.osgi.framework.ServiceReference;
 
+public class OSGiInitialContextFactoryBuilder implements InitialContextFactoryBuilder, InitialContextFactory {
 
-public class OSGiInitialContextFactoryBuilder implements InitialContextFactoryBuilder,
-  InitialContextFactory
-{
 	private BundleContext _context;
 	
-	public OSGiInitialContextFactoryBuilder(BundleContext context)
-	{
+	public OSGiInitialContextFactoryBuilder(BundleContext context) {	
 		_context = context;
 	}
 	
   public InitialContextFactory createInitialContextFactory(Hashtable<?, ?> environment)
-      throws NamingException
-  {
+	    throws NamingException {
     return this;
   }
-  public Context getInitialContext(Hashtable<?, ?> environment) throws NamingException
-  {
-  	Context toReturn = null;
   	
-  	ServiceReference ref = _context.getServiceReference(DelegateContextFactory.class.getName());
+	public Context getInitialContext(Hashtable<?, ?> environment) 
+	    throws NamingException {
   	
-  	//TODO: is the custom interface DelegateContextFactory the right way to go about things
-  	//  or is there a more generic way in RFC 142
-  	if (ref != null) {
+	    // TODO: use caller's bundle context
+	    
+	    Context initialContext = null;
+	    
+	    String contextFactoryClass = (String) environment.get(Context.INITIAL_CONTEXT_FACTORY);
+	    if (contextFactoryClass == null) {
+	        // 1. get ContextFactory using builder
+	        initialContext = getInitialContextUsingBuilder(_context, environment);
+	        
+	        // 2. lookup all ContextFactory services
+	        if (initialContext == null) {
+	            String filter = "(&(objectClass=javax.naming.spi.InitialContextFactory))";
+	            ServiceReference[] references = null;
+	            try {
+	                references = _context.getAllServiceReferences(InitialContextFactory.class.getName(), filter);
+	            } catch (InvalidSyntaxException e) {
+	                NamingException ex = new NamingException("Bad filter: " + filter);
+	                ex.initCause(e);    
+	                throw ex;
+	            }
+	            if (references != null) {
+	                for (int i = 0; i < references.length && initialContext == null; i++) {
+	                    ServiceReference reference = references[i];	                    
+	                    InitialContextFactory factory = (InitialContextFactory) _context.getService(reference);
+	                    try {
+	                        initialContext = factory.getInitialContext(environment);
+	                    } finally {	                  
+	                        _context.ungetService(reference);
+	                    }
+	                }
+	            }
+	        }
+	        
+	        if (initialContext == null) {
+	            // TODO: only url based lookups are allowed
+	            return new DelegateContext(environment);
+	        } else {
+	            return new DelegateContext(initialContext);
+	        }
+	    } else {
+	        // 1. lookup ContextFactory using the factory class
+	        String filter = "(&(objectClass=javax.naming.spi.InitialContextFactory)(objectClass=" + contextFactoryClass + "))";
+	        ServiceReference[] references = null;
+	        try {
+	            references = _context.getServiceReferences(InitialContextFactory.class.getName(), filter);
+	        } catch (InvalidSyntaxException e) {
+	            NamingException ex = new NamingException("Bad filter: " + filter);
+	            ex.initCause(e);    
+	            throw ex;
+	        }
+	        
+	        if (references != null && references.length > 0) {
+	            Arrays.sort(references);
+	            ServiceReference factoryReference = references[0];
+	            InitialContextFactory factory = (InitialContextFactory)_context.getService(factoryReference);
   	  try {
-    		DelegateContextFactory dcf = (DelegateContextFactory) _context.getService(ref);
+	                initialContext = factory.getInitialContext(environment);
+	            } finally {
+	                _context.ungetService(factoryReference);
+	            }
+	        }	        
     		
-    		if (dcf != null) {
-    			toReturn = dcf.getInitialContext(environment);
+	        // 2. get ContextFactory using builder
+	        if (initialContext == null) {
+	            initialContext = getInitialContextUsingBuilder(_context, environment);
     		}
+	        
+	        if (initialContext == null) {
+	            throw new NoInitialContextException("We could not find an InitialContextFactory to use");
+	        } else {
+	            return new DelegateContext(initialContext);
   	  }
-  	  finally {
-  	    _context.ungetService(ref);
   	  }
   	}
   	
-  	if (toReturn == null) {
-  		toReturn  = new DelegateContext(environment);
+	private static Context getInitialContextUsingBuilder(BundleContext context, Hashtable<?, ?> environment) 
+        throws NamingException {
+	    InitialContextFactory factory = getInitialContextFactoryBuilder(context, environment);
+	    return (factory == null) ? null : factory.getInitialContext(environment);
   	}
   	
-    return toReturn;
+	private static InitialContextFactory getInitialContextFactoryBuilder(BundleContext context, Hashtable<?, ?> environment) 
+	    throws NamingException {
+	    InitialContextFactory factory = null;
+	    try {
+	        ServiceReference[] refs = context.getAllServiceReferences(InitialContextFactoryBuilder.class.getName(), null);
+	        if (refs != null) {
+	            Arrays.sort(refs);
+	            for (int i = 0; i < refs.length && factory == null; i++) {
+	                ServiceReference ref = refs[i];	                
+	                InitialContextFactoryBuilder builder = (InitialContextFactoryBuilder) context.getService(ref);
+	                try {
+	                    factory = builder.createInitialContextFactory(environment);
+	                } finally {	              
+	                    context.ungetService(ref);
+	                }
+	            }
+	        }	        
+	    } catch (InvalidSyntaxException e) {
+	        // ignore - should never happen
+	    }
+	    return factory;
   }
 }
diff --git a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
index 45153224..ebc61714 100644
--- a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
+++ b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
@@ -43,6 +43,7 @@
 import org.osgi.framework.InvalidSyntaxException;
 import org.osgi.framework.ServiceException;
 import org.osgi.framework.ServiceReference;
+import org.osgi.service.jndi.JNDIConstants;
 
 /**
  * This helper provides access to services registered in the OSGi service registry.
@@ -86,9 +87,12 @@ public JNDIServiceDamper(BundleContext context, String i, String f, ServicePair
     
     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable
     {
-      if (pair.ref.getBundle() == null) {
-        if (dynamic) pair = findService(ctx, interfaceName, filter);
-        else pair = null;
+      if (pair == null || pair.ref.getBundle() == null) {
+        if (dynamic) {
+            pair = findService(ctx, interfaceName, filter);
+        } else {
+            pair = null;
+        }
       }
       
       if (pair == null) {
@@ -118,7 +122,7 @@ public static BundleContext getBundleContext(Map<String, Object> env) throws Nam
   {
     BundleContext result = null;
     
-    Object bc = env.get("osgi.service.jndi.bundleContext");
+    Object bc = env.get(JNDIConstants.BUNDLE_CONTEXT);
     
     if (bc != null && bc instanceof BundleContext) result = (BundleContext) bc;
     else {
@@ -215,9 +219,9 @@ public static Object getService(OsgiName lookupName, String id, boolean dynamicR
     if (pair == null) {
       interfaceName = null;
       if (id == null) {
-        filter = "(osgi.jndi.service.name=" + serviceName + ')';
+        filter = "(" + JNDIConstants.JNDI_SERVICENAME + "=" + serviceName + ')';
       } else {
-        filter = "(&(" + Constants.SERVICE_ID + '=' + id + ")(osgi.jndi.service.name=" + serviceName + "))";
+        filter = "(&(" + Constants.SERVICE_ID + '=' + id + ")(" + JNDIConstants.JNDI_SERVICENAME + "=" + serviceName + "))";
       }
       pair = findService(ctx, interfaceName, filter);
     }
@@ -332,7 +336,7 @@ public int compare(ServiceReference o1, ServiceReference o2)
       refs = ctx.getServiceReferences(interface1, filter);
       
       if (refs == null || refs.length == 0) {
-        refs = ctx.getServiceReferences(null, "(osgi.jndi.service.name=" + serviceName + ')');
+        refs = ctx.getServiceReferences(null, "(" + JNDIConstants.JNDI_SERVICENAME + "=" + serviceName + ')');
       }
     } catch (InvalidSyntaxException e) {
       throw (NamingException) new NamingException(e.getFilter()).initCause(e);
diff --git a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java
index 844d5c6b..8641f6df 100644
--- a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java
+++ b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/url/Activator.java
@@ -28,6 +28,7 @@
 import org.osgi.framework.BundleActivator;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.ServiceRegistration;
+import org.osgi.service.jndi.JNDIConstants;
 
 public class Activator implements BundleActivator {
 
@@ -36,7 +37,7 @@
   public void start(BundleContext context)
   {
     Hashtable<Object, Object> props = new Hashtable<Object, Object>();
-    props.put("osgi.jndi.urlScheme", new String[] {"osgi", "aries"} );
+    props.put(JNDIConstants.JNDI_URLSCHEME, new String[] {"osgi", "aries"} );
     reg = context.registerService(ObjectFactory.class.getName(), new OsgiURLContextFactory(), props);
   }
 
