diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SuicideOfStreaming.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SuicideOfStreaming.java
index b0aea4ce..9122ff03 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SuicideOfStreaming.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SuicideOfStreaming.java
@@ -36,8 +36,9 @@
 
 import org.apache.derby.drda.NetworkServerControl;
 import org.apache.derby.tools.ij;
+import org.apache.derby.client.am.SqlCode;
 import org.apache.derbyTesting.functionTests.util.TestUtil;
-
+import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
 
 /**
  *
@@ -47,7 +48,7 @@
  * See SuicideOfStreaming_app.properties also.
  *
  */
-public class SuicideOfStreaming {
+public class SuicideOfStreaming extends BaseJDBCTestCase {
     
     private static NetworkServerControl networkServer = null;
     
@@ -55,7 +56,7 @@ public static void main(String[] args){
 	
 	try{
 	    
-	    ij.getPropertyArg(args);
+	    setSystemProperty("derby.debug.suicideOfLayerBStreaming","true");
 	    
 	    startServer();
 	    
@@ -64,8 +65,10 @@ public static void main(String[] args){
 	    
 	    shutdownServer();
 	    
+	    fail("Streaming was not encountered exception. Suicide of streaming seems to be failed.");
+
 	}catch(Throwable t){
-	    t.printStackTrace();
+	    examineThrowable(t);
 	    
 	}
     }
@@ -78,7 +81,7 @@ private static void createTestTable()
 	       InstantiationException
     {
 
-	Connection conn = getConnection();
+	Connection conn = connectServer();
 	
 	Statement createTableSt = conn.createStatement();
 	createTableSt.execute("create table TEST_TABLE( TEST_COL blob( 65536 ))");
@@ -99,7 +102,7 @@ private static void testInterruptedReadOfLob()
     {
 	
 	Connection conn = 
-	    getConnection();
+	    connectServer();
 	
 	conn.setAutoCommit(false);
 	
@@ -202,7 +205,7 @@ private static void shutdownServer()
     }
     
     
-    private static Connection getConnection()
+    private static Connection connectServer()
 	throws SQLException {
 	
 	return DriverManager.getConnection(TestUtil.getJdbcUrlPrefix("localhost",
@@ -214,4 +217,61 @@ private static Connection getConnection()
     }
 
     
+    
+    private static void examineThrowable( Throwable t ) {
+	
+	if(t instanceof SQLException){
+	    examineSQLException( ( SQLException ) t );
+	    
+	}else{
+	    t.printStackTrace();
+	    fail( t.getMessage() );
+	    
+	}
+
+    }
+    
+
+    private static void examineSQLException( SQLException sqlex ) {
+	
+	if( ( usingDerbyNetClient() && 
+	      examineExpectedInDerbyNetClient(sqlex) ) || 
+	    ( usingDerbyNet() && 
+	      examineExpectedInDerbyNet(sqlex) ) ){
+	    
+	    return;
+
+	}
+	    
+	fail(sqlex.getMessage() + "," +
+	     "SqlState: " + sqlex.getSQLState() + "," + 
+	     "SqlCode: " + sqlex.getErrorCode() );
+	
+    }
+
+
+    private static boolean examineExpectedInDerbyNetClient( SQLException sqlex ) {
+	return 
+	    sqlex.getSQLState().equals("08006") && 
+	    sqlex.getErrorCode() == SqlCode.disconnectError.getCode();
+    }
+
+
+    private static boolean examineExpectedInDerbyNet( SQLException sqlex ) {
+	return sqlex.getErrorCode() == SqlCode.disconnectError.getCode();
+    }
+    
+    
+    //JUnit test support.
+    //
+    public SuicideOfStreaming(){
+	super("testSuicideOfStreaming");
+    }
+    
+    
+    public void testSuicideOfStreaming(){
+	main(new String[0]);
+    }
+    
 }
+
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/derbyNet/OwnServerTests.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/derbyNet/OwnServerTests.java
index 3f24d583..caf77f7e 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/derbyNet/OwnServerTests.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/junitTests/derbyNet/OwnServerTests.java
@@ -1 +1,53 @@
   + native
+/*
+
+Derby - Class org.apache.derbyTesting.functionTests.tests.junitTests.derbyNet.OwnServerTests
+
+Copyright 1999, 2005 The Apache Software Foundation or its licensors, as applicable.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+*/
+
+package org.apache.derbyTesting.functionTests.tests.junitTests.derbyNet;
+
+import org.apache.derbyTesting.functionTests.util.BaseTestCase;
+import org.apache.derbyTesting.functionTests.tests.derbynet.SuicideOfStreaming;
+import org.apache.derby.iapi.services.sanity.SanityManager;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+/**
+ * This class deals tests which starts its own Network Server in JUnit framework.
+ */
+
+public class OwnServerTests extends BaseTestCase {
+    
+    public OwnServerTests(){
+	super("ownServerTests");
+    }
+    
+    public static Test suite(){
+	
+	TestSuite suite = new TestSuite();
+	
+	if(SanityManager.DEBUG){
+	    suite.addTest( new SuicideOfStreaming() );
+	}
+	
+	return suite;
+	
+    }
+    
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/BaseTestCase.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/BaseTestCase.java
index d5ba2c68..56abd6d8 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/BaseTestCase.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/BaseTestCase.java
@@ -22,6 +22,10 @@
 import junit.framework.TestCase;
 import java.io.PrintStream;
 import java.sql.SQLException;
+import java.security.AccessController;
+
+import java.security.PrivilegedActionException;
+
 /**
  * Base class for JUnit tests.
  */
@@ -92,4 +96,29 @@ public static void printStackTrace(Throwable t)
 
     private final static PrintStream out = System.out;
     
+    /**
+     * Set system property
+     *
+     * @param name name of the property
+     * @param value value of the property
+     */
+    protected static void setSystemProperty(final String name, 
+					    final String value)
+	throws PrivilegedActionException {
+	
+	AccessController.doPrivileged
+	    (new java.security.PrivilegedAction(){
+		    
+		    public Object run(){
+			System.setProperty( name, value);
+			return null;
+			
+		    }
+		    
+		}
+	     );
+	
+    }
+    
+    
 } // End class BaseTestCase
