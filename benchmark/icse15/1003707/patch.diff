diff --git a/lucene/dev/branches/branch_3x/solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache.java b/lucene/dev/branches/branch_3x/solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache.java
index e3505363..df930c3b 100644
--- a/lucene/dev/branches/branch_3x/solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache.java
+++ b/lucene/dev/branches/branch_3x/solr/src/common/org/apache/solr/common/util/ConcurrentLRUCache.java
@@ -402,6 +402,8 @@ private void evictEntry(K key) {
    */
   public Map<K, V> getOldestAccessedItems(int n) {
     Map<K, V> result = new LinkedHashMap<K, V>();
+    if (n <= 0)
+      return result;
     TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();
     markAndSweepLock.lock();
     try {
@@ -428,6 +430,8 @@ private void evictEntry(K key) {
 
   public Map<K,V> getLatestAccessedItems(int n) {
     Map<K,V> result = new LinkedHashMap<K,V>();
+    if (n <= 0)
+      return result;
     TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();
     // we need to grab the lock since we are changing lastAccessedCopy
     markAndSweepLock.lock();
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/TestFastLRUCache.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/TestFastLRUCache.java
index f3494b5b..050190e4 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/TestFastLRUCache.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/TestFastLRUCache.java
@@ -102,6 +102,14 @@ public void testOldestItems() {
     assertNotNull(m.get(5));
     assertNotNull(m.get(4));
     assertNotNull(m.get(2));
+
+    m = cache.getOldestAccessedItems(0);
+    assertTrue(m.isEmpty());
+
+    //test this too
+    m = cache.getLatestAccessedItems(0);
+    assertTrue(m.isEmpty());
+
     cache.destroy();
   }
 
