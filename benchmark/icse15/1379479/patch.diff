diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation.java
index 87475ff4..9213b05a 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperation.java
@@ -93,27 +93,27 @@
 
   // NOTE: this is sparse (some entries are null):
   private static final BulkOperation[] packedSingleBlockBulkOps = new BulkOperation[] {
-    new BulkOperationPackedSingleBlock1(),
-    new BulkOperationPackedSingleBlock2(),
-    new BulkOperationPackedSingleBlock3(),
-    new BulkOperationPackedSingleBlock4(),
-    new BulkOperationPackedSingleBlock5(),
-    new BulkOperationPackedSingleBlock6(),
-    new BulkOperationPackedSingleBlock7(),
-    new BulkOperationPackedSingleBlock8(),
-    new BulkOperationPackedSingleBlock9(),
-    new BulkOperationPackedSingleBlock10(),
+    new BulkOperationPackedSingleBlock(1),
+    new BulkOperationPackedSingleBlock(2),
+    new BulkOperationPackedSingleBlock(3),
+    new BulkOperationPackedSingleBlock(4),
+    new BulkOperationPackedSingleBlock(5),
+    new BulkOperationPackedSingleBlock(6),
+    new BulkOperationPackedSingleBlock(7),
+    new BulkOperationPackedSingleBlock(8),
+    new BulkOperationPackedSingleBlock(9),
+    new BulkOperationPackedSingleBlock(10),
     null,
-    new BulkOperationPackedSingleBlock12(),
+    new BulkOperationPackedSingleBlock(12),
     null,
     null,
     null,
-    new BulkOperationPackedSingleBlock16(),
+    new BulkOperationPackedSingleBlock(16),
     null,
     null,
     null,
     null,
-    new BulkOperationPackedSingleBlock21(),
+    new BulkOperationPackedSingleBlock(21),
     null,
     null,
     null,
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked1.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked1.java
index 7e00714c..a2c6f0e3 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked1.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked1.java
@@ -32,307 +32,51 @@ public BulkOperationPacked1() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
-        final long block0 = blocks[blocksOffset++];
-        values[valuesOffset++] = (int) (block0 >>> 63);
-        values[valuesOffset++] = (int) ((block0 >>> 62) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 61) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 60) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 59) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 58) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 57) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 56) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 55) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 54) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 53) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 52) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 51) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 50) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 49) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 48) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 47) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 46) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 45) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 44) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 43) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 42) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 41) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 40) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 39) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 38) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 37) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 36) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 35) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 34) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 33) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 32) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 31) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 30) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 29) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 28) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 27) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 26) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 25) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 24) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 23) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 22) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 21) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 20) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 19) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 18) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 17) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 16) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 15) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 14) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 13) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 12) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 11) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 10) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 9) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 8) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 7) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 6) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 5) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 4) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 3) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 2) & 1L);
-        values[valuesOffset++] = (int) ((block0 >>> 1) & 1L);
-        values[valuesOffset++] = (int) (block0 & 1L);
+      final long block = blocks[blocksOffset++];
+      for (int shift = 63; shift >= 0; shift -= 1) {
+        values[valuesOffset++] = (int) ((block >>> shift) & 1);
+      }
       }
     }
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 >>> 7;
-        values[valuesOffset++] = (byte0 >>> 6) & 1;
-        values[valuesOffset++] = (byte0 >>> 5) & 1;
-        values[valuesOffset++] = (byte0 >>> 4) & 1;
-        values[valuesOffset++] = (byte0 >>> 3) & 1;
-        values[valuesOffset++] = (byte0 >>> 2) & 1;
-        values[valuesOffset++] = (byte0 >>> 1) & 1;
-        values[valuesOffset++] = byte0 & 1;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte1 >>> 7;
-        values[valuesOffset++] = (byte1 >>> 6) & 1;
-        values[valuesOffset++] = (byte1 >>> 5) & 1;
-        values[valuesOffset++] = (byte1 >>> 4) & 1;
-        values[valuesOffset++] = (byte1 >>> 3) & 1;
-        values[valuesOffset++] = (byte1 >>> 2) & 1;
-        values[valuesOffset++] = (byte1 >>> 1) & 1;
-        values[valuesOffset++] = byte1 & 1;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte2 >>> 7;
-        values[valuesOffset++] = (byte2 >>> 6) & 1;
-        values[valuesOffset++] = (byte2 >>> 5) & 1;
-        values[valuesOffset++] = (byte2 >>> 4) & 1;
-        values[valuesOffset++] = (byte2 >>> 3) & 1;
-        values[valuesOffset++] = (byte2 >>> 2) & 1;
-        values[valuesOffset++] = (byte2 >>> 1) & 1;
-        values[valuesOffset++] = byte2 & 1;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte3 >>> 7;
-        values[valuesOffset++] = (byte3 >>> 6) & 1;
-        values[valuesOffset++] = (byte3 >>> 5) & 1;
-        values[valuesOffset++] = (byte3 >>> 4) & 1;
-        values[valuesOffset++] = (byte3 >>> 3) & 1;
-        values[valuesOffset++] = (byte3 >>> 2) & 1;
-        values[valuesOffset++] = (byte3 >>> 1) & 1;
-        values[valuesOffset++] = byte3 & 1;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte4 >>> 7;
-        values[valuesOffset++] = (byte4 >>> 6) & 1;
-        values[valuesOffset++] = (byte4 >>> 5) & 1;
-        values[valuesOffset++] = (byte4 >>> 4) & 1;
-        values[valuesOffset++] = (byte4 >>> 3) & 1;
-        values[valuesOffset++] = (byte4 >>> 2) & 1;
-        values[valuesOffset++] = (byte4 >>> 1) & 1;
-        values[valuesOffset++] = byte4 & 1;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte5 >>> 7;
-        values[valuesOffset++] = (byte5 >>> 6) & 1;
-        values[valuesOffset++] = (byte5 >>> 5) & 1;
-        values[valuesOffset++] = (byte5 >>> 4) & 1;
-        values[valuesOffset++] = (byte5 >>> 3) & 1;
-        values[valuesOffset++] = (byte5 >>> 2) & 1;
-        values[valuesOffset++] = (byte5 >>> 1) & 1;
-        values[valuesOffset++] = byte5 & 1;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte6 >>> 7;
-        values[valuesOffset++] = (byte6 >>> 6) & 1;
-        values[valuesOffset++] = (byte6 >>> 5) & 1;
-        values[valuesOffset++] = (byte6 >>> 4) & 1;
-        values[valuesOffset++] = (byte6 >>> 3) & 1;
-        values[valuesOffset++] = (byte6 >>> 2) & 1;
-        values[valuesOffset++] = (byte6 >>> 1) & 1;
-        values[valuesOffset++] = byte6 & 1;
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte7 >>> 7;
-        values[valuesOffset++] = (byte7 >>> 6) & 1;
-        values[valuesOffset++] = (byte7 >>> 5) & 1;
-        values[valuesOffset++] = (byte7 >>> 4) & 1;
-        values[valuesOffset++] = (byte7 >>> 3) & 1;
-        values[valuesOffset++] = (byte7 >>> 2) & 1;
-        values[valuesOffset++] = (byte7 >>> 1) & 1;
-        values[valuesOffset++] = byte7 & 1;
+    for (int j = 0; j < 8 * iterations; ++j) {
+      final byte block = blocks[blocksOffset++];
+      values[valuesOffset++] = (block >>> 7) & 1;
+      values[valuesOffset++] = (block >>> 6) & 1;
+      values[valuesOffset++] = (block >>> 5) & 1;
+      values[valuesOffset++] = (block >>> 4) & 1;
+      values[valuesOffset++] = (block >>> 3) & 1;
+      values[valuesOffset++] = (block >>> 2) & 1;
+      values[valuesOffset++] = (block >>> 1) & 1;
+      values[valuesOffset++] = block & 1;
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
-        final long block0 = blocks[blocksOffset++];
-        values[valuesOffset++] = block0 >>> 63;
-        values[valuesOffset++] = (block0 >>> 62) & 1L;
-        values[valuesOffset++] = (block0 >>> 61) & 1L;
-        values[valuesOffset++] = (block0 >>> 60) & 1L;
-        values[valuesOffset++] = (block0 >>> 59) & 1L;
-        values[valuesOffset++] = (block0 >>> 58) & 1L;
-        values[valuesOffset++] = (block0 >>> 57) & 1L;
-        values[valuesOffset++] = (block0 >>> 56) & 1L;
-        values[valuesOffset++] = (block0 >>> 55) & 1L;
-        values[valuesOffset++] = (block0 >>> 54) & 1L;
-        values[valuesOffset++] = (block0 >>> 53) & 1L;
-        values[valuesOffset++] = (block0 >>> 52) & 1L;
-        values[valuesOffset++] = (block0 >>> 51) & 1L;
-        values[valuesOffset++] = (block0 >>> 50) & 1L;
-        values[valuesOffset++] = (block0 >>> 49) & 1L;
-        values[valuesOffset++] = (block0 >>> 48) & 1L;
-        values[valuesOffset++] = (block0 >>> 47) & 1L;
-        values[valuesOffset++] = (block0 >>> 46) & 1L;
-        values[valuesOffset++] = (block0 >>> 45) & 1L;
-        values[valuesOffset++] = (block0 >>> 44) & 1L;
-        values[valuesOffset++] = (block0 >>> 43) & 1L;
-        values[valuesOffset++] = (block0 >>> 42) & 1L;
-        values[valuesOffset++] = (block0 >>> 41) & 1L;
-        values[valuesOffset++] = (block0 >>> 40) & 1L;
-        values[valuesOffset++] = (block0 >>> 39) & 1L;
-        values[valuesOffset++] = (block0 >>> 38) & 1L;
-        values[valuesOffset++] = (block0 >>> 37) & 1L;
-        values[valuesOffset++] = (block0 >>> 36) & 1L;
-        values[valuesOffset++] = (block0 >>> 35) & 1L;
-        values[valuesOffset++] = (block0 >>> 34) & 1L;
-        values[valuesOffset++] = (block0 >>> 33) & 1L;
-        values[valuesOffset++] = (block0 >>> 32) & 1L;
-        values[valuesOffset++] = (block0 >>> 31) & 1L;
-        values[valuesOffset++] = (block0 >>> 30) & 1L;
-        values[valuesOffset++] = (block0 >>> 29) & 1L;
-        values[valuesOffset++] = (block0 >>> 28) & 1L;
-        values[valuesOffset++] = (block0 >>> 27) & 1L;
-        values[valuesOffset++] = (block0 >>> 26) & 1L;
-        values[valuesOffset++] = (block0 >>> 25) & 1L;
-        values[valuesOffset++] = (block0 >>> 24) & 1L;
-        values[valuesOffset++] = (block0 >>> 23) & 1L;
-        values[valuesOffset++] = (block0 >>> 22) & 1L;
-        values[valuesOffset++] = (block0 >>> 21) & 1L;
-        values[valuesOffset++] = (block0 >>> 20) & 1L;
-        values[valuesOffset++] = (block0 >>> 19) & 1L;
-        values[valuesOffset++] = (block0 >>> 18) & 1L;
-        values[valuesOffset++] = (block0 >>> 17) & 1L;
-        values[valuesOffset++] = (block0 >>> 16) & 1L;
-        values[valuesOffset++] = (block0 >>> 15) & 1L;
-        values[valuesOffset++] = (block0 >>> 14) & 1L;
-        values[valuesOffset++] = (block0 >>> 13) & 1L;
-        values[valuesOffset++] = (block0 >>> 12) & 1L;
-        values[valuesOffset++] = (block0 >>> 11) & 1L;
-        values[valuesOffset++] = (block0 >>> 10) & 1L;
-        values[valuesOffset++] = (block0 >>> 9) & 1L;
-        values[valuesOffset++] = (block0 >>> 8) & 1L;
-        values[valuesOffset++] = (block0 >>> 7) & 1L;
-        values[valuesOffset++] = (block0 >>> 6) & 1L;
-        values[valuesOffset++] = (block0 >>> 5) & 1L;
-        values[valuesOffset++] = (block0 >>> 4) & 1L;
-        values[valuesOffset++] = (block0 >>> 3) & 1L;
-        values[valuesOffset++] = (block0 >>> 2) & 1L;
-        values[valuesOffset++] = (block0 >>> 1) & 1L;
-        values[valuesOffset++] = block0 & 1L;
+      final long block = blocks[blocksOffset++];
+      for (int shift = 63; shift >= 0; shift -= 1) {
+        values[valuesOffset++] = (block >>> shift) & 1;
+      }
       }
     }
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 >>> 7;
-        values[valuesOffset++] = (byte0 >>> 6) & 1;
-        values[valuesOffset++] = (byte0 >>> 5) & 1;
-        values[valuesOffset++] = (byte0 >>> 4) & 1;
-        values[valuesOffset++] = (byte0 >>> 3) & 1;
-        values[valuesOffset++] = (byte0 >>> 2) & 1;
-        values[valuesOffset++] = (byte0 >>> 1) & 1;
-        values[valuesOffset++] = byte0 & 1;
-        final long byte1 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte1 >>> 7;
-        values[valuesOffset++] = (byte1 >>> 6) & 1;
-        values[valuesOffset++] = (byte1 >>> 5) & 1;
-        values[valuesOffset++] = (byte1 >>> 4) & 1;
-        values[valuesOffset++] = (byte1 >>> 3) & 1;
-        values[valuesOffset++] = (byte1 >>> 2) & 1;
-        values[valuesOffset++] = (byte1 >>> 1) & 1;
-        values[valuesOffset++] = byte1 & 1;
-        final long byte2 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte2 >>> 7;
-        values[valuesOffset++] = (byte2 >>> 6) & 1;
-        values[valuesOffset++] = (byte2 >>> 5) & 1;
-        values[valuesOffset++] = (byte2 >>> 4) & 1;
-        values[valuesOffset++] = (byte2 >>> 3) & 1;
-        values[valuesOffset++] = (byte2 >>> 2) & 1;
-        values[valuesOffset++] = (byte2 >>> 1) & 1;
-        values[valuesOffset++] = byte2 & 1;
-        final long byte3 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte3 >>> 7;
-        values[valuesOffset++] = (byte3 >>> 6) & 1;
-        values[valuesOffset++] = (byte3 >>> 5) & 1;
-        values[valuesOffset++] = (byte3 >>> 4) & 1;
-        values[valuesOffset++] = (byte3 >>> 3) & 1;
-        values[valuesOffset++] = (byte3 >>> 2) & 1;
-        values[valuesOffset++] = (byte3 >>> 1) & 1;
-        values[valuesOffset++] = byte3 & 1;
-        final long byte4 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte4 >>> 7;
-        values[valuesOffset++] = (byte4 >>> 6) & 1;
-        values[valuesOffset++] = (byte4 >>> 5) & 1;
-        values[valuesOffset++] = (byte4 >>> 4) & 1;
-        values[valuesOffset++] = (byte4 >>> 3) & 1;
-        values[valuesOffset++] = (byte4 >>> 2) & 1;
-        values[valuesOffset++] = (byte4 >>> 1) & 1;
-        values[valuesOffset++] = byte4 & 1;
-        final long byte5 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte5 >>> 7;
-        values[valuesOffset++] = (byte5 >>> 6) & 1;
-        values[valuesOffset++] = (byte5 >>> 5) & 1;
-        values[valuesOffset++] = (byte5 >>> 4) & 1;
-        values[valuesOffset++] = (byte5 >>> 3) & 1;
-        values[valuesOffset++] = (byte5 >>> 2) & 1;
-        values[valuesOffset++] = (byte5 >>> 1) & 1;
-        values[valuesOffset++] = byte5 & 1;
-        final long byte6 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte6 >>> 7;
-        values[valuesOffset++] = (byte6 >>> 6) & 1;
-        values[valuesOffset++] = (byte6 >>> 5) & 1;
-        values[valuesOffset++] = (byte6 >>> 4) & 1;
-        values[valuesOffset++] = (byte6 >>> 3) & 1;
-        values[valuesOffset++] = (byte6 >>> 2) & 1;
-        values[valuesOffset++] = (byte6 >>> 1) & 1;
-        values[valuesOffset++] = byte6 & 1;
-        final long byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte7 >>> 7;
-        values[valuesOffset++] = (byte7 >>> 6) & 1;
-        values[valuesOffset++] = (byte7 >>> 5) & 1;
-        values[valuesOffset++] = (byte7 >>> 4) & 1;
-        values[valuesOffset++] = (byte7 >>> 3) & 1;
-        values[valuesOffset++] = (byte7 >>> 2) & 1;
-        values[valuesOffset++] = (byte7 >>> 1) & 1;
-        values[valuesOffset++] = byte7 & 1;
+    for (int j = 0; j < 8 * iterations; ++j) {
+      final byte block = blocks[blocksOffset++];
+      values[valuesOffset++] = (block >>> 7) & 1;
+      values[valuesOffset++] = (block >>> 6) & 1;
+      values[valuesOffset++] = (block >>> 5) & 1;
+      values[valuesOffset++] = (block >>> 4) & 1;
+      values[valuesOffset++] = (block >>> 3) & 1;
+      values[valuesOffset++] = (block >>> 2) & 1;
+      values[valuesOffset++] = (block >>> 1) & 1;
+      values[valuesOffset++] = block & 1;
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked10.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked10.java
index 2d42d9a6..03a2c8e7 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked10.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked10.java
@@ -32,8 +32,6 @@ public BulkOperationPacked10() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = (int) (block0 >>> 54);
@@ -77,9 +75,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final int byte0 = blocks[blocksOffset++] & 0xFF;
         final int byte1 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = (byte0 << 2) | (byte1 >>> 6);
@@ -89,76 +85,11 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
         values[valuesOffset++] = ((byte2 & 15) << 6) | (byte3 >>> 2);
         final int byte4 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte3 & 3) << 8) | byte4;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte5 << 2) | (byte6 >>> 6);
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte6 & 63) << 4) | (byte7 >>> 4);
-        final int byte8 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte7 & 15) << 6) | (byte8 >>> 2);
-        final int byte9 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte8 & 3) << 8) | byte9;
-        final int byte10 = blocks[blocksOffset++] & 0xFF;
-        final int byte11 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte10 << 2) | (byte11 >>> 6);
-        final int byte12 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte11 & 63) << 4) | (byte12 >>> 4);
-        final int byte13 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte12 & 15) << 6) | (byte13 >>> 2);
-        final int byte14 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte13 & 3) << 8) | byte14;
-        final int byte15 = blocks[blocksOffset++] & 0xFF;
-        final int byte16 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte15 << 2) | (byte16 >>> 6);
-        final int byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte16 & 63) << 4) | (byte17 >>> 4);
-        final int byte18 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte17 & 15) << 6) | (byte18 >>> 2);
-        final int byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte18 & 3) << 8) | byte19;
-        final int byte20 = blocks[blocksOffset++] & 0xFF;
-        final int byte21 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte20 << 2) | (byte21 >>> 6);
-        final int byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte21 & 63) << 4) | (byte22 >>> 4);
-        final int byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 15) << 6) | (byte23 >>> 2);
-        final int byte24 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte23 & 3) << 8) | byte24;
-        final int byte25 = blocks[blocksOffset++] & 0xFF;
-        final int byte26 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte25 << 2) | (byte26 >>> 6);
-        final int byte27 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte26 & 63) << 4) | (byte27 >>> 4);
-        final int byte28 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte27 & 15) << 6) | (byte28 >>> 2);
-        final int byte29 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte28 & 3) << 8) | byte29;
-        final int byte30 = blocks[blocksOffset++] & 0xFF;
-        final int byte31 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte30 << 2) | (byte31 >>> 6);
-        final int byte32 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte31 & 63) << 4) | (byte32 >>> 4);
-        final int byte33 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte32 & 15) << 6) | (byte33 >>> 2);
-        final int byte34 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte33 & 3) << 8) | byte34;
-        final int byte35 = blocks[blocksOffset++] & 0xFF;
-        final int byte36 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte35 << 2) | (byte36 >>> 6);
-        final int byte37 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte36 & 63) << 4) | (byte37 >>> 4);
-        final int byte38 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte37 & 15) << 6) | (byte38 >>> 2);
-        final int byte39 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte38 & 3) << 8) | byte39;
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = block0 >>> 54;
@@ -202,9 +133,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final long byte0 = blocks[blocksOffset++] & 0xFF;
         final long byte1 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = (byte0 << 2) | (byte1 >>> 6);
@@ -214,69 +143,6 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
         values[valuesOffset++] = ((byte2 & 15) << 6) | (byte3 >>> 2);
         final long byte4 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte3 & 3) << 8) | byte4;
-        final long byte5 = blocks[blocksOffset++] & 0xFF;
-        final long byte6 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte5 << 2) | (byte6 >>> 6);
-        final long byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte6 & 63) << 4) | (byte7 >>> 4);
-        final long byte8 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte7 & 15) << 6) | (byte8 >>> 2);
-        final long byte9 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte8 & 3) << 8) | byte9;
-        final long byte10 = blocks[blocksOffset++] & 0xFF;
-        final long byte11 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte10 << 2) | (byte11 >>> 6);
-        final long byte12 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte11 & 63) << 4) | (byte12 >>> 4);
-        final long byte13 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte12 & 15) << 6) | (byte13 >>> 2);
-        final long byte14 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte13 & 3) << 8) | byte14;
-        final long byte15 = blocks[blocksOffset++] & 0xFF;
-        final long byte16 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte15 << 2) | (byte16 >>> 6);
-        final long byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte16 & 63) << 4) | (byte17 >>> 4);
-        final long byte18 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte17 & 15) << 6) | (byte18 >>> 2);
-        final long byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte18 & 3) << 8) | byte19;
-        final long byte20 = blocks[blocksOffset++] & 0xFF;
-        final long byte21 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte20 << 2) | (byte21 >>> 6);
-        final long byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte21 & 63) << 4) | (byte22 >>> 4);
-        final long byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 15) << 6) | (byte23 >>> 2);
-        final long byte24 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte23 & 3) << 8) | byte24;
-        final long byte25 = blocks[blocksOffset++] & 0xFF;
-        final long byte26 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte25 << 2) | (byte26 >>> 6);
-        final long byte27 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte26 & 63) << 4) | (byte27 >>> 4);
-        final long byte28 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte27 & 15) << 6) | (byte28 >>> 2);
-        final long byte29 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte28 & 3) << 8) | byte29;
-        final long byte30 = blocks[blocksOffset++] & 0xFF;
-        final long byte31 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte30 << 2) | (byte31 >>> 6);
-        final long byte32 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte31 & 63) << 4) | (byte32 >>> 4);
-        final long byte33 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte32 & 15) << 6) | (byte33 >>> 2);
-        final long byte34 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte33 & 3) << 8) | byte34;
-        final long byte35 = blocks[blocksOffset++] & 0xFF;
-        final long byte36 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte35 << 2) | (byte36 >>> 6);
-        final long byte37 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte36 & 63) << 4) | (byte37 >>> 4);
-        final long byte38 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte37 & 15) << 6) | (byte38 >>> 2);
-        final long byte39 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte38 & 3) << 8) | byte39;
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked11.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked11.java
index 2c99c67f..cf65718a 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked11.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked11.java
@@ -32,8 +32,6 @@ public BulkOperationPacked11() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = (int) (block0 >>> 53);
@@ -115,9 +113,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final int byte0 = blocks[blocksOffset++] & 0xFF;
         final int byte1 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = (byte0 << 3) | (byte1 >>> 5);
@@ -137,146 +133,11 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
         values[valuesOffset++] = ((byte8 & 63) << 5) | (byte9 >>> 3);
         final int byte10 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte9 & 7) << 8) | byte10;
-        final int byte11 = blocks[blocksOffset++] & 0xFF;
-        final int byte12 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte11 << 3) | (byte12 >>> 5);
-        final int byte13 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte12 & 31) << 6) | (byte13 >>> 2);
-        final int byte14 = blocks[blocksOffset++] & 0xFF;
-        final int byte15 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte13 & 3) << 9) | (byte14 << 1) | (byte15 >>> 7);
-        final int byte16 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte15 & 127) << 4) | (byte16 >>> 4);
-        final int byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte16 & 15) << 7) | (byte17 >>> 1);
-        final int byte18 = blocks[blocksOffset++] & 0xFF;
-        final int byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte17 & 1) << 10) | (byte18 << 2) | (byte19 >>> 6);
-        final int byte20 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte19 & 63) << 5) | (byte20 >>> 3);
-        final int byte21 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte20 & 7) << 8) | byte21;
-        final int byte22 = blocks[blocksOffset++] & 0xFF;
-        final int byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte22 << 3) | (byte23 >>> 5);
-        final int byte24 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte23 & 31) << 6) | (byte24 >>> 2);
-        final int byte25 = blocks[blocksOffset++] & 0xFF;
-        final int byte26 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte24 & 3) << 9) | (byte25 << 1) | (byte26 >>> 7);
-        final int byte27 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte26 & 127) << 4) | (byte27 >>> 4);
-        final int byte28 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte27 & 15) << 7) | (byte28 >>> 1);
-        final int byte29 = blocks[blocksOffset++] & 0xFF;
-        final int byte30 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte28 & 1) << 10) | (byte29 << 2) | (byte30 >>> 6);
-        final int byte31 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte30 & 63) << 5) | (byte31 >>> 3);
-        final int byte32 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte31 & 7) << 8) | byte32;
-        final int byte33 = blocks[blocksOffset++] & 0xFF;
-        final int byte34 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte33 << 3) | (byte34 >>> 5);
-        final int byte35 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte34 & 31) << 6) | (byte35 >>> 2);
-        final int byte36 = blocks[blocksOffset++] & 0xFF;
-        final int byte37 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte35 & 3) << 9) | (byte36 << 1) | (byte37 >>> 7);
-        final int byte38 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte37 & 127) << 4) | (byte38 >>> 4);
-        final int byte39 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte38 & 15) << 7) | (byte39 >>> 1);
-        final int byte40 = blocks[blocksOffset++] & 0xFF;
-        final int byte41 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte39 & 1) << 10) | (byte40 << 2) | (byte41 >>> 6);
-        final int byte42 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte41 & 63) << 5) | (byte42 >>> 3);
-        final int byte43 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte42 & 7) << 8) | byte43;
-        final int byte44 = blocks[blocksOffset++] & 0xFF;
-        final int byte45 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte44 << 3) | (byte45 >>> 5);
-        final int byte46 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte45 & 31) << 6) | (byte46 >>> 2);
-        final int byte47 = blocks[blocksOffset++] & 0xFF;
-        final int byte48 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte46 & 3) << 9) | (byte47 << 1) | (byte48 >>> 7);
-        final int byte49 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte48 & 127) << 4) | (byte49 >>> 4);
-        final int byte50 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte49 & 15) << 7) | (byte50 >>> 1);
-        final int byte51 = blocks[blocksOffset++] & 0xFF;
-        final int byte52 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte50 & 1) << 10) | (byte51 << 2) | (byte52 >>> 6);
-        final int byte53 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte52 & 63) << 5) | (byte53 >>> 3);
-        final int byte54 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte53 & 7) << 8) | byte54;
-        final int byte55 = blocks[blocksOffset++] & 0xFF;
-        final int byte56 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte55 << 3) | (byte56 >>> 5);
-        final int byte57 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte56 & 31) << 6) | (byte57 >>> 2);
-        final int byte58 = blocks[blocksOffset++] & 0xFF;
-        final int byte59 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte57 & 3) << 9) | (byte58 << 1) | (byte59 >>> 7);
-        final int byte60 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte59 & 127) << 4) | (byte60 >>> 4);
-        final int byte61 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte60 & 15) << 7) | (byte61 >>> 1);
-        final int byte62 = blocks[blocksOffset++] & 0xFF;
-        final int byte63 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte61 & 1) << 10) | (byte62 << 2) | (byte63 >>> 6);
-        final int byte64 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte63 & 63) << 5) | (byte64 >>> 3);
-        final int byte65 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte64 & 7) << 8) | byte65;
-        final int byte66 = blocks[blocksOffset++] & 0xFF;
-        final int byte67 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte66 << 3) | (byte67 >>> 5);
-        final int byte68 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte67 & 31) << 6) | (byte68 >>> 2);
-        final int byte69 = blocks[blocksOffset++] & 0xFF;
-        final int byte70 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte68 & 3) << 9) | (byte69 << 1) | (byte70 >>> 7);
-        final int byte71 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte70 & 127) << 4) | (byte71 >>> 4);
-        final int byte72 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte71 & 15) << 7) | (byte72 >>> 1);
-        final int byte73 = blocks[blocksOffset++] & 0xFF;
-        final int byte74 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte72 & 1) << 10) | (byte73 << 2) | (byte74 >>> 6);
-        final int byte75 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte74 & 63) << 5) | (byte75 >>> 3);
-        final int byte76 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte75 & 7) << 8) | byte76;
-        final int byte77 = blocks[blocksOffset++] & 0xFF;
-        final int byte78 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte77 << 3) | (byte78 >>> 5);
-        final int byte79 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte78 & 31) << 6) | (byte79 >>> 2);
-        final int byte80 = blocks[blocksOffset++] & 0xFF;
-        final int byte81 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte79 & 3) << 9) | (byte80 << 1) | (byte81 >>> 7);
-        final int byte82 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte81 & 127) << 4) | (byte82 >>> 4);
-        final int byte83 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte82 & 15) << 7) | (byte83 >>> 1);
-        final int byte84 = blocks[blocksOffset++] & 0xFF;
-        final int byte85 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte83 & 1) << 10) | (byte84 << 2) | (byte85 >>> 6);
-        final int byte86 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte85 & 63) << 5) | (byte86 >>> 3);
-        final int byte87 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte86 & 7) << 8) | byte87;
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = block0 >>> 53;
@@ -358,9 +219,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final long byte0 = blocks[blocksOffset++] & 0xFF;
         final long byte1 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = (byte0 << 3) | (byte1 >>> 5);
@@ -380,139 +239,6 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
         values[valuesOffset++] = ((byte8 & 63) << 5) | (byte9 >>> 3);
         final long byte10 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte9 & 7) << 8) | byte10;
-        final long byte11 = blocks[blocksOffset++] & 0xFF;
-        final long byte12 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte11 << 3) | (byte12 >>> 5);
-        final long byte13 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte12 & 31) << 6) | (byte13 >>> 2);
-        final long byte14 = blocks[blocksOffset++] & 0xFF;
-        final long byte15 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte13 & 3) << 9) | (byte14 << 1) | (byte15 >>> 7);
-        final long byte16 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte15 & 127) << 4) | (byte16 >>> 4);
-        final long byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte16 & 15) << 7) | (byte17 >>> 1);
-        final long byte18 = blocks[blocksOffset++] & 0xFF;
-        final long byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte17 & 1) << 10) | (byte18 << 2) | (byte19 >>> 6);
-        final long byte20 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte19 & 63) << 5) | (byte20 >>> 3);
-        final long byte21 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte20 & 7) << 8) | byte21;
-        final long byte22 = blocks[blocksOffset++] & 0xFF;
-        final long byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte22 << 3) | (byte23 >>> 5);
-        final long byte24 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte23 & 31) << 6) | (byte24 >>> 2);
-        final long byte25 = blocks[blocksOffset++] & 0xFF;
-        final long byte26 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte24 & 3) << 9) | (byte25 << 1) | (byte26 >>> 7);
-        final long byte27 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte26 & 127) << 4) | (byte27 >>> 4);
-        final long byte28 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte27 & 15) << 7) | (byte28 >>> 1);
-        final long byte29 = blocks[blocksOffset++] & 0xFF;
-        final long byte30 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte28 & 1) << 10) | (byte29 << 2) | (byte30 >>> 6);
-        final long byte31 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte30 & 63) << 5) | (byte31 >>> 3);
-        final long byte32 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte31 & 7) << 8) | byte32;
-        final long byte33 = blocks[blocksOffset++] & 0xFF;
-        final long byte34 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte33 << 3) | (byte34 >>> 5);
-        final long byte35 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte34 & 31) << 6) | (byte35 >>> 2);
-        final long byte36 = blocks[blocksOffset++] & 0xFF;
-        final long byte37 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte35 & 3) << 9) | (byte36 << 1) | (byte37 >>> 7);
-        final long byte38 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte37 & 127) << 4) | (byte38 >>> 4);
-        final long byte39 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte38 & 15) << 7) | (byte39 >>> 1);
-        final long byte40 = blocks[blocksOffset++] & 0xFF;
-        final long byte41 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte39 & 1) << 10) | (byte40 << 2) | (byte41 >>> 6);
-        final long byte42 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte41 & 63) << 5) | (byte42 >>> 3);
-        final long byte43 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte42 & 7) << 8) | byte43;
-        final long byte44 = blocks[blocksOffset++] & 0xFF;
-        final long byte45 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte44 << 3) | (byte45 >>> 5);
-        final long byte46 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte45 & 31) << 6) | (byte46 >>> 2);
-        final long byte47 = blocks[blocksOffset++] & 0xFF;
-        final long byte48 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte46 & 3) << 9) | (byte47 << 1) | (byte48 >>> 7);
-        final long byte49 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte48 & 127) << 4) | (byte49 >>> 4);
-        final long byte50 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte49 & 15) << 7) | (byte50 >>> 1);
-        final long byte51 = blocks[blocksOffset++] & 0xFF;
-        final long byte52 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte50 & 1) << 10) | (byte51 << 2) | (byte52 >>> 6);
-        final long byte53 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte52 & 63) << 5) | (byte53 >>> 3);
-        final long byte54 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte53 & 7) << 8) | byte54;
-        final long byte55 = blocks[blocksOffset++] & 0xFF;
-        final long byte56 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte55 << 3) | (byte56 >>> 5);
-        final long byte57 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte56 & 31) << 6) | (byte57 >>> 2);
-        final long byte58 = blocks[blocksOffset++] & 0xFF;
-        final long byte59 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte57 & 3) << 9) | (byte58 << 1) | (byte59 >>> 7);
-        final long byte60 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte59 & 127) << 4) | (byte60 >>> 4);
-        final long byte61 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte60 & 15) << 7) | (byte61 >>> 1);
-        final long byte62 = blocks[blocksOffset++] & 0xFF;
-        final long byte63 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte61 & 1) << 10) | (byte62 << 2) | (byte63 >>> 6);
-        final long byte64 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte63 & 63) << 5) | (byte64 >>> 3);
-        final long byte65 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte64 & 7) << 8) | byte65;
-        final long byte66 = blocks[blocksOffset++] & 0xFF;
-        final long byte67 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte66 << 3) | (byte67 >>> 5);
-        final long byte68 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte67 & 31) << 6) | (byte68 >>> 2);
-        final long byte69 = blocks[blocksOffset++] & 0xFF;
-        final long byte70 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte68 & 3) << 9) | (byte69 << 1) | (byte70 >>> 7);
-        final long byte71 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte70 & 127) << 4) | (byte71 >>> 4);
-        final long byte72 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte71 & 15) << 7) | (byte72 >>> 1);
-        final long byte73 = blocks[blocksOffset++] & 0xFF;
-        final long byte74 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte72 & 1) << 10) | (byte73 << 2) | (byte74 >>> 6);
-        final long byte75 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte74 & 63) << 5) | (byte75 >>> 3);
-        final long byte76 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte75 & 7) << 8) | byte76;
-        final long byte77 = blocks[blocksOffset++] & 0xFF;
-        final long byte78 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte77 << 3) | (byte78 >>> 5);
-        final long byte79 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte78 & 31) << 6) | (byte79 >>> 2);
-        final long byte80 = blocks[blocksOffset++] & 0xFF;
-        final long byte81 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte79 & 3) << 9) | (byte80 << 1) | (byte81 >>> 7);
-        final long byte82 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte81 & 127) << 4) | (byte82 >>> 4);
-        final long byte83 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte82 & 15) << 7) | (byte83 >>> 1);
-        final long byte84 = blocks[blocksOffset++] & 0xFF;
-        final long byte85 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte83 & 1) << 10) | (byte84 << 2) | (byte85 >>> 6);
-        final long byte86 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte85 & 63) << 5) | (byte86 >>> 3);
-        final long byte87 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte86 & 7) << 8) | byte87;
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked12.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked12.java
index 1be82b19..6cf6623f 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked12.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked12.java
@@ -32,8 +32,6 @@ public BulkOperationPacked12() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = (int) (block0 >>> 52);
@@ -59,56 +57,17 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final int byte0 = blocks[blocksOffset++] & 0xFF;
         final int byte1 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);
         final int byte2 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte3 << 4) | (byte4 >>> 4);
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte4 & 15) << 8) | byte5;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte6 << 4) | (byte7 >>> 4);
-        final int byte8 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte7 & 15) << 8) | byte8;
-        final int byte9 = blocks[blocksOffset++] & 0xFF;
-        final int byte10 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte9 << 4) | (byte10 >>> 4);
-        final int byte11 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte10 & 15) << 8) | byte11;
-        final int byte12 = blocks[blocksOffset++] & 0xFF;
-        final int byte13 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte12 << 4) | (byte13 >>> 4);
-        final int byte14 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte13 & 15) << 8) | byte14;
-        final int byte15 = blocks[blocksOffset++] & 0xFF;
-        final int byte16 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte15 << 4) | (byte16 >>> 4);
-        final int byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte16 & 15) << 8) | byte17;
-        final int byte18 = blocks[blocksOffset++] & 0xFF;
-        final int byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte18 << 4) | (byte19 >>> 4);
-        final int byte20 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte19 & 15) << 8) | byte20;
-        final int byte21 = blocks[blocksOffset++] & 0xFF;
-        final int byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte21 << 4) | (byte22 >>> 4);
-        final int byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 15) << 8) | byte23;
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = block0 >>> 52;
@@ -134,49 +93,12 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final long byte0 = blocks[blocksOffset++] & 0xFF;
         final long byte1 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = (byte0 << 4) | (byte1 >>> 4);
         final long byte2 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte1 & 15) << 8) | byte2;
-        final long byte3 = blocks[blocksOffset++] & 0xFF;
-        final long byte4 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte3 << 4) | (byte4 >>> 4);
-        final long byte5 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte4 & 15) << 8) | byte5;
-        final long byte6 = blocks[blocksOffset++] & 0xFF;
-        final long byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte6 << 4) | (byte7 >>> 4);
-        final long byte8 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte7 & 15) << 8) | byte8;
-        final long byte9 = blocks[blocksOffset++] & 0xFF;
-        final long byte10 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte9 << 4) | (byte10 >>> 4);
-        final long byte11 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte10 & 15) << 8) | byte11;
-        final long byte12 = blocks[blocksOffset++] & 0xFF;
-        final long byte13 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte12 << 4) | (byte13 >>> 4);
-        final long byte14 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte13 & 15) << 8) | byte14;
-        final long byte15 = blocks[blocksOffset++] & 0xFF;
-        final long byte16 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte15 << 4) | (byte16 >>> 4);
-        final long byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte16 & 15) << 8) | byte17;
-        final long byte18 = blocks[blocksOffset++] & 0xFF;
-        final long byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte18 << 4) | (byte19 >>> 4);
-        final long byte20 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte19 & 15) << 8) | byte20;
-        final long byte21 = blocks[blocksOffset++] & 0xFF;
-        final long byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte21 << 4) | (byte22 >>> 4);
-        final long byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 15) << 8) | byte23;
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked13.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked13.java
index a39e71c1..a41eefe8 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked13.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked13.java
@@ -32,8 +32,6 @@ public BulkOperationPacked13() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = (int) (block0 >>> 51);
@@ -117,9 +115,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final int byte0 = blocks[blocksOffset++] & 0xFF;
         final int byte1 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = (byte0 << 5) | (byte1 >>> 3);
@@ -141,160 +137,11 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
         values[valuesOffset++] = ((byte9 & 3) << 11) | (byte10 << 3) | (byte11 >>> 5);
         final int byte12 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte11 & 31) << 8) | byte12;
-        final int byte13 = blocks[blocksOffset++] & 0xFF;
-        final int byte14 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte13 << 5) | (byte14 >>> 3);
-        final int byte15 = blocks[blocksOffset++] & 0xFF;
-        final int byte16 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte14 & 7) << 10) | (byte15 << 2) | (byte16 >>> 6);
-        final int byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte16 & 63) << 7) | (byte17 >>> 1);
-        final int byte18 = blocks[blocksOffset++] & 0xFF;
-        final int byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte17 & 1) << 12) | (byte18 << 4) | (byte19 >>> 4);
-        final int byte20 = blocks[blocksOffset++] & 0xFF;
-        final int byte21 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte19 & 15) << 9) | (byte20 << 1) | (byte21 >>> 7);
-        final int byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte21 & 127) << 6) | (byte22 >>> 2);
-        final int byte23 = blocks[blocksOffset++] & 0xFF;
-        final int byte24 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 3) << 11) | (byte23 << 3) | (byte24 >>> 5);
-        final int byte25 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte24 & 31) << 8) | byte25;
-        final int byte26 = blocks[blocksOffset++] & 0xFF;
-        final int byte27 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte26 << 5) | (byte27 >>> 3);
-        final int byte28 = blocks[blocksOffset++] & 0xFF;
-        final int byte29 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte27 & 7) << 10) | (byte28 << 2) | (byte29 >>> 6);
-        final int byte30 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte29 & 63) << 7) | (byte30 >>> 1);
-        final int byte31 = blocks[blocksOffset++] & 0xFF;
-        final int byte32 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte30 & 1) << 12) | (byte31 << 4) | (byte32 >>> 4);
-        final int byte33 = blocks[blocksOffset++] & 0xFF;
-        final int byte34 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte32 & 15) << 9) | (byte33 << 1) | (byte34 >>> 7);
-        final int byte35 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte34 & 127) << 6) | (byte35 >>> 2);
-        final int byte36 = blocks[blocksOffset++] & 0xFF;
-        final int byte37 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte35 & 3) << 11) | (byte36 << 3) | (byte37 >>> 5);
-        final int byte38 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte37 & 31) << 8) | byte38;
-        final int byte39 = blocks[blocksOffset++] & 0xFF;
-        final int byte40 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte39 << 5) | (byte40 >>> 3);
-        final int byte41 = blocks[blocksOffset++] & 0xFF;
-        final int byte42 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte40 & 7) << 10) | (byte41 << 2) | (byte42 >>> 6);
-        final int byte43 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte42 & 63) << 7) | (byte43 >>> 1);
-        final int byte44 = blocks[blocksOffset++] & 0xFF;
-        final int byte45 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte43 & 1) << 12) | (byte44 << 4) | (byte45 >>> 4);
-        final int byte46 = blocks[blocksOffset++] & 0xFF;
-        final int byte47 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte45 & 15) << 9) | (byte46 << 1) | (byte47 >>> 7);
-        final int byte48 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte47 & 127) << 6) | (byte48 >>> 2);
-        final int byte49 = blocks[blocksOffset++] & 0xFF;
-        final int byte50 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte48 & 3) << 11) | (byte49 << 3) | (byte50 >>> 5);
-        final int byte51 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte50 & 31) << 8) | byte51;
-        final int byte52 = blocks[blocksOffset++] & 0xFF;
-        final int byte53 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte52 << 5) | (byte53 >>> 3);
-        final int byte54 = blocks[blocksOffset++] & 0xFF;
-        final int byte55 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte53 & 7) << 10) | (byte54 << 2) | (byte55 >>> 6);
-        final int byte56 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte55 & 63) << 7) | (byte56 >>> 1);
-        final int byte57 = blocks[blocksOffset++] & 0xFF;
-        final int byte58 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte56 & 1) << 12) | (byte57 << 4) | (byte58 >>> 4);
-        final int byte59 = blocks[blocksOffset++] & 0xFF;
-        final int byte60 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte58 & 15) << 9) | (byte59 << 1) | (byte60 >>> 7);
-        final int byte61 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte60 & 127) << 6) | (byte61 >>> 2);
-        final int byte62 = blocks[blocksOffset++] & 0xFF;
-        final int byte63 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte61 & 3) << 11) | (byte62 << 3) | (byte63 >>> 5);
-        final int byte64 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte63 & 31) << 8) | byte64;
-        final int byte65 = blocks[blocksOffset++] & 0xFF;
-        final int byte66 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte65 << 5) | (byte66 >>> 3);
-        final int byte67 = blocks[blocksOffset++] & 0xFF;
-        final int byte68 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte66 & 7) << 10) | (byte67 << 2) | (byte68 >>> 6);
-        final int byte69 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte68 & 63) << 7) | (byte69 >>> 1);
-        final int byte70 = blocks[blocksOffset++] & 0xFF;
-        final int byte71 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte69 & 1) << 12) | (byte70 << 4) | (byte71 >>> 4);
-        final int byte72 = blocks[blocksOffset++] & 0xFF;
-        final int byte73 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte71 & 15) << 9) | (byte72 << 1) | (byte73 >>> 7);
-        final int byte74 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte73 & 127) << 6) | (byte74 >>> 2);
-        final int byte75 = blocks[blocksOffset++] & 0xFF;
-        final int byte76 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte74 & 3) << 11) | (byte75 << 3) | (byte76 >>> 5);
-        final int byte77 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte76 & 31) << 8) | byte77;
-        final int byte78 = blocks[blocksOffset++] & 0xFF;
-        final int byte79 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte78 << 5) | (byte79 >>> 3);
-        final int byte80 = blocks[blocksOffset++] & 0xFF;
-        final int byte81 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte79 & 7) << 10) | (byte80 << 2) | (byte81 >>> 6);
-        final int byte82 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte81 & 63) << 7) | (byte82 >>> 1);
-        final int byte83 = blocks[blocksOffset++] & 0xFF;
-        final int byte84 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte82 & 1) << 12) | (byte83 << 4) | (byte84 >>> 4);
-        final int byte85 = blocks[blocksOffset++] & 0xFF;
-        final int byte86 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte84 & 15) << 9) | (byte85 << 1) | (byte86 >>> 7);
-        final int byte87 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte86 & 127) << 6) | (byte87 >>> 2);
-        final int byte88 = blocks[blocksOffset++] & 0xFF;
-        final int byte89 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte87 & 3) << 11) | (byte88 << 3) | (byte89 >>> 5);
-        final int byte90 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte89 & 31) << 8) | byte90;
-        final int byte91 = blocks[blocksOffset++] & 0xFF;
-        final int byte92 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte91 << 5) | (byte92 >>> 3);
-        final int byte93 = blocks[blocksOffset++] & 0xFF;
-        final int byte94 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte92 & 7) << 10) | (byte93 << 2) | (byte94 >>> 6);
-        final int byte95 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte94 & 63) << 7) | (byte95 >>> 1);
-        final int byte96 = blocks[blocksOffset++] & 0xFF;
-        final int byte97 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte95 & 1) << 12) | (byte96 << 4) | (byte97 >>> 4);
-        final int byte98 = blocks[blocksOffset++] & 0xFF;
-        final int byte99 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte97 & 15) << 9) | (byte98 << 1) | (byte99 >>> 7);
-        final int byte100 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte99 & 127) << 6) | (byte100 >>> 2);
-        final int byte101 = blocks[blocksOffset++] & 0xFF;
-        final int byte102 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte100 & 3) << 11) | (byte101 << 3) | (byte102 >>> 5);
-        final int byte103 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte102 & 31) << 8) | byte103;
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = block0 >>> 51;
@@ -378,9 +225,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final long byte0 = blocks[blocksOffset++] & 0xFF;
         final long byte1 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = (byte0 << 5) | (byte1 >>> 3);
@@ -402,153 +247,6 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
         values[valuesOffset++] = ((byte9 & 3) << 11) | (byte10 << 3) | (byte11 >>> 5);
         final long byte12 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte11 & 31) << 8) | byte12;
-        final long byte13 = blocks[blocksOffset++] & 0xFF;
-        final long byte14 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte13 << 5) | (byte14 >>> 3);
-        final long byte15 = blocks[blocksOffset++] & 0xFF;
-        final long byte16 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte14 & 7) << 10) | (byte15 << 2) | (byte16 >>> 6);
-        final long byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte16 & 63) << 7) | (byte17 >>> 1);
-        final long byte18 = blocks[blocksOffset++] & 0xFF;
-        final long byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte17 & 1) << 12) | (byte18 << 4) | (byte19 >>> 4);
-        final long byte20 = blocks[blocksOffset++] & 0xFF;
-        final long byte21 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte19 & 15) << 9) | (byte20 << 1) | (byte21 >>> 7);
-        final long byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte21 & 127) << 6) | (byte22 >>> 2);
-        final long byte23 = blocks[blocksOffset++] & 0xFF;
-        final long byte24 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 3) << 11) | (byte23 << 3) | (byte24 >>> 5);
-        final long byte25 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte24 & 31) << 8) | byte25;
-        final long byte26 = blocks[blocksOffset++] & 0xFF;
-        final long byte27 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte26 << 5) | (byte27 >>> 3);
-        final long byte28 = blocks[blocksOffset++] & 0xFF;
-        final long byte29 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte27 & 7) << 10) | (byte28 << 2) | (byte29 >>> 6);
-        final long byte30 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte29 & 63) << 7) | (byte30 >>> 1);
-        final long byte31 = blocks[blocksOffset++] & 0xFF;
-        final long byte32 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte30 & 1) << 12) | (byte31 << 4) | (byte32 >>> 4);
-        final long byte33 = blocks[blocksOffset++] & 0xFF;
-        final long byte34 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte32 & 15) << 9) | (byte33 << 1) | (byte34 >>> 7);
-        final long byte35 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte34 & 127) << 6) | (byte35 >>> 2);
-        final long byte36 = blocks[blocksOffset++] & 0xFF;
-        final long byte37 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte35 & 3) << 11) | (byte36 << 3) | (byte37 >>> 5);
-        final long byte38 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte37 & 31) << 8) | byte38;
-        final long byte39 = blocks[blocksOffset++] & 0xFF;
-        final long byte40 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte39 << 5) | (byte40 >>> 3);
-        final long byte41 = blocks[blocksOffset++] & 0xFF;
-        final long byte42 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte40 & 7) << 10) | (byte41 << 2) | (byte42 >>> 6);
-        final long byte43 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte42 & 63) << 7) | (byte43 >>> 1);
-        final long byte44 = blocks[blocksOffset++] & 0xFF;
-        final long byte45 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte43 & 1) << 12) | (byte44 << 4) | (byte45 >>> 4);
-        final long byte46 = blocks[blocksOffset++] & 0xFF;
-        final long byte47 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte45 & 15) << 9) | (byte46 << 1) | (byte47 >>> 7);
-        final long byte48 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte47 & 127) << 6) | (byte48 >>> 2);
-        final long byte49 = blocks[blocksOffset++] & 0xFF;
-        final long byte50 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte48 & 3) << 11) | (byte49 << 3) | (byte50 >>> 5);
-        final long byte51 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte50 & 31) << 8) | byte51;
-        final long byte52 = blocks[blocksOffset++] & 0xFF;
-        final long byte53 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte52 << 5) | (byte53 >>> 3);
-        final long byte54 = blocks[blocksOffset++] & 0xFF;
-        final long byte55 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte53 & 7) << 10) | (byte54 << 2) | (byte55 >>> 6);
-        final long byte56 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte55 & 63) << 7) | (byte56 >>> 1);
-        final long byte57 = blocks[blocksOffset++] & 0xFF;
-        final long byte58 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte56 & 1) << 12) | (byte57 << 4) | (byte58 >>> 4);
-        final long byte59 = blocks[blocksOffset++] & 0xFF;
-        final long byte60 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte58 & 15) << 9) | (byte59 << 1) | (byte60 >>> 7);
-        final long byte61 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte60 & 127) << 6) | (byte61 >>> 2);
-        final long byte62 = blocks[blocksOffset++] & 0xFF;
-        final long byte63 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte61 & 3) << 11) | (byte62 << 3) | (byte63 >>> 5);
-        final long byte64 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte63 & 31) << 8) | byte64;
-        final long byte65 = blocks[blocksOffset++] & 0xFF;
-        final long byte66 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte65 << 5) | (byte66 >>> 3);
-        final long byte67 = blocks[blocksOffset++] & 0xFF;
-        final long byte68 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte66 & 7) << 10) | (byte67 << 2) | (byte68 >>> 6);
-        final long byte69 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte68 & 63) << 7) | (byte69 >>> 1);
-        final long byte70 = blocks[blocksOffset++] & 0xFF;
-        final long byte71 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte69 & 1) << 12) | (byte70 << 4) | (byte71 >>> 4);
-        final long byte72 = blocks[blocksOffset++] & 0xFF;
-        final long byte73 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte71 & 15) << 9) | (byte72 << 1) | (byte73 >>> 7);
-        final long byte74 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte73 & 127) << 6) | (byte74 >>> 2);
-        final long byte75 = blocks[blocksOffset++] & 0xFF;
-        final long byte76 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte74 & 3) << 11) | (byte75 << 3) | (byte76 >>> 5);
-        final long byte77 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte76 & 31) << 8) | byte77;
-        final long byte78 = blocks[blocksOffset++] & 0xFF;
-        final long byte79 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte78 << 5) | (byte79 >>> 3);
-        final long byte80 = blocks[blocksOffset++] & 0xFF;
-        final long byte81 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte79 & 7) << 10) | (byte80 << 2) | (byte81 >>> 6);
-        final long byte82 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte81 & 63) << 7) | (byte82 >>> 1);
-        final long byte83 = blocks[blocksOffset++] & 0xFF;
-        final long byte84 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte82 & 1) << 12) | (byte83 << 4) | (byte84 >>> 4);
-        final long byte85 = blocks[blocksOffset++] & 0xFF;
-        final long byte86 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte84 & 15) << 9) | (byte85 << 1) | (byte86 >>> 7);
-        final long byte87 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte86 & 127) << 6) | (byte87 >>> 2);
-        final long byte88 = blocks[blocksOffset++] & 0xFF;
-        final long byte89 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte87 & 3) << 11) | (byte88 << 3) | (byte89 >>> 5);
-        final long byte90 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte89 & 31) << 8) | byte90;
-        final long byte91 = blocks[blocksOffset++] & 0xFF;
-        final long byte92 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte91 << 5) | (byte92 >>> 3);
-        final long byte93 = blocks[blocksOffset++] & 0xFF;
-        final long byte94 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte92 & 7) << 10) | (byte93 << 2) | (byte94 >>> 6);
-        final long byte95 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte94 & 63) << 7) | (byte95 >>> 1);
-        final long byte96 = blocks[blocksOffset++] & 0xFF;
-        final long byte97 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte95 & 1) << 12) | (byte96 << 4) | (byte97 >>> 4);
-        final long byte98 = blocks[blocksOffset++] & 0xFF;
-        final long byte99 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte97 & 15) << 9) | (byte98 << 1) | (byte99 >>> 7);
-        final long byte100 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte99 & 127) << 6) | (byte100 >>> 2);
-        final long byte101 = blocks[blocksOffset++] & 0xFF;
-        final long byte102 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte100 & 3) << 11) | (byte101 << 3) | (byte102 >>> 5);
-        final long byte103 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte102 & 31) << 8) | byte103;
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked14.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked14.java
index 6ddaaf47..2f91e26c 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked14.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked14.java
@@ -32,8 +32,6 @@ public BulkOperationPacked14() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = (int) (block0 >>> 50);
@@ -79,9 +77,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final int byte0 = blocks[blocksOffset++] & 0xFF;
         final int byte1 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = (byte0 << 6) | (byte1 >>> 2);
@@ -93,90 +89,11 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
         values[valuesOffset++] = ((byte3 & 15) << 10) | (byte4 << 2) | (byte5 >>> 6);
         final int byte6 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte5 & 63) << 8) | byte6;
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte8 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte7 << 6) | (byte8 >>> 2);
-        final int byte9 = blocks[blocksOffset++] & 0xFF;
-        final int byte10 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte8 & 3) << 12) | (byte9 << 4) | (byte10 >>> 4);
-        final int byte11 = blocks[blocksOffset++] & 0xFF;
-        final int byte12 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte10 & 15) << 10) | (byte11 << 2) | (byte12 >>> 6);
-        final int byte13 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte12 & 63) << 8) | byte13;
-        final int byte14 = blocks[blocksOffset++] & 0xFF;
-        final int byte15 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte14 << 6) | (byte15 >>> 2);
-        final int byte16 = blocks[blocksOffset++] & 0xFF;
-        final int byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte15 & 3) << 12) | (byte16 << 4) | (byte17 >>> 4);
-        final int byte18 = blocks[blocksOffset++] & 0xFF;
-        final int byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte17 & 15) << 10) | (byte18 << 2) | (byte19 >>> 6);
-        final int byte20 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte19 & 63) << 8) | byte20;
-        final int byte21 = blocks[blocksOffset++] & 0xFF;
-        final int byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte21 << 6) | (byte22 >>> 2);
-        final int byte23 = blocks[blocksOffset++] & 0xFF;
-        final int byte24 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 3) << 12) | (byte23 << 4) | (byte24 >>> 4);
-        final int byte25 = blocks[blocksOffset++] & 0xFF;
-        final int byte26 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte24 & 15) << 10) | (byte25 << 2) | (byte26 >>> 6);
-        final int byte27 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte26 & 63) << 8) | byte27;
-        final int byte28 = blocks[blocksOffset++] & 0xFF;
-        final int byte29 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte28 << 6) | (byte29 >>> 2);
-        final int byte30 = blocks[blocksOffset++] & 0xFF;
-        final int byte31 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte29 & 3) << 12) | (byte30 << 4) | (byte31 >>> 4);
-        final int byte32 = blocks[blocksOffset++] & 0xFF;
-        final int byte33 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte31 & 15) << 10) | (byte32 << 2) | (byte33 >>> 6);
-        final int byte34 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte33 & 63) << 8) | byte34;
-        final int byte35 = blocks[blocksOffset++] & 0xFF;
-        final int byte36 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte35 << 6) | (byte36 >>> 2);
-        final int byte37 = blocks[blocksOffset++] & 0xFF;
-        final int byte38 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte36 & 3) << 12) | (byte37 << 4) | (byte38 >>> 4);
-        final int byte39 = blocks[blocksOffset++] & 0xFF;
-        final int byte40 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte38 & 15) << 10) | (byte39 << 2) | (byte40 >>> 6);
-        final int byte41 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte40 & 63) << 8) | byte41;
-        final int byte42 = blocks[blocksOffset++] & 0xFF;
-        final int byte43 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte42 << 6) | (byte43 >>> 2);
-        final int byte44 = blocks[blocksOffset++] & 0xFF;
-        final int byte45 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte43 & 3) << 12) | (byte44 << 4) | (byte45 >>> 4);
-        final int byte46 = blocks[blocksOffset++] & 0xFF;
-        final int byte47 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte45 & 15) << 10) | (byte46 << 2) | (byte47 >>> 6);
-        final int byte48 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte47 & 63) << 8) | byte48;
-        final int byte49 = blocks[blocksOffset++] & 0xFF;
-        final int byte50 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte49 << 6) | (byte50 >>> 2);
-        final int byte51 = blocks[blocksOffset++] & 0xFF;
-        final int byte52 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte50 & 3) << 12) | (byte51 << 4) | (byte52 >>> 4);
-        final int byte53 = blocks[blocksOffset++] & 0xFF;
-        final int byte54 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte52 & 15) << 10) | (byte53 << 2) | (byte54 >>> 6);
-        final int byte55 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte54 & 63) << 8) | byte55;
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = block0 >>> 50;
@@ -222,9 +139,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final long byte0 = blocks[blocksOffset++] & 0xFF;
         final long byte1 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = (byte0 << 6) | (byte1 >>> 2);
@@ -236,83 +151,6 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
         values[valuesOffset++] = ((byte3 & 15) << 10) | (byte4 << 2) | (byte5 >>> 6);
         final long byte6 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte5 & 63) << 8) | byte6;
-        final long byte7 = blocks[blocksOffset++] & 0xFF;
-        final long byte8 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte7 << 6) | (byte8 >>> 2);
-        final long byte9 = blocks[blocksOffset++] & 0xFF;
-        final long byte10 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte8 & 3) << 12) | (byte9 << 4) | (byte10 >>> 4);
-        final long byte11 = blocks[blocksOffset++] & 0xFF;
-        final long byte12 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte10 & 15) << 10) | (byte11 << 2) | (byte12 >>> 6);
-        final long byte13 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte12 & 63) << 8) | byte13;
-        final long byte14 = blocks[blocksOffset++] & 0xFF;
-        final long byte15 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte14 << 6) | (byte15 >>> 2);
-        final long byte16 = blocks[blocksOffset++] & 0xFF;
-        final long byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte15 & 3) << 12) | (byte16 << 4) | (byte17 >>> 4);
-        final long byte18 = blocks[blocksOffset++] & 0xFF;
-        final long byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte17 & 15) << 10) | (byte18 << 2) | (byte19 >>> 6);
-        final long byte20 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte19 & 63) << 8) | byte20;
-        final long byte21 = blocks[blocksOffset++] & 0xFF;
-        final long byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte21 << 6) | (byte22 >>> 2);
-        final long byte23 = blocks[blocksOffset++] & 0xFF;
-        final long byte24 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 3) << 12) | (byte23 << 4) | (byte24 >>> 4);
-        final long byte25 = blocks[blocksOffset++] & 0xFF;
-        final long byte26 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte24 & 15) << 10) | (byte25 << 2) | (byte26 >>> 6);
-        final long byte27 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte26 & 63) << 8) | byte27;
-        final long byte28 = blocks[blocksOffset++] & 0xFF;
-        final long byte29 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte28 << 6) | (byte29 >>> 2);
-        final long byte30 = blocks[blocksOffset++] & 0xFF;
-        final long byte31 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte29 & 3) << 12) | (byte30 << 4) | (byte31 >>> 4);
-        final long byte32 = blocks[blocksOffset++] & 0xFF;
-        final long byte33 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte31 & 15) << 10) | (byte32 << 2) | (byte33 >>> 6);
-        final long byte34 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte33 & 63) << 8) | byte34;
-        final long byte35 = blocks[blocksOffset++] & 0xFF;
-        final long byte36 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte35 << 6) | (byte36 >>> 2);
-        final long byte37 = blocks[blocksOffset++] & 0xFF;
-        final long byte38 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte36 & 3) << 12) | (byte37 << 4) | (byte38 >>> 4);
-        final long byte39 = blocks[blocksOffset++] & 0xFF;
-        final long byte40 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte38 & 15) << 10) | (byte39 << 2) | (byte40 >>> 6);
-        final long byte41 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte40 & 63) << 8) | byte41;
-        final long byte42 = blocks[blocksOffset++] & 0xFF;
-        final long byte43 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte42 << 6) | (byte43 >>> 2);
-        final long byte44 = blocks[blocksOffset++] & 0xFF;
-        final long byte45 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte43 & 3) << 12) | (byte44 << 4) | (byte45 >>> 4);
-        final long byte46 = blocks[blocksOffset++] & 0xFF;
-        final long byte47 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte45 & 15) << 10) | (byte46 << 2) | (byte47 >>> 6);
-        final long byte48 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte47 & 63) << 8) | byte48;
-        final long byte49 = blocks[blocksOffset++] & 0xFF;
-        final long byte50 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte49 << 6) | (byte50 >>> 2);
-        final long byte51 = blocks[blocksOffset++] & 0xFF;
-        final long byte52 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte50 & 3) << 12) | (byte51 << 4) | (byte52 >>> 4);
-        final long byte53 = blocks[blocksOffset++] & 0xFF;
-        final long byte54 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte52 & 15) << 10) | (byte53 << 2) | (byte54 >>> 6);
-        final long byte55 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte54 & 63) << 8) | byte55;
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked15.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked15.java
index 9a7300a4..f280ec95 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked15.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked15.java
@@ -32,8 +32,6 @@ public BulkOperationPacked15() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = (int) (block0 >>> 49);
@@ -119,9 +117,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final int byte0 = blocks[blocksOffset++] & 0xFF;
         final int byte1 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = (byte0 << 7) | (byte1 >>> 1);
@@ -145,174 +141,11 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
         values[valuesOffset++] = ((byte11 & 63) << 9) | (byte12 << 1) | (byte13 >>> 7);
         final int byte14 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte13 & 127) << 8) | byte14;
-        final int byte15 = blocks[blocksOffset++] & 0xFF;
-        final int byte16 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte15 << 7) | (byte16 >>> 1);
-        final int byte17 = blocks[blocksOffset++] & 0xFF;
-        final int byte18 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte16 & 1) << 14) | (byte17 << 6) | (byte18 >>> 2);
-        final int byte19 = blocks[blocksOffset++] & 0xFF;
-        final int byte20 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte18 & 3) << 13) | (byte19 << 5) | (byte20 >>> 3);
-        final int byte21 = blocks[blocksOffset++] & 0xFF;
-        final int byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte20 & 7) << 12) | (byte21 << 4) | (byte22 >>> 4);
-        final int byte23 = blocks[blocksOffset++] & 0xFF;
-        final int byte24 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 15) << 11) | (byte23 << 3) | (byte24 >>> 5);
-        final int byte25 = blocks[blocksOffset++] & 0xFF;
-        final int byte26 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte24 & 31) << 10) | (byte25 << 2) | (byte26 >>> 6);
-        final int byte27 = blocks[blocksOffset++] & 0xFF;
-        final int byte28 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte26 & 63) << 9) | (byte27 << 1) | (byte28 >>> 7);
-        final int byte29 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte28 & 127) << 8) | byte29;
-        final int byte30 = blocks[blocksOffset++] & 0xFF;
-        final int byte31 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte30 << 7) | (byte31 >>> 1);
-        final int byte32 = blocks[blocksOffset++] & 0xFF;
-        final int byte33 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte31 & 1) << 14) | (byte32 << 6) | (byte33 >>> 2);
-        final int byte34 = blocks[blocksOffset++] & 0xFF;
-        final int byte35 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte33 & 3) << 13) | (byte34 << 5) | (byte35 >>> 3);
-        final int byte36 = blocks[blocksOffset++] & 0xFF;
-        final int byte37 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte35 & 7) << 12) | (byte36 << 4) | (byte37 >>> 4);
-        final int byte38 = blocks[blocksOffset++] & 0xFF;
-        final int byte39 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte37 & 15) << 11) | (byte38 << 3) | (byte39 >>> 5);
-        final int byte40 = blocks[blocksOffset++] & 0xFF;
-        final int byte41 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte39 & 31) << 10) | (byte40 << 2) | (byte41 >>> 6);
-        final int byte42 = blocks[blocksOffset++] & 0xFF;
-        final int byte43 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte41 & 63) << 9) | (byte42 << 1) | (byte43 >>> 7);
-        final int byte44 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte43 & 127) << 8) | byte44;
-        final int byte45 = blocks[blocksOffset++] & 0xFF;
-        final int byte46 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte45 << 7) | (byte46 >>> 1);
-        final int byte47 = blocks[blocksOffset++] & 0xFF;
-        final int byte48 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte46 & 1) << 14) | (byte47 << 6) | (byte48 >>> 2);
-        final int byte49 = blocks[blocksOffset++] & 0xFF;
-        final int byte50 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte48 & 3) << 13) | (byte49 << 5) | (byte50 >>> 3);
-        final int byte51 = blocks[blocksOffset++] & 0xFF;
-        final int byte52 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte50 & 7) << 12) | (byte51 << 4) | (byte52 >>> 4);
-        final int byte53 = blocks[blocksOffset++] & 0xFF;
-        final int byte54 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte52 & 15) << 11) | (byte53 << 3) | (byte54 >>> 5);
-        final int byte55 = blocks[blocksOffset++] & 0xFF;
-        final int byte56 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte54 & 31) << 10) | (byte55 << 2) | (byte56 >>> 6);
-        final int byte57 = blocks[blocksOffset++] & 0xFF;
-        final int byte58 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte56 & 63) << 9) | (byte57 << 1) | (byte58 >>> 7);
-        final int byte59 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte58 & 127) << 8) | byte59;
-        final int byte60 = blocks[blocksOffset++] & 0xFF;
-        final int byte61 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte60 << 7) | (byte61 >>> 1);
-        final int byte62 = blocks[blocksOffset++] & 0xFF;
-        final int byte63 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte61 & 1) << 14) | (byte62 << 6) | (byte63 >>> 2);
-        final int byte64 = blocks[blocksOffset++] & 0xFF;
-        final int byte65 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte63 & 3) << 13) | (byte64 << 5) | (byte65 >>> 3);
-        final int byte66 = blocks[blocksOffset++] & 0xFF;
-        final int byte67 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte65 & 7) << 12) | (byte66 << 4) | (byte67 >>> 4);
-        final int byte68 = blocks[blocksOffset++] & 0xFF;
-        final int byte69 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte67 & 15) << 11) | (byte68 << 3) | (byte69 >>> 5);
-        final int byte70 = blocks[blocksOffset++] & 0xFF;
-        final int byte71 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte69 & 31) << 10) | (byte70 << 2) | (byte71 >>> 6);
-        final int byte72 = blocks[blocksOffset++] & 0xFF;
-        final int byte73 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte71 & 63) << 9) | (byte72 << 1) | (byte73 >>> 7);
-        final int byte74 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte73 & 127) << 8) | byte74;
-        final int byte75 = blocks[blocksOffset++] & 0xFF;
-        final int byte76 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte75 << 7) | (byte76 >>> 1);
-        final int byte77 = blocks[blocksOffset++] & 0xFF;
-        final int byte78 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte76 & 1) << 14) | (byte77 << 6) | (byte78 >>> 2);
-        final int byte79 = blocks[blocksOffset++] & 0xFF;
-        final int byte80 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte78 & 3) << 13) | (byte79 << 5) | (byte80 >>> 3);
-        final int byte81 = blocks[blocksOffset++] & 0xFF;
-        final int byte82 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte80 & 7) << 12) | (byte81 << 4) | (byte82 >>> 4);
-        final int byte83 = blocks[blocksOffset++] & 0xFF;
-        final int byte84 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte82 & 15) << 11) | (byte83 << 3) | (byte84 >>> 5);
-        final int byte85 = blocks[blocksOffset++] & 0xFF;
-        final int byte86 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte84 & 31) << 10) | (byte85 << 2) | (byte86 >>> 6);
-        final int byte87 = blocks[blocksOffset++] & 0xFF;
-        final int byte88 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte86 & 63) << 9) | (byte87 << 1) | (byte88 >>> 7);
-        final int byte89 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte88 & 127) << 8) | byte89;
-        final int byte90 = blocks[blocksOffset++] & 0xFF;
-        final int byte91 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte90 << 7) | (byte91 >>> 1);
-        final int byte92 = blocks[blocksOffset++] & 0xFF;
-        final int byte93 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte91 & 1) << 14) | (byte92 << 6) | (byte93 >>> 2);
-        final int byte94 = blocks[blocksOffset++] & 0xFF;
-        final int byte95 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte93 & 3) << 13) | (byte94 << 5) | (byte95 >>> 3);
-        final int byte96 = blocks[blocksOffset++] & 0xFF;
-        final int byte97 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte95 & 7) << 12) | (byte96 << 4) | (byte97 >>> 4);
-        final int byte98 = blocks[blocksOffset++] & 0xFF;
-        final int byte99 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte97 & 15) << 11) | (byte98 << 3) | (byte99 >>> 5);
-        final int byte100 = blocks[blocksOffset++] & 0xFF;
-        final int byte101 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte99 & 31) << 10) | (byte100 << 2) | (byte101 >>> 6);
-        final int byte102 = blocks[blocksOffset++] & 0xFF;
-        final int byte103 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte101 & 63) << 9) | (byte102 << 1) | (byte103 >>> 7);
-        final int byte104 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte103 & 127) << 8) | byte104;
-        final int byte105 = blocks[blocksOffset++] & 0xFF;
-        final int byte106 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte105 << 7) | (byte106 >>> 1);
-        final int byte107 = blocks[blocksOffset++] & 0xFF;
-        final int byte108 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte106 & 1) << 14) | (byte107 << 6) | (byte108 >>> 2);
-        final int byte109 = blocks[blocksOffset++] & 0xFF;
-        final int byte110 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte108 & 3) << 13) | (byte109 << 5) | (byte110 >>> 3);
-        final int byte111 = blocks[blocksOffset++] & 0xFF;
-        final int byte112 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte110 & 7) << 12) | (byte111 << 4) | (byte112 >>> 4);
-        final int byte113 = blocks[blocksOffset++] & 0xFF;
-        final int byte114 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte112 & 15) << 11) | (byte113 << 3) | (byte114 >>> 5);
-        final int byte115 = blocks[blocksOffset++] & 0xFF;
-        final int byte116 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte114 & 31) << 10) | (byte115 << 2) | (byte116 >>> 6);
-        final int byte117 = blocks[blocksOffset++] & 0xFF;
-        final int byte118 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte116 & 63) << 9) | (byte117 << 1) | (byte118 >>> 7);
-        final int byte119 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte118 & 127) << 8) | byte119;
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = block0 >>> 49;
@@ -398,9 +231,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final long byte0 = blocks[blocksOffset++] & 0xFF;
         final long byte1 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = (byte0 << 7) | (byte1 >>> 1);
@@ -424,167 +255,6 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
         values[valuesOffset++] = ((byte11 & 63) << 9) | (byte12 << 1) | (byte13 >>> 7);
         final long byte14 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte13 & 127) << 8) | byte14;
-        final long byte15 = blocks[blocksOffset++] & 0xFF;
-        final long byte16 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte15 << 7) | (byte16 >>> 1);
-        final long byte17 = blocks[blocksOffset++] & 0xFF;
-        final long byte18 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte16 & 1) << 14) | (byte17 << 6) | (byte18 >>> 2);
-        final long byte19 = blocks[blocksOffset++] & 0xFF;
-        final long byte20 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte18 & 3) << 13) | (byte19 << 5) | (byte20 >>> 3);
-        final long byte21 = blocks[blocksOffset++] & 0xFF;
-        final long byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte20 & 7) << 12) | (byte21 << 4) | (byte22 >>> 4);
-        final long byte23 = blocks[blocksOffset++] & 0xFF;
-        final long byte24 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 15) << 11) | (byte23 << 3) | (byte24 >>> 5);
-        final long byte25 = blocks[blocksOffset++] & 0xFF;
-        final long byte26 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte24 & 31) << 10) | (byte25 << 2) | (byte26 >>> 6);
-        final long byte27 = blocks[blocksOffset++] & 0xFF;
-        final long byte28 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte26 & 63) << 9) | (byte27 << 1) | (byte28 >>> 7);
-        final long byte29 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte28 & 127) << 8) | byte29;
-        final long byte30 = blocks[blocksOffset++] & 0xFF;
-        final long byte31 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte30 << 7) | (byte31 >>> 1);
-        final long byte32 = blocks[blocksOffset++] & 0xFF;
-        final long byte33 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte31 & 1) << 14) | (byte32 << 6) | (byte33 >>> 2);
-        final long byte34 = blocks[blocksOffset++] & 0xFF;
-        final long byte35 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte33 & 3) << 13) | (byte34 << 5) | (byte35 >>> 3);
-        final long byte36 = blocks[blocksOffset++] & 0xFF;
-        final long byte37 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte35 & 7) << 12) | (byte36 << 4) | (byte37 >>> 4);
-        final long byte38 = blocks[blocksOffset++] & 0xFF;
-        final long byte39 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte37 & 15) << 11) | (byte38 << 3) | (byte39 >>> 5);
-        final long byte40 = blocks[blocksOffset++] & 0xFF;
-        final long byte41 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte39 & 31) << 10) | (byte40 << 2) | (byte41 >>> 6);
-        final long byte42 = blocks[blocksOffset++] & 0xFF;
-        final long byte43 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte41 & 63) << 9) | (byte42 << 1) | (byte43 >>> 7);
-        final long byte44 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte43 & 127) << 8) | byte44;
-        final long byte45 = blocks[blocksOffset++] & 0xFF;
-        final long byte46 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte45 << 7) | (byte46 >>> 1);
-        final long byte47 = blocks[blocksOffset++] & 0xFF;
-        final long byte48 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte46 & 1) << 14) | (byte47 << 6) | (byte48 >>> 2);
-        final long byte49 = blocks[blocksOffset++] & 0xFF;
-        final long byte50 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte48 & 3) << 13) | (byte49 << 5) | (byte50 >>> 3);
-        final long byte51 = blocks[blocksOffset++] & 0xFF;
-        final long byte52 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte50 & 7) << 12) | (byte51 << 4) | (byte52 >>> 4);
-        final long byte53 = blocks[blocksOffset++] & 0xFF;
-        final long byte54 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte52 & 15) << 11) | (byte53 << 3) | (byte54 >>> 5);
-        final long byte55 = blocks[blocksOffset++] & 0xFF;
-        final long byte56 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte54 & 31) << 10) | (byte55 << 2) | (byte56 >>> 6);
-        final long byte57 = blocks[blocksOffset++] & 0xFF;
-        final long byte58 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte56 & 63) << 9) | (byte57 << 1) | (byte58 >>> 7);
-        final long byte59 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte58 & 127) << 8) | byte59;
-        final long byte60 = blocks[blocksOffset++] & 0xFF;
-        final long byte61 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte60 << 7) | (byte61 >>> 1);
-        final long byte62 = blocks[blocksOffset++] & 0xFF;
-        final long byte63 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte61 & 1) << 14) | (byte62 << 6) | (byte63 >>> 2);
-        final long byte64 = blocks[blocksOffset++] & 0xFF;
-        final long byte65 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte63 & 3) << 13) | (byte64 << 5) | (byte65 >>> 3);
-        final long byte66 = blocks[blocksOffset++] & 0xFF;
-        final long byte67 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte65 & 7) << 12) | (byte66 << 4) | (byte67 >>> 4);
-        final long byte68 = blocks[blocksOffset++] & 0xFF;
-        final long byte69 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte67 & 15) << 11) | (byte68 << 3) | (byte69 >>> 5);
-        final long byte70 = blocks[blocksOffset++] & 0xFF;
-        final long byte71 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte69 & 31) << 10) | (byte70 << 2) | (byte71 >>> 6);
-        final long byte72 = blocks[blocksOffset++] & 0xFF;
-        final long byte73 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte71 & 63) << 9) | (byte72 << 1) | (byte73 >>> 7);
-        final long byte74 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte73 & 127) << 8) | byte74;
-        final long byte75 = blocks[blocksOffset++] & 0xFF;
-        final long byte76 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte75 << 7) | (byte76 >>> 1);
-        final long byte77 = blocks[blocksOffset++] & 0xFF;
-        final long byte78 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte76 & 1) << 14) | (byte77 << 6) | (byte78 >>> 2);
-        final long byte79 = blocks[blocksOffset++] & 0xFF;
-        final long byte80 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte78 & 3) << 13) | (byte79 << 5) | (byte80 >>> 3);
-        final long byte81 = blocks[blocksOffset++] & 0xFF;
-        final long byte82 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte80 & 7) << 12) | (byte81 << 4) | (byte82 >>> 4);
-        final long byte83 = blocks[blocksOffset++] & 0xFF;
-        final long byte84 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte82 & 15) << 11) | (byte83 << 3) | (byte84 >>> 5);
-        final long byte85 = blocks[blocksOffset++] & 0xFF;
-        final long byte86 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte84 & 31) << 10) | (byte85 << 2) | (byte86 >>> 6);
-        final long byte87 = blocks[blocksOffset++] & 0xFF;
-        final long byte88 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte86 & 63) << 9) | (byte87 << 1) | (byte88 >>> 7);
-        final long byte89 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte88 & 127) << 8) | byte89;
-        final long byte90 = blocks[blocksOffset++] & 0xFF;
-        final long byte91 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte90 << 7) | (byte91 >>> 1);
-        final long byte92 = blocks[blocksOffset++] & 0xFF;
-        final long byte93 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte91 & 1) << 14) | (byte92 << 6) | (byte93 >>> 2);
-        final long byte94 = blocks[blocksOffset++] & 0xFF;
-        final long byte95 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte93 & 3) << 13) | (byte94 << 5) | (byte95 >>> 3);
-        final long byte96 = blocks[blocksOffset++] & 0xFF;
-        final long byte97 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte95 & 7) << 12) | (byte96 << 4) | (byte97 >>> 4);
-        final long byte98 = blocks[blocksOffset++] & 0xFF;
-        final long byte99 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte97 & 15) << 11) | (byte98 << 3) | (byte99 >>> 5);
-        final long byte100 = blocks[blocksOffset++] & 0xFF;
-        final long byte101 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte99 & 31) << 10) | (byte100 << 2) | (byte101 >>> 6);
-        final long byte102 = blocks[blocksOffset++] & 0xFF;
-        final long byte103 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte101 & 63) << 9) | (byte102 << 1) | (byte103 >>> 7);
-        final long byte104 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte103 & 127) << 8) | byte104;
-        final long byte105 = blocks[blocksOffset++] & 0xFF;
-        final long byte106 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte105 << 7) | (byte106 >>> 1);
-        final long byte107 = blocks[blocksOffset++] & 0xFF;
-        final long byte108 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte106 & 1) << 14) | (byte107 << 6) | (byte108 >>> 2);
-        final long byte109 = blocks[blocksOffset++] & 0xFF;
-        final long byte110 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte108 & 3) << 13) | (byte109 << 5) | (byte110 >>> 3);
-        final long byte111 = blocks[blocksOffset++] & 0xFF;
-        final long byte112 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte110 & 7) << 12) | (byte111 << 4) | (byte112 >>> 4);
-        final long byte113 = blocks[blocksOffset++] & 0xFF;
-        final long byte114 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte112 & 15) << 11) | (byte113 << 3) | (byte114 >>> 5);
-        final long byte115 = blocks[blocksOffset++] & 0xFF;
-        final long byte116 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte114 & 31) << 10) | (byte115 << 2) | (byte116 >>> 6);
-        final long byte117 = blocks[blocksOffset++] & 0xFF;
-        final long byte118 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte116 & 63) << 9) | (byte117 << 1) | (byte118 >>> 7);
-        final long byte119 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte118 & 127) << 8) | byte119;
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked16.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked16.java
index a891b395..a4d1c2ef 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked16.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked16.java
@@ -32,67 +32,35 @@ public BulkOperationPacked16() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
-        final long block0 = blocks[blocksOffset++];
-        values[valuesOffset++] = (int) (block0 >>> 48);
-        values[valuesOffset++] = (int) ((block0 >>> 32) & 65535L);
-        values[valuesOffset++] = (int) ((block0 >>> 16) & 65535L);
-        values[valuesOffset++] = (int) (block0 & 65535L);
+      final long block = blocks[blocksOffset++];
+      for (int shift = 48; shift >= 0; shift -= 16) {
+        values[valuesOffset++] = (int) ((block >>> shift) & 65535);
+      }
       }
     }
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte0 << 8) | byte1;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte2 << 8) | byte3;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte4 << 8) | byte5;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte6 << 8) | byte7;
+    for (int j = 0; j < 4 * iterations; ++j) {
+      values[valuesOffset++] = ((blocks[blocksOffset++] & 0xFF) << 8) | (blocks[blocksOffset++] & 0xFF);
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
-        final long block0 = blocks[blocksOffset++];
-        values[valuesOffset++] = block0 >>> 48;
-        values[valuesOffset++] = (block0 >>> 32) & 65535L;
-        values[valuesOffset++] = (block0 >>> 16) & 65535L;
-        values[valuesOffset++] = block0 & 65535L;
+      final long block = blocks[blocksOffset++];
+      for (int shift = 48; shift >= 0; shift -= 16) {
+        values[valuesOffset++] = (block >>> shift) & 65535;
+      }
       }
     }
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long byte0 = blocks[blocksOffset++] & 0xFF;
-        final long byte1 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte0 << 8) | byte1;
-        final long byte2 = blocks[blocksOffset++] & 0xFF;
-        final long byte3 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte2 << 8) | byte3;
-        final long byte4 = blocks[blocksOffset++] & 0xFF;
-        final long byte5 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte4 << 8) | byte5;
-        final long byte6 = blocks[blocksOffset++] & 0xFF;
-        final long byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte6 << 8) | byte7;
+    for (int j = 0; j < 4 * iterations; ++j) {
+      values[valuesOffset++] = ((blocks[blocksOffset++] & 0xFFL) << 8) | (blocks[blocksOffset++] & 0xFFL);
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked17.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked17.java
index 31893b57..b816ba6c 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked17.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked17.java
@@ -32,8 +32,6 @@ public BulkOperationPacked17() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = (int) (block0 >>> 47);
@@ -121,9 +119,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final int byte0 = blocks[blocksOffset++] & 0xFF;
         final int byte1 = blocks[blocksOffset++] & 0xFF;
         final int byte2 = blocks[blocksOffset++] & 0xFF;
@@ -149,188 +145,11 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
         final int byte15 = blocks[blocksOffset++] & 0xFF;
         final int byte16 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte14 & 1) << 16) | (byte15 << 8) | byte16;
-        final int byte17 = blocks[blocksOffset++] & 0xFF;
-        final int byte18 = blocks[blocksOffset++] & 0xFF;
-        final int byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte17 << 9) | (byte18 << 1) | (byte19 >>> 7);
-        final int byte20 = blocks[blocksOffset++] & 0xFF;
-        final int byte21 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte19 & 127) << 10) | (byte20 << 2) | (byte21 >>> 6);
-        final int byte22 = blocks[blocksOffset++] & 0xFF;
-        final int byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte21 & 63) << 11) | (byte22 << 3) | (byte23 >>> 5);
-        final int byte24 = blocks[blocksOffset++] & 0xFF;
-        final int byte25 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte23 & 31) << 12) | (byte24 << 4) | (byte25 >>> 4);
-        final int byte26 = blocks[blocksOffset++] & 0xFF;
-        final int byte27 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte25 & 15) << 13) | (byte26 << 5) | (byte27 >>> 3);
-        final int byte28 = blocks[blocksOffset++] & 0xFF;
-        final int byte29 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte27 & 7) << 14) | (byte28 << 6) | (byte29 >>> 2);
-        final int byte30 = blocks[blocksOffset++] & 0xFF;
-        final int byte31 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte29 & 3) << 15) | (byte30 << 7) | (byte31 >>> 1);
-        final int byte32 = blocks[blocksOffset++] & 0xFF;
-        final int byte33 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte31 & 1) << 16) | (byte32 << 8) | byte33;
-        final int byte34 = blocks[blocksOffset++] & 0xFF;
-        final int byte35 = blocks[blocksOffset++] & 0xFF;
-        final int byte36 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte34 << 9) | (byte35 << 1) | (byte36 >>> 7);
-        final int byte37 = blocks[blocksOffset++] & 0xFF;
-        final int byte38 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte36 & 127) << 10) | (byte37 << 2) | (byte38 >>> 6);
-        final int byte39 = blocks[blocksOffset++] & 0xFF;
-        final int byte40 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte38 & 63) << 11) | (byte39 << 3) | (byte40 >>> 5);
-        final int byte41 = blocks[blocksOffset++] & 0xFF;
-        final int byte42 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte40 & 31) << 12) | (byte41 << 4) | (byte42 >>> 4);
-        final int byte43 = blocks[blocksOffset++] & 0xFF;
-        final int byte44 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte42 & 15) << 13) | (byte43 << 5) | (byte44 >>> 3);
-        final int byte45 = blocks[blocksOffset++] & 0xFF;
-        final int byte46 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte44 & 7) << 14) | (byte45 << 6) | (byte46 >>> 2);
-        final int byte47 = blocks[blocksOffset++] & 0xFF;
-        final int byte48 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte46 & 3) << 15) | (byte47 << 7) | (byte48 >>> 1);
-        final int byte49 = blocks[blocksOffset++] & 0xFF;
-        final int byte50 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte48 & 1) << 16) | (byte49 << 8) | byte50;
-        final int byte51 = blocks[blocksOffset++] & 0xFF;
-        final int byte52 = blocks[blocksOffset++] & 0xFF;
-        final int byte53 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte51 << 9) | (byte52 << 1) | (byte53 >>> 7);
-        final int byte54 = blocks[blocksOffset++] & 0xFF;
-        final int byte55 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte53 & 127) << 10) | (byte54 << 2) | (byte55 >>> 6);
-        final int byte56 = blocks[blocksOffset++] & 0xFF;
-        final int byte57 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte55 & 63) << 11) | (byte56 << 3) | (byte57 >>> 5);
-        final int byte58 = blocks[blocksOffset++] & 0xFF;
-        final int byte59 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte57 & 31) << 12) | (byte58 << 4) | (byte59 >>> 4);
-        final int byte60 = blocks[blocksOffset++] & 0xFF;
-        final int byte61 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte59 & 15) << 13) | (byte60 << 5) | (byte61 >>> 3);
-        final int byte62 = blocks[blocksOffset++] & 0xFF;
-        final int byte63 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte61 & 7) << 14) | (byte62 << 6) | (byte63 >>> 2);
-        final int byte64 = blocks[blocksOffset++] & 0xFF;
-        final int byte65 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte63 & 3) << 15) | (byte64 << 7) | (byte65 >>> 1);
-        final int byte66 = blocks[blocksOffset++] & 0xFF;
-        final int byte67 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte65 & 1) << 16) | (byte66 << 8) | byte67;
-        final int byte68 = blocks[blocksOffset++] & 0xFF;
-        final int byte69 = blocks[blocksOffset++] & 0xFF;
-        final int byte70 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte68 << 9) | (byte69 << 1) | (byte70 >>> 7);
-        final int byte71 = blocks[blocksOffset++] & 0xFF;
-        final int byte72 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte70 & 127) << 10) | (byte71 << 2) | (byte72 >>> 6);
-        final int byte73 = blocks[blocksOffset++] & 0xFF;
-        final int byte74 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte72 & 63) << 11) | (byte73 << 3) | (byte74 >>> 5);
-        final int byte75 = blocks[blocksOffset++] & 0xFF;
-        final int byte76 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte74 & 31) << 12) | (byte75 << 4) | (byte76 >>> 4);
-        final int byte77 = blocks[blocksOffset++] & 0xFF;
-        final int byte78 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte76 & 15) << 13) | (byte77 << 5) | (byte78 >>> 3);
-        final int byte79 = blocks[blocksOffset++] & 0xFF;
-        final int byte80 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte78 & 7) << 14) | (byte79 << 6) | (byte80 >>> 2);
-        final int byte81 = blocks[blocksOffset++] & 0xFF;
-        final int byte82 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte80 & 3) << 15) | (byte81 << 7) | (byte82 >>> 1);
-        final int byte83 = blocks[blocksOffset++] & 0xFF;
-        final int byte84 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte82 & 1) << 16) | (byte83 << 8) | byte84;
-        final int byte85 = blocks[blocksOffset++] & 0xFF;
-        final int byte86 = blocks[blocksOffset++] & 0xFF;
-        final int byte87 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte85 << 9) | (byte86 << 1) | (byte87 >>> 7);
-        final int byte88 = blocks[blocksOffset++] & 0xFF;
-        final int byte89 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte87 & 127) << 10) | (byte88 << 2) | (byte89 >>> 6);
-        final int byte90 = blocks[blocksOffset++] & 0xFF;
-        final int byte91 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte89 & 63) << 11) | (byte90 << 3) | (byte91 >>> 5);
-        final int byte92 = blocks[blocksOffset++] & 0xFF;
-        final int byte93 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte91 & 31) << 12) | (byte92 << 4) | (byte93 >>> 4);
-        final int byte94 = blocks[blocksOffset++] & 0xFF;
-        final int byte95 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte93 & 15) << 13) | (byte94 << 5) | (byte95 >>> 3);
-        final int byte96 = blocks[blocksOffset++] & 0xFF;
-        final int byte97 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte95 & 7) << 14) | (byte96 << 6) | (byte97 >>> 2);
-        final int byte98 = blocks[blocksOffset++] & 0xFF;
-        final int byte99 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte97 & 3) << 15) | (byte98 << 7) | (byte99 >>> 1);
-        final int byte100 = blocks[blocksOffset++] & 0xFF;
-        final int byte101 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte99 & 1) << 16) | (byte100 << 8) | byte101;
-        final int byte102 = blocks[blocksOffset++] & 0xFF;
-        final int byte103 = blocks[blocksOffset++] & 0xFF;
-        final int byte104 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte102 << 9) | (byte103 << 1) | (byte104 >>> 7);
-        final int byte105 = blocks[blocksOffset++] & 0xFF;
-        final int byte106 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte104 & 127) << 10) | (byte105 << 2) | (byte106 >>> 6);
-        final int byte107 = blocks[blocksOffset++] & 0xFF;
-        final int byte108 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte106 & 63) << 11) | (byte107 << 3) | (byte108 >>> 5);
-        final int byte109 = blocks[blocksOffset++] & 0xFF;
-        final int byte110 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte108 & 31) << 12) | (byte109 << 4) | (byte110 >>> 4);
-        final int byte111 = blocks[blocksOffset++] & 0xFF;
-        final int byte112 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte110 & 15) << 13) | (byte111 << 5) | (byte112 >>> 3);
-        final int byte113 = blocks[blocksOffset++] & 0xFF;
-        final int byte114 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte112 & 7) << 14) | (byte113 << 6) | (byte114 >>> 2);
-        final int byte115 = blocks[blocksOffset++] & 0xFF;
-        final int byte116 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte114 & 3) << 15) | (byte115 << 7) | (byte116 >>> 1);
-        final int byte117 = blocks[blocksOffset++] & 0xFF;
-        final int byte118 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte116 & 1) << 16) | (byte117 << 8) | byte118;
-        final int byte119 = blocks[blocksOffset++] & 0xFF;
-        final int byte120 = blocks[blocksOffset++] & 0xFF;
-        final int byte121 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte119 << 9) | (byte120 << 1) | (byte121 >>> 7);
-        final int byte122 = blocks[blocksOffset++] & 0xFF;
-        final int byte123 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte121 & 127) << 10) | (byte122 << 2) | (byte123 >>> 6);
-        final int byte124 = blocks[blocksOffset++] & 0xFF;
-        final int byte125 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte123 & 63) << 11) | (byte124 << 3) | (byte125 >>> 5);
-        final int byte126 = blocks[blocksOffset++] & 0xFF;
-        final int byte127 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte125 & 31) << 12) | (byte126 << 4) | (byte127 >>> 4);
-        final int byte128 = blocks[blocksOffset++] & 0xFF;
-        final int byte129 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte127 & 15) << 13) | (byte128 << 5) | (byte129 >>> 3);
-        final int byte130 = blocks[blocksOffset++] & 0xFF;
-        final int byte131 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte129 & 7) << 14) | (byte130 << 6) | (byte131 >>> 2);
-        final int byte132 = blocks[blocksOffset++] & 0xFF;
-        final int byte133 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte131 & 3) << 15) | (byte132 << 7) | (byte133 >>> 1);
-        final int byte134 = blocks[blocksOffset++] & 0xFF;
-        final int byte135 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte133 & 1) << 16) | (byte134 << 8) | byte135;
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = block0 >>> 47;
@@ -418,9 +237,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final long byte0 = blocks[blocksOffset++] & 0xFF;
         final long byte1 = blocks[blocksOffset++] & 0xFF;
         final long byte2 = blocks[blocksOffset++] & 0xFF;
@@ -446,181 +263,6 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
         final long byte15 = blocks[blocksOffset++] & 0xFF;
         final long byte16 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte14 & 1) << 16) | (byte15 << 8) | byte16;
-        final long byte17 = blocks[blocksOffset++] & 0xFF;
-        final long byte18 = blocks[blocksOffset++] & 0xFF;
-        final long byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte17 << 9) | (byte18 << 1) | (byte19 >>> 7);
-        final long byte20 = blocks[blocksOffset++] & 0xFF;
-        final long byte21 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte19 & 127) << 10) | (byte20 << 2) | (byte21 >>> 6);
-        final long byte22 = blocks[blocksOffset++] & 0xFF;
-        final long byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte21 & 63) << 11) | (byte22 << 3) | (byte23 >>> 5);
-        final long byte24 = blocks[blocksOffset++] & 0xFF;
-        final long byte25 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte23 & 31) << 12) | (byte24 << 4) | (byte25 >>> 4);
-        final long byte26 = blocks[blocksOffset++] & 0xFF;
-        final long byte27 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte25 & 15) << 13) | (byte26 << 5) | (byte27 >>> 3);
-        final long byte28 = blocks[blocksOffset++] & 0xFF;
-        final long byte29 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte27 & 7) << 14) | (byte28 << 6) | (byte29 >>> 2);
-        final long byte30 = blocks[blocksOffset++] & 0xFF;
-        final long byte31 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte29 & 3) << 15) | (byte30 << 7) | (byte31 >>> 1);
-        final long byte32 = blocks[blocksOffset++] & 0xFF;
-        final long byte33 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte31 & 1) << 16) | (byte32 << 8) | byte33;
-        final long byte34 = blocks[blocksOffset++] & 0xFF;
-        final long byte35 = blocks[blocksOffset++] & 0xFF;
-        final long byte36 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte34 << 9) | (byte35 << 1) | (byte36 >>> 7);
-        final long byte37 = blocks[blocksOffset++] & 0xFF;
-        final long byte38 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte36 & 127) << 10) | (byte37 << 2) | (byte38 >>> 6);
-        final long byte39 = blocks[blocksOffset++] & 0xFF;
-        final long byte40 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte38 & 63) << 11) | (byte39 << 3) | (byte40 >>> 5);
-        final long byte41 = blocks[blocksOffset++] & 0xFF;
-        final long byte42 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte40 & 31) << 12) | (byte41 << 4) | (byte42 >>> 4);
-        final long byte43 = blocks[blocksOffset++] & 0xFF;
-        final long byte44 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte42 & 15) << 13) | (byte43 << 5) | (byte44 >>> 3);
-        final long byte45 = blocks[blocksOffset++] & 0xFF;
-        final long byte46 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte44 & 7) << 14) | (byte45 << 6) | (byte46 >>> 2);
-        final long byte47 = blocks[blocksOffset++] & 0xFF;
-        final long byte48 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte46 & 3) << 15) | (byte47 << 7) | (byte48 >>> 1);
-        final long byte49 = blocks[blocksOffset++] & 0xFF;
-        final long byte50 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte48 & 1) << 16) | (byte49 << 8) | byte50;
-        final long byte51 = blocks[blocksOffset++] & 0xFF;
-        final long byte52 = blocks[blocksOffset++] & 0xFF;
-        final long byte53 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte51 << 9) | (byte52 << 1) | (byte53 >>> 7);
-        final long byte54 = blocks[blocksOffset++] & 0xFF;
-        final long byte55 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte53 & 127) << 10) | (byte54 << 2) | (byte55 >>> 6);
-        final long byte56 = blocks[blocksOffset++] & 0xFF;
-        final long byte57 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte55 & 63) << 11) | (byte56 << 3) | (byte57 >>> 5);
-        final long byte58 = blocks[blocksOffset++] & 0xFF;
-        final long byte59 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte57 & 31) << 12) | (byte58 << 4) | (byte59 >>> 4);
-        final long byte60 = blocks[blocksOffset++] & 0xFF;
-        final long byte61 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte59 & 15) << 13) | (byte60 << 5) | (byte61 >>> 3);
-        final long byte62 = blocks[blocksOffset++] & 0xFF;
-        final long byte63 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte61 & 7) << 14) | (byte62 << 6) | (byte63 >>> 2);
-        final long byte64 = blocks[blocksOffset++] & 0xFF;
-        final long byte65 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte63 & 3) << 15) | (byte64 << 7) | (byte65 >>> 1);
-        final long byte66 = blocks[blocksOffset++] & 0xFF;
-        final long byte67 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte65 & 1) << 16) | (byte66 << 8) | byte67;
-        final long byte68 = blocks[blocksOffset++] & 0xFF;
-        final long byte69 = blocks[blocksOffset++] & 0xFF;
-        final long byte70 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte68 << 9) | (byte69 << 1) | (byte70 >>> 7);
-        final long byte71 = blocks[blocksOffset++] & 0xFF;
-        final long byte72 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte70 & 127) << 10) | (byte71 << 2) | (byte72 >>> 6);
-        final long byte73 = blocks[blocksOffset++] & 0xFF;
-        final long byte74 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte72 & 63) << 11) | (byte73 << 3) | (byte74 >>> 5);
-        final long byte75 = blocks[blocksOffset++] & 0xFF;
-        final long byte76 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte74 & 31) << 12) | (byte75 << 4) | (byte76 >>> 4);
-        final long byte77 = blocks[blocksOffset++] & 0xFF;
-        final long byte78 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte76 & 15) << 13) | (byte77 << 5) | (byte78 >>> 3);
-        final long byte79 = blocks[blocksOffset++] & 0xFF;
-        final long byte80 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte78 & 7) << 14) | (byte79 << 6) | (byte80 >>> 2);
-        final long byte81 = blocks[blocksOffset++] & 0xFF;
-        final long byte82 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte80 & 3) << 15) | (byte81 << 7) | (byte82 >>> 1);
-        final long byte83 = blocks[blocksOffset++] & 0xFF;
-        final long byte84 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte82 & 1) << 16) | (byte83 << 8) | byte84;
-        final long byte85 = blocks[blocksOffset++] & 0xFF;
-        final long byte86 = blocks[blocksOffset++] & 0xFF;
-        final long byte87 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte85 << 9) | (byte86 << 1) | (byte87 >>> 7);
-        final long byte88 = blocks[blocksOffset++] & 0xFF;
-        final long byte89 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte87 & 127) << 10) | (byte88 << 2) | (byte89 >>> 6);
-        final long byte90 = blocks[blocksOffset++] & 0xFF;
-        final long byte91 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte89 & 63) << 11) | (byte90 << 3) | (byte91 >>> 5);
-        final long byte92 = blocks[blocksOffset++] & 0xFF;
-        final long byte93 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte91 & 31) << 12) | (byte92 << 4) | (byte93 >>> 4);
-        final long byte94 = blocks[blocksOffset++] & 0xFF;
-        final long byte95 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte93 & 15) << 13) | (byte94 << 5) | (byte95 >>> 3);
-        final long byte96 = blocks[blocksOffset++] & 0xFF;
-        final long byte97 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte95 & 7) << 14) | (byte96 << 6) | (byte97 >>> 2);
-        final long byte98 = blocks[blocksOffset++] & 0xFF;
-        final long byte99 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte97 & 3) << 15) | (byte98 << 7) | (byte99 >>> 1);
-        final long byte100 = blocks[blocksOffset++] & 0xFF;
-        final long byte101 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte99 & 1) << 16) | (byte100 << 8) | byte101;
-        final long byte102 = blocks[blocksOffset++] & 0xFF;
-        final long byte103 = blocks[blocksOffset++] & 0xFF;
-        final long byte104 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte102 << 9) | (byte103 << 1) | (byte104 >>> 7);
-        final long byte105 = blocks[blocksOffset++] & 0xFF;
-        final long byte106 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte104 & 127) << 10) | (byte105 << 2) | (byte106 >>> 6);
-        final long byte107 = blocks[blocksOffset++] & 0xFF;
-        final long byte108 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte106 & 63) << 11) | (byte107 << 3) | (byte108 >>> 5);
-        final long byte109 = blocks[blocksOffset++] & 0xFF;
-        final long byte110 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte108 & 31) << 12) | (byte109 << 4) | (byte110 >>> 4);
-        final long byte111 = blocks[blocksOffset++] & 0xFF;
-        final long byte112 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte110 & 15) << 13) | (byte111 << 5) | (byte112 >>> 3);
-        final long byte113 = blocks[blocksOffset++] & 0xFF;
-        final long byte114 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte112 & 7) << 14) | (byte113 << 6) | (byte114 >>> 2);
-        final long byte115 = blocks[blocksOffset++] & 0xFF;
-        final long byte116 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte114 & 3) << 15) | (byte115 << 7) | (byte116 >>> 1);
-        final long byte117 = blocks[blocksOffset++] & 0xFF;
-        final long byte118 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte116 & 1) << 16) | (byte117 << 8) | byte118;
-        final long byte119 = blocks[blocksOffset++] & 0xFF;
-        final long byte120 = blocks[blocksOffset++] & 0xFF;
-        final long byte121 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte119 << 9) | (byte120 << 1) | (byte121 >>> 7);
-        final long byte122 = blocks[blocksOffset++] & 0xFF;
-        final long byte123 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte121 & 127) << 10) | (byte122 << 2) | (byte123 >>> 6);
-        final long byte124 = blocks[blocksOffset++] & 0xFF;
-        final long byte125 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte123 & 63) << 11) | (byte124 << 3) | (byte125 >>> 5);
-        final long byte126 = blocks[blocksOffset++] & 0xFF;
-        final long byte127 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte125 & 31) << 12) | (byte126 << 4) | (byte127 >>> 4);
-        final long byte128 = blocks[blocksOffset++] & 0xFF;
-        final long byte129 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte127 & 15) << 13) | (byte128 << 5) | (byte129 >>> 3);
-        final long byte130 = blocks[blocksOffset++] & 0xFF;
-        final long byte131 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte129 & 7) << 14) | (byte130 << 6) | (byte131 >>> 2);
-        final long byte132 = blocks[blocksOffset++] & 0xFF;
-        final long byte133 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte131 & 3) << 15) | (byte132 << 7) | (byte133 >>> 1);
-        final long byte134 = blocks[blocksOffset++] & 0xFF;
-        final long byte135 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte133 & 1) << 16) | (byte134 << 8) | byte135;
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked18.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked18.java
index 67d9c1a3..88b862a0 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked18.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked18.java
@@ -32,8 +32,6 @@ public BulkOperationPacked18() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = (int) (block0 >>> 46);
@@ -81,9 +79,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final int byte0 = blocks[blocksOffset++] & 0xFF;
         final int byte1 = blocks[blocksOffset++] & 0xFF;
         final int byte2 = blocks[blocksOffset++] & 0xFF;
@@ -97,104 +93,11 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
         final int byte7 = blocks[blocksOffset++] & 0xFF;
         final int byte8 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte6 & 3) << 16) | (byte7 << 8) | byte8;
-        final int byte9 = blocks[blocksOffset++] & 0xFF;
-        final int byte10 = blocks[blocksOffset++] & 0xFF;
-        final int byte11 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte9 << 10) | (byte10 << 2) | (byte11 >>> 6);
-        final int byte12 = blocks[blocksOffset++] & 0xFF;
-        final int byte13 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte11 & 63) << 12) | (byte12 << 4) | (byte13 >>> 4);
-        final int byte14 = blocks[blocksOffset++] & 0xFF;
-        final int byte15 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte13 & 15) << 14) | (byte14 << 6) | (byte15 >>> 2);
-        final int byte16 = blocks[blocksOffset++] & 0xFF;
-        final int byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte15 & 3) << 16) | (byte16 << 8) | byte17;
-        final int byte18 = blocks[blocksOffset++] & 0xFF;
-        final int byte19 = blocks[blocksOffset++] & 0xFF;
-        final int byte20 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte18 << 10) | (byte19 << 2) | (byte20 >>> 6);
-        final int byte21 = blocks[blocksOffset++] & 0xFF;
-        final int byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte20 & 63) << 12) | (byte21 << 4) | (byte22 >>> 4);
-        final int byte23 = blocks[blocksOffset++] & 0xFF;
-        final int byte24 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 15) << 14) | (byte23 << 6) | (byte24 >>> 2);
-        final int byte25 = blocks[blocksOffset++] & 0xFF;
-        final int byte26 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte24 & 3) << 16) | (byte25 << 8) | byte26;
-        final int byte27 = blocks[blocksOffset++] & 0xFF;
-        final int byte28 = blocks[blocksOffset++] & 0xFF;
-        final int byte29 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte27 << 10) | (byte28 << 2) | (byte29 >>> 6);
-        final int byte30 = blocks[blocksOffset++] & 0xFF;
-        final int byte31 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte29 & 63) << 12) | (byte30 << 4) | (byte31 >>> 4);
-        final int byte32 = blocks[blocksOffset++] & 0xFF;
-        final int byte33 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte31 & 15) << 14) | (byte32 << 6) | (byte33 >>> 2);
-        final int byte34 = blocks[blocksOffset++] & 0xFF;
-        final int byte35 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte33 & 3) << 16) | (byte34 << 8) | byte35;
-        final int byte36 = blocks[blocksOffset++] & 0xFF;
-        final int byte37 = blocks[blocksOffset++] & 0xFF;
-        final int byte38 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte36 << 10) | (byte37 << 2) | (byte38 >>> 6);
-        final int byte39 = blocks[blocksOffset++] & 0xFF;
-        final int byte40 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte38 & 63) << 12) | (byte39 << 4) | (byte40 >>> 4);
-        final int byte41 = blocks[blocksOffset++] & 0xFF;
-        final int byte42 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte40 & 15) << 14) | (byte41 << 6) | (byte42 >>> 2);
-        final int byte43 = blocks[blocksOffset++] & 0xFF;
-        final int byte44 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte42 & 3) << 16) | (byte43 << 8) | byte44;
-        final int byte45 = blocks[blocksOffset++] & 0xFF;
-        final int byte46 = blocks[blocksOffset++] & 0xFF;
-        final int byte47 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte45 << 10) | (byte46 << 2) | (byte47 >>> 6);
-        final int byte48 = blocks[blocksOffset++] & 0xFF;
-        final int byte49 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte47 & 63) << 12) | (byte48 << 4) | (byte49 >>> 4);
-        final int byte50 = blocks[blocksOffset++] & 0xFF;
-        final int byte51 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte49 & 15) << 14) | (byte50 << 6) | (byte51 >>> 2);
-        final int byte52 = blocks[blocksOffset++] & 0xFF;
-        final int byte53 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte51 & 3) << 16) | (byte52 << 8) | byte53;
-        final int byte54 = blocks[blocksOffset++] & 0xFF;
-        final int byte55 = blocks[blocksOffset++] & 0xFF;
-        final int byte56 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte54 << 10) | (byte55 << 2) | (byte56 >>> 6);
-        final int byte57 = blocks[blocksOffset++] & 0xFF;
-        final int byte58 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte56 & 63) << 12) | (byte57 << 4) | (byte58 >>> 4);
-        final int byte59 = blocks[blocksOffset++] & 0xFF;
-        final int byte60 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte58 & 15) << 14) | (byte59 << 6) | (byte60 >>> 2);
-        final int byte61 = blocks[blocksOffset++] & 0xFF;
-        final int byte62 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte60 & 3) << 16) | (byte61 << 8) | byte62;
-        final int byte63 = blocks[blocksOffset++] & 0xFF;
-        final int byte64 = blocks[blocksOffset++] & 0xFF;
-        final int byte65 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte63 << 10) | (byte64 << 2) | (byte65 >>> 6);
-        final int byte66 = blocks[blocksOffset++] & 0xFF;
-        final int byte67 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte65 & 63) << 12) | (byte66 << 4) | (byte67 >>> 4);
-        final int byte68 = blocks[blocksOffset++] & 0xFF;
-        final int byte69 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte67 & 15) << 14) | (byte68 << 6) | (byte69 >>> 2);
-        final int byte70 = blocks[blocksOffset++] & 0xFF;
-        final int byte71 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte69 & 3) << 16) | (byte70 << 8) | byte71;
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = block0 >>> 46;
@@ -242,9 +145,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final long byte0 = blocks[blocksOffset++] & 0xFF;
         final long byte1 = blocks[blocksOffset++] & 0xFF;
         final long byte2 = blocks[blocksOffset++] & 0xFF;
@@ -258,97 +159,6 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
         final long byte7 = blocks[blocksOffset++] & 0xFF;
         final long byte8 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte6 & 3) << 16) | (byte7 << 8) | byte8;
-        final long byte9 = blocks[blocksOffset++] & 0xFF;
-        final long byte10 = blocks[blocksOffset++] & 0xFF;
-        final long byte11 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte9 << 10) | (byte10 << 2) | (byte11 >>> 6);
-        final long byte12 = blocks[blocksOffset++] & 0xFF;
-        final long byte13 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte11 & 63) << 12) | (byte12 << 4) | (byte13 >>> 4);
-        final long byte14 = blocks[blocksOffset++] & 0xFF;
-        final long byte15 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte13 & 15) << 14) | (byte14 << 6) | (byte15 >>> 2);
-        final long byte16 = blocks[blocksOffset++] & 0xFF;
-        final long byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte15 & 3) << 16) | (byte16 << 8) | byte17;
-        final long byte18 = blocks[blocksOffset++] & 0xFF;
-        final long byte19 = blocks[blocksOffset++] & 0xFF;
-        final long byte20 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte18 << 10) | (byte19 << 2) | (byte20 >>> 6);
-        final long byte21 = blocks[blocksOffset++] & 0xFF;
-        final long byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte20 & 63) << 12) | (byte21 << 4) | (byte22 >>> 4);
-        final long byte23 = blocks[blocksOffset++] & 0xFF;
-        final long byte24 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 15) << 14) | (byte23 << 6) | (byte24 >>> 2);
-        final long byte25 = blocks[blocksOffset++] & 0xFF;
-        final long byte26 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte24 & 3) << 16) | (byte25 << 8) | byte26;
-        final long byte27 = blocks[blocksOffset++] & 0xFF;
-        final long byte28 = blocks[blocksOffset++] & 0xFF;
-        final long byte29 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte27 << 10) | (byte28 << 2) | (byte29 >>> 6);
-        final long byte30 = blocks[blocksOffset++] & 0xFF;
-        final long byte31 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte29 & 63) << 12) | (byte30 << 4) | (byte31 >>> 4);
-        final long byte32 = blocks[blocksOffset++] & 0xFF;
-        final long byte33 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte31 & 15) << 14) | (byte32 << 6) | (byte33 >>> 2);
-        final long byte34 = blocks[blocksOffset++] & 0xFF;
-        final long byte35 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte33 & 3) << 16) | (byte34 << 8) | byte35;
-        final long byte36 = blocks[blocksOffset++] & 0xFF;
-        final long byte37 = blocks[blocksOffset++] & 0xFF;
-        final long byte38 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte36 << 10) | (byte37 << 2) | (byte38 >>> 6);
-        final long byte39 = blocks[blocksOffset++] & 0xFF;
-        final long byte40 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte38 & 63) << 12) | (byte39 << 4) | (byte40 >>> 4);
-        final long byte41 = blocks[blocksOffset++] & 0xFF;
-        final long byte42 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte40 & 15) << 14) | (byte41 << 6) | (byte42 >>> 2);
-        final long byte43 = blocks[blocksOffset++] & 0xFF;
-        final long byte44 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte42 & 3) << 16) | (byte43 << 8) | byte44;
-        final long byte45 = blocks[blocksOffset++] & 0xFF;
-        final long byte46 = blocks[blocksOffset++] & 0xFF;
-        final long byte47 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte45 << 10) | (byte46 << 2) | (byte47 >>> 6);
-        final long byte48 = blocks[blocksOffset++] & 0xFF;
-        final long byte49 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte47 & 63) << 12) | (byte48 << 4) | (byte49 >>> 4);
-        final long byte50 = blocks[blocksOffset++] & 0xFF;
-        final long byte51 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte49 & 15) << 14) | (byte50 << 6) | (byte51 >>> 2);
-        final long byte52 = blocks[blocksOffset++] & 0xFF;
-        final long byte53 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte51 & 3) << 16) | (byte52 << 8) | byte53;
-        final long byte54 = blocks[blocksOffset++] & 0xFF;
-        final long byte55 = blocks[blocksOffset++] & 0xFF;
-        final long byte56 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte54 << 10) | (byte55 << 2) | (byte56 >>> 6);
-        final long byte57 = blocks[blocksOffset++] & 0xFF;
-        final long byte58 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte56 & 63) << 12) | (byte57 << 4) | (byte58 >>> 4);
-        final long byte59 = blocks[blocksOffset++] & 0xFF;
-        final long byte60 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte58 & 15) << 14) | (byte59 << 6) | (byte60 >>> 2);
-        final long byte61 = blocks[blocksOffset++] & 0xFF;
-        final long byte62 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte60 & 3) << 16) | (byte61 << 8) | byte62;
-        final long byte63 = blocks[blocksOffset++] & 0xFF;
-        final long byte64 = blocks[blocksOffset++] & 0xFF;
-        final long byte65 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte63 << 10) | (byte64 << 2) | (byte65 >>> 6);
-        final long byte66 = blocks[blocksOffset++] & 0xFF;
-        final long byte67 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte65 & 63) << 12) | (byte66 << 4) | (byte67 >>> 4);
-        final long byte68 = blocks[blocksOffset++] & 0xFF;
-        final long byte69 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte67 & 15) << 14) | (byte68 << 6) | (byte69 >>> 2);
-        final long byte70 = blocks[blocksOffset++] & 0xFF;
-        final long byte71 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte69 & 3) << 16) | (byte70 << 8) | byte71;
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked19.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked19.java
index 0597af8d..09a7dd38 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked19.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked19.java
@@ -32,8 +32,6 @@ public BulkOperationPacked19() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = (int) (block0 >>> 45);
@@ -123,9 +121,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final int byte0 = blocks[blocksOffset++] & 0xFF;
         final int byte1 = blocks[blocksOffset++] & 0xFF;
         final int byte2 = blocks[blocksOffset++] & 0xFF;
@@ -153,202 +149,11 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
         final int byte17 = blocks[blocksOffset++] & 0xFF;
         final int byte18 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte16 & 7) << 16) | (byte17 << 8) | byte18;
-        final int byte19 = blocks[blocksOffset++] & 0xFF;
-        final int byte20 = blocks[blocksOffset++] & 0xFF;
-        final int byte21 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte19 << 11) | (byte20 << 3) | (byte21 >>> 5);
-        final int byte22 = blocks[blocksOffset++] & 0xFF;
-        final int byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte21 & 31) << 14) | (byte22 << 6) | (byte23 >>> 2);
-        final int byte24 = blocks[blocksOffset++] & 0xFF;
-        final int byte25 = blocks[blocksOffset++] & 0xFF;
-        final int byte26 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte23 & 3) << 17) | (byte24 << 9) | (byte25 << 1) | (byte26 >>> 7);
-        final int byte27 = blocks[blocksOffset++] & 0xFF;
-        final int byte28 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte26 & 127) << 12) | (byte27 << 4) | (byte28 >>> 4);
-        final int byte29 = blocks[blocksOffset++] & 0xFF;
-        final int byte30 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte28 & 15) << 15) | (byte29 << 7) | (byte30 >>> 1);
-        final int byte31 = blocks[blocksOffset++] & 0xFF;
-        final int byte32 = blocks[blocksOffset++] & 0xFF;
-        final int byte33 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte30 & 1) << 18) | (byte31 << 10) | (byte32 << 2) | (byte33 >>> 6);
-        final int byte34 = blocks[blocksOffset++] & 0xFF;
-        final int byte35 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte33 & 63) << 13) | (byte34 << 5) | (byte35 >>> 3);
-        final int byte36 = blocks[blocksOffset++] & 0xFF;
-        final int byte37 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte35 & 7) << 16) | (byte36 << 8) | byte37;
-        final int byte38 = blocks[blocksOffset++] & 0xFF;
-        final int byte39 = blocks[blocksOffset++] & 0xFF;
-        final int byte40 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte38 << 11) | (byte39 << 3) | (byte40 >>> 5);
-        final int byte41 = blocks[blocksOffset++] & 0xFF;
-        final int byte42 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte40 & 31) << 14) | (byte41 << 6) | (byte42 >>> 2);
-        final int byte43 = blocks[blocksOffset++] & 0xFF;
-        final int byte44 = blocks[blocksOffset++] & 0xFF;
-        final int byte45 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte42 & 3) << 17) | (byte43 << 9) | (byte44 << 1) | (byte45 >>> 7);
-        final int byte46 = blocks[blocksOffset++] & 0xFF;
-        final int byte47 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte45 & 127) << 12) | (byte46 << 4) | (byte47 >>> 4);
-        final int byte48 = blocks[blocksOffset++] & 0xFF;
-        final int byte49 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte47 & 15) << 15) | (byte48 << 7) | (byte49 >>> 1);
-        final int byte50 = blocks[blocksOffset++] & 0xFF;
-        final int byte51 = blocks[blocksOffset++] & 0xFF;
-        final int byte52 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte49 & 1) << 18) | (byte50 << 10) | (byte51 << 2) | (byte52 >>> 6);
-        final int byte53 = blocks[blocksOffset++] & 0xFF;
-        final int byte54 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte52 & 63) << 13) | (byte53 << 5) | (byte54 >>> 3);
-        final int byte55 = blocks[blocksOffset++] & 0xFF;
-        final int byte56 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte54 & 7) << 16) | (byte55 << 8) | byte56;
-        final int byte57 = blocks[blocksOffset++] & 0xFF;
-        final int byte58 = blocks[blocksOffset++] & 0xFF;
-        final int byte59 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte57 << 11) | (byte58 << 3) | (byte59 >>> 5);
-        final int byte60 = blocks[blocksOffset++] & 0xFF;
-        final int byte61 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte59 & 31) << 14) | (byte60 << 6) | (byte61 >>> 2);
-        final int byte62 = blocks[blocksOffset++] & 0xFF;
-        final int byte63 = blocks[blocksOffset++] & 0xFF;
-        final int byte64 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte61 & 3) << 17) | (byte62 << 9) | (byte63 << 1) | (byte64 >>> 7);
-        final int byte65 = blocks[blocksOffset++] & 0xFF;
-        final int byte66 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte64 & 127) << 12) | (byte65 << 4) | (byte66 >>> 4);
-        final int byte67 = blocks[blocksOffset++] & 0xFF;
-        final int byte68 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte66 & 15) << 15) | (byte67 << 7) | (byte68 >>> 1);
-        final int byte69 = blocks[blocksOffset++] & 0xFF;
-        final int byte70 = blocks[blocksOffset++] & 0xFF;
-        final int byte71 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte68 & 1) << 18) | (byte69 << 10) | (byte70 << 2) | (byte71 >>> 6);
-        final int byte72 = blocks[blocksOffset++] & 0xFF;
-        final int byte73 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte71 & 63) << 13) | (byte72 << 5) | (byte73 >>> 3);
-        final int byte74 = blocks[blocksOffset++] & 0xFF;
-        final int byte75 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte73 & 7) << 16) | (byte74 << 8) | byte75;
-        final int byte76 = blocks[blocksOffset++] & 0xFF;
-        final int byte77 = blocks[blocksOffset++] & 0xFF;
-        final int byte78 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte76 << 11) | (byte77 << 3) | (byte78 >>> 5);
-        final int byte79 = blocks[blocksOffset++] & 0xFF;
-        final int byte80 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte78 & 31) << 14) | (byte79 << 6) | (byte80 >>> 2);
-        final int byte81 = blocks[blocksOffset++] & 0xFF;
-        final int byte82 = blocks[blocksOffset++] & 0xFF;
-        final int byte83 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte80 & 3) << 17) | (byte81 << 9) | (byte82 << 1) | (byte83 >>> 7);
-        final int byte84 = blocks[blocksOffset++] & 0xFF;
-        final int byte85 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte83 & 127) << 12) | (byte84 << 4) | (byte85 >>> 4);
-        final int byte86 = blocks[blocksOffset++] & 0xFF;
-        final int byte87 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte85 & 15) << 15) | (byte86 << 7) | (byte87 >>> 1);
-        final int byte88 = blocks[blocksOffset++] & 0xFF;
-        final int byte89 = blocks[blocksOffset++] & 0xFF;
-        final int byte90 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte87 & 1) << 18) | (byte88 << 10) | (byte89 << 2) | (byte90 >>> 6);
-        final int byte91 = blocks[blocksOffset++] & 0xFF;
-        final int byte92 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte90 & 63) << 13) | (byte91 << 5) | (byte92 >>> 3);
-        final int byte93 = blocks[blocksOffset++] & 0xFF;
-        final int byte94 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte92 & 7) << 16) | (byte93 << 8) | byte94;
-        final int byte95 = blocks[blocksOffset++] & 0xFF;
-        final int byte96 = blocks[blocksOffset++] & 0xFF;
-        final int byte97 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte95 << 11) | (byte96 << 3) | (byte97 >>> 5);
-        final int byte98 = blocks[blocksOffset++] & 0xFF;
-        final int byte99 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte97 & 31) << 14) | (byte98 << 6) | (byte99 >>> 2);
-        final int byte100 = blocks[blocksOffset++] & 0xFF;
-        final int byte101 = blocks[blocksOffset++] & 0xFF;
-        final int byte102 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte99 & 3) << 17) | (byte100 << 9) | (byte101 << 1) | (byte102 >>> 7);
-        final int byte103 = blocks[blocksOffset++] & 0xFF;
-        final int byte104 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte102 & 127) << 12) | (byte103 << 4) | (byte104 >>> 4);
-        final int byte105 = blocks[blocksOffset++] & 0xFF;
-        final int byte106 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte104 & 15) << 15) | (byte105 << 7) | (byte106 >>> 1);
-        final int byte107 = blocks[blocksOffset++] & 0xFF;
-        final int byte108 = blocks[blocksOffset++] & 0xFF;
-        final int byte109 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte106 & 1) << 18) | (byte107 << 10) | (byte108 << 2) | (byte109 >>> 6);
-        final int byte110 = blocks[blocksOffset++] & 0xFF;
-        final int byte111 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte109 & 63) << 13) | (byte110 << 5) | (byte111 >>> 3);
-        final int byte112 = blocks[blocksOffset++] & 0xFF;
-        final int byte113 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte111 & 7) << 16) | (byte112 << 8) | byte113;
-        final int byte114 = blocks[blocksOffset++] & 0xFF;
-        final int byte115 = blocks[blocksOffset++] & 0xFF;
-        final int byte116 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte114 << 11) | (byte115 << 3) | (byte116 >>> 5);
-        final int byte117 = blocks[blocksOffset++] & 0xFF;
-        final int byte118 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte116 & 31) << 14) | (byte117 << 6) | (byte118 >>> 2);
-        final int byte119 = blocks[blocksOffset++] & 0xFF;
-        final int byte120 = blocks[blocksOffset++] & 0xFF;
-        final int byte121 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte118 & 3) << 17) | (byte119 << 9) | (byte120 << 1) | (byte121 >>> 7);
-        final int byte122 = blocks[blocksOffset++] & 0xFF;
-        final int byte123 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte121 & 127) << 12) | (byte122 << 4) | (byte123 >>> 4);
-        final int byte124 = blocks[blocksOffset++] & 0xFF;
-        final int byte125 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte123 & 15) << 15) | (byte124 << 7) | (byte125 >>> 1);
-        final int byte126 = blocks[blocksOffset++] & 0xFF;
-        final int byte127 = blocks[blocksOffset++] & 0xFF;
-        final int byte128 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte125 & 1) << 18) | (byte126 << 10) | (byte127 << 2) | (byte128 >>> 6);
-        final int byte129 = blocks[blocksOffset++] & 0xFF;
-        final int byte130 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte128 & 63) << 13) | (byte129 << 5) | (byte130 >>> 3);
-        final int byte131 = blocks[blocksOffset++] & 0xFF;
-        final int byte132 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte130 & 7) << 16) | (byte131 << 8) | byte132;
-        final int byte133 = blocks[blocksOffset++] & 0xFF;
-        final int byte134 = blocks[blocksOffset++] & 0xFF;
-        final int byte135 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte133 << 11) | (byte134 << 3) | (byte135 >>> 5);
-        final int byte136 = blocks[blocksOffset++] & 0xFF;
-        final int byte137 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte135 & 31) << 14) | (byte136 << 6) | (byte137 >>> 2);
-        final int byte138 = blocks[blocksOffset++] & 0xFF;
-        final int byte139 = blocks[blocksOffset++] & 0xFF;
-        final int byte140 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte137 & 3) << 17) | (byte138 << 9) | (byte139 << 1) | (byte140 >>> 7);
-        final int byte141 = blocks[blocksOffset++] & 0xFF;
-        final int byte142 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte140 & 127) << 12) | (byte141 << 4) | (byte142 >>> 4);
-        final int byte143 = blocks[blocksOffset++] & 0xFF;
-        final int byte144 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte142 & 15) << 15) | (byte143 << 7) | (byte144 >>> 1);
-        final int byte145 = blocks[blocksOffset++] & 0xFF;
-        final int byte146 = blocks[blocksOffset++] & 0xFF;
-        final int byte147 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte144 & 1) << 18) | (byte145 << 10) | (byte146 << 2) | (byte147 >>> 6);
-        final int byte148 = blocks[blocksOffset++] & 0xFF;
-        final int byte149 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte147 & 63) << 13) | (byte148 << 5) | (byte149 >>> 3);
-        final int byte150 = blocks[blocksOffset++] & 0xFF;
-        final int byte151 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte149 & 7) << 16) | (byte150 << 8) | byte151;
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = block0 >>> 45;
@@ -438,9 +243,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final long byte0 = blocks[blocksOffset++] & 0xFF;
         final long byte1 = blocks[blocksOffset++] & 0xFF;
         final long byte2 = blocks[blocksOffset++] & 0xFF;
@@ -468,195 +271,6 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
         final long byte17 = blocks[blocksOffset++] & 0xFF;
         final long byte18 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte16 & 7) << 16) | (byte17 << 8) | byte18;
-        final long byte19 = blocks[blocksOffset++] & 0xFF;
-        final long byte20 = blocks[blocksOffset++] & 0xFF;
-        final long byte21 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte19 << 11) | (byte20 << 3) | (byte21 >>> 5);
-        final long byte22 = blocks[blocksOffset++] & 0xFF;
-        final long byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte21 & 31) << 14) | (byte22 << 6) | (byte23 >>> 2);
-        final long byte24 = blocks[blocksOffset++] & 0xFF;
-        final long byte25 = blocks[blocksOffset++] & 0xFF;
-        final long byte26 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte23 & 3) << 17) | (byte24 << 9) | (byte25 << 1) | (byte26 >>> 7);
-        final long byte27 = blocks[blocksOffset++] & 0xFF;
-        final long byte28 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte26 & 127) << 12) | (byte27 << 4) | (byte28 >>> 4);
-        final long byte29 = blocks[blocksOffset++] & 0xFF;
-        final long byte30 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte28 & 15) << 15) | (byte29 << 7) | (byte30 >>> 1);
-        final long byte31 = blocks[blocksOffset++] & 0xFF;
-        final long byte32 = blocks[blocksOffset++] & 0xFF;
-        final long byte33 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte30 & 1) << 18) | (byte31 << 10) | (byte32 << 2) | (byte33 >>> 6);
-        final long byte34 = blocks[blocksOffset++] & 0xFF;
-        final long byte35 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte33 & 63) << 13) | (byte34 << 5) | (byte35 >>> 3);
-        final long byte36 = blocks[blocksOffset++] & 0xFF;
-        final long byte37 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte35 & 7) << 16) | (byte36 << 8) | byte37;
-        final long byte38 = blocks[blocksOffset++] & 0xFF;
-        final long byte39 = blocks[blocksOffset++] & 0xFF;
-        final long byte40 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte38 << 11) | (byte39 << 3) | (byte40 >>> 5);
-        final long byte41 = blocks[blocksOffset++] & 0xFF;
-        final long byte42 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte40 & 31) << 14) | (byte41 << 6) | (byte42 >>> 2);
-        final long byte43 = blocks[blocksOffset++] & 0xFF;
-        final long byte44 = blocks[blocksOffset++] & 0xFF;
-        final long byte45 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte42 & 3) << 17) | (byte43 << 9) | (byte44 << 1) | (byte45 >>> 7);
-        final long byte46 = blocks[blocksOffset++] & 0xFF;
-        final long byte47 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte45 & 127) << 12) | (byte46 << 4) | (byte47 >>> 4);
-        final long byte48 = blocks[blocksOffset++] & 0xFF;
-        final long byte49 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte47 & 15) << 15) | (byte48 << 7) | (byte49 >>> 1);
-        final long byte50 = blocks[blocksOffset++] & 0xFF;
-        final long byte51 = blocks[blocksOffset++] & 0xFF;
-        final long byte52 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte49 & 1) << 18) | (byte50 << 10) | (byte51 << 2) | (byte52 >>> 6);
-        final long byte53 = blocks[blocksOffset++] & 0xFF;
-        final long byte54 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte52 & 63) << 13) | (byte53 << 5) | (byte54 >>> 3);
-        final long byte55 = blocks[blocksOffset++] & 0xFF;
-        final long byte56 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte54 & 7) << 16) | (byte55 << 8) | byte56;
-        final long byte57 = blocks[blocksOffset++] & 0xFF;
-        final long byte58 = blocks[blocksOffset++] & 0xFF;
-        final long byte59 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte57 << 11) | (byte58 << 3) | (byte59 >>> 5);
-        final long byte60 = blocks[blocksOffset++] & 0xFF;
-        final long byte61 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte59 & 31) << 14) | (byte60 << 6) | (byte61 >>> 2);
-        final long byte62 = blocks[blocksOffset++] & 0xFF;
-        final long byte63 = blocks[blocksOffset++] & 0xFF;
-        final long byte64 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte61 & 3) << 17) | (byte62 << 9) | (byte63 << 1) | (byte64 >>> 7);
-        final long byte65 = blocks[blocksOffset++] & 0xFF;
-        final long byte66 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte64 & 127) << 12) | (byte65 << 4) | (byte66 >>> 4);
-        final long byte67 = blocks[blocksOffset++] & 0xFF;
-        final long byte68 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte66 & 15) << 15) | (byte67 << 7) | (byte68 >>> 1);
-        final long byte69 = blocks[blocksOffset++] & 0xFF;
-        final long byte70 = blocks[blocksOffset++] & 0xFF;
-        final long byte71 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte68 & 1) << 18) | (byte69 << 10) | (byte70 << 2) | (byte71 >>> 6);
-        final long byte72 = blocks[blocksOffset++] & 0xFF;
-        final long byte73 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte71 & 63) << 13) | (byte72 << 5) | (byte73 >>> 3);
-        final long byte74 = blocks[blocksOffset++] & 0xFF;
-        final long byte75 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte73 & 7) << 16) | (byte74 << 8) | byte75;
-        final long byte76 = blocks[blocksOffset++] & 0xFF;
-        final long byte77 = blocks[blocksOffset++] & 0xFF;
-        final long byte78 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte76 << 11) | (byte77 << 3) | (byte78 >>> 5);
-        final long byte79 = blocks[blocksOffset++] & 0xFF;
-        final long byte80 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte78 & 31) << 14) | (byte79 << 6) | (byte80 >>> 2);
-        final long byte81 = blocks[blocksOffset++] & 0xFF;
-        final long byte82 = blocks[blocksOffset++] & 0xFF;
-        final long byte83 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte80 & 3) << 17) | (byte81 << 9) | (byte82 << 1) | (byte83 >>> 7);
-        final long byte84 = blocks[blocksOffset++] & 0xFF;
-        final long byte85 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte83 & 127) << 12) | (byte84 << 4) | (byte85 >>> 4);
-        final long byte86 = blocks[blocksOffset++] & 0xFF;
-        final long byte87 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte85 & 15) << 15) | (byte86 << 7) | (byte87 >>> 1);
-        final long byte88 = blocks[blocksOffset++] & 0xFF;
-        final long byte89 = blocks[blocksOffset++] & 0xFF;
-        final long byte90 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte87 & 1) << 18) | (byte88 << 10) | (byte89 << 2) | (byte90 >>> 6);
-        final long byte91 = blocks[blocksOffset++] & 0xFF;
-        final long byte92 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte90 & 63) << 13) | (byte91 << 5) | (byte92 >>> 3);
-        final long byte93 = blocks[blocksOffset++] & 0xFF;
-        final long byte94 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte92 & 7) << 16) | (byte93 << 8) | byte94;
-        final long byte95 = blocks[blocksOffset++] & 0xFF;
-        final long byte96 = blocks[blocksOffset++] & 0xFF;
-        final long byte97 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte95 << 11) | (byte96 << 3) | (byte97 >>> 5);
-        final long byte98 = blocks[blocksOffset++] & 0xFF;
-        final long byte99 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte97 & 31) << 14) | (byte98 << 6) | (byte99 >>> 2);
-        final long byte100 = blocks[blocksOffset++] & 0xFF;
-        final long byte101 = blocks[blocksOffset++] & 0xFF;
-        final long byte102 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte99 & 3) << 17) | (byte100 << 9) | (byte101 << 1) | (byte102 >>> 7);
-        final long byte103 = blocks[blocksOffset++] & 0xFF;
-        final long byte104 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte102 & 127) << 12) | (byte103 << 4) | (byte104 >>> 4);
-        final long byte105 = blocks[blocksOffset++] & 0xFF;
-        final long byte106 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte104 & 15) << 15) | (byte105 << 7) | (byte106 >>> 1);
-        final long byte107 = blocks[blocksOffset++] & 0xFF;
-        final long byte108 = blocks[blocksOffset++] & 0xFF;
-        final long byte109 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte106 & 1) << 18) | (byte107 << 10) | (byte108 << 2) | (byte109 >>> 6);
-        final long byte110 = blocks[blocksOffset++] & 0xFF;
-        final long byte111 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte109 & 63) << 13) | (byte110 << 5) | (byte111 >>> 3);
-        final long byte112 = blocks[blocksOffset++] & 0xFF;
-        final long byte113 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte111 & 7) << 16) | (byte112 << 8) | byte113;
-        final long byte114 = blocks[blocksOffset++] & 0xFF;
-        final long byte115 = blocks[blocksOffset++] & 0xFF;
-        final long byte116 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte114 << 11) | (byte115 << 3) | (byte116 >>> 5);
-        final long byte117 = blocks[blocksOffset++] & 0xFF;
-        final long byte118 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte116 & 31) << 14) | (byte117 << 6) | (byte118 >>> 2);
-        final long byte119 = blocks[blocksOffset++] & 0xFF;
-        final long byte120 = blocks[blocksOffset++] & 0xFF;
-        final long byte121 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte118 & 3) << 17) | (byte119 << 9) | (byte120 << 1) | (byte121 >>> 7);
-        final long byte122 = blocks[blocksOffset++] & 0xFF;
-        final long byte123 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte121 & 127) << 12) | (byte122 << 4) | (byte123 >>> 4);
-        final long byte124 = blocks[blocksOffset++] & 0xFF;
-        final long byte125 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte123 & 15) << 15) | (byte124 << 7) | (byte125 >>> 1);
-        final long byte126 = blocks[blocksOffset++] & 0xFF;
-        final long byte127 = blocks[blocksOffset++] & 0xFF;
-        final long byte128 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte125 & 1) << 18) | (byte126 << 10) | (byte127 << 2) | (byte128 >>> 6);
-        final long byte129 = blocks[blocksOffset++] & 0xFF;
-        final long byte130 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte128 & 63) << 13) | (byte129 << 5) | (byte130 >>> 3);
-        final long byte131 = blocks[blocksOffset++] & 0xFF;
-        final long byte132 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte130 & 7) << 16) | (byte131 << 8) | byte132;
-        final long byte133 = blocks[blocksOffset++] & 0xFF;
-        final long byte134 = blocks[blocksOffset++] & 0xFF;
-        final long byte135 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte133 << 11) | (byte134 << 3) | (byte135 >>> 5);
-        final long byte136 = blocks[blocksOffset++] & 0xFF;
-        final long byte137 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte135 & 31) << 14) | (byte136 << 6) | (byte137 >>> 2);
-        final long byte138 = blocks[blocksOffset++] & 0xFF;
-        final long byte139 = blocks[blocksOffset++] & 0xFF;
-        final long byte140 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte137 & 3) << 17) | (byte138 << 9) | (byte139 << 1) | (byte140 >>> 7);
-        final long byte141 = blocks[blocksOffset++] & 0xFF;
-        final long byte142 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte140 & 127) << 12) | (byte141 << 4) | (byte142 >>> 4);
-        final long byte143 = blocks[blocksOffset++] & 0xFF;
-        final long byte144 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte142 & 15) << 15) | (byte143 << 7) | (byte144 >>> 1);
-        final long byte145 = blocks[blocksOffset++] & 0xFF;
-        final long byte146 = blocks[blocksOffset++] & 0xFF;
-        final long byte147 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte144 & 1) << 18) | (byte145 << 10) | (byte146 << 2) | (byte147 >>> 6);
-        final long byte148 = blocks[blocksOffset++] & 0xFF;
-        final long byte149 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte147 & 63) << 13) | (byte148 << 5) | (byte149 >>> 3);
-        final long byte150 = blocks[blocksOffset++] & 0xFF;
-        final long byte151 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte149 & 7) << 16) | (byte150 << 8) | byte151;
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked2.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked2.java
index e8e1a2e3..0f8646df 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked2.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked2.java
@@ -32,179 +32,43 @@ public BulkOperationPacked2() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
-        final long block0 = blocks[blocksOffset++];
-        values[valuesOffset++] = (int) (block0 >>> 62);
-        values[valuesOffset++] = (int) ((block0 >>> 60) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 58) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 56) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 54) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 52) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 50) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 48) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 46) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 44) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 42) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 40) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 38) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 36) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 34) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 32) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 30) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 28) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 26) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 24) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 22) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 20) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 18) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 16) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 14) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 12) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 10) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 8) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 6) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 4) & 3L);
-        values[valuesOffset++] = (int) ((block0 >>> 2) & 3L);
-        values[valuesOffset++] = (int) (block0 & 3L);
+      final long block = blocks[blocksOffset++];
+      for (int shift = 62; shift >= 0; shift -= 2) {
+        values[valuesOffset++] = (int) ((block >>> shift) & 3);
+      }
       }
     }
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 >>> 6;
-        values[valuesOffset++] = (byte0 >>> 4) & 3;
-        values[valuesOffset++] = (byte0 >>> 2) & 3;
-        values[valuesOffset++] = byte0 & 3;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte1 >>> 6;
-        values[valuesOffset++] = (byte1 >>> 4) & 3;
-        values[valuesOffset++] = (byte1 >>> 2) & 3;
-        values[valuesOffset++] = byte1 & 3;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte2 >>> 6;
-        values[valuesOffset++] = (byte2 >>> 4) & 3;
-        values[valuesOffset++] = (byte2 >>> 2) & 3;
-        values[valuesOffset++] = byte2 & 3;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte3 >>> 6;
-        values[valuesOffset++] = (byte3 >>> 4) & 3;
-        values[valuesOffset++] = (byte3 >>> 2) & 3;
-        values[valuesOffset++] = byte3 & 3;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte4 >>> 6;
-        values[valuesOffset++] = (byte4 >>> 4) & 3;
-        values[valuesOffset++] = (byte4 >>> 2) & 3;
-        values[valuesOffset++] = byte4 & 3;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte5 >>> 6;
-        values[valuesOffset++] = (byte5 >>> 4) & 3;
-        values[valuesOffset++] = (byte5 >>> 2) & 3;
-        values[valuesOffset++] = byte5 & 3;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte6 >>> 6;
-        values[valuesOffset++] = (byte6 >>> 4) & 3;
-        values[valuesOffset++] = (byte6 >>> 2) & 3;
-        values[valuesOffset++] = byte6 & 3;
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte7 >>> 6;
-        values[valuesOffset++] = (byte7 >>> 4) & 3;
-        values[valuesOffset++] = (byte7 >>> 2) & 3;
-        values[valuesOffset++] = byte7 & 3;
+    for (int j = 0; j < 8 * iterations; ++j) {
+      final byte block = blocks[blocksOffset++];
+      values[valuesOffset++] = (block >>> 6) & 3;
+      values[valuesOffset++] = (block >>> 4) & 3;
+      values[valuesOffset++] = (block >>> 2) & 3;
+      values[valuesOffset++] = block & 3;
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
-        final long block0 = blocks[blocksOffset++];
-        values[valuesOffset++] = block0 >>> 62;
-        values[valuesOffset++] = (block0 >>> 60) & 3L;
-        values[valuesOffset++] = (block0 >>> 58) & 3L;
-        values[valuesOffset++] = (block0 >>> 56) & 3L;
-        values[valuesOffset++] = (block0 >>> 54) & 3L;
-        values[valuesOffset++] = (block0 >>> 52) & 3L;
-        values[valuesOffset++] = (block0 >>> 50) & 3L;
-        values[valuesOffset++] = (block0 >>> 48) & 3L;
-        values[valuesOffset++] = (block0 >>> 46) & 3L;
-        values[valuesOffset++] = (block0 >>> 44) & 3L;
-        values[valuesOffset++] = (block0 >>> 42) & 3L;
-        values[valuesOffset++] = (block0 >>> 40) & 3L;
-        values[valuesOffset++] = (block0 >>> 38) & 3L;
-        values[valuesOffset++] = (block0 >>> 36) & 3L;
-        values[valuesOffset++] = (block0 >>> 34) & 3L;
-        values[valuesOffset++] = (block0 >>> 32) & 3L;
-        values[valuesOffset++] = (block0 >>> 30) & 3L;
-        values[valuesOffset++] = (block0 >>> 28) & 3L;
-        values[valuesOffset++] = (block0 >>> 26) & 3L;
-        values[valuesOffset++] = (block0 >>> 24) & 3L;
-        values[valuesOffset++] = (block0 >>> 22) & 3L;
-        values[valuesOffset++] = (block0 >>> 20) & 3L;
-        values[valuesOffset++] = (block0 >>> 18) & 3L;
-        values[valuesOffset++] = (block0 >>> 16) & 3L;
-        values[valuesOffset++] = (block0 >>> 14) & 3L;
-        values[valuesOffset++] = (block0 >>> 12) & 3L;
-        values[valuesOffset++] = (block0 >>> 10) & 3L;
-        values[valuesOffset++] = (block0 >>> 8) & 3L;
-        values[valuesOffset++] = (block0 >>> 6) & 3L;
-        values[valuesOffset++] = (block0 >>> 4) & 3L;
-        values[valuesOffset++] = (block0 >>> 2) & 3L;
-        values[valuesOffset++] = block0 & 3L;
+      final long block = blocks[blocksOffset++];
+      for (int shift = 62; shift >= 0; shift -= 2) {
+        values[valuesOffset++] = (block >>> shift) & 3;
+      }
       }
     }
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 >>> 6;
-        values[valuesOffset++] = (byte0 >>> 4) & 3;
-        values[valuesOffset++] = (byte0 >>> 2) & 3;
-        values[valuesOffset++] = byte0 & 3;
-        final long byte1 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte1 >>> 6;
-        values[valuesOffset++] = (byte1 >>> 4) & 3;
-        values[valuesOffset++] = (byte1 >>> 2) & 3;
-        values[valuesOffset++] = byte1 & 3;
-        final long byte2 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte2 >>> 6;
-        values[valuesOffset++] = (byte2 >>> 4) & 3;
-        values[valuesOffset++] = (byte2 >>> 2) & 3;
-        values[valuesOffset++] = byte2 & 3;
-        final long byte3 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte3 >>> 6;
-        values[valuesOffset++] = (byte3 >>> 4) & 3;
-        values[valuesOffset++] = (byte3 >>> 2) & 3;
-        values[valuesOffset++] = byte3 & 3;
-        final long byte4 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte4 >>> 6;
-        values[valuesOffset++] = (byte4 >>> 4) & 3;
-        values[valuesOffset++] = (byte4 >>> 2) & 3;
-        values[valuesOffset++] = byte4 & 3;
-        final long byte5 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte5 >>> 6;
-        values[valuesOffset++] = (byte5 >>> 4) & 3;
-        values[valuesOffset++] = (byte5 >>> 2) & 3;
-        values[valuesOffset++] = byte5 & 3;
-        final long byte6 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte6 >>> 6;
-        values[valuesOffset++] = (byte6 >>> 4) & 3;
-        values[valuesOffset++] = (byte6 >>> 2) & 3;
-        values[valuesOffset++] = byte6 & 3;
-        final long byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte7 >>> 6;
-        values[valuesOffset++] = (byte7 >>> 4) & 3;
-        values[valuesOffset++] = (byte7 >>> 2) & 3;
-        values[valuesOffset++] = byte7 & 3;
+    for (int j = 0; j < 8 * iterations; ++j) {
+      final byte block = blocks[blocksOffset++];
+      values[valuesOffset++] = (block >>> 6) & 3;
+      values[valuesOffset++] = (block >>> 4) & 3;
+      values[valuesOffset++] = (block >>> 2) & 3;
+      values[valuesOffset++] = block & 3;
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked20.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked20.java
index b9b3bacf..05c7d522 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked20.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked20.java
@@ -32,8 +32,6 @@ public BulkOperationPacked20() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = (int) (block0 >>> 44);
@@ -61,9 +59,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final int byte0 = blocks[blocksOffset++] & 0xFF;
         final int byte1 = blocks[blocksOffset++] & 0xFF;
         final int byte2 = blocks[blocksOffset++] & 0xFF;
@@ -71,62 +67,11 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
         final int byte3 = blocks[blocksOffset++] & 0xFF;
         final int byte4 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte2 & 15) << 16) | (byte3 << 8) | byte4;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte5 << 12) | (byte6 << 4) | (byte7 >>> 4);
-        final int byte8 = blocks[blocksOffset++] & 0xFF;
-        final int byte9 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte7 & 15) << 16) | (byte8 << 8) | byte9;
-        final int byte10 = blocks[blocksOffset++] & 0xFF;
-        final int byte11 = blocks[blocksOffset++] & 0xFF;
-        final int byte12 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte10 << 12) | (byte11 << 4) | (byte12 >>> 4);
-        final int byte13 = blocks[blocksOffset++] & 0xFF;
-        final int byte14 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte12 & 15) << 16) | (byte13 << 8) | byte14;
-        final int byte15 = blocks[blocksOffset++] & 0xFF;
-        final int byte16 = blocks[blocksOffset++] & 0xFF;
-        final int byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte15 << 12) | (byte16 << 4) | (byte17 >>> 4);
-        final int byte18 = blocks[blocksOffset++] & 0xFF;
-        final int byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte17 & 15) << 16) | (byte18 << 8) | byte19;
-        final int byte20 = blocks[blocksOffset++] & 0xFF;
-        final int byte21 = blocks[blocksOffset++] & 0xFF;
-        final int byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte20 << 12) | (byte21 << 4) | (byte22 >>> 4);
-        final int byte23 = blocks[blocksOffset++] & 0xFF;
-        final int byte24 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 15) << 16) | (byte23 << 8) | byte24;
-        final int byte25 = blocks[blocksOffset++] & 0xFF;
-        final int byte26 = blocks[blocksOffset++] & 0xFF;
-        final int byte27 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte25 << 12) | (byte26 << 4) | (byte27 >>> 4);
-        final int byte28 = blocks[blocksOffset++] & 0xFF;
-        final int byte29 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte27 & 15) << 16) | (byte28 << 8) | byte29;
-        final int byte30 = blocks[blocksOffset++] & 0xFF;
-        final int byte31 = blocks[blocksOffset++] & 0xFF;
-        final int byte32 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte30 << 12) | (byte31 << 4) | (byte32 >>> 4);
-        final int byte33 = blocks[blocksOffset++] & 0xFF;
-        final int byte34 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte32 & 15) << 16) | (byte33 << 8) | byte34;
-        final int byte35 = blocks[blocksOffset++] & 0xFF;
-        final int byte36 = blocks[blocksOffset++] & 0xFF;
-        final int byte37 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte35 << 12) | (byte36 << 4) | (byte37 >>> 4);
-        final int byte38 = blocks[blocksOffset++] & 0xFF;
-        final int byte39 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte37 & 15) << 16) | (byte38 << 8) | byte39;
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = block0 >>> 44;
@@ -154,9 +99,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final long byte0 = blocks[blocksOffset++] & 0xFF;
         final long byte1 = blocks[blocksOffset++] & 0xFF;
         final long byte2 = blocks[blocksOffset++] & 0xFF;
@@ -164,55 +107,6 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
         final long byte3 = blocks[blocksOffset++] & 0xFF;
         final long byte4 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte2 & 15) << 16) | (byte3 << 8) | byte4;
-        final long byte5 = blocks[blocksOffset++] & 0xFF;
-        final long byte6 = blocks[blocksOffset++] & 0xFF;
-        final long byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte5 << 12) | (byte6 << 4) | (byte7 >>> 4);
-        final long byte8 = blocks[blocksOffset++] & 0xFF;
-        final long byte9 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte7 & 15) << 16) | (byte8 << 8) | byte9;
-        final long byte10 = blocks[blocksOffset++] & 0xFF;
-        final long byte11 = blocks[blocksOffset++] & 0xFF;
-        final long byte12 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte10 << 12) | (byte11 << 4) | (byte12 >>> 4);
-        final long byte13 = blocks[blocksOffset++] & 0xFF;
-        final long byte14 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte12 & 15) << 16) | (byte13 << 8) | byte14;
-        final long byte15 = blocks[blocksOffset++] & 0xFF;
-        final long byte16 = blocks[blocksOffset++] & 0xFF;
-        final long byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte15 << 12) | (byte16 << 4) | (byte17 >>> 4);
-        final long byte18 = blocks[blocksOffset++] & 0xFF;
-        final long byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte17 & 15) << 16) | (byte18 << 8) | byte19;
-        final long byte20 = blocks[blocksOffset++] & 0xFF;
-        final long byte21 = blocks[blocksOffset++] & 0xFF;
-        final long byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte20 << 12) | (byte21 << 4) | (byte22 >>> 4);
-        final long byte23 = blocks[blocksOffset++] & 0xFF;
-        final long byte24 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 15) << 16) | (byte23 << 8) | byte24;
-        final long byte25 = blocks[blocksOffset++] & 0xFF;
-        final long byte26 = blocks[blocksOffset++] & 0xFF;
-        final long byte27 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte25 << 12) | (byte26 << 4) | (byte27 >>> 4);
-        final long byte28 = blocks[blocksOffset++] & 0xFF;
-        final long byte29 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte27 & 15) << 16) | (byte28 << 8) | byte29;
-        final long byte30 = blocks[blocksOffset++] & 0xFF;
-        final long byte31 = blocks[blocksOffset++] & 0xFF;
-        final long byte32 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte30 << 12) | (byte31 << 4) | (byte32 >>> 4);
-        final long byte33 = blocks[blocksOffset++] & 0xFF;
-        final long byte34 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte32 & 15) << 16) | (byte33 << 8) | byte34;
-        final long byte35 = blocks[blocksOffset++] & 0xFF;
-        final long byte36 = blocks[blocksOffset++] & 0xFF;
-        final long byte37 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte35 << 12) | (byte36 << 4) | (byte37 >>> 4);
-        final long byte38 = blocks[blocksOffset++] & 0xFF;
-        final long byte39 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte37 & 15) << 16) | (byte38 << 8) | byte39;
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked21.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked21.java
index d2c886ed..9a77c3ec 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked21.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked21.java
@@ -32,8 +32,6 @@ public BulkOperationPacked21() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = (int) (block0 >>> 43);
@@ -125,9 +123,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final int byte0 = blocks[blocksOffset++] & 0xFF;
         final int byte1 = blocks[blocksOffset++] & 0xFF;
         final int byte2 = blocks[blocksOffset++] & 0xFF;
@@ -157,216 +153,11 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
         final int byte19 = blocks[blocksOffset++] & 0xFF;
         final int byte20 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte18 & 31) << 16) | (byte19 << 8) | byte20;
-        final int byte21 = blocks[blocksOffset++] & 0xFF;
-        final int byte22 = blocks[blocksOffset++] & 0xFF;
-        final int byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte21 << 13) | (byte22 << 5) | (byte23 >>> 3);
-        final int byte24 = blocks[blocksOffset++] & 0xFF;
-        final int byte25 = blocks[blocksOffset++] & 0xFF;
-        final int byte26 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte23 & 7) << 18) | (byte24 << 10) | (byte25 << 2) | (byte26 >>> 6);
-        final int byte27 = blocks[blocksOffset++] & 0xFF;
-        final int byte28 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte26 & 63) << 15) | (byte27 << 7) | (byte28 >>> 1);
-        final int byte29 = blocks[blocksOffset++] & 0xFF;
-        final int byte30 = blocks[blocksOffset++] & 0xFF;
-        final int byte31 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte28 & 1) << 20) | (byte29 << 12) | (byte30 << 4) | (byte31 >>> 4);
-        final int byte32 = blocks[blocksOffset++] & 0xFF;
-        final int byte33 = blocks[blocksOffset++] & 0xFF;
-        final int byte34 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte31 & 15) << 17) | (byte32 << 9) | (byte33 << 1) | (byte34 >>> 7);
-        final int byte35 = blocks[blocksOffset++] & 0xFF;
-        final int byte36 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte34 & 127) << 14) | (byte35 << 6) | (byte36 >>> 2);
-        final int byte37 = blocks[blocksOffset++] & 0xFF;
-        final int byte38 = blocks[blocksOffset++] & 0xFF;
-        final int byte39 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte36 & 3) << 19) | (byte37 << 11) | (byte38 << 3) | (byte39 >>> 5);
-        final int byte40 = blocks[blocksOffset++] & 0xFF;
-        final int byte41 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte39 & 31) << 16) | (byte40 << 8) | byte41;
-        final int byte42 = blocks[blocksOffset++] & 0xFF;
-        final int byte43 = blocks[blocksOffset++] & 0xFF;
-        final int byte44 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte42 << 13) | (byte43 << 5) | (byte44 >>> 3);
-        final int byte45 = blocks[blocksOffset++] & 0xFF;
-        final int byte46 = blocks[blocksOffset++] & 0xFF;
-        final int byte47 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte44 & 7) << 18) | (byte45 << 10) | (byte46 << 2) | (byte47 >>> 6);
-        final int byte48 = blocks[blocksOffset++] & 0xFF;
-        final int byte49 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte47 & 63) << 15) | (byte48 << 7) | (byte49 >>> 1);
-        final int byte50 = blocks[blocksOffset++] & 0xFF;
-        final int byte51 = blocks[blocksOffset++] & 0xFF;
-        final int byte52 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte49 & 1) << 20) | (byte50 << 12) | (byte51 << 4) | (byte52 >>> 4);
-        final int byte53 = blocks[blocksOffset++] & 0xFF;
-        final int byte54 = blocks[blocksOffset++] & 0xFF;
-        final int byte55 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte52 & 15) << 17) | (byte53 << 9) | (byte54 << 1) | (byte55 >>> 7);
-        final int byte56 = blocks[blocksOffset++] & 0xFF;
-        final int byte57 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte55 & 127) << 14) | (byte56 << 6) | (byte57 >>> 2);
-        final int byte58 = blocks[blocksOffset++] & 0xFF;
-        final int byte59 = blocks[blocksOffset++] & 0xFF;
-        final int byte60 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte57 & 3) << 19) | (byte58 << 11) | (byte59 << 3) | (byte60 >>> 5);
-        final int byte61 = blocks[blocksOffset++] & 0xFF;
-        final int byte62 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte60 & 31) << 16) | (byte61 << 8) | byte62;
-        final int byte63 = blocks[blocksOffset++] & 0xFF;
-        final int byte64 = blocks[blocksOffset++] & 0xFF;
-        final int byte65 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte63 << 13) | (byte64 << 5) | (byte65 >>> 3);
-        final int byte66 = blocks[blocksOffset++] & 0xFF;
-        final int byte67 = blocks[blocksOffset++] & 0xFF;
-        final int byte68 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte65 & 7) << 18) | (byte66 << 10) | (byte67 << 2) | (byte68 >>> 6);
-        final int byte69 = blocks[blocksOffset++] & 0xFF;
-        final int byte70 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte68 & 63) << 15) | (byte69 << 7) | (byte70 >>> 1);
-        final int byte71 = blocks[blocksOffset++] & 0xFF;
-        final int byte72 = blocks[blocksOffset++] & 0xFF;
-        final int byte73 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte70 & 1) << 20) | (byte71 << 12) | (byte72 << 4) | (byte73 >>> 4);
-        final int byte74 = blocks[blocksOffset++] & 0xFF;
-        final int byte75 = blocks[blocksOffset++] & 0xFF;
-        final int byte76 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte73 & 15) << 17) | (byte74 << 9) | (byte75 << 1) | (byte76 >>> 7);
-        final int byte77 = blocks[blocksOffset++] & 0xFF;
-        final int byte78 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte76 & 127) << 14) | (byte77 << 6) | (byte78 >>> 2);
-        final int byte79 = blocks[blocksOffset++] & 0xFF;
-        final int byte80 = blocks[blocksOffset++] & 0xFF;
-        final int byte81 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte78 & 3) << 19) | (byte79 << 11) | (byte80 << 3) | (byte81 >>> 5);
-        final int byte82 = blocks[blocksOffset++] & 0xFF;
-        final int byte83 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte81 & 31) << 16) | (byte82 << 8) | byte83;
-        final int byte84 = blocks[blocksOffset++] & 0xFF;
-        final int byte85 = blocks[blocksOffset++] & 0xFF;
-        final int byte86 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte84 << 13) | (byte85 << 5) | (byte86 >>> 3);
-        final int byte87 = blocks[blocksOffset++] & 0xFF;
-        final int byte88 = blocks[blocksOffset++] & 0xFF;
-        final int byte89 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte86 & 7) << 18) | (byte87 << 10) | (byte88 << 2) | (byte89 >>> 6);
-        final int byte90 = blocks[blocksOffset++] & 0xFF;
-        final int byte91 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte89 & 63) << 15) | (byte90 << 7) | (byte91 >>> 1);
-        final int byte92 = blocks[blocksOffset++] & 0xFF;
-        final int byte93 = blocks[blocksOffset++] & 0xFF;
-        final int byte94 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte91 & 1) << 20) | (byte92 << 12) | (byte93 << 4) | (byte94 >>> 4);
-        final int byte95 = blocks[blocksOffset++] & 0xFF;
-        final int byte96 = blocks[blocksOffset++] & 0xFF;
-        final int byte97 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte94 & 15) << 17) | (byte95 << 9) | (byte96 << 1) | (byte97 >>> 7);
-        final int byte98 = blocks[blocksOffset++] & 0xFF;
-        final int byte99 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte97 & 127) << 14) | (byte98 << 6) | (byte99 >>> 2);
-        final int byte100 = blocks[blocksOffset++] & 0xFF;
-        final int byte101 = blocks[blocksOffset++] & 0xFF;
-        final int byte102 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte99 & 3) << 19) | (byte100 << 11) | (byte101 << 3) | (byte102 >>> 5);
-        final int byte103 = blocks[blocksOffset++] & 0xFF;
-        final int byte104 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte102 & 31) << 16) | (byte103 << 8) | byte104;
-        final int byte105 = blocks[blocksOffset++] & 0xFF;
-        final int byte106 = blocks[blocksOffset++] & 0xFF;
-        final int byte107 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte105 << 13) | (byte106 << 5) | (byte107 >>> 3);
-        final int byte108 = blocks[blocksOffset++] & 0xFF;
-        final int byte109 = blocks[blocksOffset++] & 0xFF;
-        final int byte110 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte107 & 7) << 18) | (byte108 << 10) | (byte109 << 2) | (byte110 >>> 6);
-        final int byte111 = blocks[blocksOffset++] & 0xFF;
-        final int byte112 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte110 & 63) << 15) | (byte111 << 7) | (byte112 >>> 1);
-        final int byte113 = blocks[blocksOffset++] & 0xFF;
-        final int byte114 = blocks[blocksOffset++] & 0xFF;
-        final int byte115 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte112 & 1) << 20) | (byte113 << 12) | (byte114 << 4) | (byte115 >>> 4);
-        final int byte116 = blocks[blocksOffset++] & 0xFF;
-        final int byte117 = blocks[blocksOffset++] & 0xFF;
-        final int byte118 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte115 & 15) << 17) | (byte116 << 9) | (byte117 << 1) | (byte118 >>> 7);
-        final int byte119 = blocks[blocksOffset++] & 0xFF;
-        final int byte120 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte118 & 127) << 14) | (byte119 << 6) | (byte120 >>> 2);
-        final int byte121 = blocks[blocksOffset++] & 0xFF;
-        final int byte122 = blocks[blocksOffset++] & 0xFF;
-        final int byte123 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte120 & 3) << 19) | (byte121 << 11) | (byte122 << 3) | (byte123 >>> 5);
-        final int byte124 = blocks[blocksOffset++] & 0xFF;
-        final int byte125 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte123 & 31) << 16) | (byte124 << 8) | byte125;
-        final int byte126 = blocks[blocksOffset++] & 0xFF;
-        final int byte127 = blocks[blocksOffset++] & 0xFF;
-        final int byte128 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte126 << 13) | (byte127 << 5) | (byte128 >>> 3);
-        final int byte129 = blocks[blocksOffset++] & 0xFF;
-        final int byte130 = blocks[blocksOffset++] & 0xFF;
-        final int byte131 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte128 & 7) << 18) | (byte129 << 10) | (byte130 << 2) | (byte131 >>> 6);
-        final int byte132 = blocks[blocksOffset++] & 0xFF;
-        final int byte133 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte131 & 63) << 15) | (byte132 << 7) | (byte133 >>> 1);
-        final int byte134 = blocks[blocksOffset++] & 0xFF;
-        final int byte135 = blocks[blocksOffset++] & 0xFF;
-        final int byte136 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte133 & 1) << 20) | (byte134 << 12) | (byte135 << 4) | (byte136 >>> 4);
-        final int byte137 = blocks[blocksOffset++] & 0xFF;
-        final int byte138 = blocks[blocksOffset++] & 0xFF;
-        final int byte139 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte136 & 15) << 17) | (byte137 << 9) | (byte138 << 1) | (byte139 >>> 7);
-        final int byte140 = blocks[blocksOffset++] & 0xFF;
-        final int byte141 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte139 & 127) << 14) | (byte140 << 6) | (byte141 >>> 2);
-        final int byte142 = blocks[blocksOffset++] & 0xFF;
-        final int byte143 = blocks[blocksOffset++] & 0xFF;
-        final int byte144 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte141 & 3) << 19) | (byte142 << 11) | (byte143 << 3) | (byte144 >>> 5);
-        final int byte145 = blocks[blocksOffset++] & 0xFF;
-        final int byte146 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte144 & 31) << 16) | (byte145 << 8) | byte146;
-        final int byte147 = blocks[blocksOffset++] & 0xFF;
-        final int byte148 = blocks[blocksOffset++] & 0xFF;
-        final int byte149 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte147 << 13) | (byte148 << 5) | (byte149 >>> 3);
-        final int byte150 = blocks[blocksOffset++] & 0xFF;
-        final int byte151 = blocks[blocksOffset++] & 0xFF;
-        final int byte152 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte149 & 7) << 18) | (byte150 << 10) | (byte151 << 2) | (byte152 >>> 6);
-        final int byte153 = blocks[blocksOffset++] & 0xFF;
-        final int byte154 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte152 & 63) << 15) | (byte153 << 7) | (byte154 >>> 1);
-        final int byte155 = blocks[blocksOffset++] & 0xFF;
-        final int byte156 = blocks[blocksOffset++] & 0xFF;
-        final int byte157 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte154 & 1) << 20) | (byte155 << 12) | (byte156 << 4) | (byte157 >>> 4);
-        final int byte158 = blocks[blocksOffset++] & 0xFF;
-        final int byte159 = blocks[blocksOffset++] & 0xFF;
-        final int byte160 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte157 & 15) << 17) | (byte158 << 9) | (byte159 << 1) | (byte160 >>> 7);
-        final int byte161 = blocks[blocksOffset++] & 0xFF;
-        final int byte162 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte160 & 127) << 14) | (byte161 << 6) | (byte162 >>> 2);
-        final int byte163 = blocks[blocksOffset++] & 0xFF;
-        final int byte164 = blocks[blocksOffset++] & 0xFF;
-        final int byte165 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte162 & 3) << 19) | (byte163 << 11) | (byte164 << 3) | (byte165 >>> 5);
-        final int byte166 = blocks[blocksOffset++] & 0xFF;
-        final int byte167 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte165 & 31) << 16) | (byte166 << 8) | byte167;
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = block0 >>> 43;
@@ -458,9 +249,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final long byte0 = blocks[blocksOffset++] & 0xFF;
         final long byte1 = blocks[blocksOffset++] & 0xFF;
         final long byte2 = blocks[blocksOffset++] & 0xFF;
@@ -490,209 +279,6 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
         final long byte19 = blocks[blocksOffset++] & 0xFF;
         final long byte20 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte18 & 31) << 16) | (byte19 << 8) | byte20;
-        final long byte21 = blocks[blocksOffset++] & 0xFF;
-        final long byte22 = blocks[blocksOffset++] & 0xFF;
-        final long byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte21 << 13) | (byte22 << 5) | (byte23 >>> 3);
-        final long byte24 = blocks[blocksOffset++] & 0xFF;
-        final long byte25 = blocks[blocksOffset++] & 0xFF;
-        final long byte26 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte23 & 7) << 18) | (byte24 << 10) | (byte25 << 2) | (byte26 >>> 6);
-        final long byte27 = blocks[blocksOffset++] & 0xFF;
-        final long byte28 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte26 & 63) << 15) | (byte27 << 7) | (byte28 >>> 1);
-        final long byte29 = blocks[blocksOffset++] & 0xFF;
-        final long byte30 = blocks[blocksOffset++] & 0xFF;
-        final long byte31 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte28 & 1) << 20) | (byte29 << 12) | (byte30 << 4) | (byte31 >>> 4);
-        final long byte32 = blocks[blocksOffset++] & 0xFF;
-        final long byte33 = blocks[blocksOffset++] & 0xFF;
-        final long byte34 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte31 & 15) << 17) | (byte32 << 9) | (byte33 << 1) | (byte34 >>> 7);
-        final long byte35 = blocks[blocksOffset++] & 0xFF;
-        final long byte36 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte34 & 127) << 14) | (byte35 << 6) | (byte36 >>> 2);
-        final long byte37 = blocks[blocksOffset++] & 0xFF;
-        final long byte38 = blocks[blocksOffset++] & 0xFF;
-        final long byte39 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte36 & 3) << 19) | (byte37 << 11) | (byte38 << 3) | (byte39 >>> 5);
-        final long byte40 = blocks[blocksOffset++] & 0xFF;
-        final long byte41 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte39 & 31) << 16) | (byte40 << 8) | byte41;
-        final long byte42 = blocks[blocksOffset++] & 0xFF;
-        final long byte43 = blocks[blocksOffset++] & 0xFF;
-        final long byte44 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte42 << 13) | (byte43 << 5) | (byte44 >>> 3);
-        final long byte45 = blocks[blocksOffset++] & 0xFF;
-        final long byte46 = blocks[blocksOffset++] & 0xFF;
-        final long byte47 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte44 & 7) << 18) | (byte45 << 10) | (byte46 << 2) | (byte47 >>> 6);
-        final long byte48 = blocks[blocksOffset++] & 0xFF;
-        final long byte49 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte47 & 63) << 15) | (byte48 << 7) | (byte49 >>> 1);
-        final long byte50 = blocks[blocksOffset++] & 0xFF;
-        final long byte51 = blocks[blocksOffset++] & 0xFF;
-        final long byte52 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte49 & 1) << 20) | (byte50 << 12) | (byte51 << 4) | (byte52 >>> 4);
-        final long byte53 = blocks[blocksOffset++] & 0xFF;
-        final long byte54 = blocks[blocksOffset++] & 0xFF;
-        final long byte55 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte52 & 15) << 17) | (byte53 << 9) | (byte54 << 1) | (byte55 >>> 7);
-        final long byte56 = blocks[blocksOffset++] & 0xFF;
-        final long byte57 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte55 & 127) << 14) | (byte56 << 6) | (byte57 >>> 2);
-        final long byte58 = blocks[blocksOffset++] & 0xFF;
-        final long byte59 = blocks[blocksOffset++] & 0xFF;
-        final long byte60 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte57 & 3) << 19) | (byte58 << 11) | (byte59 << 3) | (byte60 >>> 5);
-        final long byte61 = blocks[blocksOffset++] & 0xFF;
-        final long byte62 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte60 & 31) << 16) | (byte61 << 8) | byte62;
-        final long byte63 = blocks[blocksOffset++] & 0xFF;
-        final long byte64 = blocks[blocksOffset++] & 0xFF;
-        final long byte65 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte63 << 13) | (byte64 << 5) | (byte65 >>> 3);
-        final long byte66 = blocks[blocksOffset++] & 0xFF;
-        final long byte67 = blocks[blocksOffset++] & 0xFF;
-        final long byte68 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte65 & 7) << 18) | (byte66 << 10) | (byte67 << 2) | (byte68 >>> 6);
-        final long byte69 = blocks[blocksOffset++] & 0xFF;
-        final long byte70 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte68 & 63) << 15) | (byte69 << 7) | (byte70 >>> 1);
-        final long byte71 = blocks[blocksOffset++] & 0xFF;
-        final long byte72 = blocks[blocksOffset++] & 0xFF;
-        final long byte73 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte70 & 1) << 20) | (byte71 << 12) | (byte72 << 4) | (byte73 >>> 4);
-        final long byte74 = blocks[blocksOffset++] & 0xFF;
-        final long byte75 = blocks[blocksOffset++] & 0xFF;
-        final long byte76 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte73 & 15) << 17) | (byte74 << 9) | (byte75 << 1) | (byte76 >>> 7);
-        final long byte77 = blocks[blocksOffset++] & 0xFF;
-        final long byte78 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte76 & 127) << 14) | (byte77 << 6) | (byte78 >>> 2);
-        final long byte79 = blocks[blocksOffset++] & 0xFF;
-        final long byte80 = blocks[blocksOffset++] & 0xFF;
-        final long byte81 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte78 & 3) << 19) | (byte79 << 11) | (byte80 << 3) | (byte81 >>> 5);
-        final long byte82 = blocks[blocksOffset++] & 0xFF;
-        final long byte83 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte81 & 31) << 16) | (byte82 << 8) | byte83;
-        final long byte84 = blocks[blocksOffset++] & 0xFF;
-        final long byte85 = blocks[blocksOffset++] & 0xFF;
-        final long byte86 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte84 << 13) | (byte85 << 5) | (byte86 >>> 3);
-        final long byte87 = blocks[blocksOffset++] & 0xFF;
-        final long byte88 = blocks[blocksOffset++] & 0xFF;
-        final long byte89 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte86 & 7) << 18) | (byte87 << 10) | (byte88 << 2) | (byte89 >>> 6);
-        final long byte90 = blocks[blocksOffset++] & 0xFF;
-        final long byte91 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte89 & 63) << 15) | (byte90 << 7) | (byte91 >>> 1);
-        final long byte92 = blocks[blocksOffset++] & 0xFF;
-        final long byte93 = blocks[blocksOffset++] & 0xFF;
-        final long byte94 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte91 & 1) << 20) | (byte92 << 12) | (byte93 << 4) | (byte94 >>> 4);
-        final long byte95 = blocks[blocksOffset++] & 0xFF;
-        final long byte96 = blocks[blocksOffset++] & 0xFF;
-        final long byte97 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte94 & 15) << 17) | (byte95 << 9) | (byte96 << 1) | (byte97 >>> 7);
-        final long byte98 = blocks[blocksOffset++] & 0xFF;
-        final long byte99 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte97 & 127) << 14) | (byte98 << 6) | (byte99 >>> 2);
-        final long byte100 = blocks[blocksOffset++] & 0xFF;
-        final long byte101 = blocks[blocksOffset++] & 0xFF;
-        final long byte102 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte99 & 3) << 19) | (byte100 << 11) | (byte101 << 3) | (byte102 >>> 5);
-        final long byte103 = blocks[blocksOffset++] & 0xFF;
-        final long byte104 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte102 & 31) << 16) | (byte103 << 8) | byte104;
-        final long byte105 = blocks[blocksOffset++] & 0xFF;
-        final long byte106 = blocks[blocksOffset++] & 0xFF;
-        final long byte107 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte105 << 13) | (byte106 << 5) | (byte107 >>> 3);
-        final long byte108 = blocks[blocksOffset++] & 0xFF;
-        final long byte109 = blocks[blocksOffset++] & 0xFF;
-        final long byte110 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte107 & 7) << 18) | (byte108 << 10) | (byte109 << 2) | (byte110 >>> 6);
-        final long byte111 = blocks[blocksOffset++] & 0xFF;
-        final long byte112 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte110 & 63) << 15) | (byte111 << 7) | (byte112 >>> 1);
-        final long byte113 = blocks[blocksOffset++] & 0xFF;
-        final long byte114 = blocks[blocksOffset++] & 0xFF;
-        final long byte115 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte112 & 1) << 20) | (byte113 << 12) | (byte114 << 4) | (byte115 >>> 4);
-        final long byte116 = blocks[blocksOffset++] & 0xFF;
-        final long byte117 = blocks[blocksOffset++] & 0xFF;
-        final long byte118 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte115 & 15) << 17) | (byte116 << 9) | (byte117 << 1) | (byte118 >>> 7);
-        final long byte119 = blocks[blocksOffset++] & 0xFF;
-        final long byte120 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte118 & 127) << 14) | (byte119 << 6) | (byte120 >>> 2);
-        final long byte121 = blocks[blocksOffset++] & 0xFF;
-        final long byte122 = blocks[blocksOffset++] & 0xFF;
-        final long byte123 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte120 & 3) << 19) | (byte121 << 11) | (byte122 << 3) | (byte123 >>> 5);
-        final long byte124 = blocks[blocksOffset++] & 0xFF;
-        final long byte125 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte123 & 31) << 16) | (byte124 << 8) | byte125;
-        final long byte126 = blocks[blocksOffset++] & 0xFF;
-        final long byte127 = blocks[blocksOffset++] & 0xFF;
-        final long byte128 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte126 << 13) | (byte127 << 5) | (byte128 >>> 3);
-        final long byte129 = blocks[blocksOffset++] & 0xFF;
-        final long byte130 = blocks[blocksOffset++] & 0xFF;
-        final long byte131 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte128 & 7) << 18) | (byte129 << 10) | (byte130 << 2) | (byte131 >>> 6);
-        final long byte132 = blocks[blocksOffset++] & 0xFF;
-        final long byte133 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte131 & 63) << 15) | (byte132 << 7) | (byte133 >>> 1);
-        final long byte134 = blocks[blocksOffset++] & 0xFF;
-        final long byte135 = blocks[blocksOffset++] & 0xFF;
-        final long byte136 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte133 & 1) << 20) | (byte134 << 12) | (byte135 << 4) | (byte136 >>> 4);
-        final long byte137 = blocks[blocksOffset++] & 0xFF;
-        final long byte138 = blocks[blocksOffset++] & 0xFF;
-        final long byte139 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte136 & 15) << 17) | (byte137 << 9) | (byte138 << 1) | (byte139 >>> 7);
-        final long byte140 = blocks[blocksOffset++] & 0xFF;
-        final long byte141 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte139 & 127) << 14) | (byte140 << 6) | (byte141 >>> 2);
-        final long byte142 = blocks[blocksOffset++] & 0xFF;
-        final long byte143 = blocks[blocksOffset++] & 0xFF;
-        final long byte144 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte141 & 3) << 19) | (byte142 << 11) | (byte143 << 3) | (byte144 >>> 5);
-        final long byte145 = blocks[blocksOffset++] & 0xFF;
-        final long byte146 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte144 & 31) << 16) | (byte145 << 8) | byte146;
-        final long byte147 = blocks[blocksOffset++] & 0xFF;
-        final long byte148 = blocks[blocksOffset++] & 0xFF;
-        final long byte149 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte147 << 13) | (byte148 << 5) | (byte149 >>> 3);
-        final long byte150 = blocks[blocksOffset++] & 0xFF;
-        final long byte151 = blocks[blocksOffset++] & 0xFF;
-        final long byte152 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte149 & 7) << 18) | (byte150 << 10) | (byte151 << 2) | (byte152 >>> 6);
-        final long byte153 = blocks[blocksOffset++] & 0xFF;
-        final long byte154 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte152 & 63) << 15) | (byte153 << 7) | (byte154 >>> 1);
-        final long byte155 = blocks[blocksOffset++] & 0xFF;
-        final long byte156 = blocks[blocksOffset++] & 0xFF;
-        final long byte157 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte154 & 1) << 20) | (byte155 << 12) | (byte156 << 4) | (byte157 >>> 4);
-        final long byte158 = blocks[blocksOffset++] & 0xFF;
-        final long byte159 = blocks[blocksOffset++] & 0xFF;
-        final long byte160 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte157 & 15) << 17) | (byte158 << 9) | (byte159 << 1) | (byte160 >>> 7);
-        final long byte161 = blocks[blocksOffset++] & 0xFF;
-        final long byte162 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte160 & 127) << 14) | (byte161 << 6) | (byte162 >>> 2);
-        final long byte163 = blocks[blocksOffset++] & 0xFF;
-        final long byte164 = blocks[blocksOffset++] & 0xFF;
-        final long byte165 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte162 & 3) << 19) | (byte163 << 11) | (byte164 << 3) | (byte165 >>> 5);
-        final long byte166 = blocks[blocksOffset++] & 0xFF;
-        final long byte167 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte165 & 31) << 16) | (byte166 << 8) | byte167;
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked22.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked22.java
index 7fded6fe..48b0a386 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked22.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked22.java
@@ -32,8 +32,6 @@ public BulkOperationPacked22() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = (int) (block0 >>> 42);
@@ -83,9 +81,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final int byte0 = blocks[blocksOffset++] & 0xFF;
         final int byte1 = blocks[blocksOffset++] & 0xFF;
         final int byte2 = blocks[blocksOffset++] & 0xFF;
@@ -101,118 +97,11 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
         final int byte9 = blocks[blocksOffset++] & 0xFF;
         final int byte10 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte8 & 63) << 16) | (byte9 << 8) | byte10;
-        final int byte11 = blocks[blocksOffset++] & 0xFF;
-        final int byte12 = blocks[blocksOffset++] & 0xFF;
-        final int byte13 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte11 << 14) | (byte12 << 6) | (byte13 >>> 2);
-        final int byte14 = blocks[blocksOffset++] & 0xFF;
-        final int byte15 = blocks[blocksOffset++] & 0xFF;
-        final int byte16 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte13 & 3) << 20) | (byte14 << 12) | (byte15 << 4) | (byte16 >>> 4);
-        final int byte17 = blocks[blocksOffset++] & 0xFF;
-        final int byte18 = blocks[blocksOffset++] & 0xFF;
-        final int byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte16 & 15) << 18) | (byte17 << 10) | (byte18 << 2) | (byte19 >>> 6);
-        final int byte20 = blocks[blocksOffset++] & 0xFF;
-        final int byte21 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte19 & 63) << 16) | (byte20 << 8) | byte21;
-        final int byte22 = blocks[blocksOffset++] & 0xFF;
-        final int byte23 = blocks[blocksOffset++] & 0xFF;
-        final int byte24 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte22 << 14) | (byte23 << 6) | (byte24 >>> 2);
-        final int byte25 = blocks[blocksOffset++] & 0xFF;
-        final int byte26 = blocks[blocksOffset++] & 0xFF;
-        final int byte27 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte24 & 3) << 20) | (byte25 << 12) | (byte26 << 4) | (byte27 >>> 4);
-        final int byte28 = blocks[blocksOffset++] & 0xFF;
-        final int byte29 = blocks[blocksOffset++] & 0xFF;
-        final int byte30 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte27 & 15) << 18) | (byte28 << 10) | (byte29 << 2) | (byte30 >>> 6);
-        final int byte31 = blocks[blocksOffset++] & 0xFF;
-        final int byte32 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte30 & 63) << 16) | (byte31 << 8) | byte32;
-        final int byte33 = blocks[blocksOffset++] & 0xFF;
-        final int byte34 = blocks[blocksOffset++] & 0xFF;
-        final int byte35 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte33 << 14) | (byte34 << 6) | (byte35 >>> 2);
-        final int byte36 = blocks[blocksOffset++] & 0xFF;
-        final int byte37 = blocks[blocksOffset++] & 0xFF;
-        final int byte38 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte35 & 3) << 20) | (byte36 << 12) | (byte37 << 4) | (byte38 >>> 4);
-        final int byte39 = blocks[blocksOffset++] & 0xFF;
-        final int byte40 = blocks[blocksOffset++] & 0xFF;
-        final int byte41 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte38 & 15) << 18) | (byte39 << 10) | (byte40 << 2) | (byte41 >>> 6);
-        final int byte42 = blocks[blocksOffset++] & 0xFF;
-        final int byte43 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte41 & 63) << 16) | (byte42 << 8) | byte43;
-        final int byte44 = blocks[blocksOffset++] & 0xFF;
-        final int byte45 = blocks[blocksOffset++] & 0xFF;
-        final int byte46 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte44 << 14) | (byte45 << 6) | (byte46 >>> 2);
-        final int byte47 = blocks[blocksOffset++] & 0xFF;
-        final int byte48 = blocks[blocksOffset++] & 0xFF;
-        final int byte49 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte46 & 3) << 20) | (byte47 << 12) | (byte48 << 4) | (byte49 >>> 4);
-        final int byte50 = blocks[blocksOffset++] & 0xFF;
-        final int byte51 = blocks[blocksOffset++] & 0xFF;
-        final int byte52 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte49 & 15) << 18) | (byte50 << 10) | (byte51 << 2) | (byte52 >>> 6);
-        final int byte53 = blocks[blocksOffset++] & 0xFF;
-        final int byte54 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte52 & 63) << 16) | (byte53 << 8) | byte54;
-        final int byte55 = blocks[blocksOffset++] & 0xFF;
-        final int byte56 = blocks[blocksOffset++] & 0xFF;
-        final int byte57 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte55 << 14) | (byte56 << 6) | (byte57 >>> 2);
-        final int byte58 = blocks[blocksOffset++] & 0xFF;
-        final int byte59 = blocks[blocksOffset++] & 0xFF;
-        final int byte60 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte57 & 3) << 20) | (byte58 << 12) | (byte59 << 4) | (byte60 >>> 4);
-        final int byte61 = blocks[blocksOffset++] & 0xFF;
-        final int byte62 = blocks[blocksOffset++] & 0xFF;
-        final int byte63 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte60 & 15) << 18) | (byte61 << 10) | (byte62 << 2) | (byte63 >>> 6);
-        final int byte64 = blocks[blocksOffset++] & 0xFF;
-        final int byte65 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte63 & 63) << 16) | (byte64 << 8) | byte65;
-        final int byte66 = blocks[blocksOffset++] & 0xFF;
-        final int byte67 = blocks[blocksOffset++] & 0xFF;
-        final int byte68 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte66 << 14) | (byte67 << 6) | (byte68 >>> 2);
-        final int byte69 = blocks[blocksOffset++] & 0xFF;
-        final int byte70 = blocks[blocksOffset++] & 0xFF;
-        final int byte71 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte68 & 3) << 20) | (byte69 << 12) | (byte70 << 4) | (byte71 >>> 4);
-        final int byte72 = blocks[blocksOffset++] & 0xFF;
-        final int byte73 = blocks[blocksOffset++] & 0xFF;
-        final int byte74 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte71 & 15) << 18) | (byte72 << 10) | (byte73 << 2) | (byte74 >>> 6);
-        final int byte75 = blocks[blocksOffset++] & 0xFF;
-        final int byte76 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte74 & 63) << 16) | (byte75 << 8) | byte76;
-        final int byte77 = blocks[blocksOffset++] & 0xFF;
-        final int byte78 = blocks[blocksOffset++] & 0xFF;
-        final int byte79 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte77 << 14) | (byte78 << 6) | (byte79 >>> 2);
-        final int byte80 = blocks[blocksOffset++] & 0xFF;
-        final int byte81 = blocks[blocksOffset++] & 0xFF;
-        final int byte82 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte79 & 3) << 20) | (byte80 << 12) | (byte81 << 4) | (byte82 >>> 4);
-        final int byte83 = blocks[blocksOffset++] & 0xFF;
-        final int byte84 = blocks[blocksOffset++] & 0xFF;
-        final int byte85 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte82 & 15) << 18) | (byte83 << 10) | (byte84 << 2) | (byte85 >>> 6);
-        final int byte86 = blocks[blocksOffset++] & 0xFF;
-        final int byte87 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte85 & 63) << 16) | (byte86 << 8) | byte87;
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = block0 >>> 42;
@@ -262,9 +151,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final long byte0 = blocks[blocksOffset++] & 0xFF;
         final long byte1 = blocks[blocksOffset++] & 0xFF;
         final long byte2 = blocks[blocksOffset++] & 0xFF;
@@ -280,111 +167,6 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
         final long byte9 = blocks[blocksOffset++] & 0xFF;
         final long byte10 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte8 & 63) << 16) | (byte9 << 8) | byte10;
-        final long byte11 = blocks[blocksOffset++] & 0xFF;
-        final long byte12 = blocks[blocksOffset++] & 0xFF;
-        final long byte13 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte11 << 14) | (byte12 << 6) | (byte13 >>> 2);
-        final long byte14 = blocks[blocksOffset++] & 0xFF;
-        final long byte15 = blocks[blocksOffset++] & 0xFF;
-        final long byte16 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte13 & 3) << 20) | (byte14 << 12) | (byte15 << 4) | (byte16 >>> 4);
-        final long byte17 = blocks[blocksOffset++] & 0xFF;
-        final long byte18 = blocks[blocksOffset++] & 0xFF;
-        final long byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte16 & 15) << 18) | (byte17 << 10) | (byte18 << 2) | (byte19 >>> 6);
-        final long byte20 = blocks[blocksOffset++] & 0xFF;
-        final long byte21 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte19 & 63) << 16) | (byte20 << 8) | byte21;
-        final long byte22 = blocks[blocksOffset++] & 0xFF;
-        final long byte23 = blocks[blocksOffset++] & 0xFF;
-        final long byte24 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte22 << 14) | (byte23 << 6) | (byte24 >>> 2);
-        final long byte25 = blocks[blocksOffset++] & 0xFF;
-        final long byte26 = blocks[blocksOffset++] & 0xFF;
-        final long byte27 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte24 & 3) << 20) | (byte25 << 12) | (byte26 << 4) | (byte27 >>> 4);
-        final long byte28 = blocks[blocksOffset++] & 0xFF;
-        final long byte29 = blocks[blocksOffset++] & 0xFF;
-        final long byte30 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte27 & 15) << 18) | (byte28 << 10) | (byte29 << 2) | (byte30 >>> 6);
-        final long byte31 = blocks[blocksOffset++] & 0xFF;
-        final long byte32 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte30 & 63) << 16) | (byte31 << 8) | byte32;
-        final long byte33 = blocks[blocksOffset++] & 0xFF;
-        final long byte34 = blocks[blocksOffset++] & 0xFF;
-        final long byte35 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte33 << 14) | (byte34 << 6) | (byte35 >>> 2);
-        final long byte36 = blocks[blocksOffset++] & 0xFF;
-        final long byte37 = blocks[blocksOffset++] & 0xFF;
-        final long byte38 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte35 & 3) << 20) | (byte36 << 12) | (byte37 << 4) | (byte38 >>> 4);
-        final long byte39 = blocks[blocksOffset++] & 0xFF;
-        final long byte40 = blocks[blocksOffset++] & 0xFF;
-        final long byte41 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte38 & 15) << 18) | (byte39 << 10) | (byte40 << 2) | (byte41 >>> 6);
-        final long byte42 = blocks[blocksOffset++] & 0xFF;
-        final long byte43 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte41 & 63) << 16) | (byte42 << 8) | byte43;
-        final long byte44 = blocks[blocksOffset++] & 0xFF;
-        final long byte45 = blocks[blocksOffset++] & 0xFF;
-        final long byte46 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte44 << 14) | (byte45 << 6) | (byte46 >>> 2);
-        final long byte47 = blocks[blocksOffset++] & 0xFF;
-        final long byte48 = blocks[blocksOffset++] & 0xFF;
-        final long byte49 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte46 & 3) << 20) | (byte47 << 12) | (byte48 << 4) | (byte49 >>> 4);
-        final long byte50 = blocks[blocksOffset++] & 0xFF;
-        final long byte51 = blocks[blocksOffset++] & 0xFF;
-        final long byte52 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte49 & 15) << 18) | (byte50 << 10) | (byte51 << 2) | (byte52 >>> 6);
-        final long byte53 = blocks[blocksOffset++] & 0xFF;
-        final long byte54 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte52 & 63) << 16) | (byte53 << 8) | byte54;
-        final long byte55 = blocks[blocksOffset++] & 0xFF;
-        final long byte56 = blocks[blocksOffset++] & 0xFF;
-        final long byte57 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte55 << 14) | (byte56 << 6) | (byte57 >>> 2);
-        final long byte58 = blocks[blocksOffset++] & 0xFF;
-        final long byte59 = blocks[blocksOffset++] & 0xFF;
-        final long byte60 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte57 & 3) << 20) | (byte58 << 12) | (byte59 << 4) | (byte60 >>> 4);
-        final long byte61 = blocks[blocksOffset++] & 0xFF;
-        final long byte62 = blocks[blocksOffset++] & 0xFF;
-        final long byte63 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte60 & 15) << 18) | (byte61 << 10) | (byte62 << 2) | (byte63 >>> 6);
-        final long byte64 = blocks[blocksOffset++] & 0xFF;
-        final long byte65 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte63 & 63) << 16) | (byte64 << 8) | byte65;
-        final long byte66 = blocks[blocksOffset++] & 0xFF;
-        final long byte67 = blocks[blocksOffset++] & 0xFF;
-        final long byte68 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte66 << 14) | (byte67 << 6) | (byte68 >>> 2);
-        final long byte69 = blocks[blocksOffset++] & 0xFF;
-        final long byte70 = blocks[blocksOffset++] & 0xFF;
-        final long byte71 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte68 & 3) << 20) | (byte69 << 12) | (byte70 << 4) | (byte71 >>> 4);
-        final long byte72 = blocks[blocksOffset++] & 0xFF;
-        final long byte73 = blocks[blocksOffset++] & 0xFF;
-        final long byte74 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte71 & 15) << 18) | (byte72 << 10) | (byte73 << 2) | (byte74 >>> 6);
-        final long byte75 = blocks[blocksOffset++] & 0xFF;
-        final long byte76 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte74 & 63) << 16) | (byte75 << 8) | byte76;
-        final long byte77 = blocks[blocksOffset++] & 0xFF;
-        final long byte78 = blocks[blocksOffset++] & 0xFF;
-        final long byte79 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte77 << 14) | (byte78 << 6) | (byte79 >>> 2);
-        final long byte80 = blocks[blocksOffset++] & 0xFF;
-        final long byte81 = blocks[blocksOffset++] & 0xFF;
-        final long byte82 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte79 & 3) << 20) | (byte80 << 12) | (byte81 << 4) | (byte82 >>> 4);
-        final long byte83 = blocks[blocksOffset++] & 0xFF;
-        final long byte84 = blocks[blocksOffset++] & 0xFF;
-        final long byte85 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte82 & 15) << 18) | (byte83 << 10) | (byte84 << 2) | (byte85 >>> 6);
-        final long byte86 = blocks[blocksOffset++] & 0xFF;
-        final long byte87 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte85 & 63) << 16) | (byte86 << 8) | byte87;
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked23.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked23.java
index 67457981..7aaa3fc9 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked23.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked23.java
@@ -32,8 +32,6 @@ public BulkOperationPacked23() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = (int) (block0 >>> 41);
@@ -127,9 +125,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final int byte0 = blocks[blocksOffset++] & 0xFF;
         final int byte1 = blocks[blocksOffset++] & 0xFF;
         final int byte2 = blocks[blocksOffset++] & 0xFF;
@@ -161,230 +157,11 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
         final int byte21 = blocks[blocksOffset++] & 0xFF;
         final int byte22 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte20 & 127) << 16) | (byte21 << 8) | byte22;
-        final int byte23 = blocks[blocksOffset++] & 0xFF;
-        final int byte24 = blocks[blocksOffset++] & 0xFF;
-        final int byte25 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte23 << 15) | (byte24 << 7) | (byte25 >>> 1);
-        final int byte26 = blocks[blocksOffset++] & 0xFF;
-        final int byte27 = blocks[blocksOffset++] & 0xFF;
-        final int byte28 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte25 & 1) << 22) | (byte26 << 14) | (byte27 << 6) | (byte28 >>> 2);
-        final int byte29 = blocks[blocksOffset++] & 0xFF;
-        final int byte30 = blocks[blocksOffset++] & 0xFF;
-        final int byte31 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte28 & 3) << 21) | (byte29 << 13) | (byte30 << 5) | (byte31 >>> 3);
-        final int byte32 = blocks[blocksOffset++] & 0xFF;
-        final int byte33 = blocks[blocksOffset++] & 0xFF;
-        final int byte34 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte31 & 7) << 20) | (byte32 << 12) | (byte33 << 4) | (byte34 >>> 4);
-        final int byte35 = blocks[blocksOffset++] & 0xFF;
-        final int byte36 = blocks[blocksOffset++] & 0xFF;
-        final int byte37 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte34 & 15) << 19) | (byte35 << 11) | (byte36 << 3) | (byte37 >>> 5);
-        final int byte38 = blocks[blocksOffset++] & 0xFF;
-        final int byte39 = blocks[blocksOffset++] & 0xFF;
-        final int byte40 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte37 & 31) << 18) | (byte38 << 10) | (byte39 << 2) | (byte40 >>> 6);
-        final int byte41 = blocks[blocksOffset++] & 0xFF;
-        final int byte42 = blocks[blocksOffset++] & 0xFF;
-        final int byte43 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte40 & 63) << 17) | (byte41 << 9) | (byte42 << 1) | (byte43 >>> 7);
-        final int byte44 = blocks[blocksOffset++] & 0xFF;
-        final int byte45 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte43 & 127) << 16) | (byte44 << 8) | byte45;
-        final int byte46 = blocks[blocksOffset++] & 0xFF;
-        final int byte47 = blocks[blocksOffset++] & 0xFF;
-        final int byte48 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte46 << 15) | (byte47 << 7) | (byte48 >>> 1);
-        final int byte49 = blocks[blocksOffset++] & 0xFF;
-        final int byte50 = blocks[blocksOffset++] & 0xFF;
-        final int byte51 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte48 & 1) << 22) | (byte49 << 14) | (byte50 << 6) | (byte51 >>> 2);
-        final int byte52 = blocks[blocksOffset++] & 0xFF;
-        final int byte53 = blocks[blocksOffset++] & 0xFF;
-        final int byte54 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte51 & 3) << 21) | (byte52 << 13) | (byte53 << 5) | (byte54 >>> 3);
-        final int byte55 = blocks[blocksOffset++] & 0xFF;
-        final int byte56 = blocks[blocksOffset++] & 0xFF;
-        final int byte57 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte54 & 7) << 20) | (byte55 << 12) | (byte56 << 4) | (byte57 >>> 4);
-        final int byte58 = blocks[blocksOffset++] & 0xFF;
-        final int byte59 = blocks[blocksOffset++] & 0xFF;
-        final int byte60 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte57 & 15) << 19) | (byte58 << 11) | (byte59 << 3) | (byte60 >>> 5);
-        final int byte61 = blocks[blocksOffset++] & 0xFF;
-        final int byte62 = blocks[blocksOffset++] & 0xFF;
-        final int byte63 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte60 & 31) << 18) | (byte61 << 10) | (byte62 << 2) | (byte63 >>> 6);
-        final int byte64 = blocks[blocksOffset++] & 0xFF;
-        final int byte65 = blocks[blocksOffset++] & 0xFF;
-        final int byte66 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte63 & 63) << 17) | (byte64 << 9) | (byte65 << 1) | (byte66 >>> 7);
-        final int byte67 = blocks[blocksOffset++] & 0xFF;
-        final int byte68 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte66 & 127) << 16) | (byte67 << 8) | byte68;
-        final int byte69 = blocks[blocksOffset++] & 0xFF;
-        final int byte70 = blocks[blocksOffset++] & 0xFF;
-        final int byte71 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte69 << 15) | (byte70 << 7) | (byte71 >>> 1);
-        final int byte72 = blocks[blocksOffset++] & 0xFF;
-        final int byte73 = blocks[blocksOffset++] & 0xFF;
-        final int byte74 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte71 & 1) << 22) | (byte72 << 14) | (byte73 << 6) | (byte74 >>> 2);
-        final int byte75 = blocks[blocksOffset++] & 0xFF;
-        final int byte76 = blocks[blocksOffset++] & 0xFF;
-        final int byte77 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte74 & 3) << 21) | (byte75 << 13) | (byte76 << 5) | (byte77 >>> 3);
-        final int byte78 = blocks[blocksOffset++] & 0xFF;
-        final int byte79 = blocks[blocksOffset++] & 0xFF;
-        final int byte80 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte77 & 7) << 20) | (byte78 << 12) | (byte79 << 4) | (byte80 >>> 4);
-        final int byte81 = blocks[blocksOffset++] & 0xFF;
-        final int byte82 = blocks[blocksOffset++] & 0xFF;
-        final int byte83 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte80 & 15) << 19) | (byte81 << 11) | (byte82 << 3) | (byte83 >>> 5);
-        final int byte84 = blocks[blocksOffset++] & 0xFF;
-        final int byte85 = blocks[blocksOffset++] & 0xFF;
-        final int byte86 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte83 & 31) << 18) | (byte84 << 10) | (byte85 << 2) | (byte86 >>> 6);
-        final int byte87 = blocks[blocksOffset++] & 0xFF;
-        final int byte88 = blocks[blocksOffset++] & 0xFF;
-        final int byte89 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte86 & 63) << 17) | (byte87 << 9) | (byte88 << 1) | (byte89 >>> 7);
-        final int byte90 = blocks[blocksOffset++] & 0xFF;
-        final int byte91 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte89 & 127) << 16) | (byte90 << 8) | byte91;
-        final int byte92 = blocks[blocksOffset++] & 0xFF;
-        final int byte93 = blocks[blocksOffset++] & 0xFF;
-        final int byte94 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte92 << 15) | (byte93 << 7) | (byte94 >>> 1);
-        final int byte95 = blocks[blocksOffset++] & 0xFF;
-        final int byte96 = blocks[blocksOffset++] & 0xFF;
-        final int byte97 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte94 & 1) << 22) | (byte95 << 14) | (byte96 << 6) | (byte97 >>> 2);
-        final int byte98 = blocks[blocksOffset++] & 0xFF;
-        final int byte99 = blocks[blocksOffset++] & 0xFF;
-        final int byte100 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte97 & 3) << 21) | (byte98 << 13) | (byte99 << 5) | (byte100 >>> 3);
-        final int byte101 = blocks[blocksOffset++] & 0xFF;
-        final int byte102 = blocks[blocksOffset++] & 0xFF;
-        final int byte103 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte100 & 7) << 20) | (byte101 << 12) | (byte102 << 4) | (byte103 >>> 4);
-        final int byte104 = blocks[blocksOffset++] & 0xFF;
-        final int byte105 = blocks[blocksOffset++] & 0xFF;
-        final int byte106 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte103 & 15) << 19) | (byte104 << 11) | (byte105 << 3) | (byte106 >>> 5);
-        final int byte107 = blocks[blocksOffset++] & 0xFF;
-        final int byte108 = blocks[blocksOffset++] & 0xFF;
-        final int byte109 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte106 & 31) << 18) | (byte107 << 10) | (byte108 << 2) | (byte109 >>> 6);
-        final int byte110 = blocks[blocksOffset++] & 0xFF;
-        final int byte111 = blocks[blocksOffset++] & 0xFF;
-        final int byte112 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte109 & 63) << 17) | (byte110 << 9) | (byte111 << 1) | (byte112 >>> 7);
-        final int byte113 = blocks[blocksOffset++] & 0xFF;
-        final int byte114 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte112 & 127) << 16) | (byte113 << 8) | byte114;
-        final int byte115 = blocks[blocksOffset++] & 0xFF;
-        final int byte116 = blocks[blocksOffset++] & 0xFF;
-        final int byte117 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte115 << 15) | (byte116 << 7) | (byte117 >>> 1);
-        final int byte118 = blocks[blocksOffset++] & 0xFF;
-        final int byte119 = blocks[blocksOffset++] & 0xFF;
-        final int byte120 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte117 & 1) << 22) | (byte118 << 14) | (byte119 << 6) | (byte120 >>> 2);
-        final int byte121 = blocks[blocksOffset++] & 0xFF;
-        final int byte122 = blocks[blocksOffset++] & 0xFF;
-        final int byte123 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte120 & 3) << 21) | (byte121 << 13) | (byte122 << 5) | (byte123 >>> 3);
-        final int byte124 = blocks[blocksOffset++] & 0xFF;
-        final int byte125 = blocks[blocksOffset++] & 0xFF;
-        final int byte126 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte123 & 7) << 20) | (byte124 << 12) | (byte125 << 4) | (byte126 >>> 4);
-        final int byte127 = blocks[blocksOffset++] & 0xFF;
-        final int byte128 = blocks[blocksOffset++] & 0xFF;
-        final int byte129 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte126 & 15) << 19) | (byte127 << 11) | (byte128 << 3) | (byte129 >>> 5);
-        final int byte130 = blocks[blocksOffset++] & 0xFF;
-        final int byte131 = blocks[blocksOffset++] & 0xFF;
-        final int byte132 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte129 & 31) << 18) | (byte130 << 10) | (byte131 << 2) | (byte132 >>> 6);
-        final int byte133 = blocks[blocksOffset++] & 0xFF;
-        final int byte134 = blocks[blocksOffset++] & 0xFF;
-        final int byte135 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte132 & 63) << 17) | (byte133 << 9) | (byte134 << 1) | (byte135 >>> 7);
-        final int byte136 = blocks[blocksOffset++] & 0xFF;
-        final int byte137 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte135 & 127) << 16) | (byte136 << 8) | byte137;
-        final int byte138 = blocks[blocksOffset++] & 0xFF;
-        final int byte139 = blocks[blocksOffset++] & 0xFF;
-        final int byte140 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte138 << 15) | (byte139 << 7) | (byte140 >>> 1);
-        final int byte141 = blocks[blocksOffset++] & 0xFF;
-        final int byte142 = blocks[blocksOffset++] & 0xFF;
-        final int byte143 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte140 & 1) << 22) | (byte141 << 14) | (byte142 << 6) | (byte143 >>> 2);
-        final int byte144 = blocks[blocksOffset++] & 0xFF;
-        final int byte145 = blocks[blocksOffset++] & 0xFF;
-        final int byte146 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte143 & 3) << 21) | (byte144 << 13) | (byte145 << 5) | (byte146 >>> 3);
-        final int byte147 = blocks[blocksOffset++] & 0xFF;
-        final int byte148 = blocks[blocksOffset++] & 0xFF;
-        final int byte149 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte146 & 7) << 20) | (byte147 << 12) | (byte148 << 4) | (byte149 >>> 4);
-        final int byte150 = blocks[blocksOffset++] & 0xFF;
-        final int byte151 = blocks[blocksOffset++] & 0xFF;
-        final int byte152 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte149 & 15) << 19) | (byte150 << 11) | (byte151 << 3) | (byte152 >>> 5);
-        final int byte153 = blocks[blocksOffset++] & 0xFF;
-        final int byte154 = blocks[blocksOffset++] & 0xFF;
-        final int byte155 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte152 & 31) << 18) | (byte153 << 10) | (byte154 << 2) | (byte155 >>> 6);
-        final int byte156 = blocks[blocksOffset++] & 0xFF;
-        final int byte157 = blocks[blocksOffset++] & 0xFF;
-        final int byte158 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte155 & 63) << 17) | (byte156 << 9) | (byte157 << 1) | (byte158 >>> 7);
-        final int byte159 = blocks[blocksOffset++] & 0xFF;
-        final int byte160 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte158 & 127) << 16) | (byte159 << 8) | byte160;
-        final int byte161 = blocks[blocksOffset++] & 0xFF;
-        final int byte162 = blocks[blocksOffset++] & 0xFF;
-        final int byte163 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte161 << 15) | (byte162 << 7) | (byte163 >>> 1);
-        final int byte164 = blocks[blocksOffset++] & 0xFF;
-        final int byte165 = blocks[blocksOffset++] & 0xFF;
-        final int byte166 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte163 & 1) << 22) | (byte164 << 14) | (byte165 << 6) | (byte166 >>> 2);
-        final int byte167 = blocks[blocksOffset++] & 0xFF;
-        final int byte168 = blocks[blocksOffset++] & 0xFF;
-        final int byte169 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte166 & 3) << 21) | (byte167 << 13) | (byte168 << 5) | (byte169 >>> 3);
-        final int byte170 = blocks[blocksOffset++] & 0xFF;
-        final int byte171 = blocks[blocksOffset++] & 0xFF;
-        final int byte172 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte169 & 7) << 20) | (byte170 << 12) | (byte171 << 4) | (byte172 >>> 4);
-        final int byte173 = blocks[blocksOffset++] & 0xFF;
-        final int byte174 = blocks[blocksOffset++] & 0xFF;
-        final int byte175 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte172 & 15) << 19) | (byte173 << 11) | (byte174 << 3) | (byte175 >>> 5);
-        final int byte176 = blocks[blocksOffset++] & 0xFF;
-        final int byte177 = blocks[blocksOffset++] & 0xFF;
-        final int byte178 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte175 & 31) << 18) | (byte176 << 10) | (byte177 << 2) | (byte178 >>> 6);
-        final int byte179 = blocks[blocksOffset++] & 0xFF;
-        final int byte180 = blocks[blocksOffset++] & 0xFF;
-        final int byte181 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte178 & 63) << 17) | (byte179 << 9) | (byte180 << 1) | (byte181 >>> 7);
-        final int byte182 = blocks[blocksOffset++] & 0xFF;
-        final int byte183 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte181 & 127) << 16) | (byte182 << 8) | byte183;
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = block0 >>> 41;
@@ -478,9 +255,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final long byte0 = blocks[blocksOffset++] & 0xFF;
         final long byte1 = blocks[blocksOffset++] & 0xFF;
         final long byte2 = blocks[blocksOffset++] & 0xFF;
@@ -512,223 +287,6 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
         final long byte21 = blocks[blocksOffset++] & 0xFF;
         final long byte22 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte20 & 127) << 16) | (byte21 << 8) | byte22;
-        final long byte23 = blocks[blocksOffset++] & 0xFF;
-        final long byte24 = blocks[blocksOffset++] & 0xFF;
-        final long byte25 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte23 << 15) | (byte24 << 7) | (byte25 >>> 1);
-        final long byte26 = blocks[blocksOffset++] & 0xFF;
-        final long byte27 = blocks[blocksOffset++] & 0xFF;
-        final long byte28 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte25 & 1) << 22) | (byte26 << 14) | (byte27 << 6) | (byte28 >>> 2);
-        final long byte29 = blocks[blocksOffset++] & 0xFF;
-        final long byte30 = blocks[blocksOffset++] & 0xFF;
-        final long byte31 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte28 & 3) << 21) | (byte29 << 13) | (byte30 << 5) | (byte31 >>> 3);
-        final long byte32 = blocks[blocksOffset++] & 0xFF;
-        final long byte33 = blocks[blocksOffset++] & 0xFF;
-        final long byte34 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte31 & 7) << 20) | (byte32 << 12) | (byte33 << 4) | (byte34 >>> 4);
-        final long byte35 = blocks[blocksOffset++] & 0xFF;
-        final long byte36 = blocks[blocksOffset++] & 0xFF;
-        final long byte37 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte34 & 15) << 19) | (byte35 << 11) | (byte36 << 3) | (byte37 >>> 5);
-        final long byte38 = blocks[blocksOffset++] & 0xFF;
-        final long byte39 = blocks[blocksOffset++] & 0xFF;
-        final long byte40 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte37 & 31) << 18) | (byte38 << 10) | (byte39 << 2) | (byte40 >>> 6);
-        final long byte41 = blocks[blocksOffset++] & 0xFF;
-        final long byte42 = blocks[blocksOffset++] & 0xFF;
-        final long byte43 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte40 & 63) << 17) | (byte41 << 9) | (byte42 << 1) | (byte43 >>> 7);
-        final long byte44 = blocks[blocksOffset++] & 0xFF;
-        final long byte45 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte43 & 127) << 16) | (byte44 << 8) | byte45;
-        final long byte46 = blocks[blocksOffset++] & 0xFF;
-        final long byte47 = blocks[blocksOffset++] & 0xFF;
-        final long byte48 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte46 << 15) | (byte47 << 7) | (byte48 >>> 1);
-        final long byte49 = blocks[blocksOffset++] & 0xFF;
-        final long byte50 = blocks[blocksOffset++] & 0xFF;
-        final long byte51 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte48 & 1) << 22) | (byte49 << 14) | (byte50 << 6) | (byte51 >>> 2);
-        final long byte52 = blocks[blocksOffset++] & 0xFF;
-        final long byte53 = blocks[blocksOffset++] & 0xFF;
-        final long byte54 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte51 & 3) << 21) | (byte52 << 13) | (byte53 << 5) | (byte54 >>> 3);
-        final long byte55 = blocks[blocksOffset++] & 0xFF;
-        final long byte56 = blocks[blocksOffset++] & 0xFF;
-        final long byte57 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte54 & 7) << 20) | (byte55 << 12) | (byte56 << 4) | (byte57 >>> 4);
-        final long byte58 = blocks[blocksOffset++] & 0xFF;
-        final long byte59 = blocks[blocksOffset++] & 0xFF;
-        final long byte60 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte57 & 15) << 19) | (byte58 << 11) | (byte59 << 3) | (byte60 >>> 5);
-        final long byte61 = blocks[blocksOffset++] & 0xFF;
-        final long byte62 = blocks[blocksOffset++] & 0xFF;
-        final long byte63 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte60 & 31) << 18) | (byte61 << 10) | (byte62 << 2) | (byte63 >>> 6);
-        final long byte64 = blocks[blocksOffset++] & 0xFF;
-        final long byte65 = blocks[blocksOffset++] & 0xFF;
-        final long byte66 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte63 & 63) << 17) | (byte64 << 9) | (byte65 << 1) | (byte66 >>> 7);
-        final long byte67 = blocks[blocksOffset++] & 0xFF;
-        final long byte68 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte66 & 127) << 16) | (byte67 << 8) | byte68;
-        final long byte69 = blocks[blocksOffset++] & 0xFF;
-        final long byte70 = blocks[blocksOffset++] & 0xFF;
-        final long byte71 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte69 << 15) | (byte70 << 7) | (byte71 >>> 1);
-        final long byte72 = blocks[blocksOffset++] & 0xFF;
-        final long byte73 = blocks[blocksOffset++] & 0xFF;
-        final long byte74 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte71 & 1) << 22) | (byte72 << 14) | (byte73 << 6) | (byte74 >>> 2);
-        final long byte75 = blocks[blocksOffset++] & 0xFF;
-        final long byte76 = blocks[blocksOffset++] & 0xFF;
-        final long byte77 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte74 & 3) << 21) | (byte75 << 13) | (byte76 << 5) | (byte77 >>> 3);
-        final long byte78 = blocks[blocksOffset++] & 0xFF;
-        final long byte79 = blocks[blocksOffset++] & 0xFF;
-        final long byte80 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte77 & 7) << 20) | (byte78 << 12) | (byte79 << 4) | (byte80 >>> 4);
-        final long byte81 = blocks[blocksOffset++] & 0xFF;
-        final long byte82 = blocks[blocksOffset++] & 0xFF;
-        final long byte83 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte80 & 15) << 19) | (byte81 << 11) | (byte82 << 3) | (byte83 >>> 5);
-        final long byte84 = blocks[blocksOffset++] & 0xFF;
-        final long byte85 = blocks[blocksOffset++] & 0xFF;
-        final long byte86 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte83 & 31) << 18) | (byte84 << 10) | (byte85 << 2) | (byte86 >>> 6);
-        final long byte87 = blocks[blocksOffset++] & 0xFF;
-        final long byte88 = blocks[blocksOffset++] & 0xFF;
-        final long byte89 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte86 & 63) << 17) | (byte87 << 9) | (byte88 << 1) | (byte89 >>> 7);
-        final long byte90 = blocks[blocksOffset++] & 0xFF;
-        final long byte91 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte89 & 127) << 16) | (byte90 << 8) | byte91;
-        final long byte92 = blocks[blocksOffset++] & 0xFF;
-        final long byte93 = blocks[blocksOffset++] & 0xFF;
-        final long byte94 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte92 << 15) | (byte93 << 7) | (byte94 >>> 1);
-        final long byte95 = blocks[blocksOffset++] & 0xFF;
-        final long byte96 = blocks[blocksOffset++] & 0xFF;
-        final long byte97 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte94 & 1) << 22) | (byte95 << 14) | (byte96 << 6) | (byte97 >>> 2);
-        final long byte98 = blocks[blocksOffset++] & 0xFF;
-        final long byte99 = blocks[blocksOffset++] & 0xFF;
-        final long byte100 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte97 & 3) << 21) | (byte98 << 13) | (byte99 << 5) | (byte100 >>> 3);
-        final long byte101 = blocks[blocksOffset++] & 0xFF;
-        final long byte102 = blocks[blocksOffset++] & 0xFF;
-        final long byte103 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte100 & 7) << 20) | (byte101 << 12) | (byte102 << 4) | (byte103 >>> 4);
-        final long byte104 = blocks[blocksOffset++] & 0xFF;
-        final long byte105 = blocks[blocksOffset++] & 0xFF;
-        final long byte106 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte103 & 15) << 19) | (byte104 << 11) | (byte105 << 3) | (byte106 >>> 5);
-        final long byte107 = blocks[blocksOffset++] & 0xFF;
-        final long byte108 = blocks[blocksOffset++] & 0xFF;
-        final long byte109 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte106 & 31) << 18) | (byte107 << 10) | (byte108 << 2) | (byte109 >>> 6);
-        final long byte110 = blocks[blocksOffset++] & 0xFF;
-        final long byte111 = blocks[blocksOffset++] & 0xFF;
-        final long byte112 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte109 & 63) << 17) | (byte110 << 9) | (byte111 << 1) | (byte112 >>> 7);
-        final long byte113 = blocks[blocksOffset++] & 0xFF;
-        final long byte114 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte112 & 127) << 16) | (byte113 << 8) | byte114;
-        final long byte115 = blocks[blocksOffset++] & 0xFF;
-        final long byte116 = blocks[blocksOffset++] & 0xFF;
-        final long byte117 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte115 << 15) | (byte116 << 7) | (byte117 >>> 1);
-        final long byte118 = blocks[blocksOffset++] & 0xFF;
-        final long byte119 = blocks[blocksOffset++] & 0xFF;
-        final long byte120 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte117 & 1) << 22) | (byte118 << 14) | (byte119 << 6) | (byte120 >>> 2);
-        final long byte121 = blocks[blocksOffset++] & 0xFF;
-        final long byte122 = blocks[blocksOffset++] & 0xFF;
-        final long byte123 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte120 & 3) << 21) | (byte121 << 13) | (byte122 << 5) | (byte123 >>> 3);
-        final long byte124 = blocks[blocksOffset++] & 0xFF;
-        final long byte125 = blocks[blocksOffset++] & 0xFF;
-        final long byte126 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte123 & 7) << 20) | (byte124 << 12) | (byte125 << 4) | (byte126 >>> 4);
-        final long byte127 = blocks[blocksOffset++] & 0xFF;
-        final long byte128 = blocks[blocksOffset++] & 0xFF;
-        final long byte129 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte126 & 15) << 19) | (byte127 << 11) | (byte128 << 3) | (byte129 >>> 5);
-        final long byte130 = blocks[blocksOffset++] & 0xFF;
-        final long byte131 = blocks[blocksOffset++] & 0xFF;
-        final long byte132 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte129 & 31) << 18) | (byte130 << 10) | (byte131 << 2) | (byte132 >>> 6);
-        final long byte133 = blocks[blocksOffset++] & 0xFF;
-        final long byte134 = blocks[blocksOffset++] & 0xFF;
-        final long byte135 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte132 & 63) << 17) | (byte133 << 9) | (byte134 << 1) | (byte135 >>> 7);
-        final long byte136 = blocks[blocksOffset++] & 0xFF;
-        final long byte137 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte135 & 127) << 16) | (byte136 << 8) | byte137;
-        final long byte138 = blocks[blocksOffset++] & 0xFF;
-        final long byte139 = blocks[blocksOffset++] & 0xFF;
-        final long byte140 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte138 << 15) | (byte139 << 7) | (byte140 >>> 1);
-        final long byte141 = blocks[blocksOffset++] & 0xFF;
-        final long byte142 = blocks[blocksOffset++] & 0xFF;
-        final long byte143 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte140 & 1) << 22) | (byte141 << 14) | (byte142 << 6) | (byte143 >>> 2);
-        final long byte144 = blocks[blocksOffset++] & 0xFF;
-        final long byte145 = blocks[blocksOffset++] & 0xFF;
-        final long byte146 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte143 & 3) << 21) | (byte144 << 13) | (byte145 << 5) | (byte146 >>> 3);
-        final long byte147 = blocks[blocksOffset++] & 0xFF;
-        final long byte148 = blocks[blocksOffset++] & 0xFF;
-        final long byte149 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte146 & 7) << 20) | (byte147 << 12) | (byte148 << 4) | (byte149 >>> 4);
-        final long byte150 = blocks[blocksOffset++] & 0xFF;
-        final long byte151 = blocks[blocksOffset++] & 0xFF;
-        final long byte152 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte149 & 15) << 19) | (byte150 << 11) | (byte151 << 3) | (byte152 >>> 5);
-        final long byte153 = blocks[blocksOffset++] & 0xFF;
-        final long byte154 = blocks[blocksOffset++] & 0xFF;
-        final long byte155 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte152 & 31) << 18) | (byte153 << 10) | (byte154 << 2) | (byte155 >>> 6);
-        final long byte156 = blocks[blocksOffset++] & 0xFF;
-        final long byte157 = blocks[blocksOffset++] & 0xFF;
-        final long byte158 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte155 & 63) << 17) | (byte156 << 9) | (byte157 << 1) | (byte158 >>> 7);
-        final long byte159 = blocks[blocksOffset++] & 0xFF;
-        final long byte160 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte158 & 127) << 16) | (byte159 << 8) | byte160;
-        final long byte161 = blocks[blocksOffset++] & 0xFF;
-        final long byte162 = blocks[blocksOffset++] & 0xFF;
-        final long byte163 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte161 << 15) | (byte162 << 7) | (byte163 >>> 1);
-        final long byte164 = blocks[blocksOffset++] & 0xFF;
-        final long byte165 = blocks[blocksOffset++] & 0xFF;
-        final long byte166 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte163 & 1) << 22) | (byte164 << 14) | (byte165 << 6) | (byte166 >>> 2);
-        final long byte167 = blocks[blocksOffset++] & 0xFF;
-        final long byte168 = blocks[blocksOffset++] & 0xFF;
-        final long byte169 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte166 & 3) << 21) | (byte167 << 13) | (byte168 << 5) | (byte169 >>> 3);
-        final long byte170 = blocks[blocksOffset++] & 0xFF;
-        final long byte171 = blocks[blocksOffset++] & 0xFF;
-        final long byte172 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte169 & 7) << 20) | (byte170 << 12) | (byte171 << 4) | (byte172 >>> 4);
-        final long byte173 = blocks[blocksOffset++] & 0xFF;
-        final long byte174 = blocks[blocksOffset++] & 0xFF;
-        final long byte175 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte172 & 15) << 19) | (byte173 << 11) | (byte174 << 3) | (byte175 >>> 5);
-        final long byte176 = blocks[blocksOffset++] & 0xFF;
-        final long byte177 = blocks[blocksOffset++] & 0xFF;
-        final long byte178 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte175 & 31) << 18) | (byte176 << 10) | (byte177 << 2) | (byte178 >>> 6);
-        final long byte179 = blocks[blocksOffset++] & 0xFF;
-        final long byte180 = blocks[blocksOffset++] & 0xFF;
-        final long byte181 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte178 & 63) << 17) | (byte179 << 9) | (byte180 << 1) | (byte181 >>> 7);
-        final long byte182 = blocks[blocksOffset++] & 0xFF;
-        final long byte183 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte181 & 127) << 16) | (byte182 << 8) | byte183;
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked24.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked24.java
index cdca0887..d05ad98c 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked24.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked24.java
@@ -32,8 +32,6 @@ public BulkOperationPacked24() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = (int) (block0 >>> 40);
@@ -51,48 +49,16 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final int byte0 = blocks[blocksOffset++] & 0xFF;
         final int byte1 = blocks[blocksOffset++] & 0xFF;
         final int byte2 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = (byte0 << 16) | (byte1 << 8) | byte2;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte3 << 16) | (byte4 << 8) | byte5;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte8 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte6 << 16) | (byte7 << 8) | byte8;
-        final int byte9 = blocks[blocksOffset++] & 0xFF;
-        final int byte10 = blocks[blocksOffset++] & 0xFF;
-        final int byte11 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte9 << 16) | (byte10 << 8) | byte11;
-        final int byte12 = blocks[blocksOffset++] & 0xFF;
-        final int byte13 = blocks[blocksOffset++] & 0xFF;
-        final int byte14 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte12 << 16) | (byte13 << 8) | byte14;
-        final int byte15 = blocks[blocksOffset++] & 0xFF;
-        final int byte16 = blocks[blocksOffset++] & 0xFF;
-        final int byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte15 << 16) | (byte16 << 8) | byte17;
-        final int byte18 = blocks[blocksOffset++] & 0xFF;
-        final int byte19 = blocks[blocksOffset++] & 0xFF;
-        final int byte20 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte18 << 16) | (byte19 << 8) | byte20;
-        final int byte21 = blocks[blocksOffset++] & 0xFF;
-        final int byte22 = blocks[blocksOffset++] & 0xFF;
-        final int byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte21 << 16) | (byte22 << 8) | byte23;
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = block0 >>> 40;
@@ -110,41 +76,11 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final long byte0 = blocks[blocksOffset++] & 0xFF;
         final long byte1 = blocks[blocksOffset++] & 0xFF;
         final long byte2 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = (byte0 << 16) | (byte1 << 8) | byte2;
-        final long byte3 = blocks[blocksOffset++] & 0xFF;
-        final long byte4 = blocks[blocksOffset++] & 0xFF;
-        final long byte5 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte3 << 16) | (byte4 << 8) | byte5;
-        final long byte6 = blocks[blocksOffset++] & 0xFF;
-        final long byte7 = blocks[blocksOffset++] & 0xFF;
-        final long byte8 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte6 << 16) | (byte7 << 8) | byte8;
-        final long byte9 = blocks[blocksOffset++] & 0xFF;
-        final long byte10 = blocks[blocksOffset++] & 0xFF;
-        final long byte11 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte9 << 16) | (byte10 << 8) | byte11;
-        final long byte12 = blocks[blocksOffset++] & 0xFF;
-        final long byte13 = blocks[blocksOffset++] & 0xFF;
-        final long byte14 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte12 << 16) | (byte13 << 8) | byte14;
-        final long byte15 = blocks[blocksOffset++] & 0xFF;
-        final long byte16 = blocks[blocksOffset++] & 0xFF;
-        final long byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte15 << 16) | (byte16 << 8) | byte17;
-        final long byte18 = blocks[blocksOffset++] & 0xFF;
-        final long byte19 = blocks[blocksOffset++] & 0xFF;
-        final long byte20 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte18 << 16) | (byte19 << 8) | byte20;
-        final long byte21 = blocks[blocksOffset++] & 0xFF;
-        final long byte22 = blocks[blocksOffset++] & 0xFF;
-        final long byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte21 << 16) | (byte22 << 8) | byte23;
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked3.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked3.java
index d303dacc..baf28bbb 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked3.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked3.java
@@ -32,8 +32,6 @@ public BulkOperationPacked3() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = (int) (block0 >>> 61);
@@ -107,9 +105,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final int byte0 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = byte0 >>> 5;
         values[valuesOffset++] = (byte0 >>> 2) & 7;
@@ -121,90 +117,11 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
         values[valuesOffset++] = ((byte1 & 1) << 2) | (byte2 >>> 6);
         values[valuesOffset++] = (byte2 >>> 3) & 7;
         values[valuesOffset++] = byte2 & 7;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte3 >>> 5;
-        values[valuesOffset++] = (byte3 >>> 2) & 7;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte3 & 3) << 1) | (byte4 >>> 7);
-        values[valuesOffset++] = (byte4 >>> 4) & 7;
-        values[valuesOffset++] = (byte4 >>> 1) & 7;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte4 & 1) << 2) | (byte5 >>> 6);
-        values[valuesOffset++] = (byte5 >>> 3) & 7;
-        values[valuesOffset++] = byte5 & 7;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte6 >>> 5;
-        values[valuesOffset++] = (byte6 >>> 2) & 7;
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte6 & 3) << 1) | (byte7 >>> 7);
-        values[valuesOffset++] = (byte7 >>> 4) & 7;
-        values[valuesOffset++] = (byte7 >>> 1) & 7;
-        final int byte8 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte7 & 1) << 2) | (byte8 >>> 6);
-        values[valuesOffset++] = (byte8 >>> 3) & 7;
-        values[valuesOffset++] = byte8 & 7;
-        final int byte9 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte9 >>> 5;
-        values[valuesOffset++] = (byte9 >>> 2) & 7;
-        final int byte10 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte9 & 3) << 1) | (byte10 >>> 7);
-        values[valuesOffset++] = (byte10 >>> 4) & 7;
-        values[valuesOffset++] = (byte10 >>> 1) & 7;
-        final int byte11 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte10 & 1) << 2) | (byte11 >>> 6);
-        values[valuesOffset++] = (byte11 >>> 3) & 7;
-        values[valuesOffset++] = byte11 & 7;
-        final int byte12 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte12 >>> 5;
-        values[valuesOffset++] = (byte12 >>> 2) & 7;
-        final int byte13 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte12 & 3) << 1) | (byte13 >>> 7);
-        values[valuesOffset++] = (byte13 >>> 4) & 7;
-        values[valuesOffset++] = (byte13 >>> 1) & 7;
-        final int byte14 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte13 & 1) << 2) | (byte14 >>> 6);
-        values[valuesOffset++] = (byte14 >>> 3) & 7;
-        values[valuesOffset++] = byte14 & 7;
-        final int byte15 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte15 >>> 5;
-        values[valuesOffset++] = (byte15 >>> 2) & 7;
-        final int byte16 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte15 & 3) << 1) | (byte16 >>> 7);
-        values[valuesOffset++] = (byte16 >>> 4) & 7;
-        values[valuesOffset++] = (byte16 >>> 1) & 7;
-        final int byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte16 & 1) << 2) | (byte17 >>> 6);
-        values[valuesOffset++] = (byte17 >>> 3) & 7;
-        values[valuesOffset++] = byte17 & 7;
-        final int byte18 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte18 >>> 5;
-        values[valuesOffset++] = (byte18 >>> 2) & 7;
-        final int byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte18 & 3) << 1) | (byte19 >>> 7);
-        values[valuesOffset++] = (byte19 >>> 4) & 7;
-        values[valuesOffset++] = (byte19 >>> 1) & 7;
-        final int byte20 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte19 & 1) << 2) | (byte20 >>> 6);
-        values[valuesOffset++] = (byte20 >>> 3) & 7;
-        values[valuesOffset++] = byte20 & 7;
-        final int byte21 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte21 >>> 5;
-        values[valuesOffset++] = (byte21 >>> 2) & 7;
-        final int byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte21 & 3) << 1) | (byte22 >>> 7);
-        values[valuesOffset++] = (byte22 >>> 4) & 7;
-        values[valuesOffset++] = (byte22 >>> 1) & 7;
-        final int byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 1) << 2) | (byte23 >>> 6);
-        values[valuesOffset++] = (byte23 >>> 3) & 7;
-        values[valuesOffset++] = byte23 & 7;
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = block0 >>> 61;
@@ -278,9 +195,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final long byte0 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = byte0 >>> 5;
         values[valuesOffset++] = (byte0 >>> 2) & 7;
@@ -292,83 +207,6 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
         values[valuesOffset++] = ((byte1 & 1) << 2) | (byte2 >>> 6);
         values[valuesOffset++] = (byte2 >>> 3) & 7;
         values[valuesOffset++] = byte2 & 7;
-        final long byte3 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte3 >>> 5;
-        values[valuesOffset++] = (byte3 >>> 2) & 7;
-        final long byte4 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte3 & 3) << 1) | (byte4 >>> 7);
-        values[valuesOffset++] = (byte4 >>> 4) & 7;
-        values[valuesOffset++] = (byte4 >>> 1) & 7;
-        final long byte5 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte4 & 1) << 2) | (byte5 >>> 6);
-        values[valuesOffset++] = (byte5 >>> 3) & 7;
-        values[valuesOffset++] = byte5 & 7;
-        final long byte6 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte6 >>> 5;
-        values[valuesOffset++] = (byte6 >>> 2) & 7;
-        final long byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte6 & 3) << 1) | (byte7 >>> 7);
-        values[valuesOffset++] = (byte7 >>> 4) & 7;
-        values[valuesOffset++] = (byte7 >>> 1) & 7;
-        final long byte8 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte7 & 1) << 2) | (byte8 >>> 6);
-        values[valuesOffset++] = (byte8 >>> 3) & 7;
-        values[valuesOffset++] = byte8 & 7;
-        final long byte9 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte9 >>> 5;
-        values[valuesOffset++] = (byte9 >>> 2) & 7;
-        final long byte10 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte9 & 3) << 1) | (byte10 >>> 7);
-        values[valuesOffset++] = (byte10 >>> 4) & 7;
-        values[valuesOffset++] = (byte10 >>> 1) & 7;
-        final long byte11 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte10 & 1) << 2) | (byte11 >>> 6);
-        values[valuesOffset++] = (byte11 >>> 3) & 7;
-        values[valuesOffset++] = byte11 & 7;
-        final long byte12 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte12 >>> 5;
-        values[valuesOffset++] = (byte12 >>> 2) & 7;
-        final long byte13 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte12 & 3) << 1) | (byte13 >>> 7);
-        values[valuesOffset++] = (byte13 >>> 4) & 7;
-        values[valuesOffset++] = (byte13 >>> 1) & 7;
-        final long byte14 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte13 & 1) << 2) | (byte14 >>> 6);
-        values[valuesOffset++] = (byte14 >>> 3) & 7;
-        values[valuesOffset++] = byte14 & 7;
-        final long byte15 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte15 >>> 5;
-        values[valuesOffset++] = (byte15 >>> 2) & 7;
-        final long byte16 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte15 & 3) << 1) | (byte16 >>> 7);
-        values[valuesOffset++] = (byte16 >>> 4) & 7;
-        values[valuesOffset++] = (byte16 >>> 1) & 7;
-        final long byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte16 & 1) << 2) | (byte17 >>> 6);
-        values[valuesOffset++] = (byte17 >>> 3) & 7;
-        values[valuesOffset++] = byte17 & 7;
-        final long byte18 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte18 >>> 5;
-        values[valuesOffset++] = (byte18 >>> 2) & 7;
-        final long byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte18 & 3) << 1) | (byte19 >>> 7);
-        values[valuesOffset++] = (byte19 >>> 4) & 7;
-        values[valuesOffset++] = (byte19 >>> 1) & 7;
-        final long byte20 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte19 & 1) << 2) | (byte20 >>> 6);
-        values[valuesOffset++] = (byte20 >>> 3) & 7;
-        values[valuesOffset++] = byte20 & 7;
-        final long byte21 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte21 >>> 5;
-        values[valuesOffset++] = (byte21 >>> 2) & 7;
-        final long byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte21 & 3) << 1) | (byte22 >>> 7);
-        values[valuesOffset++] = (byte22 >>> 4) & 7;
-        values[valuesOffset++] = (byte22 >>> 1) & 7;
-        final long byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 1) << 2) | (byte23 >>> 6);
-        values[valuesOffset++] = (byte23 >>> 3) & 7;
-        values[valuesOffset++] = byte23 & 7;
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked4.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked4.java
index 961876c6..2c199e43 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked4.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked4.java
@@ -32,115 +32,39 @@ public BulkOperationPacked4() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
-        final long block0 = blocks[blocksOffset++];
-        values[valuesOffset++] = (int) (block0 >>> 60);
-        values[valuesOffset++] = (int) ((block0 >>> 56) & 15L);
-        values[valuesOffset++] = (int) ((block0 >>> 52) & 15L);
-        values[valuesOffset++] = (int) ((block0 >>> 48) & 15L);
-        values[valuesOffset++] = (int) ((block0 >>> 44) & 15L);
-        values[valuesOffset++] = (int) ((block0 >>> 40) & 15L);
-        values[valuesOffset++] = (int) ((block0 >>> 36) & 15L);
-        values[valuesOffset++] = (int) ((block0 >>> 32) & 15L);
-        values[valuesOffset++] = (int) ((block0 >>> 28) & 15L);
-        values[valuesOffset++] = (int) ((block0 >>> 24) & 15L);
-        values[valuesOffset++] = (int) ((block0 >>> 20) & 15L);
-        values[valuesOffset++] = (int) ((block0 >>> 16) & 15L);
-        values[valuesOffset++] = (int) ((block0 >>> 12) & 15L);
-        values[valuesOffset++] = (int) ((block0 >>> 8) & 15L);
-        values[valuesOffset++] = (int) ((block0 >>> 4) & 15L);
-        values[valuesOffset++] = (int) (block0 & 15L);
+      final long block = blocks[blocksOffset++];
+      for (int shift = 60; shift >= 0; shift -= 4) {
+        values[valuesOffset++] = (int) ((block >>> shift) & 15);
+      }
       }
     }
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 >>> 4;
-        values[valuesOffset++] = byte0 & 15;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte1 >>> 4;
-        values[valuesOffset++] = byte1 & 15;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte2 >>> 4;
-        values[valuesOffset++] = byte2 & 15;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte3 >>> 4;
-        values[valuesOffset++] = byte3 & 15;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte4 >>> 4;
-        values[valuesOffset++] = byte4 & 15;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte5 >>> 4;
-        values[valuesOffset++] = byte5 & 15;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte6 >>> 4;
-        values[valuesOffset++] = byte6 & 15;
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte7 >>> 4;
-        values[valuesOffset++] = byte7 & 15;
+    for (int j = 0; j < 8 * iterations; ++j) {
+      final byte block = blocks[blocksOffset++];
+      values[valuesOffset++] = (block >>> 4) & 15;
+      values[valuesOffset++] = block & 15;
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
-        final long block0 = blocks[blocksOffset++];
-        values[valuesOffset++] = block0 >>> 60;
-        values[valuesOffset++] = (block0 >>> 56) & 15L;
-        values[valuesOffset++] = (block0 >>> 52) & 15L;
-        values[valuesOffset++] = (block0 >>> 48) & 15L;
-        values[valuesOffset++] = (block0 >>> 44) & 15L;
-        values[valuesOffset++] = (block0 >>> 40) & 15L;
-        values[valuesOffset++] = (block0 >>> 36) & 15L;
-        values[valuesOffset++] = (block0 >>> 32) & 15L;
-        values[valuesOffset++] = (block0 >>> 28) & 15L;
-        values[valuesOffset++] = (block0 >>> 24) & 15L;
-        values[valuesOffset++] = (block0 >>> 20) & 15L;
-        values[valuesOffset++] = (block0 >>> 16) & 15L;
-        values[valuesOffset++] = (block0 >>> 12) & 15L;
-        values[valuesOffset++] = (block0 >>> 8) & 15L;
-        values[valuesOffset++] = (block0 >>> 4) & 15L;
-        values[valuesOffset++] = block0 & 15L;
+      final long block = blocks[blocksOffset++];
+      for (int shift = 60; shift >= 0; shift -= 4) {
+        values[valuesOffset++] = (block >>> shift) & 15;
+      }
       }
     }
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 >>> 4;
-        values[valuesOffset++] = byte0 & 15;
-        final long byte1 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte1 >>> 4;
-        values[valuesOffset++] = byte1 & 15;
-        final long byte2 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte2 >>> 4;
-        values[valuesOffset++] = byte2 & 15;
-        final long byte3 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte3 >>> 4;
-        values[valuesOffset++] = byte3 & 15;
-        final long byte4 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte4 >>> 4;
-        values[valuesOffset++] = byte4 & 15;
-        final long byte5 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte5 >>> 4;
-        values[valuesOffset++] = byte5 & 15;
-        final long byte6 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte6 >>> 4;
-        values[valuesOffset++] = byte6 & 15;
-        final long byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte7 >>> 4;
-        values[valuesOffset++] = byte7 & 15;
+    for (int j = 0; j < 8 * iterations; ++j) {
+      final byte block = blocks[blocksOffset++];
+      values[valuesOffset++] = (block >>> 4) & 15;
+      values[valuesOffset++] = block & 15;
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked5.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked5.java
index 292bb9c7..64f25808 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked5.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked5.java
@@ -32,8 +32,6 @@ public BulkOperationPacked5() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = (int) (block0 >>> 59);
@@ -109,9 +107,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final int byte0 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = byte0 >>> 3;
         final int byte1 = blocks[blocksOffset++] & 0xFF;
@@ -125,104 +121,11 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
         final int byte4 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte3 & 3) << 3) | (byte4 >>> 5);
         values[valuesOffset++] = byte4 & 31;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte5 >>> 3;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte5 & 7) << 2) | (byte6 >>> 6);
-        values[valuesOffset++] = (byte6 >>> 1) & 31;
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte6 & 1) << 4) | (byte7 >>> 4);
-        final int byte8 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte7 & 15) << 1) | (byte8 >>> 7);
-        values[valuesOffset++] = (byte8 >>> 2) & 31;
-        final int byte9 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte8 & 3) << 3) | (byte9 >>> 5);
-        values[valuesOffset++] = byte9 & 31;
-        final int byte10 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte10 >>> 3;
-        final int byte11 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte10 & 7) << 2) | (byte11 >>> 6);
-        values[valuesOffset++] = (byte11 >>> 1) & 31;
-        final int byte12 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte11 & 1) << 4) | (byte12 >>> 4);
-        final int byte13 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte12 & 15) << 1) | (byte13 >>> 7);
-        values[valuesOffset++] = (byte13 >>> 2) & 31;
-        final int byte14 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte13 & 3) << 3) | (byte14 >>> 5);
-        values[valuesOffset++] = byte14 & 31;
-        final int byte15 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte15 >>> 3;
-        final int byte16 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte15 & 7) << 2) | (byte16 >>> 6);
-        values[valuesOffset++] = (byte16 >>> 1) & 31;
-        final int byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte16 & 1) << 4) | (byte17 >>> 4);
-        final int byte18 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte17 & 15) << 1) | (byte18 >>> 7);
-        values[valuesOffset++] = (byte18 >>> 2) & 31;
-        final int byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte18 & 3) << 3) | (byte19 >>> 5);
-        values[valuesOffset++] = byte19 & 31;
-        final int byte20 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte20 >>> 3;
-        final int byte21 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte20 & 7) << 2) | (byte21 >>> 6);
-        values[valuesOffset++] = (byte21 >>> 1) & 31;
-        final int byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte21 & 1) << 4) | (byte22 >>> 4);
-        final int byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 15) << 1) | (byte23 >>> 7);
-        values[valuesOffset++] = (byte23 >>> 2) & 31;
-        final int byte24 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte23 & 3) << 3) | (byte24 >>> 5);
-        values[valuesOffset++] = byte24 & 31;
-        final int byte25 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte25 >>> 3;
-        final int byte26 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte25 & 7) << 2) | (byte26 >>> 6);
-        values[valuesOffset++] = (byte26 >>> 1) & 31;
-        final int byte27 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte26 & 1) << 4) | (byte27 >>> 4);
-        final int byte28 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte27 & 15) << 1) | (byte28 >>> 7);
-        values[valuesOffset++] = (byte28 >>> 2) & 31;
-        final int byte29 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte28 & 3) << 3) | (byte29 >>> 5);
-        values[valuesOffset++] = byte29 & 31;
-        final int byte30 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte30 >>> 3;
-        final int byte31 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte30 & 7) << 2) | (byte31 >>> 6);
-        values[valuesOffset++] = (byte31 >>> 1) & 31;
-        final int byte32 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte31 & 1) << 4) | (byte32 >>> 4);
-        final int byte33 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte32 & 15) << 1) | (byte33 >>> 7);
-        values[valuesOffset++] = (byte33 >>> 2) & 31;
-        final int byte34 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte33 & 3) << 3) | (byte34 >>> 5);
-        values[valuesOffset++] = byte34 & 31;
-        final int byte35 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte35 >>> 3;
-        final int byte36 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte35 & 7) << 2) | (byte36 >>> 6);
-        values[valuesOffset++] = (byte36 >>> 1) & 31;
-        final int byte37 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte36 & 1) << 4) | (byte37 >>> 4);
-        final int byte38 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte37 & 15) << 1) | (byte38 >>> 7);
-        values[valuesOffset++] = (byte38 >>> 2) & 31;
-        final int byte39 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte38 & 3) << 3) | (byte39 >>> 5);
-        values[valuesOffset++] = byte39 & 31;
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = block0 >>> 59;
@@ -298,9 +201,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final long byte0 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = byte0 >>> 3;
         final long byte1 = blocks[blocksOffset++] & 0xFF;
@@ -314,97 +215,6 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
         final long byte4 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte3 & 3) << 3) | (byte4 >>> 5);
         values[valuesOffset++] = byte4 & 31;
-        final long byte5 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte5 >>> 3;
-        final long byte6 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte5 & 7) << 2) | (byte6 >>> 6);
-        values[valuesOffset++] = (byte6 >>> 1) & 31;
-        final long byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte6 & 1) << 4) | (byte7 >>> 4);
-        final long byte8 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte7 & 15) << 1) | (byte8 >>> 7);
-        values[valuesOffset++] = (byte8 >>> 2) & 31;
-        final long byte9 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte8 & 3) << 3) | (byte9 >>> 5);
-        values[valuesOffset++] = byte9 & 31;
-        final long byte10 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte10 >>> 3;
-        final long byte11 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte10 & 7) << 2) | (byte11 >>> 6);
-        values[valuesOffset++] = (byte11 >>> 1) & 31;
-        final long byte12 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte11 & 1) << 4) | (byte12 >>> 4);
-        final long byte13 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte12 & 15) << 1) | (byte13 >>> 7);
-        values[valuesOffset++] = (byte13 >>> 2) & 31;
-        final long byte14 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte13 & 3) << 3) | (byte14 >>> 5);
-        values[valuesOffset++] = byte14 & 31;
-        final long byte15 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte15 >>> 3;
-        final long byte16 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte15 & 7) << 2) | (byte16 >>> 6);
-        values[valuesOffset++] = (byte16 >>> 1) & 31;
-        final long byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte16 & 1) << 4) | (byte17 >>> 4);
-        final long byte18 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte17 & 15) << 1) | (byte18 >>> 7);
-        values[valuesOffset++] = (byte18 >>> 2) & 31;
-        final long byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte18 & 3) << 3) | (byte19 >>> 5);
-        values[valuesOffset++] = byte19 & 31;
-        final long byte20 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte20 >>> 3;
-        final long byte21 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte20 & 7) << 2) | (byte21 >>> 6);
-        values[valuesOffset++] = (byte21 >>> 1) & 31;
-        final long byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte21 & 1) << 4) | (byte22 >>> 4);
-        final long byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 15) << 1) | (byte23 >>> 7);
-        values[valuesOffset++] = (byte23 >>> 2) & 31;
-        final long byte24 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte23 & 3) << 3) | (byte24 >>> 5);
-        values[valuesOffset++] = byte24 & 31;
-        final long byte25 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte25 >>> 3;
-        final long byte26 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte25 & 7) << 2) | (byte26 >>> 6);
-        values[valuesOffset++] = (byte26 >>> 1) & 31;
-        final long byte27 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte26 & 1) << 4) | (byte27 >>> 4);
-        final long byte28 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte27 & 15) << 1) | (byte28 >>> 7);
-        values[valuesOffset++] = (byte28 >>> 2) & 31;
-        final long byte29 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte28 & 3) << 3) | (byte29 >>> 5);
-        values[valuesOffset++] = byte29 & 31;
-        final long byte30 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte30 >>> 3;
-        final long byte31 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte30 & 7) << 2) | (byte31 >>> 6);
-        values[valuesOffset++] = (byte31 >>> 1) & 31;
-        final long byte32 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte31 & 1) << 4) | (byte32 >>> 4);
-        final long byte33 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte32 & 15) << 1) | (byte33 >>> 7);
-        values[valuesOffset++] = (byte33 >>> 2) & 31;
-        final long byte34 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte33 & 3) << 3) | (byte34 >>> 5);
-        values[valuesOffset++] = byte34 & 31;
-        final long byte35 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte35 >>> 3;
-        final long byte36 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte35 & 7) << 2) | (byte36 >>> 6);
-        values[valuesOffset++] = (byte36 >>> 1) & 31;
-        final long byte37 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte36 & 1) << 4) | (byte37 >>> 4);
-        final long byte38 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte37 & 15) << 1) | (byte38 >>> 7);
-        values[valuesOffset++] = (byte38 >>> 2) & 31;
-        final long byte39 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte38 & 3) << 3) | (byte39 >>> 5);
-        values[valuesOffset++] = byte39 & 31;
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked6.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked6.java
index c51708d2..dab55b00 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked6.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked6.java
@@ -32,8 +32,6 @@ public BulkOperationPacked6() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = (int) (block0 >>> 58);
@@ -75,9 +73,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final int byte0 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = byte0 >>> 2;
         final int byte1 = blocks[blocksOffset++] & 0xFF;
@@ -85,62 +81,11 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
         final int byte2 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte1 & 15) << 2) | (byte2 >>> 6);
         values[valuesOffset++] = byte2 & 63;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte3 >>> 2;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte3 & 3) << 4) | (byte4 >>> 4);
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte4 & 15) << 2) | (byte5 >>> 6);
-        values[valuesOffset++] = byte5 & 63;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte6 >>> 2;
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte6 & 3) << 4) | (byte7 >>> 4);
-        final int byte8 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte7 & 15) << 2) | (byte8 >>> 6);
-        values[valuesOffset++] = byte8 & 63;
-        final int byte9 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte9 >>> 2;
-        final int byte10 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte9 & 3) << 4) | (byte10 >>> 4);
-        final int byte11 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte10 & 15) << 2) | (byte11 >>> 6);
-        values[valuesOffset++] = byte11 & 63;
-        final int byte12 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte12 >>> 2;
-        final int byte13 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte12 & 3) << 4) | (byte13 >>> 4);
-        final int byte14 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte13 & 15) << 2) | (byte14 >>> 6);
-        values[valuesOffset++] = byte14 & 63;
-        final int byte15 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte15 >>> 2;
-        final int byte16 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte15 & 3) << 4) | (byte16 >>> 4);
-        final int byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte16 & 15) << 2) | (byte17 >>> 6);
-        values[valuesOffset++] = byte17 & 63;
-        final int byte18 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte18 >>> 2;
-        final int byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte18 & 3) << 4) | (byte19 >>> 4);
-        final int byte20 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte19 & 15) << 2) | (byte20 >>> 6);
-        values[valuesOffset++] = byte20 & 63;
-        final int byte21 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte21 >>> 2;
-        final int byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte21 & 3) << 4) | (byte22 >>> 4);
-        final int byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 15) << 2) | (byte23 >>> 6);
-        values[valuesOffset++] = byte23 & 63;
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = block0 >>> 58;
@@ -182,9 +127,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final long byte0 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = byte0 >>> 2;
         final long byte1 = blocks[blocksOffset++] & 0xFF;
@@ -192,55 +135,6 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
         final long byte2 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte1 & 15) << 2) | (byte2 >>> 6);
         values[valuesOffset++] = byte2 & 63;
-        final long byte3 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte3 >>> 2;
-        final long byte4 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte3 & 3) << 4) | (byte4 >>> 4);
-        final long byte5 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte4 & 15) << 2) | (byte5 >>> 6);
-        values[valuesOffset++] = byte5 & 63;
-        final long byte6 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte6 >>> 2;
-        final long byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte6 & 3) << 4) | (byte7 >>> 4);
-        final long byte8 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte7 & 15) << 2) | (byte8 >>> 6);
-        values[valuesOffset++] = byte8 & 63;
-        final long byte9 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte9 >>> 2;
-        final long byte10 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte9 & 3) << 4) | (byte10 >>> 4);
-        final long byte11 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte10 & 15) << 2) | (byte11 >>> 6);
-        values[valuesOffset++] = byte11 & 63;
-        final long byte12 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte12 >>> 2;
-        final long byte13 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte12 & 3) << 4) | (byte13 >>> 4);
-        final long byte14 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte13 & 15) << 2) | (byte14 >>> 6);
-        values[valuesOffset++] = byte14 & 63;
-        final long byte15 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte15 >>> 2;
-        final long byte16 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte15 & 3) << 4) | (byte16 >>> 4);
-        final long byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte16 & 15) << 2) | (byte17 >>> 6);
-        values[valuesOffset++] = byte17 & 63;
-        final long byte18 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte18 >>> 2;
-        final long byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte18 & 3) << 4) | (byte19 >>> 4);
-        final long byte20 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte19 & 15) << 2) | (byte20 >>> 6);
-        values[valuesOffset++] = byte20 & 63;
-        final long byte21 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte21 >>> 2;
-        final long byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte21 & 3) << 4) | (byte22 >>> 4);
-        final long byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 15) << 2) | (byte23 >>> 6);
-        values[valuesOffset++] = byte23 & 63;
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked7.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked7.java
index 95de7f8b..ffd7a4c3 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked7.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked7.java
@@ -32,8 +32,6 @@ public BulkOperationPacked7() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = (int) (block0 >>> 57);
@@ -111,9 +109,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final int byte0 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = byte0 >>> 1;
         final int byte1 = blocks[blocksOffset++] & 0xFF;
@@ -129,118 +125,11 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
         final int byte6 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte5 & 63) << 1) | (byte6 >>> 7);
         values[valuesOffset++] = byte6 & 127;
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte7 >>> 1;
-        final int byte8 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte7 & 1) << 6) | (byte8 >>> 2);
-        final int byte9 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte8 & 3) << 5) | (byte9 >>> 3);
-        final int byte10 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte9 & 7) << 4) | (byte10 >>> 4);
-        final int byte11 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte10 & 15) << 3) | (byte11 >>> 5);
-        final int byte12 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte11 & 31) << 2) | (byte12 >>> 6);
-        final int byte13 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte12 & 63) << 1) | (byte13 >>> 7);
-        values[valuesOffset++] = byte13 & 127;
-        final int byte14 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte14 >>> 1;
-        final int byte15 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte14 & 1) << 6) | (byte15 >>> 2);
-        final int byte16 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte15 & 3) << 5) | (byte16 >>> 3);
-        final int byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte16 & 7) << 4) | (byte17 >>> 4);
-        final int byte18 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte17 & 15) << 3) | (byte18 >>> 5);
-        final int byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte18 & 31) << 2) | (byte19 >>> 6);
-        final int byte20 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte19 & 63) << 1) | (byte20 >>> 7);
-        values[valuesOffset++] = byte20 & 127;
-        final int byte21 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte21 >>> 1;
-        final int byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte21 & 1) << 6) | (byte22 >>> 2);
-        final int byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 3) << 5) | (byte23 >>> 3);
-        final int byte24 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte23 & 7) << 4) | (byte24 >>> 4);
-        final int byte25 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte24 & 15) << 3) | (byte25 >>> 5);
-        final int byte26 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte25 & 31) << 2) | (byte26 >>> 6);
-        final int byte27 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte26 & 63) << 1) | (byte27 >>> 7);
-        values[valuesOffset++] = byte27 & 127;
-        final int byte28 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte28 >>> 1;
-        final int byte29 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte28 & 1) << 6) | (byte29 >>> 2);
-        final int byte30 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte29 & 3) << 5) | (byte30 >>> 3);
-        final int byte31 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte30 & 7) << 4) | (byte31 >>> 4);
-        final int byte32 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte31 & 15) << 3) | (byte32 >>> 5);
-        final int byte33 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte32 & 31) << 2) | (byte33 >>> 6);
-        final int byte34 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte33 & 63) << 1) | (byte34 >>> 7);
-        values[valuesOffset++] = byte34 & 127;
-        final int byte35 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte35 >>> 1;
-        final int byte36 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte35 & 1) << 6) | (byte36 >>> 2);
-        final int byte37 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte36 & 3) << 5) | (byte37 >>> 3);
-        final int byte38 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte37 & 7) << 4) | (byte38 >>> 4);
-        final int byte39 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte38 & 15) << 3) | (byte39 >>> 5);
-        final int byte40 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte39 & 31) << 2) | (byte40 >>> 6);
-        final int byte41 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte40 & 63) << 1) | (byte41 >>> 7);
-        values[valuesOffset++] = byte41 & 127;
-        final int byte42 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte42 >>> 1;
-        final int byte43 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte42 & 1) << 6) | (byte43 >>> 2);
-        final int byte44 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte43 & 3) << 5) | (byte44 >>> 3);
-        final int byte45 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte44 & 7) << 4) | (byte45 >>> 4);
-        final int byte46 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte45 & 15) << 3) | (byte46 >>> 5);
-        final int byte47 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte46 & 31) << 2) | (byte47 >>> 6);
-        final int byte48 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte47 & 63) << 1) | (byte48 >>> 7);
-        values[valuesOffset++] = byte48 & 127;
-        final int byte49 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte49 >>> 1;
-        final int byte50 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte49 & 1) << 6) | (byte50 >>> 2);
-        final int byte51 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte50 & 3) << 5) | (byte51 >>> 3);
-        final int byte52 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte51 & 7) << 4) | (byte52 >>> 4);
-        final int byte53 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte52 & 15) << 3) | (byte53 >>> 5);
-        final int byte54 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte53 & 31) << 2) | (byte54 >>> 6);
-        final int byte55 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte54 & 63) << 1) | (byte55 >>> 7);
-        values[valuesOffset++] = byte55 & 127;
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = block0 >>> 57;
@@ -318,9 +207,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final long byte0 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = byte0 >>> 1;
         final long byte1 = blocks[blocksOffset++] & 0xFF;
@@ -336,111 +223,6 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
         final long byte6 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte5 & 63) << 1) | (byte6 >>> 7);
         values[valuesOffset++] = byte6 & 127;
-        final long byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte7 >>> 1;
-        final long byte8 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte7 & 1) << 6) | (byte8 >>> 2);
-        final long byte9 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte8 & 3) << 5) | (byte9 >>> 3);
-        final long byte10 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte9 & 7) << 4) | (byte10 >>> 4);
-        final long byte11 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte10 & 15) << 3) | (byte11 >>> 5);
-        final long byte12 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte11 & 31) << 2) | (byte12 >>> 6);
-        final long byte13 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte12 & 63) << 1) | (byte13 >>> 7);
-        values[valuesOffset++] = byte13 & 127;
-        final long byte14 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte14 >>> 1;
-        final long byte15 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte14 & 1) << 6) | (byte15 >>> 2);
-        final long byte16 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte15 & 3) << 5) | (byte16 >>> 3);
-        final long byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte16 & 7) << 4) | (byte17 >>> 4);
-        final long byte18 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte17 & 15) << 3) | (byte18 >>> 5);
-        final long byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte18 & 31) << 2) | (byte19 >>> 6);
-        final long byte20 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte19 & 63) << 1) | (byte20 >>> 7);
-        values[valuesOffset++] = byte20 & 127;
-        final long byte21 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte21 >>> 1;
-        final long byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte21 & 1) << 6) | (byte22 >>> 2);
-        final long byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 3) << 5) | (byte23 >>> 3);
-        final long byte24 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte23 & 7) << 4) | (byte24 >>> 4);
-        final long byte25 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte24 & 15) << 3) | (byte25 >>> 5);
-        final long byte26 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte25 & 31) << 2) | (byte26 >>> 6);
-        final long byte27 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte26 & 63) << 1) | (byte27 >>> 7);
-        values[valuesOffset++] = byte27 & 127;
-        final long byte28 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte28 >>> 1;
-        final long byte29 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte28 & 1) << 6) | (byte29 >>> 2);
-        final long byte30 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte29 & 3) << 5) | (byte30 >>> 3);
-        final long byte31 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte30 & 7) << 4) | (byte31 >>> 4);
-        final long byte32 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte31 & 15) << 3) | (byte32 >>> 5);
-        final long byte33 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte32 & 31) << 2) | (byte33 >>> 6);
-        final long byte34 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte33 & 63) << 1) | (byte34 >>> 7);
-        values[valuesOffset++] = byte34 & 127;
-        final long byte35 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte35 >>> 1;
-        final long byte36 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte35 & 1) << 6) | (byte36 >>> 2);
-        final long byte37 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte36 & 3) << 5) | (byte37 >>> 3);
-        final long byte38 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte37 & 7) << 4) | (byte38 >>> 4);
-        final long byte39 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte38 & 15) << 3) | (byte39 >>> 5);
-        final long byte40 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte39 & 31) << 2) | (byte40 >>> 6);
-        final long byte41 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte40 & 63) << 1) | (byte41 >>> 7);
-        values[valuesOffset++] = byte41 & 127;
-        final long byte42 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte42 >>> 1;
-        final long byte43 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte42 & 1) << 6) | (byte43 >>> 2);
-        final long byte44 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte43 & 3) << 5) | (byte44 >>> 3);
-        final long byte45 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte44 & 7) << 4) | (byte45 >>> 4);
-        final long byte46 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte45 & 15) << 3) | (byte46 >>> 5);
-        final long byte47 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte46 & 31) << 2) | (byte47 >>> 6);
-        final long byte48 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte47 & 63) << 1) | (byte48 >>> 7);
-        values[valuesOffset++] = byte48 & 127;
-        final long byte49 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte49 >>> 1;
-        final long byte50 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte49 & 1) << 6) | (byte50 >>> 2);
-        final long byte51 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte50 & 3) << 5) | (byte51 >>> 3);
-        final long byte52 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte51 & 7) << 4) | (byte52 >>> 4);
-        final long byte53 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte52 & 15) << 3) | (byte53 >>> 5);
-        final long byte54 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte53 & 31) << 2) | (byte54 >>> 6);
-        final long byte55 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte54 & 63) << 1) | (byte55 >>> 7);
-        values[valuesOffset++] = byte55 & 127;
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked8.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked8.java
index d6bff434..d64c3b62 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked8.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked8.java
@@ -32,83 +32,35 @@ public BulkOperationPacked8() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
-        final long block0 = blocks[blocksOffset++];
-        values[valuesOffset++] = (int) (block0 >>> 56);
-        values[valuesOffset++] = (int) ((block0 >>> 48) & 255L);
-        values[valuesOffset++] = (int) ((block0 >>> 40) & 255L);
-        values[valuesOffset++] = (int) ((block0 >>> 32) & 255L);
-        values[valuesOffset++] = (int) ((block0 >>> 24) & 255L);
-        values[valuesOffset++] = (int) ((block0 >>> 16) & 255L);
-        values[valuesOffset++] = (int) ((block0 >>> 8) & 255L);
-        values[valuesOffset++] = (int) (block0 & 255L);
+      final long block = blocks[blocksOffset++];
+      for (int shift = 56; shift >= 0; shift -= 8) {
+        values[valuesOffset++] = (int) ((block >>> shift) & 255);
+      }
       }
     }
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte1;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte2;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte3;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte4;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte5;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte6;
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte7;
+    for (int j = 0; j < 8 * iterations; ++j) {
+      values[valuesOffset++] = blocks[blocksOffset++] & 0xFF;
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
-        final long block0 = blocks[blocksOffset++];
-        values[valuesOffset++] = block0 >>> 56;
-        values[valuesOffset++] = (block0 >>> 48) & 255L;
-        values[valuesOffset++] = (block0 >>> 40) & 255L;
-        values[valuesOffset++] = (block0 >>> 32) & 255L;
-        values[valuesOffset++] = (block0 >>> 24) & 255L;
-        values[valuesOffset++] = (block0 >>> 16) & 255L;
-        values[valuesOffset++] = (block0 >>> 8) & 255L;
-        values[valuesOffset++] = block0 & 255L;
+      final long block = blocks[blocksOffset++];
+      for (int shift = 56; shift >= 0; shift -= 8) {
+        values[valuesOffset++] = (block >>> shift) & 255;
+      }
       }
     }
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0;
-        final long byte1 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte1;
-        final long byte2 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte2;
-        final long byte3 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte3;
-        final long byte4 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte4;
-        final long byte5 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte5;
-        final long byte6 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte6;
-        final long byte7 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte7;
+    for (int j = 0; j < 8 * iterations; ++j) {
+      values[valuesOffset++] = blocks[blocksOffset++] & 0xFF;
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked9.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked9.java
index 270bf05c..3da8543a 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked9.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked9.java
@@ -32,8 +32,6 @@ public BulkOperationPacked9() {
 
     @Override
     public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = (int) (block0 >>> 55);
@@ -113,9 +111,7 @@ public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffs
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final int byte0 = blocks[blocksOffset++] & 0xFF;
         final int byte1 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = (byte0 << 1) | (byte1 >>> 7);
@@ -133,132 +129,11 @@ public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffs
         values[valuesOffset++] = ((byte6 & 3) << 7) | (byte7 >>> 1);
         final int byte8 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte7 & 1) << 8) | byte8;
-        final int byte9 = blocks[blocksOffset++] & 0xFF;
-        final int byte10 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte9 << 1) | (byte10 >>> 7);
-        final int byte11 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte10 & 127) << 2) | (byte11 >>> 6);
-        final int byte12 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte11 & 63) << 3) | (byte12 >>> 5);
-        final int byte13 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte12 & 31) << 4) | (byte13 >>> 4);
-        final int byte14 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte13 & 15) << 5) | (byte14 >>> 3);
-        final int byte15 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte14 & 7) << 6) | (byte15 >>> 2);
-        final int byte16 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte15 & 3) << 7) | (byte16 >>> 1);
-        final int byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte16 & 1) << 8) | byte17;
-        final int byte18 = blocks[blocksOffset++] & 0xFF;
-        final int byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte18 << 1) | (byte19 >>> 7);
-        final int byte20 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte19 & 127) << 2) | (byte20 >>> 6);
-        final int byte21 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte20 & 63) << 3) | (byte21 >>> 5);
-        final int byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte21 & 31) << 4) | (byte22 >>> 4);
-        final int byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 15) << 5) | (byte23 >>> 3);
-        final int byte24 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte23 & 7) << 6) | (byte24 >>> 2);
-        final int byte25 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte24 & 3) << 7) | (byte25 >>> 1);
-        final int byte26 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte25 & 1) << 8) | byte26;
-        final int byte27 = blocks[blocksOffset++] & 0xFF;
-        final int byte28 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte27 << 1) | (byte28 >>> 7);
-        final int byte29 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte28 & 127) << 2) | (byte29 >>> 6);
-        final int byte30 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte29 & 63) << 3) | (byte30 >>> 5);
-        final int byte31 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte30 & 31) << 4) | (byte31 >>> 4);
-        final int byte32 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte31 & 15) << 5) | (byte32 >>> 3);
-        final int byte33 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte32 & 7) << 6) | (byte33 >>> 2);
-        final int byte34 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte33 & 3) << 7) | (byte34 >>> 1);
-        final int byte35 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte34 & 1) << 8) | byte35;
-        final int byte36 = blocks[blocksOffset++] & 0xFF;
-        final int byte37 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte36 << 1) | (byte37 >>> 7);
-        final int byte38 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte37 & 127) << 2) | (byte38 >>> 6);
-        final int byte39 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte38 & 63) << 3) | (byte39 >>> 5);
-        final int byte40 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte39 & 31) << 4) | (byte40 >>> 4);
-        final int byte41 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte40 & 15) << 5) | (byte41 >>> 3);
-        final int byte42 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte41 & 7) << 6) | (byte42 >>> 2);
-        final int byte43 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte42 & 3) << 7) | (byte43 >>> 1);
-        final int byte44 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte43 & 1) << 8) | byte44;
-        final int byte45 = blocks[blocksOffset++] & 0xFF;
-        final int byte46 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte45 << 1) | (byte46 >>> 7);
-        final int byte47 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte46 & 127) << 2) | (byte47 >>> 6);
-        final int byte48 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte47 & 63) << 3) | (byte48 >>> 5);
-        final int byte49 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte48 & 31) << 4) | (byte49 >>> 4);
-        final int byte50 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte49 & 15) << 5) | (byte50 >>> 3);
-        final int byte51 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte50 & 7) << 6) | (byte51 >>> 2);
-        final int byte52 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte51 & 3) << 7) | (byte52 >>> 1);
-        final int byte53 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte52 & 1) << 8) | byte53;
-        final int byte54 = blocks[blocksOffset++] & 0xFF;
-        final int byte55 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte54 << 1) | (byte55 >>> 7);
-        final int byte56 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte55 & 127) << 2) | (byte56 >>> 6);
-        final int byte57 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte56 & 63) << 3) | (byte57 >>> 5);
-        final int byte58 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte57 & 31) << 4) | (byte58 >>> 4);
-        final int byte59 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte58 & 15) << 5) | (byte59 >>> 3);
-        final int byte60 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte59 & 7) << 6) | (byte60 >>> 2);
-        final int byte61 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte60 & 3) << 7) | (byte61 >>> 1);
-        final int byte62 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte61 & 1) << 8) | byte62;
-        final int byte63 = blocks[blocksOffset++] & 0xFF;
-        final int byte64 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte63 << 1) | (byte64 >>> 7);
-        final int byte65 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte64 & 127) << 2) | (byte65 >>> 6);
-        final int byte66 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte65 & 63) << 3) | (byte66 >>> 5);
-        final int byte67 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte66 & 31) << 4) | (byte67 >>> 4);
-        final int byte68 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte67 & 15) << 5) | (byte68 >>> 3);
-        final int byte69 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte68 & 7) << 6) | (byte69 >>> 2);
-        final int byte70 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte69 & 3) << 7) | (byte70 >>> 1);
-        final int byte71 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte70 & 1) << 8) | byte71;
       }
     }
 
     @Override
     public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
       for (int i = 0; i < iterations; ++i) {
         final long block0 = blocks[blocksOffset++];
         values[valuesOffset++] = block0 >>> 55;
@@ -338,9 +213,7 @@ public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOff
 
     @Override
     public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
+    for (int i = 0; i < 8 * iterations; ++i) {
         final long byte0 = blocks[blocksOffset++] & 0xFF;
         final long byte1 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = (byte0 << 1) | (byte1 >>> 7);
@@ -358,125 +231,6 @@ public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOff
         values[valuesOffset++] = ((byte6 & 3) << 7) | (byte7 >>> 1);
         final long byte8 = blocks[blocksOffset++] & 0xFF;
         values[valuesOffset++] = ((byte7 & 1) << 8) | byte8;
-        final long byte9 = blocks[blocksOffset++] & 0xFF;
-        final long byte10 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte9 << 1) | (byte10 >>> 7);
-        final long byte11 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte10 & 127) << 2) | (byte11 >>> 6);
-        final long byte12 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte11 & 63) << 3) | (byte12 >>> 5);
-        final long byte13 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte12 & 31) << 4) | (byte13 >>> 4);
-        final long byte14 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte13 & 15) << 5) | (byte14 >>> 3);
-        final long byte15 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte14 & 7) << 6) | (byte15 >>> 2);
-        final long byte16 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte15 & 3) << 7) | (byte16 >>> 1);
-        final long byte17 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte16 & 1) << 8) | byte17;
-        final long byte18 = blocks[blocksOffset++] & 0xFF;
-        final long byte19 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte18 << 1) | (byte19 >>> 7);
-        final long byte20 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte19 & 127) << 2) | (byte20 >>> 6);
-        final long byte21 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte20 & 63) << 3) | (byte21 >>> 5);
-        final long byte22 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte21 & 31) << 4) | (byte22 >>> 4);
-        final long byte23 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte22 & 15) << 5) | (byte23 >>> 3);
-        final long byte24 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte23 & 7) << 6) | (byte24 >>> 2);
-        final long byte25 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte24 & 3) << 7) | (byte25 >>> 1);
-        final long byte26 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte25 & 1) << 8) | byte26;
-        final long byte27 = blocks[blocksOffset++] & 0xFF;
-        final long byte28 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte27 << 1) | (byte28 >>> 7);
-        final long byte29 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte28 & 127) << 2) | (byte29 >>> 6);
-        final long byte30 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte29 & 63) << 3) | (byte30 >>> 5);
-        final long byte31 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte30 & 31) << 4) | (byte31 >>> 4);
-        final long byte32 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte31 & 15) << 5) | (byte32 >>> 3);
-        final long byte33 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte32 & 7) << 6) | (byte33 >>> 2);
-        final long byte34 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte33 & 3) << 7) | (byte34 >>> 1);
-        final long byte35 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte34 & 1) << 8) | byte35;
-        final long byte36 = blocks[blocksOffset++] & 0xFF;
-        final long byte37 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte36 << 1) | (byte37 >>> 7);
-        final long byte38 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte37 & 127) << 2) | (byte38 >>> 6);
-        final long byte39 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte38 & 63) << 3) | (byte39 >>> 5);
-        final long byte40 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte39 & 31) << 4) | (byte40 >>> 4);
-        final long byte41 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte40 & 15) << 5) | (byte41 >>> 3);
-        final long byte42 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte41 & 7) << 6) | (byte42 >>> 2);
-        final long byte43 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte42 & 3) << 7) | (byte43 >>> 1);
-        final long byte44 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte43 & 1) << 8) | byte44;
-        final long byte45 = blocks[blocksOffset++] & 0xFF;
-        final long byte46 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte45 << 1) | (byte46 >>> 7);
-        final long byte47 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte46 & 127) << 2) | (byte47 >>> 6);
-        final long byte48 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte47 & 63) << 3) | (byte48 >>> 5);
-        final long byte49 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte48 & 31) << 4) | (byte49 >>> 4);
-        final long byte50 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte49 & 15) << 5) | (byte50 >>> 3);
-        final long byte51 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte50 & 7) << 6) | (byte51 >>> 2);
-        final long byte52 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte51 & 3) << 7) | (byte52 >>> 1);
-        final long byte53 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte52 & 1) << 8) | byte53;
-        final long byte54 = blocks[blocksOffset++] & 0xFF;
-        final long byte55 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte54 << 1) | (byte55 >>> 7);
-        final long byte56 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte55 & 127) << 2) | (byte56 >>> 6);
-        final long byte57 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte56 & 63) << 3) | (byte57 >>> 5);
-        final long byte58 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte57 & 31) << 4) | (byte58 >>> 4);
-        final long byte59 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte58 & 15) << 5) | (byte59 >>> 3);
-        final long byte60 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte59 & 7) << 6) | (byte60 >>> 2);
-        final long byte61 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte60 & 3) << 7) | (byte61 >>> 1);
-        final long byte62 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte61 & 1) << 8) | byte62;
-        final long byte63 = blocks[blocksOffset++] & 0xFF;
-        final long byte64 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = (byte63 << 1) | (byte64 >>> 7);
-        final long byte65 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte64 & 127) << 2) | (byte65 >>> 6);
-        final long byte66 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte65 & 63) << 3) | (byte66 >>> 5);
-        final long byte67 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte66 & 31) << 4) | (byte67 >>> 4);
-        final long byte68 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte67 & 15) << 5) | (byte68 >>> 3);
-        final long byte69 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte68 & 7) << 6) | (byte69 >>> 2);
-        final long byte70 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte69 & 3) << 7) | (byte70 >>> 1);
-        final long byte71 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = ((byte70 & 1) << 8) | byte71;
       }
     }
 
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock1.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock1.java
index 4151ca38..e69de29b 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock1.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock1.java
@@ -1,337 +0,0 @@
-// This file has been automatically generated, DO NOT EDIT
-
-package org.apache.lucene.util.packed;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Efficient sequential read/write of packed integers.
- */
-final class BulkOperationPackedSingleBlock1 extends BulkOperationPackedSingleBlock {
-
-    public BulkOperationPackedSingleBlock1() {
-      super(1);
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = (int) (block & 1L);
-        values[valuesOffset++] = (int) ((block >>> 1) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 2) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 3) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 4) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 5) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 6) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 7) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 8) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 9) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 10) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 11) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 12) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 13) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 14) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 15) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 16) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 17) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 18) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 19) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 20) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 21) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 22) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 23) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 24) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 25) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 26) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 27) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 28) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 29) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 30) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 31) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 32) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 33) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 34) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 35) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 36) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 37) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 38) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 39) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 40) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 41) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 42) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 43) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 44) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 45) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 46) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 47) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 48) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 49) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 50) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 51) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 52) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 53) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 54) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 55) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 56) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 57) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 58) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 59) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 60) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 61) & 1L);
-        values[valuesOffset++] = (int) ((block >>> 62) & 1L);
-        values[valuesOffset++] = (int) (block >>> 63);
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 & 1;
-        values[valuesOffset++] = (byte0 >>> 1) & 1;
-        values[valuesOffset++] = (byte0 >>> 2) & 1;
-        values[valuesOffset++] = (byte0 >>> 3) & 1;
-        values[valuesOffset++] = (byte0 >>> 4) & 1;
-        values[valuesOffset++] = (byte0 >>> 5) & 1;
-        values[valuesOffset++] = (byte0 >>> 6) & 1;
-        values[valuesOffset++] = byte0 >>> 7;
-        values[valuesOffset++] = byte1 & 1;
-        values[valuesOffset++] = (byte1 >>> 1) & 1;
-        values[valuesOffset++] = (byte1 >>> 2) & 1;
-        values[valuesOffset++] = (byte1 >>> 3) & 1;
-        values[valuesOffset++] = (byte1 >>> 4) & 1;
-        values[valuesOffset++] = (byte1 >>> 5) & 1;
-        values[valuesOffset++] = (byte1 >>> 6) & 1;
-        values[valuesOffset++] = byte1 >>> 7;
-        values[valuesOffset++] = byte2 & 1;
-        values[valuesOffset++] = (byte2 >>> 1) & 1;
-        values[valuesOffset++] = (byte2 >>> 2) & 1;
-        values[valuesOffset++] = (byte2 >>> 3) & 1;
-        values[valuesOffset++] = (byte2 >>> 4) & 1;
-        values[valuesOffset++] = (byte2 >>> 5) & 1;
-        values[valuesOffset++] = (byte2 >>> 6) & 1;
-        values[valuesOffset++] = byte2 >>> 7;
-        values[valuesOffset++] = byte3 & 1;
-        values[valuesOffset++] = (byte3 >>> 1) & 1;
-        values[valuesOffset++] = (byte3 >>> 2) & 1;
-        values[valuesOffset++] = (byte3 >>> 3) & 1;
-        values[valuesOffset++] = (byte3 >>> 4) & 1;
-        values[valuesOffset++] = (byte3 >>> 5) & 1;
-        values[valuesOffset++] = (byte3 >>> 6) & 1;
-        values[valuesOffset++] = byte3 >>> 7;
-        values[valuesOffset++] = byte4 & 1;
-        values[valuesOffset++] = (byte4 >>> 1) & 1;
-        values[valuesOffset++] = (byte4 >>> 2) & 1;
-        values[valuesOffset++] = (byte4 >>> 3) & 1;
-        values[valuesOffset++] = (byte4 >>> 4) & 1;
-        values[valuesOffset++] = (byte4 >>> 5) & 1;
-        values[valuesOffset++] = (byte4 >>> 6) & 1;
-        values[valuesOffset++] = byte4 >>> 7;
-        values[valuesOffset++] = byte5 & 1;
-        values[valuesOffset++] = (byte5 >>> 1) & 1;
-        values[valuesOffset++] = (byte5 >>> 2) & 1;
-        values[valuesOffset++] = (byte5 >>> 3) & 1;
-        values[valuesOffset++] = (byte5 >>> 4) & 1;
-        values[valuesOffset++] = (byte5 >>> 5) & 1;
-        values[valuesOffset++] = (byte5 >>> 6) & 1;
-        values[valuesOffset++] = byte5 >>> 7;
-        values[valuesOffset++] = byte6 & 1;
-        values[valuesOffset++] = (byte6 >>> 1) & 1;
-        values[valuesOffset++] = (byte6 >>> 2) & 1;
-        values[valuesOffset++] = (byte6 >>> 3) & 1;
-        values[valuesOffset++] = (byte6 >>> 4) & 1;
-        values[valuesOffset++] = (byte6 >>> 5) & 1;
-        values[valuesOffset++] = (byte6 >>> 6) & 1;
-        values[valuesOffset++] = byte6 >>> 7;
-        values[valuesOffset++] = byte7 & 1;
-        values[valuesOffset++] = (byte7 >>> 1) & 1;
-        values[valuesOffset++] = (byte7 >>> 2) & 1;
-        values[valuesOffset++] = (byte7 >>> 3) & 1;
-        values[valuesOffset++] = (byte7 >>> 4) & 1;
-        values[valuesOffset++] = (byte7 >>> 5) & 1;
-        values[valuesOffset++] = (byte7 >>> 6) & 1;
-        values[valuesOffset++] = byte7 >>> 7;
-      }
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = block & 1L;
-        values[valuesOffset++] = (block >>> 1) & 1L;
-        values[valuesOffset++] = (block >>> 2) & 1L;
-        values[valuesOffset++] = (block >>> 3) & 1L;
-        values[valuesOffset++] = (block >>> 4) & 1L;
-        values[valuesOffset++] = (block >>> 5) & 1L;
-        values[valuesOffset++] = (block >>> 6) & 1L;
-        values[valuesOffset++] = (block >>> 7) & 1L;
-        values[valuesOffset++] = (block >>> 8) & 1L;
-        values[valuesOffset++] = (block >>> 9) & 1L;
-        values[valuesOffset++] = (block >>> 10) & 1L;
-        values[valuesOffset++] = (block >>> 11) & 1L;
-        values[valuesOffset++] = (block >>> 12) & 1L;
-        values[valuesOffset++] = (block >>> 13) & 1L;
-        values[valuesOffset++] = (block >>> 14) & 1L;
-        values[valuesOffset++] = (block >>> 15) & 1L;
-        values[valuesOffset++] = (block >>> 16) & 1L;
-        values[valuesOffset++] = (block >>> 17) & 1L;
-        values[valuesOffset++] = (block >>> 18) & 1L;
-        values[valuesOffset++] = (block >>> 19) & 1L;
-        values[valuesOffset++] = (block >>> 20) & 1L;
-        values[valuesOffset++] = (block >>> 21) & 1L;
-        values[valuesOffset++] = (block >>> 22) & 1L;
-        values[valuesOffset++] = (block >>> 23) & 1L;
-        values[valuesOffset++] = (block >>> 24) & 1L;
-        values[valuesOffset++] = (block >>> 25) & 1L;
-        values[valuesOffset++] = (block >>> 26) & 1L;
-        values[valuesOffset++] = (block >>> 27) & 1L;
-        values[valuesOffset++] = (block >>> 28) & 1L;
-        values[valuesOffset++] = (block >>> 29) & 1L;
-        values[valuesOffset++] = (block >>> 30) & 1L;
-        values[valuesOffset++] = (block >>> 31) & 1L;
-        values[valuesOffset++] = (block >>> 32) & 1L;
-        values[valuesOffset++] = (block >>> 33) & 1L;
-        values[valuesOffset++] = (block >>> 34) & 1L;
-        values[valuesOffset++] = (block >>> 35) & 1L;
-        values[valuesOffset++] = (block >>> 36) & 1L;
-        values[valuesOffset++] = (block >>> 37) & 1L;
-        values[valuesOffset++] = (block >>> 38) & 1L;
-        values[valuesOffset++] = (block >>> 39) & 1L;
-        values[valuesOffset++] = (block >>> 40) & 1L;
-        values[valuesOffset++] = (block >>> 41) & 1L;
-        values[valuesOffset++] = (block >>> 42) & 1L;
-        values[valuesOffset++] = (block >>> 43) & 1L;
-        values[valuesOffset++] = (block >>> 44) & 1L;
-        values[valuesOffset++] = (block >>> 45) & 1L;
-        values[valuesOffset++] = (block >>> 46) & 1L;
-        values[valuesOffset++] = (block >>> 47) & 1L;
-        values[valuesOffset++] = (block >>> 48) & 1L;
-        values[valuesOffset++] = (block >>> 49) & 1L;
-        values[valuesOffset++] = (block >>> 50) & 1L;
-        values[valuesOffset++] = (block >>> 51) & 1L;
-        values[valuesOffset++] = (block >>> 52) & 1L;
-        values[valuesOffset++] = (block >>> 53) & 1L;
-        values[valuesOffset++] = (block >>> 54) & 1L;
-        values[valuesOffset++] = (block >>> 55) & 1L;
-        values[valuesOffset++] = (block >>> 56) & 1L;
-        values[valuesOffset++] = (block >>> 57) & 1L;
-        values[valuesOffset++] = (block >>> 58) & 1L;
-        values[valuesOffset++] = (block >>> 59) & 1L;
-        values[valuesOffset++] = (block >>> 60) & 1L;
-        values[valuesOffset++] = (block >>> 61) & 1L;
-        values[valuesOffset++] = (block >>> 62) & 1L;
-        values[valuesOffset++] = block >>> 63;
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 & 1;
-        values[valuesOffset++] = (byte0 >>> 1) & 1;
-        values[valuesOffset++] = (byte0 >>> 2) & 1;
-        values[valuesOffset++] = (byte0 >>> 3) & 1;
-        values[valuesOffset++] = (byte0 >>> 4) & 1;
-        values[valuesOffset++] = (byte0 >>> 5) & 1;
-        values[valuesOffset++] = (byte0 >>> 6) & 1;
-        values[valuesOffset++] = byte0 >>> 7;
-        values[valuesOffset++] = byte1 & 1;
-        values[valuesOffset++] = (byte1 >>> 1) & 1;
-        values[valuesOffset++] = (byte1 >>> 2) & 1;
-        values[valuesOffset++] = (byte1 >>> 3) & 1;
-        values[valuesOffset++] = (byte1 >>> 4) & 1;
-        values[valuesOffset++] = (byte1 >>> 5) & 1;
-        values[valuesOffset++] = (byte1 >>> 6) & 1;
-        values[valuesOffset++] = byte1 >>> 7;
-        values[valuesOffset++] = byte2 & 1;
-        values[valuesOffset++] = (byte2 >>> 1) & 1;
-        values[valuesOffset++] = (byte2 >>> 2) & 1;
-        values[valuesOffset++] = (byte2 >>> 3) & 1;
-        values[valuesOffset++] = (byte2 >>> 4) & 1;
-        values[valuesOffset++] = (byte2 >>> 5) & 1;
-        values[valuesOffset++] = (byte2 >>> 6) & 1;
-        values[valuesOffset++] = byte2 >>> 7;
-        values[valuesOffset++] = byte3 & 1;
-        values[valuesOffset++] = (byte3 >>> 1) & 1;
-        values[valuesOffset++] = (byte3 >>> 2) & 1;
-        values[valuesOffset++] = (byte3 >>> 3) & 1;
-        values[valuesOffset++] = (byte3 >>> 4) & 1;
-        values[valuesOffset++] = (byte3 >>> 5) & 1;
-        values[valuesOffset++] = (byte3 >>> 6) & 1;
-        values[valuesOffset++] = byte3 >>> 7;
-        values[valuesOffset++] = byte4 & 1;
-        values[valuesOffset++] = (byte4 >>> 1) & 1;
-        values[valuesOffset++] = (byte4 >>> 2) & 1;
-        values[valuesOffset++] = (byte4 >>> 3) & 1;
-        values[valuesOffset++] = (byte4 >>> 4) & 1;
-        values[valuesOffset++] = (byte4 >>> 5) & 1;
-        values[valuesOffset++] = (byte4 >>> 6) & 1;
-        values[valuesOffset++] = byte4 >>> 7;
-        values[valuesOffset++] = byte5 & 1;
-        values[valuesOffset++] = (byte5 >>> 1) & 1;
-        values[valuesOffset++] = (byte5 >>> 2) & 1;
-        values[valuesOffset++] = (byte5 >>> 3) & 1;
-        values[valuesOffset++] = (byte5 >>> 4) & 1;
-        values[valuesOffset++] = (byte5 >>> 5) & 1;
-        values[valuesOffset++] = (byte5 >>> 6) & 1;
-        values[valuesOffset++] = byte5 >>> 7;
-        values[valuesOffset++] = byte6 & 1;
-        values[valuesOffset++] = (byte6 >>> 1) & 1;
-        values[valuesOffset++] = (byte6 >>> 2) & 1;
-        values[valuesOffset++] = (byte6 >>> 3) & 1;
-        values[valuesOffset++] = (byte6 >>> 4) & 1;
-        values[valuesOffset++] = (byte6 >>> 5) & 1;
-        values[valuesOffset++] = (byte6 >>> 6) & 1;
-        values[valuesOffset++] = byte6 >>> 7;
-        values[valuesOffset++] = byte7 & 1;
-        values[valuesOffset++] = (byte7 >>> 1) & 1;
-        values[valuesOffset++] = (byte7 >>> 2) & 1;
-        values[valuesOffset++] = (byte7 >>> 3) & 1;
-        values[valuesOffset++] = (byte7 >>> 4) & 1;
-        values[valuesOffset++] = (byte7 >>> 5) & 1;
-        values[valuesOffset++] = (byte7 >>> 6) & 1;
-        values[valuesOffset++] = byte7 >>> 7;
-      }
-    }
-
-}
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock10.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock10.java
index 77f68169..e69de29b 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock10.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock10.java
@@ -1,105 +0,0 @@
-// This file has been automatically generated, DO NOT EDIT
-
-package org.apache.lucene.util.packed;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Efficient sequential read/write of packed integers.
- */
-final class BulkOperationPackedSingleBlock10 extends BulkOperationPackedSingleBlock {
-
-    public BulkOperationPackedSingleBlock10() {
-      super(10);
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = (int) (block & 1023L);
-        values[valuesOffset++] = (int) ((block >>> 10) & 1023L);
-        values[valuesOffset++] = (int) ((block >>> 20) & 1023L);
-        values[valuesOffset++] = (int) ((block >>> 30) & 1023L);
-        values[valuesOffset++] = (int) ((block >>> 40) & 1023L);
-        values[valuesOffset++] = (int) (block >>> 50);
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 | ((byte1 & 3) << 8);
-        values[valuesOffset++] = (byte1 >>> 2) | ((byte2 & 15) << 6);
-        values[valuesOffset++] = (byte2 >>> 4) | ((byte3 & 63) << 4);
-        values[valuesOffset++] = (byte3 >>> 6) | (byte4 << 2);
-        values[valuesOffset++] = byte5 | ((byte6 & 3) << 8);
-        values[valuesOffset++] = (byte6 >>> 2) | ((byte7 & 15) << 6);
-      }
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = block & 1023L;
-        values[valuesOffset++] = (block >>> 10) & 1023L;
-        values[valuesOffset++] = (block >>> 20) & 1023L;
-        values[valuesOffset++] = (block >>> 30) & 1023L;
-        values[valuesOffset++] = (block >>> 40) & 1023L;
-        values[valuesOffset++] = block >>> 50;
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 | ((byte1 & 3) << 8);
-        values[valuesOffset++] = (byte1 >>> 2) | ((byte2 & 15) << 6);
-        values[valuesOffset++] = (byte2 >>> 4) | ((byte3 & 63) << 4);
-        values[valuesOffset++] = (byte3 >>> 6) | (byte4 << 2);
-        values[valuesOffset++] = byte5 | ((byte6 & 3) << 8);
-        values[valuesOffset++] = (byte6 >>> 2) | ((byte7 & 15) << 6);
-      }
-    }
-
-}
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock12.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock12.java
index 71114cd9..e69de29b 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock12.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock12.java
@@ -1,101 +0,0 @@
-// This file has been automatically generated, DO NOT EDIT
-
-package org.apache.lucene.util.packed;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Efficient sequential read/write of packed integers.
- */
-final class BulkOperationPackedSingleBlock12 extends BulkOperationPackedSingleBlock {
-
-    public BulkOperationPackedSingleBlock12() {
-      super(12);
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = (int) (block & 4095L);
-        values[valuesOffset++] = (int) ((block >>> 12) & 4095L);
-        values[valuesOffset++] = (int) ((block >>> 24) & 4095L);
-        values[valuesOffset++] = (int) ((block >>> 36) & 4095L);
-        values[valuesOffset++] = (int) (block >>> 48);
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 | ((byte1 & 15) << 8);
-        values[valuesOffset++] = (byte1 >>> 4) | (byte2 << 4);
-        values[valuesOffset++] = byte3 | ((byte4 & 15) << 8);
-        values[valuesOffset++] = (byte4 >>> 4) | (byte5 << 4);
-        values[valuesOffset++] = byte6 | ((byte7 & 15) << 8);
-      }
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = block & 4095L;
-        values[valuesOffset++] = (block >>> 12) & 4095L;
-        values[valuesOffset++] = (block >>> 24) & 4095L;
-        values[valuesOffset++] = (block >>> 36) & 4095L;
-        values[valuesOffset++] = block >>> 48;
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 | ((byte1 & 15) << 8);
-        values[valuesOffset++] = (byte1 >>> 4) | (byte2 << 4);
-        values[valuesOffset++] = byte3 | ((byte4 & 15) << 8);
-        values[valuesOffset++] = (byte4 >>> 4) | (byte5 << 4);
-        values[valuesOffset++] = byte6 | ((byte7 & 15) << 8);
-      }
-    }
-
-}
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock16.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock16.java
index bde3be5c..e69de29b 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock16.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock16.java
@@ -1,97 +0,0 @@
-// This file has been automatically generated, DO NOT EDIT
-
-package org.apache.lucene.util.packed;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Efficient sequential read/write of packed integers.
- */
-final class BulkOperationPackedSingleBlock16 extends BulkOperationPackedSingleBlock {
-
-    public BulkOperationPackedSingleBlock16() {
-      super(16);
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = (int) (block & 65535L);
-        values[valuesOffset++] = (int) ((block >>> 16) & 65535L);
-        values[valuesOffset++] = (int) ((block >>> 32) & 65535L);
-        values[valuesOffset++] = (int) (block >>> 48);
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 | (byte1 << 8);
-        values[valuesOffset++] = byte2 | (byte3 << 8);
-        values[valuesOffset++] = byte4 | (byte5 << 8);
-        values[valuesOffset++] = byte6 | (byte7 << 8);
-      }
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = block & 65535L;
-        values[valuesOffset++] = (block >>> 16) & 65535L;
-        values[valuesOffset++] = (block >>> 32) & 65535L;
-        values[valuesOffset++] = block >>> 48;
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 | (byte1 << 8);
-        values[valuesOffset++] = byte2 | (byte3 << 8);
-        values[valuesOffset++] = byte4 | (byte5 << 8);
-        values[valuesOffset++] = byte6 | (byte7 << 8);
-      }
-    }
-
-}
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock2.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock2.java
index 1e1326ad..e69de29b 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock2.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock2.java
@@ -1,209 +0,0 @@
-// This file has been automatically generated, DO NOT EDIT
-
-package org.apache.lucene.util.packed;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Efficient sequential read/write of packed integers.
- */
-final class BulkOperationPackedSingleBlock2 extends BulkOperationPackedSingleBlock {
-
-    public BulkOperationPackedSingleBlock2() {
-      super(2);
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = (int) (block & 3L);
-        values[valuesOffset++] = (int) ((block >>> 2) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 4) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 6) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 8) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 10) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 12) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 14) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 16) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 18) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 20) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 22) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 24) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 26) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 28) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 30) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 32) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 34) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 36) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 38) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 40) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 42) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 44) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 46) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 48) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 50) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 52) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 54) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 56) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 58) & 3L);
-        values[valuesOffset++] = (int) ((block >>> 60) & 3L);
-        values[valuesOffset++] = (int) (block >>> 62);
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 & 3;
-        values[valuesOffset++] = (byte0 >>> 2) & 3;
-        values[valuesOffset++] = (byte0 >>> 4) & 3;
-        values[valuesOffset++] = byte0 >>> 6;
-        values[valuesOffset++] = byte1 & 3;
-        values[valuesOffset++] = (byte1 >>> 2) & 3;
-        values[valuesOffset++] = (byte1 >>> 4) & 3;
-        values[valuesOffset++] = byte1 >>> 6;
-        values[valuesOffset++] = byte2 & 3;
-        values[valuesOffset++] = (byte2 >>> 2) & 3;
-        values[valuesOffset++] = (byte2 >>> 4) & 3;
-        values[valuesOffset++] = byte2 >>> 6;
-        values[valuesOffset++] = byte3 & 3;
-        values[valuesOffset++] = (byte3 >>> 2) & 3;
-        values[valuesOffset++] = (byte3 >>> 4) & 3;
-        values[valuesOffset++] = byte3 >>> 6;
-        values[valuesOffset++] = byte4 & 3;
-        values[valuesOffset++] = (byte4 >>> 2) & 3;
-        values[valuesOffset++] = (byte4 >>> 4) & 3;
-        values[valuesOffset++] = byte4 >>> 6;
-        values[valuesOffset++] = byte5 & 3;
-        values[valuesOffset++] = (byte5 >>> 2) & 3;
-        values[valuesOffset++] = (byte5 >>> 4) & 3;
-        values[valuesOffset++] = byte5 >>> 6;
-        values[valuesOffset++] = byte6 & 3;
-        values[valuesOffset++] = (byte6 >>> 2) & 3;
-        values[valuesOffset++] = (byte6 >>> 4) & 3;
-        values[valuesOffset++] = byte6 >>> 6;
-        values[valuesOffset++] = byte7 & 3;
-        values[valuesOffset++] = (byte7 >>> 2) & 3;
-        values[valuesOffset++] = (byte7 >>> 4) & 3;
-        values[valuesOffset++] = byte7 >>> 6;
-      }
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = block & 3L;
-        values[valuesOffset++] = (block >>> 2) & 3L;
-        values[valuesOffset++] = (block >>> 4) & 3L;
-        values[valuesOffset++] = (block >>> 6) & 3L;
-        values[valuesOffset++] = (block >>> 8) & 3L;
-        values[valuesOffset++] = (block >>> 10) & 3L;
-        values[valuesOffset++] = (block >>> 12) & 3L;
-        values[valuesOffset++] = (block >>> 14) & 3L;
-        values[valuesOffset++] = (block >>> 16) & 3L;
-        values[valuesOffset++] = (block >>> 18) & 3L;
-        values[valuesOffset++] = (block >>> 20) & 3L;
-        values[valuesOffset++] = (block >>> 22) & 3L;
-        values[valuesOffset++] = (block >>> 24) & 3L;
-        values[valuesOffset++] = (block >>> 26) & 3L;
-        values[valuesOffset++] = (block >>> 28) & 3L;
-        values[valuesOffset++] = (block >>> 30) & 3L;
-        values[valuesOffset++] = (block >>> 32) & 3L;
-        values[valuesOffset++] = (block >>> 34) & 3L;
-        values[valuesOffset++] = (block >>> 36) & 3L;
-        values[valuesOffset++] = (block >>> 38) & 3L;
-        values[valuesOffset++] = (block >>> 40) & 3L;
-        values[valuesOffset++] = (block >>> 42) & 3L;
-        values[valuesOffset++] = (block >>> 44) & 3L;
-        values[valuesOffset++] = (block >>> 46) & 3L;
-        values[valuesOffset++] = (block >>> 48) & 3L;
-        values[valuesOffset++] = (block >>> 50) & 3L;
-        values[valuesOffset++] = (block >>> 52) & 3L;
-        values[valuesOffset++] = (block >>> 54) & 3L;
-        values[valuesOffset++] = (block >>> 56) & 3L;
-        values[valuesOffset++] = (block >>> 58) & 3L;
-        values[valuesOffset++] = (block >>> 60) & 3L;
-        values[valuesOffset++] = block >>> 62;
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 & 3;
-        values[valuesOffset++] = (byte0 >>> 2) & 3;
-        values[valuesOffset++] = (byte0 >>> 4) & 3;
-        values[valuesOffset++] = byte0 >>> 6;
-        values[valuesOffset++] = byte1 & 3;
-        values[valuesOffset++] = (byte1 >>> 2) & 3;
-        values[valuesOffset++] = (byte1 >>> 4) & 3;
-        values[valuesOffset++] = byte1 >>> 6;
-        values[valuesOffset++] = byte2 & 3;
-        values[valuesOffset++] = (byte2 >>> 2) & 3;
-        values[valuesOffset++] = (byte2 >>> 4) & 3;
-        values[valuesOffset++] = byte2 >>> 6;
-        values[valuesOffset++] = byte3 & 3;
-        values[valuesOffset++] = (byte3 >>> 2) & 3;
-        values[valuesOffset++] = (byte3 >>> 4) & 3;
-        values[valuesOffset++] = byte3 >>> 6;
-        values[valuesOffset++] = byte4 & 3;
-        values[valuesOffset++] = (byte4 >>> 2) & 3;
-        values[valuesOffset++] = (byte4 >>> 4) & 3;
-        values[valuesOffset++] = byte4 >>> 6;
-        values[valuesOffset++] = byte5 & 3;
-        values[valuesOffset++] = (byte5 >>> 2) & 3;
-        values[valuesOffset++] = (byte5 >>> 4) & 3;
-        values[valuesOffset++] = byte5 >>> 6;
-        values[valuesOffset++] = byte6 & 3;
-        values[valuesOffset++] = (byte6 >>> 2) & 3;
-        values[valuesOffset++] = (byte6 >>> 4) & 3;
-        values[valuesOffset++] = byte6 >>> 6;
-        values[valuesOffset++] = byte7 & 3;
-        values[valuesOffset++] = (byte7 >>> 2) & 3;
-        values[valuesOffset++] = (byte7 >>> 4) & 3;
-        values[valuesOffset++] = byte7 >>> 6;
-      }
-    }
-
-}
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock21.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock21.java
index e1f80594..e69de29b 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock21.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock21.java
@@ -1,93 +0,0 @@
-// This file has been automatically generated, DO NOT EDIT
-
-package org.apache.lucene.util.packed;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Efficient sequential read/write of packed integers.
- */
-final class BulkOperationPackedSingleBlock21 extends BulkOperationPackedSingleBlock {
-
-    public BulkOperationPackedSingleBlock21() {
-      super(21);
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = (int) (block & 2097151L);
-        values[valuesOffset++] = (int) ((block >>> 21) & 2097151L);
-        values[valuesOffset++] = (int) (block >>> 42);
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 | (byte1 << 8) | ((byte2 & 31) << 16);
-        values[valuesOffset++] = (byte2 >>> 5) | (byte3 << 3) | (byte4 << 11) | ((byte5 & 3) << 19);
-        values[valuesOffset++] = (byte5 >>> 2) | (byte6 << 6) | ((byte7 & 127) << 14);
-      }
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = block & 2097151L;
-        values[valuesOffset++] = (block >>> 21) & 2097151L;
-        values[valuesOffset++] = block >>> 42;
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 | (byte1 << 8) | ((byte2 & 31) << 16);
-        values[valuesOffset++] = (byte2 >>> 5) | (byte3 << 3) | (byte4 << 11) | ((byte5 & 3) << 19);
-        values[valuesOffset++] = (byte5 >>> 2) | (byte6 << 6) | ((byte7 & 127) << 14);
-      }
-    }
-
-}
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock3.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock3.java
index 3d37957f..e69de29b 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock3.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock3.java
@@ -1,165 +0,0 @@
-// This file has been automatically generated, DO NOT EDIT
-
-package org.apache.lucene.util.packed;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Efficient sequential read/write of packed integers.
- */
-final class BulkOperationPackedSingleBlock3 extends BulkOperationPackedSingleBlock {
-
-    public BulkOperationPackedSingleBlock3() {
-      super(3);
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = (int) (block & 7L);
-        values[valuesOffset++] = (int) ((block >>> 3) & 7L);
-        values[valuesOffset++] = (int) ((block >>> 6) & 7L);
-        values[valuesOffset++] = (int) ((block >>> 9) & 7L);
-        values[valuesOffset++] = (int) ((block >>> 12) & 7L);
-        values[valuesOffset++] = (int) ((block >>> 15) & 7L);
-        values[valuesOffset++] = (int) ((block >>> 18) & 7L);
-        values[valuesOffset++] = (int) ((block >>> 21) & 7L);
-        values[valuesOffset++] = (int) ((block >>> 24) & 7L);
-        values[valuesOffset++] = (int) ((block >>> 27) & 7L);
-        values[valuesOffset++] = (int) ((block >>> 30) & 7L);
-        values[valuesOffset++] = (int) ((block >>> 33) & 7L);
-        values[valuesOffset++] = (int) ((block >>> 36) & 7L);
-        values[valuesOffset++] = (int) ((block >>> 39) & 7L);
-        values[valuesOffset++] = (int) ((block >>> 42) & 7L);
-        values[valuesOffset++] = (int) ((block >>> 45) & 7L);
-        values[valuesOffset++] = (int) ((block >>> 48) & 7L);
-        values[valuesOffset++] = (int) ((block >>> 51) & 7L);
-        values[valuesOffset++] = (int) ((block >>> 54) & 7L);
-        values[valuesOffset++] = (int) ((block >>> 57) & 7L);
-        values[valuesOffset++] = (int) (block >>> 60);
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 & 7;
-        values[valuesOffset++] = (byte0 >>> 3) & 7;
-        values[valuesOffset++] = (byte0 >>> 6) | ((byte1 & 1) << 2);
-        values[valuesOffset++] = (byte1 >>> 1) & 7;
-        values[valuesOffset++] = (byte1 >>> 4) & 7;
-        values[valuesOffset++] = (byte1 >>> 7) | ((byte2 & 3) << 1);
-        values[valuesOffset++] = (byte2 >>> 2) & 7;
-        values[valuesOffset++] = byte2 >>> 5;
-        values[valuesOffset++] = byte3 & 7;
-        values[valuesOffset++] = (byte3 >>> 3) & 7;
-        values[valuesOffset++] = (byte3 >>> 6) | ((byte4 & 1) << 2);
-        values[valuesOffset++] = (byte4 >>> 1) & 7;
-        values[valuesOffset++] = (byte4 >>> 4) & 7;
-        values[valuesOffset++] = (byte4 >>> 7) | ((byte5 & 3) << 1);
-        values[valuesOffset++] = (byte5 >>> 2) & 7;
-        values[valuesOffset++] = byte5 >>> 5;
-        values[valuesOffset++] = byte6 & 7;
-        values[valuesOffset++] = (byte6 >>> 3) & 7;
-        values[valuesOffset++] = (byte6 >>> 6) | ((byte7 & 1) << 2);
-        values[valuesOffset++] = (byte7 >>> 1) & 7;
-        values[valuesOffset++] = (byte7 >>> 4) & 7;
-      }
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = block & 7L;
-        values[valuesOffset++] = (block >>> 3) & 7L;
-        values[valuesOffset++] = (block >>> 6) & 7L;
-        values[valuesOffset++] = (block >>> 9) & 7L;
-        values[valuesOffset++] = (block >>> 12) & 7L;
-        values[valuesOffset++] = (block >>> 15) & 7L;
-        values[valuesOffset++] = (block >>> 18) & 7L;
-        values[valuesOffset++] = (block >>> 21) & 7L;
-        values[valuesOffset++] = (block >>> 24) & 7L;
-        values[valuesOffset++] = (block >>> 27) & 7L;
-        values[valuesOffset++] = (block >>> 30) & 7L;
-        values[valuesOffset++] = (block >>> 33) & 7L;
-        values[valuesOffset++] = (block >>> 36) & 7L;
-        values[valuesOffset++] = (block >>> 39) & 7L;
-        values[valuesOffset++] = (block >>> 42) & 7L;
-        values[valuesOffset++] = (block >>> 45) & 7L;
-        values[valuesOffset++] = (block >>> 48) & 7L;
-        values[valuesOffset++] = (block >>> 51) & 7L;
-        values[valuesOffset++] = (block >>> 54) & 7L;
-        values[valuesOffset++] = (block >>> 57) & 7L;
-        values[valuesOffset++] = block >>> 60;
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 & 7;
-        values[valuesOffset++] = (byte0 >>> 3) & 7;
-        values[valuesOffset++] = (byte0 >>> 6) | ((byte1 & 1) << 2);
-        values[valuesOffset++] = (byte1 >>> 1) & 7;
-        values[valuesOffset++] = (byte1 >>> 4) & 7;
-        values[valuesOffset++] = (byte1 >>> 7) | ((byte2 & 3) << 1);
-        values[valuesOffset++] = (byte2 >>> 2) & 7;
-        values[valuesOffset++] = byte2 >>> 5;
-        values[valuesOffset++] = byte3 & 7;
-        values[valuesOffset++] = (byte3 >>> 3) & 7;
-        values[valuesOffset++] = (byte3 >>> 6) | ((byte4 & 1) << 2);
-        values[valuesOffset++] = (byte4 >>> 1) & 7;
-        values[valuesOffset++] = (byte4 >>> 4) & 7;
-        values[valuesOffset++] = (byte4 >>> 7) | ((byte5 & 3) << 1);
-        values[valuesOffset++] = (byte5 >>> 2) & 7;
-        values[valuesOffset++] = byte5 >>> 5;
-        values[valuesOffset++] = byte6 & 7;
-        values[valuesOffset++] = (byte6 >>> 3) & 7;
-        values[valuesOffset++] = (byte6 >>> 6) | ((byte7 & 1) << 2);
-        values[valuesOffset++] = (byte7 >>> 1) & 7;
-        values[valuesOffset++] = (byte7 >>> 4) & 7;
-      }
-    }
-
-}
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock4.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock4.java
index e0816fe7..e69de29b 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock4.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock4.java
@@ -1,145 +0,0 @@
-// This file has been automatically generated, DO NOT EDIT
-
-package org.apache.lucene.util.packed;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Efficient sequential read/write of packed integers.
- */
-final class BulkOperationPackedSingleBlock4 extends BulkOperationPackedSingleBlock {
-
-    public BulkOperationPackedSingleBlock4() {
-      super(4);
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = (int) (block & 15L);
-        values[valuesOffset++] = (int) ((block >>> 4) & 15L);
-        values[valuesOffset++] = (int) ((block >>> 8) & 15L);
-        values[valuesOffset++] = (int) ((block >>> 12) & 15L);
-        values[valuesOffset++] = (int) ((block >>> 16) & 15L);
-        values[valuesOffset++] = (int) ((block >>> 20) & 15L);
-        values[valuesOffset++] = (int) ((block >>> 24) & 15L);
-        values[valuesOffset++] = (int) ((block >>> 28) & 15L);
-        values[valuesOffset++] = (int) ((block >>> 32) & 15L);
-        values[valuesOffset++] = (int) ((block >>> 36) & 15L);
-        values[valuesOffset++] = (int) ((block >>> 40) & 15L);
-        values[valuesOffset++] = (int) ((block >>> 44) & 15L);
-        values[valuesOffset++] = (int) ((block >>> 48) & 15L);
-        values[valuesOffset++] = (int) ((block >>> 52) & 15L);
-        values[valuesOffset++] = (int) ((block >>> 56) & 15L);
-        values[valuesOffset++] = (int) (block >>> 60);
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 & 15;
-        values[valuesOffset++] = byte0 >>> 4;
-        values[valuesOffset++] = byte1 & 15;
-        values[valuesOffset++] = byte1 >>> 4;
-        values[valuesOffset++] = byte2 & 15;
-        values[valuesOffset++] = byte2 >>> 4;
-        values[valuesOffset++] = byte3 & 15;
-        values[valuesOffset++] = byte3 >>> 4;
-        values[valuesOffset++] = byte4 & 15;
-        values[valuesOffset++] = byte4 >>> 4;
-        values[valuesOffset++] = byte5 & 15;
-        values[valuesOffset++] = byte5 >>> 4;
-        values[valuesOffset++] = byte6 & 15;
-        values[valuesOffset++] = byte6 >>> 4;
-        values[valuesOffset++] = byte7 & 15;
-        values[valuesOffset++] = byte7 >>> 4;
-      }
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = block & 15L;
-        values[valuesOffset++] = (block >>> 4) & 15L;
-        values[valuesOffset++] = (block >>> 8) & 15L;
-        values[valuesOffset++] = (block >>> 12) & 15L;
-        values[valuesOffset++] = (block >>> 16) & 15L;
-        values[valuesOffset++] = (block >>> 20) & 15L;
-        values[valuesOffset++] = (block >>> 24) & 15L;
-        values[valuesOffset++] = (block >>> 28) & 15L;
-        values[valuesOffset++] = (block >>> 32) & 15L;
-        values[valuesOffset++] = (block >>> 36) & 15L;
-        values[valuesOffset++] = (block >>> 40) & 15L;
-        values[valuesOffset++] = (block >>> 44) & 15L;
-        values[valuesOffset++] = (block >>> 48) & 15L;
-        values[valuesOffset++] = (block >>> 52) & 15L;
-        values[valuesOffset++] = (block >>> 56) & 15L;
-        values[valuesOffset++] = block >>> 60;
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 & 15;
-        values[valuesOffset++] = byte0 >>> 4;
-        values[valuesOffset++] = byte1 & 15;
-        values[valuesOffset++] = byte1 >>> 4;
-        values[valuesOffset++] = byte2 & 15;
-        values[valuesOffset++] = byte2 >>> 4;
-        values[valuesOffset++] = byte3 & 15;
-        values[valuesOffset++] = byte3 >>> 4;
-        values[valuesOffset++] = byte4 & 15;
-        values[valuesOffset++] = byte4 >>> 4;
-        values[valuesOffset++] = byte5 & 15;
-        values[valuesOffset++] = byte5 >>> 4;
-        values[valuesOffset++] = byte6 & 15;
-        values[valuesOffset++] = byte6 >>> 4;
-        values[valuesOffset++] = byte7 & 15;
-        values[valuesOffset++] = byte7 >>> 4;
-      }
-    }
-
-}
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock5.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock5.java
index be3b9b1e..e69de29b 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock5.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock5.java
@@ -1,129 +0,0 @@
-// This file has been automatically generated, DO NOT EDIT
-
-package org.apache.lucene.util.packed;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Efficient sequential read/write of packed integers.
- */
-final class BulkOperationPackedSingleBlock5 extends BulkOperationPackedSingleBlock {
-
-    public BulkOperationPackedSingleBlock5() {
-      super(5);
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = (int) (block & 31L);
-        values[valuesOffset++] = (int) ((block >>> 5) & 31L);
-        values[valuesOffset++] = (int) ((block >>> 10) & 31L);
-        values[valuesOffset++] = (int) ((block >>> 15) & 31L);
-        values[valuesOffset++] = (int) ((block >>> 20) & 31L);
-        values[valuesOffset++] = (int) ((block >>> 25) & 31L);
-        values[valuesOffset++] = (int) ((block >>> 30) & 31L);
-        values[valuesOffset++] = (int) ((block >>> 35) & 31L);
-        values[valuesOffset++] = (int) ((block >>> 40) & 31L);
-        values[valuesOffset++] = (int) ((block >>> 45) & 31L);
-        values[valuesOffset++] = (int) ((block >>> 50) & 31L);
-        values[valuesOffset++] = (int) (block >>> 55);
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 & 31;
-        values[valuesOffset++] = (byte0 >>> 5) | ((byte1 & 3) << 3);
-        values[valuesOffset++] = (byte1 >>> 2) & 31;
-        values[valuesOffset++] = (byte1 >>> 7) | ((byte2 & 15) << 1);
-        values[valuesOffset++] = (byte2 >>> 4) | ((byte3 & 1) << 4);
-        values[valuesOffset++] = (byte3 >>> 1) & 31;
-        values[valuesOffset++] = (byte3 >>> 6) | ((byte4 & 7) << 2);
-        values[valuesOffset++] = byte4 >>> 3;
-        values[valuesOffset++] = byte5 & 31;
-        values[valuesOffset++] = (byte5 >>> 5) | ((byte6 & 3) << 3);
-        values[valuesOffset++] = (byte6 >>> 2) & 31;
-        values[valuesOffset++] = (byte6 >>> 7) | ((byte7 & 15) << 1);
-      }
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = block & 31L;
-        values[valuesOffset++] = (block >>> 5) & 31L;
-        values[valuesOffset++] = (block >>> 10) & 31L;
-        values[valuesOffset++] = (block >>> 15) & 31L;
-        values[valuesOffset++] = (block >>> 20) & 31L;
-        values[valuesOffset++] = (block >>> 25) & 31L;
-        values[valuesOffset++] = (block >>> 30) & 31L;
-        values[valuesOffset++] = (block >>> 35) & 31L;
-        values[valuesOffset++] = (block >>> 40) & 31L;
-        values[valuesOffset++] = (block >>> 45) & 31L;
-        values[valuesOffset++] = (block >>> 50) & 31L;
-        values[valuesOffset++] = block >>> 55;
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 & 31;
-        values[valuesOffset++] = (byte0 >>> 5) | ((byte1 & 3) << 3);
-        values[valuesOffset++] = (byte1 >>> 2) & 31;
-        values[valuesOffset++] = (byte1 >>> 7) | ((byte2 & 15) << 1);
-        values[valuesOffset++] = (byte2 >>> 4) | ((byte3 & 1) << 4);
-        values[valuesOffset++] = (byte3 >>> 1) & 31;
-        values[valuesOffset++] = (byte3 >>> 6) | ((byte4 & 7) << 2);
-        values[valuesOffset++] = byte4 >>> 3;
-        values[valuesOffset++] = byte5 & 31;
-        values[valuesOffset++] = (byte5 >>> 5) | ((byte6 & 3) << 3);
-        values[valuesOffset++] = (byte6 >>> 2) & 31;
-        values[valuesOffset++] = (byte6 >>> 7) | ((byte7 & 15) << 1);
-      }
-    }
-
-}
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock6.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock6.java
index 53c7a755..e69de29b 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock6.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock6.java
@@ -1,121 +0,0 @@
-// This file has been automatically generated, DO NOT EDIT
-
-package org.apache.lucene.util.packed;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Efficient sequential read/write of packed integers.
- */
-final class BulkOperationPackedSingleBlock6 extends BulkOperationPackedSingleBlock {
-
-    public BulkOperationPackedSingleBlock6() {
-      super(6);
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = (int) (block & 63L);
-        values[valuesOffset++] = (int) ((block >>> 6) & 63L);
-        values[valuesOffset++] = (int) ((block >>> 12) & 63L);
-        values[valuesOffset++] = (int) ((block >>> 18) & 63L);
-        values[valuesOffset++] = (int) ((block >>> 24) & 63L);
-        values[valuesOffset++] = (int) ((block >>> 30) & 63L);
-        values[valuesOffset++] = (int) ((block >>> 36) & 63L);
-        values[valuesOffset++] = (int) ((block >>> 42) & 63L);
-        values[valuesOffset++] = (int) ((block >>> 48) & 63L);
-        values[valuesOffset++] = (int) (block >>> 54);
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 & 63;
-        values[valuesOffset++] = (byte0 >>> 6) | ((byte1 & 15) << 2);
-        values[valuesOffset++] = (byte1 >>> 4) | ((byte2 & 3) << 4);
-        values[valuesOffset++] = byte2 >>> 2;
-        values[valuesOffset++] = byte3 & 63;
-        values[valuesOffset++] = (byte3 >>> 6) | ((byte4 & 15) << 2);
-        values[valuesOffset++] = (byte4 >>> 4) | ((byte5 & 3) << 4);
-        values[valuesOffset++] = byte5 >>> 2;
-        values[valuesOffset++] = byte6 & 63;
-        values[valuesOffset++] = (byte6 >>> 6) | ((byte7 & 15) << 2);
-      }
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = block & 63L;
-        values[valuesOffset++] = (block >>> 6) & 63L;
-        values[valuesOffset++] = (block >>> 12) & 63L;
-        values[valuesOffset++] = (block >>> 18) & 63L;
-        values[valuesOffset++] = (block >>> 24) & 63L;
-        values[valuesOffset++] = (block >>> 30) & 63L;
-        values[valuesOffset++] = (block >>> 36) & 63L;
-        values[valuesOffset++] = (block >>> 42) & 63L;
-        values[valuesOffset++] = (block >>> 48) & 63L;
-        values[valuesOffset++] = block >>> 54;
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 & 63;
-        values[valuesOffset++] = (byte0 >>> 6) | ((byte1 & 15) << 2);
-        values[valuesOffset++] = (byte1 >>> 4) | ((byte2 & 3) << 4);
-        values[valuesOffset++] = byte2 >>> 2;
-        values[valuesOffset++] = byte3 & 63;
-        values[valuesOffset++] = (byte3 >>> 6) | ((byte4 & 15) << 2);
-        values[valuesOffset++] = (byte4 >>> 4) | ((byte5 & 3) << 4);
-        values[valuesOffset++] = byte5 >>> 2;
-        values[valuesOffset++] = byte6 & 63;
-        values[valuesOffset++] = (byte6 >>> 6) | ((byte7 & 15) << 2);
-      }
-    }
-
-}
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock7.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock7.java
index 84a2a59c..e69de29b 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock7.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock7.java
@@ -1,117 +0,0 @@
-// This file has been automatically generated, DO NOT EDIT
-
-package org.apache.lucene.util.packed;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Efficient sequential read/write of packed integers.
- */
-final class BulkOperationPackedSingleBlock7 extends BulkOperationPackedSingleBlock {
-
-    public BulkOperationPackedSingleBlock7() {
-      super(7);
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = (int) (block & 127L);
-        values[valuesOffset++] = (int) ((block >>> 7) & 127L);
-        values[valuesOffset++] = (int) ((block >>> 14) & 127L);
-        values[valuesOffset++] = (int) ((block >>> 21) & 127L);
-        values[valuesOffset++] = (int) ((block >>> 28) & 127L);
-        values[valuesOffset++] = (int) ((block >>> 35) & 127L);
-        values[valuesOffset++] = (int) ((block >>> 42) & 127L);
-        values[valuesOffset++] = (int) ((block >>> 49) & 127L);
-        values[valuesOffset++] = (int) (block >>> 56);
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 & 127;
-        values[valuesOffset++] = (byte0 >>> 7) | ((byte1 & 63) << 1);
-        values[valuesOffset++] = (byte1 >>> 6) | ((byte2 & 31) << 2);
-        values[valuesOffset++] = (byte2 >>> 5) | ((byte3 & 15) << 3);
-        values[valuesOffset++] = (byte3 >>> 4) | ((byte4 & 7) << 4);
-        values[valuesOffset++] = (byte4 >>> 3) | ((byte5 & 3) << 5);
-        values[valuesOffset++] = (byte5 >>> 2) | ((byte6 & 1) << 6);
-        values[valuesOffset++] = byte6 >>> 1;
-        values[valuesOffset++] = byte7 & 127;
-      }
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = block & 127L;
-        values[valuesOffset++] = (block >>> 7) & 127L;
-        values[valuesOffset++] = (block >>> 14) & 127L;
-        values[valuesOffset++] = (block >>> 21) & 127L;
-        values[valuesOffset++] = (block >>> 28) & 127L;
-        values[valuesOffset++] = (block >>> 35) & 127L;
-        values[valuesOffset++] = (block >>> 42) & 127L;
-        values[valuesOffset++] = (block >>> 49) & 127L;
-        values[valuesOffset++] = block >>> 56;
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 & 127;
-        values[valuesOffset++] = (byte0 >>> 7) | ((byte1 & 63) << 1);
-        values[valuesOffset++] = (byte1 >>> 6) | ((byte2 & 31) << 2);
-        values[valuesOffset++] = (byte2 >>> 5) | ((byte3 & 15) << 3);
-        values[valuesOffset++] = (byte3 >>> 4) | ((byte4 & 7) << 4);
-        values[valuesOffset++] = (byte4 >>> 3) | ((byte5 & 3) << 5);
-        values[valuesOffset++] = (byte5 >>> 2) | ((byte6 & 1) << 6);
-        values[valuesOffset++] = byte6 >>> 1;
-        values[valuesOffset++] = byte7 & 127;
-      }
-    }
-
-}
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock8.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock8.java
index d95b3fcc..e69de29b 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock8.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock8.java
@@ -1,113 +0,0 @@
-// This file has been automatically generated, DO NOT EDIT
-
-package org.apache.lucene.util.packed;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Efficient sequential read/write of packed integers.
- */
-final class BulkOperationPackedSingleBlock8 extends BulkOperationPackedSingleBlock {
-
-    public BulkOperationPackedSingleBlock8() {
-      super(8);
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = (int) (block & 255L);
-        values[valuesOffset++] = (int) ((block >>> 8) & 255L);
-        values[valuesOffset++] = (int) ((block >>> 16) & 255L);
-        values[valuesOffset++] = (int) ((block >>> 24) & 255L);
-        values[valuesOffset++] = (int) ((block >>> 32) & 255L);
-        values[valuesOffset++] = (int) ((block >>> 40) & 255L);
-        values[valuesOffset++] = (int) ((block >>> 48) & 255L);
-        values[valuesOffset++] = (int) (block >>> 56);
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0;
-        values[valuesOffset++] = byte1;
-        values[valuesOffset++] = byte2;
-        values[valuesOffset++] = byte3;
-        values[valuesOffset++] = byte4;
-        values[valuesOffset++] = byte5;
-        values[valuesOffset++] = byte6;
-        values[valuesOffset++] = byte7;
-      }
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = block & 255L;
-        values[valuesOffset++] = (block >>> 8) & 255L;
-        values[valuesOffset++] = (block >>> 16) & 255L;
-        values[valuesOffset++] = (block >>> 24) & 255L;
-        values[valuesOffset++] = (block >>> 32) & 255L;
-        values[valuesOffset++] = (block >>> 40) & 255L;
-        values[valuesOffset++] = (block >>> 48) & 255L;
-        values[valuesOffset++] = block >>> 56;
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0;
-        values[valuesOffset++] = byte1;
-        values[valuesOffset++] = byte2;
-        values[valuesOffset++] = byte3;
-        values[valuesOffset++] = byte4;
-        values[valuesOffset++] = byte5;
-        values[valuesOffset++] = byte6;
-        values[valuesOffset++] = byte7;
-      }
-    }
-
-}
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock9.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock9.java
index 72834288..e69de29b 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock9.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPackedSingleBlock9.java
@@ -1,109 +0,0 @@
-// This file has been automatically generated, DO NOT EDIT
-
-package org.apache.lucene.util.packed;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/**
- * Efficient sequential read/write of packed integers.
- */
-final class BulkOperationPackedSingleBlock9 extends BulkOperationPackedSingleBlock {
-
-    public BulkOperationPackedSingleBlock9() {
-      super(9);
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = (int) (block & 511L);
-        values[valuesOffset++] = (int) ((block >>> 9) & 511L);
-        values[valuesOffset++] = (int) ((block >>> 18) & 511L);
-        values[valuesOffset++] = (int) ((block >>> 27) & 511L);
-        values[valuesOffset++] = (int) ((block >>> 36) & 511L);
-        values[valuesOffset++] = (int) ((block >>> 45) & 511L);
-        values[valuesOffset++] = (int) (block >>> 54);
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, int[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 | ((byte1 & 1) << 8);
-        values[valuesOffset++] = (byte1 >>> 1) | ((byte2 & 3) << 7);
-        values[valuesOffset++] = (byte2 >>> 2) | ((byte3 & 7) << 6);
-        values[valuesOffset++] = (byte3 >>> 3) | ((byte4 & 15) << 5);
-        values[valuesOffset++] = (byte4 >>> 4) | ((byte5 & 31) << 4);
-        values[valuesOffset++] = (byte5 >>> 5) | ((byte6 & 63) << 3);
-        values[valuesOffset++] = (byte6 >>> 6) | ((byte7 & 127) << 2);
-      }
-    }
-
-    @Override
-    public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final long block = blocks[blocksOffset++];
-        values[valuesOffset++] = block & 511L;
-        values[valuesOffset++] = (block >>> 9) & 511L;
-        values[valuesOffset++] = (block >>> 18) & 511L;
-        values[valuesOffset++] = (block >>> 27) & 511L;
-        values[valuesOffset++] = (block >>> 36) & 511L;
-        values[valuesOffset++] = (block >>> 45) & 511L;
-        values[valuesOffset++] = block >>> 54;
-      }
-    }
-
-    @Override
-    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
-      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
-      assert valuesOffset + iterations * valueCount() <= values.length;
-      for (int i = 0; i < iterations; ++i) {
-        final int byte7 = blocks[blocksOffset++] & 0xFF;
-        final int byte6 = blocks[blocksOffset++] & 0xFF;
-        final int byte5 = blocks[blocksOffset++] & 0xFF;
-        final int byte4 = blocks[blocksOffset++] & 0xFF;
-        final int byte3 = blocks[blocksOffset++] & 0xFF;
-        final int byte2 = blocks[blocksOffset++] & 0xFF;
-        final int byte1 = blocks[blocksOffset++] & 0xFF;
-        final int byte0 = blocks[blocksOffset++] & 0xFF;
-        values[valuesOffset++] = byte0 | ((byte1 & 1) << 8);
-        values[valuesOffset++] = (byte1 >>> 1) | ((byte2 & 3) << 7);
-        values[valuesOffset++] = (byte2 >>> 2) | ((byte3 & 7) << 6);
-        values[valuesOffset++] = (byte3 >>> 3) | ((byte4 & 15) << 5);
-        values[valuesOffset++] = (byte4 >>> 4) | ((byte5 & 31) << 4);
-        values[valuesOffset++] = (byte5 >>> 5) | ((byte6 & 63) << 3);
-        values[valuesOffset++] = (byte6 >>> 6) | ((byte7 & 127) << 2);
-      }
-    }
-
-}
