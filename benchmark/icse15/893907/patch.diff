diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/CassandraServer.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/CassandraServer.java
index 3918b4c0..bedb0ce3 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/CassandraServer.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/CassandraServer.java
@@ -169,37 +169,36 @@ public void start() throws IOException
     private Map<String, List<ColumnOrSuperColumn>> getSlice(List<ReadCommand> commands, int consistency_level)
     throws InvalidRequestException, UnavailableException, TimedOutException
     {
-        Map<String, ColumnFamily> cfamilies = readColumnFamily(commands, consistency_level);
+        Map<String, ColumnFamily> columnFamilies = readColumnFamily(commands, consistency_level);
         Map<String, List<ColumnOrSuperColumn>> columnFamiliesMap = new HashMap<String, List<ColumnOrSuperColumn>>();
         for (ReadCommand command: commands)
         {
-            ColumnFamily cfamily = cfamilies.get(command.key);
+            ColumnFamily cf = columnFamilies.get(command.key);
             boolean reverseOrder = command instanceof SliceFromReadCommand && ((SliceFromReadCommand)command).reversed;
+            List<ColumnOrSuperColumn> thriftifiedColumns = thriftifyColumnFamily(cf, command.queryPath.superColumnName != null, reverseOrder);
+            columnFamiliesMap.put(command.key, thriftifiedColumns);
+        }
 
-            if (cfamily == null || cfamily.getColumnsMap().size() == 0)
-            {
-                columnFamiliesMap.put(command.key, EMPTY_COLUMNS);
-                continue;
+        return columnFamiliesMap;
             }
-            if (command.queryPath.superColumnName != null)
+
+    private List<ColumnOrSuperColumn> thriftifyColumnFamily(ColumnFamily cf, boolean subcolumnsOnly, boolean reverseOrder)
+    {
+        if (cf == null || cf.getColumnsMap().size() == 0)
+            return EMPTY_COLUMNS;
+        if (subcolumnsOnly)
             {
-                IColumn column = cfamily.getColumnsMap().values().iterator().next();
+            IColumn column = cf.getColumnsMap().values().iterator().next();
                 Collection<IColumn> subcolumns = column.getSubColumns();
                 if (subcolumns == null || subcolumns.isEmpty())
-                {
-                    columnFamiliesMap.put(command.key, EMPTY_COLUMNS);
-                    continue;
-                }
-                columnFamiliesMap.put(command.key, thriftifyColumns(subcolumns, reverseOrder));
-                continue;
-            }
-            if (cfamily.isSuper())
-                columnFamiliesMap.put(command.key, thriftifySuperColumns(cfamily.getSortedColumns(), reverseOrder));
+                return EMPTY_COLUMNS;
             else
-                columnFamiliesMap.put(command.key, thriftifyColumns(cfamily.getSortedColumns(), reverseOrder));
+                return thriftifyColumns(subcolumns, reverseOrder);
         }
-
-        return columnFamiliesMap;
+        if (cf.isSuper())
+            return thriftifySuperColumns(cf.getSortedColumns(), reverseOrder);
+        else
+            return thriftifyColumns(cf.getSortedColumns(), reverseOrder);
     }
 
     public List<ColumnOrSuperColumn> get_slice(String keyspace, String key, ColumnParent column_parent, SlicePredicate predicate, int consistency_level)
@@ -566,7 +565,7 @@ else if (propertyName.equals("version"))
             throw new InvalidRequestException("maxRows must be positive");
         }
 
-        List<Pair<String,Collection<IColumn>>> rows;
+        List<Pair<String, ColumnFamily>> rows;
         try
         {
             DecoratedKey startKey = StorageService.getPartitioner().decorateKey(start_key);
@@ -581,14 +580,9 @@ else if (propertyName.equals("version"))
 
         List<KeySlice> keySlices = new ArrayList<KeySlice>(rows.size());
         boolean reversed = predicate.slice_range != null && predicate.slice_range.reversed;
-        for (Pair<String, Collection<IColumn>> row : rows)
+        for (Pair<String, ColumnFamily> row : rows)
         {
-            Collection<IColumn> columns = row.right;
-            List<ColumnOrSuperColumn> thriftifiedColumns;
-            if (DatabaseDescriptor.getColumnFamilyType(keyspace, column_parent.column_family).equals("Standard"))
-                thriftifiedColumns = thriftifyColumns(columns, reversed);
-            else
-                thriftifiedColumns = thriftifySuperColumns(columns, reversed);
+            List<ColumnOrSuperColumn> thriftifiedColumns = thriftifyColumnFamily(row.right, column_parent.super_column != null, reversed);
             keySlices.add(new KeySlice(row.left, thriftifiedColumns));
         }
 
diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/StorageProxy.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/StorageProxy.java
index 3ba7e24f..f9f47916 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -512,7 +512,7 @@ else if (consistency_level == ConsistencyLevel.ALL)
         return rows;
     }
 
-    static List<Pair<String, Collection<IColumn>>> getRangeSlice(RangeSliceCommand command, int consistency_level) throws IOException, UnavailableException, TimedOutException
+    static List<Pair<String, ColumnFamily>> getRangeSlice(RangeSliceCommand command, int consistency_level) throws IOException, UnavailableException, TimedOutException
     {
         long startTime = System.currentTimeMillis();
         TokenMetadata tokenMetadata = StorageService.instance().getTokenMetadata();
@@ -577,16 +577,15 @@ else if (consistency_level == ConsistencyLevel.ALL)
         }
         while (!endPoint.equals(startEndpoint));
 
-        List<Pair<String, Collection<IColumn>>> results = new ArrayList<Pair<String, Collection<IColumn>>>(rows.size());
+        List<Pair<String, ColumnFamily>> results = new ArrayList<Pair<String, ColumnFamily>>(rows.size());
         for (Map.Entry<String, ColumnFamily> entry : rows.entrySet())
         {
             ColumnFamily cf = entry.getValue();
-            Collection<IColumn> columns = (cf == null) ? Collections.<IColumn>emptyList() : cf.getSortedColumns();
-            results.add(new Pair<String, Collection<IColumn>>(entry.getKey(), columns));
+            results.add(new Pair<String, ColumnFamily>(entry.getKey(), cf));
         }
-        Collections.sort(results, new Comparator<Pair<String, Collection<IColumn>>>()
+        Collections.sort(results, new Comparator<Pair<String, ColumnFamily>>()
         {
-            public int compare(Pair<String, Collection<IColumn>> o1, Pair<String, Collection<IColumn>> o2)
+            public int compare(Pair<String, ColumnFamily> o1, Pair<String, ColumnFamily> o2)
             {
                 return keyComparator.compare(o1.left, o2.left);
             }
