diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/ZkController.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/ZkController.java
index e402d374..7e67daea 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/ZkController.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/cloud/ZkController.java
@@ -147,6 +147,11 @@ public ZkController(String zkServerAddress, int zkClientTimeout, int zkClientCon
       String localHostContext, final CurrentCoreDescriptorProvider registerOnReconnect) throws InterruptedException,
       TimeoutException, IOException {
  
+    if (localHostContext.contains("/")) {
+      throw new IllegalArgumentException("localHostContext ("
+          + localHostContext + ") should not contain a /");
+    }
+    
     this.zkServerAddress = zkServerAddress;
     this.localHostPort = locaHostPort;
     this.localHostContext = localHostContext;
@@ -445,6 +450,7 @@ public String register(String coreName, final CoreDescriptor desc, boolean recov
     log.info("Attempting to update " + ZkStateReader.CLUSTER_STATE + " version "
         + null);
     CloudState state = CloudState.load(zkClient, zkStateReader.getCloudState().getLiveNodes());
+
     final String shardZkNodeName = getNodeName() + "_" + coreName;
     
     // checkRecovery will have updated the shardId if it already exists...
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/core/SolrCore.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/core/SolrCore.java
index 73e185b3..a998b231 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/core/SolrCore.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/core/SolrCore.java
@@ -474,20 +474,6 @@ private QueryResponseWriter createQueryResponseWriter(String className) {
     return createInstance(className, QueryResponseWriter.class, "Query Response Writer");
   }
   
-  /**
-   * 
-   * @param dataDir
-   * @param schema
-   * @throws SAXException 
-   * @throws IOException 
-   * @throws ParserConfigurationException 
-   * 
-   * @since solr 1.0
-   */
-  public SolrCore(String dataDir, IndexSchema schema) throws ParserConfigurationException, IOException, SAXException {
-    this(null, dataDir, new SolrConfig(), schema, null);
-  }
-  
   /**
    * Creates a new core and register it in the list of cores.
    * If a core with the same name already exists, it will be stopped and replaced by this one.
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java
index ae2fe821..9260fde0 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java
@@ -235,7 +235,8 @@ public void checkDistributed(ResponseBuilder rb) {
     SolrQueryRequest req = rb.req;
     SolrParams params = req.getParams();
 
-    rb.isDistrib = params.getBool("distrib",false);
+    rb.isDistrib = params.getBool("distrib", req.getCore().getCoreDescriptor()
+        .getCoreContainer().isZooKeeperAware());
     String shards = params.get(ShardParams.SHARDS);
 
     // for back compat, a shards param with URLs like localhost:8983/solr will mean that this
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
index 98a03dad..0a618d2b 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
@@ -207,7 +207,8 @@ void checkDistributed(ResponseBuilder rb) {
     SolrQueryRequest req = rb.req;
     SolrParams params = req.getParams();
 
-    rb.isDistrib = params.getBool("distrib",false);
+    rb.isDistrib = params.getBool("distrib", req.getCore().getCoreDescriptor()
+        .getCoreContainer().isZooKeeperAware());
     String shards = params.get(ShardParams.SHARDS);
 
     // for back compat, a shards param with URLs like localhost:8983/solr will mean that this
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java
index 76932561..cec3cf28 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/handler/component/SearchHandler.java
@@ -246,7 +246,7 @@ public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throw
             for (String shard : sreq.actualShards) {
               ModifiableSolrParams params = new ModifiableSolrParams(sreq.params);
               params.remove(ShardParams.SHARDS);      // not a top-level request
-              params.remove("distrib");               // not a top-level request
+              params.set("distrib", "false");               // not a top-level request
               params.remove("indent");
               params.remove(CommonParams.HEADER_ECHO_PARAMS);
               params.set(ShardParams.IS_SHARD, true);  // a sub (shard) request
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java
index 857425db..d0879643 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java
@@ -58,7 +58,6 @@ protected void setDistributedParams(ModifiableSolrParams params) {
 
     if (r.nextBoolean()) {
       // don't set shards, let that be figured out from the cloud state
-      params.set("distrib", "true");
     } else {
       // use shard ids rather than physical locations
       StringBuilder sb = new StringBuilder();
@@ -68,7 +67,6 @@ protected void setDistributedParams(ModifiableSolrParams params) {
         sb.append("shard" + (i + 3));
       }
       params.set("shards", sb.toString());
-      params.set("distrib", "true");
     }
   }
   
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/BasicSolrCloudTest.java b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/BasicSolrCloudTest.java
index ea1b006e..79f79b4f 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/BasicSolrCloudTest.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/BasicSolrCloudTest.java
@@ -199,7 +199,6 @@ private long addUpdateDelete() throws Exception, SolrServerException,
     commit();
     
     ModifiableSolrParams params = new ModifiableSolrParams();
-    params.add("distrib", "true");
     params.add("q", t1 + ":originalcontent");
     QueryResponse results = clients.get(0).query(params);
     assertEquals(1, results.getResults().getNumFound());
@@ -281,13 +280,11 @@ private void testOptimisticUpdate(QueryResponse results) throws Exception {
     commit();
     
     ModifiableSolrParams params = new ModifiableSolrParams();
-    params.add("distrib", "true");
     params.add("q", t1 + ":thenewupdatestuff");
     QueryResponse res = clients.get(0).query(params);
     assertEquals(0, res.getResults().getNumFound());
     
     params = new ModifiableSolrParams();
-    params.add("distrib", "true");
     params.add("q", t1 + ":theupdatestuff");
     res = clients.get(0).query(params);
     assertEquals(1, res.getResults().getNumFound());
@@ -295,7 +292,6 @@ private void testOptimisticUpdate(QueryResponse results) throws Exception {
 
   private QueryResponse query(SolrServer server) throws SolrServerException {
     SolrQuery query = new SolrQuery("*:*");
-    query.setParam("distrib", true);
     return server.query(query);
   }
   
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/BasicZkTest.java b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/BasicZkTest.java
index 697a8e5c..694cf6bf 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/BasicZkTest.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/BasicZkTest.java
@@ -21,7 +21,10 @@
 import org.apache.lucene.index.LogMergePolicy;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.common.params.CommonParams;
+import org.apache.solr.common.params.ModifiableSolrParams;
 import org.apache.solr.core.SolrCore;
+import org.apache.solr.request.LocalSolrQueryRequest;
+import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.update.DirectUpdateHandler2;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
@@ -56,7 +59,7 @@ public void testBasic() throws Exception {
     assertEquals("Mergefactor was not picked up", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);
     
     lrf.args.put(CommonParams.VERSION, "2.2");
-    assertQ("test query on empty index", req("qlkciyopsbgzyvkylsjhchghjrdf"),
+    assertQ("test query on empty index", request("qlkciyopsbgzyvkylsjhchghjrdf"),
         "//result[@numFound='0']");
 
     // test escaping of ";"
@@ -64,29 +67,29 @@ public void testBasic() throws Exception {
     assertU("adding doc#42", adoc("id", "42", "val_s", "aa;bb"));
     assertU("does commit work?", commit());
 
-    assertQ("backslash escaping semicolon", req("id:42 AND val_s:aa\\;bb"),
+    assertQ("backslash escaping semicolon", request("id:42 AND val_s:aa\\;bb"),
         "//*[@numFound='1']", "//int[@name='id'][.='42']");
 
-    assertQ("quote escaping semicolon", req("id:42 AND val_s:\"aa;bb\""),
+    assertQ("quote escaping semicolon", request("id:42 AND val_s:\"aa;bb\""),
         "//*[@numFound='1']", "//int[@name='id'][.='42']");
 
-    assertQ("no escaping semicolon", req("id:42 AND val_s:aa"),
+    assertQ("no escaping semicolon", request("id:42 AND val_s:aa"),
         "//*[@numFound='0']");
 
     assertU(delI("42"));
     assertU(commit());
-    assertQ(req("id:42"), "//*[@numFound='0']");
+    assertQ(request("id:42"), "//*[@numFound='0']");
 
     // test overwrite default of true
 
     assertU(adoc("id", "42", "val_s", "AAA"));
     assertU(adoc("id", "42", "val_s", "BBB"));
     assertU(commit());
-    assertQ(req("id:42"), "//*[@numFound='1']", "//str[.='BBB']");
+    assertQ(request("id:42"), "//*[@numFound='1']", "//str[.='BBB']");
     assertU(adoc("id", "42", "val_s", "CCC"));
     assertU(adoc("id", "42", "val_s", "DDD"));
     assertU(commit());
-    assertQ(req("id:42"), "//*[@numFound='1']", "//str[.='DDD']");
+    assertQ(request("id:42"), "//*[@numFound='1']", "//str[.='DDD']");
 
     // test deletes
     String[] adds = new String[] { add(doc("id", "101"), "overwrite", "true"),
@@ -118,23 +121,23 @@ public void testBasic() throws Exception {
             zkController.getNodeName()));
 
     // test maxint
-    assertQ(req("q", "id:[100 TO 110]", "rows", "2147483647"),
+    assertQ(request("q", "id:[100 TO 110]", "rows", "2147483647"),
         "//*[@numFound='4']");
 
     // test big limit
-    assertQ(req("q", "id:[100 TO 111]", "rows", "1147483647"),
+    assertQ(request("q", "id:[100 TO 111]", "rows", "1147483647"),
         "//*[@numFound='4']");
 
-    assertQ(req("id:[100 TO 110]"), "//*[@numFound='4']");
+    assertQ(request("id:[100 TO 110]"), "//*[@numFound='4']");
     assertU(delI("102"));
     assertU(commit());
-    assertQ(req("id:[100 TO 110]"), "//*[@numFound='3']");
+    assertQ(request("id:[100 TO 110]"), "//*[@numFound='3']");
     assertU(delI("105"));
     assertU(commit());
-    assertQ(req("id:[100 TO 110]"), "//*[@numFound='2']");
+    assertQ(request("id:[100 TO 110]"), "//*[@numFound='2']");
     assertU(delQ("id:[100 TO 110]"));
     assertU(commit());
-    assertQ(req("id:[100 TO 110]"), "//*[@numFound='0']");
+    assertQ(request("id:[100 TO 110]"), "//*[@numFound='0']");
     
    
     
@@ -153,6 +156,15 @@ public void testBasic() throws Exception {
     
   }
   
+  public SolrQueryRequest request(String... q) {
+    LocalSolrQueryRequest req = lrf.makeRequest(q);
+    ModifiableSolrParams params = new ModifiableSolrParams();
+    params.add(req.getParams());
+    params.set("distrib", false);
+    req.setParams(params);
+    return req;
+  }
+  
   @AfterClass
   public static void afterClass() {
 
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.java b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.java
index efb17f5b..db34252a 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest.java
@@ -340,7 +340,6 @@ protected void setDistributedParams(ModifiableSolrParams params) {
 
     if (r.nextBoolean()) {
       // don't set shards, let that be figured out from the cloud state
-      params.set("distrib", "true");
     } else {
       // use shard ids rather than physical locations
       StringBuilder sb = new StringBuilder();
@@ -350,7 +349,6 @@ protected void setDistributedParams(ModifiableSolrParams params) {
         sb.append("shard" + (i+1));
       }
       params.set("shards", sb.toString());
-      params.set("distrib", "true");
     }
   }
   
@@ -496,7 +494,6 @@ private long testUpdateAndDelete() throws Exception, SolrServerException,
     commit();
     
     ModifiableSolrParams params = new ModifiableSolrParams();
-    params.add("distrib", "true");
     params.add("q", t1 + ":originalcontent");
     QueryResponse results = clients.get(0).query(params);
     assertEquals(1, results.getResults().getNumFound());
@@ -611,7 +608,6 @@ private void brindDownShardIndexSomeDocsAndRecover() throws Exception,
     // try adding a doc with CloudSolrServer
     cloudClient.setDefaultCollection(DEFAULT_COLLECTION);
     SolrQuery query = new SolrQuery("*:*");
-    query.add("distrib", "true");
     long numFound1 = cloudClient.query(query).getResults().getNumFound();
     
     SolrInputDocument doc = new SolrInputDocument();
@@ -844,9 +840,10 @@ protected String checkShardConsistency(String shard, boolean verbose) throws Exc
         live = true;
       }
       if (verbose) System.out.println(" live:" + live);
-      boolean active = props.get(ZkStateReader.STATE_PROP).equals(ZkStateReader.ACTIVE);
-      if (verbose) System.out.println(" num:" + num + "\n" + (active ? "recovering" : ""));
       
+      if (verbose) System.out.println(" num:" + num + "\n");
+      
+      boolean active = props.get(ZkStateReader.STATE_PROP).equals(ZkStateReader.ACTIVE);
       if (active && live) {
         if (lastNum > -1 && lastNum != num && failMessage == null) {
           failMessage = shard + " is not consistent, expected:" + lastNum
@@ -891,7 +888,9 @@ protected void checkShardConsistency(boolean verbose) throws Exception {
           ZkNodeProps props = clientToInfo.get(new CloudSolrServerClient(client));
           boolean active = props.get(ZkStateReader.STATE_PROP).equals(ZkStateReader.ACTIVE);
           if (active) {
-            cnt += client.query(new SolrQuery("*:*")).getResults()
+            SolrQuery query = new SolrQuery("*:*");
+            query.set("distrib", false);
+            cnt += client.query(query).getResults()
                 .getNumFound();
             break;
           }
@@ -904,7 +903,6 @@ protected void checkShardConsistency(boolean verbose) throws Exception {
       }
     }
     SolrQuery q = new SolrQuery("*:*");
-    q.set("distrib", true);
     long cloudClientDocs = cloudClient.query(q).getResults().getNumFound();
     assertEquals(
         "adding up the # of docs on each shard does not match the control - cloud client returns:"
@@ -965,7 +963,6 @@ protected void assertDocCounts(boolean verbose) throws Exception {
     }
     if (verbose) System.out.println("control docs:" + controlClient.query(new SolrQuery("*:*")).getResults().getNumFound() + "\n\n");
     SolrQuery query = new SolrQuery("*:*");
-    query.add("distrib", "true");
     assertEquals("Doc Counts do not add up", controlCount, cloudClient.query(query).getResults().getNumFound());
   }
   
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/OverseerTest.java b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/OverseerTest.java
index f691a502..641e6c21 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/OverseerTest.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/OverseerTest.java
@@ -506,7 +506,7 @@ private SolrZkClient electNewOverseer(String address) throws InterruptedExceptio
     SolrZkClient zkClient  = new SolrZkClient(address, TIMEOUT);
     ZkStateReader reader = new ZkStateReader(zkClient);
     LeaderElector overseerElector = new LeaderElector(zkClient);
-    ElectionContext ec = new OverseerElectionContext(address, zkClient, reader);
+    ElectionContext ec = new OverseerElectionContext(address.replaceAll("/", "_"), zkClient, reader);
     overseerElector.setup(ec);
     overseerElector.joinElection(ec);
     return zkClient;
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/RecoveryZkTest.java b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/RecoveryZkTest.java
index d722453f..fcef03f5 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/RecoveryZkTest.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/RecoveryZkTest.java
@@ -99,7 +99,7 @@ public void doTest() throws Exception {
     assertEquals(client1Docs, client2Docs);
  
     // won't always pass yet...
-    //query("q", "*:*", "distrib", true, "sort", "id desc");
+    //query("q", "*:*", "sort", "id desc");
   }
   
   protected void indexDoc(SolrInputDocument doc) throws IOException,
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/ZkControllerTest.java b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/ZkControllerTest.java
index 54d7618c..42659e42 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/ZkControllerTest.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/cloud/ZkControllerTest.java
@@ -74,7 +74,7 @@ public void testReadConfigName() throws Exception {
       }
       zkClient.close();
       ZkController zkController = new ZkController(server.getZkAddress(), TIMEOUT, 10000,
-          "localhost", "8983", "/solr", new CurrentCoreDescriptorProvider() {
+          "localhost", "8983", "solr", new CurrentCoreDescriptorProvider() {
             
             @Override
             public List<CoreDescriptor> getCurrentDescriptors() {
@@ -108,7 +108,7 @@ public void testUploadToCloud() throws Exception {
       AbstractZkTestCase.makeSolrZkNode(server.getZkHost());
 
       zkController = new ZkController(server.getZkAddress(),
-          TIMEOUT, 10000, "localhost", "8983", "/solr", new CurrentCoreDescriptorProvider() {
+          TIMEOUT, 10000, "localhost", "8983", "solr", new CurrentCoreDescriptorProvider() {
             
             @Override
             public List<CoreDescriptor> getCurrentDescriptors() {
diff --git a/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java b/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java
index 1cd4df56..e78f2fd6 100644
--- a/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java
+++ b/lucene/dev/branches/solrcloud/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java
@@ -376,9 +376,10 @@ public String getLeaderUrl(String collection, String shard) throws InterruptedEx
     return getLeaderUrl(collection, shard, 1000);
   }
   
-  public String getLeaderUrl(String collection, String shard, int timeout) throws InterruptedException, KeeperException {
-    ZkCoreNodeProps props = new ZkCoreNodeProps(getLeaderProps(collection,shard));
-    
+  public String getLeaderUrl(String collection, String shard, int timeout)
+      throws InterruptedException, KeeperException {
+    ZkCoreNodeProps props = new ZkCoreNodeProps(getLeaderProps(collection,
+        shard, timeout));
     return props.getCoreUrl();
   }
   
diff --git a/lucene/dev/branches/solrcloud/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java b/lucene/dev/branches/solrcloud/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java
index aa4974cb..5213c0a0 100644
--- a/lucene/dev/branches/solrcloud/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java
+++ b/lucene/dev/branches/solrcloud/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java
@@ -351,8 +351,11 @@ protected void query(Object... q) throws Exception {
     for (int i = 0; i < q.length; i += 2) {
       params.add(q[i].toString(), q[i + 1].toString());
     }
+    // nocommit: look into why passing true causes fails
+    params.set("distrib", "false");
     final QueryResponse controlRsp = controlClient.query(params);
 
+    params.remove("distrib");
     setDistributedParams(params);
 
     QueryResponse rsp = queryServer(params);
