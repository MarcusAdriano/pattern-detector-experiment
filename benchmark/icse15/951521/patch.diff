diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexFileDeleter.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexFileDeleter.java
index bf732823..70785711 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexFileDeleter.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexFileDeleter.java
@@ -465,7 +465,7 @@ void incRef(SegmentInfos segmentInfos, boolean isCommit) throws IOException {
     }
   }
 
-  void incRef(List<String> files) throws IOException {
+  void incRef(Collection<String> files) throws IOException {
     for(final String file : files) {
       incRef(file);
     }
diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexWriter.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexWriter.java
index abb6c24e..d2cda9cf 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexWriter.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexWriter.java
@@ -3537,25 +3537,7 @@ synchronized private boolean commitMerge(MergePolicy.OneMerge merge, SegmentMerg
     commitMergedDeletes(merge, mergedReader);
     docWriter.remapDeletes(segmentInfos, merger.getDocMaps(), merger.getDelCounts(), merge, mergedDocCount);
       
-    // Simple optimization: if the doc store we are using
-    // has been closed and is in now compound format (but
-    // wasn't when we started), then we will switch to the
-    // compound format as well:
-    final String mergeDocStoreSegment = merge.info.getDocStoreSegment(); 
-    if (mergeDocStoreSegment != null && !merge.info.getDocStoreIsCompoundFile()) {
-      final int size = segmentInfos.size();
-      for(int i=0;i<size;i++) {
-        final SegmentInfo info = segmentInfos.info(i);
-        final String docStoreSegment = info.getDocStoreSegment();
-        if (docStoreSegment != null &&
-            docStoreSegment.equals(mergeDocStoreSegment) && 
-            info.getDocStoreIsCompoundFile()) {
-          merge.info.setDocStoreIsCompoundFile(true);
-          break;
-        }
-      }
-    }
-    
+    setMergeDocStoreIsCompoundFile(merge);
     merge.info.setHasProx(merger.hasProx());
 
     segmentInfos.subList(start, start + merge.segments.size()).clear();
@@ -3903,6 +3885,11 @@ final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOExcepti
     if (merge.increfDone)
       decrefMergeSegments(merge);
 
+    if (merge.mergeFiles != null) {
+      deleter.decRef(merge.mergeFiles);
+      merge.mergeFiles = null;
+    }
+
     // It's possible we are called twice, eg if there was an
     // exception inside mergeInit
     if (merge.registerDone) {
@@ -3917,6 +3904,23 @@ final synchronized void mergeFinish(MergePolicy.OneMerge merge) throws IOExcepti
     runningMerges.remove(merge);
   }
 
+  private synchronized void setMergeDocStoreIsCompoundFile(MergePolicy.OneMerge merge) {
+    final String mergeDocStoreSegment = merge.info.getDocStoreSegment(); 
+    if (mergeDocStoreSegment != null && !merge.info.getDocStoreIsCompoundFile()) {
+      final int size = segmentInfos.size();
+      for(int i=0;i<size;i++) {
+        final SegmentInfo info = segmentInfos.info(i);
+        final String docStoreSegment = info.getDocStoreSegment();
+        if (docStoreSegment != null &&
+            docStoreSegment.equals(mergeDocStoreSegment) && 
+            info.getDocStoreIsCompoundFile()) {
+          merge.info.setDocStoreIsCompoundFile(true);
+          break;
+        }
+      }
+    }
+  }        
+
   /** Does the actual (time-consuming) work of the merge,
    *  but without holding synchronized lock on IndexWriter
    *  instance */
@@ -4037,6 +4041,17 @@ final private int mergeMiddle(MergePolicy.OneMerge merge)
       final int termsIndexDivisor;
       final boolean loadDocStores;
 
+      synchronized(this) {
+        // If the doc store we are using has been closed and
+        // is in now compound format (but wasn't when we
+        // started), then we will switch to the compound
+        // format as well:
+        setMergeDocStoreIsCompoundFile(merge);
+        assert merge.mergeFiles == null;
+        merge.mergeFiles = merge.info.files();
+        deleter.incRef(merge.mergeFiles);
+      }
+
       if (poolReaders && mergedSegmentWarmer != null) {
         // Load terms index & doc stores so the segment
         // warmer can run searches, load documents/term
diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/MergePolicy.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/MergePolicy.java
index a0798daa..afe1db22 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/MergePolicy.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/MergePolicy.java
@@ -76,6 +76,7 @@
     int maxNumSegmentsOptimize;     // used by IndexWriter
     SegmentReader[] readers;        // used by IndexWriter
     SegmentReader[] readersClone;   // used by IndexWriter
+    List<String> mergeFiles;            // used by IndexWriter
     final SegmentInfos segments;
     final boolean useCompoundFile;
     boolean aborted;
diff --git a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.java b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.java
index 005734b4..2b84bc72 100644
--- a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.java
+++ b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.java
@@ -542,7 +542,7 @@ public void testMergeWarmer() throws Exception {
     
     ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);
 
-    for (int i = 0; i < 10; i++) {
+    for (int i = 0; i < 100*_TestUtil.getRandomMultiplier(); i++) {
       writer.addDocument(createDocument(i, "test", 4));
     }
     ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();
