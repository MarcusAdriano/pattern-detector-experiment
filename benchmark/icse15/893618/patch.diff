diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java
index 9f713645..1c27c31b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java
@@ -509,6 +509,8 @@ public static int getDefaultGCBefore()
 
     private static class AntiCompactionIterator extends CompactionIterator
     {
+        private Set<SSTableScanner> scanners;
+
         public AntiCompactionIterator(Collection<SSTableReader> sstables, Collection<Range> ranges, int gcBefore, boolean isMajor)
                 throws IOException
         {
@@ -534,12 +536,17 @@ public boolean evaluate(Object row)
             return iter;
         }
 
-        public void close() throws IOException
+        public Iterable<SSTableScanner> getScanners()
+        {
+            if (scanners == null)
         {
+                scanners = new HashSet<SSTableScanner>();
             for (Object o : ((CollatingIterator)source).getIterators())
             {
-                ((SSTableScanner)((FilterIterator)o).getIterator()).close();
+                    scanners.add((SSTableScanner)((FilterIterator)o).getIterator());
+                }
             }
+            return scanners;
         }
     }
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/CompactionIterator.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/CompactionIterator.java
index 20dfe559..fc050895 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/CompactionIterator.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/CompactionIterator.java
@@ -53,7 +53,6 @@
 
     public CompactionIterator(Iterable<SSTableReader> sstables, int gcBefore, boolean major) throws IOException
     {
-<<<<<<< HEAD
         this(getCollatingIterator(sstables), gcBefore, major);
     }
 
@@ -61,15 +60,12 @@ public CompactionIterator(Iterable<SSTableReader> sstables, int gcBefore, boolea
     protected CompactionIterator(Iterator iter, int gcBefore, boolean major)
     {
         super(iter);
-=======
-        super(getCollatingIterator(sstables));
         row = 0;
         totalBytes = bytesRead = 0;
-        for (SSTableScanner iter : (List<SSTableScanner>)((CollatingIterator)source).getIterators())
+        for (SSTableScanner scanner : getScanners())
         {
-            totalBytes += iter.getFileLength();
+            totalBytes += scanner.getFileLength();
         }
->>>>>>> make estimation of pendingtasks for CompactionManager sane
         this.gcBefore = gcBefore;
         this.major = major;
     }
@@ -152,9 +148,9 @@ protected CompactedRow getReduced()
             if ((row++ % 1000) == 0)
             {
                 bytesRead = 0;
-                for (SSTableScanner iter : (List<SSTableScanner>)((CollatingIterator)source).getIterators())
+                for (SSTableScanner scanner : getScanners())
                 {
-                    bytesRead += iter.getFilePointer();
+                    bytesRead += scanner.getFilePointer();
                 }
             }
         }
@@ -163,12 +159,17 @@ protected CompactedRow getReduced()
 
     public void close() throws IOException
     {
-        for (Object o : ((CollatingIterator)source).getIterators())
+        for (SSTableScanner scanner : getScanners())
         {
-            ((SSTableScanner)o).close();
+            scanner.close();
         }
     }
 
+    protected Iterable<SSTableScanner> getScanners()
+    {
+        return ((CollatingIterator)source).getIterators();
+    }
+
     public long getTotalBytes()
     {
         return totalBytes;
