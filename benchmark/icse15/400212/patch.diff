diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java
index 7dc92c31..7d268da3 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java
@@ -345,6 +345,9 @@ public ExecRow	getAbsoluteRow(int row) throws StandardException
 					break;
 				}
 			}
+			if (result != null) {
+				result = getRowFromHashTable(row);
+			}
 			currentRow = result;
 			return result;
 		}
@@ -515,6 +518,9 @@ public ExecRow	getNextRowCore() throws StandardException
 			 * Get row from the source.
 			 */
 			result = getNextRowFromSource();
+			if (result !=null) {
+				result = getRowFromHashTable(currentPosition);
+			}
 		}
 		else if (currentPosition < positionInSource)
 		{
@@ -617,28 +623,13 @@ public ExecRow	getPreviousRow()
 	public ExecRow	getLastRow()
 		throws StandardException
 	{
-		ExecRow result;
-
 	    if ( ! isOpen ) 
 		{
 			throw StandardException.newException(SQLState.LANG_RESULT_SET_NOT_OPEN, "next");
 		}
 
-		/* Have we already seen the last row? */
-		if (seenLast)
-		{
-			// Return null if the set was empty
-			if (lastPosition == 0)
-			{
-				currentRow = null;
-				return null;
-			}
-			else
+		if (!seenLast) 
 			{
-				return getRowFromHashTable(lastPosition);
-			}
-		}
-
 		attachStatementContext();
 
 		if (SanityManager.DEBUG)
@@ -653,7 +644,15 @@ public ExecRow	getLastRow()
 		/* Scroll to the end, filling the hash table as
 		 * we scroll, and return the last row that we find.
 		 */
+			ExecRow result = null;
 		while ((result = getNextRowFromSource()) != null);
+		}
+		
+		if (SanityManager.DEBUG && !seenLast)
+		{
+			SanityManager.THROWASSERT(this + "expected to have seen last");
+		}
+		
 		beforeFirst = false;
 		afterLast = false;
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/testRelative.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/testRelative.java
index 082d5364..2827dd36 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/testRelative.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/testRelative.java
@@ -5,10 +5,13 @@
 
 import org.apache.derby.tools.ij;
 import org.apache.derby.tools.JDBCDisplayUtil;
+import org.apache.derbyTesting.functionTests.util.TestUtil;
 
 public class testRelative {
    
-   static final String NO_CURRENT_ROW_SQL_STATE = "24000";
+	static final String NO_CURRENT_ROW_SQL_STATE = 
+		(TestUtil.isNetFramework() ? 
+		 "XJ121" : "24000");
   
    public static void main(String[] args) {
 	   System.out.println("Test testRelative starting");
@@ -59,43 +62,48 @@ public static void test1(Connection con) {
 		
 			pStmt.executeBatch();
 			con.commit();
-
-			stmt1 = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
-		        rs = stmt1.executeQuery("select * from testRelative");						
-
-   			rs.next(); // First Record
-   			returnValue = rs.getString("name");
-   			System.out.println("Value="+returnValue);
-
-   			rs.relative(2);
-   			System.out.println("isFirst=" + rs.isFirst() + " isLast=" + rs.isLast() + " isAfterLast=" + rs.isAfterLast());
-   			returnValue = rs.getString("name");
-   			System.out.println("Value="+returnValue);
-
-   			rs.relative(-2);
-   			returnValue = rs.getString("name");
-   			System.out.println("Value="+returnValue);
                  } catch(SQLException se) {
 		    unexpectedSQLException(se);
                  } catch(Throwable t) {
 		    System.out.println("FAIL--unexpected exception: "+t.getMessage());
 		    t.printStackTrace(System.out);
                  }
-
                  try {
+			testScrolling(ResultSet.CONCUR_READ_ONLY, con);
+			testScrolling(ResultSet.CONCUR_UPDATABLE, con);
+		} catch(Throwable e) {
+			System.out.println("FAIL -- unexpected exception: "+e.getMessage());
+			e.printStackTrace(System.out);
 
-   			rs.relative(10);
-   			System.out.println("isFirst=" + rs.isFirst() + " isLast=" + rs.isLast() + " isAfterLast=" + rs.isAfterLast());
-
-   			returnValue = rs.getString("name");
-   			System.out.println("Value="+returnValue);
+		}
+	}
 
+	private static void testScrolling(int concurrency, Connection con) 
+		throws SQLException
+	{
+		Statement stmt1 = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, concurrency);
+		ResultSet rs = stmt1.executeQuery("select * from testRelative");
+		
+		rs.next(); // First Record
+		System.out.println("Value = " + rs.getString("name"));
+
+		rs.relative(2);
+		System.out.println("Value = " + rs.getString("name"));
+		System.out.println("isFirst = " + rs.isFirst() + 
+						   " isLast = " + rs.isLast() + 
+						   " isAfterLast = " + rs.isAfterLast());
+		rs.relative(-2);
+		System.out.println("Value = " + rs.getString("name"));
+
+		try {
+			rs.relative(10);
+			System.out.println("Value = " + rs.getString("name"));
+			System.out.println("isFirst = " + rs.isFirst() + 
+							   " isLast = " + rs.isLast() + 
+							   " isAfterLast = " + rs.isAfterLast());
  		} catch(SQLException sqle) {
- 		   expectedException(sqle, NO_CURRENT_ROW_SQL_STATE);
- 		} catch(Throwable e) {
- 		   System.out.println("FAIL -- unexpected exception: "+e.getMessage());
-                   e.printStackTrace(System.out);
 
+			expectedException(sqle, NO_CURRENT_ROW_SQL_STATE);
  		}
       }
      
@@ -110,15 +118,16 @@ public static void test1(Connection con) {
 	static private void expectedException (SQLException se, String expectedSQLState) {
            if( se.getSQLState() != null && (se.getSQLState().equals(expectedSQLState))) { 
                 System.out.println("PASS -- expected exception");
-                while (se != null) {
-                    System.out.println("SQLSTATE("+se.getSQLState()+"): "+se.getMessage());
-                    se = se.getNextException();
-                }
             } else {
 	        System.out.println("FAIL--Unexpected SQLException: " +
 							   "SQLSTATE(" +se.getSQLState() + ")" +
 							   se.getMessage());
+			while (se != null) {
+				System.out.println("SQLSTATE("+se.getSQLState()+"): "+se.getMessage());
 	        se.printStackTrace(System.out);
+				se = se.getNextException();
+			}
+			 
 	    }
 	}
 
