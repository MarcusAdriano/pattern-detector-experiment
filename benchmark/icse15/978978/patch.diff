diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 7b2d710e..4b5b19c5 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -281,15 +281,24 @@ public long getMeanRowSize()
         long count = 0;
         for (SSTableReader sstable : ssTables_)
         {
-            if (sstable.getEstimatedRowSize().median() > 0)
-            {
                 sum += sstable.getEstimatedRowSize().median();
                 count++;
             }
-        }
         return count > 0 ? sum / count : 0;
     }
 
+    public int getMeanColumns()
+    {
+        long sum = 0;
+        int count = 0;
+        for (SSTableReader sstable : ssTables_)
+        {
+            sum += sstable.getEstimatedColumnCount().median();
+            count++;
+        }
+        return count > 0 ? (int) (sum / count) : 0;
+    }
+
     public static ColumnFamilyStore createColumnFamilyStore(String table, String columnFamily)
     {
         return createColumnFamilyStore(table, columnFamily, StorageService.getPartitioner(), DatabaseDescriptor.getCFMetaData(table, columnFamily));
@@ -1053,9 +1062,8 @@ private ColumnFamily getTopLevelColumns(QueryFilter filter, int gcBefore)
 
     public List<Row> scan(IndexClause indexClause, IFilter dataFilter)
     {
-        // TODO: use statistics to pick clause w/ highest selectivity
-        // TODO even later: allow merge join instead of just one index + loop
-        IndexExpression first = indexClause.expressions.get(0);
+        // TODO: allow merge join instead of just one index + loop
+        IndexExpression first = highestSelectivityPredicate(indexClause);
         ColumnFamilyStore indexCFS = getIndexedColumnFamilyStore(first.column_name);
         assert indexCFS != null;
         DecoratedKey indexKey = indexCFS.partitioner_.decorateKey(first.value);
@@ -1076,14 +1084,48 @@ private ColumnFamily getTopLevelColumns(QueryFilter filter, int gcBefore)
         {
             DecoratedKey dk = partitioner_.decorateKey(dataKey);
             ColumnFamily data = getColumnFamily(new QueryFilter(dk, new QueryPath(columnFamily_), dataFilter));
+            boolean accepted = true;
+            for (IndexExpression expression : indexClause.expressions)
+            {
+                // (we can skip "first" since we already know it's satisfied)
+                if (expression != first && !satisfies(data, expression))
+                {
+                    accepted = false;
+                    break;
+                }
+            }
+            if (accepted)
             rows.add(new Row(dk, data));
         }
 
-        // TODO apply remaining expressions
-
         return rows;
     }
 
+    private IndexExpression highestSelectivityPredicate(IndexClause clause)
+    {
+        IndexExpression best = null;
+        int bestMeanCount = Integer.MAX_VALUE;
+        for (IndexExpression expression : clause.expressions)
+        {
+            ColumnFamilyStore cfs = getIndexedColumnFamilyStore(expression.column_name);
+            if (cfs == null)
+                continue;
+            int columns = cfs.getMeanColumns();
+            if (columns < bestMeanCount)
+            {
+                best = expression;
+                bestMeanCount = columns;
+            }
+        }
+        return best;
+    }
+
+    private static boolean satisfies(ColumnFamily data, IndexExpression expression)
+    {
+        IColumn column = data.getColumn(expression.column_name);
+        return column != null && Arrays.equals(column.value(), expression.value);
+    }
+
     public AbstractType getComparator()
     {
         return metadata.comparator;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java b/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java
index eafc68b1..901a2f06 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java
@@ -380,8 +380,9 @@ public static void validateIndexClauses(String keyspace, String columnFamily, In
         Set<byte[]> indexedColumns = Table.open(keyspace).getColumnFamilyStore(columnFamily).getIndexedColumns();
         for (IndexExpression expression : index_clause.expressions)
         {
-            if (!indexedColumns.contains(expression.column_name))
-                throw new InvalidRequestException("Unable to scan unindexed column");
+            if (indexedColumns.contains(expression.column_name))
+                return;
         }
+        throw new InvalidRequestException("No indexed columns present in index clause");
     }
 }
