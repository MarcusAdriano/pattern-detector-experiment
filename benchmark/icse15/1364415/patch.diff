diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/CoreContainer.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/CoreContainer.java
index 2d02ee14..d56a7bb5 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/CoreContainer.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/CoreContainer.java
@@ -945,7 +945,7 @@ public void reload(String name) throws ParserConfigurationException, IOException
       }
     }
     
-    SolrCore newCore = core.reload(solrLoader);
+    SolrCore newCore = core.reload(solrLoader, core);
     // keep core to orig name link
     String origName = coreToOrigName.remove(core);
     if (origName != null) {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCore.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCore.java
index 41759232..90586356 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCore.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCore.java
@@ -357,7 +357,7 @@ public QueryResponseWriter registerResponseWriter( String name, QueryResponseWri
     return responseWriters.put(name, responseWriter);
   }
   
-  public SolrCore reload(SolrResourceLoader resourceLoader) throws IOException,
+  public SolrCore reload(SolrResourceLoader resourceLoader, SolrCore prev) throws IOException,
       ParserConfigurationException, SAXException {
     // TODO - what if indexwriter settings have changed
     
@@ -368,8 +368,8 @@ public SolrCore reload(SolrResourceLoader resourceLoader) throws IOException,
         getSchema().getResourceName(), null);
     
     updateHandler.incref();
-    SolrCore core = new SolrCore(getName(), null, config,
-        schema, coreDescriptor, updateHandler);
+    SolrCore core = new SolrCore(getName(), getDataDir(), config,
+        schema, coreDescriptor, updateHandler, prev);
     return core;
   }
 
@@ -548,7 +548,7 @@ private QueryResponseWriter createQueryResponseWriter(String className) {
    * @since solr 1.3
    */
   public SolrCore(String name, String dataDir, SolrConfig config, IndexSchema schema, CoreDescriptor cd) {
-    this(name, dataDir, config, schema, cd, null);
+    this(name, dataDir, config, schema, cd, null, null);
   }
   
   /**
@@ -561,7 +561,7 @@ public SolrCore(String name, String dataDir, SolrConfig config, IndexSchema sche
    *
    *@since solr 1.3
    */
-  public SolrCore(String name, String dataDir, SolrConfig config, IndexSchema schema, CoreDescriptor cd, UpdateHandler updateHandler) {
+  public SolrCore(String name, String dataDir, SolrConfig config, IndexSchema schema, CoreDescriptor cd, UpdateHandler updateHandler, SolrCore prev) {
     coreDescriptor = cd;
     this.setName( name );
     resourceLoader = config.getResourceLoader();
@@ -640,10 +640,31 @@ public Object call() throws Exception {
         }
       });
 
+      // use the (old) writer to open the first searcher
+      RefCounted<IndexWriter> iwRef = null;
+      if (prev != null) {
+        iwRef = prev.getUpdateHandler().getSolrCoreState().getIndexWriter(null);
+        if (iwRef != null) {
+          final IndexWriter iw = iwRef.get();
+          newReaderCreator = new Callable<DirectoryReader>() {
+            @Override
+            public DirectoryReader call() throws Exception {
+              return DirectoryReader.open(iw, true);
+            }
+          };
+        }
+      }
+
       // Open the searcher *before* the update handler so we don't end up opening
       // one in the middle.
       // With lockless commits in Lucene now, this probably shouldn't be an issue anymore
-      getSearcher(false,false,null);
+
+      try {
+        getSearcher(false,false,null,true);
+      } finally {
+        newReaderCreator = null;
+        if (iwRef != null) iwRef.decref();
+      }
 
       String updateHandlerClass = solrConfig.getUpdateHandlerInfo().className;
 
@@ -1057,7 +1078,7 @@ public UpdateHandler getUpdateHandler() {
   private final int maxWarmingSearchers;  // max number of on-deck searchers allowed
 
   private RefCounted<SolrIndexSearcher> realtimeSearcher;
-
+  private Callable<DirectoryReader> newReaderCreator;
 
   /**
   * Return a registered {@link RefCounted}&lt;{@link SolrIndexSearcher}&gt; with
@@ -1208,10 +1229,21 @@ public UpdateHandler getUpdateHandler() {
         tmp = new SolrIndexSearcher(this, schema, (realtime ? "realtime":"main"), newReader, true, !realtime, true, directoryFactory);
 
       } else {
+        // newestSearcher == null at this point
+
+        if (newReaderCreator != null) {
+          // this is set in the constructor if there is a currently open index writer
+          // so that we pick up any uncommitted changes and so we don't go backwards
+          // in time on a core reload
+          DirectoryReader newReader = newReaderCreator.call();
+          tmp = new SolrIndexSearcher(this, schema, (realtime ? "realtime":"main"), newReader, true, !realtime, true, directoryFactory);
+        } else {
+         // normal open that happens at startup
         // verbose("non-reopen START:");
         tmp = new SolrIndexSearcher(this, newIndexDir, schema, getSolrConfig().indexConfig, "main", true, directoryFactory);
         // verbose("non-reopen DONE: searcher=",tmp);
       }
+      }
 
       List<RefCounted<SolrIndexSearcher>> searcherList = realtime ? _realtimeSearchers : _searchers;
       RefCounted<SolrIndexSearcher> newSearcher = newHolder(tmp, searcherList);    // refcount now at 1
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState.java
index c5b7bfde..7111e623 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState.java
@@ -55,6 +55,13 @@ public DefaultSolrCoreState(DirectoryFactory directoryFactory) {
   @Override
   public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)
       throws IOException {
+
+    if (core == null) {
+      // core == null is a signal to just return the current writer, or null if none.
+      if (refCntWriter != null) refCntWriter.incref();
+      return refCntWriter;
+    }
+
     while (pauseWriter) {
       try {
         wait();
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java
index 66acf227..cee969c4 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java
@@ -343,7 +343,7 @@ public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {
 
       // currently for testing purposes.  Do a delete of complete index w/o worrying about versions, don't log, clean up most state in update log, etc
       if (delAll && cmd.getVersion() == -Long.MAX_VALUE) {
-        synchronized (this) {
+        synchronized (solrCoreState) {
           deleteAll();
           ulog.deleteAll();
           return;
@@ -356,7 +356,7 @@ public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {
       // a realtime view of the index.  When a new searcher is opened after a DBQ, that
       // flag can be cleared.  If those thing happen concurrently, it's not thread safe.
       //
-      synchronized (this) {
+      synchronized (solrCoreState) {
         if (delAll) {
           deleteAll();
         } else {
@@ -392,7 +392,7 @@ private void addAndDelete(AddUpdateCommand cmd, List<Query> dbqList)
     Term idTerm = new Term(idField.getName(), cmd.getIndexedId());
     
     // see comment in deleteByQuery
-    synchronized (this) {
+    synchronized (solrCoreState) {
       RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);
       try {
         IndexWriter writer = iw.get();
@@ -518,7 +518,7 @@ public void commit(CommitUpdateCommand cmd) throws IOException {
         }
         
         if (!cmd.softCommit) {
-          synchronized (this) { // sync is currently needed to prevent preCommit
+          synchronized (solrCoreState) { // sync is currently needed to prevent preCommit
                                 // from being called between preSoft and
                                 // postSoft... see postSoft comments.
             if (ulog != null) ulog.preCommit(cmd);
@@ -547,14 +547,14 @@ public void commit(CommitUpdateCommand cmd) throws IOException {
 
       if (cmd.softCommit) {
         // ulog.preSoftCommit();
-        synchronized (this) {
+        synchronized (solrCoreState) {
           if (ulog != null) ulog.preSoftCommit(cmd);
           core.getSearcher(true, false, waitSearcher, true);
           if (ulog != null) ulog.postSoftCommit(cmd);
         }
         // ulog.postSoftCommit();
       } else {
-        synchronized (this) {
+        synchronized (solrCoreState) {
           if (ulog != null) ulog.preSoftCommit(cmd);
           if (cmd.openSearcher) {
             core.getSearcher(true, false, waitSearcher);
@@ -705,7 +705,7 @@ public void closeWriter(IndexWriter writer) throws IOException {
           // TODO: keep other commit callbacks from being called?
          //  this.commit(cmd);        // too many test failures using this method... is it because of callbacks?
 
-          synchronized (this) {
+          synchronized (solrCoreState) {
             ulog.preCommit(cmd);
           }
 
@@ -714,7 +714,7 @@ public void closeWriter(IndexWriter writer) throws IOException {
           commitData.put(SolrIndexWriter.COMMIT_TIME_MSEC_KEY, String.valueOf(System.currentTimeMillis()));
           writer.commit(commitData);
 
-          synchronized (this) {
+          synchronized (solrCoreState) {
             ulog.postCommit(cmd);
           }
         }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/UpdateLog.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/UpdateLog.java
index 62bb8bc7..ac444370 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/UpdateLog.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/UpdateLog.java
@@ -138,7 +138,7 @@ public String toString() {
 
   private SyncLevel defaultSyncLevel = SyncLevel.FLUSH;
 
-  private volatile UpdateHandler uhandler;    // a core reload can change this reference!
+  volatile UpdateHandler uhandler;    // a core reload can change this reference!
   private volatile boolean cancelApplyBufferUpdate;
   List<Long> startingVersions;
   int startingOperation;  // last operation in the logs on startup
@@ -177,6 +177,9 @@ public void init(UpdateHandler uhandler, SolrCore core) {
       if (debug) {
         log.debug("UpdateHandler init: tlogDir=" + tlogDir + ", next id=" + id, " this is a reopen... nothing else to do.");
       }
+
+      versionInfo.reload();
+
       // on a normal reopen, we currently shouldn't have to do anything
       return;
     }
@@ -209,7 +212,7 @@ public void init(UpdateHandler uhandler, SolrCore core) {
       if (newestLogsOnStartup.size() >= 2) break;
     }
     
-    versionInfo = new VersionInfo(uhandler, 256);
+    versionInfo = new VersionInfo(this, 256);
 
     // TODO: these startingVersions assume that we successfully recover from all non-complete tlogs.
     UpdateLog.RecentUpdates startingUpdates = getRecentUpdates();
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/VersionInfo.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/VersionInfo.java
index b9aaae4f..65fa635e 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/VersionInfo.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/VersionInfo.java
@@ -19,7 +19,6 @@
 
 import java.io.IOException;
 import java.util.Map;
-import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.locks.ReadWriteLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 
@@ -36,16 +35,15 @@
 public class VersionInfo {
   public static final String VERSION_FIELD="_version_";
 
-  private SolrCore core;
-  private UpdateHandler updateHandler;
+  private final UpdateLog ulog;
   private final VersionBucket[] buckets;
   private SchemaField versionField;
   private SchemaField idField;
   final ReadWriteLock lock = new ReentrantReadWriteLock(true);
 
-  public VersionInfo(UpdateHandler updateHandler, int nBuckets) {
-    this.updateHandler = updateHandler;
-    this.core = updateHandler.core;
+  public VersionInfo(UpdateLog ulog, int nBuckets) {
+    this.ulog = ulog;
+    SolrCore core = ulog.uhandler.core;
     versionField = core.getSchema().getFieldOrNull(VERSION_FIELD);
     idField = core.getSchema().getUniqueKeyField();
     buckets = new VersionBucket[ BitUtil.nextHighestPowerOfTwo(nBuckets) ];
@@ -54,6 +52,10 @@ public VersionInfo(UpdateHandler updateHandler, int nBuckets) {
     }
   }
 
+  public void reload() {
+
+  }
+
   public SchemaField getVersionField() {
     return versionField;
   }
@@ -143,14 +145,14 @@ public VersionBucket bucket(int hash) {
   }
 
   public Long lookupVersion(BytesRef idBytes) {
-    return updateHandler.ulog.lookupVersion(idBytes);
+    return ulog.lookupVersion(idBytes);
   }
 
   public Long getVersionFromIndex(BytesRef idBytes) {
     // TODO: we could cache much of this and invalidate during a commit.
     // TODO: most DocValues classes are threadsafe - expose which.
 
-    RefCounted<SolrIndexSearcher> newestSearcher = core.getRealtimeSearcher();
+    RefCounted<SolrIndexSearcher> newestSearcher = ulog.uhandler.core.getRealtimeSearcher();
     try {
       SolrIndexSearcher searcher = newestSearcher.get();
       long lookup = searcher.lookupId(idBytes);
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/TestReload.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/TestReload.java
index 5930df8d..9de51ef8 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/TestReload.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/search/TestReload.java
@@ -24,12 +24,11 @@
 
 import java.util.Random;
 
-@Ignore
 public class TestReload extends TestRTGBase {
 
   @BeforeClass
   public static void beforeClass() throws Exception {
-    useFactory(null);   // force FS directory
+    // useFactory(null);   // force FS directory
     initCore("solrconfig-tlog.xml","schema15.xml");
   }
 
@@ -39,36 +38,48 @@ public void testGetRealtimeReload() throws Exception {
     assertU(commit());
     long version = addAndGetVersion(sdoc("id","1") , null);
 
-   //  h.getCoreContainer().reload(h.getCore().getName());
+    assertU(commit("softCommit","true"));   // should cause a RTG searcher to be opened
 
-    assertU(commit("openSearcher","false"));   // should cause a RTG searcher to be opened
+    assertJQ(req("qt","/get","id","1")
+        ,"=={'doc':{'id':'1','_version_':" + version + "}}"
+    );
+
+    h.reload();
 
-    // should also use the RTG searcher (commit should have cleared the translog cache)
     assertJQ(req("qt","/get","id","1")
         ,"=={'doc':{'id':'1','_version_':" + version + "}}"
     );
 
     assertU(commit("softCommit","true"));   // open a normal (caching) NRT searcher
 
-    h.getCoreContainer().reload(h.getCore().getName());
+    assertJQ(req("q","id:1")
+        ,"/response/numFound==1"
+    );
+
 
     Random rand = random();
     int iter = atLeast(20);
+
     for (int i=0; i<iter; i++) {
       if (rand.nextBoolean()) {
+        // System.out.println("!!! add");
         version = addAndGetVersion(sdoc("id","1") , null);
       }
 
       if (rand.nextBoolean()) {
         if (rand.nextBoolean()) {
+          // System.out.println("!!! flush");
           assertU(commit("openSearcher","false"));   // should cause a RTG searcher to be opened as well
         } else {
-          assertU(commit("softCommit", ""+rand.nextBoolean()));
+          boolean softCommit = rand.nextBoolean();
+          System.out.println("!!! softCommit" + softCommit);
+          // assertU(commit("softCommit", ""+softCommit));
         }
       }
 
       if (rand.nextBoolean()) {
         // RTG should always be able to see the last version
+        // System.out.println("!!! rtg");
         assertJQ(req("qt","/get","id","1")
             ,"=={'doc':{'id':'1','_version_':" + version + "}}"
         );
@@ -76,13 +87,16 @@ public void testGetRealtimeReload() throws Exception {
 
       if (rand.nextBoolean()) {
         // a normal search should always find 1 doc
+        // System.out.println("!!! q");
         assertJQ(req("q","id:1")
             ,"/response/numFound==1"
         );
       }
 
-      // TODO: randomly do a reload
-      // but the test currently fails without this!
+      if (rand.nextBoolean()) {
+        // System.out.println("!!! reload");
+        h.reload();
+      }
     }
 
     // test framework should ensure that all searchers opened have been closed.
diff --git a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/util/TestHarness.java b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/util/TestHarness.java
index 0cebae64..eeaf4eff 100644
--- a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/util/TestHarness.java
+++ b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/util/TestHarness.java
@@ -231,6 +231,9 @@ public SolrCore getCoreInc() {
   }
 
 
+  public void reload() throws Exception {
+    container.reload(coreName);
+  }
 
   /**
    * Processes an "update" (add, commit or optimize) and
