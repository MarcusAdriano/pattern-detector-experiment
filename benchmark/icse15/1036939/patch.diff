diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/AntiEntropyService.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/AntiEntropyService.java
index 3796966d..4edda998 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/AntiEntropyService.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/AntiEntropyService.java
@@ -20,6 +20,7 @@
 
 import java.io.*;
 import java.net.InetAddress;
+import java.security.MessageDigest;
 import java.util.*;
 import java.util.concurrent.*;
 
@@ -361,8 +362,10 @@ public void add(CompactedRow row)
         {
             validated++;
             // MerkleTree uses XOR internally, so we want lots of output bits here
-            byte[] rowhash = FBUtilities.hash("SHA-256", row.key.key.getBytes(), row.buffer.getData());
-            return new MerkleTree.RowHash(row.key.token, rowhash);
+            MessageDigest messageDigest = FBUtilities.createDigest("SHA-256");
+            messageDigest.update(row.key.key.getBytes());
+            messageDigest.update(row.buffer.getData(), 0, row.buffer.getLength());
+            return new MerkleTree.RowHash(row.key.token, messageDigest.digest());
         }
 
         /**
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java
index c3b6b5bf..a8deced2 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/utils/FBUtilities.java
@@ -233,21 +233,21 @@ public static BigInteger hash(String data)
         return hash.abs();        
     }
 
-    public static byte[] hash(String type, byte[]... data)
+    public static byte[] hash(String type, byte[] data)
+    {
+        return createDigest(type).digest(data);
+    }
+
+    public static MessageDigest createDigest(String type)
     {
-    	byte[] result = null;
     	try
         {
-            MessageDigest messageDigest = MessageDigest.getInstance(type);
-            for(byte[] block : data)
-                messageDigest.update(block);
-            result = messageDigest.digest();
+            return MessageDigest.getInstance(type);
     	}
     	catch (Exception e)
         {
             throw new RuntimeException(e);
     	}
-    	return result;
 	}
 
     // The given byte array is compressed onto the specified stream.
