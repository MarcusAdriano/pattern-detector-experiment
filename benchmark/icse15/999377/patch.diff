diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
index 9c1e9997..786aefcb 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
@@ -61,6 +61,8 @@
 public class ServiceRecipe extends AbstractRecipe {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(ServiceRecipe.class);
+    final static String LOG_ENTRY = "Method entry: {}, args {}";
+    final static String LOG_EXIT = "Method exit: {}, returning {}";
 
     private final ExtendedBlueprintContainer blueprintContainer;
     private final ServiceMetadata metadata;
@@ -407,84 +409,96 @@ public void quiesce(DestroyCallback destroyCallback)
     	private QuiesceInterceptor interceptor;
     	private ServiceRecipe serviceRecipe;
     	private ComponentMetadata cm;
-    	public TriggerServiceFactory(ServiceRecipe serviceRecipe, ComponentMetadata cm)
+    	private ServiceMetadata sm;
+    	public TriggerServiceFactory(ServiceRecipe serviceRecipe, ServiceMetadata cm)
     	{
     		this.serviceRecipe = serviceRecipe;
     		this.cm = cm;
+    		this.sm = cm;
     	}
     	
-        public Object getService(Bundle bundle, ServiceRegistration registration) 
-        {
-        	Object original = ServiceRecipe.this.getService(bundle, registration);
+        public Object getService(Bundle bundle, ServiceRegistration registration) {
+            Object original = ServiceRecipe.this.getService(bundle,
+                    registration);
+            LOGGER.debug(LOG_ENTRY, "getService", original);
         	Object intercepted = null;
             boolean asmAvailable = false;
             boolean cglibAvailable = false;
             
-            if (interceptor == null)
-            {
+            if (interceptor == null) {
             	interceptor = new QuiesceInterceptor(serviceRecipe);
             }
             
             List<Interceptor> interceptors = new ArrayList<Interceptor>();
             interceptors.add(interceptor);
             
-            try 
-            {
+            try {
                 // Try load load an asm class (to make sure it's actually
                 // available)
                 getClass().getClassLoader().loadClass(
                         "org.objectweb.asm.ClassVisitor");
                 LOGGER.debug("asm available for interceptors");
                 asmAvailable = true;
-            } 
-            catch (Throwable t) 
-            {
-                try 
-                {
+            } catch (Throwable t) {
+                try {
                     // Try load load a cglib class (to make sure it's actually
                     // available)
                     getClass().getClassLoader().loadClass(
                             "net.sf.cglib.proxy.Enhancer");
                     cglibAvailable = true;
-                } 
-                catch (Throwable u) 
-                {
-                	LOGGER.info("No quiesce support is available, so blueprint components will not participate in quiesce operations");
+                } catch (Throwable u) {
+                    LOGGER
+                            .info("A problem occurred trying to create a proxy object. Returning the original object instead.");
+                    LOGGER.debug(LOG_EXIT, "getService", original);
                 	return original;
                 }
             }
             
-            try
-            {
-	            if (asmAvailable) 
-	            {
-	                // if asm is available we can proxy the original object with the
-	                // AsmInterceptorWrapper
-	                intercepted = AsmInterceptorWrapper.createProxyObject(original
-	                        .getClass().getClassLoader(), cm, interceptors,
-	                        original, original.getClass());
+            try {
+                if (asmAvailable) {
+                    List<String> interfaces = sm.getInterfaces();
+
+                    // check for the case where interfaces is null or empty
+                    if (interfaces == null || interfaces.isEmpty()) {
+                        intercepted = AsmInterceptorWrapper.createProxyObject(
+                                original.getClass().getClassLoader(), cm,
+                                interceptors, original, original.getClass());
+                        LOGGER.debug(LOG_EXIT, "getService", intercepted);
+                        return intercepted;
 	            } 
-	            else if (cglibAvailable)
-	            {
+                    Class[] classesToProxy = new Class[interfaces.size()];
+                    for (int i = 0; i < interfaces.size(); i++) {
+                        classesToProxy[i] = Class.forName(interfaces.get(i),
+                                true, original.getClass().getClassLoader());
+                    }
+
+                    // if asm is available we can proxy the original object with
+                    // the
+                    // AsmInterceptorWrapper
+                    intercepted = AsmInterceptorWrapper.createProxyObject(
+                            original.getClass().getClassLoader(), cm,
+                            interceptors, original, classesToProxy);
+                } else if (cglibAvailable) {
 	                LOGGER.debug("cglib available for interceptors");
-	                // otherwise we're using cglib and need to use the interfaces
+                    // otherwise we're using cglib and need to use the
+                    // interfaces
 	                // with the CgLibInterceptorWrapper
 	                intercepted = CgLibInterceptorWrapper.createProxyObject(
 	                        original.getClass().getClassLoader(), cm,
 	                        interceptors, original, original.getClass()
 	                                .getInterfaces());
-	            }
-	            else
-	            {
+                } else {
+                    LOGGER.debug(LOG_EXIT, "getService", original);
 	            	return original;
 	            }
-            }
-            catch (Throwable u) 
-            {
-            	LOGGER.info("No quiesce support is available, so blueprint components will not participate in quiesce operations");
+            } catch (Throwable u) {
+                LOGGER
+                        .info("A problem occurred trying to create a proxy object. Returning the original object instead.");
+                LOGGER.debug(LOG_EXIT, "getService", original);
             	return original;
             }
             
+            LOGGER.debug(LOG_EXIT, "getService", intercepted);
             return intercepted;
 
         }
diff --git a/incubator/aries/trunk/blueprint/blueprint-itests/src/test/java/org/apache/aries/blueprint/itests/QuiesceBlueprintTest.java b/incubator/aries/trunk/blueprint/blueprint-itests/src/test/java/org/apache/aries/blueprint/itests/QuiesceBlueprintTest.java
index 5ab01ffe..8eacb2ba 100644
--- a/incubator/aries/trunk/blueprint/blueprint-itests/src/test/java/org/apache/aries/blueprint/itests/QuiesceBlueprintTest.java
+++ b/incubator/aries/trunk/blueprint/blueprint-itests/src/test/java/org/apache/aries/blueprint/itests/QuiesceBlueprintTest.java
@@ -118,7 +118,7 @@ private QuiesceParticipant getParticipant(String bundleName) throws InvalidSynta
         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testbundlea").noStart(),
         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testbundleb").noStart(),
         mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.testquiescebundle"),
-        mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.cm"),
+        //mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.cm"),
         mavenBundle("org.osgi", "org.osgi.compendium"),
         
         //new VMOption( "-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" ),
@@ -157,65 +157,6 @@ public static MavenArtifactProvisionOption mavenBundle(String groupId,
         .versionAsInProject();
   }
 
-  protected static Option[] updateOptions(Option[] options) {
-    // We need to add pax-exam-junit here when running with the ibm
-    // jdk to avoid the following exception during the test run:
-    // ClassNotFoundException: org.ops4j.pax.exam.junit.Configuration
-    if ("IBM Corporation".equals(System.getProperty("java.vendor"))) {
-      Option[] ibmOptions = options(wrappedBundle(mavenBundle(
-          "org.ops4j.pax.exam", "pax-exam-junit")));
-      options = combine(ibmOptions, options);
-    }
-
-    return options;
-  }
-
-  protected <T> T getOsgiService(Class<T> type, long timeout) {
-    return getOsgiService(type, null, timeout);
-  }
-
-  protected <T> T getOsgiService(Class<T> type) {
-    return getOsgiService(type, null, DEFAULT_TIMEOUT);
-  }
-  
-  protected <T> T getOsgiService(Class<T> type, String filter, long timeout) {
-    return getOsgiService(null, type, filter, timeout);
-  }
-
-  protected <T> T getOsgiService(BundleContext bc, Class<T> type,
-      String filter, long timeout) {
-    ServiceTracker tracker = null;
-    try {
-      String flt;
-      if (filter != null) {
-        if (filter.startsWith("(")) {
-          flt = "(&(" + Constants.OBJECTCLASS + "=" + type.getName() + ")"
-              + filter + ")";
-        } else {
-          flt = "(&(" + Constants.OBJECTCLASS + "=" + type.getName() + ")("
-              + filter + "))";
-        }
-      } else {
-        flt = "(" + Constants.OBJECTCLASS + "=" + type.getName() + ")";
-      }
-      Filter osgiFilter = FrameworkUtil.createFilter(flt);
-      tracker = new ServiceTracker(bc == null ? bundleContext : bc, osgiFilter,
-          null);
-      tracker.open();
-      // Note that the tracker is not closed to keep the reference
-      // This is buggy, has the service reference may change i think
-      Object svc = type.cast(tracker.waitForService(timeout));
-      if (svc == null) {
-        throw new RuntimeException("Gave up waiting for service " + flt);
-      }
-      return type.cast(svc);
-    } catch (InvalidSyntaxException e) {
-      throw new IllegalArgumentException("Invalid filter", e);
-    } catch (InterruptedException e) {
-      throw new RuntimeException(e);
-    }
-  }
-  
   @Test
   public void testBasicQuieseEmptyCounter() throws Exception 
   {
@@ -366,6 +307,7 @@ public void testMultiBundleQuiesce() throws Exception {
 		    
 		    Thread t = new Thread(new TestBeanClient((TestBean)obj, 1500));
 		    t.start();
+		    Thread.sleep(200);
 	        
 			participant.quiesce(callback, bundles);
 			
