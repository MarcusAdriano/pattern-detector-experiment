diff --git a/cassandra/trunk/contrib/property_snitch/src/java/org/apache/cassandra/locator/PropertyFileEndPointSnitch.java b/cassandra/trunk/contrib/property_snitch/src/java/org/apache/cassandra/locator/PropertyFileEndPointSnitch.java
index d73d58c3..0bdabb98 100644
--- a/cassandra/trunk/contrib/property_snitch/src/java/org/apache/cassandra/locator/PropertyFileEndPointSnitch.java
+++ b/cassandra/trunk/contrib/property_snitch/src/java/org/apache/cassandra/locator/PropertyFileEndPointSnitch.java
@@ -17,21 +17,22 @@
  * limitations under the License.
  */
 
-package src.java.org.apache.cassandra.locator;
+package org.apache.cassandra.locator;
 
-import java.io.FileNotFoundException;
 import java.io.FileReader;
 import java.io.IOException;
 import java.lang.management.ManagementFactory;
 import java.net.UnknownHostException;
+import java.net.URL;
 import java.util.Properties;
 import java.util.StringTokenizer;
 
 import javax.management.MBeanServer;
 import javax.management.ObjectName;
 
-import org.apache.cassandra.locator.EndPointSnitch;
 import java.net.InetAddress;
+
+import org.apache.cassandra.config.ConfigurationException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -41,8 +42,6 @@
  * PropertyFileEndPointSnitch is used by Digg to determine if two IP's are in the same
  * datacenter or on the same rack.
  * 
- * @author Sammy Yu <syu@sammyyu.net>
- * 
  */
 public class PropertyFileEndPointSnitch extends EndPointSnitch implements PropertyFileEndPointSnitchMBean {
     /**
@@ -53,7 +52,7 @@
     /**
      * The default rack property file to be read.
      */
-    private static String DEFAULT_RACK_PROPERTY_FILE = "/etc/cassandra/rack.properties"; 
+    private static String RACK_PROPERTY_FILENAME = "cassandra-rack.properties";
 
     /**
      * Whether to use the parent for detection of same node
@@ -65,7 +64,8 @@
      */
     private static Logger logger_ = LoggerFactory.getLogger(PropertyFileEndPointSnitch.class);     
 
-    public PropertyFileEndPointSnitch() throws IOException {
+    public PropertyFileEndPointSnitch() throws ConfigurationException
+    {
         reloadConfiguration();
         try
         {
@@ -147,20 +147,25 @@ public boolean isOnSameRack(InetAddress host, InetAddress host2)
         return getRackForEndPoint(host).equals(getRackForEndPoint(host2)); 
     }
 
-    @Override
     public String displayConfiguration() {
         StringBuffer configurationString = new StringBuffer("Current rack configuration\n=================\n");
         for (Object key: hostProperties.keySet()) {
             String endpoint = (String) key;
             String value = hostProperties.getProperty(endpoint);
-            configurationString.append(endpoint + "=" + value + "\n");
+            configurationString.append(endpoint).append("=").append(value).append("\n");
         }
         return configurationString.toString();
     }
     
-    @Override
-    public void reloadConfiguration() throws IOException {        
-        String rackPropertyFilename = System.getProperty("rackFile", DEFAULT_RACK_PROPERTY_FILE);
+    public void reloadConfiguration() throws ConfigurationException
+    {
+        ClassLoader loader = PropertyFileEndPointSnitch.class.getClassLoader();
+        URL scpurl = loader.getResource(RACK_PROPERTY_FILENAME);
+        if (scpurl == null)
+            throw new ConfigurationException("unable to locate " + RACK_PROPERTY_FILENAME);
+
+        String rackPropertyFilename = scpurl.getFile();
+
         try 
         {
             Properties localHostProperties = new Properties();
@@ -168,14 +173,9 @@ public void reloadConfiguration() throws IOException {
             hostProperties = localHostProperties;
             runInBaseMode = false;
         }
-        catch (FileNotFoundException fnfe) {
-            logger_.error("Could not find " + rackPropertyFilename + ", using default EndPointSnitch", fnfe);
-            runInBaseMode = true;
-        }
-        catch (IOException ioe) {
-            logger_.error("Could not process " + rackPropertyFilename, ioe);
-            throw ioe;
+        catch (IOException ioe) 
+        {
+            throw new ConfigurationException("Could not process " + rackPropertyFilename, ioe);
         }
     }
-
 }
diff --git a/cassandra/trunk/contrib/property_snitch/src/java/org/apache/cassandra/locator/PropertyFileEndPointSnitchMBean.java b/cassandra/trunk/contrib/property_snitch/src/java/org/apache/cassandra/locator/PropertyFileEndPointSnitchMBean.java
index b8872de6..8cfa4a09 100644
--- a/cassandra/trunk/contrib/property_snitch/src/java/org/apache/cassandra/locator/PropertyFileEndPointSnitchMBean.java
+++ b/cassandra/trunk/contrib/property_snitch/src/java/org/apache/cassandra/locator/PropertyFileEndPointSnitchMBean.java
@@ -16,10 +16,12 @@
  * limitations under the License.
  */
 
-package src.java.org.apache.cassandra.locator;
+package org.apache.cassandra.locator;
 
 import java.io.IOException;
 
+import org.apache.cassandra.config.ConfigurationException;
+
 /**
  * PropertyFileEndPointSnitchMBean
  * 
@@ -37,7 +39,7 @@
     /**
      * Reload the rack configuration
      */
-    public void reloadConfiguration() throws IOException;
+    public void reloadConfiguration() throws ConfigurationException;
     
     /**
      * Display the current configuration
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/ConfigurationException.java b/cassandra/trunk/src/java/org/apache/cassandra/config/ConfigurationException.java
index 5ae78473..b04e52a8 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/ConfigurationException.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/ConfigurationException.java
@@ -18,10 +18,17 @@
 
 package org.apache.cassandra.config;
 
+import java.io.IOException;
+
 public class ConfigurationException extends Exception
 {
     public ConfigurationException(String message)
     {
         super(message);
     }
+
+    public ConfigurationException(String message, IOException ioe)
+    {
+        super(message, ioe);
+    }
 }
