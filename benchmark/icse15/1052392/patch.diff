diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
index 596f62c0..d8f997e0 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
@@ -680,7 +680,12 @@ private Object addInterceptors(final Object original)
         List<Interceptor> interceptors = reg.getInterceptors(interceptorLookupKey);
         if (interceptors != null && interceptors.size() > 0) {
             try {
-              intercepted = BlueprintExtender.getProxyManager().createProxy(FrameworkUtil.getBundle(original.getClass()), 
+              Bundle b = FrameworkUtil.getBundle(original.getClass());
+              if (b == null) {
+                // we have a class from the framework parent, so use our bundle for proxying.
+                b = blueprintContainer.getBundleContext().getBundle();
+              }
+              intercepted = BlueprintExtender.getProxyManager().createProxy(b, 
                   ProxyUtils.asList(original.getClass()), ProxyUtils.passThrough(original), 
                   new Collaborator(interceptorLookupKey, interceptors));
             } catch (org.apache.aries.proxy.UnableToProxyException e) {
diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
index 42e559f4..d64270c5 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
@@ -449,6 +449,10 @@ public Object getService(Bundle bundle, ServiceRegistration registration) {
             Object intercepted;
             try {
                 Bundle b = FrameworkUtil.getBundle(original.getClass());
+                if (b == null) {
+                  // we have a class from the framework parent, so use our bundle for proxying.
+                  b = blueprintContainer.getBundleContext().getBundle();
+                }
                 Callable<Object> target = ProxyUtils.passThrough(original);
                 InvocationHandlerWrapper collaborator = new Collaborator(cm, interceptors);
                 try {
@@ -464,7 +468,8 @@ public Object getService(Bundle bundle, ServiceRegistration registration) {
                         classes, target, collaborator);
                 }
             } catch (Throwable u) {
-                LOGGER.info("A problem occurred trying to create a proxy object. Returning the original object instead.", u);
+                Bundle b = blueprintContainer.getBundleContext().getBundle();
+                LOGGER.info("Unable to create a proxy object for the service " + getName() + " defined in bundle " + b.getSymbolicName() + " at version " + b.getVersion() + " with id " + b.getBundleId() + ". Returning the original object instead.", u);
                 LOGGER.debug(LOG_EXIT, "getService", original);
                 return original;
             }
