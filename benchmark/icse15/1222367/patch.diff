diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexWriter.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexWriter.java
index a40fb4e5..48896b70 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexWriter.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/IndexWriter.java
@@ -862,6 +862,8 @@ public IndexWriter(Directory d, IndexWriterConfig conf)
     if (!writeLock.obtain(conf.getWriteLockTimeout())) // obtain write lock
       throw new LockObtainFailedException("Index locked for write: " + writeLock);
 
+    boolean success = false;
+    try {
     OpenMode mode = conf.getOpenMode();
     boolean create;
     if (mode == OpenMode.CREATE) {
@@ -872,12 +874,11 @@ public IndexWriter(Directory d, IndexWriterConfig conf)
       // CREATE_OR_APPEND - create only if an index does not exist
       create = !IndexReader.indexExists(directory);
     }
-    boolean success = false;
 
     // If index is too old, reading the segments will throw
     // IndexFormatTooOldException.
     segmentInfos = new SegmentInfos();
-    try {
+
       if (create) {
         // Try to read first.  This is to allow create
         // against an index that's currently open for
diff --git a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
index fb9e6167..9d3670de 100644
--- a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
+++ b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.java
@@ -37,6 +37,7 @@
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.PhraseQuery;
 import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.IOContext;
 import org.apache.lucene.store.IndexInput;
 import org.apache.lucene.store.IndexOutput;
 import org.apache.lucene.store.MockDirectoryWrapper;
@@ -1459,4 +1460,38 @@ public void testUpdateDocsNonAbortingException() throws Exception {
     r.close();
     dir.close();
   }
+  
+  static class UOEDirectory extends RAMDirectory {
+    boolean doFail = false;
+
+    @Override
+    public IndexInput openInput(String name, IOContext context) throws IOException {
+      if (doFail && name.startsWith("segments_")) {
+        StackTraceElement[] trace = new Exception().getStackTrace();
+        for (int i = 0; i < trace.length; i++) {
+          if ("indexExists".equals(trace[i].getMethodName())) {
+            throw new UnsupportedOperationException("expected UOE");
+          }
+        }
+      }
+      return super.openInput(name, context);
+    }
+  }
+  
+  public void testExceptionOnCtor() throws Exception {
+    UOEDirectory uoe = new UOEDirectory();
+    Directory d = new MockDirectoryWrapper(random, uoe);
+    IndexWriter iw = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, null));
+    iw.addDocument(new Document());
+    iw.close();
+    uoe.doFail = true;
+    try {
+      new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT, null));
+      fail("should have gotten a UOE");
+    } catch (UnsupportedOperationException expected) {
+      
+    }
+    uoe.doFail = false;
+    d.close();
+  }
 }
