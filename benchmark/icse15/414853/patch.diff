diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java
index 0ace549a..1f49129b 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/store/raw/data/RAFContainer.java
@@ -233,17 +233,39 @@ protected void writePage(long pageNumber, byte[] pageData, boolean syncPage)
 				// space
 				writeHeader(pageData);
 
-				if (SanityManager.DEBUG) {
-					if (FormatIdUtil.readFormatIdInteger(pageData) != AllocPage.FORMAT_NUMBER)
+				if (SanityManager.DEBUG) 
+                {
+					if (FormatIdUtil.readFormatIdInteger(pageData) != 
+                            AllocPage.FORMAT_NUMBER)
+                    {
 						SanityManager.THROWASSERT(
 							"expect " +
 							AllocPage.FORMAT_NUMBER +
 							"got " +
 							FormatIdUtil.readFormatIdInteger(pageData));
 				}
+				}
 
 			}
 
+            // set dataToWrite to actual page buffer or encrypt buffer for
+            // use by normal write code, and retry catch block write code.
+            byte[] dataToWrite;
+
+            if (dataFactory.databaseEncrypted() 
+                && pageNumber != FIRST_ALLOC_PAGE_NUMBER)
+            {
+                // We cannot encrypt the page in place because pageData is
+                // still being accessed as clear text.  The encryption
+                // buffer is shared by all who access this container and can
+                // only be used within the synchronized block.
+                dataToWrite = encryptPage(pageData, pageSize);
+            } 
+            else 
+            {
+                dataToWrite = pageData;
+            }
+
 		///////////////////////////////////////////////////
 		//
 		// RESOLVE: right now, no logical -> physical mapping.
@@ -267,20 +289,6 @@ On EPOC (www.symbian.com) a seek beyond the end of
 				if (fileData.getFilePointer() != pageOffset)
 					padFile(fileData, pageOffset);
 
-				byte[] dataToWrite;
-
-				if (dataFactory.databaseEncrypted() 
-					&& pageNumber != FIRST_ALLOC_PAGE_NUMBER)
-				{
-					// We cannot encrypt the page in place because pageData is
-					// still being accessed as clear text.  The encryption
-					// buffer is shared by all who access this container and can
-					// only be used within the synchronized block.
-					dataToWrite = encryptPage(pageData, pageSize);
-				} else {
-					dataToWrite = pageData;
-				}
-
 				dataFactory.writeInProgress();
 				try
 				{
@@ -305,13 +313,17 @@ On EPOC (www.symbian.com) a seek beyond the end of
 					throw ioe;	// not writing beyond EOF, rethrow exception
 
 				if (SanityManager.DEBUG)
-					SanityManager.ASSERT(fileData.length() >= pageOffset,
+                {
+					SanityManager.ASSERT(
+                        fileData.length() >= pageOffset,
 										 "failed to blank filled missing pages");
+                }
+
 				fileData.seek(pageOffset);
 				dataFactory.writeInProgress();
 				try
 				{
-					fileData.write(pageData, 0, pageSize);
+					fileData.write(dataToWrite, 0, pageSize);
 				}
 				finally
 				{
