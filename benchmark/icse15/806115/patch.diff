diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingDataModel.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingDataModel.java
index 10c5c59c..d5010045 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingDataModel.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingDataModel.java
@@ -27,9 +27,9 @@
 import java.io.IOException;
 import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
+import java.io.FileNotFoundException;
 import java.nio.charset.Charset;
 
-
 /**
  * See <a href="http://www.informatik.uni-freiburg.de/~cziegler/BX/BX-CSV-Dump.zip">download</a> for
  * data needed by this class. The BX-Book-Ratings.csv file is needed.
@@ -50,14 +50,21 @@ public BookCrossingDataModel(File ratingsFile) throws IOException {
   }
 
   private static File convertBCFile(File originalFile) throws IOException {
+    if (!originalFile.exists()) {
+      throw new FileNotFoundException(originalFile.toString());
+    }
     File resultFile = new File(new File(System.getProperty("java.io.tmpdir")), "taste.bookcrossing.txt");
-    if (!resultFile.exists()) {
+    resultFile.delete();
       PrintWriter writer = null;
       try {
         writer = new PrintWriter(new OutputStreamWriter(new FileOutputStream(resultFile), Charset.forName("UTF-8")));
         for (String line : new FileLineIterable(originalFile, true)) {
-          // Delete commas, make semicolon delimiter into comma delimter, then remove quotes
-          String convertedLine = line.replace(",", "").replace(';', ',').replace("\"", "");
+        // Delete replace anything that isn't numeric, or a semicolon delimiter. Make comma the delimiter.
+        String convertedLine = line.replaceAll("[^0-9;]", "").replace(';', ',');
+        // If this means we deleted an entire ID -- few cases like that -- skip the line
+        if (convertedLine.contains(",,")) {
+          continue;
+        }
           writer.println(convertedLine);
         }
         writer.flush();
@@ -67,7 +74,6 @@ private static File convertBCFile(File originalFile) throws IOException {
       } finally {
         IOUtils.quietClose(writer);
       }
-    }
     return resultFile;
   }
 
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingRecommender.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingRecommender.java
index 5bd39316..6b876098 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingRecommender.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingRecommender.java
@@ -41,10 +41,10 @@
 
   private final Recommender recommender;
 
-  public BookCrossingRecommender(DataModel dataModel, BookCrossingDataModel bcModel) throws TasteException {
+  public BookCrossingRecommender(DataModel bcModel) throws TasteException {
     UserSimilarity similarity = new PearsonCorrelationSimilarity(bcModel);
-    UserNeighborhood neighborhood = new NearestNUserNeighborhood(5, similarity, dataModel);
-    recommender = new CachingRecommender(new GenericUserBasedRecommender(dataModel, neighborhood, similarity));
+    UserNeighborhood neighborhood = new NearestNUserNeighborhood(10, 0.0, similarity, bcModel, 0.1);
+    recommender = new CachingRecommender(new GenericUserBasedRecommender(bcModel, neighborhood, similarity));
   }
 
   @Override
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingRecommenderBuilder.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingRecommenderBuilder.java
index 3708efd4..f4f8de9a 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingRecommenderBuilder.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingRecommenderBuilder.java
@@ -24,15 +24,9 @@
 
 final class BookCrossingRecommenderBuilder implements RecommenderBuilder {
 
-  private final BookCrossingDataModel bcModel;
-
-  BookCrossingRecommenderBuilder(BookCrossingDataModel bcModel) {
-    this.bcModel = bcModel;
-  }
-
   @Override
   public Recommender buildRecommender(DataModel dataModel) throws TasteException {
-    return new BookCrossingRecommender(dataModel, bcModel);
+    return new BookCrossingRecommender(dataModel);
   }
 
 }
diff --git a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingRecommenderEvaluatorRunner.java b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingRecommenderEvaluatorRunner.java
index 398c57bb..374f45a5 100644
--- a/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingRecommenderEvaluatorRunner.java
+++ b/lucene/mahout/trunk/examples/src/main/java/org/apache/mahout/cf/taste/example/bookcrossing/BookCrossingRecommenderEvaluatorRunner.java
@@ -20,10 +20,12 @@
 import org.apache.mahout.cf.taste.common.TasteException;
 import org.apache.mahout.cf.taste.eval.RecommenderEvaluator;
 import org.apache.mahout.cf.taste.impl.eval.AverageAbsoluteDifferenceRecommenderEvaluator;
+import org.apache.mahout.cf.taste.model.DataModel;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
+import java.io.File;
 
 public final class BookCrossingRecommenderEvaluatorRunner {
 
@@ -35,12 +37,18 @@ private BookCrossingRecommenderEvaluatorRunner() {
 
   public static void main(String... args) throws IOException, TasteException {
     RecommenderEvaluator evaluator = new AverageAbsoluteDifferenceRecommenderEvaluator();
-    BookCrossingDataModel model = new BookCrossingDataModel();
-    double evaluation = evaluator.evaluate(new BookCrossingRecommenderBuilder(model),
+    DataModel model;
+    if (args.length >= 1) {
+      model = new BookCrossingDataModel(new File(args[0]));
+    } else {
+      model = new BookCrossingDataModel();
+    }
+
+    double evaluation = evaluator.evaluate(new BookCrossingRecommenderBuilder(),
                                            null,
                                            model,
-                                           0.9,
-                                           0.1);
+                                           0.95,
+                                           0.05);
     log.info(String.valueOf(evaluation));
   }
 
