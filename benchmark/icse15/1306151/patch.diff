diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
index 21099eba..8ea030c5 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
@@ -92,13 +92,23 @@ public void prepare(ResponseBuilder rb) throws IOException
 
     String defType = params.get(QueryParsing.DEFTYPE,QParserPlugin.DEFAULT_QTYPE);
 
-    if (rb.getQueryString() == null) {
-      rb.setQueryString( params.get( CommonParams.Q ) );
+    // get it from the response builder to give a different component a chance
+    // to set it.
+    String queryString = rb.getQueryString();
+    if (queryString == null) {
+      // this is the normal way it's set.
+      queryString = params.get( CommonParams.Q );
+      rb.setQueryString(queryString);
     }
 
     try {
       QParser parser = QParser.getParser(rb.getQueryString(), defType, req);
-      rb.setQuery( parser.getQuery() );
+      Query q = parser.getQuery();
+      if (q == null) {
+        // normalize a null query to a query that matches nothing
+        q = new BooleanQuery();        
+      }
+      rb.setQuery( q );
       rb.setSortSpec( parser.getSort(true) );
       rb.setQparser(parser);
 
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/DisMaxQParser.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/DisMaxQParser.java
index b3b9cb69..abae20b3 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/DisMaxQParser.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/DisMaxQParser.java
@@ -20,7 +20,6 @@
 import org.apache.lucene.search.BooleanClause;
 import org.apache.lucene.search.BooleanQuery;
 import org.apache.lucene.search.Query;
-import org.apache.solr.common.SolrException;
 import org.apache.solr.common.params.DisMaxParams;
 import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.common.util.NamedList;
@@ -75,7 +74,9 @@ public Query parse() throws ParseException {
      */
     BooleanQuery query = new BooleanQuery(true);
 
-    addMainQuery(query, solrParams);
+    boolean notBlank = addMainQuery(query, solrParams);
+    if (!notBlank)
+      return null;
     addBoostQuery(query, solrParams);
     addBoostFunctions(query, solrParams);
 
@@ -134,7 +135,8 @@ protected void addBoostQuery(BooleanQuery query, SolrParams solrParams) throws P
     }
   }
 
-  protected void addMainQuery(BooleanQuery query, SolrParams solrParams) throws ParseException {
+  /** Adds the main query to the query argument. If its blank then false is returned. */
+  protected boolean addMainQuery(BooleanQuery query, SolrParams solrParams) throws ParseException {
     Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));
     float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);
 
@@ -153,6 +155,8 @@ protected void addMainQuery(BooleanQuery query, SolrParams solrParams) throws Pa
     if (userQuery == null || userQuery.trim().length() < 1) {
       // If no query is specified, we may have an alternate
       altUserQuery = getAlternateUserQuery(solrParams);
+      if (altUserQuery == null)
+        return false;
       query.add(altUserQuery, BooleanClause.Occur.MUST);
     } else {
       // There is a valid query string
@@ -167,6 +171,7 @@ protected void addMainQuery(BooleanQuery query, SolrParams solrParams) throws Pa
         query.add(phrase, BooleanClause.Occur.SHOULD);
       }
     }
+    return true;
   }
 
   protected Query getAlternateUserQuery(SolrParams solrParams) throws ParseException {
@@ -175,7 +180,7 @@ protected Query getAlternateUserQuery(SolrParams solrParams) throws ParseExcepti
       QParser altQParser = subQuery(altQ, null);
       return altQParser.getQuery();
     } else {
-      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "missing query string");
+      return null;
     }
   }
 
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java
index 5dacad6e..63fd46ea 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java
@@ -27,14 +27,12 @@
 import org.apache.lucene.search.*;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.TokenStream;
-import org.apache.solr.common.SolrException;
 import org.apache.solr.search.SolrQueryParser.MagicFieldName;
 import org.apache.solr.common.params.DisMaxParams;
 import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.schema.FieldType;
-import org.apache.solr.search.QueryUtils;
 import org.apache.solr.search.function.BoostedQuery;
 import org.apache.solr.search.function.FunctionQuery;
 import org.apache.solr.search.function.ProductFloatFunction;
@@ -166,7 +164,8 @@ public Query parse() throws ParseException {
         altUserQuery = altQParser.getQuery();
         query.add( altUserQuery , BooleanClause.Occur.MUST );
       } else {
-        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, "missing query string" );
+        return null;
+        // throw new ParseException("missing query string" );
       }
     }
     else {     
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/LuceneQParserPlugin.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/LuceneQParserPlugin.java
index 8c764fdb..f6eca31a 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/LuceneQParserPlugin.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/LuceneQParserPlugin.java
@@ -20,7 +20,6 @@
 import org.apache.lucene.queryParser.QueryParser;
 import org.apache.lucene.search.Query;
 import org.apache.lucene.search.Sort;
-import org.apache.solr.common.SolrException;
 import org.apache.solr.common.params.CommonParams;
 import org.apache.solr.common.params.SolrParams;
 import org.apache.solr.common.util.NamedList;
@@ -49,7 +48,6 @@ public QParser createParser(String qstr, SolrParams localParams, SolrParams para
 }
 
 class LuceneQParser extends QParser {
-  String sortStr;
   SolrQueryParser lparser;
 
   public LuceneQParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {
@@ -60,6 +58,7 @@ public LuceneQParser(String qstr, SolrParams localParams, SolrParams params, Sol
   @Override
   public Query parse() throws ParseException {
     String qstr = getString();
+    if (qstr == null || qstr.length()==0) return null;
 
     String defaultField = getParam(CommonParams.DF);
     if (defaultField==null) {
@@ -83,7 +82,7 @@ public Query parse() throws ParseException {
 
   @Override
   public String[] getDefaultHighlightFields() {
-    return new String[]{lparser.getField()};
+    return lparser == null ? new String[]{} : new String[]{lparser.getField()};
   }
   
 }
@@ -101,6 +100,8 @@ public Query parse() throws ParseException {
     // handle legacy "query;sort" syntax
     if (getLocalParams() == null) {
       String qstr = getString();
+      if (qstr == null || qstr.length() == 0)
+        return null;
       sortStr = getParams().get(CommonParams.SORT);
       if (sortStr == null) {
         // sort may be legacy form, included in the query string
@@ -113,7 +114,7 @@ public Query parse() throws ParseException {
           qstr = commands.get(0);
         }
         else if (commands.size() > 2) {
-          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "If you want to use multiple ';' in the query, use the 'sort' param.");
+          throw new ParseException("If you want to use multiple ';' in the query, use the 'sort' param.");
         }
       }
       setString(qstr);
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/QParser.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/QParser.java
index 0b8500db..a8a9972d 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/QParser.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/QParser.java
@@ -94,7 +94,8 @@ private static void addTag(Map tagMap, Object key, Object val) {
     lst.add(val);
   }
 
-  /** Create and return the <code>Query</code> object represented by <code>qstr</code>
+  /** Create and return the <code>Query</code> object represented by <code>qstr</code>.  Null MAY be returned to signify
+   * there was no input (e.g. no query string) to parse.
    * @see #getQuery()
    **/
   public abstract Query parse() throws ParseException;
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/search/QueryParsingTest.java b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/search/QueryParsingTest.java
index 6601c210..889aa777 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/search/QueryParsingTest.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/search/QueryParsingTest.java
@@ -16,6 +16,7 @@
  * limitations under the License.
  */
 
+import org.apache.lucene.search.Query;
 import org.apache.lucene.search.Sort;
 import org.apache.lucene.search.SortField;
 import org.apache.solr.SolrTestCaseJ4;
@@ -35,6 +36,40 @@ public static void beforeClass() throws Exception {
     initCore("solrconfig.xml","schema.xml");
   }
 
+  /**
+   * Test that the main QParserPlugins people are likely to use
+   * as defaults fail with a consistent exception when the query string 
+   * is either empty or null.
+   * @see <a href="https://issues.apache.org/jira/browse/SOLR-435">SOLR-435</a>
+   * @see <a href="https://issues.apache.org/jira/browse/SOLR-2001">SOLR-2001</a>
+   */
+  public void testQParserEmptyInput() throws Exception {
+    
+    SolrQueryRequest req = req();
+    
+    final String[] parsersTested = new String[] {
+      OldLuceneQParserPlugin.NAME,
+      LuceneQParserPlugin.NAME,
+      DisMaxQParserPlugin.NAME,
+      ExtendedDismaxQParserPlugin.NAME
+    };
+
+    for (String defType : parsersTested) {
+      for (String qstr : new String[] {null, ""}) {
+        QParser parser = null;
+        try {
+          parser = QParser.getParser(qstr, defType, req);
+        } catch (Exception e) {
+          throw new RuntimeException("getParser excep using defType=" + 
+                                     defType + " with qstr="+qstr, e);
+        }
+        
+        Query q = parser.parse();
+        assertNull("expected no query",q);
+      }
+    }
+  }
+  
   @Test
   public void testSort() throws Exception {
     Sort sort;
