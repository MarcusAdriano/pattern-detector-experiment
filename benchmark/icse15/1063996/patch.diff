diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/AutoloadedDriver.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/AutoloadedDriver.java
index aff174fb..4d126c12 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/AutoloadedDriver.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/AutoloadedDriver.java
@@ -34,6 +34,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.reference.Attribute;
 import org.apache.derby.iapi.services.i18n.MessageService;
 import org.apache.derby.iapi.jdbc.JDBCBoot;
+import org.apache.derby.shared.common.sanity.SanityManager;
 
 
 /**
@@ -59,6 +60,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	// This flag is set if the engine is forcibly brought down.
 	private	static	boolean	_engineForcedDown = false;
 	
+    // This flag is set if AutoloadedDriver exists
+    private static boolean activeautoloadeddriver = false;
+
+    //This is the driver that memorizes the autoloadeddriver (DERBY-2905)
+    private static Driver _autoloadedDriver;
+
 	//
 	// This is the driver that's specific to the JDBC level we're running at.
 	// It's the module which boots the whole Derby engine.
@@ -68,7 +75,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	static
 	{
 		try {
-			DriverManager.registerDriver( new AutoloadedDriver() );
+            _autoloadedDriver = new AutoloadedDriver();
+            DriverManager.registerDriver( _autoloadedDriver );
+            activeautoloadeddriver = true;
 		}
 		catch (SQLException se)
 		{
@@ -180,7 +189,7 @@ public boolean jdbcCompliant() {
 	*/
 	static	Driver getDriverModule() throws SQLException {
 
-		if ( _engineForcedDown )
+		if ( _engineForcedDown && (_autoloadedDriver == null))
 		{
 			// Driver not registered 
 			throw new SQLException
@@ -192,23 +201,45 @@ static	Driver getDriverModule() throws SQLException {
 		return _driverModule;
 	}
 	
-	/*
+	/**
 	** Record which driver module actually booted.
-	*/
+	*  @param driver the driver register to DriverManager is not AutoloadedDriver
+	**/
 	static	void	registerDriverModule( Driver driver )
 	{
 		_driverModule = driver;
 		_engineForcedDown = false;
+		
+        try {
+            if (!activeautoloadeddriver)
+                DriverManager.registerDriver(_driverModule);
+        } catch (SQLException e) {
+            if (SanityManager.DEBUG)
+                SanityManager.THROWASSERT(e);
+        }
 	}
 	
-	/*
-	** Unregister the driver. This happens when the engine is
-	** forcibly shut down.
-	*/
+	/**
+	** Unregister the driver and the AutoloadedDriver if exists. 
+	*  This happens when the engine is forcibly shut down.
+	*  
+	**/
 	static	void	unregisterDriverModule()
 	{
-		_driverModule = null;
 		_engineForcedDown = true;
+        try {
+            if (activeautoloadeddriver) {
+                DriverManager.deregisterDriver(_autoloadedDriver);
+                activeautoloadeddriver = false;
+                _autoloadedDriver = null;
+            } else {
+                DriverManager.deregisterDriver(_driverModule);
+            }
+            _driverModule = null;
+        } catch (SQLException e) {
+            if (SanityManager.DEBUG)
+                SanityManager.THROWASSERT(e);
+        }
 	}
 	
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java
index 9a4a8d29..e2c21e69 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/jdbc/EmbeddedDataSource.java
@@ -24,6 +24,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.reference.Attribute;
 
 import java.sql.Connection;
+import java.sql.Driver;
 import java.sql.DriverManager;
 import java.sql.SQLException;
 
@@ -501,11 +502,16 @@ InternalDriver findDriver() throws SQLException
 
 				// If we know the driver, we loaded it.   Otherwise only
 				// work if DriverManager has already loaded it.
-
+                // DriverManager will throw an exception if driver is not found
+                Driver registerDriver = DriverManager.getDriver(url);
+                if (registerDriver instanceof AutoloadedDriver) {
 				AutoloadedDriver	autoloadedDriver =
-					(AutoloadedDriver) DriverManager.getDriver(url);
-				driver = (InternalDriver) autoloadedDriver.getDriverModule();
-				// DriverManager will throw an exception if it cannot find the driver
+                        (AutoloadedDriver) registerDriver;
+                    driver = (InternalDriver) autoloadedDriver
+                            .getDriverModule();
+                } else {
+                    driver = (InternalDriver) registerDriver;
+                }
 			}
 		}
 		return driver;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java
index 4bef464c..27b6a69b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AutoloadTest.java
@@ -22,8 +22,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derbyTesting.functionTests.tests.jdbcapi;
 
 import java.sql.Driver;
+import java.sql.Connection;
 import java.sql.DriverManager;
 import java.sql.SQLException;
+import javax.sql.DataSource;
 import java.util.Enumeration;
 
 import junit.framework.Test;
@@ -33,6 +35,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.Derby;
 import org.apache.derbyTesting.junit.JDBC;
+import org.apache.derbyTesting.junit.JDBCDataSource;
 import org.apache.derbyTesting.junit.NetworkServerTestSetup;
 import org.apache.derbyTesting.junit.SecurityManagerSetup;
 import org.apache.derbyTesting.junit.TestConfiguration;
@@ -165,6 +168,10 @@ private static Test baseAutoLoadSuite(String which)
 
         suite.addTest(new AutoloadTest("testUnsuccessfulConnect"));
         suite.addTest(new AutoloadTest("testExplicitLoad"));
+
+	 if ("embedded".equals(which)) {
+            suite.addTest(new AutoloadTest("testAutoloadDriverUnregister"));
+        }
         return suite;
     }
 
@@ -174,6 +181,54 @@ private static Test baseAutoLoadSuite(String which)
 	//
 	// ///////////////////////////////////////////////////////////
     
+    /**
+     * Test DERBY-2905:Shutting down embedded Derby does not remove all code,
+     * the AutoloadDriver is left registered in the DriverManager.
+     * 
+     * @throws Exception
+     */
+    public void testAutoloadDriverUnregister() throws Exception {
+        if (usingEmbedded()) {
+            String AutoloadedDriver = "org.apache.derby.jdbc.AutoloadedDriver";
+            String Driver40 = "org.apache.derby.jdbc.Driver40";
+            String Driver30 = "org.apache.derby.jdbc.Driver30";
+            String Driver20 = "org.apache.derby.jdbc.Driver20";
+
+            // Test whether the Autoload driver successfully unregister after
+            // DB shutdown.
+            String url = getTestConfiguration().getJDBCUrl();
+            url = url.concat(";create=true");
+            String user = getTestConfiguration().getUserName();
+            String password = getTestConfiguration().getUserPassword();
+            DriverManager.getConnection(url, user, password);
+
+            assertTrue(getRegisteredDrivers(AutoloadedDriver));
+
+            // shut down engine
+            TestConfiguration.getCurrent().shutdownEngine();
+
+            assertFalse(getRegisteredDrivers(AutoloadedDriver));
+
+            // Test explicit loading of Embedded driver after Autoload driver
+            // is un-registered.
+            String driverClass = getTestConfiguration().getJDBCClient()
+                    .getJDBCDriverName();
+
+            Class.forName(driverClass).newInstance();
+            url = getTestConfiguration().getJDBCUrl();
+            user = getTestConfiguration().getUserName();
+            password = getTestConfiguration().getUserPassword();
+            DriverManager.getConnection(url, user, password);
+
+            // shut down engine
+            TestConfiguration.getCurrent().shutdownEngine();
+
+            assertFalse(getRegisteredDrivers(Driver40));
+            assertFalse(getRegisteredDrivers(Driver30));
+            assertFalse(getRegisteredDrivers(Driver20));
+        }
+    }
+    
     /**
      * @throws SQLException
      * 
@@ -197,8 +252,8 @@ public void testShutdownDeRegister() throws SQLException
         assertTrue(isEmbeddedDriverRegistered());
         TestConfiguration.getCurrent().shutdownEngine();
         
-        // DERBY-2905 - Autoload driver is left around.
-        // assertFalse(isEmbeddedDriverRegistered());   
+        // DERBY-2905 - Autoload driver is [not] left around.
+        assertFalse(isEmbeddedDriverRegistered());   
     }
     
     /**
@@ -388,6 +443,48 @@ public void testEmbeddedStarted()
         assertTrue(hasDerbyThreadGroup());
     }
     
+    private boolean getRegisteredDrivers(String driver) {
+
+	Enumeration e = DriverManager.getDrivers();
+
+        while(e.hasMoreElements())
+        {
+                Driver drv = (Driver)e.nextElement();
+                if(drv.getClass().getName().equals(driver))	
+			return true;
+        }
+
+	return false;
+    }
+
+    private void assertShutdownOK() throws SQLException {
+
+        Connection conn = getConnection();
+
+        if (usingEmbedded()) {
+            DataSource ds = JDBCDataSource.getDataSource();
+            JDBCDataSource.setBeanProperty(ds, "shutdownDatabase", "shutdown");
+            try {
+                ds.getConnection();
+                fail("expected shutdown to fail");
+            } catch (SQLException e) {
+                // expect 08006 on successful shutdown
+                assertSQLState("08006", e);
+            }
+            assertTrue(conn.isClosed());
+        } else if (usingDerbyNetClient()) {
+            DataSource ds = JDBCDataSource.getDataSource();
+            JDBCDataSource.setBeanProperty(ds, "connectionAttributes","shutdown=true");
+            try {
+                ds.getConnection();
+                fail("expected shutdown to fail");
+            } catch (SQLException e) {
+                // expect 08006 on successful shutdown
+                assertSQLState("08006", e);
+            }
+        }
+    }
+
     /**
      * Return true if a ThreadGroup exists that has a name
      * starting with 'derby.'. This needs to run without a security
