diff --git a/incubator/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java b/incubator/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java
index aebc86d1..47c15536 100644
--- a/incubator/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java
+++ b/incubator/derby/code/trunk/java/client/org/apache/derby/client/am/Connection.java
@@ -85,28 +85,13 @@
     protected boolean isXAConnection_ = false; // Indicates an XA connection
 
     // XA States
-    public static final int XA_OPEN_IDLE = 0;
-    public static final int XA_LOCAL = 1; // local transaction started by DNC
-    public static final int XA_LOCAL_CCC = 2; // local transaction started by CCC
-    public static final int XA_ACTIVE = 3;
-    public static final int XA_ENDED = 4;
-    public static final int XA_HEUR_COMP = 5;
-    public static final int XA_SUSPENDED = 6;
-    public static final int XA_PREPARED = 7;
-    public static final int XA_ROLLBACK = 8;
-    public static final int XA_LOCAL_START_SENT = 9;
-    public static final int XA_UNKNOWN = 10;
-    public static final int XA_GLOBAL_START_SENT = 11;
-    public static final int XA_PENDING_END = 12;
-    public static final int XA_RBATHER = 13;
-    public static final int XA_RECOVER = 14;
-    public static final int XA_EMPTY_TRANSACTION = 15;
-    public static final int XA_RBROLLBACK = 16;
-    public static final int XA_PENDING_START = 17;
-    public static final int XA_EMPTY_SUSPENDED = 18;
-
-
-    protected int xaState_ = XA_OPEN_IDLE;
+    public static final int XA_LOCAL = 0;   //  No global transaction in process
+    public static final int XA_GLOBAL = 1;  // Global transaction in process
+    //TODO: Remove entirely once indoubtlist is gone.  
+    //public static final int XA_RECOVER = 14;
+
+
+    protected int xaState_ = XA_LOCAL;
 
     // XA Host Type
     public int xaHostVersion_ = 0;
@@ -231,10 +216,7 @@ protected void resetConnection(LogWriter logWriter,
             dataSource_ = ds;
         }
 
-        // property isXAConnection_
-        // leave set to current value.  this will impact which connect reset flows are used.
 
-        xaState_ = XA_OPEN_IDLE;
         if (recomputeFromDataSource) {
             this.agent_.resetAgent(this, logWriter, loginTimeout_, serverNameIP_, portNumber_);
         }
@@ -265,11 +247,6 @@ protected void resetConnection(LogWriter logWriter,
         autoCommit_ = true;
         inUnitOfWork_ = false;
 
-        // property isXAConnection_
-        // leave set to current value.  this will impact which connect reset flows are used.
-
-        xaState_ = XA_OPEN_IDLE;
-
         this.agent_.resetAgent(this, logWriter, loginTimeout_, serverNameIP_, portNumber_);
 
     }
@@ -431,7 +408,7 @@ synchronized public String nativeSQLX(String sql) throws SqlException {
 
     // Driver-specific determination if local COMMIT/ROLLBACK is allowed;
     // primary usage is distinction between local and global trans. envs.;
-    protected abstract boolean disallowLocalCommitRollback_() throws org.apache.derby.client.am.SqlException;
+    protected abstract boolean allowLocalCommitRollback_() throws org.apache.derby.client.am.SqlException;
 
     synchronized public void setAutoCommit(boolean autoCommit) throws SqlException {
         if (agent_.loggingEnabled()) {
@@ -439,7 +416,7 @@ synchronized public void setAutoCommit(boolean autoCommit) throws SqlException {
         }
         checkForClosedConnection();
 
-        if (disallowLocalCommitRollback_()) {
+        if (! allowLocalCommitRollback_()) {
             if (autoCommit) { // can't toggle to autocommit mode when between xars.start() and xars.end()
                 throw new SqlException(agent_.logWriter_,
                         "setAutoCommit(true) invalid during global transaction",
@@ -462,7 +439,7 @@ public boolean getAutoCommit() throws SqlException {
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceExit(this, "getAutoCommit", autoCommit_);
         }
-        if (disallowLocalCommitRollback_()) { // autoCommit is always false between xars.start() and xars.end()
+        if (! allowLocalCommitRollback_()) { // autoCommit is always false between xars.start() and xars.end()
             return false;
         }
         return autoCommit_;
@@ -484,7 +461,7 @@ synchronized public void commit() throws SqlException {
     }
 
     private void checkForInvalidXAStateOnCommitOrRollback() throws SqlException {
-        if (disallowLocalCommitRollback_()) {
+        if (! allowLocalCommitRollback_()) {
             throw new SqlException(agent_.logWriter_,
                     "COMMIT or ROLLBACK invalid for application execution environment",
                     SqlState._2D521, // Spec'ed by PROTOCOL
@@ -532,7 +509,7 @@ public boolean willAutoCommitGenerateFlow() throws org.apache.derby.client.am.Sq
         if (!autoCommit_) {
             return false;
         }
-        if (disallowLocalCommitRollback_()) {
+        if (! allowLocalCommitRollback_()) {
             return false;
         }
         return true;
@@ -547,8 +524,7 @@ void writeAutoCommit() throws SqlException {
 
     public void writeCommit() throws SqlException {
         if (isXAConnection_) {
-            if ((xaState_ == XA_LOCAL) ||
-                    (xaState_ == XA_LOCAL_START_SENT)) {
+            if ((xaState_ == XA_LOCAL) ) {
                 writeLocalXACommit_();
             }
         } else {
@@ -565,10 +541,8 @@ void readAutoCommit() throws SqlException {
 
     public void readCommit() throws SqlException {
         if (isXAConnection_) {
-            if ((xaState_ == XA_LOCAL) ||
-                    (xaState_ == XA_LOCAL_START_SENT)) {
+            if ((xaState_ == XA_LOCAL) ) {
                 readLocalXACommit_();
-                setXAState(XA_OPEN_IDLE);
             }
         } else {
             readLocalCommit_();
@@ -627,7 +601,6 @@ public void writeRollback() throws SqlException {
     public void readRollback() throws SqlException {
         if (isXAConnection_) {
             readLocalXARollback_();
-            setXAState(XA_OPEN_IDLE);
         } else {
             readLocalRollback_();
         }
@@ -700,7 +673,6 @@ synchronized public void closeForReuse() throws SqlException {
         if (!open_) {
             return;
         }
-        checkForTransactionInProgress();
         resetConnectionAtFirstSql_ = false; // unset indicator of deferred reset
         SqlException accumulatedExceptions = null;
         try {
@@ -772,6 +744,15 @@ private void readCloseStatements() throws SqlException {
         }
     }
 
+   /**
+    * 	Return true if the physical connection is still open.
+    * 	Might be logically closed but available for reuse.
+    *   @return true if physical connection still open
+    */
+    public boolean isPhysicallyClosed() {
+    return !open_ && !availableForReuse_; 
+   }
+
 
     public boolean isClosed() {
         if (agent_.loggingEnabled()) {
@@ -780,6 +761,7 @@ public boolean isClosed() {
         return !open_;
     }
 
+   
     public boolean isClosedX() {
         return !open_;
     }
@@ -1037,10 +1019,6 @@ public int getHoldability() throws SqlException {
         if (autoCommit_) // Throw exception if auto-commit is on
         {
             throw new SqlException(agent_.logWriter_, "Cannot set savepoint when in auto-commit mode.");
-        } else if (xaState_ == XA_PENDING_START ||
-                xaState_ == XA_ACTIVE) // Throw exception if in distributed transaction
-        {
-            throw new SqlException(agent_.logWriter_, "Cannot set savepoint during distributed transaction.");
         }
         // create an un-named savepoint.
         if ((++dncGeneratedSavepointId_) < 0) {
@@ -1061,10 +1039,6 @@ public int getHoldability() throws SqlException {
         } else if (autoCommit_) // Throw exception if auto-commit is on
         {
             throw new SqlException(agent_.logWriter_, "Cannot set savepoint when in auto-commit mode.");
-        } else if (xaState_ == XA_PENDING_START ||
-                xaState_ == XA_ACTIVE) // Throw exception if in distributed transaction
-        {
-            throw new SqlException(agent_.logWriter_, "Cannot set savepoint during distributed transaction.");
         }
         // create a named savepoint.
         Object s = setSavepointX(new Savepoint(agent_, name));
@@ -1112,10 +1086,6 @@ synchronized public void rollback(java.sql.Savepoint savepoint) throws SqlExcept
         } else if (autoCommit_) // Throw exception if auto-commit is on
         {
             throw new SqlException(agent_.logWriter_, "Cannot rollback to a savepoint when in auto-commit mode.");
-        } else if (xaState_ == XA_PENDING_START ||
-                xaState_ == XA_ACTIVE) // Throw exception if in distributed transaction
-        {
-            throw new SqlException(agent_.logWriter_, "Cannot rollback to a savepoint during distributed transaction.");
         }
         // Only allow to rollback to a savepoint from the connection that create the savepoint.
         try {
@@ -1167,10 +1137,6 @@ synchronized public void releaseSavepoint(java.sql.Savepoint savepoint) throws S
         } else if (autoCommit_) // Throw exception if auto-commit is on
         {
             throw new SqlException(agent_.logWriter_, "Cannot release a savepoint when in auto-commit mode.");
-        } else if (xaState_ == XA_PENDING_START ||
-                xaState_ == XA_ACTIVE) // Throw exception if in distributed transaction
-        {
-            throw new SqlException(agent_.logWriter_, "Cannot release a savepoint during distributed transaction.");
         }
         // Only allow to release a savepoint from the connection that create the savepoint.
         try {
diff --git a/incubator/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java b/incubator/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java
index 31a8bfac..9e1752ea 100644
--- a/incubator/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java
+++ b/incubator/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java
@@ -1189,7 +1189,7 @@ private boolean willTickleServer(int number, boolean allowAutoCommits) throws Sq
         }
         if (connection_.autoCommit_ && requiresAutocommit) { // for the auto-commit;
             if (connection_.isXAConnection_) {
-                return (connection_.xaState_ == Connection.XA_LOCAL) || (connection_.xaState_ == Connection.XA_LOCAL_START_SENT);
+                return (connection_.xaState_ == Connection.XA_LOCAL) ;
             } else {
                 return true;
             }
@@ -1268,7 +1268,7 @@ boolean writeCloseResultSets(int number, boolean allowAutoCommits) throws SqlExc
         if (connection_.autoCommit_ && requiresAutocommit && isAutoCommittableStatement_) {
             connection_.writeAutoCommit();
             if (connection_.isXAConnection_) {
-                return (connection_.xaState_ == Connection.XA_LOCAL) || (connection_.xaState_ == Connection.XA_LOCAL_START_SENT);
+                return (connection_.xaState_ == Connection.XA_LOCAL) ;
             } else {
                 return true;
             }
diff --git a/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java b/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java
index 2c09e4b5..ab3b008e 100644
--- a/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java
+++ b/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnection.java
@@ -1364,12 +1364,10 @@ protected boolean allowCloseInUOW_() {
     }
 
     // Driver-specific determination if local COMMIT/ROLLBACK is allowed;
-    // allow if local trans, disallow if global trans
-    protected boolean disallowLocalCommitRollback_() throws org.apache.derby.client.am.SqlException {
-        if (!((xaState_ == XA_OPEN_IDLE) ||
-                (xaState_ == XA_RECOVER) ||
-                (xaState_ == XA_LOCAL_START_SENT) ||
-                (xaState_ == XA_LOCAL))) {
+    // Allow local COMMIT/ROLLBACK only if we are not in an XA transaction
+    protected boolean allowLocalCommitRollback_() throws org.apache.derby.client.am.SqlException {
+       
+    	if (xaState_ == XA_LOCAL) {
             return true;
         }
         return false;
@@ -1472,9 +1470,8 @@ public boolean willAutoCommitGenerateFlow() {
         boolean doCommit = false;
         int xaState = getXAState();
 
-        if ((xaState == XA_OPEN_IDLE) ||
-                (xaState == XA_LOCAL) ||
-                (xaState == XA_LOCAL_START_SENT)) {
+        
+        if (xaState == XA_LOCAL) {
             doCommit = true;
         }
 
diff --git a/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetXACallInfo.java b/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetXACallInfo.java
index 7deacb46..4fdd2768 100644
--- a/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetXACallInfo.java
+++ b/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetXACallInfo.java
@@ -44,7 +44,6 @@
 public class NetXACallInfo {
     Xid xid_;                         // current xid
     int xaFlags_;                     // current xaFlags
-    int xaState_;                     // used as a save area when switching connection
     // may not be needed!!!~~~
     int xaFunction_;                  // queued XA function being performed
     int xaRetVal_;                    // xaretval from server
@@ -74,7 +73,6 @@
     public NetXACallInfo() {
         xid_ = null;
         xaFlags_ = XAResource.TMNOFLAGS;
-        xaState_ = Connection.XA_OPEN_IDLE;
         xaInProgress_ = false;
         currConnection_ = false;
         freeEntry_ = true;
@@ -86,11 +84,9 @@ public NetXACallInfo() {
         xaWasSuspended = false;
     }
 
-    public NetXACallInfo(Xid xid, int flags, int state,
-                         NetXAResource xares, NetXAConnection actualConn) {
+    public NetXACallInfo(Xid xid, int flags, NetXAResource xares, NetXAConnection actualConn) {
         xid_ = xid;
         xaFlags_ = flags;
-        xaState_ = state;
         xaInProgress_ = false;
         currConnection_ = false;
         freeEntry_ = true;
diff --git a/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAConnection.java b/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAConnection.java
index 37c04b4a..fa0c32c7 100644
--- a/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAConnection.java
+++ b/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAConnection.java
@@ -87,7 +87,8 @@ public void writeTransactionStart(Statement statement) throws SqlException {
         // this is a XA connection
         int xaState = getXAState();
         xares_.exceptionsOnXA = null;
-
+        //TODO: Looks like this can go and also the whole client indoubtTransaction code.
+        /*
         if (xaState == XA_RECOVER) { // in recover, clean up and go to open-idle
             if (indoubtTransactions_ != null) {
                 indoubtTransactions_.clear();
@@ -95,7 +96,8 @@ public void writeTransactionStart(Statement statement) throws SqlException {
                 setXAState(XA_OPEN_IDLE);
                 xaState = XA_OPEN_IDLE;
             }
-        }
+            
+        }*/
         // For derby we don't need to write transaction start for a local
         //transaction.  If autocommit is off we are good to go.
         return;
@@ -130,11 +132,9 @@ public void writeCommit() throws SqlException {
         // this logic must be in sync with willAutoCommitGenerateFlow() logic
         if (isXAConnection_) { // XA Connection
             int xaState = getXAState();
-            if ((xaState == XA_OPEN_IDLE) ||
-                    (xaState == XA_LOCAL) ||
-                    (xaState == XA_LOCAL_START_SENT)) {
+            if (xaState == XA_LOCAL){
                 xares_.callInfoArray_[xares_.conn_.currXACallInfoOffset_].xid_ =
-                        xares_.nullXid;
+                        NetXAResource.nullXid;
                 writeLocalXACommit_();
             }
         } else { // not XA connection
@@ -147,11 +147,10 @@ public void readCommit() throws SqlException {
             int xaState = getXAState();
             NetXACallInfo callInfo = xares_.callInfoArray_[currXACallInfoOffset_];
             callInfo.xaRetVal_ = NetXAResource.XARETVAL_XAOK; // initialize XARETVAL
-            if ((xaState == XA_OPEN_IDLE) ||
-                    (xaState == XA_LOCAL) ||
-                    (xaState == XA_LOCAL_START_SENT)) {
+            if (xaState == XA_LOCAL) {
                 readLocalXACommit_();
-                setXAState(XA_OPEN_IDLE);
+                //TODO: Remove
+                //setXAState(XA_LOCAL);
             }
             if (callInfo.xaRetVal_ != NetXAResource.XARETVAL_XAOK) { // xaRetVal has possible error, format it
                 callInfo.xaFunction_ = NetXAResource.XAFUNC_COMMIT;
@@ -191,7 +190,8 @@ public void readRollback() throws SqlException {
 
 
             // for all XA connectiions
-            setXAState(XA_OPEN_IDLE);
+            // TODO:KATHEY - Do we need this?
+            setXAState(XA_LOCAL);
         } else {
             readLocalRollback_(); // non-XA connections
         }
diff --git a/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAResource.java b/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAResource.java
index a8a859c5..3886267b 100644
--- a/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAResource.java
+++ b/incubator/derby/code/trunk/java/client/org/apache/derby/client/net/NetXAResource.java
@@ -121,17 +121,14 @@
     protected NetXAResource nextSameRM_ = null;
     protected boolean ignoreMe_ = false;
 
-    /* KATHEY CHECK THIS COMMENT TOO.
-     * Need to remove NetXAResource objects from this group when they are
-     *  freed.
-     */
+
 
     public org.apache.derby.client.am.SqlException exceptionsOnXA = null;
 
     XAConnection xaconn_;
     org.apache.derby.client.net.NetXAConnection conn_;
     int rmId_; // unique RmId generated by XAConnection
-    // KATHEY change to a single callInfo field (not an array)
+    // TODO: change to a single callInfo field (not an array)
     NetXACallInfo callInfoArray_[] =
             new NetXACallInfo[INITIAL_CALLINFO_ELEMENTS];
     int numXACallInfo_ = INITIAL_CALLINFO_ELEMENTS;
@@ -139,7 +136,7 @@
     int activeXATransCount_ = 0;
     String rmIdx_; // userid in case we need to create a secondary connection
     String rmIdy_; // password in case we need to create a secondary connection
-    // KATHEY remove port and ipaddr_
+    // TODO: remove port and ipaddr_
     int port_;     // port needed to make secondary connection for recover in DS mode.
     String ipaddr_;  // ip address needed to make secondary connection for recover in DS mode.
 
@@ -162,8 +159,7 @@ public NetXAResource(XAConnection xaconn, int rmId,
 
         // construct the NetXACallInfo object for the array.
         for (int i = 0; i < INITIAL_CALLINFO_ELEMENTS; ++i) {
-            callInfoArray_[i] = new NetXACallInfo(null, XAResource.TMNOFLAGS,
-                    Connection.XA_OPEN_IDLE, this,
+            callInfoArray_[i] = new NetXACallInfo(null, XAResource.TMNOFLAGS, this,
                     null);
         }
 
@@ -187,7 +183,7 @@ public void commit(Xid xid, boolean onePhase) throws XAException {
         if (conn_.agent_.loggingEnabled()) {
             conn_.agent_.logWriter_.traceEntry(this, "commit", xid, onePhase);
         }
-        if (conn_.isClosed()) {
+        if (conn_.isPhysicallyClosed()) {
             connectionClosedFailure();
         }
 
@@ -219,6 +215,9 @@ public void commit(Xid xid, boolean onePhase) throws XAException {
         if (rc != XAResource.XA_OK) {
             throwXAException(rc, false);
         }
+        else {
+        	conn_.setXAState(Connection.XA_LOCAL);
+        }
     }
 
     /**
@@ -248,7 +247,7 @@ public void end(Xid xid, int flags) throws XAException {
         if (conn_.agent_.loggingEnabled()) {
             conn_.agent_.logWriter_.traceEntry(this, "end", xid, flags);
         }
-        if (conn_.isClosed()) {
+        if (conn_.isPhysicallyClosed()) {
             connectionClosedFailure();
         }
 
@@ -279,8 +278,6 @@ public void end(Xid xid, int flags) throws XAException {
         }
         if (rc != XAResource.XA_OK) {
             throwXAException(rc, false);
-        } else {
-            conn_.setXAState(Connection.XA_ENDED);
         }
 
     }
@@ -302,7 +299,7 @@ public void forget(Xid xid) throws XAException {
         if (conn_.agent_.loggingEnabled()) {
             conn_.agent_.logWriter_.traceEntry(this, "forget", xid);
         }
-        if (conn_.isClosed()) {
+        if (conn_.isPhysicallyClosed()) {
             connectionClosedFailure();
         }
         NetXACallInfo callInfo = callInfoArray_[conn_.currXACallInfoOffset_];
@@ -355,7 +352,7 @@ public int getTransactionTimeout() throws XAException {
             conn_.agent_.logWriter_.traceEntry(this, "getTransactionTimeout");
         }
         exceptionsOnXA = null;
-        if (conn_.isClosed()) {
+        if (conn_.isPhysicallyClosed()) {
             connectionClosedFailure();
         }
 
@@ -384,7 +381,7 @@ public int prepare(Xid xid) throws XAException { // public interface for prepare
         if (conn_.agent_.loggingEnabled()) {
             conn_.agent_.logWriter_.traceEntry(this, "prepare", xid);
         }
-        if (conn_.isClosed()) {
+        if (conn_.isPhysicallyClosed()) {
             connectionClosedFailure();
         }
 
@@ -450,7 +447,7 @@ public int prepare(Xid xid) throws XAException { // public interface for prepare
             conn_.agent_.logWriter_.traceEntry(this, "recover", flag);
         }
         exceptionsOnXA = null;
-        if (conn_.isClosed()) {
+        if (conn_.isPhysicallyClosed()) {
             connectionClosedFailure();
         }
 
@@ -515,7 +512,7 @@ public void rollback(Xid xid) throws XAException {
         if (conn_.agent_.loggingEnabled()) {
             conn_.agent_.logWriter_.traceEntry(this, "rollback", xid);
         }
-        if (conn_.isClosed()) {
+        if (conn_.isPhysicallyClosed()) {
             connectionClosedFailure();
         }
 
@@ -546,7 +543,9 @@ public void rollback(Xid xid) throws XAException {
         if (rc != XAResource.XA_OK) {
             throwXAException(rc, false);
         }
-
+        else {
+        	conn_.setXAState(Connection.XA_LOCAL);
+        }
     }
 
     /**
@@ -586,7 +585,7 @@ public synchronized void start(Xid xid, int flags) throws XAException {
         if (conn_.agent_.loggingEnabled()) {
             conn_.agent_.logWriter_.traceEntry(this, "start", xid, flags);
         }
-        if (conn_.isClosed()) {
+        if (conn_.isPhysicallyClosed()) {
             connectionClosedFailure();
         }
 
@@ -610,7 +609,7 @@ public synchronized void start(Xid xid, int flags) throws XAException {
             // Setting this is currently required to avoid client from sending
             // commit for autocommit.
             if (rc == XARETVAL_XAOK) {
-                conn_.setXAState(Connection.XA_ACTIVE);
+                conn_.setXAState(Connection.XA_GLOBAL);
             }
 
         } catch (SqlException sqle) {
@@ -720,8 +719,6 @@ protected void throwXAException(int rc, boolean resetFlag) throws XAException {
             NetXACallInfo callInfo = callInfoArray_[conn_.currXACallInfoOffset_];
             callInfo.xaInProgress_ = false;
             callInfo.xaWasSuspended = false;
-            callInfo.xaState_ = Connection.XA_OPEN_IDLE;
-            conn_.setXAState(Connection.XA_OPEN_IDLE);
         }
 
         xaExceptionText = getXAExceptionText(rc);
@@ -748,7 +745,7 @@ public boolean isSameRM(XAResource xares) throws XAException {
         if (conn_.agent_.loggingEnabled()) {
             conn_.agent_.logWriter_.traceEntry(this, "isSameRM", xares);
         }
-        if (conn_.isClosed()) {
+        if (conn_.isPhysicallyClosed()) {
             connectionClosedFailure();
         }
 
@@ -828,77 +825,6 @@ public static boolean xidsEqual(Xid xid1, Xid xid2) { // determine if the 2 xids
     }
 
 
-    // KATHEY remove
-    protected void makeEntryCurrent(int offset) throws SqlException {
-        int currOffset = conn_.currXACallInfoOffset_; // offset of current XACallInfo
-        NetXACallInfo newCallInfo = callInfoArray_[offset];
-        if (conn_.agent_.loggingEnabled()) {
-            conn_.agent_.logWriter_.traceEntry
-                    (this, "makeEntryCurrent", offset, currOffset);
-        }
-
-        if (currOffset == offset) { // entry is already current
-            if (newCallInfo.convReleased_ &&
-                    !newCallInfo.xaInProgress_) { // connection reuse, XA is not in Progress, reset connection
-// transaction pooling
-                newCallInfo.convReleased_ = false;
-                if (!conn_.resetConnectionAtFirstSql_) { // resetConnectionAtFirstSql_ is false
-/*
-            * at this point we have determined that a reset of this connection
-            * is required. We are already inside beginWriteChain() where a
-            * deferred reset would be done, however we might have switched
-            * connection to a connection that needed reset from a connection
-            * that didn't need reset. It is too late for the test for deferred
-            * reset in beginWriteChain so we call writeDeferredReset here.
-            * by setting the resetConnectionAtFirstSql_ flag we trigger the
-            * readDeferredReset in beginReadChain. This is done ONLY if
-            * resetConnectionAtFirstSql_ is not set, if it is then
-            * writeDeferredReset() has already been done.
-            */
-                    conn_.resetConnectionAtFirstSql_ = true;
-                    conn_.writeDeferredReset();
-                }
-            }
-            return; // entry is already current, nothing to do
-        }
-
-        callInfoArray_[currOffset].currConnection_ = false; // reset old current conn
-        callInfoArray_[currOffset].xaState_ = conn_.getXAState(); // save XA state
-        callInfoArray_[currOffset].freeEntry_ = false; // set entry in use
-
-// set the new entry as the current entry, update conn_
-        newCallInfo.currConnection_ = true;
-        conn_.currXACallInfoOffset_ = offset;
-        conn_.setXAState(newCallInfo.xaState_);
-
-        if (newCallInfo.convReleased_ &&
-                !newCallInfo.xaInProgress_) { // connection reuse, XA is not in Progress, reset connection
-// transaction pooling
-            newCallInfo.convReleased_ = false;
-            if (!conn_.resetConnectionAtFirstSql_) { // resetConnectionAtFirstSql_ is false
-/*
-          * at this point we have determined that a reset of this connection
-          * is required. We are already inside beginWriteChain() where a
-          * deferred reset would be done, however we might have switched
-          * connection to a connection that needed reset from a connection
-          * that didn't need reset. It is too late for the test for deferred
-          * reset in beginWriteChain so we call writeDeferredReset here.
-          * by setting the resetConnectionAtFirstSql_ flag we trigger the
-          * readDeferredReset in beginReadChain. This is done ONLY if
-          * resetConnectionAtFirstSql_ is not set, if it is then
-          * writeDeferredReset() has already been done.
-          */
-                conn_.resetConnectionAtFirstSql_ = true;
-                conn_.writeDeferredReset();
-            }
-        }
-
-        if (conn_.agent_.loggingEnabled()) { // logging enabled
-            conn_.agent_.logWriter_.traceExit(this, "makeEntryCurrent", offset);
-        }
-    }
-
-
     public List getSpecialRegisters() {
         return specialRegisters_;
     }
diff --git a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/XADatabase.java b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/XADatabase.java
index dfb74c97..e13feb60 100644
--- a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/XADatabase.java
+++ b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/XADatabase.java
@@ -74,10 +74,21 @@ protected synchronized Connection makeConnection(Properties p) throws
 		appendAttrString(p);
 		if (attrString != null)
 			xaDataSource.setConnectionAttributes(attrString);
+		
+		Connection conn = getConnection();
+		// If we have no existing connection. this is a brand new XAConnection.
+		if (conn == null)
+		{
 		xaConnection = xaDataSource.getXAConnection(userId,password);
 		xaResource = xaConnection.getXAResource();
+		}
+		else // this is just a connection reset. Close the logical connection.
+		{
+			conn.close();
+		}
 
-		Connection conn = xaConnection.getConnection();
+		// Get a new logical connection.
+		conn = xaConnection.getConnection();
 		setConnection(conn);
 		return conn;
 		
diff --git a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultset.java b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultset.java
index 0d05f699..7c697b56 100644
--- a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultset.java
+++ b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultset.java
@@ -28,6 +28,7 @@
 import java.sql.Statement;
 import java.sql.SQLException;
 import java.sql.Types;
+import java.util.Properties;
 
 import java.lang.reflect.*;
 
@@ -45,6 +46,8 @@
  *
  * Test is only touching on known result set hot-spots at present.
  *
+ * Modified May 31, 2005 pwilder
+ *
  * @author ames
  */
 
@@ -71,10 +74,13 @@ public static void main(String[] args) {
 
 		try
 		{
+			
 			// use the ij utility to read the property file and
 			// make the initial connection.
+			
 			ij.getPropertyArg(args);
 			con = ij.startJBMS();
+			testImplicitClose(con);
 			// Test setCatalog/getCatalog for beetle 5504
 			con.setCatalog("mycatalog");
 			String cat = con.getCatalog();
@@ -526,6 +532,8 @@ public static void main(String[] args) {
 
 			testMutableValues(con);
 			testCorrelationNamesAndMetaDataCalls(con);
+			//This call does not work here, but works somewhere above.
+//			testImplicitClose(con);
 			con.close();
 
 		}
@@ -772,5 +780,133 @@ private static void checkMutableValue(java.util.ArrayList list, int col, Object
 
 		list.add(value);
 	}
+	
+	/**
+	 * testImplicitClose convenience function.
+	 * 
+	 * @param conn
+	 */
+	private static void testImplicitClose(Connection conn) {
+		testImplicitClose(conn, false, 2);
+	}
+	
+	/**
+	 * testImplicitClose convenience function.
+	 * 
+	 * @param conn
+	 */
+	private static void testImplicitClose(Connection conn, boolean prepared) {
+		testImplicitClose(conn, prepared, 2);
+	}
+	
+	/**
+	 * testImplicitClose convenience function.
+	 * 
+	 * @param conn
+	 */
+	private static void testImplicitClose(Connection conn, int numRows) {
+		testImplicitClose(conn, false, numRows);
+	}
+	
+	/**
+	 * The main function for testing the closing behavior of the ResultSet
+	 * 
+	 * @param conn The connection.
+	 * @param prepared Boolean specifying whether to use a PreparedStatement or not.
+	 * @param numRows The number of rows to use in the test case.
+	 */
+	private static void testImplicitClose(Connection conn, boolean prepared, int numRows) {
+		try {
+			String tableName = "implicitClose";
+			System.out.println("Begin ImplicitClose tests");
+			if (conn == null || conn.isClosed())  {
+				System.out.println("Invalid connection, cannot run ImplicitClose tests");
+				return;
+			}
+			Statement s = conn.createStatement();
+			
+			//Check to see if a table of this name already exists
+			ResultSet rs = s.executeQuery("Select tablename from sys.systables where tablename = '" + tableName + "'");
+			if (rs.next()) {
+				System.out.println("Table already exists. Can not run ImplicitClose tests");
+				return;
+			}
+			rs.close();
+			
+			s.execute("create table " + tableName + "(num int)");
+			s.close();
+			PreparedStatement ps = conn.prepareStatement("insert into implicitClose values (?)");
+			//Create and populate table
+			for (int i = 0; i < numRows; i++) {
+				ps.setInt(1, (i + 1));
+				ps.execute();
+			}
+			ps.close();
+		
+			if (prepared)
+				testImplicitClosePrepared(conn, tableName);
+			else
+				testImplicitCloseNonPrepared(conn, tableName);
+			
+			System.out.println("ImplicitClose tests complete");
+			
+		} catch (SQLException e) {
+			System.out.println("Unhandled exception in testImplicitClose: ");
+			e.printStackTrace();
+		}
+	}
+	/**
+	 * Uses a preparedStatement to generate the ResultSet
+	 * 
+	 * @param conn The Connection
+	 * @param tableName The name of the table being used
+	 * 
+	 * @throws SQLException
+	 */
+	private static void testImplicitClosePrepared(Connection conn, String tableName) throws SQLException{
+		PreparedStatement ps = conn.prepareStatement("select num from " + tableName);
+		testImplicitCloseRSComponent(ps.executeQuery());
+//		ps.execute("drop table " + tableName);
+		ps.close();
+		Statement s = conn.createStatement();
+		s.execute("drop table " + tableName);
+		s.close();
+	}
+	
+	/**
+	 * Uses a normal statement to generate the ResultSet
+	 * 
+	 * @param conn The connection.
+	 * @param tableName The name of the table.
+	 * 
+	 * @throws SQLException 
+	 */
+	private static void testImplicitCloseNonPrepared(Connection conn, String tableName) throws SQLException{
+		Statement s = conn.createStatement();
+		testImplicitCloseRSComponent(s.executeQuery("select * from " + tableName));
+		s.execute("drop table " + tableName);
+		s.close();
+	}
+	
+	/**
+	 * Tests the ResultSet generated by either the prepared or non prepared statement.
+	 * 
+	 * @param rs The resultSet
+	 * 
+	 * @throws SQLException
+	 */
+	private static void testImplicitCloseRSComponent(ResultSet rs) throws SQLException {
+		while (rs.next())
+			System.out.println(rs.getInt(1));
+		try {
+			System.out.println("Final call to ResultSet.next()");
+			rs.next();
+			rs.close();
+			System.out.println("Call successful");
+		} catch (SQLException ex) {
+			System.out.println("Call to ResultSet.next() thows the following exception: ");
+			ex.printStackTrace();
+		}
+	}
 }
 
