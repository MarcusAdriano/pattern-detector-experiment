diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java
index 81f60f8b..48e0af27 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java
@@ -756,6 +756,14 @@ public String getCanonicalServiceName(String name)
     {
 		String protocolLeadIn = getType() + ":";
         int colon = name.indexOf( ':');
+        // If no subsubprotocol is specified and the storage factory type isn't
+        // the default one, abort. We have to deal with Windows drive
+        // specifications here, which contain a colon (i.e. 'C:').
+        // The logic in this method may break in some cases if a colon is used
+        // in the directory or database name.
+        if (colon < 2 && !getType().equals(PersistentService.DIRECTORY)) {
+            return null;
+        }
         if( colon > 1) // Subsubprotocols must be at least 2 characters long
         {
             if( ! name.startsWith( protocolLeadIn))
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/memorydb/BasicInMemoryDbTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/memorydb/BasicInMemoryDbTest.java
index e6d86e5b..5d49a93b 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/memorydb/BasicInMemoryDbTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/memorydb/BasicInMemoryDbTest.java
@@ -205,6 +205,37 @@ public void testEnginehutdown()
         getConnection();
     }
 
+    /**
+     * Verify that booting two databases with the same name but with different
+     * subsubprotocols doesn't result in two connections to the same database.
+     *
+     * @throws SQLException if something goes wrong
+     */
+    public void testBootSameDbDifferentSubSubProtocol()
+            throws SQLException {
+        final String dbName = "BSDDSSP";
+        // Connect to the in-memory database and create a table.
+        Connection con1 = DriverManager.getConnection(
+                "jdbc:derby:memory:" + dbName + ";create=true");
+        Statement stmt1 = con1.createStatement();
+        stmt1.execute("create table t (text varchar(255))");
+        stmt1.execute("insert into t values ('Inserted into in-memory db')");
+        // Connect to the on-disk database. The table we created in the
+        // in-memory database shouldn't exist in the on-disk database.
+        Connection con2 = DriverManager.getConnection(
+                "jdbc:derby:" + dbName + ";create=true");
+        // Table t should not exist.
+        Statement stmt2 = con2.createStatement();
+        try {
+            stmt2.executeQuery("select * from t");
+            fail("Table 't' should not exist");
+        } catch (SQLException sqle) {
+            assertSQLState("42X05", sqle);
+        }
+        con2.close();
+        con1.close();
+    }
+
     public static Test suite() {
         // Run only in embedded-mode for now.
         return new SupportFilesSetup(new TestSuite(BasicInMemoryDbTest.class));
