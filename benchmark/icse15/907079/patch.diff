diff --git a/incubator/aries/trunk/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/impl/ManagedPersistenceContextFactory.java b/incubator/aries/trunk/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/impl/ManagedPersistenceContextFactory.java
index 55b7bc38..41d932ee 100644
--- a/incubator/aries/trunk/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/impl/ManagedPersistenceContextFactory.java
+++ b/incubator/aries/trunk/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/impl/ManagedPersistenceContextFactory.java
@@ -18,7 +18,9 @@
  */
 package org.apache.aries.jpa.container.context.impl;
 
+import java.util.HashMap;
 import java.util.Map;
+import java.util.Properties;
 
 import javax.persistence.Cache;
 import javax.persistence.EntityManager;
@@ -46,14 +48,17 @@
   private final ServiceReference emf;
   private final Map<String, Object> properties;
   private final JTAPersistenceContextRegistry registry;
+  private final PersistenceContextType type;
     
   public ManagedPersistenceContextFactory(ServiceReference unit,
       Map<String, Object> props, JTAPersistenceContextRegistry contextRegistry) {
 
       emf = unit;
-      properties = props;
+      //Take a copy of the Map so that we don't modify the original
+      properties = new HashMap<String, Object>(props);
       registry = contextRegistry;
-      
+      //Remove our internal property so that it doesn't get passed on the createEntityManager call
+      type = (PersistenceContextType) properties.remove(PersistenceContextManager.PERSISTENCE_CONTEXT_TYPE);
   }
 
   public EntityManager createEntityManager() {
@@ -63,7 +68,6 @@ public EntityManager createEntityManager() {
     }
     EntityManagerFactory factory = (EntityManagerFactory) emf.getBundle().getBundleContext().getService(emf);
     
-    PersistenceContextType type = (PersistenceContextType) properties.get(PersistenceContextManager.PERSISTENCE_CONTEXT_TYPE);
     if(type == PersistenceContextType.TRANSACTION || type == null)
       return new JTAEntityManager(factory, properties, registry);
     else {
diff --git a/incubator/aries/trunk/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/namespace/NSHandler.java b/incubator/aries/trunk/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/namespace/NSHandler.java
index d016d294..9a2156e5 100644
--- a/incubator/aries/trunk/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/namespace/NSHandler.java
+++ b/incubator/aries/trunk/jpa/jpa-container-context/src/main/java/org/apache/aries/jpa/container/context/namespace/NSHandler.java
@@ -40,6 +40,7 @@
 import org.apache.aries.jpa.container.PersistenceUnitConstants;
 import org.apache.aries.jpa.container.context.GlobalPersistenceManager;
 import org.apache.aries.jpa.container.context.PersistenceManager;
+import org.apache.aries.jpa.container.context.impl.PersistenceContextManager;
 import org.osgi.framework.Bundle;
 import org.osgi.service.blueprint.reflect.BeanArgument;
 import org.osgi.service.blueprint.reflect.BeanMetadata;
@@ -145,7 +146,9 @@ public ComponentMetadata decorate(Node node, ComponentMetadata component, Parser
       String unitName = parseUnitName(element);
 
       HashMap<String,Object> properties = new HashMap<String, Object>();
-      properties.put(ATTR_TYPE, parseType(element));
+      //Remember to add the PersistenceContextType so that we can create the correct type of
+      //EntityManager
+      properties.put(PersistenceContextManager.PERSISTENCE_CONTEXT_TYPE, parseType(element));
       properties.putAll(parseJPAProperties(element, context));
 
       manager.registerContext(unitName, client, properties);      
diff --git a/incubator/aries/trunk/jpa/jpa-container-context/src/test/java/org/apache/aries/jpa/container/context/namespace/NSHandlerTest.java b/incubator/aries/trunk/jpa/jpa-container-context/src/test/java/org/apache/aries/jpa/container/context/namespace/NSHandlerTest.java
index 477e4cd5..a5c599b2 100644
--- a/incubator/aries/trunk/jpa/jpa-container-context/src/test/java/org/apache/aries/jpa/container/context/namespace/NSHandlerTest.java
+++ b/incubator/aries/trunk/jpa/jpa-container-context/src/test/java/org/apache/aries/jpa/container/context/namespace/NSHandlerTest.java
@@ -40,6 +40,7 @@
 import org.apache.aries.blueprint.reflect.RefMetadataImpl;
 import org.apache.aries.blueprint.reflect.ReferenceMetadataImpl;
 import org.apache.aries.jpa.container.context.PersistenceManager;
+import org.apache.aries.jpa.container.context.impl.PersistenceContextManager;
 import org.apache.aries.unittest.mocks.MethodCall;
 import org.apache.aries.unittest.mocks.Skeleton;
 import org.junit.Before;
@@ -199,7 +200,7 @@ public void testDefaultContext() {
     assertEquals("(&(org.apache.aries.jpa.proxy.factory=*)(osgi.unit.name=myUnit))", reference.getFilter());
     
     Map<String,Object> props = new HashMap<String, Object>();
-    props.put("type", PersistenceContextType.TRANSACTION);
+    props.put(PersistenceContextManager.PERSISTENCE_CONTEXT_TYPE, PersistenceContextType.TRANSACTION);
     Skeleton.getSkeleton(manager).assertCalled(
         new MethodCall(PersistenceManager.class, "registerContext", "myUnit", clientBundle, props));
   }
@@ -221,7 +222,7 @@ public void testContextWithProps() {
         reference.getFilter());
     
     Map<String,Object> props = new HashMap<String, Object>();
-    props.put("type", PersistenceContextType.EXTENDED);
+    props.put(PersistenceContextManager.PERSISTENCE_CONTEXT_TYPE, PersistenceContextType.EXTENDED);
     props.put("one", "eins");
     props.put("two", "zwo");
     Skeleton.getSkeleton(manager).assertCalled(
