diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
index 3f210276..c65a7b29 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DatabaseMetaDataTest.java
@@ -42,6 +42,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.util.Arrays;
 //import java.util.HashMap;
 //import java.util.Iterator;
+import java.util.Enumeration;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Locale;
 //import java.util.Map;
@@ -708,11 +710,39 @@ public void testGetURL() throws SQLException
         assertFalse("getURL is supported!", JDBC.vmSupportsJSR169());
         assertTrue("getURL is supported!", JDBC.vmSupportsJDBC3());
 
+        TestConfiguration config = getTestConfiguration();
+        String expectedURL = config.getJDBCUrl();
+
         // DERBY-4886: Embedded returns the URL without connection attributes,
         // client returns the URL with connection attributes.
-        TestConfiguration config = getTestConfiguration();
-        String expectedURL = usingEmbedded() ?
-            config.getJDBCUrl() : config.getJDBCUrlWithAttributes();
+        if (usingDerbyNetClient()) {
+            String[] urlComponents = url.split(";");
+
+            // Only compare whatever comes before the first semi-colon with
+            // the expected URL. Check connection attributes separately.
+            url = urlComponents[0];
+
+            // Put each actual connection attribute in a HashSet for easy
+            // comparison.
+            HashSet attrs = new HashSet();
+            for (int i = 1; i < urlComponents.length; i++) {
+                attrs.add(urlComponents[i]);
+            }
+
+            // Put each expected connection attribute in a HashSet.
+            HashSet expectedAttrs = new HashSet();
+            Properties ca = config.getConnectionAttributes();
+            Enumeration e = ca.propertyNames();
+            while (e.hasMoreElements()) {
+                String key = (String) e.nextElement();
+                expectedAttrs.add(key + '=' + ca.getProperty(key));
+            }
+
+            // Verify that the actual connection attributes match the
+            // expected attributes. Order is irrelevant.
+            assertEquals("Connection attributes don't match",
+                         expectedAttrs, attrs);
+        }
 
         assertEquals("getURL match", expectedURL, url);
     }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
index 7ebffc4c..795f7554 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/TestConfiguration.java
@@ -1009,6 +1009,7 @@ private TestConfiguration() {
         logicalDbMapping.put(DEFAULT_DBNAME, DEFAULT_DBNAME);
         this.userName = DEFAULT_USER_NAME;
         this.userPassword = DEFAULT_USER_PASSWORD;
+        this.connectionAttributes = new Properties();
         this.hostName = null;
         this.port = basePort;
         this.isVerbose = Boolean.valueOf(
@@ -1221,6 +1222,7 @@ private TestConfiguration(Properties props)
         userName = props.getProperty(KEY_USER_NAME, DEFAULT_USER_NAME);
         userPassword = props.getProperty(KEY_USER_PASSWORD, 
                                          DEFAULT_USER_PASSWORD);
+        connectionAttributes = new Properties();
         hostName = props.getProperty(KEY_HOSTNAME, DEFAULT_HOSTNAME);
         isVerbose = Boolean.valueOf(props.getProperty(KEY_VERBOSE)).booleanValue();
         doTrace =  Boolean.valueOf(props.getProperty(KEY_TRACE)).booleanValue();
@@ -1362,21 +1364,6 @@ public String getJDBCUrl() {
         return url;
     }
 
-    /**
-     * Return the JDBC URL for connecting to the default database, including
-     * any connection attributes.
-     *
-     * @return JDBC URL with connection attributes
-     */
-    public String getJDBCUrlWithAttributes() {
-        String attrs = getConnectionAttributesString();
-        if (attrs == null) {
-            return url;
-        } else {
-            return url + ';' + attrs;
-        }
-    }
-
     /**
      * Return the jdbc url for a connecting to the database.
      * 
@@ -1430,9 +1417,9 @@ public String getUserPassword() {
      * {@link #getUserName()} or {@link #getUserPassword()} instead to
      * retrieve those attributes.
      *
-     * @return connection attributes (can be {@code null})
+     * @return connection attributes (never {@code null})
      */
-    Properties getConnectionAttributes() {
+    public Properties getConnectionAttributes() {
         return connectionAttributes;
     }
 
@@ -1444,10 +1431,6 @@ Properties getConnectionAttributes() {
      * are no attributes)
      */
     String getConnectionAttributesString() {
-        if (connectionAttributes == null) {
-            return null;
-        }
-
         StringBuffer sb = new StringBuffer();
         Enumeration e = connectionAttributes.propertyNames();
         boolean first = true;
