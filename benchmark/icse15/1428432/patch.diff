diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
index d98f393e..0361003a 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java
@@ -336,7 +336,7 @@ DirectoryReader getReader(boolean applyAllDeletes) throws IOException {
     // obtained during this flush are pooled, the first time
     // this method is called:
     poolReaders = true;
-    final DirectoryReader r;
+    DirectoryReader r = null;
     doBeforeFlush();
     boolean anySegmentFlushed = false;
     /*
@@ -346,6 +346,8 @@ DirectoryReader getReader(boolean applyAllDeletes) throws IOException {
      * We release the two stage full flush after we are done opening the
      * directory reader!
      */
+    boolean success2 = false;
+    try {
     synchronized (fullFlushLock) {
       boolean success = false;
       try {
@@ -386,6 +388,12 @@ DirectoryReader getReader(boolean applyAllDeletes) throws IOException {
     }
     if (infoStream.isEnabled("IW")) {
       infoStream.message("IW", "getReader took " + (System.currentTimeMillis() - tStart) + " msec");
+    }
+      success2 = true;
+    } finally {
+      if (!success2) {
+        IOUtils.closeWhileHandlingException(r);
+      }
     }
     return r;
   }
diff --git a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java
index bafe8364..6b3a1da4 100644
--- a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java
+++ b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestIndexWriter.java
@@ -17,7 +17,6 @@
  * limitations under the License.
  */
 
-import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.Reader;
 import java.io.StringReader;
@@ -1028,14 +1027,33 @@ public void run() {
             doc.add(newField("field", "some text contents", storedTextType));
             for(int i=0;i<100;i++) {
               idField.setStringValue(Integer.toString(i));
-              if (i%2 == 0) {
+              if (i%30 == 0) {
+                w.deleteAll();
+              } else if (i%2 == 0) {
                 w.updateDocument(new Term("id", idField.stringValue()), doc);
               } else {
                 w.addDocument(doc);
               }
+              if (i%3 == 0) {
+                IndexReader r = null;
+                boolean success = false;
+                try {
+                  r = DirectoryReader.open(w, true);
+                  success = true;
+                } finally {
+                  if (success) {
+                    r.close();
+                  } else {
+                    IOUtils.closeWhileHandlingException(r);
+                  }
+                }
+              }
               if (i%10 == 0) {
                 w.commit();
               }
+              if (i%40 == 0) {
+                w.forceMerge(1);
+              }
             }
             w.close();
             w = null;
@@ -1120,7 +1138,7 @@ public void testThreadInterruptDeadlock() throws Exception {
     assertTrue(new ThreadInterruptedException(new InterruptedException()).getCause() instanceof InterruptedException);
 
     // issue 300 interrupts to child thread
-    final int numInterrupts = atLeast(300);
+    final int numInterrupts = atLeast(3000);
     int i = 0;
     while(i < numInterrupts) {
       // TODO: would be nice to also sometimes interrupt the
