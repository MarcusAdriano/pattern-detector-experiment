diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
index 916bff09..e6fef791 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
@@ -196,18 +196,8 @@ implementing the getStream() method for dvd.getStream(), does not
             }
             // Create a position aware stream on top of dvdStream so we can
             // more easily move back and forth in the Blob.
-            myStream = new PositionedStoreStream(dvdStream);
-            try {
-                myStream.initStream();
-            } catch (StandardException se) {
-                if (se.getMessageId().equals(SQLState.DATA_CONTAINER_CLOSED)) {
-                    throw StandardException
-                            .newException(SQLState.BLOB_ACCESSED_AFTER_COMMIT);
-                } else {
-                    throw se;
-                }
-            }
             try {
+                myStream = new PositionedStoreStream(dvdStream);
                 // The BinaryToRawStream will read the encoded length bytes.
                 BinaryToRawStream tmpStream =
                         new BinaryToRawStream(myStream, con);
@@ -215,9 +205,16 @@ implementing the getStream() method for dvd.getStream(), does not
                 // Check up front if the stream length is specified.
                 streamLength = tmpStream.getLength();
                 tmpStream.close();
+            } catch (StandardException se) {
+                if (se.getMessageId().equals(SQLState.DATA_CONTAINER_CLOSED)) {
+                    throw StandardException
+                            .newException(SQLState.BLOB_ACCESSED_AFTER_COMMIT);
+                } else {
+                    throw se;
+                }
             } catch (IOException ioe) {
                 throw StandardException.newException(
-                        SQLState.LANG_STREAMING_COLUMN_I_O_EXCEPTION, ioe);
+                     SQLState.LANG_STREAMING_COLUMN_I_O_EXCEPTION, ioe, "BLOB");
             }
         }
         //add entry in connection so it can be cleared 
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/jdbc/PositionedStoreStream.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/jdbc/PositionedStoreStream.java
index c4fe65d5..d79c099b 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/jdbc/PositionedStoreStream.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/jdbc/PositionedStoreStream.java
@@ -73,11 +73,18 @@ Licensed to the Apache Software Foundation (ASF) under one
     /**
      * Creates a positioned store stream on top of the specified resettable
      * stream.
+     * <p>
+     * Upon creation, the underlying stream is initiated and reset to make
+     * sure the states of the streams are in sync with each other.
      *
      * @param in a {@link Resetable}-stream
      */
-    public PositionedStoreStream(InputStream in) {
+    public PositionedStoreStream(InputStream in)
+            throws IOException, StandardException {
         this.stream = in;
+        // We need to know the stream is in a consistent state.
+        ((Resetable)in).initStream();
+        ((Resetable)in).resetStream();
     }
 
     /**
@@ -160,7 +167,6 @@ public void resetStream()
     public void initStream()
             throws StandardException {
         ((Resetable)this.stream).initStream();
-        this.pos = 0L;
     }
 
     /**
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/jdbc/StoreStreamClob.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/jdbc/StoreStreamClob.java
index 02d61e76..83b0379a 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/jdbc/StoreStreamClob.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/jdbc/StoreStreamClob.java
@@ -113,10 +113,21 @@ Licensed to the Apache Software Foundation (ASF) under one
      */
     public StoreStreamClob(InputStream stream, ConnectionChild conChild)
             throws StandardException {
+        try {
         this.positionedStoreStream = new PositionedStoreStream(stream);
+        } catch (StandardException se) {
+            if (se.getMessageId().equals(SQLState.DATA_CONTAINER_CLOSED)) {
+                throw StandardException
+                        .newException(SQLState.BLOB_ACCESSED_AFTER_COMMIT);
+            } else {
+                throw se;
+            }
+        } catch (IOException ioe) {
+            throw StandardException.newException(
+                    SQLState.LANG_STREAMING_COLUMN_I_O_EXCEPTION, ioe, "CLOB");
+        }
         this.conChild = conChild;
         this.synchronizationObject = conChild.getConnectionSynchronization();
-        this.positionedStoreStream.initStream();
     }
 
     /**
