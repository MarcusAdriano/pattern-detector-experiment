diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceReply.java b/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceReply.java
index 7a74d2a3..d4f41247 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceReply.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/RangeSliceReply.java
@@ -49,7 +49,7 @@ public Message getReply(Message originalMessage) throws IOException
             Row.serializer().serialize(row, dob);
         }
         byte[] data = Arrays.copyOf(dob.getData(), dob.getLength());
-        return originalMessage.getReply(FBUtilities.getLocalAddress(), data);
+        return originalMessage.getReply(FBUtilities.getLocalAddress(), data, originalMessage.getVersion());
     }
 
     @Override
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java
index 59360878..de0cdc44 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ReadVerbHandler.java
@@ -76,7 +76,7 @@ public void doVerb(Message message)
             byte[] bytes = new byte[readCtx.bufOut_.getLength()];
             System.arraycopy(readCtx.bufOut_.getData(), 0, bytes, 0, bytes.length);
 
-            Message response = message.getReply(FBUtilities.getLocalAddress(), bytes);
+            Message response = message.getReply(FBUtilities.getLocalAddress(), bytes, message.getVersion());
             if (logger_.isDebugEnabled())
               logger_.debug(String.format("Read key %s; sending response to %s@%s",
                                           ByteBufferUtil.bytesToHex(command.key), message.getMessageId(), message.getFrom()));
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/SchemaCheckVerbHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/db/SchemaCheckVerbHandler.java
index 0468d96f..5495b4ce 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/SchemaCheckVerbHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/SchemaCheckVerbHandler.java
@@ -34,7 +34,7 @@
     public void doVerb(Message message)
     {
         logger.debug("Received schema check request.");
-        Message response = message.getInternalReply(DatabaseDescriptor.getDefsVersion().toString().getBytes());
+        Message response = message.getInternalReply(DatabaseDescriptor.getDefsVersion().toString().getBytes(), message.getVersion());
         MessagingService.instance().sendOneWay(response, message.getFrom());
     }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/TruncateResponse.java b/cassandra/trunk/src/java/org/apache/cassandra/db/TruncateResponse.java
index 21eae84d..3593bf8b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/TruncateResponse.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/TruncateResponse.java
@@ -54,7 +54,7 @@ public static Message makeTruncateResponseMessage(Message original, TruncateResp
     	ByteArrayOutputStream bos = new ByteArrayOutputStream();
         DataOutputStream dos = new DataOutputStream(bos);
         TruncateResponse.serializer().serialize(truncateResponseMessage, dos);
-        return original.getReply(FBUtilities.getLocalAddress(), bos.toByteArray());
+        return original.getReply(FBUtilities.getLocalAddress(), bos.toByteArray(), original.getVersion());
     }
 
     public TruncateResponse(String keyspace, String columnFamily, boolean success) {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/WriteResponse.java b/cassandra/trunk/src/java/org/apache/cassandra/db/WriteResponse.java
index eb92ed88..3c51aa17 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/WriteResponse.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/WriteResponse.java
@@ -49,7 +49,7 @@ public static Message makeWriteResponseMessage(Message original, WriteResponse w
     	ByteArrayOutputStream bos = new ByteArrayOutputStream();
         DataOutputStream dos = new DataOutputStream( bos );
         WriteResponse.serializer().serialize(writeResponseMessage, dos);
-        return original.getReply(FBUtilities.getLocalAddress(), bos.toByteArray());
+        return original.getReply(FBUtilities.getLocalAddress(), bos.toByteArray(), original.getVersion());
     }
 
 	private final String table_;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java b/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
index 2db3740d..f3da7319 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
@@ -255,7 +255,7 @@ public void doVerb(Message message)
         {
             StorageService ss = StorageService.instance;
             String tokenString = StorageService.getPartitioner().getTokenFactory().toString(ss.getBootstrapToken());
-            Message response = message.getInternalReply(tokenString.getBytes(Charsets.UTF_8));
+            Message response = message.getInternalReply(tokenString.getBytes(Charsets.UTF_8), message.getVersion());
             MessagingService.instance().sendOneWay(response, message.getFrom());
         }
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/net/Message.java b/cassandra/trunk/src/java/org/apache/cassandra/net/Message.java
index c8a8042b..a97d08c3 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/net/Message.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/net/Message.java
@@ -31,6 +31,7 @@
 public class Message
 {
     private static ICompactSerializer<Message> serializer_;
+    public static final int UNKNOWN = -1;
 
     static
     {
@@ -44,19 +45,21 @@
     
     final Header header_;
     private final byte[] body_;
+    private final transient int version;
 
-    Message(Header header, byte[] body)
+    private Message(Header header, byte[] body, int version)
     {
         assert header != null;
         assert body != null;
 
         header_ = header;
         body_ = body;
+        this.version = version;
     }
 
     public Message(InetAddress from, StorageService.Verb verb, byte[] body)
     {
-        this(new Header(from, verb), body);
+        this(new Header(from, verb), body, UNKNOWN);
     }    
     
     public byte[] getHeader(String key)
@@ -79,6 +82,11 @@ public void removeHeader(String key)
         return body_;
     }
 
+    public int getVersion()
+    {
+        return version;
+    }
+
     public InetAddress getFrom()
     {
         return header_.getFrom();
@@ -100,16 +108,16 @@ public String getMessageId()
     }
 
     // TODO should take byte[] + length so we don't have to copy to a byte[] of exactly the right len
-    public Message getReply(InetAddress from, byte[] args)
+    public Message getReply(InetAddress from, byte[] body, int version)
     {
         Header header = new Header(getMessageId(), from, StorageService.Verb.REQUEST_RESPONSE);
-        return new Message(header, args);
+        return new Message(header, body, version);
     }
 
-    public Message getInternalReply(byte[] body)
+    public Message getInternalReply(byte[] body, int version)
     {
         Header header = new Header(getMessageId(), FBUtilities.getLocalAddress(), StorageService.Verb.INTERNAL_RESPONSE);
-        return new Message(header, body);
+        return new Message(header, body, version);
     }
 
     public String toString()
@@ -144,7 +152,7 @@ public Message deserialize(DataInputStream dis) throws IOException
             byte[] bytes = new byte[size];
             dis.readFully(bytes);
             // return new Message(header.getMessageId(), header.getFrom(), header.getMessageType(), header.getVerb(), new Object[]{bytes});
-            return new Message(header, bytes);
+            return new Message(header, bytes, UNKNOWN);
         }
     }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageLoadBalancer.java b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageLoadBalancer.java
index 79adb92c..002f22c5 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageLoadBalancer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageLoadBalancer.java
@@ -148,7 +148,7 @@ private boolean tryThisNode(int myLoad, int threshold, InetAddress target)
     {
         public void doVerb(Message message)
         {
-            Message reply = message.getInternalReply(new byte[] {(byte)(isMoveable_.get() ? 1 : 0)});
+            Message reply = message.getInternalReply(new byte[] {(byte)(isMoveable_.get() ? 1 : 0)}, message.getVersion());
             MessagingService.instance().sendOneWay(reply, message.getFrom());
             if ( isMoveable_.get() )
             {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/ReplicationFinishedVerbHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/ReplicationFinishedVerbHandler.java
index d2dc2751..236f7796 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/ReplicationFinishedVerbHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/ReplicationFinishedVerbHandler.java
@@ -36,7 +36,7 @@
     public void doVerb(Message msg)
     {
         StorageService.instance.confirmReplication(msg.getFrom());
-        Message response = msg.getInternalReply(ArrayUtils.EMPTY_BYTE_ARRAY);
+        Message response = msg.getInternalReply(ArrayUtils.EMPTY_BYTE_ARRAY, msg.getVersion());
         if (logger.isDebugEnabled())
             logger.debug("Replying to " + msg.getMessageId() + "@" + msg.getFrom());
         MessagingService.instance().sendOneWay(response, msg.getFrom());
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/service/RemoveTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/service/RemoveTest.java
index 6051f822..db949f21 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/service/RemoveTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/service/RemoveTest.java
@@ -217,7 +217,7 @@ public Message handleMessage(Message msg, InetAddress to)
                 callCount++;
                 assertEquals(Stage.MISC, msg.getMessageType());
                 // simulate a response from remote server
-                Message response = msg.getReply(FBUtilities.getLocalAddress(), new byte[]{ });
+                Message response = msg.getReply(FBUtilities.getLocalAddress(), new byte[]{ }, msg.getVersion());
                 MessagingService.instance().sendOneWay(response, FBUtilities.getLocalAddress());
                 return null;
             }
