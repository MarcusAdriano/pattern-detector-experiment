diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/CompoundFileReader.java b/lucene/java/trunk/src/java/org/apache/lucene/index/CompoundFileReader.java
index b4d58673..b499a6e3 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/CompoundFileReader.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/CompoundFileReader.java
@@ -205,7 +205,7 @@ public Lock makeLock(String name)
          *  position in the input.
          * @param b the array to read bytes into
          * @param offset the offset in the array to start storing bytes
-         * @param len the number of bytes to read
+         * @param length the number of bytes to read
          */
         protected void readInternal(byte[] b, int offset, int len)
         throws IOException
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/index/FieldInfos.java b/lucene/java/trunk/src/java/org/apache/lucene/index/FieldInfos.java
index 1adb44ad..f42de461 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/index/FieldInfos.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/index/FieldInfos.java
@@ -48,8 +48,6 @@
    * @param d The directory to open the InputStream from
    * @param name The name of the file to open the InputStream from in the Directory
    * @throws IOException
-   * 
-   * @see #read
    */
   FieldInfos(Directory d, String name) throws IOException {
     InputStream input = d.openFile(name);
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/Scorer.java b/lucene/java/trunk/src/java/org/apache/lucene/search/Scorer.java
index 386ed69a..eb462199 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/Scorer.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/Scorer.java
@@ -20,11 +20,17 @@
 
 import java.io.IOException;
 
-/** Expert: Implements scoring for a class of queries. */
+/** Expert: Common scoring functionality for different types of queries.
+ * <br>A <code>Scorer</code> iterates over all documents matching a query,
+ * or provides an explanation of the score for a query for a given document.
+ * <br>Scores are computed using a given <code>Similarity</code> implementation.
+ */
 public abstract class Scorer {
   private Similarity similarity;
 
-  /** Constructs a Scorer. */
+  /** Constructs a Scorer.
+   * @param similarity The <code>Similarity</code> implementation used by this scorer.
+   */
   protected Scorer(Similarity similarity) {
     this.similarity = similarity;
   }
@@ -34,28 +40,36 @@ public Similarity getSimilarity() {
     return this.similarity;
   }
 
-  /** Scores all documents and passes them to a collector. */
+  /** Scores and collects all matching documents.
+   * @param hc The collector to which all matching documents are passed through
+   * {@link HitCollector#collect(int, float)}.
+   */
   public void score(HitCollector hc) throws IOException {
     while (next()) {
       hc.collect(doc(), score());
     }
   }
 
-  /** Advance to the next document matching the query.  Returns true iff there
-   * is another match. */
+  /** Advances to the next document matching the query.
+   * @return true iff there is another document matching the query.
+   */
   public abstract boolean next() throws IOException;
 
-  /** Returns the current document number.  Initially invalid, until {@link
-   * #next()} is called the first time. */
+  /** Returns the current document number matching the query.
+   * Initially invalid, until {@link #next()} is called the first time.
+   */
   public abstract int doc();
 
-  /** Returns the score of the current document.  Initially invalid, until
-   * {@link #next()} is called the first time. */
+  /** Returns the score of the current document matching the query.
+   * Initially invalid, until {@link #next()} is called the first time.
+   */
   public abstract float score() throws IOException;
 
   /** Skips to the first match beyond the current whose document number is
-   * greater than or equal to <i>target</i>. <p>Returns true iff there is such
-   * a match.  <p>Behaves as if written: <pre>
+   * greater than or equal to a given target. 
+   * @param target The target document number.
+   * @return true iff there is such a match.
+   * <p>Behaves as if written: <pre>
    *   boolean skipTo(int target) {
    *     do {
    *       if (!next())
@@ -68,7 +82,11 @@ public void score(HitCollector hc) throws IOException {
    */
   public abstract boolean skipTo(int target) throws IOException;
 
-  /** Returns an explanation of the score for <code>doc</code>. */
+  /** Returns an explanation of the score for a document.
+   * <br>When this method is used, the {@link #next()} method
+   * and the {@link #score(HitCollector)} method should not be used.
+   * @param doc The document number for the explanation.
+   */
   public abstract Explanation explain(int doc) throws IOException;
 
 }
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/TermScorer.java b/lucene/java/trunk/src/java/org/apache/lucene/search/TermScorer.java
index 862d0fe3..fc584729 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/TermScorer.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/TermScorer.java
@@ -22,6 +22,8 @@
 
 import org.apache.lucene.index.TermDocs;
 
+/** Expert: A <code>Scorer</code> for documents matching a <code>Term</code>.
+ */
 final class TermScorer extends Scorer {
   private Weight weight;
   private TermDocs termDocs;
@@ -37,6 +39,12 @@
   private static final int SCORE_CACHE_SIZE = 32;
   private float[] scoreCache = new float[SCORE_CACHE_SIZE];
 
+  /** Construct a <code>TermScorer</code>.
+   * @param weight The weight of the <code>Term</code> in the query.
+   * @param td An iterator over the documents matching the <code>Term</code>.
+   * @param similarity The </code>Similarity</code> implementation to be used for score computations.
+   * @param norms The field norms of the document fields for the <code>Term</code>.
+   */
   TermScorer(Weight weight, TermDocs td, Similarity similarity,
              byte[] norms) {
     super(similarity);
@@ -49,8 +57,16 @@
       scoreCache[i] = getSimilarity().tf(i) * weightValue;
   }
 
+  /** Returns the current document number matching the query.
+   * Initially invalid, until {@link #next()} is called the first time.
+   */
   public int doc() { return doc; }
 
+  /** Advances to the next document matching the query.
+   * <br>The iterator over the matching documents is buffered using
+   * {@link TermDocs#read(int[],int[])}.
+   * @return true iff there is another document matching the query.
+   */
   public boolean next() throws IOException {
     pointer++;
     if (pointer >= pointerMax) {
@@ -77,6 +93,12 @@ public float score() {
     return raw * Similarity.decodeNorm(norms[doc]); // normalize for field
   }
 
+  /** Skips to the first match beyond the current whose document number is
+   * greater than or equal to a given target. 
+   * <br>The implementation uses {@link TermDocs#skipTo(int)}.
+   * @param target The target document number.
+   * @return true iff there is such a match.
+   */
   public boolean skipTo(int target) throws IOException {
     // first scan in cache
     for (pointer++; pointer < pointerMax; pointer++) {
@@ -99,6 +121,12 @@ public boolean skipTo(int target) throws IOException {
     return result;
   }
 
+  /** Returns an explanation of the score for a document.
+   * <br>When this method is used, the {@link #next()} method
+   * and the {@link #score(HitCollector)} method should not be used.
+   * @param doc The document number for the explanation.
+   * @todo Modify to make use of {@link TermDocs#skipTo(int)}.
+   */
   public Explanation explain(int doc) throws IOException {
     TermQuery query = (TermQuery)weight.getQuery();
     Explanation tfExplanation = new Explanation();
@@ -122,6 +150,6 @@ public Explanation explain(int doc) throws IOException {
     return tfExplanation;
   }
 
+  /** Returns a string representation of this <code>TermScorer</code>. */
   public String toString() { return "scorer(" + weight + ")"; }
-
 }
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/Weight.java b/lucene/java/trunk/src/java/org/apache/lucene/search/Weight.java
index 02f11eba..d654c6cd 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/Weight.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/Weight.java
@@ -27,7 +27,7 @@
  * <p>A Weight is constructed by a query, given a Searcher ({@link
  * Query#createWeight(Searcher)}).  The {@link #sumOfSquaredWeights()} method
  * is then called on the top-level query to compute the query normalization
- * factor (@link Similarity#queryNorm(float)}).  This factor is then passed to
+ * factor {@link Similarity#queryNorm(float)}.  This factor is then passed to
  * {@link #normalize(float)}.  At this point the weighting is complete and a
  * scorer may be constructed by calling {@link #scorer(IndexReader)}.
  */
