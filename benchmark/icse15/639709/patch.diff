diff --git a/db/derby/code/branches/10.3.2.1_test/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClobStoredProcedureTest.java b/db/derby/code/branches/10.3.2.1_test/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClobStoredProcedureTest.java
index 97572592..2e1ff567 100644
--- a/db/derby/code/branches/10.3.2.1_test/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClobStoredProcedureTest.java
+++ b/db/derby/code/branches/10.3.2.1_test/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClobStoredProcedureTest.java
@@ -139,7 +139,7 @@ public void testClobCreateLocatorSP() throws SQLException {
         //remember in setup a locator is already created
         //hence expected value is 2
         assertEquals("The locator values returned by " +
-            "SYSIBM.CLOBCREATELOCATOR() are incorrect", 4, locator);
+            "SYSIBM.CLOBCREATELOCATOR() are incorrect", 2, locator);
         cs.close();
     }
 
diff --git a/db/derby/code/branches/10.3.2.1_test/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DMDBugsTest.java b/db/derby/code/branches/10.3.2.1_test/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DMDBugsTest.java
index 483c7f70..8330c8ee 100644
--- a/db/derby/code/branches/10.3.2.1_test/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DMDBugsTest.java
+++ b/db/derby/code/branches/10.3.2.1_test/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DMDBugsTest.java
@@ -78,7 +78,7 @@ public void testDerby3000() throws SQLException, IOException {
 	                  {{"","APP","TSYN","SYNONYM","",null,null,null,null,null}});
 
 		rs = dmd.getTables( "%", "%", "%", new String[] {"SYSTEM TABLE"});
-		assertEquals(19, JDBC.assertDrainResults(rs));
+		assertEquals(20, JDBC.assertDrainResults(rs));
 		s.executeUpdate("DROP VIEW APP.V");
 		s.executeUpdate("DROP TABLE APP.TAB");
 		s.executeUpdate("DROP SYNONYM APP.TSYN");
diff --git a/db/derby/code/branches/10.3.2.1_test/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java b/db/derby/code/branches/10.3.2.1_test/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
index 6d704be3..2e3e66a4 100644
--- a/db/derby/code/branches/10.3.2.1_test/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
+++ b/db/derby/code/branches/10.3.2.1_test/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
@@ -603,7 +603,7 @@ private void commonTestingForTerritoryBasedDB(Statement s) throws SQLException{
     //The query below will work for the same reason. 
     checkLangBasedQuery(s, "SELECT count(*) FROM SYS.SYSTABLES WHERE CASE " +
     		" WHEN 1=1 THEN TABLENAME ELSE TABLEID END = TABLENAME",
-    		new String[][] {{"22"} });   
+    		new String[][] {{"23"} });   
 
     //Do some testing using CONCATENATION
     //following will fail because result string of concatenation has 
diff --git a/db/derby/code/branches/10.3.2.1_test/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java b/db/derby/code/branches/10.3.2.1_test/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java
index 84adc0f1..a9a8098f 100644
--- a/db/derby/code/branches/10.3.2.1_test/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java
+++ b/db/derby/code/branches/10.3.2.1_test/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java
@@ -85,7 +85,7 @@ public void test_errorcode() throws Exception
        // -- test ErrorMessages VTI        
         rs = s.executeQuery(
             "select * from SYSCS_DIAG.error_Messages  where "
-            + "sql_state = '07000'");
+            + "CAST(sql_state AS CHAR(5)) = '07000'");
          
         String [][] expRS = new String [][]
         {
@@ -99,14 +99,14 @@ public void test_errorcode() throws Exception
         //Utilities.showResultSet(rs);
         String [][] expectedRows =
         {{"08000","Connection closed by unknown interrupt.","40000"},
+        		{"08001","A connection could not be established because the security token is larger than the maximum allowed by the network protocol.","40000"},
+        		{"08001","A connection could not be established because the user id has a length of zero or is larger than the maximum allowed by the network protocol.","40000"},
+        		{"08001","A connection could not be established because the password has a length of zero or is larger than the maximum allowed by the network protocol.","40000"},
                 {"08001","Required Derby DataSource property {0} not set.","40000"},
                 {"08001","{0} : Error connecting to server {1} on port {2} with message {3}.","40000"},
                 {"08001","SocketException: '{0}'","40000"},
                 {"08001","Unable to open stream on socket: '{0}'.","40000"},
                 {"08001","User id length ({0}) is outside the range of 1 to {1}.","40000"},
-                {"08001","A connection could not be established because the security token is larger than the maximum allowed by the network protocol.","40000"},
-                {"08001","A connection could not be established because the user id has a length of zero or is larger than the maximum allowed by the network protocol.","40000"},
-                {"08001","A connection could not be established because the password has a length of zero or is larger than the maximum allowed by the network protocol.","40000"},
                 {"08001","Password length ({0}) is outside the range of 1 to {1}.","40000"},
                 {"08001","User id can not be null.","40000"},
                 {"08001","Password can not be null.","40000"},
@@ -123,23 +123,20 @@ public void test_errorcode() throws Exception
                 {"08004","User '{0}' cannot (re)encrypt database '{1}'. Only the database owner can perform this operation.","40000"},
                 {"08004","User '{0}' cannot hard upgrade database '{1}'. Only the database owner can perform this operation.","40000"},
                 {"08004","Connection refused to database '{0}' because it is in replication slave mode.","40000"},
-                {"08006","A network protocol error was encountered and the connection has been terminated: {0}","40000"},
-                {"08006","Database '{0}' shutdown.","45000"},
+        		{"08004","User '{0}' cannot issue a replication operation on database '{1}'. Only the database owner can perform this operation.","40000"},
+        		{"08004","Missing permission for user '{0}' to shutdown system [{1}].","40000"},
+        		{"08004","Cannot check system permission to create database '{0}' [{1}].","40000"},
+        		{"08004","Missing permission for user '{0}' to create database '{1}' [{2}].","40000"},
                 {"08006","An error occurred during connect reset and the connection has been terminated.  See chained exceptions for details.","40000"},
                 {"08006","SocketException: '{0}'","40000"},
                 {"08006","A communications error has been detected: {0}.","40000"},
                 {"08006","An error occurred during a deferred connect reset and the connection has been terminated.  See chained exceptions for details.","40000"},
                 {"08006","Insufficient data while reading from the network - expected a minimum of {0} bytes and received only {1} bytes.  The connection has been terminated.","40000"},
                 {"08006","Attempt to fully materialize lob data that is too large for the JVM.  The connection has been terminated.","40000"},
+        		{"08006","A network protocol error was encountered and the connection has been terminated: {0}","40000"},
+        		{"08006","Database '{0}' shutdown.","45000"},
                 {"0A000","The DRDA command {0} is not currently implemented.  The connection has been terminated.","40000"},
                 {"57017","There is no available conversion for the source code page, {0}, to the target code page, {1}.  The connection has been terminated.","40000"},
-                {"58009","Network protocol exception: invalid FDOCA LID.  The connection has been terminated.","40000"},
-                {"58009","Network protocol exception: SECTKN was not returned.  The connection has been terminated.","40000"},
-                {"58009","Network protocol exception: only one of NVCM, NVCS can be non-null.  The connection has been terminated.","40000"},
-                {"58009","Network protocol exception: SCLDTA length, {0}, is invalid for RDBNAM.  The connection has been terminated.","40000"},
-                {"58009","Network protocol exception: SCLDTA length, {0}, is invalid for RDBCOLID.  The connection has been terminated.","40000"},
-                {"58009","Network protocol exception: SCLDTA length, {0}, is invalid for PKGID.  The connection has been terminated.","40000"},
-                {"58009","Network protocol exception: PKGNAMCSN length, {0}, is invalid at SQLAM {1}.  The connection has been terminated.","40000"},
                 {"58009","Network protocol exception: only one of the VCM, VCS length can be greater than 0.  The connection has been terminated.","40000"},
                 {"58009","The connection was terminated because the encoding is not supported.","40000"},
                 {"58009","Network protocol exception: actual code point, {0}, does not match expected code point, {1}.  The connection has been terminated.","40000"},
@@ -148,6 +145,13 @@ public void test_errorcode() throws Exception
                 {"58009","Network protocol exception: DSS length not 0 at end of same id chain parse.  The connection has been terminated.","40000"},
                 {"58009","Network protocol exception: DSS chained with same id at end of same id chain parse.  The connection has been terminated.","40000"},
                 {"58009","Network protocol exception: end of stream prematurely reached while reading InputStream, parameter #{0}.  The connection has been terminated.","40000"},
+        		{"58009","Network protocol exception: invalid FDOCA LID.  The connection has been terminated.","40000"},
+        		{"58009","Network protocol exception: SECTKN was not returned.  The connection has been terminated.","40000"},
+        		{"58009","Network protocol exception: only one of NVCM, NVCS can be non-null.  The connection has been terminated.","40000"},
+        		{"58009","Network protocol exception: SCLDTA length, {0}, is invalid for RDBNAM.  The connection has been terminated.","40000"},
+        		{"58009","Network protocol exception: SCLDTA length, {0}, is invalid for RDBCOLID.  The connection has been terminated.","40000"},
+        		{"58009","Network protocol exception: SCLDTA length, {0}, is invalid for PKGID.  The connection has been terminated.","40000"},
+        		{"58009","Network protocol exception: PKGNAMCSN length, {0}, is invalid at SQLAM {1}.  The connection has been terminated.","40000"},
                 {"58010","A network protocol error was encountered.  A connection could not be established because the manager {0} at level {1} is not supported by the server. ","40000"},
                 {"58014","The DDM command 0x{0} is not supported.  The connection has been terminated.","40000"},
                 {"58015","The DDM object 0x{0} is not supported.  The connection has been terminated.","40000"},
@@ -186,6 +190,7 @@ public void test_errorcode() throws Exception
                 {"XJ05B","JDBC attribute '{0}' has an invalid value '{1}', valid values are '{2}'.","40000"},
                 {"XJ081","Conflicting create/restore/recovery attributes specified.","40000"},
                 {"XJ213","The traceLevel connection property does not have a valid format for a number.","40000"},
+        		{"XRE20","Failover performed successfully for database '{0}', the database has been shutdown.","45000"},
                 {"XSDB0","Unexpected exception on in-memory page {0}","45000"},
                 {"XSDB1","Unknown page format at page {0}","45000"},
                 {"XSDB2","Unknown container format at container {0} : {1}","45000"},
@@ -241,6 +246,7 @@ public void test_errorcode() throws Exception
                 {"XXXXX","Normal database session close.","40000"}};
 
                 
+
         JDBC.assertUnorderedResultSet(rs, expectedRows);
         s.executeUpdate("drop table t");
         commit();        
diff --git a/db/derby/code/branches/10.3.2.1_test/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java b/db/derby/code/branches/10.3.2.1_test/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java
index 459abaa5..554d61fd 100644
--- a/db/derby/code/branches/10.3.2.1_test/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java
+++ b/db/derby/code/branches/10.3.2.1_test/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java
@@ -7695,6 +7695,7 @@ public void testGrantRevokeDDL2() throws SQLException {
             {"SYSTABLEPERMS"},
             {"SYSCOLPERMS"},
             {"SYSROUTINEPERMS"},
+            {"SYSROLES"},
             {"T1"},
             {"T2"},
             {"T2"},
