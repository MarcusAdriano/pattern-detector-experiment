diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java
index 39afc3d4..dd396020 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/sgd/AdaptiveLogisticRegression.java
@@ -64,7 +64,8 @@
  * value in non-binary cases.
  */
 public class AdaptiveLogisticRegression implements OnlineLearner, Writable {
-
+  public static final int DEFAULT_THREAD_COUNT = 20;
+  public static final int DEFAULT_POOL_SIZE = 20;
   private static final int SURVIVORS = 2;
 
   private int record;
@@ -77,8 +78,8 @@
   private List<TrainingExample> buffer = Lists.newArrayList();
   private EvolutionaryProcess<Wrapper, CrossFoldLearner> ep;
   private State<Wrapper, CrossFoldLearner> best;
-  private int threadCount = 20;
-  private int poolSize = 20;
+  private int threadCount = DEFAULT_THREAD_COUNT;
+  private int poolSize = DEFAULT_POOL_SIZE;
   private State<Wrapper, CrossFoldLearner> seed;
   private int numFeatures;
 
@@ -87,15 +88,37 @@
   public AdaptiveLogisticRegression() {
   }
 
+  /**
+   * Uses {@link #DEFAULT_THREAD_COUNT} and {@link #DEFAULT_POOL_SIZE}
+   * @param numCategories The number of categories (labels) to train on
+   * @param numFeatures The number of features used in creating the vectors (i.e. the cardinality of the vector)
+   * @param prior The {@link org.apache.mahout.classifier.sgd.PriorFunction} to use
+   *
+   * @see {@link #AdaptiveLogisticRegression(int, int, org.apache.mahout.classifier.sgd.PriorFunction, int, int)}
+   */
   public AdaptiveLogisticRegression(int numCategories, int numFeatures, PriorFunction prior) {
+    this(numCategories, numFeatures, prior, DEFAULT_THREAD_COUNT, DEFAULT_POOL_SIZE);
+  }
+
+  /**
+   *
+   * @param numCategories The number of categories (labels) to train on
+   * @param numFeatures The number of features used in creating the vectors (i.e. the cardinality of the vector)
+   * @param prior The {@link org.apache.mahout.classifier.sgd.PriorFunction} to use
+   * @param threadCount The number of threads to use for training
+   * @param poolSize The number of {@link org.apache.mahout.classifier.sgd.CrossFoldLearner} to use.
+   */
+  public AdaptiveLogisticRegression(int numCategories, int numFeatures, PriorFunction prior, int threadCount, int poolSize) {
     this.numFeatures = numFeatures;
+    this.threadCount = threadCount;
+    this.poolSize = poolSize;
     seed = new State<Wrapper, CrossFoldLearner>(new double[2], 10);
     Wrapper w = new Wrapper(numCategories, numFeatures, prior);
     seed.setPayload(w);
 
     w.setMappings(seed);
     seed.setPayload(w);
-    setPoolSize(poolSize);
+    setPoolSize(this.poolSize);
   }
 
   @Override
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/common/AbstractJob.java b/mahout/trunk/core/src/main/java/org/apache/mahout/common/AbstractJob.java
index bfdddafe..7f3d9ec8 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/common/AbstractJob.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/common/AbstractJob.java
@@ -345,6 +345,20 @@ public String getOption(String optionName) {
     return argMap.get(keyFor(optionName));
   }
 
+  /**
+   * Get the option, else the default
+   * @param optionName The name of the option to look up, without the --
+   * @param defaultVal The default value.
+   * @return The requested option, else the default value if it doesn't exist
+   */
+  public String getOption(String optionName, String defaultVal){
+    String res = getOption(optionName);
+    if (res == null) {
+      res = defaultVal;
+    }
+    return res;
+  }
+
   /**
    * @return if the requested option has been specified
    */
diff --git a/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainASFEmail.java b/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainASFEmail.java
index ca762407..446128ae 100644
--- a/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainASFEmail.java
+++ b/mahout/trunk/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainASFEmail.java
@@ -25,7 +25,9 @@
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.fs.PathFilter;
 import org.apache.hadoop.io.Text;
+import org.apache.mahout.common.AbstractJob;
 import org.apache.mahout.common.Pair;
+
 import org.apache.mahout.common.iterator.sequencefile.PathType;
 import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterator;
 import org.apache.mahout.ep.State;
@@ -37,31 +39,37 @@
 import java.util.Collections;
 import java.util.List;
 
-public final class TrainASFEmail {
+public final class TrainASFEmail extends AbstractJob {
 
   //private static final String[] LEAK_LABELS = {"none", "month-year", "day-month-year"};
 
   private TrainASFEmail() {
   }
 
-  public static void main(String[] args) throws IOException {
-    File base = new File(args[0]);
+  @Override
+  public int run(String[] args) throws Exception {
+    int result = 0;
+    addInputOption();
+    addOutputOption();
+    addOption("categories", "nc", "The number of categories to train on", true);
+    addOption("cardinality", "c", "The size of the vectors to use", "100000");
+    addOption("threads", "t", "The number of threads to use in the learner", "20");
+    addOption("poolSize", "p", "The number of CrossFoldLearners to use in the AdaptiveLogisticRegression.  Higher values require more memory.", "5");
+    if (parseArguments(args) == null) {
+      return -1;
+    }
+
+    File base = new File(getInputPath().toString());
 
     Multiset<String> overallCounts = HashMultiset.create();
-    File output = new File(args[1]);
+    File output = new File(getOutputPath().toString());
     output.mkdirs();
-    int numCats = Integer.parseInt(args[2]);
-    int cardinality = Integer.parseInt(args[3]);
-
-    int leakType = 0;
-    if (args.length > 4) {
-      leakType = Integer.parseInt(args[4]);
-    }
-
+    int numCats = Integer.parseInt(getOption("categories"));
+    int cardinality = Integer.parseInt(getOption("cardinality", "100000"));
+    int threadCount = Integer.parseInt(getOption("threads", "20"));
+    int poolSize = Integer.parseInt(getOption("poolSize", "5"));
     Dictionary asfDictionary = new Dictionary();
-
-
-    AdaptiveLogisticRegression learningAlgorithm = new AdaptiveLogisticRegression(numCats, cardinality, new L1());
+    AdaptiveLogisticRegression learningAlgorithm = new AdaptiveLogisticRegression(numCats, cardinality, new L1(), threadCount, poolSize);
     learningAlgorithm.setInterval(800);
     learningAlgorithm.setAveragingWindow(500);
 
@@ -99,7 +107,7 @@ public boolean accept(Path path) {
       k++;
       State<AdaptiveLogisticRegression.Wrapper, CrossFoldLearner> best = learningAlgorithm.getBest();
 
-      SGDHelper.analyzeState(info, leakType, k, best);
+      SGDHelper.analyzeState(info, 0, k, best);
     }
     learningAlgorithm.close();
     //TODO: how to dissection since we aren't processing the files here
@@ -123,5 +131,11 @@ public boolean accept(Path path) {
         break;
       }
     }
+    return result;
+  }
+
+  public static void main(String[] args) throws Exception {
+    TrainASFEmail trainer = new TrainASFEmail();
+    trainer.run(args);
   }
 }
diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java
index 9dd085f0..df7c72f5 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromMailArchives.java
@@ -142,6 +142,10 @@ public static void main(String[] args) throws Exception {
             withDescription("Include the references field in the text.  Default is false").withShortName("refs").create();
     Option bodyOpt = obuilder.withLongName("body").withRequired(false).
             withDescription("Include the body in the output.  Default is false").withShortName("b").create();
+    Option quotedOpt = obuilder.withLongName("stripQuoted").withRequired(false).
+            withDescription("Strip (remove) quoted email text in the body.  Default is false").withShortName("q").create();
+    Option quotedRegexOpt = obuilder.withLongName("quotedRegex").withRequired(false).withArgument(abuilder.withName("regex").withMinimum(1).withMaximum(1).create())
+            .withDescription("Specify the regex that identifies quoted text.  Default is to look for > or | at the beginning of the line.").withShortName("q").create();
     Option separatorOpt = obuilder.withLongName("separator").withRequired(false).withArgument(
             abuilder.withName("separator").withMinimum(1).withMaximum(1).create()).
             withDescription("The separator to use between metadata items (to, from, etc.).  Default is \\n").withShortName("sep").create();
@@ -153,7 +157,8 @@ public static void main(String[] args) throws Exception {
 
     Group group = gbuilder.withName("Options").withOption(keyPrefixOpt).withOption(chunkSizeOpt).withOption(
             charsetOpt).withOption(outputDirOpt).withOption(helpOpt).withOption(inputOpt).withOption(subjectOpt).withOption(toOpt)
-            .withOption(fromOpt).withOption(bodyOpt).withOption(refsOpt).withOption(bodySeparatorOpt)
+            .withOption(fromOpt).withOption(bodyOpt).withOption(quotedOpt).withOption(refsOpt).withOption(bodySeparatorOpt)
+            .withOption(quotedRegexOpt)
             .withOption(separatorOpt).create();
 
     try {
@@ -210,6 +215,8 @@ public static void main(String[] args) throws Exception {
         patterns.add(MailProcessor.SUBJECT_PREFIX);
         patternOrder.put(MailOptions.SUBJECT, order++);
       }
+      options.setStripQuotedText(cmdLine.hasOption(quotedOpt));
+
       options.setPatternsToMatch(patterns.toArray(new Pattern[patterns.size()]));
       options.setPatternOrder(patternOrder);
       options.setIncludeBody(cmdLine.hasOption(bodyOpt));
@@ -220,6 +227,9 @@ public static void main(String[] args) throws Exception {
       if (cmdLine.hasOption(bodySeparatorOpt)) {
         options.setBodySeparator(cmdLine.getValue(bodySeparatorOpt).toString());
       }
+      if (cmdLine.hasOption(quotedRegexOpt)){
+        options.setQuotedTextPattern(Pattern.compile(cmdLine.getValue(quotedRegexOpt).toString()));
+      }
       long start = System.currentTimeMillis();
       dir.createSequenceFiles(options);
       long finish = System.currentTimeMillis();
diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/email/MailOptions.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/email/MailOptions.java
index 31de4536..86c3968e 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/email/MailOptions.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/email/MailOptions.java
@@ -28,7 +28,9 @@
   public static final String TO = "TO";
   public static final String REFS = "REFS";
   public static final String SUBJECT = "SUBJECT";
+  public static final Pattern DEFAULT_QUOTED_TEXT = Pattern.compile("^(\\||>)");
 
+  private boolean stripQuotedText;
   private File input;
   private String outputDir;
   private String prefix;
@@ -41,6 +43,9 @@
   //maps FROM, TO, REFS, SUBJECT, etc. to the order they appear in patternsToMatch.  See MailToRecMapper
   private Map<String, Integer> patternOrder;
 
+  //the regular expression to use for identifying quoted text.
+  private Pattern quotedTextPattern = DEFAULT_QUOTED_TEXT;
+
   public File getInput() {
     return input;
   }
@@ -121,4 +126,32 @@ public void setPatternOrder(Map<String, Integer> patternOrder) {
     this.patternOrder = patternOrder;
   }
 
+  /**
+   *
+   * @return true if we should strip out quoted email text
+   */
+  public boolean isStripQuotedText() {
+    return stripQuotedText;
+  }
+
+  /**
+   *
+   * @param stripQuotedText if true, then strip off quoted text, such as lines starting with | or >
+   */
+  public void setStripQuotedText(boolean stripQuotedText) {
+    this.stripQuotedText = stripQuotedText;
+  }
+
+  public Pattern getQuotedTextPattern() {
+    return quotedTextPattern;
+  }
+
+  /**
+   * @see #setStripQuotedText(boolean)
+   *
+   * @param quotedTextPattern The {@link java.util.regex.Pattern} to use to identify lines that are quoted text.  Default is | and >
+   */
+  public void setQuotedTextPattern(Pattern quotedTextPattern) {
+    this.quotedTextPattern = quotedTextPattern;
+  }
 }
diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/email/MailProcessor.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/email/MailProcessor.java
index 30075514..b323b8a2 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/email/MailProcessor.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/email/MailProcessor.java
@@ -76,7 +76,11 @@ public long parseMboxLineByLine(File mboxFile) throws IOException {
 
       String messageId = null;
       boolean inBody = false;
+      Pattern quotedTextPattern = options.getQuotedTextPattern();
       for (String nextLine : new FileLineIterable(mboxFile, options.getCharset(), false)) {
+        if (options.isStripQuotedText() && quotedTextPattern.matcher(nextLine).find()){
+          continue;
+        }
         for (int i = 0; i < matchers.length; i++) {
           Matcher matcher = matchers[i];
           matcher.reset(nextLine);
diff --git a/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/email/MailProcessorTest.java b/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/email/MailProcessorTest.java
index d1048aa0..77307bbc 100644
--- a/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/email/MailProcessorTest.java
+++ b/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/email/MailProcessorTest.java
@@ -44,4 +44,29 @@ public void testLabel() throws Exception {
     assertEquals(7, count);
   }
 
+  @Test
+  public void testStripQuoted() throws Exception {
+    StringWriter writer = new StringWriter();
+    MailOptions options = new MailOptions();
+    options.setSeparator(":::");
+    options.setCharset(Charsets.UTF_8);
+        options.setPatternsToMatch(new Pattern[]{
+        MailProcessor.SUBJECT_PREFIX});
+    options.setInput(new File(System.getProperty("user.dir")));
+    options.setIncludeBody(true);
+    MailProcessor proc = new MailProcessor(options, "", writer);
+    URL url = MailProcessorTest.class.getClassLoader().getResource("test.mbox");
+    File file = new File(url.toURI());
+    long count = proc.parseMboxLineByLine(file);
+    assertEquals(7, count);
+    assertTrue(writer.getBuffer().toString().contains("> Cocoon Cron Block Configurable Clustering"));
+    writer = new StringWriter();
+    proc = new MailProcessor(options, "", writer);
+    options.setStripQuotedText(true);
+    count = proc.parseMboxLineByLine(file);
+    assertEquals(7, count);
+    assertFalse(writer.getBuffer().toString().contains("> Cocoon Cron Block Configurable Clustering"));
+
+  }
+
 }
