diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/catalog/SystemProcedures.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/catalog/SystemProcedures.java
index 0469123c..0d505cdb 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/catalog/SystemProcedures.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/catalog/SystemProcedures.java
@@ -425,11 +425,12 @@ public static void SQLPRIMARYKEYS (String catalogName, String schemaName, String
 	/**
 	 *  Map SQLGetTypeInfo to EmbedDatabaseMetaData.getTypeInfo
 	 *
-	 *  @param resultset output parameter, the resultset object containing the result of getTypeInfo
-	 *  @param datatType SYSIBM.SQLGetTypeInfo DataType smallint,
+	 *  @param dataType  SYSIBM.SQLGetTypeInfo DataType smallint,
 	 *  @param options   SYSIBM.SQLGetTypeInfo Options  varchar(4000))
 	 *  	If options contains the string 'DATATYPE='ODBC'', call the ODBC
 	 *  	version of this procedure.
+	 *  @param rs        output parameter, the resultset object containing the
+     *                   result of getTypeInfo
 	 */
 	public static void SQLGETTYPEINFO (short dataType, String options, ResultSet[] rs)
 		throws SQLException
@@ -442,8 +443,6 @@ public static void SQLGETTYPEINFO (short dataType, String options, ResultSet[] r
 	/**
 	 *  Map SQLStatistics to EmbedDatabaseMetaData.getIndexInfo
 	 *
-	 *  @param resultset   output parameter, the resultset object 
-	 *			containing the result of getIndexInfo
 	 *  @param catalogName SYSIBM.SQLStatistics CatalogName varchar(128),
 	 *  @param schemaName  SYSIBM.SQLStatistics SchemaName  varchar(128),
 	 *  @param tableName   SYSIBM.SQLStatistics TableName   varchar(128),
@@ -452,6 +451,8 @@ public static void SQLGETTYPEINFO (short dataType, String options, ResultSet[] r
 	 *  @param options     SYSIBM.SQLStatistics Options     varchar(4000))
 	 *  	If options contains the string 'DATATYPE='ODBC'', call the ODBC
 	 *  	version of this procedure.
+	 *  @param rs          output parameter, the resultset object containing 
+     *                     the result of getIndexInfo
 	 */
 	public static void SQLSTATISTICS (String catalogName, String schemaName, String tableName,
 										short unique, short approximate, String options, ResultSet[] rs)
@@ -469,9 +470,7 @@ public static void SQLSTATISTICS (String catalogName, String schemaName, String
 	/**
 	 *  Map SQLSpecialColumns to EmbedDatabaseMetaData.getBestRowIdentifier and getVersionColumns
 	 *
-	 *  @param resultset   output parameter, the resultset object 
-	 *			containing the result of the DatabaseMetaData call
-	 *  @param coltype     SYSIBM.SQLSpecialColumns ColType     smallint,
+	 *  @param colType     SYSIBM.SQLSpecialColumns ColType     smallint,
 	 *			where 1 means getBestRowIdentifier and 2 getVersionColumns was called.
 	 *  @param catalogName SYSIBM.SQLSpecialColumns CatalogName varchar(128),
 	 *  @param schemaName  SYSIBM.SQLSpecialColumns SchemaName  varchar(128),
@@ -481,6 +480,8 @@ public static void SQLSTATISTICS (String catalogName, String schemaName, String
 	 *  @param options     SYSIBM.SQLSpecialColumns Options     varchar(4000))
 	 *  	If options contains the string 'DATATYPE='ODBC'', call the ODBC
 	 *  	version of this procedure.
+	 *  @param rs          output parameter, the resultset object containing 
+     *                     the result of the DatabaseMetaData call
 	 */
 	public static void SQLSPECIALCOLUMNS (short colType, String catalogName, String schemaName, String tableName,
 										short scope, short nullable, String options, ResultSet[] rs)
@@ -507,13 +508,13 @@ public static void SQLSPECIALCOLUMNS (short colType, String catalogName, String
 	/**
 	 *  Map SQLUDTS to EmbedDatabaseMetaData.getUDTs
 	 *
-	 *  @param resultset       output parameter, the resultset object 
-	 *				containing the result of getUDTs, which will be empty
 	 *  @param catalogName     SYSIBM.SQLUDTS CatalogName          varchar(128),
 	 *  @param schemaPattern   SYSIBM.SQLUDTS Schema_Name_Pattern  varchar(128),
 	 *  @param typeNamePattern SYSIBM.SQLUDTS Type_Name_Pattern    varchar(128),
 	 *  @param udtTypes        SYSIBM.SQLUDTS UDTTypes             varchar(128),
 	 *  @param options         SYSIBM.SQLUDTS Options              varchar(4000))
+	 *  @param rs              output parameter, the resultset object containing
+     *                         the result of getUDTs, which will be empty
 	 */
 	public static void SQLUDTS (String catalogName, String schemaPattern, String typeNamePattern,
 										String udtTypes, String options, ResultSet[] rs)
@@ -610,7 +611,7 @@ public static String SYSCS_GET_DATABASE_PROPERTY(
     }
 
     /**
-     * compress the table
+     * Compress the table.
      * <p>
      * Calls the "alter table compress {sequential}" sql.  This syntax
      * is not db2 compatible so it mapped by a system routine.  This
@@ -853,7 +854,7 @@ public static void REPLACE_JAR(String url, String jar)
 		Remove a jar file from the database.
 
 		@param jar SQL name of jar to be replaced.
-		@param deploy Ignored.
+		@param undeploy Ignored.
 
 		@exception SQLException Error removing jar file.
 	*/
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/db/OnlineCompress.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/db/OnlineCompress.java
index ad8cc577..f699200b 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/db/OnlineCompress.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/db/OnlineCompress.java
@@ -101,6 +101,26 @@ public static void compressTable(
 
 	}
 
+    /**
+     * Defragment rows in the given table.
+     * <p>
+     * Scans the rows at the end of a table and moves them to free spots
+     * towards the beginning of the table.  In the same transaction all
+     * associated indexes are updated to reflect the new location of the
+     * base table row.
+     * <p>
+     * After a defragment pass, if was possible, there will be a set of
+     * empty pages at the end of the table which can be returned to the
+     * operating system by calling truncateEnd().  The allocation bit
+     * maps will be set so that new inserts will tend to go to empty and
+     * half filled pages starting from the front of the conglomerate.
+     *
+     * @param schemaName        schema of table to defragement
+     * @param tableName         name of table to defragment
+     * @param data_dictionary   An open data dictionary to look up the table in.
+     * @param tc                transaction controller to use to do updates.
+     *
+     **/
 	private static void defragmentRows(
     String                  schemaName, 
     String                  tableName,
@@ -288,6 +308,20 @@ private static void defragmentRows(
 		return;
 	}
 
+    /**
+     * Purge committed deleted rows from conglomerate.
+     * <p>
+     * Scans the table and purges any committed deleted rows from the 
+     * table.  If all rows on a page are purged then page is also 
+     * reclaimed.
+     * <p>
+     *
+     * @param schemaName        schema of table to defragement
+     * @param tableName         name of table to defragment
+     * @param data_dictionary   An open data dictionary to look up the table in.
+     * @param tc                transaction controller to use to do updates.
+     *
+     **/
 	private static void purgeRows(
     String                  schemaName, 
     String                  tableName,
@@ -325,6 +359,20 @@ private static void purgeRows(
         return;
     }
 
+    /**
+     * Truncate end of conglomerate.
+     * <p>
+     * Returns the contiguous free space at the end of the table back to
+     * the operating system.  Takes care of space allocation bit maps, and
+     * OS call to return the actual space.
+     * <p>
+     *
+     * @param schemaName        schema of table to defragement
+     * @param tableName         name of table to defragment
+     * @param data_dictionary   An open data dictionary to look up the table in.
+     * @param tc                transaction controller to use to do updates.
+     *
+     **/
 	private static void truncateEnd(
     String                  schemaName, 
     String                  tableName,
@@ -449,10 +497,14 @@ private static void setup_indexes(
      * Delete old index row and insert new index row in input index.
      * <p>
      *
-	 * @return The identifier to be used to open the conglomerate later.
+     * @param base_row      all columns of base row
+     * @param index_row     an index row template, filled in by this routine
+     * @param old_row_loc   old location of base row, used to delete index
+     * @param new_row_loc   new location of base row, used to update index
+     * @param index_cc      index conglomerate to insert new row
+     * @param index_scan    index scan to delete old entry
+     * @param index_col_map description of mapping of index row to base row,
      *
-     * @param param1 param1 does this.
-     * @param param2 param2 does this.
      *
 	 * @exception  StandardException  Standard exception policy.
      **/
@@ -484,9 +536,6 @@ private static void fixIndex(
         // last column in index in the RowLocation
         index_row[index_row.length - 1] = old_row_loc;
 
-        SanityManager.DEBUG_PRINT("OnlineCompress", "row before delete = " +
-                RowUtil.toString(index_row));
-
         // position the scan for the delete, the scan should already be open.
         // This is done by setting start scan to full key, GE and stop scan
         // to full key, GT.
@@ -517,8 +566,6 @@ private static void fixIndex(
         // insert the new index row into the conglomerate
         index_row[index_row.length - 1] = new_row_loc;
 
-        SanityManager.DEBUG_PRINT("OnlineCompress", "row before insert = " +
-                RowUtil.toString(index_row));
         index_cc.insert(index_row);
 
         return;
