diff --git a/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.java b/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.java
index cc57ab0c..addcd33d 100644
--- a/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.java
+++ b/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/impl/StreamingUpdateSolrServer.java
@@ -23,11 +23,7 @@
 import java.net.MalformedURLException;
 import java.util.LinkedList;
 import java.util.Queue;
-import java.util.concurrent.BlockingQueue;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
-import java.util.concurrent.LinkedBlockingQueue;
-import java.util.concurrent.TimeUnit;
+import java.util.concurrent.*;
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 
@@ -63,8 +59,8 @@
   final ExecutorService scheduler = Executors.newCachedThreadPool();
   final String updateUrl = "/update";
   final Queue<Runner> runners;
-  Lock lock = null;  // used to block everything
-  int threadCount = 1;
+  volatile CountDownLatch lock = null;  // used to block everything
+  final int threadCount;
   
   public StreamingUpdateSolrServer(String solrServerUrl, int queueSize, int threadCount ) throws MalformedURLException  {
     super( solrServerUrl );
@@ -77,10 +73,10 @@ public StreamingUpdateSolrServer(String solrServerUrl, int queueSize, int thread
    * Opens a connection and sends everything...
    */
   class Runner implements Runnable {
-    final Lock lock = new ReentrantLock();
+    final Lock runnerLock = new ReentrantLock();
     
     public void run() {
-      lock.lock();
+      runnerLock.lock();
 
       // info is ok since this should only happen once for each thread
       log.info( "starting runner: {}" , this );
@@ -162,7 +158,7 @@ else if( params.getBool( UpdateParams.COMMIT, false ) ) {
           runners.remove( this );
         }
         log.info( "finished: {}" , this );
-        lock.unlock();
+        runnerLock.unlock();
       }
     }
   }
@@ -191,11 +187,12 @@ else if( params.getBool( UpdateParams.COMMIT, false ) ) {
       }
     }
     
-    
-    if( lock != null ) {
-      lock.lock();  // keep it from adding new commands while we block
-    }
     try {
+      CountDownLatch tmpLock = lock;
+      if( tmpLock != null ) {
+        tmpLock.await();
+      }
+
       queue.put( req );
       
       if( runners.isEmpty() 
@@ -213,11 +210,6 @@ else if( params.getBool( UpdateParams.COMMIT, false ) ) {
       log.error( "interuped", e );
       throw new IOException( e.getLocalizedMessage() );
     }
-    finally {
-      if( lock != null ) {
-        lock.unlock();
-      }
-    }
     
     // RETURN A DUMMY result
     NamedList<Object> dummy = new NamedList<Object>();
@@ -227,20 +219,19 @@ else if( params.getBool( UpdateParams.COMMIT, false ) ) {
   
   public synchronized void blockUntilFinished()
   {
-    if( lock == null ) {
-      lock = new ReentrantLock();
-    }
-    lock.lock();
-
+    lock = new CountDownLatch(1);
+    try {
     // Wait until no runners are running
     Runner runner = runners.peek();
     while( runner != null ) {
-      runner.lock.lock();
-      runner.lock.unlock();
+        runner.runnerLock.lock();
+        runner.runnerLock.unlock();
       runner = runners.peek();
     }
-    lock.unlock();
-    lock = null;
+    } finally {
+      lock.countDown();
+      lock=null;
+    }
   }
   
   public void handleError( Throwable ex )
