diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java
index 031dfda3..564eba86 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CreateTableConstantAction.java
@@ -376,6 +376,16 @@ public void	executeConstantAction( Activation activation )
 		{
 			lcc.addDeclaredGlobalTempTable(td);
 		}
+
+		// Indicate that the CREATE TABLE statement itself depends on the
+		// table it is creating. Normally such statement dependencies are
+		// added during compilation, but here we have a bootstrapping issue
+		// because the table doesn't exist until the CREATE TABLE statement
+		// has been executed, so we had to defer the creation of this
+		// dependency until now. (DERBY-4479)
+		dd.getDependencyManager().addDependency(
+			activation.getPreparedStatement(), td, lcc.getContextManager());
+
 	}
 
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RenameTableTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RenameTableTest.java
index e0d48c05..1dea5d9b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RenameTableTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/RenameTableTest.java
@@ -230,4 +230,26 @@ public void testRenameWithCheckConstraintsOnIt() throws SQLException {
         // select * from tcheck1;
         s.executeUpdate("drop table tcheck1");
     }
+
+    /**
+     * Tests that rename table invalidates stored statement plans (DERBY-4479).
+     *
+     * By issuing the *identical* create table statement after the rename,
+     * we check to see whether the compiled statements from the first
+     * create table statement were properly invalidated by the rename.
+     * 
+     * @exception SQLException
+     */
+    public void testRenameInvalidation_derby_4479()
+        throws SQLException
+    {
+        getConnection().setAutoCommit(true);
+        Statement s = createStatement();
+        s.executeUpdate("create table a (x int not null primary key)");
+        s.executeUpdate("rename table a to b");
+        s.executeUpdate("create table a (x int not null primary key)");
+        s.executeUpdate("drop table a");
+        s.executeUpdate("drop table b");
+    }
+
 }
