diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java
index 737dfbb6..1efa13a6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java
@@ -421,35 +421,32 @@ public String getSQLKeywords() {
 	}
 
     /**
-     * Get a comma separated list of math functions.
-	getNumericFunctions lists "math functions" -- so built-in operators and
-	things like EXTRACT are not included.
-	FIXME: find a way to reference method aliases known to be "numeric"
-    *
+     * Get a comma separated list of JDBC escaped numeric functions.
+     * Must be a complete or sub set of functions in appendix C.1
      * @return the list
      */
 	public String getNumericFunctions() {
-		return "ABS,SQRT";
+		return "ABS,MOD,SQRT";
 	}
 
     /**
-     * Get a comma separated list of string functions.
-		REMIND, when they show up, something like this might appear here:
-		FIXME: find a way to reference method aliases known to be "string"
+     * Get a comma separated list of JDBC escaped string functions.
+     * Must be a complete or sub set of functions in appendix C.2
+     * of JDBC 3.0 specification.
      * @return the list
      */
 	public String getStringFunctions() {
-		return "LENGTH,LOWER,LTRIM,RTRIM,SUBSTR,SUBSTRING,UPPER";
+		return "CONCAT,LENGTH,LCASE,LOCATE,LTRIM,RTRIM,SUBSTRING,UCASE";
 	}
 
     /**
-     * Get a comma separated list of system functions.
-		FIXME: find a way to reference system functions on Database when/if
-		they are registered as aliases or include the Database object too.
+     * Get a comma separated list of JDBC escaped system functions.
+     * Must be a complete or sub set of functions in appendix C.4
+     * of JDBC 3.0 specification.
      * @return the list
      */
 	public String getSystemFunctions()  {
-		return "CURRENT_USER,getCurrentConnection,runTimeStatistics,SESSION_USER,USER,CURRENT SCHEMA";
+		return "USER";
 	}
 
     /**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadataJdbc20.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadataJdbc20.java
index 5a859414..03b4793c 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadataJdbc20.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadataJdbc20.java
@@ -22,10 +22,13 @@
 
 import java.sql.Connection;
 import java.sql.DatabaseMetaData;
+import java.sql.PreparedStatement;
 import java.sql.ResultSetMetaData;
 import java.sql.Statement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.sql.Types;
+import java.util.StringTokenizer;
 
 import org.apache.derby.tools.ij;
 
@@ -109,6 +112,15 @@ public static void main(String[] args) {
 
 			s.close();
 
+			System.out.println("Test escaped numeric functions - JDBC 3.0 C.1");
+			testEscapedFunctions(con, NUMERIC_FUNCTIONS, met.getNumericFunctions());
+			
+			System.out.println("Test escaped string functions - JDBC 3.0 C.2");
+			testEscapedFunctions(con, STRING_FUNCTIONS, met.getStringFunctions());
+			
+			System.out.println("Test escaped system functions - JDBC 3.0 C.4");
+			testEscapedFunctions(con, SYSTEM_FUNCTIONS, met.getSystemFunctions());
+
 			con.close();
 
 		}
@@ -131,6 +143,12 @@ static private void dumpSQLExceptions (SQLException se) {
 			se = se.getNextException();
 		}
 	}
+	static private void showSQLExceptions (SQLException se) {
+		while (se != null) {
+			System.out.println("SQLSTATE("+se.getSQLState()+"): " + se.getMessage());
+			se = se.getNextException();
+		}
+	}
 
 	static void dumpRS(ResultSet s) throws SQLException {
 		ResultSetMetaData rsmd = s.getMetaData ();
@@ -162,4 +180,185 @@ static void dumpRS(ResultSet s) throws SQLException {
 		}
 		s.close();
 	}
+	
+	/*
+	** Escaped function testing
+	*/
+	private static final String[][] NUMERIC_FUNCTIONS =
+	{
+		// Section C.1 JDBC 3.0 spec.
+		{ "ABS", "-25.67" },
+		{ "ACOS", "1.34" },
+		{ "ASIN", "1.21" },
+		{ "ATAN", "0.34" },
+		{ "ATAN2", "0.56", "1.2" },
+		{ "CEILING", "3.45" },
+		{ "COS", "1.2" },
+		{ "COT", "3.4" },
+		{ "DEGREES", "2.1" },
+		{ "EXP", "2.3" },
+		{ "FLOOR", "3.22" },
+		{ "LOG", "34.1" },
+		{ "LOG10", "18.7" },
+		{ "MOD", "124", "7" },
+		{ "PI" },
+		{ "POWER", "2", "3" },
+		{ "RADIANS", "54" },
+		{ "RAND", "17" }, 
+		{ "ROUND", "345.345", "1" }, 
+		{ "SIGN", "-34" },
+		{ "SIN", "0.32" },
+		{ "SQRT", "6.22" },
+		{ "TAN", "0.57", },
+		{ "TRUNCATE", "345.395", "1" }
+	};
+	
+	private static final String[][] STRING_FUNCTIONS =
+	{	
+		// Section C.2 JDBC 3.0 spec.
+		{ "ASCII" , "'Yellow'" },
+		{ "CHAR", "65" },
+		{ "CONCAT", "'hello'", "'there'" },
+		{ "DIFFERENCE", "'Pires'", "'Piers'" },
+		{ "INSERT", "'Bill Clinton'", "4", "'William'" },
+		{ "LCASE", "'Fernando Alonso'" },
+		{ "LEFT", "'Bonjour'", "3" },
+		{ "LENGTH", "'four    '" } ,
+		{ "LOCATE", "'jour'", "'Bonjour'" },
+		{ "LTRIM", "'   left trim   '"},
+		{ "REPEAT", "'echo'", "3" },
+		{ "REPLACE", "'to be or not to be'", "'be'", "'England'" },
+		{ "RTRIM", "'  right trim   '"},
+		{ "SOUNDEX", "'Derby'" },
+		{ "SPACE", "12"},
+		{ "SUBSTRING", "'Ruby the Rubicon Jeep'", "10", "7", },
+		{ "UCASE", "'Fernando Alonso'" }
+		};
+	
+	private static final String[][] SYSTEM_FUNCTIONS =
+	{	
+		// Section C.4 JDBC 3.0 spec.
+		{ "DATABASE" },
+		{ "IFNULL", "'this'", "'that'" },
+		{ "USER"},
+		};	
+	
+
+	/**
+	 * Test escaped functions. Working from the list of escaped functions defined
+	 * by JDBC, compared to the list returned by the driver.
+	 * <OL>
+	 * <LI> See that all functions defined by the driver are in the spec list
+	 * and that they work.
+	 * <LI> See that only functions defined by the spec are in the driver's list.
+	 * <LI> See that any functions defined by the spec that work are in the driver's list.
+	 * </OL>
+	 * FAIL will be printed for any issues.
+	 * @param conn
+	 * @param specList
+	 * @param metaDataList
+	 * @throws SQLException
+	 */
+	private static void testEscapedFunctions(Connection conn, String[][] specList, String metaDataList)
+	throws SQLException
+	{
+		boolean[] seenFunction = new boolean[specList.length];
+		
+		System.out.println("TEST FUNCTIONS DECLARED IN DATABASEMETADATA LIST");
+		StringTokenizer st = new StringTokenizer(metaDataList, ",");
+		while (st.hasMoreTokens())
+		{
+			String function = st.nextToken();
+			
+			// find this function in the list
+			boolean isSpecFunction = false;
+			for (int f = 0; f < specList.length; f++)
+			{
+				String[] specDetails = specList[f];
+				if (function.equals(specDetails[0]))
+				{
+					// Matched spec.
+					if (seenFunction[f])
+						System.out.println("FAIL Function in list twice: " + function);
+					seenFunction[f] = true;
+					isSpecFunction = true;
+					
+					if (!executeEscaped(conn, specDetails))
+						System.out.println("FAIL Function failed to execute "+ function);
+					break;
+				}
+			}
+			
+			if (!isSpecFunction)
+			{
+				System.out.println("FAIL Non-JDBC spec function in list: " + function);
+			}
+		}
+		
+		// Now see if any speced functions are not in the metadata list
+		System.out.println("TEST FUNCTIONS NOT DECLARED IN DATABASEMETADATA LIST");
+		for (int f = 0; f < specList.length; f++)
+		{
+			if (seenFunction[f])
+				continue;
+			String[] specDetails = specList[f];
+			if (executeEscaped(conn, specDetails))
+				System.out.println("FAIL function works but not declared in list: " + specDetails[0]);
+			
+		}
+	}
+	
+	private static boolean executeEscaped(Connection conn, String[] specDetails)
+	{
+		
+		String sql = "VALUES { fn " + specDetails[0] + "(";
+		
+		for (int p = 0; p < specDetails.length - 1; p++)
+		{
+			if (p != 0)
+				sql = sql + ", ";
+			
+			sql = sql + specDetails[p + 1];
+		}
+		
+		sql = sql + ") }";
+		
+		System.out.print("Executing " + sql + " -- ");
+			
+		try {
+			PreparedStatement ps = conn.prepareStatement(sql);
+			ResultSet rs = ps.executeQuery();
+			
+			while (rs.next())
+			{
+				// truncate numbers to avoid multiple master files
+				// with double values.
+				String res = rs.getString(1);
+				
+				switch (rs.getMetaData().getColumnType(1))
+				{
+				case Types.DOUBLE:
+				case Types.REAL:
+				case Types.FLOAT:
+					if (res.length() > 4)
+						res = res.substring(0, 4);
+					break;
+				default:
+					break;
+				}
+				System.out.print("  = >" + res + "< ");
+			}
+			rs.close();
+			ps.close();
+			System.out.println(" << ");
+			return true;
+		} catch (SQLException e) {
+			System.out.println("");
+			showSQLExceptions(e);
+			return false;
+		}
+		
+	}
+	
+	
 }
