diff --git a/db/derby/code/branches/10.5/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/branches/10.5/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index 8af95062..c170ae45 100644
--- a/db/derby/code/branches/10.5/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/branches/10.5/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -1797,23 +1797,23 @@ The message identifier (ie. the value that matches a field in this class)
     String REPLICATION_LOG_CORRUPTED                               = "XRE01";
     String REPLICATION_MASTER_SLAVE_VERSION_MISMATCH               = "XRE02";
     String REPLICATION_UNEXPECTED_EXCEPTION                        = "XRE03";
-    String REPLICATION_CONNECTION_EXCEPTION                        = "XRE04.U.1";
-    String REPLICATION_CONNECTION_LOST                             = "XRE04.U.2";
-    String REPLICATION_LOG_OUT_OF_SYNCH                            = "XRE05";
+    String REPLICATION_CONNECTION_EXCEPTION                        = "XRE04.C.1";
+    String REPLICATION_CONNECTION_LOST                             = "XRE04.C.2";
+    String REPLICATION_LOG_OUT_OF_SYNCH                            = "XRE05.C";
     String REPLICATION_MASTER_TIMED_OUT                            = "XRE06";
     String REPLICATION_NOT_IN_MASTER_MODE                          = "XRE07";
     String REPLICATION_SLAVE_STARTED_OK                            = "XRE08";
-    String CANNOT_START_SLAVE_ALREADY_BOOTED                       = "XRE09";
+    String CANNOT_START_SLAVE_ALREADY_BOOTED                       = "XRE09.C";
     String REPLICATION_CONFLICTING_ATTRIBUTES                      = "XRE10";
-    String REPLICATION_DB_NOT_BOOTED                               = "XRE11";
+    String REPLICATION_DB_NOT_BOOTED                               = "XRE11.C";
     String REPLICATION_UNEXPECTED_MESSAGEID                        = "XRE12";
     String REPLICATION_FAILOVER_SUCCESSFUL                         = "XRE20.D";
-    String REPLICATION_FAILOVER_UNSUCCESSFUL                       = "XRE21";
-    String REPLICATION_MASTER_ALREADY_BOOTED                       = "XRE22";
+    String REPLICATION_FAILOVER_UNSUCCESSFUL                       = "XRE21.C";
+    String REPLICATION_MASTER_ALREADY_BOOTED                       = "XRE22.C";
     String REPLICATION_UNLOGGED_OPERATIONS_IN_PROGRESS             = "XRE23";
     String REPLICATION_NOT_IN_SLAVE_MODE                           = "XRE40";
-    String SLAVE_OPERATION_DENIED_WHILE_CONNECTED                  = "XRE41";
-    String REPLICATION_SLAVE_SHUTDOWN_OK                           = "XRE42";
+    String SLAVE_OPERATION_DENIED_WHILE_CONNECTED                  = "XRE41.C";
+    String REPLICATION_SLAVE_SHUTDOWN_OK                           = "XRE42.C";
     String REPLICATION_STOPSLAVE_NOT_INITIATED                     = "XRE43";
 }
 
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java
index 955f76cc..a3d66c6b 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java
@@ -245,9 +245,16 @@ public void test_errorcode() throws Exception
         		{"XSTB3","Cannot abort transaction because the log manager is null, probably due to an earlier error.","50000"},
         		{"XSTB5","Creating database with logging disabled encountered unexpected problem.","50000"},
         		{"XSTB6","Cannot substitute a transaction table with another while one is already in use.","50000"},
-        		{"XXXXX","Normal database session close.","40000"}};
-
-        		
+                {"XXXXX","Normal database session close.","40000"},
+                {"XRE04","Could not establish a connection to the peer of the replicated database '{0}' on address '{1}:{2}'.","40000"},
+                {"XRE04","Connection lost for replicated database '{0}'.","40000"},
+                {"XRE05","The log files on the master and slave are not in synch for replicated database '{0}'. The master log instant is {1}:{2}, whereas the slave log instant is {3}:{4}. This is FATAL for replication - replication will be stopped.","40000"},
+                {"XRE09","Cannot start replication slave mode for database '{0}'. The database has already been booted.","40000"},
+                {"XRE11","Could not perform operation '{0}' because the database '{1}' has not been booted.","40000"},
+                {"XRE21","Error occurred while performing failover for database '{0}', Failover attempt was aborted.","40000"},
+                {"XRE22","Replication master has already been booted for database '{0}'","40000"},
+                {"XRE41","Replication operation 'failover' or 'stopSlave' refused on the slave database because the connection with the master is working. Issue the 'failover' or 'stopMaster' operation on the master database instead.","40000"},
+                {"XRE42","Replicated database '{0}' shutdown.","40000"}};
 
         JDBC.assertUnorderedResultSet(rs, expectedRows);
         s.executeUpdate("drop table t");
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java
index 961f2fde..6677a02e 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun.java
@@ -28,7 +28,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.*;
 import java.io.*;
 import org.apache.derby.jdbc.ClientDataSource;
-import org.apache.derby.shared.common.reference.SQLState;
 
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.BaseTestCase;
@@ -49,6 +48,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      */
     final static String REPLICATIONTEST_PROPFILE = "replicationtest.properties";
     
+    final static String REPLICATION_MASTER_TIMED_OUT = "XRE06";
+
     static String testUser = null;
     
     static String userDir = null;
@@ -1004,7 +1005,7 @@ private void startMaster_direct(String dbName,
                     }
                     else
                     {
-                        if (SQLState.REPLICATION_MASTER_TIMED_OUT.equals(sState)) // FIXME! CANNOT_START_MASTER_ALREADY_BOOTED
+                        if (REPLICATION_MASTER_TIMED_OUT.equals(sState)) // FIXME! CANNOT_START_MASTER_ALREADY_BOOTED
                         {
                             util.DEBUG("Master already started?");
                         }
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1.java
index 88341adb..405c7c5d 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1.java
@@ -25,7 +25,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.SQLException;
 import junit.framework.Test;
 import junit.framework.TestSuite;
-import org.apache.derby.shared.common.reference.SQLState;
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.SecurityManagerSetup;
 
 
@@ -38,8 +38,16 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 public class ReplicationRun_Local_StateTest_part1 extends ReplicationRun
 {
+    final static String CANNOT_CONNECT_TO_DB_IN_SLAVE_MODE = "08004";
+    final static String LOGIN_FAILED = "08004";
+    final static String REPLICATION_DB_NOT_BOOTED = "XRE11";
+    final static String REPLICATION_MASTER_ALREADY_BOOTED = "XRE22";
+    final static String REPLICATION_NOT_IN_MASTER_MODE = "XRE07";
+    final static String REPLICATION_SLAVE_STARTED_OK = "XRE08";
     
-    /**
+
+
+/**
      * Creates a new instance of ReplicationRun_Local_StateTest_part1
      * 
      * @param testcaseName Identifying the test.
@@ -262,8 +270,10 @@ private void _testPreInitSlave()
             String msg = ec + " " + ss + " " + se.getMessage();
             // SQLState.REPLICATION_NOT_IN_MASTER_MODE
 
-            assertTrue("stopMaster on master failed: " + msg, 
-                    SQLState.REPLICATION_NOT_IN_MASTER_MODE.equals(ss));
+            BaseJDBCTestCase.assertSQLState(
+                "stopMaster on master failed: " + msg,
+                REPLICATION_NOT_IN_MASTER_MODE,
+                se);
             util.DEBUG("stopMaster on master failed as expected: " + connectionURL + " " + msg);
         }
         
@@ -285,8 +295,10 @@ private void _testPreInitSlave()
             int ec = se.getErrorCode();
             String ss = se.getSQLState();
             String msg = ec + " " + ss + " " + se.getMessage();
-            assertTrue("stopSlave on slave failed: " + msg, 
-                    SQLState.REPLICATION_DB_NOT_BOOTED.equals(ss));
+            BaseJDBCTestCase.assertSQLState(
+                "stopSlave on slave failed: " + msg,
+                REPLICATION_DB_NOT_BOOTED,
+                se);
             util.DEBUG("stopSlave on slave failed as expected: " + connectionURL + " " + msg);
         }
     }
@@ -317,8 +329,10 @@ private void _testPreStartedSlave()
             String ss = se.getSQLState();
             String msg = ec + " " + ss + " " + se.getMessage();
             util.DEBUG(msg);
-            assertTrue("2. Unexpected SQLException: " + msg, 
-                    SQLState.REPLICATION_SLAVE_STARTED_OK.equals(ss));
+            BaseJDBCTestCase.assertSQLState(
+                "2. Unexpected SQLException: " + msg,
+                REPLICATION_SLAVE_STARTED_OK,
+                se);
         }
         
         // Next StartSlave connect should fail:
@@ -334,8 +348,10 @@ private void _testPreStartedSlave()
             String ss = se.getSQLState();
             String msg = ec + " " + ss + " " + se.getMessage();
             util.DEBUG(msg);
-            assertTrue("2. Unexpected SQLException: " + msg, 
-                    SQLState.LOGIN_FAILED.equals(ss));
+            BaseJDBCTestCase.assertSQLState(
+                "2. Unexpected SQLException: " + msg,
+                LOGIN_FAILED,
+                se);
         }
         
     }
@@ -377,8 +393,10 @@ private void _testPreStartedMaster()
             String msg = ec + " " + ss + " " + se.getMessage();
             util.DEBUG(msg);
             util.DEBUG("1. startMaster: No connection as expected: " + msg);
-            assertTrue("1. Unexpected SQLException: " + msg, 
-                    SQLState.REPLICATION_CONNECTION_EXCEPTION.equals(ss));
+            BaseJDBCTestCase.assertSQLState(
+                "1. Unexpected SQLException: " + msg,
+                REPLICATION_CONNECTION_EXCEPTION,
+                se);
         }
         */
         
@@ -399,8 +417,10 @@ private void _testPreStartedMaster()
             String ss = se.getSQLState();
             String msg = ec + " " + ss + " " + se.getMessage();
             util.DEBUG("2. startMaster No connection as expected: " + msg);
-            assertTrue("2. Unexpected SQLException: " + msg, 
-                    SQLState.REPLICATION_MASTER_ALREADY_BOOTED.equals(ss));
+            BaseJDBCTestCase.assertSQLState(
+                "2. Unexpected SQLException: " + msg,
+                REPLICATION_MASTER_ALREADY_BOOTED,
+                se);
         }
         }
         
@@ -426,8 +446,10 @@ private void _testPreStartedMaster()
             String ss = se.getSQLState();
             String msg = ec + " " + ss + " " + se.getMessage();
             util.DEBUG("3. startSlave No connection as expected: " + msg);
-            assertTrue("3. Unexpected SQLException: " + msg, 
-                   SQLState.CANNOT_CONNECT_TO_DB_IN_SLAVE_MODE.startsWith(ss));
+            BaseJDBCTestCase.assertSQLState(
+                "3. Unexpected SQLException: " + msg,
+                CANNOT_CONNECT_TO_DB_IN_SLAVE_MODE,
+                se);
         }
     }
     
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java
index 94d7fe42..5cfeabcf 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_1.java
@@ -25,8 +25,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.SQLException;
 import junit.framework.Test;
 import junit.framework.TestSuite;
-import org.apache.derby.shared.common.reference.SQLState;
 import org.apache.derbyTesting.junit.SecurityManagerSetup;
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 
 
 /**
@@ -38,6 +38,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 public class ReplicationRun_Local_StateTest_part1_1 extends ReplicationRun
 {
+    final static String REPLICATION_DB_NOT_BOOTED              = "XRE11";
+    final static String REPLICATION_NOT_IN_SLAVE_MODE          = "XRE40";
+    final static String SLAVE_OPERATION_DENIED_WHILE_CONNECTED = "XRE41";
     
     /**
      * Creates a new instance of ReplicationRun_Local_StateTest_part1
@@ -162,8 +165,10 @@ private void _testPostStartedMasterAndSlave_StopSlave()
             int ec = se.getErrorCode();
             String ss = se.getSQLState();
             String msg = ec + " " + ss + " " + se.getMessage();
-            assertTrue("connectionURL +  failed: " + msg, 
-                    SQLState.SLAVE_OPERATION_DENIED_WHILE_CONNECTED.equals(ss));
+            BaseJDBCTestCase.assertSQLState(
+                connectionURL + " failed: ",
+                SLAVE_OPERATION_DENIED_WHILE_CONNECTED,
+                se);
             util.DEBUG("1. Failed as expected: " + connectionURL +  " " + msg);
         }
         // Default replication test sequence still OK.
@@ -187,8 +192,10 @@ private void _testPostStartedMasterAndSlave_StopSlave()
             String ss = se.getSQLState();
             String msg = ec + " " + ss + " " + se.getMessage();
             // SSQLCODE: -1, SQLSTATE: XRE40
-            assertTrue("connectionURL +  failed: " + msg, 
-                    SQLState.REPLICATION_NOT_IN_SLAVE_MODE.equals(ss));
+            BaseJDBCTestCase.assertSQLState(
+                connectionURL + " failed: ",
+                REPLICATION_NOT_IN_SLAVE_MODE,
+                se);
             util.DEBUG("2. Failed as expected: " + connectionURL +  " " + msg);
         }
         // Default replication test sequence still OK.
@@ -222,9 +229,11 @@ private void _testPostStartedMasterAndSlave_StopSlave()
             String ss = se.getSQLState();
             String msg = ec + " " + ss + " " + se.getMessage();
             util.DEBUG("3. Got "+msg + " Expected: " + 
-                    SQLState.REPLICATION_DB_NOT_BOOTED);
-            assertTrue(connectionURL + " failed: " + msg, 
-                    SQLState.REPLICATION_DB_NOT_BOOTED.equals(ss));
+                       REPLICATION_DB_NOT_BOOTED);
+            BaseJDBCTestCase.assertSQLState(
+                connectionURL + " failed: ",
+                REPLICATION_DB_NOT_BOOTED, 
+                se);
             util.DEBUG("3. Failed as expected: " + connectionURL +  " " + msg);
             stopSlaveCorrect = true;
         }
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_2.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_2.java
index 289947db..db0b8499 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_2.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1_2.java
@@ -25,8 +25,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.SQLException;
 import junit.framework.Test;
 import junit.framework.TestSuite;
-import org.apache.derby.shared.common.reference.SQLState;
 import org.apache.derbyTesting.junit.SecurityManagerSetup;
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 
 
 /**
@@ -39,6 +39,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 public class ReplicationRun_Local_StateTest_part1_2 extends ReplicationRun
 {
     
+    final static String LOGIN_FAILED = "08004";
+    final static String REPLICATION_DB_NOT_BOOTED = "XRE11";
+    final static String REPLICATION_MASTER_ALREADY_BOOTED = "XRE22";
+    final static String REPLICATION_NOT_IN_MASTER_MODE = "XRE07";
+    final static String REPLICATION_SLAVE_STARTED_OK = "XRE08";
     /**
      * Creates a new instance of ReplicationRun_Local_StateTest_part1
      * 
@@ -166,8 +171,10 @@ private void _testPostStartedMasterAndSlave_StopMaster()
             String ss = se.getSQLState();
             String msg = ec + " " + ss + " " + se.getMessage();
             //  SQLCODE: -1, SQLSTATE: 08004
-            assertTrue("connectionURL +  failed: " + msg, 
-                    SQLState.LOGIN_FAILED.equals(ss));
+            BaseJDBCTestCase.assertSQLState(
+                "connectionURL +  failed: " + msg,
+                LOGIN_FAILED,
+                se);
             util.DEBUG("stopMaster on slave failed as expected: " 
                     + connectionURL + " " + msg);
         }
@@ -239,9 +246,11 @@ private void _testPostStartedMasterAndSlave_StopMaster()
             int ec = se.getErrorCode();
             String ss = se.getSQLState();
             String msg = ec + " " + ss + " " + se.getMessage();
-            assertTrue("4. stopMaster on slave failed with: " 
+            BaseJDBCTestCase.assertSQLState(
+                "4. stopMaster on slave failed with: " 
                     + connectionURL + " " + msg, 
-                    SQLState.REPLICATION_NOT_IN_MASTER_MODE.equals(ss));
+                REPLICATION_NOT_IN_MASTER_MODE,
+                se);
             util.DEBUG("4. stopMaster on slave failed as expected: " 
                     + connectionURL + " " + msg);
         }
@@ -287,9 +296,11 @@ private void _testPostStartedMasterAndSlave_StopMaster()
             int ec = se.getErrorCode();
             String ss = se.getSQLState();
             String msg = ec + " " + ss + " " + se.getMessage();
-            assertTrue("6. stopMaster on server not in master mode failed with: " 
+            BaseJDBCTestCase.assertSQLState(
+                "6. stopMaster on server not in master mode failed with: " 
                     + connectionURL + " " + msg, 
-                    SQLState.REPLICATION_NOT_IN_MASTER_MODE.equals(ss));
+                REPLICATION_NOT_IN_MASTER_MODE,
+                se);
             util.DEBUG("6. stopMaster on server not in master mode failed as expected: " 
                     + connectionURL + " " + msg);
         }
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationSuite.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationSuite.java
index c039971d..03051971 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationSuite.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationSuite.java
@@ -1,6 +1,6 @@
 /*
 
-   Derby - Class org.apache.derbyTesting.functionTests.tests.jdbc4.ReplicationSuite
+   Derby - Class org.apache.derbyTesting.functionTests.tests.replicationTests.ReplicationSuite
 
        Licensed to the Apache Software Foundation (ASF) under one
        or more contributor license agreements.  See the NOTICE file
@@ -30,7 +30,7 @@ Licensed to the Apache Software Foundation (ASF) under one
 
 /**
  * Suite to run all JUnit tests in this package:
- * org.apache.derbyTesting.functionTests.tests.jdbc4
+ * org.apache.derbyTesting.functionTests.tests.replicationTests
  *
  */
 public class ReplicationSuite extends BaseTestCase  
