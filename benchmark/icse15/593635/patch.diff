diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/SysinfoCPCheckTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/SysinfoCPCheckTest.java
index 34639612..b3bc4187 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/SysinfoCPCheckTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/SysinfoCPCheckTest.java
@@ -91,30 +91,32 @@ public void testClassPathChecker() throws IOException {
         final String[][] tstargs = {
                 // empty string; should check all; what to check? Just check top
                 // to ensure it recognizes it needs to check all.
-                {null, "0", "Testing for presence of all Derby-related librari" +
-                    "es; typically, only some are needed.", null, "0"},
+                {null, "0", "Testing for presence of all Derby-related " +
+                    "libraries; typically, only some are needed.", null},
                     // incorrect syntax, or 'args' - should return usage
                     {"a", "0", "USAGE: java org.apache.derby.tools.sysinfo -cp [" +
                         " [ embedded ][ server ][ client] [ db2driver ] [ tools ]" +
-                        " [  anyClass.class ] ]", null, "1"},
-                        {"embedded", "6", Success, "derby.jar", "2"}, 
-                        {"server", "10", Success, "derbynet.jar", "3"},
-                        {"tools", "6", Success, "derbytools.jar", "4"},
-                        {"client", "6", Success, "derbyclient.jar", "5"},
-                        // let's not test the following valid value, it's likely to fail:
-                        // {"db2driver", "6", Success, "db2jcc.jar"},
-                        {thisclass, "6", Success, "SysinfoCPCheckTest", "6"},
+                    " [  anyClass.class ] ]", null},
+                {"embedded", "6", Success, "derby.jar"}, 
+                {"server", "10", Success, "derbynet.jar"},
+                {"tools", "6", Success, "derbytools.jar"},
+                {"client", "6", Success, "derbyclient.jar"},
+                // let's not test the following valid value, it will 
+                // fail if db2jcc.jar is not on CLASSPATH
+                //{"db2driver", "6", Success, "db2jcc.jar"},
+                {thisclass, "6", Success, "SysinfoCPCheckTest"},
                         // neg tst, hope this doesn't exist
-                        {"nonexist.class", "6", "    (nonexist not found.)", null, "7"}
+                {"nonexist.class", "6", "    (nonexist not found.)", null}
         };
 
-        // First obtain the output of all sysinfo commands we want to test
-        // we print a number for each of the commands to test for unraveling
-        // them later.
-
         final String outputEncoding = "US-ASCII";
 
         PrintStream out = System.out;
+
+        int tst=0;
+        for (tst=0; tst<tstargs.length ; tst++)
+        {
+            // First obtain the output for the sysinfo command
         try {
             PrintStream testOut = new PrintStream(getOutputStream(),
                     false, outputEncoding);
@@ -123,22 +125,15 @@ public void testClassPathChecker() throws IOException {
             uee.printStackTrace();
         }
 
-        for (int tst=0; tst<tstargs.length ; tst++)
-        {
             if (!checkClientOrServer(tstargs[tst][0]))
                 continue;
 
-            // print out a number to unravel the fulloutput later
-            System.out.println(tstargs[tst][4]);
-
-            // The first command has only 1 arg
+            // First command has only 1 arg, prevent NPE with if/else block 
             if (tstargs[tst][0] == null)
-                org.apache.derby.tools.sysinfo.main(
-                    new String[] {"-cp"} );
+                org.apache.derby.tools.sysinfo.main(new String[] {"-cp"} );
             else
                 org.apache.derby.tools.sysinfo.main(
                     new String[] {"-cp", tstargs[tst][0]} );
-        }
 
         setSystemOut(out);
 
@@ -147,31 +142,26 @@ public void testClassPathChecker() throws IOException {
 
         byte[] testRawBytes = rawBytes.toByteArray();
 
+            //System.out.println("cp command: -cp " + tstargs[tst][0]);
+
         String s = null;
 
         try {
-
             BufferedReader sysinfoOutput = new BufferedReader(
                 new InputStreamReader(
                     new ByteArrayInputStream(testRawBytes),
                         outputEncoding));
 
-            s = sysinfoOutput.readLine();
-
             // evaluate the output
-            for (int tst=0; tst<tstargs.length ; tst++)
-            {
-                //System.out.println("cp command: -cp " + tstargs[tst][0]);
-
                 // compare the sentence picked
 
                 // first one is a bit different - is classpath dependent, so
                 // we're not going to look through all lines.
-                if (tstargs[tst][4].equals("0"))
+                if (tstargs[tst][0]==null)
                 {
                     s=sysinfoOutput.readLine();
                     assertEquals(tstargs[tst][2], s);
-                    while (!s.equals(tstargs[tst+1][4]))
+                    while (s != null)
                     {
                         s=sysinfoOutput.readLine();
                     }
@@ -181,9 +171,6 @@ public void testClassPathChecker() throws IOException {
                 if (!checkClientOrServer(tstargs[tst][0]))
                     continue;
 
-                if (!s.equals(tstargs[tst][4]))
-                    fail("out of sync with expected lines, indicates a problem");
-
                 // get the appropriate line for the full line comparison
                 int linenumber = Integer.parseInt(tstargs[tst][1]);
 
@@ -215,13 +202,13 @@ public void testClassPathChecker() throws IOException {
 
                 // read one more line - should be the next command's sequence number
                 s = sysinfoOutput.readLine();
-            }
 
             sysinfoOutput.close();
         } catch (Exception e) {
             e.printStackTrace();
         }
     }
+    }
 
     public boolean checkClientOrServer(String kind)
     {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/_Suite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/_Suite.java
index 3bd50c1f..bebeff1c 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/_Suite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/_Suite.java
@@ -45,18 +45,13 @@ public static Test suite() {
 
         TestSuite suite = new TestSuite("tools");
 
-        // warning: SysinfoCPCheckTest reassigns System.out, and if
-        // one places this test after a test that runs 'runSQLCommands'
-        // (e.g. IJRunScriptTest, or ImportExportTest), the System.out
-        // never gets the redirected info.
-        // commenting out, as it's not working in Sun's nightlies - see DERBY-3152
-        //suite.addTest(SysinfoCPCheckTest.suite());
         suite.addTest(IJRunScriptTest.suite());
         suite.addTest(ImportExportTest.suite());
         suite.addTest(ImportExportBinaryDataTest.suite());
         suite.addTest(ImportExportLobTest.suite());
         suite.addTest(ImportExportProcedureTest.suite());
         suite.addTest(ToolScripts.suite());
+        suite.addTest(SysinfoCPCheckTest.suite());
 
         // SysinfoAPITest currently fails when run against jars, so is
         // disabled. Only the first jar file on the classpath properly
diff --git a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java
index 50eca49f..d809a7e5 100644
--- a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java
+++ b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java
@@ -93,7 +93,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
   */
   public static void main(String args[]) {
         // adjust the application in accordance with derby.ui.locale and derby.ui.codeset
-        LocalizedResource.getInstance();
+        LocalizedResource.getInstance().init();
 
 		LocalizedOutput out;
 
