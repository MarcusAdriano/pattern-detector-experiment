diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
index 6e03954e..ea039e4d 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
@@ -2324,6 +2324,14 @@ public ResultSetNode bindNonVTITables(DataDictionary dataDictionary,
 					tableDescriptor.getHeapConglomerateId()
 					);
 
+            // Bail out if the descriptor couldn't be found. The conglomerate
+            // probably doesn't exist anymore.
+            if (baseConglomerateDescriptor == null) {
+                throw StandardException.newException(
+                        SQLState.STORE_CONGLOMERATE_DOES_NOT_EXIST,
+                        new Long(tableDescriptor.getHeapConglomerateId()));
+            }
+
 			/* Build the 0-based array of base column names. */
 			columnNames = resultColumns.getColumnNames();
 
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
index 46087e04..e53db6fa 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
@@ -392,7 +392,7 @@ private void executeConstantActionBody(Activation activation)
 			sd = getAndCheckSchemaDescriptor(dd, schemaId, "ALTER TABLE");
 		}
 		
-		/* Prepare all dependents to invalidate.  (This is there chance
+		/* Prepare all dependents to invalidate.  (This is their chance
 		 * to say that they can't be invalidated.  For example, an open
 		 * cursor referencing a table/view that the user is attempting to
 		 * alter.) If no one objects, then invalidate any dependent objects.
@@ -2088,14 +2088,6 @@ private void compressTable(
                 TransactionController.MODE_TABLE,
                 TransactionController.ISOLATION_SERIALIZABLE);
 
-		// invalidate any prepared statements that depended on this table 
-        // (including this one), this fixes problem with threads that start up 
-        // and block on our lock, but do not see they have to recompile their 
-        // plan.  We now invalidate earlier however they still might recompile
-        // using the old conglomerate id before we commit our DD changes.
-		//
-		dm.invalidateFor(td, DependencyManager.COMPRESS_TABLE, lcc);
-
 		rl = compressHeapCC.newRowLocationTemplate();
 
 		// Get the properties on the old heap
@@ -2219,6 +2211,10 @@ private void compressTable(
 		// Update sys.sysconglomerates with new conglomerate #
 		dd.updateConglomerateDescriptor(cd, newHeapConglom, tc);
 
+        // Now that the updated information is available in the system tables,
+        // we should invalidate all statements that use the old conglomerates
+        dm.invalidateFor(td, DependencyManager.COMPRESS_TABLE, lcc);
+
 		// Drop the old conglomerate
 		tc.dropConglomerate(oldHeapConglom);
 		cleanUp();
@@ -2308,15 +2304,6 @@ private void truncateTable(Activation activation)
                                 TransactionController.MODE_TABLE,
                                 TransactionController.ISOLATION_SERIALIZABLE);
 
-		// invalidate any prepared statements that
-		// depended on this table (including this one)
-		// bug 3653 has threads that start up and block on our lock, but do
-		// not see they have to recompile their plan.    We now invalidate earlier
-		// however they still might recompile using the old conglomerate id before we
-		// commit our DD changes.
-		//
-		dm.invalidateFor(td, DependencyManager.TRUNCATE_TABLE, lcc);
-
 		rl = compressHeapCC.newRowLocationTemplate();
 		// Get the properties on the old heap
 		compressHeapCC.getInternalTablePropertySet(properties);
@@ -2402,6 +2389,11 @@ private void truncateTable(Activation activation)
 
 		// Update sys.sysconglomerates with new conglomerate #
 		dd.updateConglomerateDescriptor(cd, newHeapConglom, tc);
+
+        // Now that the updated information is available in the system tables,
+        // we should invalidate all statements that use the old conglomerates
+        dm.invalidateFor(td, DependencyManager.TRUNCATE_TABLE, lcc);
+
 		// Drop the old conglomerate
 		tc.dropConglomerate(oldHeapConglom);
 		cleanUp();
diff --git a/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CompressTableTest.java b/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CompressTableTest.java
index b694e1ae..88e288d6 100644
--- a/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CompressTableTest.java
+++ b/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CompressTableTest.java
@@ -21,10 +21,17 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derbyTesting.functionTests.tests.lang;
 
+import java.sql.Connection;
+import java.sql.PreparedStatement;
 import java.sql.SQLException;
 import java.sql.Statement;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
 import junit.framework.Test;
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
+import org.apache.derbyTesting.junit.JDBC;
 import org.apache.derbyTesting.junit.TestConfiguration;
 
 /**
@@ -38,7 +45,8 @@ public CompressTableTest(String name) {
 
     public static Test suite() {
         // compress table is an embedded feature, no need to run network tests
-        return TestConfiguration.embeddedSuite(CompressTableTest.class);
+        return new CleanDatabaseTestSetup(
+                TestConfiguration.embeddedSuite(CompressTableTest.class));
     }
 
     /**
@@ -54,4 +62,67 @@ public void testCompressTableWithDoubleQuoteInName() throws SQLException {
                   "'abc\"def', 1, 1, 1)");
         s.execute("drop table app.\"abc\"\"def\"");
     }
+
+    /**
+     * Test that statement invalidation works when SYSCS_COMPRESS_TABLE calls
+     * and other statements accessing the same table execute concurrently.
+     * DERBY-4275.
+     */
+    public void testConcurrentInvalidation() throws Exception {
+        Statement s = createStatement();
+        s.execute("create table d4275(x int)");
+        s.execute("insert into d4275 values 1");
+
+        // Object used by the main thread to tell the helper thread to stop.
+        // The helper thread stops once the list is non-empty.
+        final List stop = Collections.synchronizedList(new ArrayList());
+
+        // Holder for anything thrown by the run() method in the helper thread.
+        final Throwable[] error = new Throwable[1];
+
+        // Set up a helper thread that executes a query against the table
+        // until the main thread tells it to stop.
+        Connection c2 = openDefaultConnection();
+        final PreparedStatement ps = c2.prepareStatement("select * from d4275");
+
+        Thread t = new Thread() {
+            public void run() {
+                try {
+                    while (stop.isEmpty()) {
+                        JDBC.assertSingleValueResultSet(ps.executeQuery(), "1");
+                    }
+                } catch (Throwable t) {
+                    error[0] = t;
+                }
+            }
+        };
+
+        t.start();
+
+        // Compress the table while a query is being executed against the
+        // same table to force invalidation of the running statement. Since
+        // the problem we try to reproduce is timing-dependent, do it 100
+        // times to increase the chance of hitting the bug.
+        try {
+            for (int i = 0; i < 100; i++) {
+                s.execute(
+                    "call syscs_util.syscs_compress_table('APP', 'D4275', 1)");
+            }
+        } finally {
+            // We're done, so tell the helper thread to stop.
+            stop.add(Boolean.TRUE);
+        }
+
+        t.join();
+
+        // Before DERBY-4275, the helper thread used to fail with an error
+        // saying the container was not found.
+        if (error[0] != null) {
+            fail("Helper thread failed", error[0]);
+        }
+
+        // Cleanup.
+        ps.close();
+        c2.close();
+    }
 }
