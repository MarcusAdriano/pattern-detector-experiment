diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/NetServer.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/NetServer.java
index db153e28..6ba5ddef 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/NetServer.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/NetServer.java
@@ -173,10 +173,10 @@ else if (javaCmd != null)
 
         if (!jvmName.equals("jview"))
         {
-            if (setJvmFlags && (jvmflags.indexOf("-ms") == -1))
+            if (setJvmFlags && ((jvmflags.indexOf("-ms") == -1) || (jvmflags.indexOf("-Xms") == -1)))
             // only setMs if no starting memory was given
                 jvm.setMs(16*1024*1024); // -ms16m
-            if (setJvmFlags && (jvmflags.indexOf("-mx") == -1))
+            if (setJvmFlags && ((jvmflags.indexOf("-mx") == -1) || (jvmflags.indexOf("-Xmx") == -1)))
             // only setMx if no max memory was given
                 jvm.setMx(32*1024*1024); // -mx32m
             jvm.setNoasyncgc(true); // -noasyncgc
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java
index e54af5a1..67c94be6 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java
@@ -843,8 +843,25 @@ private static void setSuiteProperties(Properties p, String suiteName,
             javaCmd = "java";
         else
             p.put("javaCmd", javaCmd);
-    	if ( jvmflags != null )
-    		p.put("jvmflags", jvmflags);
+
+        // all jvmflags should get appended, with command line overwrite top suite 
+        // properties overwrite lower level suite properties
+        // but we're letting the jvm handle that by putting the cmdline last.
+        // note that at this point, the parentproperties already should have appended the
+        // jvmflags from the command line and the top suite properties file
+        // only need to add the lower suite properties in the mix
+        String totaljvmflags = jvmflags;
+        String subjvmflags = p.getProperty("jvmflags");
+        String parentjvmflags = parentProperties.getProperty("jvmflags");
+        if ((subjvmflags != null) && (parentjvmflags != null) && (!subjvmflags.equals(parentjvmflags)))
+        {
+            totaljvmflags = subjvmflags + "^" + totaljvmflags;
+        }
+        if (totaljvmflags != null)
+        {
+            jvmflags= totaljvmflags;
+        }
+
     	if ( classpath != null )
     		p.put("classpath", classpath);
     	if ( classpathServer != null )
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java
index d6074289..3d0b9921 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java
@@ -93,7 +93,6 @@ public static void main(String[] args) throws Exception
 		{
 		 		javaCmd = "j9";
 				String javaHome = System.getProperty("java.home");
-				//jvmflags = "-Xiss16k -Xss512k -Xmso16k -Xmx392388k";
 		}
 		String j9config = System.getProperty("com.ibm.oti.configuration");
 		if (j9config != null) 
@@ -384,10 +383,13 @@ private static void getSystemProperties()
 		    javaCmd = jcmd;
 		    suiteProperties.put("javaCmd", javaCmd);
 		}
+		// get System properties for jvmflags, and put them to the end, thus
+		// when the time comes to have this converted into actual jvm flags
+		// the ones given at the command line will overwrite whatever's in the suite
 		String jflags = sp.getProperty("jvmflags");
 		if (jflags != null)
 		{
-		    jvmflags = jflags;
+		    jvmflags = jvmflags + "^" + jflags;
 		    suiteProperties.put("jvmflags", jvmflags);
 		}
 		String testflags = sp.getProperty("testJavaFlags");
@@ -403,7 +405,7 @@ private static void getSystemProperties()
 		if (testprops != null)
 		{
 		    if (testSpecialProps == null)
-		        testSpecialProps = testflags;
+		        testSpecialProps = testprops;
 		    else // add to testSpecialProps
 		        testSpecialProps = testSpecialProps + "^" + testprops;
 		    suiteProperties.put("testSpecialProps", testSpecialProps);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
index e71ab74f..0fc3ab77 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
@@ -285,6 +285,12 @@ public static void main(String[] args)
             // before going further, get the policy file copied and if
             // needed, modify it with the test's policy file
             composePolicyFile();
+            String spacedJvmFlags = jvmflags;
+            // we now replace any '^' in jvmflags with ' '
+            if ((jvmflags != null) && (jvmflags.indexOf("^")>0))
+            {
+                spacedJvmFlags = spaceJvmFlags(jvmflags);   
+            }
      
             System.out.println("Initialize for framework: "+ framework );
             if (jvmnet && framework.startsWith("DerbyNet"))
@@ -298,11 +304,11 @@ public static void main(String[] args)
                 }
 
                 ns = new NetServer(baseDir, jvmnetjvm, classpathServer, null,
-                                     jvmflags,framework, startServer);
+                                     spacedJvmFlags,framework, startServer);
             }
             else
                 ns = new NetServer(baseDir, jvmName, classpathServer, 
-                                     javaCmd, jvmflags,framework, startServer);
+                                     javaCmd, spacedJvmFlags,framework, startServer);
 
             //  With useprocess=true, we have a new dir for each test, and all files for
             // the test, including a clean database, go in that directory. So, network server
@@ -896,6 +902,25 @@ private static JavaVersionHolder getProperties(Properties sp)
         throws Exception
     {
         // Get any properties specified on the command line
+        
+        // before doing anything else, get jvmflags, evaluate any -D 
+        // see if there is anything useful to the test harness in jvmflags
+        if ((jvmflags != null) && (jvmflags.length() > 0))
+        {
+            StringTokenizer st = new StringTokenizer(jvmflags,"^");
+            while (st.hasMoreTokens())
+            {
+                String tmpstr = st.nextToken();
+                if ((tmpstr.indexOf("=")> 0) && (tmpstr.startsWith("-D")))
+                {
+                    // strip off the '-D'
+                    String key = tmpstr.substring(2, tmpstr.indexOf("="));
+                    String value = tmpstr.substring((tmpstr.indexOf("=") +1), tmpstr.length());
+                    sp.put(key, value);
+                }
+            }
+        }
+        
         searchCP = sp.getProperty("ij.searchClassPath");
 		String frameworkp = sp.getProperty("framework");
 		if (frameworkp != null)
@@ -1292,7 +1317,6 @@ private static String createPropString()
 		// Properties
 		Properties clp = new Properties();
 		Properties ap = new Properties();
-		Properties sdp = new Properties();
 
         // If there are special flags for ij or server, load these
         // into properties to be merged with app and/or derby props
@@ -1391,7 +1415,7 @@ else if (isClDef != null)
 
 //System.out.println("clPropFile: " + clPropFile.getPath());
             bos = new BufferedOutputStream(new FileOutputStream(clPropFile));
-            clp.save(bos, "Derby Properties");
+            clp.store(bos, "Derby Properties");
         	bos.close();
         }
 
@@ -1435,6 +1459,7 @@ else if (isClDef != null)
 //System.out.println(defaultPackageName + testBase + "_app.properties");
 //System.out.println("**************");
 
+
         // Try loading the ap and def properties if they exist
         // Merge only if the test's app properties has usedefaults property
         if ( isAp != null )
@@ -1532,9 +1557,40 @@ else if (isClDef != null)
 		
 //System.out.println("appPropFile: " + appPropFile.getPath());
             bos = new BufferedOutputStream(new FileOutputStream(appPropFile));
-            ap.save(bos, "App Properties");
+            ap.store(bos, "App Properties");
             bos.close();
 
+            // Check now through jvmflags for insteresting properties
+            // First grab jvmflags from _app.properties for the jvm process cannot
+            // use it if just in the test's _app.properties file
+            // note that it's already too late if useprocess is false
+            String apppropsjvmflags = ap.getProperty("jvmflags");
+            if (apppropsjvmflags != null)
+            {
+                if (jvmflags != null)
+                    jvmflags = apppropsjvmflags + "^" + jvmflags;
+                else
+                    jvmflags = apppropsjvmflags;
+            }
+            // see if there is anything useful for the test harness in jvmflags
+            // from commandline or suite properties
+            if ((jvmflags != null) && (jvmflags.length() > 0))
+            {
+                StringTokenizer st = new StringTokenizer(jvmflags,"^");
+                while (st.hasMoreTokens())
+                {
+                    
+                    String tmpstr = st.nextToken();
+                    if ((tmpstr.indexOf("=")> 0) && (tmpstr.startsWith("-D")))
+                    {
+                        // start at position 2, i.e. strip off the "-D"
+                        String key = tmpstr.substring(2, tmpstr.indexOf("="));
+                        String value = tmpstr.substring((tmpstr.indexOf("=")+1), tmpstr.length());
+                        ap.put(key, value);
+                    }
+                }
+            }
+
             // Depending on the framework, the app prop file may need editing
             if ( (framework.length()>0) || (encryption) )
             {
@@ -1557,7 +1613,7 @@ else if (encryption)
         		try
         		{
             		bos = new BufferedOutputStream(new FileOutputStream(appPropFile));
-            		ap.save(bos, "Test Properties");
+            		ap.store(bos, "Test Properties");
             		bos.close();
                 }
             	catch(IOException ioe)
@@ -1632,19 +1688,6 @@ else if (encryption)
 				startServerProp.equalsIgnoreCase("false"))
 				startServer =false;
 			
-	        // Check for jvmflags (like "-nojit -ms32M -mx32M")
-	        // These may have been set as a system property already
-	        if (jvmflags == null)
-	        {
-	            jvmflags = ap.getProperty("jvmflags");
-	            // If set in app props to up the memory, this
-	            // is only meant to be applied to 11x vms
-	            if ( (jvmflags != null) && (!jvmName.equals("currentjvm")) )
-	            {
-	                if (jvmflags.startsWith("-ms"))
-	                    jvmflags = "";
-	            }
-	        }
 	        //Check derbyTesting.encoding property
 	        if(testEncoding == null) {
 	            testEncoding = ap.getProperty("derbyTesting.encoding");
@@ -1762,7 +1805,7 @@ public static String setTestJavaFlags(String tflags)
         while (st.hasMoreTokens())
         {
 	        String token = st.nextToken();
-            if ( ! (token.startsWith("-D") || token.startsWith("-X"))) { sb.append(dintro); }
+            if (! (token.startsWith("-"))) { sb.append(dintro); }
             sb.append(token);
             sb.append(" ");
         }
@@ -2242,13 +2285,18 @@ else if ( (runDir != null) && (runDir.exists()) )
             
         if ( (jvmflags != null) && (jvmflags.length()>0) )
         {
+            // We now replace any '^' in jvmflags with ' '
+            if (jvmflags.indexOf("^")>0)
+            {
+                jvmflags = spaceJvmFlags(jvmflags);
+            }
             jvm.setFlags(jvmflags);
         }
         
         
         if (testType.equals("multi"))
         {
-            if ( (jvmflags != null) && (jvmflags.indexOf("mx") == -1) )
+            if ( (jvmflags != null) && (jvmflags.indexOf("mx") == -1) && (jvmflags.indexOf("Xmx") == -1))
                 jvm.setMx(64*1024*1024); // -mx64m
             
             // MultiTest is special case, so pass on properties
@@ -2344,6 +2392,19 @@ else if ( testType.equals("multi") )
         return sCmd;
     }
 
+    public static String spaceJvmFlags(String caretedJvmFlags)
+    {
+    	String spacedJvmFlags = "";
+    	// there must at least be one
+    	StringTokenizer st = new StringTokenizer(jvmflags,"^");
+    	while (st.hasMoreTokens())
+    	{
+    	    spacedJvmFlags += st.nextToken() + " ";
+    	}
+    	spacedJvmFlags = spacedJvmFlags.substring(0,spacedJvmFlags.length() -1);
+    	return spacedJvmFlags;    
+    }
+    
     public static void composePolicyFile() throws ClassNotFoundException
     {
         try{
