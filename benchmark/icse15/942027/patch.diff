diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/sql/LanguageFactory.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/sql/LanguageFactory.java
index f96265c5..749601e4 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/sql/LanguageFactory.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/sql/LanguageFactory.java
@@ -54,6 +54,22 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 */
 	ParameterValueSet newParameterValueSet(ClassInspector ci, int numParms, boolean hasReturnParam);
 
+	/**
+	 * Get a new result description from the input result
+	 * description.  Picks only the columns in the column
+	 * array from the inputResultDescription.
+	 *
+ 	 * @param inputResultDescription the input rd
+	 * @param theCols non null array of ints
+	 *
+	 * @return ResultDescription the rd
+	 */
+	public ResultDescription getResultDescription
+	(
+		ResultDescription	inputResultDescription,
+		int[]				theCols
+	);
+
 	/**
 	 * Get a new result description
 	 *
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/sql/ResultDescription.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/sql/ResultDescription.java
index 0612ed76..992e773c 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/sql/ResultDescription.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/sql/ResultDescription.java
@@ -67,6 +67,22 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 */
 	ResultColumnDescriptor	getColumnDescriptor(int position);
     
+    /**
+	 * Get a new result description that has been truncated
+	 * from input column number.   If the input column is
+	 * 5, then columns 5 to getColumnCount() are removed.
+	 * The new ResultDescription points to the same
+	 * ColumnDescriptors (this method performs a shallow
+	 * copy. The saved JDBC ResultSetMetaData will
+     * not be copied.
+	 *
+	 * @param truncateFrom the starting column to remove,
+	 * 1-based.
+	 *
+	 * @return a new ResultDescription
+	 */
+	public ResultDescription truncateColumns(int truncateFrom);
+    
     /**
      * Set the JDBC ResultSetMetaData for this ResultDescription.
      * A ResultSetMetaData object can be saved in the statement
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/sql/ResultSet.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/sql/ResultSet.java
index 247377ea..cb3688f7 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/sql/ResultSet.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/sql/ResultSet.java
@@ -85,6 +85,17 @@ Only valid of returnsRows() returns false.
 	 */
 	int	modifiedRowCount();
 	
+	/**
+	 * Returns a ResultDescription object, which describes the results
+	 * of the statement this ResultSet is in. This will *not* be a
+	 * description of this particular ResultSet, if this is not the
+	 * outermost ResultSet.
+	 *
+	 * @return	A ResultDescription describing the results of the
+	 *		statement.
+	 */
+	ResultDescription	getResultDescription();
+	
 	Activation getActivation();
 
 	/**
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/sql/dictionary/DataDescriptorGenerator.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/sql/dictionary/DataDescriptorGenerator.java
index 255afa17..2e8e58fe 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/sql/dictionary/DataDescriptorGenerator.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/iapi/sql/dictionary/DataDescriptorGenerator.java
@@ -21,14 +21,30 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.iapi.sql.dictionary;
 
-import java.sql.Timestamp;
+import org.apache.derby.iapi.services.monitor.Monitor;
+import org.apache.derby.iapi.error.StandardException;
+
+import org.apache.derby.iapi.sql.dictionary.*;
+
+import org.apache.derby.iapi.types.TypeId;
+import org.apache.derby.iapi.sql.depend.Dependent;
+import org.apache.derby.iapi.sql.depend.Provider;
+import org.apache.derby.iapi.reference.SQLState;
+import org.apache.derby.iapi.sql.execute.ConstantAction;
+import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
+import org.apache.derby.iapi.services.uuid.UUIDFactory;
+import org.apache.derby.iapi.services.io.FormatableBitSet;
 
+import org.apache.derby.catalog.AliasInfo;
+import org.apache.derby.catalog.DefaultInfo;
+import org.apache.derby.catalog.Dependable;
+import org.apache.derby.catalog.DependableFinder;
 import org.apache.derby.catalog.ReferencedColumns;
-import org.apache.derby.catalog.UUID;
 import org.apache.derby.catalog.types.ReferencedColumnsDescriptorImpl;
-import org.apache.derby.iapi.error.StandardException;
-import org.apache.derby.iapi.services.io.FormatableBitSet;
-import org.apache.derby.iapi.services.uuid.UUIDFactory;
+import org.apache.derby.catalog.UUID;
+import org.apache.derby.catalog.Statistics;
+import java.sql.Timestamp;
+import java.io.InputStream;
 import org.apache.derby.iapi.types.DataTypeDescriptor;
 
 /**
@@ -53,7 +69,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	public	DataDescriptorGenerator( DataDictionary dataDictionary )
 	{
 		this.dataDictionary = dataDictionary;
-        uuidf = dataDictionary.getUUIDFactory();
 	}
 
 	/**
@@ -399,6 +414,8 @@ public ConglomerateDescriptor	newConglomerateDescriptor(
 	  */
 	protected UUIDFactory getUUIDFactory()
 	{
+		if (uuidf == null)
+			uuidf = Monitor.getMonitor().getUUIDFactory();
 		return uuidf;
 	}
 
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
index 186282e8..be7ac18a 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
@@ -256,7 +256,7 @@ else if (stmt.resultSetConcurrency == java.sql.ResultSet.CONCUR_READ_ONLY)
 		}
 
 		// Fill in the column types
-		resultDescription = theResults.getActivation().getResultDescription();
+		resultDescription = theResults.getResultDescription();
 		
 		// Only incur the cost of allocating and maintaining
 		// updated column information if the columns can be updated.
@@ -2220,19 +2220,20 @@ protected void checksBeforeUpdateXXX(String methodName, int columnIndex) throws
       checksBeforeUpdateOrDelete(methodName, columnIndex);
 
       //1)Make sure for updateXXX methods, the column position is not out of range
-      if (columnIndex < 1 || columnIndex > resultDescription.getColumnCount())
+      ResultDescription rd = theResults.getResultDescription();
+      if (columnIndex < 1 || columnIndex > rd.getColumnCount())
         throw Util.generateCsSQLException(SQLState.LANG_INVALID_COLUMN_POSITION,
-					new Integer(columnIndex), String.valueOf(resultDescription.getColumnCount()));
+					new Integer(columnIndex), String.valueOf(rd.getColumnCount()));
 
       //2)Make sure the column corresponds to a column in the base table and it is not a derived column
-      if (resultDescription.getColumnDescriptor(columnIndex).getSourceTableName() == null)
+      if (rd.getColumnDescriptor(columnIndex).getSourceTableName() == null)
         throw Util.generateCsSQLException(SQLState.COLUMN_NOT_FROM_BASE_TABLE,
 					methodName);
 
       //3)If column not updatable then throw an exception
       if (!getMetaData().isWritable(columnIndex))
         throw Util.generateCsSQLException(SQLState.LANG_COLUMN_NOT_UPDATABLE_IN_CURSOR,
-					resultDescription.getColumnDescriptor(columnIndex).getName(),
+					theResults.getResultDescription().getColumnDescriptor(columnIndex).getName(),
 					getCursorName());
 	}
 
@@ -3585,11 +3586,12 @@ public void insertRow() throws SQLException {
                         activation.getPreparedStatement().getTargetTable();
                 // got the underlying (schema.)table name
                 insertSQL.append(getFullBaseTableName(targetTable));
+                ResultDescription rd = theResults.getResultDescription();
 
                 insertSQL.append(" (");
                 // in this for loop we are constructing list of column-names 
                 // and values (?) ,... part of the insert sql
-                for (int i=1; i<=resultDescription.getColumnCount(); i++) { 
+                for (int i=1; i<=rd.getColumnCount(); i++) { 
                     if (foundOneColumnAlready) {
                         insertSQL.append(",");
                         valuesSQL.append(",");
@@ -3597,7 +3599,7 @@ public void insertRow() throws SQLException {
                     // using quotes around the column name 
                     // to preserve case sensitivity
                     insertSQL.append(IdUtil.normalToDelimited(
-                            resultDescription.getColumnDescriptor(i).getName()));
+                            rd.getColumnDescriptor(i).getName()));
                     if (columnGotUpdated[i-1]) { 
                         valuesSQL.append("?");
                     } else {
@@ -3625,7 +3627,7 @@ public void insertRow() throws SQLException {
 
                 // in this for loop we are assigning values for parameters 
                 //in sql constructed earlier VALUES (?, ..)
-                for (int i=1, paramPosition=0; i<=resultDescription.getColumnCount(); i++) { 
+                for (int i=1, paramPosition=0; i<=rd.getColumnCount(); i++) { 
                     // if the column got updated, do following
                     if (columnGotUpdated[i-1]) {  
                         act.getParameterValueSet().
@@ -3682,14 +3684,15 @@ public void updateRow() throws SQLException {
             ExecCursorTableReference targetTable = activation.getPreparedStatement().getTargetTable();
             updateWhereCurrentOfSQL.append(getFullBaseTableName(targetTable));//got the underlying (schema.)table name
             updateWhereCurrentOfSQL.append(" SET ");
+            ResultDescription rd = theResults.getResultDescription();
       
-            for (int i=1; i<=resultDescription.getColumnCount(); i++) { //in this for loop we are constructing columnname=?,... part of the update sql
+            for (int i=1; i<=rd.getColumnCount(); i++) { //in this for loop we are constructing columnname=?,... part of the update sql
                 if (columnGotUpdated[i-1]) { //if the column got updated, do following
                     if (foundOneColumnAlready)
                         updateWhereCurrentOfSQL.append(",");
                     //using quotes around the column name to preserve case sensitivity
                     updateWhereCurrentOfSQL.append(IdUtil.normalToDelimited(
-                            resultDescription.getColumnDescriptor(i).getName()) + "=?");
+                            rd.getColumnDescriptor(i).getName()) + "=?");
                     foundOneColumnAlready = true;
                 }
             }
@@ -3705,7 +3708,7 @@ public void updateRow() throws SQLException {
             statementContext.setActivation(act);
 
             //in this for loop we are assigning values for parameters in sql constructed earlier with columnname=?,... 
-            for (int i=1, paramPosition=0; i<=resultDescription.getColumnCount(); i++) { 
+            for (int i=1, paramPosition=0; i<=rd.getColumnCount(); i++) { 
                 if (columnGotUpdated[i-1])  //if the column got updated, do following
                     act.getParameterValueSet().getParameterForSet(paramPosition++).setValue(updateRow.getColumn(i));
             }
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/GenericLanguageFactory.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/GenericLanguageFactory.java
index 75b92745..6fddcc86 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/GenericLanguageFactory.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/GenericLanguageFactory.java
@@ -99,6 +99,25 @@ public ParameterValueSet newParameterValueSet(ClassInspector ci, int numParms, b
 		return new GenericParameterValueSet(ci, numParms, hasReturnParam);
 	}
 
+	/**
+	 * Get a new result description from the input result
+	 * description.  Picks only the columns in the column
+	 * array from the inputResultDescription.
+	 *
+ 	 * @param inputResultDescription  the input rd
+	 * @param theCols array of ints, non null
+	 *
+	 * @return ResultDescription the rd
+	 */
+	public ResultDescription getResultDescription
+	(
+		ResultDescription	inputResultDescription,
+		int[]				theCols
+	)
+	{
+		return new GenericResultDescription(inputResultDescription, theCols);
+	} 
+
 	/**
 	 * Get a new result description
 	 *
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/GenericResultDescription.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/GenericResultDescription.java
index d614111d..96fa24ae 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/GenericResultDescription.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/GenericResultDescription.java
@@ -79,7 +79,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * A map which maps a column name to a column number.
      * Entries only added when accessing columns with the name.
      */
-    private transient Map columnNameMap;
+    private Map columnNameMap;
 	
 	/**
 	 * Niladic constructor for Formatable
@@ -101,6 +101,31 @@ public GenericResultDescription(ResultColumnDescriptor[] columns,
 		this.statementType = statementType;
 	}
 
+	/**
+	 * Build a GenericResultDescription 
+	 *
+	 * @param rd the result description
+	 * @param theCols the columns to take from the input rd
+	 */
+	public GenericResultDescription
+	(
+		ResultDescription	rd, 
+		int[]				theCols
+	) 
+	{
+		if (SanityManager.DEBUG)
+		{
+			SanityManager.ASSERT(theCols != null, "theCols argument to GenericResultDescription is null");
+		}
+
+		this.columns = new ResultColumnDescriptor[theCols.length];
+		for (int i = 0; i < theCols.length; i++)
+		{
+			columns[i] = rd.getColumnDescriptor(theCols[i]);
+		}
+		this.statementType = rd.getStatementType();
+	}
+
 	//
 	// ResultDescription interface
 	//
@@ -131,6 +156,36 @@ public ResultColumnDescriptor getColumnDescriptor(int position) {
 		return columns[position-1];
 	}
 
+	/**
+	 * Get a new result description that has been truncated
+	 * from input column number.   If the input column is
+	 * 5, then columns 5 to getColumnCount() are removed.
+	 * The new ResultDescription points to the same
+	 * ColumnDescriptors (this method performs a shallow
+	 * copy.
+	 *
+	 * @param truncateFrom the starting column to remove
+	 *
+	 * @return a new ResultDescription
+	 */
+	public ResultDescription truncateColumns(int truncateFrom)	
+	{
+		if (SanityManager.DEBUG) 
+		{
+			if (!(truncateFrom > 0 && columns != null))
+			{
+				SanityManager.THROWASSERT("bad truncate value: "+truncateFrom+" is too low");
+			}
+			if (truncateFrom > columns.length)
+			{
+				SanityManager.THROWASSERT("bad truncate value: "+truncateFrom+" is too high");
+			}
+		}
+		ResultColumnDescriptor[] newColumns = new ResultColumnDescriptor[truncateFrom-1];
+		System.arraycopy(columns, 0, newColumns, 0, newColumns.length);
+		return new GenericResultDescription(newColumns, statementType);
+	}
+
 
 	//////////////////////////////////////////////
 	//
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java
index 1898990d..302f7653 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/BasicNoPutResultSetImpl.java
@@ -30,6 +30,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.io.FormatableBitSet;
 import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.iapi.sql.Activation;
+import org.apache.derby.iapi.sql.ResultDescription;
 import org.apache.derby.iapi.sql.ResultSet;
 import org.apache.derby.iapi.sql.Row;
 import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
@@ -87,6 +88,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	protected final Activation	    activation;
 	private final boolean				statisticsTimingOn;
 
+	ResultDescription resultDescription;
+
 	private transient TransactionController	tc;
 
 	private int[] baseColumnMap;
@@ -96,6 +99,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	    <BR>
 		Sets beginTime for all children to use to measue constructor time.
 	 *
+	 *  @param  resultDescription the result description. May be null.
 	 *	@param	activation			The activation
 	 *	@param	optimizerEstimatedRowCount	The optimizer's estimate of the
 	 *										total number of rows for this
@@ -103,13 +107,15 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 *	@param	optimizerEstimatedCost		The optimizer's estimated cost for
 	 *										this result set
 	 */
-	BasicNoPutResultSetImpl(Activation activation,
+	BasicNoPutResultSetImpl(ResultDescription resultDescription,
+							Activation activation,
 							double optimizerEstimatedRowCount,
 							double optimizerEstimatedCost)
 	{
 		this.activation = activation;
 		if (statisticsTimingOn = getLanguageConnectionContext().getStatisticsTiming())
 		    beginTime = startExecutionTime = getCurrentTimeMillis();
+		this.resultDescription = resultDescription;
 		this.optimizerEstimatedRowCount = optimizerEstimatedRowCount;
 		this.optimizerEstimatedCost = optimizerEstimatedCost;
 	}
@@ -624,6 +630,13 @@ protected final void finishAndRTS() throws StandardException
 	 * They are overriden in selected cases.
 	 */
 
+	/**
+     * Returns the description of the table's rows
+	 */
+	public ResultDescription getResultDescription() {
+	    return resultDescription;
+	}
+
 	/**
 	 * Get the execution time in milliseconds.
 	 *
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DMLVTIResultSet.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DMLVTIResultSet.java
index b76d5f59..7e9f75be 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DMLVTIResultSet.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DMLVTIResultSet.java
@@ -51,9 +51,19 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	UpdatableVTIConstantAction	constants;
 	TransactionController 	tc;
 
+    ResultDescription 		resultDescription;
 	private int						numOpens;
 	boolean				firstExecute;
 
+    /**
+     * Returns the description of the inserted rows.
+     * REVISIT: Do we want this to return NULL instead?
+	 */
+	public ResultDescription getResultDescription()
+	{
+	    return resultDescription;
+	}
+
     /**
 	 *
 	 * @exception StandardException		Thrown on error
@@ -67,6 +77,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		constants = (UpdatableVTIConstantAction) constantAction;
 
         tc = activation.getTransactionController();
+
+        resultDescription = sourceResultSet.getResultDescription();
 	}
 	
 	/**
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java
index 81e9743a..c651813b 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DeleteCascadeResultSet.java
@@ -53,12 +53,15 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  * it should be done based on whether the resultset has dependent resultsets or not.
  *
  */
-class DeleteCascadeResultSet extends DeleteResultSet
+public class DeleteCascadeResultSet extends DeleteResultSet
 {
 
 
 	public ResultSet[] dependentResultSets;
 	private int noDependents =0;
+	private CursorResultSet parentSource;
+	private FKInfo parentFKInfo;
+	private long fkIndexConglomNumber;
 	private String resultSetId;
 	private boolean mainNodeForTable = true;
 	private boolean affectedRows = false;
@@ -68,7 +71,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * class interface
 	 * @exception StandardException		Thrown on error
      */
-    DeleteCascadeResultSet
+    public DeleteCascadeResultSet
 	(
 		NoPutResultSet		source,
 		Activation			activation,
@@ -84,8 +87,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 			  (ConstantAction)activation.getPreparedStatement().getSavedObject(constantActionItem)),
 			  activation);
 
-		if(constantActionItem != -1)
+		ConstantAction passedInConstantAction;
+		if(constantActionItem == -1)
+			passedInConstantAction = activation.getConstantAction(); //root table
+		else
 		{
+			passedInConstantAction = 
+				(ConstantAction) activation.getPreparedStatement().getSavedObject(constantActionItem);
 			resultDescription = constants.resultDescription;
 		}
 		cascadeDelete = true;
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java
index 05f708a2..20353420 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DeleteResultSet.java
@@ -81,6 +81,15 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	ExecRow		deferredRLRow = null;
 	int	numberOfBaseColumns = 0;
 
+	/**
+     * Returns the description of the deleted rows.
+     * REVISIT: Do we want this to return NULL instead?
+	 */
+	public ResultDescription getResultDescription()
+	{
+	    return resultDescription;
+	}
+
     /*
      * class interface
      *
@@ -121,7 +130,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		noTriggersOrFks = ((fkInfoArray == null) && (triggerInfo == null));
 		baseRowReadList = constants.getBaseRowReadList();
 		if(source != null)
-			resultDescription = activation.getResultDescription();
+			resultDescription = source.getResultDescription();
 		else
 			resultDescription = constants.resultDescription;
 
@@ -291,13 +300,18 @@ void  setup() throws StandardException
 			if(cascadeDelete)
 			{
 				rowHolder = new TemporaryRowHolderImpl(activation, properties, 
-						 false);
+						(resultDescription != null) ?
+							resultDescription.truncateColumns(rlColumnNumber) :
+							null, false);
 
 
 			}else
 			{
 
-				rowHolder = new TemporaryRowHolderImpl(activation, properties);
+				rowHolder = new TemporaryRowHolderImpl(activation, properties, 
+						(resultDescription != null) ?
+							resultDescription.truncateColumns(rlColumnNumber) :
+							null);
 
 			}
 
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DeleteVTIResultSet.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DeleteVTIResultSet.java
index 9cdf682a..5e1d8e4f 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DeleteVTIResultSet.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/DeleteVTIResultSet.java
@@ -100,7 +100,8 @@ protected void openCore() throws StandardException
 			activation.clearIndexScanInfo();
             if( null == rowHolder)
                 rowHolder =
-                    new TemporaryRowHolderImpl(activation, new Properties());
+                    new TemporaryRowHolderImpl(activation, new Properties(),
+                                               (ResultDescription) null);
 		}
 
         try
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java
index fffbac1e..fd0097e9 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/GenericTriggerExecutor.java
@@ -38,13 +38,17 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  * a trigger.  It is subclassed by row and statement
  * executors.
  */
-abstract class GenericTriggerExecutor
+public abstract class GenericTriggerExecutor
 {
-	final InternalTriggerExecutionContext	tec;
-	final TriggerDescriptor					triggerd;
-	final Activation						activation;
-	final LanguageConnectionContext			lcc;
+	protected InternalTriggerExecutionContext	tec;
+	protected TriggerDescriptor					triggerd;
+	protected Activation						activation;
+	protected LanguageConnectionContext			lcc;
 
+	private	boolean			whenClauseRetrieved;
+	private	boolean			actionRetrieved;
+	private SPSDescriptor	whenClause; 
+	private SPSDescriptor	action;
 
 	private ExecPreparedStatement	ps;
 	private Activation 				spsActivation;
@@ -90,12 +94,22 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 	protected SPSDescriptor getWhenClause() throws StandardException
 	{
-		return triggerd.getWhenClauseSPS();
+		if (!whenClauseRetrieved)
+		{
+			whenClauseRetrieved = true;
+			whenClause = triggerd.getWhenClauseSPS();
+		}
+		return whenClause;
 	}
 
 	protected SPSDescriptor getAction() throws StandardException
 	{
-		return triggerd.getActionSPS(lcc);
+		if (!actionRetrieved)
+		{
+			actionRetrieved = true;
+			action = triggerd.getActionSPS(lcc);
+		}
+		return action;
 	}
 
 	/**
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java
index b1c3d371..cafdcb30 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/IndexChanger.java
@@ -408,7 +408,8 @@ private void doDeferredInsert()
 			** row holder (the description is needed when the row
 			** holder is going to be handed to users for triggers).
 			*/
-			rowHolder = new TemporaryRowHolderImpl(activation, properties);
+			rowHolder = new TemporaryRowHolderImpl(activation, properties,
+												   (ResultDescription) null);
 		}
 
 		/*
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
index 0dc0d4a2..484a39bc 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/InsertResultSet.java
@@ -98,6 +98,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 	// divined at run time
 
+    private	ResultDescription 		resultDescription;
 	private RowChanger 				rowChanger;
 
 	private	TransactionController 	tc;
@@ -167,6 +168,15 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private boolean					setIdentity;
 	
 
+	/**
+     * Returns the description of the inserted rows.
+     * REVISIT: Do we want this to return NULL instead?
+	 */
+	public ResultDescription getResultDescription()
+	{
+	    return resultDescription;
+	}
+
 	// TargetResultSet interface
 
 	/**
@@ -334,7 +344,7 @@ private	void	evaluateCheckConstraints()
 				triggerInfo.hasTrigger(true, true) :
 				false;
 
-        ResultDescription resultDescription = activation.getResultDescription();
+        resultDescription = sourceResultSet.getResultDescription();
 
 		// Is this a bulkInsert or regular insert?
 		String insertMode = constants.getProperty("insertMode");
@@ -944,13 +954,15 @@ private void normalInsertCore(LanguageConnectionContext lcc, boolean firstExecut
 			/*
 			** If deferred we save a copy of the entire row.
 			*/
-			rowHolder = new TemporaryRowHolderImpl(activation, properties);
+			rowHolder = new TemporaryRowHolderImpl(activation, properties,
+												   resultDescription);
 			rowChanger.setRowHolder(rowHolder);
 		}
 
 		int[] columnIndexes = null;
 		if (firstExecute && activation.getAutoGeneratedKeysResultsetMode())
 		{
+			ResultDescription rd;
 			Properties properties = new Properties();
 			columnIndexes = activation.getAutoGeneratedKeysColumnIndexes();
 
@@ -963,8 +975,9 @@ private void normalInsertCore(LanguageConnectionContext lcc, boolean firstExecut
 				columnIndexes = generatedColumnPositionsArray();
 			}
 
+			rd = lcc.getLanguageFactory().getResultDescription(resultDescription,columnIndexes);
 			autoGeneratedKeysRowsHolder =
-				new TemporaryRowHolderImpl(activation, properties);
+				new TemporaryRowHolderImpl(activation, properties, rd);
 		}
 
 
@@ -1254,7 +1267,8 @@ private long bulkInsertCore(LanguageConnectionContext lcc,
 		if (hasBeforeRowTrigger && rowHolder != null)
 		{
 			rowHolder =
-				new TemporaryRowHolderImpl(activation, properties);
+				new TemporaryRowHolderImpl(activation, properties,
+										   resultDescription);
 		}
 
 		// Add any new properties or change the values of any existing properties
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java
index 47a568a0..d22c53d1 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/InsertVTIResultSet.java
@@ -126,7 +126,8 @@ protected void openCore() throws StandardException
 			** If deferred we save a copy of the entire row.
 			*/
 			rowHolder =
-				new TemporaryRowHolderImpl(activation, properties);
+				new TemporaryRowHolderImpl(activation, properties,
+										   resultDescription);
 		}
 
 		while ( row != null )
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/NoPutResultSetImpl.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/NoPutResultSetImpl.java
index 2f381639..0065ab1f 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/NoPutResultSetImpl.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/NoPutResultSetImpl.java
@@ -93,7 +93,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 						double optimizerEstimatedRowCount,
 						double optimizerEstimatedCost)
 	{
-		super(activation,
+		super(null,
+				activation,
 				optimizerEstimatedRowCount,
 				optimizerEstimatedCost);
 
@@ -106,6 +107,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 	// NoPutResultSet interface
 
+	/**
+     * Returns the description of the table's rows
+	 */
+	public ResultDescription getResultDescription() {
+	    return activation.getResultDescription();
+	}
+
 	/**
 		Return my cursor name for JDBC. Can be null.
 	*/
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java
index 27aa0d72..c4c5676e 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/NoRowsResultSetImpl.java
@@ -131,6 +131,14 @@ void setup() throws StandardException {
 	 */
 	public int	modifiedRowCount() { return 0; }
 	
+	/**
+	 * Returns null.
+	 */
+	public ResultDescription	getResultDescription()
+	{
+	    return (ResultDescription)null;
+	}
+	
 	public final Activation getActivation()
 	{
 		return activation;
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/RowTriggerExecutor.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/RowTriggerExecutor.java
index 80fe64ab..0b64acd6 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/RowTriggerExecutor.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/RowTriggerExecutor.java
@@ -33,7 +33,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  * a row trigger.  It is instantiated at execution time.
  * There is one per row trigger.
  */
-class RowTriggerExecutor extends GenericTriggerExecutor
+public class RowTriggerExecutor extends GenericTriggerExecutor
 {
 	/**
 	 * Constructor
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/StatementTriggerExecutor.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/StatementTriggerExecutor.java
index 5da9ca6d..32e169d0 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/StatementTriggerExecutor.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/StatementTriggerExecutor.java
@@ -33,7 +33,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  * a statement trigger.  It is instantiated at execution
  * time.  There is one per statement trigger.
  */
-class StatementTriggerExecutor extends GenericTriggerExecutor
+public class StatementTriggerExecutor extends GenericTriggerExecutor
 {
 	/**
 	 * Constructor
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java
index 39846841..b9ee9330 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderImpl.java
@@ -27,6 +27,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.execute.ExecRow;
 import org.apache.derby.iapi.sql.execute.TemporaryRowHolder;
 import org.apache.derby.iapi.sql.Activation;
+import org.apache.derby.iapi.sql.ResultDescription;
 import org.apache.derby.iapi.store.access.ConglomerateController;
 import org.apache.derby.iapi.store.access.ScanController;
 import org.apache.derby.iapi.store.access.TransactionController;
@@ -68,7 +69,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private ConglomerateController	cc;
 	private Properties				properties;
 	private ScanController			scan;
-
+	private	ResultDescription		resultDescription;
 	/** Activation object with local state information. */
 	Activation						activation;
 
@@ -99,14 +100,17 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 * @param activation the activation
 	 * @param properties the properties of the original table.  Used
 	 *		to help the store use optimal page size, etc.
+	 * @param resultDescription the result description.  Relevant for the getResultDescription
+	 * 		call on the result set returned by getResultSet.  May be null
 	 */
-	TemporaryRowHolderImpl
+	public TemporaryRowHolderImpl
 	(
 		Activation				activation, 
-		Properties 				properties
+		Properties 				properties, 
+		ResultDescription		resultDescription
 	) 
 	{
-		this(activation, properties,
+		this(activation, properties, resultDescription,
 			 DEFAULT_OVERFLOWTHRESHOLD, false, false);
 	}
 	
@@ -117,16 +121,19 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 * @param activation the activation
 	 * @param properties the properties of the original table.  Used
 	 *		to help the store use optimal page size, etc.
+	 * @param resultDescription the result description.  Relevant for the getResultDescription
+	 * 		call on the result set returned by getResultSet.  May be null
 	 * @param isUniqueStream - true , if it has to be temporary row holder unique stream
 	 */
-	TemporaryRowHolderImpl
+	public TemporaryRowHolderImpl
 	(
 		Activation				activation, 
 		Properties 				properties, 
+		ResultDescription		resultDescription,
 		boolean                 isUniqueStream
 	) 
 	{
-		this(activation, properties, 1, isUniqueStream,
+		this(activation, properties, resultDescription, 1, isUniqueStream,
 			 false);
 	}
 
@@ -137,14 +144,17 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 * @param activation the activation
 	 * @param properties the properties of the original table.  Used
 	 *		to help the store use optimal page size, etc.
+	 * @param resultDescription the result description.  Relevant for the getResultDescription
+	 * 		call on the result set returned by getResultSet.  May be null
 	 * @param overflowToConglomThreshold on an attempt to insert
 	 * 		this number of rows, the rows will be put
  	 *		into a temporary conglomerate.
 	 */
-	TemporaryRowHolderImpl
+	public TemporaryRowHolderImpl
 	(
 		Activation			 	activation, 
 		Properties				properties,
+		ResultDescription		resultDescription,
 		int 					overflowToConglomThreshold,
 		boolean                 isUniqueStream,
 		boolean					isVirtualMemHeap
@@ -163,6 +173,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 		this.activation = activation;
 		this.properties = properties;
+		this.resultDescription = resultDescription;
 		this.isUniqueStream = isUniqueStream;
 		this.isVirtualMemHeap = isVirtualMemHeap;
 		rowArray = new ExecRow[overflowToConglomThreshold];
@@ -473,12 +484,12 @@ public CursorResultSet getResultSet()
 		if(isUniqueStream)
 		{
 			return new TemporaryRowHolderResultSet(tc, rowArray,
-												   isVirtualMemHeap,
+												   resultDescription, isVirtualMemHeap,
 												   true, positionIndexConglomId, this);
 		}
 		else
 		{
-			return new TemporaryRowHolderResultSet(tc, rowArray, isVirtualMemHeap, this);
+			return new TemporaryRowHolderResultSet(tc, rowArray, resultDescription, isVirtualMemHeap, this);
 
 		}
 	}
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java
index ca4c1d7e..5dc32f1d 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/TemporaryRowHolderResultSet.java
@@ -58,6 +58,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private boolean 				isOpen;
 	private boolean 				finished;
 	private ExecRow					currentRow;
+	private ResultDescription		resultDescription;
 	private boolean                 isAppendable = false;
 	private long                    positionIndexConglomId;
 	private boolean 				isVirtualMemHeap;
@@ -73,17 +74,19 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 *
 	 * @param tc the xact controller
 	 * @param rowArray the row array
+	 * @param resultDescription value returned by getResultDescription()
 	 */
-	TemporaryRowHolderResultSet
+	public TemporaryRowHolderResultSet
 	(
 		TransactionController		tc,
 		ExecRow[]					rowArray,
+		ResultDescription			resultDescription,
 		boolean						isVirtualMemHeap,
 		TemporaryRowHolderImpl		holder
    	)
 	{
 
-		this(tc, rowArray, isVirtualMemHeap, false, 0, holder);
+		this(tc, rowArray, resultDescription, isVirtualMemHeap, false, 0, holder);
 
 
 	}
@@ -93,14 +96,16 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 *
 	 * @param tc the xact controller
 	 * @param rowArray the row array
+	 * @param resultDescription value returned by getResultDescription()
 	 * @param isAppendable true,if we can insert rows after this result is created
 	 * @param positionIndexConglomId conglomId of the index which has order rows
 	 *                               are inserted and their row location 
 	 */
-	TemporaryRowHolderResultSet
+	public TemporaryRowHolderResultSet
 	(
 		TransactionController		tc,
 		ExecRow[]					rowArray,
+		ResultDescription			resultDescription,
 		boolean						isVirtualMemHeap,
 		boolean                     isAppendable,
 		long                        positionIndexConglomId,
@@ -109,6 +114,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	{
 		this.tc = tc;
 		this.rowArray = rowArray;
+		this.resultDescription = resultDescription;
 		this.numRowsOut = 0;
 		isOpen = false;
 		finished = false;
@@ -178,14 +184,15 @@ public void reStartScan(long currentConglomId, long pconglomId) throws  Standard
 	 *
 	 * @exception StandardException on error
 	 */
-	static TemporaryRowHolderResultSet getNewRSOnCurrentRow
+	public static TemporaryRowHolderResultSet getNewRSOnCurrentRow
 	(
 		Activation				activation,
 		CursorResultSet 		rs
 	) throws StandardException
 	{
 		TemporaryRowHolderImpl singleRow =
-			new TemporaryRowHolderImpl(activation, null);
+			new TemporaryRowHolderImpl(activation, null,
+									   rs.getResultDescription());
 		singleRow.insert(rs.getCurrentRow());
 		return (TemporaryRowHolderResultSet) singleRow.getResultSet();
 	}
@@ -593,6 +600,20 @@ public boolean	returnsRows()
 
 	public int modifiedRowCount() { return 0;};
 
+	/**
+	 * Returns a ResultDescription object, which describes the results
+	 * of the statement this ResultSet is in. This will *not* be a
+	 * description of this particular ResultSet, if this is not the
+	 * outermost ResultSet.
+	 *
+	 * @return	A ResultDescription describing the results of the
+	 *		statement.
+	 */
+	public ResultDescription	getResultDescription()
+	{
+		return resultDescription;
+	}
+
 	/**
 	 * Tells the system that there will be calls to getNextRow().
 	 *
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/TriggerEventActivator.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/TriggerEventActivator.java
index 33d332e1..61219dd7 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/TriggerEventActivator.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/TriggerEventActivator.java
@@ -21,26 +21,34 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.impl.sql.execute;
 
-import java.util.Vector;
-
-import org.apache.derby.catalog.UUID;
-import org.apache.derby.iapi.error.StandardException;
-import org.apache.derby.iapi.jdbc.ConnectionContext;
 import org.apache.derby.iapi.services.sanity.SanityManager;
-import org.apache.derby.iapi.sql.Activation;
-import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
-import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
+import org.apache.derby.iapi.error.StandardException;
+
 import org.apache.derby.iapi.sql.execute.CursorResultSet;
 import org.apache.derby.iapi.sql.execute.NoPutResultSet;
+import org.apache.derby.iapi.sql.execute.ExecRow; 
+import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
+import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
+
+import org.apache.derby.iapi.sql.Activation;
+
 import org.apache.derby.iapi.store.access.TransactionController;
+import org.apache.derby.impl.sql.execute.AutoincrementCounter;
+import org.apache.derby.iapi.reference.SQLState;
+import org.apache.derby.iapi.jdbc.ConnectionContext;
+import org.apache.derby.catalog.UUID;
+
+import java.util.Vector;
+import java.sql.SQLException;
 
 /**
  * Responsible for firing a trigger or set of triggers
  * based on an event.
  */
-class TriggerEventActivator
+public class TriggerEventActivator
 {
 	private LanguageConnectionContext		lcc; 
+	private TransactionController 			tc; 
 	private TriggerInfo 					triggerInfo; 
 	private InternalTriggerExecutionContext	tec;
 	private	GenericTriggerExecutor[][]		executors;
@@ -64,7 +72,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 *
 	 * @exception StandardException on error
 	 */
-	TriggerEventActivator
+	public TriggerEventActivator
 	(
 		LanguageConnectionContext	lcc, 
 		TransactionController 		tc, 
@@ -84,6 +92,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		tableName = triggerInfo.triggerArray[0].getTableDescriptor().getQualifiedName();
 	
 		this.lcc = lcc;
+		this.tc = tc;
 		this.activation = activation;
 		this.tableId = tableId;
 		this.dmlType = dmlType;
@@ -218,7 +227,7 @@ private void setupExecutors(TriggerInfo triggerInfo) throws StandardException
 	 *
  	 * @exception StandardException on error
 	 */
-	void notifyEvent
+	public void notifyEvent
 	(
 		TriggerEvent 		event,
 		CursorResultSet		brs,
@@ -281,7 +290,7 @@ private void setupExecutors(TriggerInfo triggerInfo) throws StandardException
 	 *
 	 * @exception StandardException on unexpected error
 	 */
-	void cleanup() throws StandardException
+	public void cleanup() throws StandardException
 	{
 		if (tec != null)
 		{
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java
index eb97b3d4..5c4b29e8 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/TriggerInfo.java
@@ -129,6 +129,21 @@ public TriggerInfo() {}
 		}
 	}
 
+	/*
+	 * private constructor for TriggerInfo
+	 */
+	private TriggerInfo
+	(
+		TriggerDescriptor[]		triggers,
+		int[]					changedColsIds,
+		String[]				changedColsNames
+	) 
+	{
+		this.columnIds = changedColsIds;
+		this.columnNames = changedColsNames;
+		this.triggerArray = triggers;
+	}
+
 	/**
 	 * Do we have a trigger or triggers that meet
 	 * the criteria
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/UnionResultSet.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/UnionResultSet.java
index 4ed519d0..fefe1d69 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/UnionResultSet.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/UnionResultSet.java
@@ -89,6 +89,15 @@ public UnionResultSet(NoPutResultSet source1, NoPutResultSet source2,
 	// ResultSet interface (leftover from NoPutResultSet)
 	//
 
+	/**
+     * Returns the description of the first source.
+     * Assumes the compiler ensured both sources
+     * had the same description.
+	 */
+	public ResultDescription getResultDescription() {
+	    return source1.getResultDescription();
+	}
+
 	/**
      * open the first source.
  	 *	@exception StandardException thrown on failure
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java
index 4487d71f..b2ea548c 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/UpdateResultSet.java
@@ -34,6 +34,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.Activation;
 import org.apache.derby.iapi.sql.ResultDescription;
 import org.apache.derby.iapi.sql.ResultSet;
+import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
 import org.apache.derby.iapi.sql.execute.ConstantAction;
 import org.apache.derby.iapi.sql.execute.CursorResultSet;
 import org.apache.derby.iapi.sql.execute.ExecRow;
@@ -61,6 +62,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private ExecRow 					deferredSparseRow;
 	UpdateConstantAction		constants;
 	
+    private ResultDescription 		resultDescription;
 	private NoPutResultSet			source;
 	NoPutResultSet			savedSource;
 	private RowChanger				rowChanger;
@@ -92,11 +94,20 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private ExecRow					deferredTempRow;
 	private ExecRow					deferredBaseRow;
 	private ExecRow					oldDeletedRow;
+	private ResultDescription		triggerResultDescription;
 
 	int lockMode;
 	boolean deferred;
 	boolean beforeUpdateCopyRequired = false;
 
+	/**
+     * Returns the description of the updated rows.
+     * REVISIT: Do we want this to return NULL instead?
+	 */
+	public ResultDescription getResultDescription()
+	{
+	    return resultDescription;
+	}
 
     /*
      * class interface
@@ -180,9 +191,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		heapConglom = constants.conglomId;
 
 		baseRowReadList = constants.getBaseRowReadList();
-        ResultDescription resultDescription;
 		if(passedInRsd ==null)
-			resultDescription = activation.getResultDescription();
+			resultDescription = source.getResultDescription();
 		else
 			resultDescription = passedInRsd;
 		/*
@@ -370,6 +380,9 @@ void setup() throws StandardException
 			{
 				deferredTempRow = RowUtil.getEmptyValueRow(numberOfBaseColumns+1, lcc);
 				oldDeletedRow = RowUtil.getEmptyValueRow(numberOfBaseColumns, lcc);
+				triggerResultDescription = (resultDescription != null) ?
+									resultDescription.truncateColumns(numberOfBaseColumns+1) :
+									null;
 			}
 
 			Properties properties = new Properties();
@@ -378,10 +391,12 @@ void setup() throws StandardException
 			rowChanger.getHeapConglomerateController().getInternalTablePropertySet(properties);
 			if(beforeUpdateCopyRequired){
 				deletedRowHolder =
-					new TemporaryRowHolderImpl(activation, properties);
+					new TemporaryRowHolderImpl(activation, properties,
+											   triggerResultDescription);
 			}
 			insertedRowHolder =
-				new TemporaryRowHolderImpl(activation, properties);
+				new TemporaryRowHolderImpl(activation, properties,
+										   triggerResultDescription);
 
 			rowChanger.setRowHolder(insertedRowHolder);
 		}
@@ -730,7 +745,7 @@ else if (key.equals(newBaseRow[k], key).equals(true))
 						// in-memory heap grows), hopefully we never spill temp table to disk.
 
 						tableScan.futureForUpdateRows = new TemporaryRowHolderImpl
-							(activation, null, 100, false, true);
+							(activation, null, null, 100, false, true);
 					}
 
 					rlRow.setColumn(1, rowLoc);
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/UpdateVTIResultSet.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/UpdateVTIResultSet.java
index adb27542..8959d7c0 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/UpdateVTIResultSet.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/UpdateVTIResultSet.java
@@ -96,7 +96,8 @@ protected void openCore() throws StandardException
 			** If deferred we save a copy of the entire row.
 			*/
 			rowHolder =
-				new TemporaryRowHolderImpl(activation, properties);
+				new TemporaryRowHolderImpl(activation, properties,
+										   resultDescription);
 		}
 
         try
diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/WriteCursorConstantAction.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/WriteCursorConstantAction.java
index e42e6d7f..504b2f22 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/WriteCursorConstantAction.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/execute/WriteCursorConstantAction.java
@@ -63,14 +63,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	**
 	**	This class implements Formatable. But it is NOT used
  	**	across either major or minor releases.  It is only
-	** 	written persistently in stored prepared statements.
-    *   SO, IT IS OK TO CHANGE ITS read/writeExternal.
+	** 	written persistently in stored prepared statements, 
+	**	not in the replication stage.  SO, IT IS OK TO CHANGE
+	**	ITS read/writeExternal.
 	**
 	********************************************************/
 
-    /**
-     * Heap conglomerate identifier.
-     */
 	long						conglomId;
 	StaticCompiledOpenConglomInfo heapSCOCI;
 	IndexRowGenerator[] 		irgs;
diff --git a/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java b/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java
index f3306578..c6f95074 100644
--- a/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java
+++ b/db/derby/code/branches/10.6/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java
@@ -1419,5 +1419,40 @@ public void testDerby4095NewTriggerRows() throws SQLException {
         s.executeUpdate("DROP TABLE APP.NAMES");
     }
     
+    /**
+     * Regression test case for DERBY-4610, where a DELETE statement failed
+     * because a trigger used the wrong meta-data and mixed up the data types.
+     */
+    public void testDerby4610WrongDataType() throws SQLException {
+        Statement s = createStatement();
+        s.execute("create table testtable " +
+                  "(id integer, name varchar(20), primary key(id))");
+        s.execute("create table testchild (" +
+                  "id integer constraint fk_id " +
+                  "references testtable on delete cascade, " +
+                  "ordernum int, primary key(id))");
+        s.execute("create procedure testproc (str varchar(20)) " +
+                  "PARAMETER STYLE JAVA LANGUAGE JAVA EXTERNAL NAME '" +
+                  getClass().getName() + ".derby4610proc'");
+        s.execute("create trigger testtabletrigger after delete on testtable " +
+                  "referencing old as old " +
+                  "for each row mode db2sql call testproc(char(old.id))");
+        s.execute("create trigger testchildtrigger after delete on testchild " +
+                  "referencing old as old " +
+                  "for each row mode db2sql call testproc(char(old.ordernum))");
+        s.execute("insert into testtable values (1, 'test1')");
+        s.execute("insert into testchild values (1, 10)");
+
+        // Used to fail with ERROR XCL12: An attempt was made to put a data
+        // value of type 'java.lang.String' into a data value of type 'INTEGER'.
+        assertUpdateCount(s, 1, "delete from testtable where id = 1");
+    }
     
+    /**
+     * Procedure that does nothing. Called as a stored procedure in the
+     * regression test case for DERBY-4610.
+     */
+    public static void derby4610proc(String str) {
+        // do nothing
+    }
 }
