diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/FormatIdInputStream.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/FormatIdInputStream.java
index 75f811a7..7a265f8c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/FormatIdInputStream.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/FormatIdInputStream.java
@@ -27,7 +27,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.ObjectInputStream;
 import java.io.StreamCorruptedException;
 import org.apache.derby.iapi.services.monitor.Monitor;
-import org.apache.derby.shared.common.sanity.SanityManager;
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.services.loader.ClassFactory;
 import org.apache.derby.iapi.services.loader.ClassFactoryContext;
@@ -63,7 +62,7 @@ public FormatIdInputStream(InputStream in)
 	  Read an object from this stream.
 
 	  @return The read object.
-	  @exception java.io.IOException An IO or serialization error occured.
+      @exception java.io.IOException An IO or serialization error occurred.
 	  @exception java.lang.ClassNotFoundException A class for an object in
 	  the stream could not be found.
 	  */
@@ -94,17 +93,13 @@ public Object readObject() throws IOException, ClassNotFoundException
 					Object result = ois.readObject();
 					return result;
 				} catch (IOException ioe) {
-					setErrorInfo((ErrorInfo) ois);
-					throw ioe;
+                    throw handleReadError(ioe, ois);
 				} catch (ClassNotFoundException cnfe) {
-					setErrorInfo((ErrorInfo) ois);
-					throw cnfe;
+                    throw handleReadError(cnfe, ois);
 				} catch (LinkageError le) {
-					setErrorInfo((ErrorInfo) ois);
-					throw le;
+                    throw handleReadError(le, ois);
 				} catch (ClassCastException cce) {
-					setErrorInfo((ErrorInfo) ois);
-					throw cce;
+                    throw handleReadError(cce, ois);
 				}
 			}
 
@@ -182,6 +177,25 @@ private void setErrorInfo(ErrorInfo ei)
         errorInfo = ei;
 	}
 
+    /**
+     * Handle an error that happened within {@code readObject()} when reading
+     * a {@code Serializable} object.
+     *
+     * @param <T> the type of exception that was thrown
+     * @param cause the thrown exception
+     * @param stream the stream from which the exception was thrown
+     * @return the thrown exception
+     */
+    private <T extends Throwable> T handleReadError(
+            T cause, ObjectInputStream stream) {
+        // If the input stream implements the ErrorInfo interface, it contains
+        // extra information about the error, and we want to make that
+        // information available to error handlers on a higher level.
+        if (stream instanceof ErrorInfo) {
+            setErrorInfo((ErrorInfo) stream);
+        }
+        return cause;
+    }
 
     ClassFactory getClassFactory() {
 		if (cf == null) {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java
index 49ce1b2f..7e37140b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java
@@ -328,7 +328,7 @@ The offset from the base format number (0 based) gives the offset in the array.
         /* 276 */       null,
         /* 277 */       null,
         /* 278 */       "org.apache.derby.impl.sql.execute.ConstraintInfo",
-        /* 279 */       null,
+        /* 279 */       "org.apache.derby.iapi.sql.execute.ExecRowBuilder",
         /* 280 */       null,
         /* 281 */       null,
         /* 282 */       "org.apache.derby.impl.sql.execute.FKInfo",
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java
index c8ffa76a..4f3213c4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java
@@ -1091,6 +1091,9 @@ and another may restore (read) the object. The implication of this
     static public final int CONSTRAINT_INFO_V01_ID  =
             (MIN_ID_2 + 278);
 
+    /** Class org.apache.derby.iapi.sql.execute.ExecRowBuilder. */
+    int EXEC_ROW_BUILDER_ID = MIN_ID_2 + 279;
+
     /**
      */
     static public final int UNUSED_2_280 =
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/execute/ExecRowBuilder.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/execute/ExecRowBuilder.java
index 536b91f5..10b96d60 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/execute/ExecRowBuilder.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/execute/ExecRowBuilder.java
@@ -21,37 +21,47 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.iapi.sql.execute;
 
-import java.io.Serializable;
+import java.io.IOException;
+import java.io.ObjectInput;
+import java.io.ObjectOutput;
 import org.apache.derby.iapi.error.StandardException;
+import org.apache.derby.iapi.services.io.ArrayUtil;
+import org.apache.derby.iapi.services.io.Formatable;
+import org.apache.derby.iapi.services.io.StoredFormatIds;
 import org.apache.derby.shared.common.sanity.SanityManager;
 import org.apache.derby.iapi.types.DataTypeDescriptor;
 import org.apache.derby.iapi.types.DataValueDescriptor;
 
 /**
+ * <p>
  * A class used for storing information on how to build {@code ExecRow}
  * instances. Typically created by the compiler and used during execution
  * to produce and reset row templates.
+ * </p>
+ *
+ * <p>
+ * This class must be {@code Formatable} so that it can be stored in the
+ * database as part of a stored prepared statement generated for trigger
+ * actions or metadata queries. The stored format does not need to be stable
+ * across different versions, since the stored prepared statements are
+ * discarded on upgrade and will never be read by other Derby versions than
+ * the one that originally wrote them.
+ * </p>
  */
-public class ExecRowBuilder implements Serializable {
-
-    /**
-     * Serial version produced by the serialver utility. Needed in order to
-     * make serialization work reliably across different compilers.
-     */
-    private static final long serialVersionUID = -1078823466492523202L;
+public class ExecRowBuilder implements Formatable {
 
     /** If true, the row should be an {@code ExecIndexRow}. */
-    private final boolean indexable;
+    private boolean indexable;
 
     /**
      * Array of templates used for creating NULL values to put in the row.
      * The templates are either {@code DataValueDescriptor}s or
      * {@code DataTypeDescriptor}s.
      */
-    private final Object[] template;
+    private Object[] template;
 
     /** Array of 1-based column numbers for the columns to access. */
-    private final int[] columns;
+    private int[] columns;
 
     /** The number of columns to set in the row. */
     private int count;
@@ -73,6 +83,13 @@ public ExecRowBuilder(int size, boolean indexable) {
         this.indexable = indexable;
     }
 
+    /**
+     * Public no-arg constructor required by the {@code Formatable} interface.
+     * Should not be called directly.
+     */
+    public ExecRowBuilder() {
+    }
+
     /**
      * Add a template from which a NULL value of the correct type can be
      * created. It should either be a {@code DataValueDescriptor} or a
@@ -131,4 +148,30 @@ public void reset(ExecRow row) throws StandardException {
             row.setColumn(col, row.getColumn(col).getNewNull());
         }
     }
+
+    // Methods required by the Formatable interface.
+
+    @Override
+    public void writeExternal(ObjectOutput out) throws IOException {
+        out.writeBoolean(indexable);
+        ArrayUtil.writeArray(out, template);
+        out.writeObject(columns);
+        out.writeInt(count);
+        out.writeInt(maxColumnNumber);
+    }
+
+    @Override
+    public void readExternal(ObjectInput in)
+            throws IOException, ClassNotFoundException {
+        indexable = in.readBoolean();
+        template = ArrayUtil.readObjectArray(in);
+        columns = (int[]) in.readObject();
+        count = in.readInt();
+        maxColumnNumber = in.readInt();
+    }
+
+    @Override
+    public int getTypeFormatId() {
+        return StoredFormatIds.EXEC_ROW_BUILDER_ID;
+    }
 }
