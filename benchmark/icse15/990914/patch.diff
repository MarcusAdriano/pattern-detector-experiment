diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/FeatureVectorEncoder.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/FeatureVectorEncoder.java
index e5c31809..3a883b23 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/FeatureVectorEncoder.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/FeatureVectorEncoder.java
@@ -21,10 +21,7 @@
 import org.apache.mahout.math.Vector;
 
 import java.nio.charset.Charset;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
+import java.util.*;
 
 /**
  * General interface for objects that record features into a feature vector.
@@ -76,13 +73,10 @@ public void addToVector(String originalForm, Vector data) {
   protected abstract int hashForProbe(String originalForm, Vector data, String name, int i);
 
   protected Iterable<Integer> hashesForProbe(String originalForm, Vector data, String name, int i){
-    List<Integer> hashes = new ArrayList<Integer>();
-    hashes.add(hashForProbe(originalForm,data,name,i));
-  return hashes;
+    return Collections.singletonList(hashForProbe(originalForm,data,name,i));
   }
 
-  
-  protected double getWeight(String originalFor, double w){
+  protected double getWeight(String originalForm, double w){
     return 1.0;
   }
 
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/InteractionValueEncoder.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/InteractionValueEncoder.java
index c6ca58dc..ce1c9d2c 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/InteractionValueEncoder.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/InteractionValueEncoder.java
@@ -17,9 +17,10 @@
 
 package org.apache.mahout.vectors;
 
+import org.apache.mahout.common.iterator.ArrayIterator;
 import org.apache.mahout.math.Vector;
 
-import java.util.Locale;
+import java.util.ArrayList;
 
 public class InteractionValueEncoder extends FeatureVectorEncoder {
 
@@ -52,24 +53,33 @@ public void addToVector(String originalForm, double w, Vector data) {
    * @param data          The vector to which the value should be added.
    */
   public void addInteractionToVector(String originalForm1, String originalForm2, double weight, Vector data) {
-    int probes = getProbes();
     String name = getName();
     double w = getWeight(originalForm1, originalForm2, weight);
-    for (int i = 0; i < probes; i++) {
-      int h1 = firstEncoder.hashForProbe(originalForm1, data, name, i);
-      int h2 = secondEncoder.hashForProbe(originalForm1, data, name, i);
-      int j =  firstEncoder.hashForProbe(originalForm2, data, name, i);
-      int n = (h1 + (j+1)*h2) % data.size();
-      if(n < 0){
-        n = n+data.size();
-      }
+    for (int i = 0; i < probes(); i++) {
+      for(Integer k : firstEncoder.hashesForProbe(originalForm1, data, name, i)){
+        for(Integer j : secondEncoder.hashesForProbe(originalForm2, data, name, i)){
+          int n = linearDoubleHash(hash1(k,name,i,data),hash2(k,name,i,data),j,data.size());
       trace(String.format("%s:%s", originalForm1, originalForm2), n);
       data.set(n, data.get(n) + w);
     }
   }
+    }
+  }
+
+  private int probes() {
+    return getProbes();
+  }
 
   protected double getWeight(String originalForm1, String originalForm2, double w) {
-    return firstEncoder.getWeight(originalForm1, 1.0) * secondEncoder.getWeight(originalForm2,1.0) * w;
+    return firstEncoder.getWeight(originalForm1, 1.0) * secondEncoder.getWeight(originalForm2, 1.0) * w;
+  }
+
+  private int linearDoubleHash(int h1, int h2, int j, int modulus){
+   int n = (h1 + (j+1)*h2) % modulus;
+   if(n < 0){
+    n = n+modulus;
+   }
+   return n;
   }
 
   /**
@@ -90,12 +100,13 @@ protected int hashForProbe(String originalForm, Vector data, String name, int i)
     return hash(name, i, data.size());
   }
 
-  protected int hash1(String term1, String term2, int probe, int numFeatures) {
-    return hash(term1, term2, probe+INTERACTION_VALUE_HASH_SEED_1,numFeatures);
+  protected int hash1(int value, String name, int i, Vector data){
+    return hash(name, i+value+INTERACTION_VALUE_HASH_SEED_1, data.size());
   }
 
-  protected int hash2(String term1, String term2, int probe, int numFeatures) {
-    return hash(term1, term2, probe+INTERACTION_VALUE_HASH_SEED_2,numFeatures);
+  protected int hash2(int value, String name, int i, Vector data){
+    return hash(name, i+value+INTERACTION_VALUE_HASH_SEED_2, data.size());
   }
 }
 
+
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/StaticWordValueEncoder.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/StaticWordValueEncoder.java
index a5ba9685..a643c2e4 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/StaticWordValueEncoder.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/StaticWordValueEncoder.java
@@ -41,7 +41,7 @@ public StaticWordValueEncoder(String name) {
 
   @Override
   protected int hashForProbe(String originalForm, Vector data, String name, int i) {
-    return hash(name, i, data.size());
+    return hash(name, originalForm, WORD_LIKE_VALUE_HASH_SEED + i, data.size());
   }
 
    /**
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/WordValueEncoder.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/WordValueEncoder.java
index 6f8e9fec..75a0abd2 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/WordValueEncoder.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectors/WordValueEncoder.java
@@ -49,6 +49,7 @@ public void addToVector(String originalForm, double w, Vector data) {
     }
   }
 
+
   @Override
   protected double getWeight(String originalForm, double w) {
     return w*weight(originalForm);    
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/vectors/InteractionValueEncoderTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/vectors/InteractionValueEncoderTest.java
index 3450512e..d1f01670 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/vectors/InteractionValueEncoderTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/vectors/InteractionValueEncoderTest.java
@@ -55,7 +55,7 @@ public void testAddToVector() {
   }
 
   @Test
-  public void testaddToVectorUsesProductOfWeights(){
+  public void testAddToVectorUsesProductOfWeights(){
     WordValueEncoder wv = new StaticWordValueEncoder("word");
     ContinuousValueEncoder cv = new ContinuousValueEncoder("cont");
     InteractionValueEncoder enc = new InteractionValueEncoder("interactions", wv, cv);
@@ -66,4 +66,17 @@ public void testaddToVectorUsesProductOfWeights(){
     Assert.assertEquals((float) k*0.5*0.9, v1.norm(1), 0);
     Assert.assertEquals(0.5*0.9, v1.maxValue(), 0);
   }
+
+  @Test
+  public void testAddToVectorWithTextValueEncoder(){
+    WordValueEncoder wv = new StaticWordValueEncoder("word");
+    TextValueEncoder tv = new TextValueEncoder("text");
+    InteractionValueEncoder enc = new InteractionValueEncoder("interactions", wv, tv);
+    Vector v1 = new DenseVector(200);
+    enc.addInteractionToVector("a","some text here",1.0, v1);
+    int k = enc.getProbes();
+    // should interact "a" with each of "some","text" and "here"
+    Assert.assertEquals((float) k*3, v1.norm(1), 0);    
+  }
+
 }
