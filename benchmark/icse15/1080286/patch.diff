diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/tools/SSTableExport.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/tools/SSTableExport.java
index be7d1c18..4ae85448 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/tools/SSTableExport.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/tools/SSTableExport.java
@@ -19,6 +19,7 @@
 package org.apache.cassandra.tools;
 
 import java.io.File;
+import java.io.IOError;
 import java.io.IOException;
 import java.io.PrintStream;
 import java.nio.ByteBuffer;
@@ -37,6 +38,7 @@
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.dht.IPartitioner;
 import org.apache.cassandra.io.sstable.*;
+import org.apache.cassandra.utils.Pair;
 
 import static org.apache.cassandra.utils.ByteBufferUtil.bytesToHex;
 import static org.apache.cassandra.utils.ByteBufferUtil.hexToBytes;
@@ -97,16 +99,23 @@ private static String asKey(String val)
      * Serialize columns using given column iterator
      * @param columns column iterator
      * @param out output stream
+     * @return pair of (number of columns serialized, last column serialized)
      */
-    private static void serializeColumns(Iterator<IColumn> columns, PrintStream out)
+    private static Pair<Integer, ByteBuffer> serializeColumns(Iterator<IColumn> columns, PrintStream out)
     {
+        int n = 0;
+        IColumn column = null;
         while (columns.hasNext())
         {
-            serializeColumn(columns.next(), out);
+            column = columns.next();
+            n++;
+            serializeColumn(column, out);
 
             if (columns.hasNext())
                 out.print(", ");
         }
+
+        return new Pair<Integer, ByteBuffer>(n, column == null ? null : column.name());
     }
 
     /**
@@ -174,25 +183,29 @@ private static void serializeRow(SSTableReader reader, SSTableIdentityIterator r
 
             IColumnIterator columns = filter.getSSTableColumnIterator(reader);
 
-            int columnCount = 0;
-            while (columns.hasNext())
+            Pair<Integer, ByteBuffer> serialized;
+            try
             {
-                // setting new start column to the last of the current columns
-                startColumn = columns.next().name();
-                columnCount++;
+                serialized = serializeRow(columns, isSuperCF, out);
             }
-
+            catch (IOException e)
+            {
+                System.err.println("WARNING: Corrupt row " + key + " (skipping).");
+                continue;
+            }
+            finally
+            {
             try
             {
-                columns = filter.getSSTableColumnIterator(reader); // iterator reset
-                serializeRow(columns, isSuperCF, out);
+                    columns.close();
             }
             catch (IOException e)
             {
-                System.err.println("WARNING: Corrupt row " + key + " (skipping).");
+                    throw new IOError(e);
+                }
             }
 
-            if (columnCount < PAGE_SIZE)
+            if (serialized.left < PAGE_SIZE)
                 break;
 
             out.print(",");
@@ -207,16 +220,20 @@ private static void serializeRow(SSTableReader reader, SSTableIdentityIterator r
      * @param columns columns of the row
      * @param isSuper true if wrapping Column Family is Super
      * @param out output stream
+     * @return pair of (number of columns serialized, last column serialized)
      *
      * @throws IOException on any I/O error.
      */
-    private static void serializeRow(IColumnIterator columns, boolean isSuper, PrintStream out) throws IOException
+    private static Pair<Integer, ByteBuffer> serializeRow(IColumnIterator columns, boolean isSuper, PrintStream out) throws IOException
     {
         if (isSuper)
         {
+            int n = 0;
+            IColumn column = null;
             while (columns.hasNext())
             {
-                IColumn column = columns.next();
+                column = columns.next();
+                n++;
 
                 out.print(asKey(bytesToHex(column.name())));
                 out.print("{");
@@ -232,10 +249,12 @@ private static void serializeRow(IColumnIterator columns, boolean isSuper, Print
                 if (columns.hasNext())
                     out.print(", ");
             }
+
+            return new Pair<Integer, ByteBuffer>(n, column == null ? null : column.name());
         }
         else
         {
-            serializeColumns(columns, out);
+            return serializeColumns(columns, out);
         }
     }
 
