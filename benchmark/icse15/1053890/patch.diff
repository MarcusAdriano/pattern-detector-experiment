diff --git a/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/config/CFMetaData.java b/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/config/CFMetaData.java
index 5d588cd5..9bd05ca7 100644
--- a/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/config/CFMetaData.java
+++ b/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/config/CFMetaData.java
@@ -271,7 +271,7 @@ public CFMetaData(String tableName,
     public static CFMetaData newIndexMetadata(String table, String parentCf, ColumnDefinition info, AbstractType columnComparator)
     {
         return new CFMetaData(table,
-                              parentCf + "." + (info.getIndexName() == null ? FBUtilities.bytesToHex(info.name) : info.getIndexName()),
+                              indexName(parentCf, info),
                               ColumnFamilyType.Standard,
                               columnComparator,
                               null,
@@ -347,6 +347,12 @@ public static void purge(CFMetaData cfm)
         cfIdMap.remove(new Pair<String, String>(cfm.tableName, cfm.cfName));
     }
 
+    /** convention for nameing secondary indexes. */
+    public static String indexName(String parentCf, ColumnDefinition info)
+    {
+        return parentCf + "." + (info.getIndexName() == null ? FBUtilities.bytesToHex(info.name) : info.getIndexName());
+    }
+
     public org.apache.cassandra.avro.CfDef deflate()
     {
         org.apache.cassandra.avro.CfDef cf = new org.apache.cassandra.avro.CfDef();
diff --git a/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 73de0767..5d6b9469 100644
--- a/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -498,6 +498,14 @@ public static void scrubDataDirectories(String table, String columnFamily)
                     if (!file.delete())
                         logger.warn("could not delete " + file.getAbsolutePath());
         }
+        
+        // also clean out any index leftovers.
+        CFMetaData cfm = DatabaseDescriptor.getCFMetaData(table, columnFamily);
+        if (cfm != null) // secondary indexes aren't stored in DD.
+        {
+            for (ColumnDefinition def : cfm.getColumn_metadata().values())
+                scrubDataDirectories(table, CFMetaData.indexName(cfm.cfName, def));
+        }
     }
 
     // must be called after all sstables are loaded since row cache merges all row versions
diff --git a/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/io/sstable/SSTable.java b/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/io/sstable/SSTable.java
index c56ba811..81300199 100644
--- a/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/io/sstable/SSTable.java
+++ b/cassandra/branches/cassandra-0.7.0/src/java/org/apache/cassandra/io/sstable/SSTable.java
@@ -230,6 +230,7 @@ static long estimateRowsFromIndex(BufferedRandomAccessFile ifile) throws IOExcep
             ifile.skipBytes(8);
             keys++;
         }
+        assert keys > 0 && ifile.getFilePointer() > 0 && ifile.length() > 0;
         long estimatedRows = ifile.length() / (ifile.getFilePointer() / keys);
         ifile.seek(0);
         return estimatedRows;
