diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/CodecFactory.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/CodecFactory.java
index 32db7da7..ddaabd90 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/CodecFactory.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/CodecFactory.java
@@ -19,7 +19,6 @@
 
 import org.apache.lucene.codecs.Codec;
 import org.apache.solr.common.util.NamedList;
-import org.apache.solr.schema.IndexSchema;
 import org.apache.solr.util.plugin.NamedListInitializedPlugin;
 
 /**
@@ -29,5 +28,5 @@
   public void init(NamedList args) {  
   }
   
-  public abstract Codec create(IndexSchema Schema);
+  public abstract Codec getCodec();
 }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/DefaultCodecFactory.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/DefaultCodecFactory.java
index 54d34735..e69de29b 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/DefaultCodecFactory.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/DefaultCodecFactory.java
@@ -1,59 +0,0 @@
-package org.apache.solr.core;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import org.apache.lucene.codecs.Codec;
-import org.apache.lucene.codecs.PostingsFormat;
-import org.apache.lucene.codecs.lucene40.Lucene40Codec;
-import org.apache.solr.schema.IndexSchema;
-import org.apache.solr.schema.SchemaField;
-
-/**
- * Default CodecFactory implementation, extends Lucene's 
- * and returns postings format implementations according to the 
- * schema configuration.
- * @lucene.experimental
- */
-public class DefaultCodecFactory extends CodecFactory {
-
-  // TODO: we need to change how solr does this?
-  // rather than a string like "Pulsing" you need to be able to pass parameters
-  // and everything to a field in the schema, e.g. we should provide factories for 
-  // the Lucene's core formats (Memory, Pulsing, ...) and such.
-  //
-  // So I think a FieldType should return PostingsFormat, not a String.
-  // how it constructs this from the XML... i don't care.
-
-  @Override
-  public Codec create(final IndexSchema schema) {
-    return new Lucene40Codec() {
-      @Override
-      public PostingsFormat getPostingsFormatForField(String field) {
-        final SchemaField fieldOrNull = schema.getFieldOrNull(field);
-        if (fieldOrNull == null) {
-          throw new IllegalArgumentException("no such field " + field);
-        }
-        String postingsFormatName = fieldOrNull.getType().getPostingsFormat();
-        if (postingsFormatName != null) {
-          return PostingsFormat.forName(postingsFormatName);
-        }
-        return super.getPostingsFormatForField(field);
-      }
-    };
-  }
-}
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SchemaCodecFactory.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SchemaCodecFactory.java
index e69de29b..c5dbe807 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SchemaCodecFactory.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SchemaCodecFactory.java
@@ -0,0 +1,66 @@
+package org.apache.solr.core;
+
+import org.apache.lucene.codecs.Codec;
+import org.apache.lucene.codecs.PostingsFormat;
+import org.apache.lucene.codecs.lucene40.Lucene40Codec;
+import org.apache.solr.schema.IndexSchema;
+import org.apache.solr.schema.SchemaAware;
+import org.apache.solr.schema.SchemaField;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * Per-field CodecFactory implementation, extends Lucene's 
+ * and returns postings format implementations according to the 
+ * schema configuration.
+ * @lucene.experimental
+ */
+public class SchemaCodecFactory extends CodecFactory implements SchemaAware {
+  private Codec codec;
+  // TODO: we need to change how solr does this?
+  // rather than a string like "Pulsing" you need to be able to pass parameters
+  // and everything to a field in the schema, e.g. we should provide factories for 
+  // the Lucene's core formats (Memory, Pulsing, ...) and such.
+  //
+  // So I think a FieldType should return PostingsFormat, not a String.
+  // how it constructs this from the XML... i don't care.
+
+  @Override
+  public void inform(final IndexSchema schema) {
+    codec = new Lucene40Codec() {
+      @Override
+      public PostingsFormat getPostingsFormatForField(String field) {
+        final SchemaField fieldOrNull = schema.getFieldOrNull(field);
+        if (fieldOrNull == null) {
+          throw new IllegalArgumentException("no such field " + field);
+        }
+        String postingsFormatName = fieldOrNull.getType().getPostingsFormat();
+        if (postingsFormatName != null) {
+          return PostingsFormat.forName(postingsFormatName);
+        }
+        return super.getPostingsFormatForField(field);
+      }
+    };
+  }
+
+  @Override
+  public Codec getCodec() {
+    assert codec != null : "inform must be called first";
+    return codec;
+  }
+}
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrConfig.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrConfig.java
index c85c4512..ba242bc9 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrConfig.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrConfig.java
@@ -221,7 +221,7 @@ public SolrConfig(SolrResourceLoader loader, String name, InputSource is)
 
      loadPluginInfo(DirectoryFactory.class,"directoryFactory",false, true);
      loadPluginInfo(IndexDeletionPolicy.class,indexConfigPrefix+"/deletionPolicy",false, true);
-     loadPluginInfo(CodecFactory.class,"mainIndex/codecFactory",false, false);
+     loadPluginInfo(CodecFactory.class,"codecFactory",false, false);
      loadPluginInfo(IndexReaderFactory.class,"indexReaderFactory",false, true);
      loadPluginInfo(UpdateRequestProcessorChain.class,"updateRequestProcessorChain",false, false);
      loadPluginInfo(UpdateLog.class,"updateHandler/updateLog",false, false);
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCore.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCore.java
index 87baf18f..dc6fff81 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCore.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/SolrCore.java
@@ -56,7 +56,9 @@
 import org.apache.solr.response.SolrQueryResponse;
 import org.apache.solr.response.XMLResponseWriter;
 import org.apache.solr.response.transform.TransformerFactory;
+import org.apache.solr.schema.FieldType;
 import org.apache.solr.schema.IndexSchema;
+import org.apache.solr.schema.SchemaAware;
 import org.apache.solr.search.QParserPlugin;
 import org.apache.solr.search.SolrFieldCacheMBean;
 import org.apache.solr.search.SolrIndexSearcher;
@@ -691,9 +693,25 @@ private Codec initCodec(SolrConfig solrConfig, final IndexSchema schema) {
       factory = schema.getResourceLoader().newInstance(info.className, CodecFactory.class);
       factory.init(info.initArgs);
     } else {
-      factory = new DefaultCodecFactory();
+      factory = new CodecFactory() {
+        @Override
+        public Codec getCodec() {
+          return Codec.getDefault();
+        }
+      };
+    }
+    if (factory instanceof SchemaAware) {
+      ((SchemaAware)factory).inform(schema);
+    } else {
+      for (FieldType ft : schema.getFieldTypes().values()) {
+        if (null != ft.getPostingsFormat()) {
+          String msg = "FieldType '" + ft.getTypeName() + "' is configured with a postings format, but the codec does not support it: " + factory.getClass();
+          log.error(msg);
+          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, msg);
+        }
+      }
     }
-    return factory.create(schema);
+    return factory.getCodec();
   }
 
   /**
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestCodecSupport.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestCodecSupport.java
index d3555fe2..3bf7e713 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestCodecSupport.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestCodecSupport.java
@@ -29,7 +29,7 @@
 
   @BeforeClass
   public static void beforeClass() throws Exception {
-    initCore("solrconfig-basic.xml", "schema_codec.xml");
+    initCore("solrconfig_codec.xml", "schema_codec.xml");
   }
 
   public void testPostingsFormats() {
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest.java
index a3e89a4e..74d6ba7d 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest.java
@@ -35,7 +35,7 @@ private void doTest(final String schema, final String errString)
     ignoreException(Pattern.quote(errString));
     try {
       initCore( "solrconfig.xml", schema );
-    } catch (SolrException e) {
+    } catch (Exception e) {
       // short circuit out if we found what we expected
       if (-1 != e.getMessage().indexOf(errString)) return;
       // Test the cause too in case the expected error is wrapped
@@ -91,5 +91,9 @@ public void testPerFieldtypeSimButNoSchemaSimFactory() throws Exception {
     doTest("bad-schema-sim-global-vs-ft-mismatch.xml", "global similarity does not support it");
   }
 
+  public void testPerFieldtypePostingsFormatButNoSchemaCodecFactory() throws Exception {
+    doTest("bad-schema-codec-global-vs-ft-mismatch.xml", "codec does not support");
+  }
+
 
 }
