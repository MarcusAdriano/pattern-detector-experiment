diff --git a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.java b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.java
index 71d67091..602e6b60 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor.java
@@ -18,7 +18,9 @@
  */
 
 import java.io.IOException;
+
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.LinkedList;
 import java.util.List;
 
@@ -29,9 +31,12 @@
 import org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;
 import org.apache.lucene.queryparser.flexible.core.QueryNodeException;
 import org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler;
+import org.apache.lucene.queryparser.flexible.core.nodes.BooleanQueryNode;
 import org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode;
 import org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode;
 import org.apache.lucene.queryparser.flexible.core.nodes.GroupQueryNode;
+import org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode;
+import org.apache.lucene.queryparser.flexible.core.nodes.ModifierQueryNode.Modifier;
 import org.apache.lucene.queryparser.flexible.core.nodes.NoTokenFoundQueryNode;
 import org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;
 import org.apache.lucene.queryparser.flexible.core.nodes.QuotedFieldQueryNode;
@@ -40,6 +45,7 @@
 import org.apache.lucene.queryparser.flexible.core.nodes.TokenizedPhraseQueryNode;
 import org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl;
 import org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler.ConfigurationKeys;
+import org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler.Operator;
 import org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode;
 import org.apache.lucene.queryparser.flexible.standard.nodes.RegexpQueryNode;
 import org.apache.lucene.queryparser.flexible.standard.nodes.StandardBooleanQueryNode;
@@ -73,6 +79,8 @@
 
   private boolean positionIncrementsEnabled;
 
+  private Operator defaultOperator;
+
   public AnalyzerQueryNodeProcessor() {
     // empty constructor
   }
@@ -85,6 +93,8 @@ public QueryNode process(QueryNode queryTree) throws QueryNodeException {
       this.analyzer = analyzer;
       this.positionIncrementsEnabled = false;
       Boolean positionIncrementsEnabled = getQueryConfigHandler().get(ConfigurationKeys.ENABLE_POSITION_INCREMENTS);
+      Operator defaultOperator = getQueryConfigHandler().get(ConfigurationKeys.DEFAULT_OPERATOR);
+      this.defaultOperator = defaultOperator != null ? defaultOperator : Operator.OR;
 
       if (positionIncrementsEnabled != null) {
           this.positionIncrementsEnabled = positionIncrementsEnabled;
@@ -93,7 +103,6 @@ public QueryNode process(QueryNode queryTree) throws QueryNodeException {
       if (this.analyzer != null) {
         return super.process(queryTree);
       }
-
     }
 
     return queryTree;
@@ -119,6 +128,7 @@ protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
       int positionCount = 0;
       boolean severalTokensAtSamePosition = false;
       
+      try {
       try (TokenStream source = this.analyzer.tokenStream(field, text)) {
         source.reset();
         buffer = new CachingTokenFilter(source);
@@ -180,6 +190,9 @@ protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
       } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {
         if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {
           // no phrase query:
+            
+            if (positionCount == 1) {
+              // simple case: only one position, with synonyms
           LinkedList<QueryNode> children = new LinkedList<QueryNode>();
 
           for (int i = 0; i < numTokens; i++) {
@@ -199,6 +212,48 @@ protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
           return new GroupQueryNode(
             new StandardBooleanQueryNode(children, positionCount==1));
         } else {
+              // multiple positions
+              QueryNode q = new StandardBooleanQueryNode(Collections.<QueryNode>emptyList(),false);
+              QueryNode currentQuery = null;
+              for (int i = 0; i < numTokens; i++) {
+                String term = null;
+                try {
+                  boolean hasNext = buffer.incrementToken();
+                  assert hasNext == true;
+                  term = termAtt.toString();
+                } catch (IOException e) {
+                  // safe to ignore, because we know the number of tokens
+                }
+                if (posIncrAtt != null && posIncrAtt.getPositionIncrement() == 0) {
+                  if (!(currentQuery instanceof BooleanQueryNode)) {
+                    QueryNode t = currentQuery;
+                    currentQuery = new StandardBooleanQueryNode(Collections.<QueryNode>emptyList(), true);
+                    ((BooleanQueryNode)currentQuery).add(t);
+                  }
+                  ((BooleanQueryNode)currentQuery).add(new FieldQueryNode(field, term, -1, -1));
+                } else {
+                  if (currentQuery != null) {
+                    if (this.defaultOperator == Operator.OR) {
+                      q.add(currentQuery);
+                    } else {
+                      q.add(new ModifierQueryNode(currentQuery, Modifier.MOD_REQ));
+                    }
+                  }
+                  currentQuery = new FieldQueryNode(field, term, -1, -1);
+                }
+              }
+              if (this.defaultOperator == Operator.OR) {
+                q.add(currentQuery);
+              } else {
+                q.add(new ModifierQueryNode(currentQuery, Modifier.MOD_REQ));
+              }
+              
+              if (q instanceof BooleanQueryNode) {
+                q = new GroupQueryNode(q);
+              }
+              return q;
+            }
+          } else {
           // phrase query:
           MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();
 
@@ -305,11 +360,18 @@ protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {
         return pq;
 
       }
-
+      } finally {
+        if (buffer != null) {
+          try {
+            buffer.close();
+          } catch (IOException e) {
+            // safe to ignore
+          }
+        }
+      }
     }
 
     return node;
-
   }
 
   @Override
diff --git a/lucene/dev/trunk/lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java b/lucene/dev/trunk/lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java
index 7d138dbf..0c399393 100644
--- a/lucene/dev/trunk/lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java
+++ b/lucene/dev/trunk/lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase.java
@@ -558,6 +558,13 @@ public void testQPA() throws Exception {
     assertQueryEquals("((stop))", qpAnalyzer, "");
     assertTrue(getQuery("term term term", qpAnalyzer) instanceof BooleanQuery);
     assertTrue(getQuery("term +stop", qpAnalyzer) instanceof TermQuery);
+    
+    CommonQueryParserConfiguration cqpc = getParserConfig(qpAnalyzer);
+    setDefaultOperatorAND(cqpc);
+    assertQueryEquals(cqpc, "field", "term phrase term",
+        "+term +(+phrase1 +phrase2) +term");
+    assertQueryEquals(cqpc, "field", "phrase",
+        "+phrase1 +phrase2");
   }
 
   public void testRange() throws Exception {
