diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/df/tools/TreeVisualizer.java b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/df/tools/TreeVisualizer.java
index 8cf13b3c..22f7c729 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/df/tools/TreeVisualizer.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/classifier/df/tools/TreeVisualizer.java
@@ -36,46 +36,41 @@
  */
 public final class TreeVisualizer {
 
-  private TreeVisualizer() {
-  }
+  private TreeVisualizer() {}
 
   private static String doubleToString(double value) {
     DecimalFormat df = new DecimalFormat("0.##");
     return df.format(value);
   }
 
-  private static String toStringNode(Node node,
-                                     Dataset dataset,
-                                     String[] attrNames,
-                                     Map<String, Field> fields,
-                                     int layer) {
+  private static String toStringNode(Node node, Dataset dataset,
+      String[] attrNames, Map<String,Field> fields, int layer) {
 
     StringBuilder buff = new StringBuilder();
 
     try {
-
       if (node instanceof CategoricalNode) {
         CategoricalNode cnode = (CategoricalNode) node;
         int attr = (Integer) fields.get("CategoricalNode.attr").get(cnode);
-        double[] values = (double[]) fields.get("CategoricalNode.values").get(cnode);
-        Node[] childs = (Node[]) fields.get("CategoricalNode.childs").get(cnode);
-        String[][] attrValues = (String[][]) fields.get("Dataset.values").get(dataset);
-        for (int i = 0; i < childs.length; i++) {
+        double[] values = (double[]) fields.get("CategoricalNode.values").get(
+            cnode);
+        Node[] childs = (Node[]) fields.get("CategoricalNode.childs")
+            .get(cnode);
+        String[][] attrValues = (String[][]) fields.get("Dataset.values").get(
+            dataset);
+        for (int i = 0; i < attrValues[attr].length; i++) {
+          int index = ArrayUtils.indexOf(values, i);
+          if (index < 0) {
+            continue;
+          }
           buff.append('\n');
           for (int j = 0; j < layer; j++) {
             buff.append("|   ");
           }
-          if (values[i] < attrValues[attr].length) {
-            if (attrNames == null) {
-              buff.append(attr);
-            } else {
-              buff.append(attrNames[attr]);
-            }
-            buff.append(" = ");
-            buff.append(attrValues[attr][(int) values[i]]);
-
-            buff.append(toStringNode(childs[i], dataset, attrNames, fields, layer + 1));
-          }
+          buff.append(attrNames == null ? attr : attrNames[attr]).append(" = ")
+              .append(attrValues[attr][i]);
+          buff.append(toStringNode(childs[index], dataset, attrNames, fields,
+              layer + 1));
         }
       } else if (node instanceof NumericalNode) {
         NumericalNode nnode = (NumericalNode) node;
@@ -87,13 +82,15 @@ private static String toStringNode(Node node,
         for (int j = 0; j < layer; j++) {
           buff.append("|   ");
         }
-        buff.append(attrNames == null ? attr : attrNames[attr]).append(" < ").append(doubleToString(split));
+        buff.append(attrNames == null ? attr : attrNames[attr]).append(" < ")
+            .append(doubleToString(split));
         buff.append(toStringNode(loChild, dataset, attrNames, fields, layer + 1));
         buff.append('\n');
         for (int j = 0; j < layer; j++) {
           buff.append("|   ");
         }
-        buff.append(attrNames == null ? attr : attrNames[attr]).append(" >= ").append(doubleToString(split));
+        buff.append(attrNames == null ? attr : attrNames[attr]).append(" >= ")
+            .append(doubleToString(split));
         buff.append(toStringNode(hiChild, dataset, attrNames, fields, layer + 1));
       } else if (node instanceof Leaf) {
         Leaf leaf = (Leaf) node;
@@ -101,10 +98,9 @@ private static String toStringNode(Node node,
         if (dataset.isNumerical(dataset.getLabelId())) {
           buff.append(" : ").append(doubleToString(label));
         } else {
-          buff.append(" : ").append(dataset.getLabelString((int) label));
+          buff.append(" : ").append(dataset.getLabelString(label));
         }
       }
-
     } catch (IllegalAccessException iae) {
       throw new IllegalStateException(iae);
     }
@@ -112,8 +108,8 @@ private static String toStringNode(Node node,
     return buff.toString();
   }
 
-  private static Map<String, Field> getReflectMap() {
-    Map<String, Field> fields = new HashMap<String, Field>();
+  private static Map<String,Field> getReflectMap() {
+    Map<String,Field> fields = new HashMap<String,Field>();
 
     try {
       Field m = CategoricalNode.class.getDeclaredField("attr");
@@ -152,6 +148,7 @@ private static String toStringNode(Node node,
   
   /**
    * Decision tree to String
+   * 
    * @param tree
    *          Node of tree
    * @param attrNames
@@ -163,34 +160,38 @@ public static String toString(Node tree, Dataset dataset, String[] attrNames) {
 
   /**
    * Print Decision tree
-   * @param tree  Node of tree
-   * @param attrNames attribute names
+   * 
+   * @param tree
+   *          Node of tree
+   * @param attrNames
+   *          attribute names
    */
   public static void print(Node tree, Dataset dataset, String[] attrNames) {
     System.out.println(toString(tree, dataset, attrNames));
   }
 
-  private static String toStringPredict(Node node,
-                                        Instance instance,
-                                        Dataset dataset,
-                                        String[] attrNames,
-                                        Map<String, Field> fields) {
+  private static String toStringPredict(Node node, Instance instance,
+      Dataset dataset, String[] attrNames, Map<String,Field> fields) {
     StringBuilder buff = new StringBuilder();
 
     try {
       if (node instanceof CategoricalNode) {
         CategoricalNode cnode = (CategoricalNode) node;
         int attr = (Integer) fields.get("CategoricalNode.attr").get(cnode);
-        double[] values = (double[]) fields.get("CategoricalNode.values").get(cnode);
-        Node[] childs = (Node[]) fields.get("CategoricalNode.childs").get(cnode);
-        String[][] attrValues = (String[][]) fields.get("Dataset.values").get(dataset);
+        double[] values = (double[]) fields.get("CategoricalNode.values").get(
+            cnode);
+        Node[] childs = (Node[]) fields.get("CategoricalNode.childs")
+            .get(cnode);
+        String[][] attrValues = (String[][]) fields.get("Dataset.values").get(
+            dataset);
 
         int index = ArrayUtils.indexOf(values, instance.get(attr));
         if (index >= 0) {
           buff.append(attrNames == null ? attr : attrNames[attr]).append(" = ")
               .append(attrValues[attr][(int) instance.get(attr)]);
           buff.append(" -> ");
-          buff.append(toStringPredict(childs[index], instance, dataset, attrNames, fields));
+          buff.append(toStringPredict(childs[index], instance, dataset,
+              attrNames, fields));
         }
       } else if (node instanceof NumericalNode) {
         NumericalNode nnode = (NumericalNode) node;
@@ -200,15 +201,19 @@ private static String toStringPredict(Node node,
         Node hiChild = (Node) fields.get("NumericalNode.hiChild").get(nnode);
 
         if (instance.get(attr) < split) {
-          buff.append('(').append(attrNames == null ? attr : attrNames[attr]).append(" = ")
-              .append(doubleToString(instance.get(attr))).append(") < ").append(doubleToString(split));
+          buff.append('(').append(attrNames == null ? attr : attrNames[attr])
+              .append(" = ").append(doubleToString(instance.get(attr)))
+              .append(") < ").append(doubleToString(split));
           buff.append(" -> ");
-          buff.append(toStringPredict(loChild, instance, dataset, attrNames, fields));
+          buff.append(toStringPredict(loChild, instance, dataset, attrNames,
+              fields));
         } else {
-          buff.append('(').append(attrNames == null ? attr : attrNames[attr]).append(" = ")
-              .append(doubleToString(instance.get(attr))).append(") >= ").append(doubleToString(split));
+          buff.append('(').append(attrNames == null ? attr : attrNames[attr])
+              .append(" = ").append(doubleToString(instance.get(attr)))
+              .append(") >= ").append(doubleToString(split));
           buff.append(" -> ");
-          buff.append(toStringPredict(hiChild, instance, dataset, attrNames, fields));
+          buff.append(toStringPredict(hiChild, instance, dataset, attrNames,
+              fields));
         }
       } else if (node instanceof Leaf) {
         Leaf leaf = (Leaf) node;
@@ -216,7 +221,7 @@ private static String toStringPredict(Node node,
         if (dataset.isNumerical(dataset.getLabelId())) {
           buff.append(doubleToString(label));
         } else {
-          buff.append(dataset.getLabelString((int) label));
+          buff.append(dataset.getLabelString(label));
         }
       }
     } catch (IllegalAccessException iae) {
@@ -228,31 +233,35 @@ private static String toStringPredict(Node node,
 
   /**
    * Predict trace to String
+   * 
    * @param tree
    *          Node of tree
    * @param attrNames
    *          attribute names
    */
   public static String[] predictTrace(Node tree, Data data, String[] attrNames) {
-    Map<String, Field> reflectMap = getReflectMap();
+    Map<String,Field> reflectMap = getReflectMap();
     String[] prediction = new String[data.size()];
     for (int i = 0; i < data.size(); i++) {
-      prediction[i] = toStringPredict(tree, data.get(i), data.getDataset(), attrNames, reflectMap);
+      prediction[i] = toStringPredict(tree, data.get(i), data.getDataset(),
+          attrNames, reflectMap);
     }
     return prediction;
   }
 
   /**
    * Print predict trace
+   * 
    * @param tree
    *          Node of tree
    * @param attrNames
    *          attribute names
    */
   public static void predictTracePrint(Node tree, Data data, String[] attrNames) {
-    Map<String, Field> reflectMap = getReflectMap();
+    Map<String,Field> reflectMap = getReflectMap();
     for (int i = 0; i < data.size(); i++) {
-      System.out.println(toStringPredict(tree, data.get(i), data.getDataset(), attrNames, reflectMap));
+      System.out.println(toStringPredict(tree, data.get(i), data.getDataset(),
+          attrNames, reflectMap));
     }
   }
 }
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/df/tools/VisualizerTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/df/tools/VisualizerTest.java
index fdfe3db5..d585d07b 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/df/tools/VisualizerTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/classifier/df/tools/VisualizerTest.java
@@ -20,12 +20,12 @@
 import java.util.List;
 import java.util.Random;
 
-import com.google.common.collect.Lists;
 import org.apache.mahout.classifier.df.DecisionForest;
 import org.apache.mahout.classifier.df.builder.DecisionTreeBuilder;
 import org.apache.mahout.classifier.df.data.Data;
 import org.apache.mahout.classifier.df.data.DataLoader;
 import org.apache.mahout.classifier.df.data.Dataset;
+import org.apache.mahout.classifier.df.data.Instance;
 import org.apache.mahout.classifier.df.node.CategoricalNode;
 import org.apache.mahout.classifier.df.node.Leaf;
 import org.apache.mahout.classifier.df.node.Node;
@@ -36,6 +36,8 @@
 import org.junit.Before;
 import org.junit.Test;
 
+import com.google.common.collect.Lists;
+
 public final class VisualizerTest extends MahoutTestCase {
   
   private static final String[] TRAIN_DATA = {"sunny,85,85,FALSE,no",
@@ -53,7 +55,9 @@
     "humidity", "windy", "play"};
   
   private Random rng;
+  
   private Data data;
+  
   private Data testData;
   
   @Override
@@ -61,10 +65,11 @@
   public void setUp() throws Exception {
     super.setUp();
     
-    rng = RandomUtils.getRandom();
+    rng = RandomUtils.getRandom(1);
     
     // Dataset
-    Dataset dataset = DataLoader.generateDataset("C N N C L", false, TRAIN_DATA);
+    Dataset dataset = DataLoader
+        .generateDataset("C N N C L", false, TRAIN_DATA);
     
     // Training data
     data = DataLoader.loadData(dataset, TRAIN_DATA);
@@ -80,10 +85,9 @@ public void testTreeVisualize() throws Exception {
     builder.setM(data.getDataset().nbAttributes() - 1);
     Node tree = builder.build(rng, data);
     
-    assertEquals(TreeVisualizer.toString(tree, data.getDataset(), ATTR_NAMES),
-      "\noutlook = rainy\n|   windy = FALSE : yes\n|   windy = TRUE : no\n"
-        + "outlook = overcast : yes\n"
-        + "outlook = sunny\n|   humidity < 85 : yes\n|   humidity >= 85 : no");
+    assertEquals("\noutlook = rainy\n|   windy = FALSE : yes\n|   windy = TRUE : no\n"
+            + "outlook = sunny\n|   humidity < 85 : yes\n|   humidity >= 85 : no\n"
+            + "outlook = overcast : yes", TreeVisualizer.toString(tree, data.getDataset(), ATTR_NAMES));
   }
   
   @Test
@@ -93,8 +97,9 @@ public void testPredictTrace() throws Exception {
     builder.setM(data.getDataset().nbAttributes() - 1);
     Node tree = builder.build(rng, data);
     
-    String[] prediction = TreeVisualizer.predictTrace(tree, testData, ATTR_NAMES);
-    Assert.assertArrayEquals(new String[]{
+    String[] prediction = TreeVisualizer.predictTrace(tree, testData,
+        ATTR_NAMES);
+    Assert.assertArrayEquals(new String[] {
         "outlook = rainy -> windy = TRUE -> no", "outlook = overcast -> yes",
         "outlook = sunny -> (humidity = 90) >= 85 -> no"}, prediction);
   }
@@ -111,14 +116,43 @@ public void testForestVisualize() throws Exception {
     
     // Forest
     DecisionForest forest = new DecisionForest(trees);
-    assertEquals(ForestVisualizer.toString(forest, data.getDataset(), null),
-      "Tree[1]:\n2 < 90 : yes\n2 >= 90\n"
+    assertEquals("Tree[1]:\n2 < 90 : yes\n2 >= 90\n"
         + "|   0 = rainy\n|   |   1 < 71 : yes\n|   |   1 >= 71 : no\n"
-        + "|   0 = sunny : no\n" + "|   0 = overcast : yes\n");
+            + "|   0 = sunny : no\n" + "|   0 = overcast : yes\n", ForestVisualizer.toString(forest, data.getDataset(), null));
     
-    assertEquals(ForestVisualizer.toString(forest, data.getDataset(), ATTR_NAMES),
-      "Tree[1]:\nhumidity < 90 : yes\nhumidity >= 90\n"
+    assertEquals("Tree[1]:\nhumidity < 90 : yes\nhumidity >= 90\n"
         + "|   outlook = rainy\n|   |   temperature < 71 : yes\n|   |   temperature >= 71 : no\n"
-        + "|   outlook = sunny : no\n" + "|   outlook = overcast : yes\n");
+            + "|   outlook = sunny : no\n" + "|   outlook = overcast : yes\n", ForestVisualizer.toString(forest, data.getDataset(), ATTR_NAMES));
+  }
+  
+  @Test
+  public void testLeafless() throws Exception {
+    List<Instance> instances = Lists.newArrayList();
+    for (int i = 0; i < data.size(); i++) {
+      if (data.get(i).get(0) != 0.0d) {
+        instances.add(data.get(i));
+      }
+    }
+    Data lessData = new Data(data.getDataset(), instances);
+    
+    // build tree
+    DecisionTreeBuilder builder = new DecisionTreeBuilder();
+    builder.setM(data.getDataset().nbAttributes() - 1);
+    builder.setMinSplitNum(0);
+    builder.setComplemented(false);
+    Node tree = builder.build(rng, lessData);
+
+    assertEquals("\noutlook = sunny\n|   humidity < 85 : yes\n|   humidity >= 85 : no\noutlook = overcast : yes", TreeVisualizer.toString(tree, data.getDataset(), ATTR_NAMES));
+  }
+  
+  @Test
+  public void testEmpty() throws Exception {
+    Data emptyData = new Data(data.getDataset());
+    
+    // build tree
+    DecisionTreeBuilder builder = new DecisionTreeBuilder();
+    Node tree = builder.build(rng, emptyData);
+
+    assertEquals(" : unknown", TreeVisualizer.toString(tree, data.getDataset(), ATTR_NAMES));
   }
 }
