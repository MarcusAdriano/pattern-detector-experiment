diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/Config.java b/cassandra/trunk/src/java/org/apache/cassandra/config/Config.java
index b3636fb9..a3d1fdb3 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/Config.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/Config.java
@@ -29,6 +29,8 @@
     
     public Long rpc_timeout_in_ms = new Long(2000);
     
+    public Integer phi_convict_threshold = 8;
+    
     public Integer concurrent_reads = 8;
     public Integer concurrent_writes = 32;
     
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index 57f951e2..96249767 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -202,6 +202,12 @@ else if (conf.disk_access_mode == Config.DiskAccessMode.mmap_index_only)
                 throw new ConfigurationException("Invalid partitioner class " + conf.partitioner);
             }
 
+            /* phi convict threshold for FailureDetector */
+            if (conf.phi_convict_threshold < 5 || conf.phi_convict_threshold > 16)
+            {
+                throw new ConfigurationException("phi_convict_threshold must be between 5 and 16");
+            }
+            
             /* Thread per pool */
             if (conf.concurrent_reads != null && conf.concurrent_reads < 2) 
             {
@@ -745,6 +751,11 @@ public static long getRpcTimeout()
         return conf.rpc_timeout_in_ms;
     }
 
+    public static int getPhiConvictThreshold()
+    {
+        return conf.phi_convict_threshold;
+    }
+
     public static int getConsistencyThreads()
     {
         return consistencyThreads;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/gms/FailureDetector.java b/cassandra/trunk/src/java/org/apache/cassandra/gms/FailureDetector.java
index 8aeb4ccb..fb3624fc 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/gms/FailureDetector.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/gms/FailureDetector.java
@@ -29,6 +29,7 @@
 import org.apache.commons.lang.StringUtils;
 
 import java.net.InetAddress;
+import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.utils.BoundedStatsDeque;
 import org.slf4j.Logger;
@@ -44,7 +45,7 @@
     public static final IFailureDetector instance = new FailureDetector();
     private static Logger logger_ = LoggerFactory.getLogger(FailureDetector.class);
     private static final int sampleSize_ = 1000;
-    private static final int phiConvictThreshold_ = 8;
+    private static int phiConvictThreshold_;
     /* The Failure Detector has to have been up for at least 1 min. */
     private static final long uptimeThreshold_ = 60000;
     /* The time when the module was instantiated. */
@@ -55,6 +56,7 @@
     
     public FailureDetector()
     {
+        phiConvictThreshold_ = DatabaseDescriptor.getPhiConvictThreshold();
         creationTime_ = System.currentTimeMillis();
         // Register this instance with JMX
         try
@@ -110,6 +112,16 @@ private void dumpInterArrivalTimes(InetAddress ep)
         }
     }
     
+    public void setPhiConvictThreshold(int phi)
+    {
+        phiConvictThreshold_ = phi;
+    }
+
+    public int getPhiConvictThreshold()
+    {
+        return phiConvictThreshold_;
+    }
+    
     public boolean isAlive(InetAddress ep)
     {
        /* If the endpoint in question is the local endpoint return true. */
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/gms/FailureDetectorMBean.java b/cassandra/trunk/src/java/org/apache/cassandra/gms/FailureDetectorMBean.java
index 3c9f7e5a..d7411fc9 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/gms/FailureDetectorMBean.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/gms/FailureDetectorMBean.java
@@ -21,4 +21,8 @@
 public interface FailureDetectorMBean
 {
     public void dumpInterArrivalTimes();
+
+    public void setPhiConvictThreshold(int phi);
+
+    public int getPhiConvictThreshold();
 }
