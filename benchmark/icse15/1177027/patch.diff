diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/text/PrefixAdditionFilter.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/text/PrefixAdditionFilter.java
index 4183a01f..ed2c382f 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/text/PrefixAdditionFilter.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/text/PrefixAdditionFilter.java
@@ -26,6 +26,7 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.charset.Charset;
 import java.util.Map;
 
 /**
@@ -37,8 +38,9 @@ public PrefixAdditionFilter(Configuration conf,
                               String keyPrefix,
                               Map<String, String> options, 
                               ChunkedWriter writer,
+                              Charset charset,
                               FileSystem fs) {
-    super(conf, keyPrefix, options, writer, fs);
+    super(conf, keyPrefix, options, writer, charset, fs);
   }
 
   @Override
@@ -47,7 +49,8 @@ protected void process(FileStatus fst, Path current) throws IOException {
     ChunkedWriter writer = getWriter();
     if (fst.isDir()) {
       String dirPath = getPrefix() + Path.SEPARATOR + current.getName() + Path.SEPARATOR + fst.getPath().getName();
-      fs.listStatus(fst.getPath(), new PrefixAdditionFilter(getConf(), dirPath, getOptions(), writer, fs));
+      fs.listStatus(fst.getPath(),
+                    new PrefixAdditionFilter(getConf(), dirPath, getOptions(), writer, getCharset(), fs));
     } else {
       InputStream in = null;
       try {
diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromCsvFilter.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromCsvFilter.java
index 2307ee8c..e69de29b 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromCsvFilter.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromCsvFilter.java
@@ -1,103 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.mahout.text;
-
-import org.apache.hadoop.conf.Configuration;
-import org.apache.hadoop.fs.FileStatus;
-import org.apache.hadoop.fs.FileSystem;
-import org.apache.hadoop.fs.Path;
-import org.apache.hadoop.util.ToolRunner;
-import org.apache.mahout.common.iterator.FileLineIterable;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.Map;
-import java.util.regex.Pattern;
-
-/**
- * Implements an example csv to sequence file parser.
- */
-public final class SequenceFilesFromCsvFilter extends SequenceFilesFromDirectoryFilter {
-
-  private static final Logger log = LoggerFactory.getLogger(SequenceFilesFromCsvFilter.class);
-  private static final Pattern TAB = Pattern.compile("\t");
-
-  private static final String[] KEY_COLUMN_OPTION = {"keyColumn", "kcol"};
-  private static final String[] VALUE_COLUMN_OPTION = {"valueColumn", "vcol"};
-
-  private volatile int keyColumn;
-  private volatile int valueColumn;
-
-  private SequenceFilesFromCsvFilter() {
-    // not initializing anything here.
-  }
-
-  public SequenceFilesFromCsvFilter(Configuration conf,
-                                    String keyPrefix,
-                                    Map<String, String> options,
-                                    ChunkedWriter writer,
-                                    FileSystem fs) {
-    super(conf, keyPrefix, options, writer, fs);
-    this.keyColumn = Integer.parseInt(options.get(KEY_COLUMN_OPTION[0]));
-    this.valueColumn = Integer.parseInt(options.get(VALUE_COLUMN_OPTION[0]));
-  }
-
-  public static void main(String[] args) throws Exception {
-    ToolRunner.run(new SequenceFilesFromCsvFilter(), args);
-  }
-
-  @Override
-  public void addOptions() {
-    super.addOptions();
-    addOption(KEY_COLUMN_OPTION[0], KEY_COLUMN_OPTION[1],
-      "The key column. Default to 0", "0");
-    addOption(VALUE_COLUMN_OPTION[0], VALUE_COLUMN_OPTION[1],
-      "The value column. Default to 1", "1");
-  }
-
-  @Override
-  public Map<String, String> parseOptions() throws IOException {
-    Map<String, String> options = super.parseOptions();
-    options.put(SequenceFilesFromDirectory.FILE_FILTER_CLASS_OPTION[0], this.getClass().getName());
-    options.put(KEY_COLUMN_OPTION[0], getOption(KEY_COLUMN_OPTION[0]));
-    options.put(VALUE_COLUMN_OPTION[0], getOption(VALUE_COLUMN_OPTION[0]));
-    return options;
-  }
-
-  @Override
-  protected void process(FileStatus fst, Path current) throws IOException {
-    FileSystem fs = getFs();
-    ChunkedWriter writer = getWriter();
-    if (fst.isDir()) {
-      fs.listStatus(fst.getPath(),
-                    new SequenceFilesFromCsvFilter(getConf(), getPrefix() + Path.SEPARATOR + current.getName(),
-                                                   this.getOptions(), writer, getFs()));
-    } else {
-      InputStream in = fs.open(fst.getPath());
-      for (CharSequence aFit : new FileLineIterable(in, getCharset(), false)) {
-        String[] columns = TAB.split(aFit);
-        log.info("key : {}, value : {}", columns[keyColumn], columns[valueColumn]);
-        String key = columns[keyColumn];
-        String value = columns[valueColumn];
-        writer.write(getPrefix() + key, value);
-      }
-    }
-  }
-}
diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromDirectory.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromDirectory.java
index c62526bf..882ef7ea 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromDirectory.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromDirectory.java
@@ -19,7 +19,7 @@
 
 import java.io.IOException;
 import java.lang.reflect.Constructor;
-import java.lang.reflect.InvocationTargetException;
+import java.nio.charset.Charset;
 import java.util.Map;
 
 import com.google.common.collect.Maps;
@@ -45,41 +45,9 @@
   private static final String PREFIX_ADDITION_FILTER = PrefixAdditionFilter.class.getName();
   
   private static final String[] CHUNK_SIZE_OPTION = {"chunkSize", "chunk"};
-  static final String[] FILE_FILTER_CLASS_OPTION = {"fileFilterClass","filter"};
+  private static final String[] FILE_FILTER_CLASS_OPTION = {"fileFilterClass","filter"};
   private static final String[] KEY_PREFIX_OPTION = {"keyPrefix", "prefix"};
-  static final String[] CHARSET_OPTION = {"charset", "c"};
-
-  public static void run(Configuration conf,
-                         String keyPrefix,
-                         Map<String, String> options,
-                         Path input,
-                         Path output)
-    throws InstantiationException, IllegalAccessException, InvocationTargetException, IOException,
-           NoSuchMethodException, ClassNotFoundException {
-    FileSystem fs = FileSystem.get(input.toUri(), conf);
-    ChunkedWriter writer = new ChunkedWriter(conf, Integer.parseInt(options.get(CHUNK_SIZE_OPTION[0])), output);
-
-    try {
-      SequenceFilesFromDirectoryFilter pathFilter;
-      String fileFilterClassName = options.get(FILE_FILTER_CLASS_OPTION[0]);
-      if (PrefixAdditionFilter.class.getName().equals(fileFilterClassName)) {
-        pathFilter = new PrefixAdditionFilter(conf, keyPrefix, options, writer, fs);
-      } else {
-        Class<? extends SequenceFilesFromDirectoryFilter> pathFilterClass =
-            Class.forName(fileFilterClassName).asSubclass(SequenceFilesFromDirectoryFilter.class);
-        Constructor<? extends SequenceFilesFromDirectoryFilter> constructor =
-            pathFilterClass.getConstructor(Configuration.class,
-                                           String.class,
-                                           Map.class,
-                                           ChunkedWriter.class,
-                                           FileSystem.class);
-        pathFilter = constructor.newInstance(conf, keyPrefix, options, writer, fs);
-      }
-      fs.listStatus(input, pathFilter);
-    } finally {
-      Closeables.closeQuietly(writer);
-    }
-  }
+  private static final String[] CHARSET_OPTION = {"charset", "c"};
   
   public static void main(String[] args) throws Exception {
     ToolRunner.run(new SequenceFilesFromDirectory(), args);
@@ -89,9 +57,7 @@ public static void main(String[] args) throws Exception {
    * callback main after processing hadoop parameters
    */
   @Override
-  public int run(String[] args)
-    throws IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException,
-           InvocationTargetException {
+  public int run(String[] args) throws Exception {
     addOptions();    
     
     if (parseArguments(args) == null) {
@@ -107,7 +73,32 @@ public int run(String[] args)
     }
     String keyPrefix = getOption(KEY_PREFIX_OPTION[0]);
 
-    run(getConf(), keyPrefix, options, input, output);
+    Charset charset = Charset.forName(getOption(CHARSET_OPTION[0]));
+    Configuration conf = getConf();
+    FileSystem fs = FileSystem.get(input.toUri(), conf);
+    ChunkedWriter writer = new ChunkedWriter(conf, Integer.parseInt(options.get(CHUNK_SIZE_OPTION[0])), output);
+
+    try {
+      SequenceFilesFromDirectoryFilter pathFilter;
+      String fileFilterClassName = options.get(FILE_FILTER_CLASS_OPTION[0]);
+      if (PrefixAdditionFilter.class.getName().equals(fileFilterClassName)) {
+        pathFilter = new PrefixAdditionFilter(conf, keyPrefix, options, writer, charset, fs);
+      } else {
+        Class<? extends SequenceFilesFromDirectoryFilter> pathFilterClass =
+            Class.forName(fileFilterClassName).asSubclass(SequenceFilesFromDirectoryFilter.class);
+        Constructor<? extends SequenceFilesFromDirectoryFilter> constructor =
+            pathFilterClass.getConstructor(Configuration.class,
+                                           String.class,
+                                           Map.class,
+                                           ChunkedWriter.class,
+                                           Charset.class,
+                                           FileSystem.class);
+        pathFilter = constructor.newInstance(conf, keyPrefix, options, writer, fs);
+      }
+      fs.listStatus(input, pathFilter);
+    } finally {
+      Closeables.closeQuietly(writer);
+    }
     return 0;
   }
 
diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromDirectoryFilter.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromDirectoryFilter.java
index ab6ecf0c..371d60be 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromDirectoryFilter.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromDirectoryFilter.java
@@ -32,7 +32,7 @@
 /**
  * Implement this interface if you wish to extend SequenceFilesFromDirectory with your own parsing logic.
  */
-public abstract class SequenceFilesFromDirectoryFilter extends SequenceFilesFromDirectory implements PathFilter {
+public abstract class SequenceFilesFromDirectoryFilter implements PathFilter {
   private static final Logger log = LoggerFactory.getLogger(SequenceFilesFromDirectoryFilter.class);
 
   private final String prefix;
@@ -40,26 +40,20 @@
   private final Charset charset;
   private final FileSystem fs;
   private final Map<String, String> options;
-
-  protected SequenceFilesFromDirectoryFilter() {
-    this.prefix = null;
-    this.writer = null;
-    this.charset = null;
-    this.fs = null;
-    this.options = null;
-  }
+  private final Configuration conf;
 
   protected SequenceFilesFromDirectoryFilter(Configuration conf,
                                              String keyPrefix,
                                              Map<String, String> options,
                                              ChunkedWriter writer,
+                                             Charset charset,
                                              FileSystem fs) {
     this.prefix = keyPrefix;
     this.writer = writer;
-    this.charset = Charset.forName(options.get(SequenceFilesFromDirectory.CHARSET_OPTION[0]));
+    this.charset = charset;
     this.fs = fs;
     this.options = options;
-    setConf(conf);
+    this.conf = conf;
   }
 
   protected final String getPrefix() {
@@ -82,6 +76,10 @@ protected final FileSystem getFs() {
     return options;
   }
 
+  protected final Configuration getConf() {
+    return conf;
+  }
+
   @Override
   public final boolean accept(Path current) {
     log.debug("CURRENT: {}", current.getName());
diff --git a/mahout/trunk/integration/src/test/java/org/apache/mahout/text/TestSequenceFilesFromDirectory.java b/mahout/trunk/integration/src/test/java/org/apache/mahout/text/TestSequenceFilesFromDirectory.java
index cb2e063d..051d6b49 100644
--- a/mahout/trunk/integration/src/test/java/org/apache/mahout/text/TestSequenceFilesFromDirectory.java
+++ b/mahout/trunk/integration/src/test/java/org/apache/mahout/text/TestSequenceFilesFromDirectory.java
@@ -43,10 +43,6 @@
       {"test3", "This is the third text."}
   };
 
-  private enum ParserType {
-    TEXT, CSV
-  }
-  
   /**
    * Story converting text files to SequenceFile
    */
@@ -66,46 +62,15 @@ public void testSequenceFileFromDirectoryBasic() throws Exception {
     // prepare input files
     createFilesFromArrays(conf, inputDir, DATA1);
 
-    String prefix = "UID";
-    SequenceFilesFromDirectory.main(new String[] {"--input",
-        inputDir.toString(), "--output", outputDir.toString(), "--chunkSize",
-        "64", "--charset",
-        Charsets.UTF_8.name(), "--keyPrefix", prefix});
+    SequenceFilesFromDirectory.main(new String[] {
+        "--input", inputDir.toString(),
+        "--output", outputDir.toString(),
+        "--chunkSize", "64",
+        "--charset", Charsets.UTF_8.name(),
+        "--keyPrefix", "UID"});
     
     // check output chunk files
-    checkChunkFiles(conf, outputDir, DATA1, prefix, ParserType.TEXT);
-  }
-
-  /**
-   * Story converting a TSV file to SequenceFile
-   */
-  @Test
-  public void testSequnceFileFromDirectoryTsv() throws Exception {
-    Configuration conf = new Configuration();
-    FileSystem fs = FileSystem.get(conf);
-
-    // create
-    Path tmpDir = this.getTestTempDirPath();
-    Path inputDir = new Path(tmpDir, "inputDir");
-    fs.mkdirs(inputDir);
-    Path outputDir = new Path(tmpDir, "outputDir");
-    
-    // prepare input TSV file
-    createTsvFilesFromArrays(conf, inputDir, DATA1);
-    
-    // convert it to SequenceFile
-    String prefix = "UID";
-    int chunkSizeInMB = 64;
-    int keyColumn = 0;
-    int valueColumn = 1;
-    SequenceFilesFromCsvFilter.main(new String[] {"--input", inputDir.toString(),
-        "--output", outputDir.toString(), "--charset", Charsets.UTF_8.name(),
-        "--chunkSize", Integer.toString(chunkSizeInMB), "--keyPrefix", prefix,
-        "--keyColumn", Integer.toString(keyColumn), "--valueColumn",
-        Integer.toString(valueColumn)});
-    
-    // check output chunk files
-    checkChunkFiles(conf, outputDir, DATA1, prefix, ParserType.CSV);
+    checkChunkFiles(conf, outputDir, DATA1, "UID");
   }
 
   private static void createFilesFromArrays(Configuration conf, Path inputDir, String[][] data) throws IOException {
@@ -120,23 +85,10 @@ private static void createFilesFromArrays(Configuration conf, Path inputDir, Str
     }
   }
 
-  private static void createTsvFilesFromArrays(Configuration conf, Path inputDir, String[][] data) throws IOException {
-    FileSystem fs = FileSystem.get(conf);
-    OutputStreamWriter writer = new OutputStreamWriter(fs.create(new Path(inputDir, "inputTsvFile")));
-    try {
-      for (String[] aData : data) {
-        writer.write(aData[0] + '\t' + aData[1] + '\n');
-      }
-    } finally {
-      Closeables.closeQuietly(writer);
-    }
-  }
-
   private static void checkChunkFiles(Configuration conf,
                                       Path outputDir,
                                       String[][] data,
-                                      String prefix,
-                                      ParserType inputType) throws IOException {
+                                      String prefix) throws IOException {
     FileSystem fs = FileSystem.get(conf);
     
     // output exists?
@@ -147,12 +99,8 @@ private static void checkChunkFiles(Configuration conf,
 
     Map<String,String> fileToData = Maps.newHashMap();
     for (String[] aData : data) {
-      if (inputType == ParserType.CSV) {
-        fileToData.put(prefix + aData[0], aData[1]);
-      } else {
         fileToData.put(prefix + Path.SEPARATOR + aData[0], aData[1]);
       }
-    }
 
     // read a chunk to check content
     SequenceFileIterator<Text,Text> iterator = new SequenceFileIterator<Text,Text>(fstats[0].getPath(), true, conf);
