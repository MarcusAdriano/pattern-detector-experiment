diff --git a/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ReleaseCompileLocksTest.java b/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ReleaseCompileLocksTest.java
index 6466cae0..aa03c427 100644
--- a/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ReleaseCompileLocksTest.java
+++ b/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ReleaseCompileLocksTest.java
@@ -69,6 +69,12 @@ protected void setUp() throws SQLException {
 	    	"'org.apache.derbyTesting.functionTests.util.StaticInitializers." +
 	    	"InsertInStaticInitializer.getANumber' no sql");
         
+        stmt.execute("CREATE PROCEDURE WAIT_FOR_POST_COMMIT() "
+                + "LANGUAGE JAVA EXTERNAL NAME "
+                + "'org.apache.derbyTesting.functionTests.util."
+                + "T_Access.waitForPostCommitToFinish' "
+                + "PARAMETER STYLE JAVA");
+
         stmt.close();
         commit();
 	}
@@ -117,7 +123,7 @@ public void testReleaseCompileLocks() throws Exception {
             		"CAST(tablename AS VARCHAR(128)) = 'SYSCONGLOMERATES'"), new String[][] {{"1"}});
     			
 
-                JDBC.assertEmpty(stmt.executeQuery("select TYPE, MODE, TABLENAME, LOCKNAME, STATE from syscs_diag.lock_table order by 1"));
+        assertNoLocks(stmt);
 		commit();
 
 		stmt.execute("drop table t1");
@@ -137,24 +143,25 @@ public void testReleaseCompileLocks() throws Exception {
         		"select count(*) from sys.systables where " +
         		"CAST(tablename AS VARCHAR(128)) = 'SYSCONGLOMERATES'"), new String[][] {{"1"}});
 			
-                JDBC.assertEmpty(stmt.executeQuery("select TYPE, MODE, TABLENAME, LOCKNAME, STATE from syscs_diag.lock_table order by 1"));
+        assertNoLocks(stmt);
 
 		JDBC.assertEmpty(stmt.executeQuery("select * from t1"));
 		stmt.execute("drop table t1");
 		commit();
 	
-		JDBC.assertEmpty(stmt.executeQuery("select TYPE, MODE, TABLENAME, LOCKNAME, STATE from syscs_diag.lock_table order by 1"));
+        assertNoLocks(stmt);
 		commit();
 
 		stmt.execute("create table test_tab (x int)");
 		stmt.executeUpdate("insert into test_tab values (1)");
 		commit();
 
-		JDBC.assertSingleValueResultSet(stmt.executeQuery("select count(*) from syscs_diag.lock_table"), "0");
+        assertNoLocks(stmt);
 		JDBC.assertSingleValueResultSet(stmt.executeQuery("select count(*) from sys.sysviews"), "0");
-		JDBC.assertSingleValueResultSet(stmt.executeQuery("select count(*) from syscs_diag.lock_table"), "0");
+        assertNoLocks(stmt);
 		stmt.execute("insert into test_tab values (2)");
 
+        waitForPostCommit(stmt);
                 ResultSet rs = stmt.executeQuery("select TYPE, MODE, TABLENAME, LOCKNAME, STATE from syscs_diag.lock_table order by 1");
 		
 		String expectedValues[][] = {{"ROW", "X", "TEST_TAB", "(1,8)", "GRANT" }, {"TABLE", "IX", "TEST_TAB", "Tablelock","GRANT"}};
@@ -188,9 +195,10 @@ public void testReleaseCompileLocks() throws Exception {
 		ps.setCursorName("cursor1");
 		ps.setInt(1, 1);
 
-		JDBC.assertSingleValueResultSet(stmt.executeQuery("select count(*) from syscs_diag.lock_table"), "0");
+        assertNoLocks(stmt);
 		ps.executeUpdate();
 		
+        waitForPostCommit(stmt);
 		rs = stmt.executeQuery("select TYPE, MODE, TABLENAME, LOCKNAME, STATE from syscs_diag.lock_table order by 1");
 		String expectedValues1[][] = {{"ROW", "X", "TEST_TAB", "(1,7)", "GRANT" }, {"TABLE", "IX", "TEST_TAB", "Tablelock","GRANT"}};
                 JDBC.assertFullResultSet(rs, expectedValues1);
@@ -204,7 +212,7 @@ public void testReleaseCompileLocks() throws Exception {
 
 		ps = prepareStatement("select * from t where c1 = ? and c2 = ?");
 		ps.setCursorName("ps");
-		JDBC.assertEmpty(stmt.executeQuery("select * from syscs_diag.lock_table"));
+        assertNoLocks(stmt);
 
 		
 		stmt.execute("create table x(c1 int)");
@@ -213,7 +221,7 @@ public void testReleaseCompileLocks() throws Exception {
 
 		ps = prepareStatement("insert into t values (3,2)");
 		ps.setCursorName("pi");
-		JDBC.assertEmpty(stmt.executeQuery("select * from syscs_diag.lock_table"));
+        assertNoLocks(stmt);
 		commit();
 
 
@@ -223,7 +231,7 @@ public void testReleaseCompileLocks() throws Exception {
 
 		ps = prepareStatement("update t set c2 = c1, c1 = c2");
 		ps.setCursorName("p1");
-		JDBC.assertEmpty(stmt.executeQuery("select * from syscs_diag.lock_table"));
+        assertNoLocks(stmt);
 		commit();
 
 		
@@ -233,7 +241,7 @@ public void testReleaseCompileLocks() throws Exception {
 
 		ps = prepareStatement("delete from t");
 		ps.setCursorName("p1");
-		JDBC.assertEmpty(stmt.executeQuery("select * from syscs_diag.lock_table"));
+        assertNoLocks(stmt);
 		commit();
 		
 		stmt.execute("create trigger update_of_t after update on t for each row values 2");
@@ -242,7 +250,7 @@ public void testReleaseCompileLocks() throws Exception {
 	
 		ps = prepareStatement("update t set c2=2 where c1=2");
 		ps.setCursorName("pu");
-		JDBC.assertEmpty(stmt.executeQuery("select * from syscs_diag.lock_table"));
+        assertNoLocks(stmt);
 		commit();
 
 		rs.close();
@@ -250,4 +258,25 @@ public void testReleaseCompileLocks() throws Exception {
 		stmt.close();
        }
        
+    /**
+     * Assert that the lock table is empty.
+     * @param stmt the statement to use for querying the lock table
+     */
+    private void assertNoLocks(Statement stmt) throws SQLException {
+        // First make sure there are no locks held by the post-commit worker
+        // thread (DERBY-3258).
+        waitForPostCommit(stmt);
+
+        // Then verify that the lock table is empty.
+        JDBC.assertEmpty(
+                stmt.executeQuery("SELECT * FROM SYSCS_DIAG.LOCK_TABLE"));
+    }
+
+    /**
+     * Wait for post commit to finish.
+     * @param stmt the statement to use for invoking WAIT_FOR_POST_COMMIT
+     */
+    private void waitForPostCommit(Statement stmt) throws SQLException {
+        stmt.execute("CALL WAIT_FOR_POST_COMMIT()");
+    }
 }
