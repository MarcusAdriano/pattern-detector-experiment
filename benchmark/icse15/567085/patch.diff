diff --git a/lucene/java/trunk/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java b/lucene/java/trunk/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java
index c930a8db..683849e3 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/analysis/ISOLatin1AccentFilter.java
@@ -35,62 +35,83 @@ public ISOLatin1AccentFilter(TokenStream input) {
   public final Token next(Token result) throws java.io.IOException {
     result = input.next(result);
     if (result != null) {
-      outputPos = 0;
-      removeAccents(result.termBuffer(), result.termLength());
+      final char[] buffer = result.termBuffer();
+      final int length = result.termLength();
+      // If no characters actually require rewriting then we
+      // just return token as-is:
+      for(int i=0;i<length;i++) {
+        final char c = buffer[i];
+        if (c >= '\u00c0' && c <= '\u0178') {
+          removeAccents(buffer, length);
       result.setTermBuffer(output, 0, outputPos);
+          break;
+        }
+      }
       return result;
     } else
       return null;
   }
 
-  private final void addChar(char c) {
-    if (outputPos == output.length) {
-      char[] newArray = new char[2*output.length];
-      System.arraycopy(output, 0, newArray, 0, output.length);
-      output = newArray;
-    }
-    output[outputPos++] = c;
-  }
-
   /**
    * To replace accented characters in a String by unaccented equivalents.
    */
   public final void removeAccents(char[] input, int length) {
+
+    // Worst-case length required:
+    final int maxSizeNeeded = 2*length;
+
+    int size = output.length;
+    while (size < maxSizeNeeded)
+      size *= 2;
+
+    if (size != output.length)
+      output = new char[size];
+
+    outputPos = 0;
+
     int pos = 0;
+
     for (int i=0; i<length; i++, pos++) {
-      switch (input[pos]) {
+      final char c = input[pos];
+
+      // Quick test: if it's not in range then just keep
+      // current character
+      if (c < '\u00c0')
+        output[outputPos++] = c;
+      else {
+        switch (c) {
       case '\u00C0' : // À
       case '\u00C1' : // Á
       case '\u00C2' : // Â
       case '\u00C3' : // Ã
       case '\u00C4' : // Ä
       case '\u00C5' : // Å
-        addChar('A');
+          output[outputPos++] = 'A';
         break;
       case '\u00C6' : // Æ
-        addChar('A');
-        addChar('E');
+          output[outputPos++] = 'A';
+          output[outputPos++] = 'E';
         break;
       case '\u00C7' : // Ç
-        addChar('C');
+          output[outputPos++] = 'C';
         break;
       case '\u00C8' : // È
       case '\u00C9' : // É
       case '\u00CA' : // Ê
       case '\u00CB' : // Ë
-        addChar('E');
+          output[outputPos++] = 'E';
         break;
       case '\u00CC' : // Ì
       case '\u00CD' : // Í
       case '\u00CE' : // Î
       case '\u00CF' : // Ï
-        addChar('I');
+          output[outputPos++] = 'I';
         break;
       case '\u00D0' : // Ð
-        addChar('D');
+          output[outputPos++] = 'D';
         break;
       case '\u00D1' : // Ñ
-        addChar('N');
+          output[outputPos++] = 'N';
         break;
       case '\u00D2' : // Ò
       case '\u00D3' : // Ó
@@ -98,25 +119,25 @@ public final void removeAccents(char[] input, int length) {
       case '\u00D5' : // Õ
       case '\u00D6' : // Ö
       case '\u00D8' : // Ø
-        addChar('O');
+          output[outputPos++] = 'O';
         break;
       case '\u0152' : // Œ
-        addChar('O');
-        addChar('E');
+          output[outputPos++] = 'O';
+          output[outputPos++] = 'E';
         break;
       case '\u00DE' : // Þ
-        addChar('T');
-        addChar('H');
+          output[outputPos++] = 'T';
+          output[outputPos++] = 'H';
         break;
       case '\u00D9' : // Ù
       case '\u00DA' : // Ú
       case '\u00DB' : // Û
       case '\u00DC' : // Ü
-        addChar('U');
+          output[outputPos++] = 'U';
         break;
       case '\u00DD' : // Ý
       case '\u0178' : // Ÿ
-        addChar('Y');
+          output[outputPos++] = 'Y';
         break;
       case '\u00E0' : // à
       case '\u00E1' : // á
@@ -124,32 +145,32 @@ public final void removeAccents(char[] input, int length) {
       case '\u00E3' : // ã
       case '\u00E4' : // ä
       case '\u00E5' : // å
-        addChar('a');
+          output[outputPos++] = 'a';
         break;
       case '\u00E6' : // æ
-        addChar('a');
-        addChar('e');
+          output[outputPos++] = 'a';
+          output[outputPos++] = 'e';
         break;
       case '\u00E7' : // ç
-        addChar('c');
+          output[outputPos++] = 'c';
         break;
       case '\u00E8' : // è
       case '\u00E9' : // é
       case '\u00EA' : // ê
       case '\u00EB' : // ë
-        addChar('e');
+          output[outputPos++] = 'e';
         break;
       case '\u00EC' : // ì
       case '\u00ED' : // í
       case '\u00EE' : // î
       case '\u00EF' : // ï
-        addChar('i');
+          output[outputPos++] = 'i';
         break;
       case '\u00F0' : // ð
-        addChar('d');
+          output[outputPos++] = 'd';
         break;
       case '\u00F1' : // ñ
-        addChar('n');
+          output[outputPos++] = 'n';
         break;
       case '\u00F2' : // ò
       case '\u00F3' : // ó
@@ -157,34 +178,35 @@ public final void removeAccents(char[] input, int length) {
       case '\u00F5' : // õ
       case '\u00F6' : // ö
       case '\u00F8' : // ø
-        addChar('o');
+          output[outputPos++] = 'o';
         break;
       case '\u0153' : // œ
-        addChar('o');
-        addChar('e');
+          output[outputPos++] = 'o';
+          output[outputPos++] = 'e';
         break;
       case '\u00DF' : // ß
-        addChar('s');
-        addChar('s');
+          output[outputPos++] = 's';
+          output[outputPos++] = 's';
         break;
       case '\u00FE' : // þ
-        addChar('t');
-        addChar('h');
+          output[outputPos++] = 't';
+          output[outputPos++] = 'h';
         break;
       case '\u00F9' : // ù
       case '\u00FA' : // ú
       case '\u00FB' : // û
       case '\u00FC' : // ü
-        addChar('u');
+          output[outputPos++] = 'u';
         break;
       case '\u00FD' : // ý
       case '\u00FF' : // ÿ
-        addChar('y');
+          output[outputPos++] = 'y';
         break;
       default :
-        addChar(input[pos]);
+          output[outputPos++] = c;
         break;
       }
     }
   }
+  }
 }
