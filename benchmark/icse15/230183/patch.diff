diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassFactory.java
index fd16b84b..bc94af6c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassFactory.java
@@ -51,7 +51,8 @@ public GeneratedClass loadGeneratedClass(String fullyQualifiedName, ByteArray cl
 	/**
 		Load an application class, or a class that is potentially an application class.
 
-		@exception ClassNotFoundException Class cannot be found
+		@exception ClassNotFoundException Class cannot be found, or
+		a SecurityException or LinkageException was thrown loading the class.
 	*/
 	public Class loadApplicationClass(String className)
 		throws ClassNotFoundException;
@@ -59,7 +60,8 @@ public Class loadApplicationClass(String className)
 	/**
 		Load an application class, or a class that is potentially an application class.
 
-		@exception ClassNotFoundException Class cannot be found
+		@exception ClassNotFoundException Class cannot be found, or
+		a SecurityException or LinkageException was thrown loading the class.
 	*/
 	public Class loadApplicationClass(ObjectStreamClass classDescriptor)
 		throws ClassNotFoundException;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java
index 79d5d16f..69195615 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java
@@ -794,7 +794,8 @@ private Member resolveMethod(
 		and primitive types.
 		This will attempt to load the class from the application set.
 
-		@exception ClassNotFoundException Class cannot be found.
+		@exception ClassNotFoundException Class cannot be found, or
+		a SecurityException or LinkageException was thrown loading the class.
 	*/
 	public Class getClass(String className) throws ClassNotFoundException {
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/TypeId.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/TypeId.java
index 72c690ed..2bb9d87b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/TypeId.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/TypeId.java
@@ -1267,10 +1267,6 @@ public boolean orderable(ClassFactory cf)
                                 {
                                         orderable = false;
                                 } 
-                                catch (LinkageError le) 
-                                {
-                                        orderable = false;
-                                }
                                 break;
 
                         default:
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/DatabaseClasses.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/DatabaseClasses.java
index 37c9cc89..2270c600 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/DatabaseClasses.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/DatabaseClasses.java
@@ -76,7 +76,7 @@
 	@see org.apache.derby.iapi.services.loader.ClassFactory
 */
 
-public abstract class DatabaseClasses
+abstract class DatabaseClasses
 	implements ClassFactory, ModuleControl
 {
 	/*
@@ -92,7 +92,7 @@
 	** Constructor
 	*/
 
-	public DatabaseClasses() {
+	DatabaseClasses() {
 	}
 
 	/*
@@ -208,6 +208,8 @@ public ClassInspector getClassInspector() {
 	public final Class loadApplicationClass(String className)
 		throws ClassNotFoundException {
 
+		Throwable loadError;
+		try {
 		try {
 			return loadClassNotInDatabaseJar(className);
 		} catch (ClassNotFoundException cnfe) {
@@ -219,11 +221,23 @@ public final Class loadApplicationClass(String className)
 			return c;
 		}
 	}
-
-	Class loadClassNotInDatabaseJar(String className) throws ClassNotFoundException {
-		return Class.forName(className);
+		catch (SecurityException se)
+		{
+			// Thrown if the class has been comprimised in some
+			// way, e.g. modified in a signed jar.
+			loadError = se;	
+		}
+		catch (LinkageError le)
+		{
+			// some error linking the jar, again could
+			// be malicious code inserted into a jar.
+			loadError = le;	
+		}
+		throw new ClassNotFoundException(className + " : " + loadError.getMessage());
 	}
 
+	abstract Class loadClassNotInDatabaseJar(String className)
+		throws ClassNotFoundException;
 
 	public final Class loadApplicationClass(ObjectStreamClass classDescriptor)
 		throws ClassNotFoundException {
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/ReflectClassesJava2.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/ReflectClassesJava2.java
index 34eda72a..09d219eb 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/ReflectClassesJava2.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/reflect/ReflectClassesJava2.java
@@ -31,7 +31,7 @@
 
 	private java.util.HashMap preCompiled;
 
-	private int action;
+	private int action = -1;
 
 	synchronized LoadedGeneratedClass loadGeneratedClassFromData(String fullyQualifiedName, ByteArray classDump) {
 
@@ -62,6 +62,8 @@ synchronized LoadedGeneratedClass loadGeneratedClassFromData(String fullyQualifi
 	}
 
 	public final Object run() {
+
+		try {
 		// SECURITY PERMISSION - MP2
 		switch (action) {
 		case 1:
@@ -71,12 +73,16 @@ public final Object run() {
 		default:
 			return null;
 		}
+		} finally {
+			action = -1;
+		}
+		
 	}
 
-	synchronized Class loadClassNotInDatabaseJar(String name) throws ClassNotFoundException {
+	Class loadClassNotInDatabaseJar(String name) throws ClassNotFoundException {
 		
 		Class foundClass = null;
-		action = 2;
+		
 	    // We may have two problems with calling  getContextClassLoader()
 	    // when trying to find our own classes for aggregates.
 	    // 1) If using the URLClassLoader a ClassNotFoundException may be 
@@ -88,8 +94,12 @@ synchronized Class loadClassNotInDatabaseJar(String name) throws ClassNotFoundEx
 	    // (the classLoader that loaded Cloudscape). 
 	    // So we call Class.forName to ensure that we find the class.
         try {
-            ClassLoader cl = ((ClassLoader)
+        	ClassLoader cl;
+        	synchronized(this) {
+        	  action = 2;
+              cl = ((ClassLoader)
 			      java.security.AccessController.doPrivileged(this));
+        	}
 			
 			foundClass = (cl != null) ?  cl.loadClass(name) 
 				      :Class.forName(name);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java
index 3430dcaf..86cf5bf8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnDefinitionNode.java
@@ -306,8 +306,6 @@ public void checkUserType(TableDescriptor td)
 			foundMatch = classInspector.accessible(columnTypeName);
 		} catch (ClassNotFoundException cnfe) {
 			reason = cnfe;
-		} catch (LinkageError le) {
-			reason = le;
 		}
 
 		if (!foundMatch)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
index 87ac5d02..8b067b46 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
@@ -1559,8 +1559,6 @@ String verifyClassExist(String javaClassName, boolean convertCase)
 		} catch (ClassNotFoundException cnfe) {
 
 			reason = cnfe;
-		} catch (LinkageError le) {
-			reason = le;
 		}
 
 		if (!foundMatch)
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CreateAliasConstantAction.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CreateAliasConstantAction.java
index 618882db..c9696884 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CreateAliasConstantAction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CreateAliasConstantAction.java
@@ -211,7 +211,7 @@ public void	executeConstantAction( Activation activation )
 				// Does the class exist?
 				realClass = cf.loadApplicationClass(checkClassName);
 			}
-			catch (Throwable t)
+			catch (ClassNotFoundException t)
 			{
 				throw StandardException.newException(SQLState.LANG_TYPE_DOESNT_EXIST2, t, checkClassName);
 			}
