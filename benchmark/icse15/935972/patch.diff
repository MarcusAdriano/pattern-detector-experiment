diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java
index 037aac22..0d7677fc 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java
@@ -18,12 +18,14 @@
 
 package org.apache.cassandra.db.migration;
 
+import org.apache.cassandra.concurrent.StageManager;
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.config.KSMetaData;
 import org.apache.cassandra.db.ColumnFamily;
 import org.apache.cassandra.db.ColumnFamilyStore;
 import org.apache.cassandra.db.CompactionManager;
 import org.apache.cassandra.db.DecoratedKey;
+import org.apache.cassandra.db.DefsTable;
 import org.apache.cassandra.db.IColumn;
 import org.apache.cassandra.db.RowMutation;
 import org.apache.cassandra.db.Table;
@@ -38,6 +40,8 @@
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.utils.UUIDGen;
 import static org.apache.cassandra.utils.FBUtilities.UTF8;
+
+import org.apache.commons.lang.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -189,6 +193,15 @@ static RowMutation makeDefinitionMutation(KSMetaData add, KSMetaData remove, UUI
             rm.delete(new QueryPath(SCHEMA_CF, null, remove.name.getBytes()), System.currentTimeMillis());
         if (add != null)
             rm.add(new QueryPath(SCHEMA_CF, null, add.name.getBytes()), KSMetaData.serialize(add), now);
+        
+        // include all other key spaces.
+        for (String tableName : DatabaseDescriptor.getNonSystemTables())
+        {
+            if (add != null && add.name.equals(tableName) || remove != null && remove.name.equals(tableName))
+                continue;
+            KSMetaData ksm = DatabaseDescriptor.getTableDefinition(tableName);
+            rm.add(new QueryPath(SCHEMA_CF, null, ksm.name.getBytes()), KSMetaData.serialize(ksm), now);
+        }
         return rm;
     }
     
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java
index 2b0410c7..fd841008 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/config/DatabaseDescriptorTest.java
@@ -19,10 +19,16 @@
 package org.apache.cassandra.config;
 
 import static org.junit.Assert.assertNotNull;
+
+import org.apache.cassandra.db.DefsTable;
+import org.apache.cassandra.db.migration.AddKeyspace;
+import org.apache.cassandra.db.migration.Migration;
+import org.apache.cassandra.locator.RackAwareStrategy;
 import org.junit.Test;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
+import java.util.UUID;
 
 public class DatabaseDescriptorTest
 {
@@ -60,4 +66,32 @@ public void testKSMetaDataSerialization() throws IOException
             assert ksmDupe.equals(ksm);
         }
     }
+    
+    // this came as a result of CASSANDRA-995
+    @Test
+    public void testTransKsMigration() throws IOException, ConfigurationException
+    {
+        DatabaseDescriptor.loadSchemas();
+        assert DatabaseDescriptor.getNonSystemTables().size() == 0;
+        
+        // add a few.
+        AddKeyspace ks0 = new AddKeyspace(new KSMetaData("ks0", RackAwareStrategy.class, 3));
+        ks0.apply();
+        AddKeyspace ks1 = new AddKeyspace(new KSMetaData("ks1", RackAwareStrategy.class, 3));
+        ks1.apply();
+        
+        assert DatabaseDescriptor.getTableDefinition("ks0") != null;
+        assert DatabaseDescriptor.getTableDefinition("ks1") != null;
+        
+        DatabaseDescriptor.clearTableDefinition(DatabaseDescriptor.getTableDefinition("ks0"), new UUID(4096, 0));
+        DatabaseDescriptor.clearTableDefinition(DatabaseDescriptor.getTableDefinition("ks1"), new UUID(4096, 0));
+        
+        assert DatabaseDescriptor.getTableDefinition("ks0") == null;
+        assert DatabaseDescriptor.getTableDefinition("ks1") == null;
+        
+        DatabaseDescriptor.loadSchemas();
+        
+        assert DatabaseDescriptor.getTableDefinition("ks0") != null;
+        assert DatabaseDescriptor.getTableDefinition("ks1") != null;
+    }
 }
