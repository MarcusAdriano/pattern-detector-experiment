diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java b/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java
index 6444a552..89c4614e 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java
@@ -92,11 +92,6 @@ public Column getSubColumn(byte[] columnName)
         throw new UnsupportedOperationException("This operation is unsupported on simple columns.");
     }
 
-    public int getObjectCount()
-    {
-        return 1;
-    }
-
     public IClock clock()
     {
         return clock;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
index 1d41171b..7df11755 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
@@ -154,13 +154,7 @@ public void addAll(ColumnFamily cf)
 
     int getColumnCount()
     {
-        if (!isSuper())
             return columns.size();
-
-        int count = 0;
-        for (IColumn column: columns.values())
-            count += column.getObjectCount();
-        return count;
     }
 
     public boolean isSuper()
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnIndexer.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnIndexer.java
index 84de5388..f7e9b89d 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnIndexer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnIndexer.java
@@ -58,11 +58,7 @@ public static void serialize(ColumnFamily columnFamily, DataOutput dos)
     public static void serializeInternal(ColumnFamily columnFamily, DataOutput dos) throws IOException
     {
         Collection<IColumn> columns = columnFamily.getSortedColumns();
-        int columnCount = 0;
-        for (IColumn column : columns)
-        {
-            columnCount += column.getObjectCount();
-        }
+        int columnCount = columns.size();
 
         BloomFilter bf = BloomFilter.getFilter(columnCount, 4);
 
@@ -75,30 +71,15 @@ public static void serializeInternal(ColumnFamily columnFamily, DataOutput dos)
             return;
         }
 
-        /*
-         * Maintains a list of ColumnIndexInfo objects for the columns in this
-         * column family. The key is the column name and the position is the
-         * relative offset of that column name from the start of the list.
-         * We do this so that we don't read all the columns into memory.
-        */
+        // update bloom filter and create a list of IndexInfo objects marking the first and last column
+        // in each block of ColumnIndexSize
         List<IndexHelper.IndexInfo> indexList = new ArrayList<IndexHelper.IndexInfo>();
-
         int endPosition = 0, startPosition = -1;
         int indexSizeInBytes = 0;
         IColumn lastColumn = null, firstColumn = null;
-        /* column offsets at the right thresholds into the index map. */
         for (IColumn column : columns)
         {
             bf.add(column.name());
-            /* If this is SuperColumn type Column Family we need to get the subColumns too. */
-            if (column instanceof SuperColumn)
-            {
-                Collection<IColumn> subColumns = column.getSubColumns();
-                for (IColumn subColumn : subColumns)
-                {
-                    bf.add(subColumn.name());
-                }
-            }
 
             if (firstColumn == null)
             {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/IColumn.java b/cassandra/trunk/src/java/org/apache/cassandra/db/IColumn.java
index 5c3fdaa5..6f98bc96 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/IColumn.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/IColumn.java
@@ -40,7 +40,6 @@
     public IColumn getSubColumn(byte[] columnName);
     public void addColumn(IColumn column);
     public IColumn diff(IColumn column);
-    public int getObjectCount();
     public void updateDigest(MessageDigest digest);
     public int getLocalDeletionTime(); // for tombstone GC, so int is sufficient granularity
     public String getString(AbstractType comparator);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java b/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java
index ec029c2e..89e535fa 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java
@@ -203,11 +203,6 @@ public void putColumn(IColumn column)
         FBUtilities.atomicSetMax(markedForDeleteAt, column.getMarkedForDeleteAt());
     }
 
-    public int getObjectCount()
-    {
-    	return 1 + columns_.size();
-    }
-
     public IClock getMarkedForDeleteAt()
     {
         return markedForDeleteAt.get();
