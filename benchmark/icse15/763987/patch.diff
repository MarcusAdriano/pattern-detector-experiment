diff --git a/db/derby/code/branches/10.5/java/drda/org/apache/derby/impl/drda/DssTrace.java b/db/derby/code/branches/10.5/java/drda/org/apache/derby/impl/drda/DssTrace.java
index 4489c6ed..f17c721a 100644
--- a/db/derby/code/branches/10.5/java/drda/org/apache/derby/impl/drda/DssTrace.java
+++ b/db/derby/code/branches/10.5/java/drda/org/apache/derby/impl/drda/DssTrace.java
@@ -21,6 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.impl.drda;
 
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.security.AccessController;
@@ -173,33 +174,59 @@ protected void startComBufferTrace (final String fileName) throws Exception
     synchronized (comBufferSync) {
         // Only start the trace if it is off.
         if (comBufferTraceOn == false) {
+            // Make up to two attempts to create the trace file.
+            // First just try to make it. Then if we get a FileNotFoundException
+            // try making the directory and then retry the create.
+            // We don't try making the directory first because it would require
+            // extra permissions if the directory already exists. DERBY-4128
+            for (int attempt=0; attempt <2; attempt++) {
             try {
-                // Attempt to make the trace directory if it does not exist.
-                // If we can't create the directory the exception will occur 
-                // when trying to create the trace file.
+                    // The writer will be buffered for effeciency.
+                    comBufferWriter =  ((PrintWriter)AccessController.doPrivileged(
+                            new PrivilegedExceptionAction() {
+                                public Object run() throws SecurityException, IOException {
+                                    return new  PrintWriter (new java.io.BufferedWriter (new java.io.FileWriter (fileName), 4096));
+                                }
+                            }));
+                    // If we successfully made the file. break out here and don't retry
+                    break;
+                } catch (PrivilegedActionException pae) {
+                    Exception e = pae.getException();
+                    // If we got a FileNotFoundException on the first attempt,
+                    // it is likely that the directory did not exist. 
+                    //We will try to make it.
+                    if (attempt == 0 && (e instanceof FileNotFoundException)) {
                 final File traceDirectory = new File(fileName).getParentFile();
                 if (traceDirectory != null) {
                     AccessController.doPrivileged(
                             new PrivilegedAction() {
                                 public Object run() {
+                                            // DERBY-4128: First try to create the
+                                            // directory with mkdir(), as that doesn't
+                                            // require read permission for the parent
+                                            // directory. It will only succeed if the
+                                            // parent directory exists. If mkdir()
+                                            // fails, retry with mkdirs(), which will
+                                            // create the parent directories as needed,
+                                            // but which also requires that read
+                                            // permission for the parent directory
+                                            // has been granted.
+                                            boolean created = traceDirectory.mkdir();
+                                            if (!created) {
                                     traceDirectory.mkdirs();
+                                            }
                                     return null;
                                 }
                             });
 
                 }
-                // The writer will be buffered for effeciency.
-                comBufferWriter =  ((PrintWriter)AccessController.doPrivileged(
-                            new PrivilegedExceptionAction() {
-                                public Object run() throws SecurityException, IOException {
-                                    return new  PrintWriter (new java.io.BufferedWriter (new java.io.FileWriter (fileName), 4096));
+                    } else {
+                        // This is our second attempt or we got some other exception besides
+                        // FileNotFoundException. Just throw the exception.
+                        throw e;
+                    }
                                 }
-                            }));
-            } catch (PrivilegedActionException pae) {
-               throw  pae.getException();
-               
             }
-          
           // Turn on the trace flag.
           comBufferTraceOn = true;
           // initialize the codepoint name table if it is null.
