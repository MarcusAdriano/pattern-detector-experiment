diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker.java
index 6d53dcd2..f48c3059 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker.java
@@ -208,7 +208,7 @@ public void setRamUsageEstimator(RamUsageEstimator r) {
       
       if (seen.contains(rf)) continue;
 
-      List<Object> kids = getAllDecendentReaderKeys(rf.readerKey);
+      List<Object> kids = getAllDescendantReaderKeys(rf.readerKey);
       for (Object kidKey : kids) {
         ReaderField kid = new ReaderField(kidKey, rf.fieldName);
         
@@ -252,7 +252,7 @@ public void setRamUsageEstimator(RamUsageEstimator r) {
       badness = badEntries.toArray(badness);
 
       insanity.add(new Insanity(InsanityType.SUBREADER,
-                                "Found caches for decendents of " + 
+                                "Found caches for descendants of " + 
                                 parent.toString(),
                                 badness));
     }
@@ -266,7 +266,7 @@ public void setRamUsageEstimator(RamUsageEstimator r) {
    * the hierarchy of subReaders building up a list of the objects 
    * returned by obj.getFieldCacheKey()
    */
-  private List<Object> getAllDecendentReaderKeys(Object seed) {
+  private List<Object> getAllDescendantReaderKeys(Object seed) {
     List<Object> all = new ArrayList<Object>(17); // will grow as we iter
     all.add(seed);
     for (int i = 0; i < all.size(); i++) {
