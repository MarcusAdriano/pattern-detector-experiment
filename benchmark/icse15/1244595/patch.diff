diff --git a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest.java b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest.java
index ed0edbb9..0fcc6426 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest.java
@@ -17,9 +17,13 @@
  * limitations under the License.
  */
 
+import junit.framework.TestCase;
+
 import org.apache.solr.BaseDistributedSearchTestCase;
 import org.apache.solr.client.solrj.SolrServer;
+import org.apache.solr.client.solrj.response.QueryResponse;
 import org.apache.solr.common.params.ModifiableSolrParams;
+import org.apache.solr.common.util.NamedList;
 
 /**
  * Test for SpellCheckComponent's distributed querying
@@ -70,6 +74,17 @@ private void q(Object... q) throws Exception {
     client.query(params);
   }
   
+  @Override
+  public void validateControlData(QueryResponse control) throws Exception
+  {    
+    NamedList nl = control.getResponse();
+    NamedList sc = (NamedList) nl.get("spellcheck");
+    NamedList sug = (NamedList) sc.get("suggestions");
+    if(sug.size()==0) {
+      TestCase.fail("Control data did not return any suggestions.");
+    }
+  }
+  
   @Override
   public void doTest() throws Exception {
   	del("*:*");
@@ -104,7 +119,7 @@ public void doTest() throws Exception {
     handle.put("maxScore", SKIPVAL);
     // we care only about the spellcheck results
     handle.put("response", SKIP);
-    q("q", "*:*", SpellCheckComponent.SPELLCHECK_BUILD, "true", "qt", "spellCheckCompRH", "shards.qt", "spellCheckCompRH");
+    q("q", "*:*", "spellcheck", "true", SpellCheckComponent.SPELLCHECK_BUILD, "true", "qt", "spellCheckCompRH", "shards.qt", "spellCheckCompRH");
     
     query("q", "*:*", "fl", "id,lowerfilt", "spellcheck.q","toyata", "spellcheck", "true", "qt", "spellCheckCompRH", "shards.qt", "spellCheckCompRH");
     query("q", "*:*", "fl", "id,lowerfilt", "spellcheck.q","toyata", "spellcheck", "true", "qt", "spellCheckCompRH", "shards.qt", "spellCheckCompRH", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, "true");
diff --git a/lucene/dev/branches/branch_3x/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java b/lucene/dev/branches/branch_3x/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java
index dbf6557e..f3c95d9e 100644
--- a/lucene/dev/branches/branch_3x/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java
+++ b/lucene/dev/branches/branch_3x/solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java
@@ -279,6 +279,7 @@ protected void query(Object... q) throws Exception {
     params.add("controlClient","true"); // just to enable easier sorting through log files
     final QueryResponse controlRsp = controlClient.query(params);
     params.remove("controlClient");
+    validateControlData(controlRsp);
 
     // query a random server
     params.set("shards", shards);
@@ -568,6 +569,19 @@ public void testDistribSearch() throws Exception {
     return o;
   }
 
+  /**
+   * Implementations can pre-test the control data for basic correctness before using it
+   * as a check for the shard data.  This is useful, for instance, if a test bug is introduced
+   * causing a spelling index not to get built:  both control & shard data would have no results
+   * but because they match the test would pass.  This method gives us a chance to ensure something
+   * exists in the control data.
+   * 
+   * @throws Exception
+   */
+  public void validateControlData(QueryResponse control) throws Exception {
+    /* no-op */
+  }
+
   public static abstract class RandVal {
     public static Random r = random;
     public static Set uniqueValues = new HashSet();
