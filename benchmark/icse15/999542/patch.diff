diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationException.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationException.java
index 9e1fc66a..3af79e59 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationException.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationException.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -247,7 +248,14 @@ public boolean equals(AuthenticationException that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_why = true && (isSetWhy());
+    builder.append(present_why);
+    if (present_why)
+      builder.append(why);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(AuthenticationException other) {
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationRequest.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationRequest.java
index 9dbabdc4..eab774f6 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationRequest.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationRequest.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -272,7 +273,14 @@ public boolean equals(AuthenticationRequest that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_credentials = true && (isSetCredentials());
+    builder.append(present_credentials);
+    if (present_credentials)
+      builder.append(credentials);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(AuthenticationRequest other) {
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthorizationException.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthorizationException.java
index 8e4ff888..5144d8a9 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthorizationException.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthorizationException.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -247,7 +248,14 @@ public boolean equals(AuthorizationException that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_why = true && (isSetWhy());
+    builder.append(present_why);
+    if (present_why)
+      builder.append(why);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(AuthorizationException other) {
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java
index b5782dac..a1ae14e2 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -137,16 +138,16 @@
     public void insert(byte[] key, ColumnParent column_parent, Column column, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException;
 
     /**
-     * Remove data from the row specified by key at the granularity specified by column_path, and the given clock. Note
+     * Remove data from the row specified by key at the granularity specified by column_path, and the given timestamp. Note
      * that all the values in column_path besides column_path.column_family are truly optional: you can remove the entire
      * row by just specifying the ColumnFamily, or you can remove a SuperColumn or a single Column by specifying those levels too.
      * 
      * @param key
      * @param column_path
-     * @param clock
+     * @param timestamp
      * @param consistency_level
      */
-    public void remove(byte[] key, ColumnPath column_path, Clock clock, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException;
+    public void remove(byte[] key, ColumnPath column_path, long timestamp, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException;
 
     /**
      *   Mutate many columns or super columns for many row keys. See also: Mutation.
@@ -315,7 +316,7 @@
 
     public void insert(byte[] key, ColumnParent column_parent, Column column, ConsistencyLevel consistency_level, AsyncMethodCallback<AsyncClient.insert_call> resultHandler) throws TException;
 
-    public void remove(byte[] key, ColumnPath column_path, Clock clock, ConsistencyLevel consistency_level, AsyncMethodCallback<AsyncClient.remove_call> resultHandler) throws TException;
+    public void remove(byte[] key, ColumnPath column_path, long timestamp, ConsistencyLevel consistency_level, AsyncMethodCallback<AsyncClient.remove_call> resultHandler) throws TException;
 
     public void batch_mutate(Map<byte[],Map<String,List<Mutation>>> mutation_map, ConsistencyLevel consistency_level, AsyncMethodCallback<AsyncClient.batch_mutate_call> resultHandler) throws TException;
 
@@ -850,19 +851,19 @@ public void recv_insert() throws InvalidRequestException, UnavailableException,
       return;
     }
 
-    public void remove(byte[] key, ColumnPath column_path, Clock clock, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
+    public void remove(byte[] key, ColumnPath column_path, long timestamp, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
     {
-      send_remove(key, column_path, clock, consistency_level);
+      send_remove(key, column_path, timestamp, consistency_level);
       recv_remove();
     }
 
-    public void send_remove(byte[] key, ColumnPath column_path, Clock clock, ConsistencyLevel consistency_level) throws TException
+    public void send_remove(byte[] key, ColumnPath column_path, long timestamp, ConsistencyLevel consistency_level) throws TException
     {
       oprot_.writeMessageBegin(new TMessage("remove", TMessageType.CALL, ++seqid_));
       remove_args args = new remove_args();
       args.setKey(key);
       args.setColumn_path(column_path);
-      args.setClock(clock);
+      args.setTimestamp(timestamp);
       args.setConsistency_level(consistency_level);
       args.write(oprot_);
       oprot_.writeMessageEnd();
@@ -1983,22 +1984,22 @@ public void getResult() throws InvalidRequestException, UnavailableException, Ti
       }
     }
 
-    public void remove(byte[] key, ColumnPath column_path, Clock clock, ConsistencyLevel consistency_level, AsyncMethodCallback<remove_call> resultHandler) throws TException {
+    public void remove(byte[] key, ColumnPath column_path, long timestamp, ConsistencyLevel consistency_level, AsyncMethodCallback<remove_call> resultHandler) throws TException {
       checkReady();
-      remove_call method_call = new remove_call(key, column_path, clock, consistency_level, resultHandler, this, protocolFactory, transport);
+      remove_call method_call = new remove_call(key, column_path, timestamp, consistency_level, resultHandler, this, protocolFactory, transport);
       manager.call(method_call);
     }
 
     public static class remove_call extends TAsyncMethodCall {
       private byte[] key;
       private ColumnPath column_path;
-      private Clock clock;
+      private long timestamp;
       private ConsistencyLevel consistency_level;
-      public remove_call(byte[] key, ColumnPath column_path, Clock clock, ConsistencyLevel consistency_level, AsyncMethodCallback<remove_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
+      public remove_call(byte[] key, ColumnPath column_path, long timestamp, ConsistencyLevel consistency_level, AsyncMethodCallback<remove_call> resultHandler, TAsyncClient client, TProtocolFactory protocolFactory, TNonblockingTransport transport) throws TException {
         super(client, protocolFactory, transport, resultHandler, false);
         this.key = key;
         this.column_path = column_path;
-        this.clock = clock;
+        this.timestamp = timestamp;
         this.consistency_level = consistency_level;
       }
 
@@ -2007,7 +2008,7 @@ public void write_args(TProtocol prot) throws TException {
         remove_args args = new remove_args();
         args.setKey(key);
         args.setColumn_path(column_path);
-        args.setClock(clock);
+        args.setTimestamp(timestamp);
         args.setConsistency_level(consistency_level);
         args.write(prot);
         prot.writeMessageEnd();
@@ -3082,7 +3083,7 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
         iprot.readMessageEnd();
         remove_result result = new remove_result();
         try {
-          iface_.remove(args.key, args.column_path, args.clock, args.consistency_level);
+          iface_.remove(args.key, args.column_path, args.timestamp, args.consistency_level);
         } catch (InvalidRequestException ire) {
           result.ire = ire;
         } catch (UnavailableException ue) {
@@ -3936,7 +3937,14 @@ public boolean equals(login_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_auth_request = true && (isSetAuth_request());
+      builder.append(present_auth_request);
+      if (present_auth_request)
+        builder.append(auth_request);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(login_args other) {
@@ -4282,7 +4290,19 @@ public boolean equals(login_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_authnx = true && (isSetAuthnx());
+      builder.append(present_authnx);
+      if (present_authnx)
+        builder.append(authnx);
+
+      boolean present_authzx = true && (isSetAuthzx());
+      builder.append(present_authzx);
+      if (present_authzx)
+        builder.append(authzx);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(login_result other) {
@@ -4595,7 +4615,14 @@ public boolean equals(set_keyspace_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_keyspace = true && (isSetKeyspace());
+      builder.append(present_keyspace);
+      if (present_keyspace)
+        builder.append(keyspace);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(set_keyspace_args other) {
@@ -4882,7 +4909,14 @@ public boolean equals(set_keyspace_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_ire = true && (isSetIre());
+      builder.append(present_ire);
+      if (present_ire)
+        builder.append(ire);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(set_keyspace_result other) {
@@ -5301,7 +5335,24 @@ public boolean equals(get_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_key = true && (isSetKey());
+      builder.append(present_key);
+      if (present_key)
+        builder.append(key);
+
+      boolean present_column_path = true && (isSetColumn_path());
+      builder.append(present_column_path);
+      if (present_column_path)
+        builder.append(column_path);
+
+      boolean present_consistency_level = true && (isSetConsistency_level());
+      builder.append(present_consistency_level);
+      if (present_consistency_level)
+        builder.append(consistency_level.getValue());
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_args other) {
@@ -5890,7 +5941,34 @@ public boolean equals(get_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ire = true && (isSetIre());
+      builder.append(present_ire);
+      if (present_ire)
+        builder.append(ire);
+
+      boolean present_nfe = true && (isSetNfe());
+      builder.append(present_nfe);
+      if (present_nfe)
+        builder.append(nfe);
+
+      boolean present_ue = true && (isSetUe());
+      builder.append(present_ue);
+      if (present_ue)
+        builder.append(ue);
+
+      boolean present_te = true && (isSetTe());
+      builder.append(present_te);
+      if (present_te)
+        builder.append(te);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_result other) {
@@ -6483,7 +6561,29 @@ public boolean equals(get_slice_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_key = true && (isSetKey());
+      builder.append(present_key);
+      if (present_key)
+        builder.append(key);
+
+      boolean present_column_parent = true && (isSetColumn_parent());
+      builder.append(present_column_parent);
+      if (present_column_parent)
+        builder.append(column_parent);
+
+      boolean present_predicate = true && (isSetPredicate());
+      builder.append(present_predicate);
+      if (present_predicate)
+        builder.append(predicate);
+
+      boolean present_consistency_level = true && (isSetConsistency_level());
+      builder.append(present_consistency_level);
+      if (present_consistency_level)
+        builder.append(consistency_level.getValue());
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_slice_args other) {
@@ -7067,7 +7167,29 @@ public boolean equals(get_slice_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ire = true && (isSetIre());
+      builder.append(present_ire);
+      if (present_ire)
+        builder.append(ire);
+
+      boolean present_ue = true && (isSetUe());
+      builder.append(present_ue);
+      if (present_ue)
+        builder.append(ue);
+
+      boolean present_te = true && (isSetTe());
+      builder.append(present_te);
+      if (present_te)
+        builder.append(te);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_slice_result other) {
@@ -7648,7 +7770,29 @@ public boolean equals(get_count_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_key = true && (isSetKey());
+      builder.append(present_key);
+      if (present_key)
+        builder.append(key);
+
+      boolean present_column_parent = true && (isSetColumn_parent());
+      builder.append(present_column_parent);
+      if (present_column_parent)
+        builder.append(column_parent);
+
+      boolean present_predicate = true && (isSetPredicate());
+      builder.append(present_predicate);
+      if (present_predicate)
+        builder.append(predicate);
+
+      boolean present_consistency_level = true && (isSetConsistency_level());
+      builder.append(present_consistency_level);
+      if (present_consistency_level)
+        builder.append(consistency_level.getValue());
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_count_args other) {
@@ -8214,7 +8358,29 @@ public boolean equals(get_count_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true;
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ire = true && (isSetIre());
+      builder.append(present_ire);
+      if (present_ire)
+        builder.append(ire);
+
+      boolean present_ue = true && (isSetUe());
+      builder.append(present_ue);
+      if (present_ue)
+        builder.append(ue);
+
+      boolean present_te = true && (isSetTe());
+      builder.append(present_te);
+      if (present_te)
+        builder.append(te);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_count_result other) {
@@ -8795,7 +8961,29 @@ public boolean equals(multiget_slice_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_keys = true && (isSetKeys());
+      builder.append(present_keys);
+      if (present_keys)
+        builder.append(keys);
+
+      boolean present_column_parent = true && (isSetColumn_parent());
+      builder.append(present_column_parent);
+      if (present_column_parent)
+        builder.append(column_parent);
+
+      boolean present_predicate = true && (isSetPredicate());
+      builder.append(present_predicate);
+      if (present_predicate)
+        builder.append(predicate);
+
+      boolean present_consistency_level = true && (isSetConsistency_level());
+      builder.append(present_consistency_level);
+      if (present_consistency_level)
+        builder.append(consistency_level.getValue());
+
+      return builder.toHashCode();
     }
 
     public int compareTo(multiget_slice_args other) {
@@ -9401,7 +9589,29 @@ public boolean equals(multiget_slice_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ire = true && (isSetIre());
+      builder.append(present_ire);
+      if (present_ire)
+        builder.append(ire);
+
+      boolean present_ue = true && (isSetUe());
+      builder.append(present_ue);
+      if (present_ue)
+        builder.append(ue);
+
+      boolean present_te = true && (isSetTe());
+      builder.append(present_te);
+      if (present_te)
+        builder.append(te);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(multiget_slice_result other) {
@@ -10023,7 +10233,29 @@ public boolean equals(multiget_count_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_keys = true && (isSetKeys());
+      builder.append(present_keys);
+      if (present_keys)
+        builder.append(keys);
+
+      boolean present_column_parent = true && (isSetColumn_parent());
+      builder.append(present_column_parent);
+      if (present_column_parent)
+        builder.append(column_parent);
+
+      boolean present_predicate = true && (isSetPredicate());
+      builder.append(present_predicate);
+      if (present_predicate)
+        builder.append(predicate);
+
+      boolean present_consistency_level = true && (isSetConsistency_level());
+      builder.append(present_consistency_level);
+      if (present_consistency_level)
+        builder.append(consistency_level.getValue());
+
+      return builder.toHashCode();
     }
 
     public int compareTo(multiget_count_args other) {
@@ -10625,7 +10857,29 @@ public boolean equals(multiget_count_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ire = true && (isSetIre());
+      builder.append(present_ire);
+      if (present_ire)
+        builder.append(ire);
+
+      boolean present_ue = true && (isSetUe());
+      builder.append(present_ue);
+      if (present_ue)
+        builder.append(ue);
+
+      boolean present_te = true && (isSetTe());
+      builder.append(present_te);
+      if (present_te)
+        builder.append(te);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(multiget_count_result other) {
@@ -11207,7 +11461,29 @@ public boolean equals(get_range_slices_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_column_parent = true && (isSetColumn_parent());
+      builder.append(present_column_parent);
+      if (present_column_parent)
+        builder.append(column_parent);
+
+      boolean present_predicate = true && (isSetPredicate());
+      builder.append(present_predicate);
+      if (present_predicate)
+        builder.append(predicate);
+
+      boolean present_range = true && (isSetRange());
+      builder.append(present_range);
+      if (present_range)
+        builder.append(range);
+
+      boolean present_consistency_level = true && (isSetConsistency_level());
+      builder.append(present_consistency_level);
+      if (present_consistency_level)
+        builder.append(consistency_level.getValue());
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_range_slices_args other) {
@@ -11787,7 +12063,29 @@ public boolean equals(get_range_slices_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ire = true && (isSetIre());
+      builder.append(present_ire);
+      if (present_ire)
+        builder.append(ire);
+
+      boolean present_ue = true && (isSetUe());
+      builder.append(present_ue);
+      if (present_ue)
+        builder.append(ue);
+
+      boolean present_te = true && (isSetTe());
+      builder.append(present_te);
+      if (present_te)
+        builder.append(te);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_range_slices_result other) {
@@ -12367,7 +12665,29 @@ public boolean equals(get_indexed_slices_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_column_parent = true && (isSetColumn_parent());
+      builder.append(present_column_parent);
+      if (present_column_parent)
+        builder.append(column_parent);
+
+      boolean present_index_clause = true && (isSetIndex_clause());
+      builder.append(present_index_clause);
+      if (present_index_clause)
+        builder.append(index_clause);
+
+      boolean present_column_predicate = true && (isSetColumn_predicate());
+      builder.append(present_column_predicate);
+      if (present_column_predicate)
+        builder.append(column_predicate);
+
+      boolean present_consistency_level = true && (isSetConsistency_level());
+      builder.append(present_consistency_level);
+      if (present_consistency_level)
+        builder.append(consistency_level.getValue());
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_indexed_slices_args other) {
@@ -12947,7 +13267,29 @@ public boolean equals(get_indexed_slices_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ire = true && (isSetIre());
+      builder.append(present_ire);
+      if (present_ire)
+        builder.append(ire);
+
+      boolean present_ue = true && (isSetUe());
+      builder.append(present_ue);
+      if (present_ue)
+        builder.append(ue);
+
+      boolean present_te = true && (isSetTe());
+      builder.append(present_te);
+      if (present_te)
+        builder.append(te);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(get_indexed_slices_result other) {
@@ -13528,7 +13870,29 @@ public boolean equals(insert_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_key = true && (isSetKey());
+      builder.append(present_key);
+      if (present_key)
+        builder.append(key);
+
+      boolean present_column_parent = true && (isSetColumn_parent());
+      builder.append(present_column_parent);
+      if (present_column_parent)
+        builder.append(column_parent);
+
+      boolean present_column = true && (isSetColumn());
+      builder.append(present_column);
+      if (present_column)
+        builder.append(column);
+
+      boolean present_consistency_level = true && (isSetConsistency_level());
+      builder.append(present_consistency_level);
+      if (present_consistency_level)
+        builder.append(consistency_level.getValue());
+
+      return builder.toHashCode();
     }
 
     public int compareTo(insert_args other) {
@@ -14034,7 +14398,24 @@ public boolean equals(insert_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_ire = true && (isSetIre());
+      builder.append(present_ire);
+      if (present_ire)
+        builder.append(ire);
+
+      boolean present_ue = true && (isSetUe());
+      builder.append(present_ue);
+      if (present_ue)
+        builder.append(ue);
+
+      boolean present_te = true && (isSetTe());
+      builder.append(present_te);
+      if (present_te)
+        builder.append(te);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(insert_result other) {
@@ -14183,12 +14564,12 @@ public void validate() throws TException {
 
     private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);
     private static final TField COLUMN_PATH_FIELD_DESC = new TField("column_path", TType.STRUCT, (short)2);
-    private static final TField CLOCK_FIELD_DESC = new TField("clock", TType.STRUCT, (short)3);
+    private static final TField TIMESTAMP_FIELD_DESC = new TField("timestamp", TType.I64, (short)3);
     private static final TField CONSISTENCY_LEVEL_FIELD_DESC = new TField("consistency_level", TType.I32, (short)4);
 
     public byte[] key;
     public ColumnPath column_path;
-    public Clock clock;
+    public long timestamp;
     /**
      * 
      * @see ConsistencyLevel
@@ -14199,7 +14580,7 @@ public void validate() throws TException {
     public enum _Fields implements TFieldIdEnum {
       KEY((short)1, "key"),
       COLUMN_PATH((short)2, "column_path"),
-      CLOCK((short)3, "clock"),
+      TIMESTAMP((short)3, "timestamp"),
       /**
        * 
        * @see ConsistencyLevel
@@ -14223,8 +14604,8 @@ public static _Fields findByThriftId(int fieldId) {
             return KEY;
           case 2: // COLUMN_PATH
             return COLUMN_PATH;
-          case 3: // CLOCK
-            return CLOCK;
+          case 3: // TIMESTAMP
+            return TIMESTAMP;
           case 4: // CONSISTENCY_LEVEL
             return CONSISTENCY_LEVEL;
           default:
@@ -14267,6 +14648,8 @@ public String getFieldName() {
     }
 
     // isset id assignments
+    private static final int __TIMESTAMP_ISSET_ID = 0;
+    private BitSet __isset_bit_vector = new BitSet(1);
 
     public static final Map<_Fields, FieldMetaData> metaDataMap;
     static {
@@ -14275,8 +14658,8 @@ public String getFieldName() {
           new FieldValueMetaData(TType.STRING)));
       tmpMap.put(_Fields.COLUMN_PATH, new FieldMetaData("column_path", TFieldRequirementType.REQUIRED, 
           new StructMetaData(TType.STRUCT, ColumnPath.class)));
-      tmpMap.put(_Fields.CLOCK, new FieldMetaData("clock", TFieldRequirementType.REQUIRED, 
-          new StructMetaData(TType.STRUCT, Clock.class)));
+      tmpMap.put(_Fields.TIMESTAMP, new FieldMetaData("timestamp", TFieldRequirementType.REQUIRED, 
+          new FieldValueMetaData(TType.I64)));
       tmpMap.put(_Fields.CONSISTENCY_LEVEL, new FieldMetaData("consistency_level", TFieldRequirementType.DEFAULT, 
           new EnumMetaData(TType.ENUM, ConsistencyLevel.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
@@ -14291,13 +14674,14 @@ public remove_args() {
     public remove_args(
       byte[] key,
       ColumnPath column_path,
-      Clock clock,
+      long timestamp,
       ConsistencyLevel consistency_level)
     {
       this();
       this.key = key;
       this.column_path = column_path;
-      this.clock = clock;
+      this.timestamp = timestamp;
+      setTimestampIsSet(true);
       this.consistency_level = consistency_level;
     }
 
@@ -14305,6 +14689,8 @@ public remove_args(
      * Performs a deep copy on <i>other</i>.
      */
     public remove_args(remove_args other) {
+      __isset_bit_vector.clear();
+      __isset_bit_vector.or(other.__isset_bit_vector);
       if (other.isSetKey()) {
         this.key = new byte[other.key.length];
         System.arraycopy(other.key, 0, key, 0, other.key.length);
@@ -14312,9 +14698,7 @@ public remove_args(remove_args other) {
       if (other.isSetColumn_path()) {
         this.column_path = new ColumnPath(other.column_path);
       }
-      if (other.isSetClock()) {
-        this.clock = new Clock(other.clock);
-      }
+      this.timestamp = other.timestamp;
       if (other.isSetConsistency_level()) {
         this.consistency_level = other.consistency_level;
       }
@@ -14377,28 +14761,27 @@ public void setColumn_pathIsSet(boolean value) {
       }
     }
 
-    public Clock getClock() {
-      return this.clock;
+    public long getTimestamp() {
+      return this.timestamp;
     }
 
-    public remove_args setClock(Clock clock) {
-      this.clock = clock;
+    public remove_args setTimestamp(long timestamp) {
+      this.timestamp = timestamp;
+      setTimestampIsSet(true);
       return this;
     }
 
-    public void unsetClock() {
-      this.clock = null;
+    public void unsetTimestamp() {
+      __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
     }
 
-    /** Returns true if field clock is set (has been asigned a value) and false otherwise */
-    public boolean isSetClock() {
-      return this.clock != null;
+    /** Returns true if field timestamp is set (has been asigned a value) and false otherwise */
+    public boolean isSetTimestamp() {
+      return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
     }
 
-    public void setClockIsSet(boolean value) {
-      if (!value) {
-        this.clock = null;
-      }
+    public void setTimestampIsSet(boolean value) {
+      __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
     }
 
     /**
@@ -14451,11 +14834,11 @@ public void setFieldValue(_Fields field, Object value) {
         }
         break;
 
-      case CLOCK:
+      case TIMESTAMP:
         if (value == null) {
-          unsetClock();
+          unsetTimestamp();
         } else {
-          setClock((Clock)value);
+          setTimestamp((Long)value);
         }
         break;
 
@@ -14482,8 +14865,8 @@ public Object getFieldValue(_Fields field) {
       case COLUMN_PATH:
         return getColumn_path();
 
-      case CLOCK:
-        return getClock();
+      case TIMESTAMP:
+        return new Long(getTimestamp());
 
       case CONSISTENCY_LEVEL:
         return getConsistency_level();
@@ -14503,8 +14886,8 @@ public boolean isSet(_Fields field) {
         return isSetKey();
       case COLUMN_PATH:
         return isSetColumn_path();
-      case CLOCK:
-        return isSetClock();
+      case TIMESTAMP:
+        return isSetTimestamp();
       case CONSISTENCY_LEVEL:
         return isSetConsistency_level();
       }
@@ -14546,12 +14929,12 @@ public boolean equals(remove_args that) {
           return false;
       }
 
-      boolean this_present_clock = true && this.isSetClock();
-      boolean that_present_clock = true && that.isSetClock();
-      if (this_present_clock || that_present_clock) {
-        if (!(this_present_clock && that_present_clock))
+      boolean this_present_timestamp = true;
+      boolean that_present_timestamp = true;
+      if (this_present_timestamp || that_present_timestamp) {
+        if (!(this_present_timestamp && that_present_timestamp))
           return false;
-        if (!this.clock.equals(that.clock))
+        if (this.timestamp != that.timestamp)
           return false;
       }
 
@@ -14569,7 +14952,29 @@ public boolean equals(remove_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_key = true && (isSetKey());
+      builder.append(present_key);
+      if (present_key)
+        builder.append(key);
+
+      boolean present_column_path = true && (isSetColumn_path());
+      builder.append(present_column_path);
+      if (present_column_path)
+        builder.append(column_path);
+
+      boolean present_timestamp = true;
+      builder.append(present_timestamp);
+      if (present_timestamp)
+        builder.append(timestamp);
+
+      boolean present_consistency_level = true && (isSetConsistency_level());
+      builder.append(present_consistency_level);
+      if (present_consistency_level)
+        builder.append(consistency_level.getValue());
+
+      return builder.toHashCode();
     }
 
     public int compareTo(remove_args other) {
@@ -14598,11 +15003,11 @@ public int compareTo(remove_args other) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetClock()).compareTo(typedOther.isSetClock());
+      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetClock()) {        lastComparison = TBaseHelper.compareTo(this.clock, typedOther.clock);
+      if (isSetTimestamp()) {        lastComparison = TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -14644,10 +15049,10 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case 3: // CLOCK
-            if (field.type == TType.STRUCT) {
-              this.clock = new Clock();
-              this.clock.read(iprot);
+          case 3: // TIMESTAMP
+            if (field.type == TType.I64) {
+              this.timestamp = iprot.readI64();
+              setTimestampIsSet(true);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -14667,6 +15072,9 @@ public void read(TProtocol iprot) throws TException {
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
+      if (!isSetTimestamp()) {
+        throw new TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
+      }
       validate();
     }
 
@@ -14684,11 +15092,9 @@ public void write(TProtocol oprot) throws TException {
         this.column_path.write(oprot);
         oprot.writeFieldEnd();
       }
-      if (this.clock != null) {
-        oprot.writeFieldBegin(CLOCK_FIELD_DESC);
-        this.clock.write(oprot);
+      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
+      oprot.writeI64(this.timestamp);
         oprot.writeFieldEnd();
-      }
       if (this.consistency_level != null) {
         oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
         oprot.writeI32(this.consistency_level.getValue());
@@ -14724,12 +15130,8 @@ public String toString() {
       }
       first = false;
       if (!first) sb.append(", ");
-      sb.append("clock:");
-      if (this.clock == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.clock);
-      }
+      sb.append("timestamp:");
+      sb.append(this.timestamp);
       first = false;
       if (!first) sb.append(", ");
       sb.append("consistency_level:");
@@ -14751,9 +15153,7 @@ public void validate() throws TException {
       if (column_path == null) {
         throw new TProtocolException("Required field 'column_path' was not present! Struct: " + toString());
       }
-      if (clock == null) {
-        throw new TProtocolException("Required field 'clock' was not present! Struct: " + toString());
-      }
+      // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
     }
 
   }
@@ -15072,7 +15472,24 @@ public boolean equals(remove_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_ire = true && (isSetIre());
+      builder.append(present_ire);
+      if (present_ire)
+        builder.append(ire);
+
+      boolean present_ue = true && (isSetUe());
+      builder.append(present_ue);
+      if (present_ue)
+        builder.append(ue);
+
+      boolean present_te = true && (isSetTe());
+      builder.append(present_te);
+      if (present_te)
+        builder.append(te);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(remove_result other) {
@@ -15533,7 +15950,19 @@ public boolean equals(batch_mutate_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_mutation_map = true && (isSetMutation_map());
+      builder.append(present_mutation_map);
+      if (present_mutation_map)
+        builder.append(mutation_map);
+
+      boolean present_consistency_level = true && (isSetConsistency_level());
+      builder.append(present_consistency_level);
+      if (present_consistency_level)
+        builder.append(consistency_level.getValue());
+
+      return builder.toHashCode();
     }
 
     public int compareTo(batch_mutate_args other) {
@@ -16026,7 +16455,24 @@ public boolean equals(batch_mutate_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_ire = true && (isSetIre());
+      builder.append(present_ire);
+      if (present_ire)
+        builder.append(ire);
+
+      boolean present_ue = true && (isSetUe());
+      builder.append(present_ue);
+      if (present_ue)
+        builder.append(ue);
+
+      boolean present_te = true && (isSetTe());
+      builder.append(present_te);
+      if (present_te)
+        builder.append(te);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(batch_mutate_result other) {
@@ -16368,7 +16814,14 @@ public boolean equals(truncate_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_cfname = true && (isSetCfname());
+      builder.append(present_cfname);
+      if (present_cfname)
+        builder.append(cfname);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(truncate_args other) {
@@ -16713,7 +17166,19 @@ public boolean equals(truncate_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_ire = true && (isSetIre());
+      builder.append(present_ire);
+      if (present_ire)
+        builder.append(ire);
+
+      boolean present_ue = true && (isSetUe());
+      builder.append(present_ue);
+      if (present_ue)
+        builder.append(ue);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(truncate_result other) {
@@ -16961,7 +17426,9 @@ public boolean equals(describe_schema_versions_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      return builder.toHashCode();
     }
 
     public int compareTo(describe_schema_versions_args other) {
@@ -17304,7 +17771,19 @@ public boolean equals(describe_schema_versions_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ire = true && (isSetIre());
+      builder.append(present_ire);
+      if (present_ire)
+        builder.append(ire);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(describe_schema_versions_result other) {
@@ -17588,7 +18067,9 @@ public boolean equals(describe_keyspaces_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      return builder.toHashCode();
     }
 
     public int compareTo(describe_keyspaces_args other) {
@@ -17864,7 +18345,14 @@ public boolean equals(describe_keyspaces_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(describe_keyspaces_result other) {
@@ -18100,7 +18588,9 @@ public boolean equals(describe_cluster_name_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      return builder.toHashCode();
     }
 
     public int compareTo(describe_cluster_name_args other) {
@@ -18356,7 +18846,14 @@ public boolean equals(describe_cluster_name_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(describe_cluster_name_result other) {
@@ -18574,7 +19071,9 @@ public boolean equals(describe_version_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      return builder.toHashCode();
     }
 
     public int compareTo(describe_version_args other) {
@@ -18830,7 +19329,14 @@ public boolean equals(describe_version_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(describe_version_result other) {
@@ -19113,7 +19619,14 @@ public boolean equals(describe_ring_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_keyspace = true && (isSetKeyspace());
+      builder.append(present_keyspace);
+      if (present_keyspace)
+        builder.append(keyspace);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(describe_ring_args other) {
@@ -19478,7 +19991,19 @@ public boolean equals(describe_ring_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ire = true && (isSetIre());
+      builder.append(present_ire);
+      if (present_ire)
+        builder.append(ire);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(describe_ring_result other) {
@@ -19743,7 +20268,9 @@ public boolean equals(describe_partitioner_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      return builder.toHashCode();
     }
 
     public int compareTo(describe_partitioner_args other) {
@@ -19999,7 +20526,14 @@ public boolean equals(describe_partitioner_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(describe_partitioner_result other) {
@@ -20282,7 +20816,14 @@ public boolean equals(describe_keyspace_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_keyspace = true && (isSetKeyspace());
+      builder.append(present_keyspace);
+      if (present_keyspace)
+        builder.append(keyspace);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(describe_keyspace_args other) {
@@ -20627,7 +21168,19 @@ public boolean equals(describe_keyspace_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_nfe = true && (isSetNfe());
+      builder.append(present_nfe);
+      if (present_nfe)
+        builder.append(nfe);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(describe_keyspace_result other) {
@@ -21116,7 +21669,29 @@ public boolean equals(describe_splits_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_cfName = true && (isSetCfName());
+      builder.append(present_cfName);
+      if (present_cfName)
+        builder.append(cfName);
+
+      boolean present_start_token = true && (isSetStart_token());
+      builder.append(present_start_token);
+      if (present_start_token)
+        builder.append(start_token);
+
+      boolean present_end_token = true && (isSetEnd_token());
+      builder.append(present_end_token);
+      if (present_end_token)
+        builder.append(end_token);
+
+      boolean present_keys_per_split = true;
+      builder.append(present_keys_per_split);
+      if (present_keys_per_split)
+        builder.append(keys_per_split);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(describe_splits_args other) {
@@ -21515,7 +22090,14 @@ public boolean equals(describe_splits_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(describe_splits_result other) {
@@ -21815,7 +22397,14 @@ public boolean equals(system_add_column_family_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_cf_def = true && (isSetCf_def());
+      builder.append(present_cf_def);
+      if (present_cf_def)
+        builder.append(cf_def);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(system_add_column_family_args other) {
@@ -22161,7 +22750,19 @@ public boolean equals(system_add_column_family_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ire = true && (isSetIre());
+      builder.append(present_ire);
+      if (present_ire)
+        builder.append(ire);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(system_add_column_family_result other) {
@@ -22473,7 +23074,14 @@ public boolean equals(system_drop_column_family_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_column_family = true && (isSetColumn_family());
+      builder.append(present_column_family);
+      if (present_column_family)
+        builder.append(column_family);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(system_drop_column_family_args other) {
@@ -22818,7 +23426,19 @@ public boolean equals(system_drop_column_family_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ire = true && (isSetIre());
+      builder.append(present_ire);
+      if (present_ire)
+        builder.append(ire);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(system_drop_column_family_result other) {
@@ -23188,7 +23808,19 @@ public boolean equals(system_rename_column_family_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_old_name = true && (isSetOld_name());
+      builder.append(present_old_name);
+      if (present_old_name)
+        builder.append(old_name);
+
+      boolean present_new_name = true && (isSetNew_name());
+      builder.append(present_new_name);
+      if (present_new_name)
+        builder.append(new_name);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(system_rename_column_family_args other) {
@@ -23565,7 +24197,19 @@ public boolean equals(system_rename_column_family_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ire = true && (isSetIre());
+      builder.append(present_ire);
+      if (present_ire)
+        builder.append(ire);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(system_rename_column_family_result other) {
@@ -23877,7 +24521,14 @@ public boolean equals(system_add_keyspace_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_ks_def = true && (isSetKs_def());
+      builder.append(present_ks_def);
+      if (present_ks_def)
+        builder.append(ks_def);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(system_add_keyspace_args other) {
@@ -24223,7 +24874,19 @@ public boolean equals(system_add_keyspace_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ire = true && (isSetIre());
+      builder.append(present_ire);
+      if (present_ire)
+        builder.append(ire);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(system_add_keyspace_result other) {
@@ -24535,7 +25198,14 @@ public boolean equals(system_drop_keyspace_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_keyspace = true && (isSetKeyspace());
+      builder.append(present_keyspace);
+      if (present_keyspace)
+        builder.append(keyspace);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(system_drop_keyspace_args other) {
@@ -24880,7 +25550,19 @@ public boolean equals(system_drop_keyspace_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ire = true && (isSetIre());
+      builder.append(present_ire);
+      if (present_ire)
+        builder.append(ire);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(system_drop_keyspace_result other) {
@@ -25250,7 +25932,19 @@ public boolean equals(system_rename_keyspace_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_old_name = true && (isSetOld_name());
+      builder.append(present_old_name);
+      if (present_old_name)
+        builder.append(old_name);
+
+      boolean present_new_name = true && (isSetNew_name());
+      builder.append(present_new_name);
+      if (present_new_name)
+        builder.append(new_name);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(system_rename_keyspace_args other) {
@@ -25627,7 +26321,19 @@ public boolean equals(system_rename_keyspace_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ire = true && (isSetIre());
+      builder.append(present_ire);
+      if (present_ire)
+        builder.append(ire);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(system_rename_keyspace_result other) {
@@ -25939,7 +26645,14 @@ public boolean equals(system_update_keyspace_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_ks_def = true && (isSetKs_def());
+      builder.append(present_ks_def);
+      if (present_ks_def)
+        builder.append(ks_def);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(system_update_keyspace_args other) {
@@ -26285,7 +26998,19 @@ public boolean equals(system_update_keyspace_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ire = true && (isSetIre());
+      builder.append(present_ire);
+      if (present_ire)
+        builder.append(ire);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(system_update_keyspace_result other) {
@@ -26597,7 +27322,14 @@ public boolean equals(system_update_column_family_args that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_cf_def = true && (isSetCf_def());
+      builder.append(present_cf_def);
+      if (present_cf_def)
+        builder.append(cf_def);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(system_update_column_family_args other) {
@@ -26943,7 +27675,19 @@ public boolean equals(system_update_column_family_result that) {
 
     @Override
     public int hashCode() {
-      return 0;
+      HashCodeBuilder builder = new HashCodeBuilder();
+
+      boolean present_success = true && (isSetSuccess());
+      builder.append(present_success);
+      if (present_success)
+        builder.append(success);
+
+      boolean present_ire = true && (isSetIre());
+      builder.append(present_ire);
+      if (present_ire)
+        builder.append(ire);
+
+      return builder.toHashCode();
     }
 
     public int compareTo(system_update_column_family_result other) {
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/CfDef.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/CfDef.java
index 6ba6fc52..01a0d9aa 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/CfDef.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/CfDef.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -52,10 +53,8 @@
   private static final TField KEYSPACE_FIELD_DESC = new TField("keyspace", TType.STRING, (short)1);
   private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
   private static final TField COLUMN_TYPE_FIELD_DESC = new TField("column_type", TType.STRING, (short)3);
-  private static final TField CLOCK_TYPE_FIELD_DESC = new TField("clock_type", TType.STRING, (short)4);
   private static final TField COMPARATOR_TYPE_FIELD_DESC = new TField("comparator_type", TType.STRING, (short)5);
   private static final TField SUBCOMPARATOR_TYPE_FIELD_DESC = new TField("subcomparator_type", TType.STRING, (short)6);
-  private static final TField RECONCILER_FIELD_DESC = new TField("reconciler", TType.STRING, (short)7);
   private static final TField COMMENT_FIELD_DESC = new TField("comment", TType.STRING, (short)8);
   private static final TField ROW_CACHE_SIZE_FIELD_DESC = new TField("row_cache_size", TType.DOUBLE, (short)9);
   private static final TField PRELOAD_ROW_CACHE_FIELD_DESC = new TField("preload_row_cache", TType.BOOL, (short)10);
@@ -71,10 +70,8 @@
   public String keyspace;
   public String name;
   public String column_type;
-  public String clock_type;
   public String comparator_type;
   public String subcomparator_type;
-  public String reconciler;
   public String comment;
   public double row_cache_size;
   public boolean preload_row_cache;
@@ -92,10 +89,8 @@
     KEYSPACE((short)1, "keyspace"),
     NAME((short)2, "name"),
     COLUMN_TYPE((short)3, "column_type"),
-    CLOCK_TYPE((short)4, "clock_type"),
     COMPARATOR_TYPE((short)5, "comparator_type"),
     SUBCOMPARATOR_TYPE((short)6, "subcomparator_type"),
-    RECONCILER((short)7, "reconciler"),
     COMMENT((short)8, "comment"),
     ROW_CACHE_SIZE((short)9, "row_cache_size"),
     PRELOAD_ROW_CACHE((short)10, "preload_row_cache"),
@@ -127,14 +122,10 @@ public static _Fields findByThriftId(int fieldId) {
           return NAME;
         case 3: // COLUMN_TYPE
           return COLUMN_TYPE;
-        case 4: // CLOCK_TYPE
-          return CLOCK_TYPE;
         case 5: // COMPARATOR_TYPE
           return COMPARATOR_TYPE;
         case 6: // SUBCOMPARATOR_TYPE
           return SUBCOMPARATOR_TYPE;
-        case 7: // RECONCILER
-          return RECONCILER;
         case 8: // COMMENT
           return COMMENT;
         case 9: // ROW_CACHE_SIZE
@@ -216,14 +207,10 @@ public String getFieldName() {
         new FieldValueMetaData(TType.STRING)));
     tmpMap.put(_Fields.COLUMN_TYPE, new FieldMetaData("column_type", TFieldRequirementType.OPTIONAL, 
         new FieldValueMetaData(TType.STRING)));
-    tmpMap.put(_Fields.CLOCK_TYPE, new FieldMetaData("clock_type", TFieldRequirementType.OPTIONAL, 
-        new FieldValueMetaData(TType.STRING)));
     tmpMap.put(_Fields.COMPARATOR_TYPE, new FieldMetaData("comparator_type", TFieldRequirementType.OPTIONAL, 
         new FieldValueMetaData(TType.STRING)));
     tmpMap.put(_Fields.SUBCOMPARATOR_TYPE, new FieldMetaData("subcomparator_type", TFieldRequirementType.OPTIONAL, 
         new FieldValueMetaData(TType.STRING)));
-    tmpMap.put(_Fields.RECONCILER, new FieldMetaData("reconciler", TFieldRequirementType.OPTIONAL, 
-        new FieldValueMetaData(TType.STRING)));
     tmpMap.put(_Fields.COMMENT, new FieldMetaData("comment", TFieldRequirementType.OPTIONAL, 
         new FieldValueMetaData(TType.STRING)));
     tmpMap.put(_Fields.ROW_CACHE_SIZE, new FieldMetaData("row_cache_size", TFieldRequirementType.OPTIONAL, 
@@ -254,8 +241,6 @@ public String getFieldName() {
   public CfDef() {
     this.column_type = "Standard";
 
-    this.clock_type = "Timestamp";
-
     this.comparator_type = "BytesType";
 
     this.row_cache_size = (double)0;
@@ -292,18 +277,12 @@ public CfDef(CfDef other) {
     if (other.isSetColumn_type()) {
       this.column_type = other.column_type;
     }
-    if (other.isSetClock_type()) {
-      this.clock_type = other.clock_type;
-    }
     if (other.isSetComparator_type()) {
       this.comparator_type = other.comparator_type;
     }
     if (other.isSetSubcomparator_type()) {
       this.subcomparator_type = other.subcomparator_type;
     }
-    if (other.isSetReconciler()) {
-      this.reconciler = other.reconciler;
-    }
     if (other.isSetComment()) {
       this.comment = other.comment;
     }
@@ -408,30 +387,6 @@ public void setColumn_typeIsSet(boolean value) {
     }
   }
 
-  public String getClock_type() {
-    return this.clock_type;
-  }
-
-  public CfDef setClock_type(String clock_type) {
-    this.clock_type = clock_type;
-    return this;
-  }
-
-  public void unsetClock_type() {
-    this.clock_type = null;
-  }
-
-  /** Returns true if field clock_type is set (has been asigned a value) and false otherwise */
-  public boolean isSetClock_type() {
-    return this.clock_type != null;
-  }
-
-  public void setClock_typeIsSet(boolean value) {
-    if (!value) {
-      this.clock_type = null;
-    }
-  }
-
   public String getComparator_type() {
     return this.comparator_type;
   }
@@ -480,30 +435,6 @@ public void setSubcomparator_typeIsSet(boolean value) {
     }
   }
 
-  public String getReconciler() {
-    return this.reconciler;
-  }
-
-  public CfDef setReconciler(String reconciler) {
-    this.reconciler = reconciler;
-    return this;
-  }
-
-  public void unsetReconciler() {
-    this.reconciler = null;
-  }
-
-  /** Returns true if field reconciler is set (has been asigned a value) and false otherwise */
-  public boolean isSetReconciler() {
-    return this.reconciler != null;
-  }
-
-  public void setReconcilerIsSet(boolean value) {
-    if (!value) {
-      this.reconciler = null;
-    }
-  }
-
   public String getComment() {
     return this.comment;
   }
@@ -801,14 +732,6 @@ public void setFieldValue(_Fields field, Object value) {
       }
       break;
 
-    case CLOCK_TYPE:
-      if (value == null) {
-        unsetClock_type();
-      } else {
-        setClock_type((String)value);
-      }
-      break;
-
     case COMPARATOR_TYPE:
       if (value == null) {
         unsetComparator_type();
@@ -825,14 +748,6 @@ public void setFieldValue(_Fields field, Object value) {
       }
       break;
 
-    case RECONCILER:
-      if (value == null) {
-        unsetReconciler();
-      } else {
-        setReconciler((String)value);
-      }
-      break;
-
     case COMMENT:
       if (value == null) {
         unsetComment();
@@ -939,18 +854,12 @@ public Object getFieldValue(_Fields field) {
     case COLUMN_TYPE:
       return getColumn_type();
 
-    case CLOCK_TYPE:
-      return getClock_type();
-
     case COMPARATOR_TYPE:
       return getComparator_type();
 
     case SUBCOMPARATOR_TYPE:
       return getSubcomparator_type();
 
-    case RECONCILER:
-      return getReconciler();
-
     case COMMENT:
       return getComment();
 
@@ -1001,14 +910,10 @@ public boolean isSet(_Fields field) {
       return isSetName();
     case COLUMN_TYPE:
       return isSetColumn_type();
-    case CLOCK_TYPE:
-      return isSetClock_type();
     case COMPARATOR_TYPE:
       return isSetComparator_type();
     case SUBCOMPARATOR_TYPE:
       return isSetSubcomparator_type();
-    case RECONCILER:
-      return isSetReconciler();
     case COMMENT:
       return isSetComment();
     case ROW_CACHE_SIZE:
@@ -1079,15 +984,6 @@ public boolean equals(CfDef that) {
         return false;
     }
 
-    boolean this_present_clock_type = true && this.isSetClock_type();
-    boolean that_present_clock_type = true && that.isSetClock_type();
-    if (this_present_clock_type || that_present_clock_type) {
-      if (!(this_present_clock_type && that_present_clock_type))
-        return false;
-      if (!this.clock_type.equals(that.clock_type))
-        return false;
-    }
-
     boolean this_present_comparator_type = true && this.isSetComparator_type();
     boolean that_present_comparator_type = true && that.isSetComparator_type();
     if (this_present_comparator_type || that_present_comparator_type) {
@@ -1106,15 +1002,6 @@ public boolean equals(CfDef that) {
         return false;
     }
 
-    boolean this_present_reconciler = true && this.isSetReconciler();
-    boolean that_present_reconciler = true && that.isSetReconciler();
-    if (this_present_reconciler || that_present_reconciler) {
-      if (!(this_present_reconciler && that_present_reconciler))
-        return false;
-      if (!this.reconciler.equals(that.reconciler))
-        return false;
-    }
-
     boolean this_present_comment = true && this.isSetComment();
     boolean that_present_comment = true && that.isSetComment();
     if (this_present_comment || that_present_comment) {
@@ -1219,7 +1106,89 @@ public boolean equals(CfDef that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_keyspace = true && (isSetKeyspace());
+    builder.append(present_keyspace);
+    if (present_keyspace)
+      builder.append(keyspace);
+
+    boolean present_name = true && (isSetName());
+    builder.append(present_name);
+    if (present_name)
+      builder.append(name);
+
+    boolean present_column_type = true && (isSetColumn_type());
+    builder.append(present_column_type);
+    if (present_column_type)
+      builder.append(column_type);
+
+    boolean present_comparator_type = true && (isSetComparator_type());
+    builder.append(present_comparator_type);
+    if (present_comparator_type)
+      builder.append(comparator_type);
+
+    boolean present_subcomparator_type = true && (isSetSubcomparator_type());
+    builder.append(present_subcomparator_type);
+    if (present_subcomparator_type)
+      builder.append(subcomparator_type);
+
+    boolean present_comment = true && (isSetComment());
+    builder.append(present_comment);
+    if (present_comment)
+      builder.append(comment);
+
+    boolean present_row_cache_size = true && (isSetRow_cache_size());
+    builder.append(present_row_cache_size);
+    if (present_row_cache_size)
+      builder.append(row_cache_size);
+
+    boolean present_preload_row_cache = true && (isSetPreload_row_cache());
+    builder.append(present_preload_row_cache);
+    if (present_preload_row_cache)
+      builder.append(preload_row_cache);
+
+    boolean present_key_cache_size = true && (isSetKey_cache_size());
+    builder.append(present_key_cache_size);
+    if (present_key_cache_size)
+      builder.append(key_cache_size);
+
+    boolean present_read_repair_chance = true && (isSetRead_repair_chance());
+    builder.append(present_read_repair_chance);
+    if (present_read_repair_chance)
+      builder.append(read_repair_chance);
+
+    boolean present_column_metadata = true && (isSetColumn_metadata());
+    builder.append(present_column_metadata);
+    if (present_column_metadata)
+      builder.append(column_metadata);
+
+    boolean present_gc_grace_seconds = true && (isSetGc_grace_seconds());
+    builder.append(present_gc_grace_seconds);
+    if (present_gc_grace_seconds)
+      builder.append(gc_grace_seconds);
+
+    boolean present_default_validation_class = true && (isSetDefault_validation_class());
+    builder.append(present_default_validation_class);
+    if (present_default_validation_class)
+      builder.append(default_validation_class);
+
+    boolean present_id = true && (isSetId());
+    builder.append(present_id);
+    if (present_id)
+      builder.append(id);
+
+    boolean present_min_compaction_threshold = true && (isSetMin_compaction_threshold());
+    builder.append(present_min_compaction_threshold);
+    if (present_min_compaction_threshold)
+      builder.append(min_compaction_threshold);
+
+    boolean present_max_compaction_threshold = true && (isSetMax_compaction_threshold());
+    builder.append(present_max_compaction_threshold);
+    if (present_max_compaction_threshold)
+      builder.append(max_compaction_threshold);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(CfDef other) {
@@ -1257,15 +1226,6 @@ public int compareTo(CfDef other) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetClock_type()).compareTo(typedOther.isSetClock_type());
-    if (lastComparison != 0) {
-      return lastComparison;
-    }
-    if (isSetClock_type()) {      lastComparison = TBaseHelper.compareTo(this.clock_type, typedOther.clock_type);
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-    }
     lastComparison = Boolean.valueOf(isSetComparator_type()).compareTo(typedOther.isSetComparator_type());
     if (lastComparison != 0) {
       return lastComparison;
@@ -1284,15 +1244,6 @@ public int compareTo(CfDef other) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetReconciler()).compareTo(typedOther.isSetReconciler());
-    if (lastComparison != 0) {
-      return lastComparison;
-    }
-    if (isSetReconciler()) {      lastComparison = TBaseHelper.compareTo(this.reconciler, typedOther.reconciler);
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-    }
     lastComparison = Boolean.valueOf(isSetComment()).compareTo(typedOther.isSetComment());
     if (lastComparison != 0) {
       return lastComparison;
@@ -1426,13 +1377,6 @@ public void read(TProtocol iprot) throws TException {
             TProtocolUtil.skip(iprot, field.type);
           }
           break;
-        case 4: // CLOCK_TYPE
-          if (field.type == TType.STRING) {
-            this.clock_type = iprot.readString();
-          } else { 
-            TProtocolUtil.skip(iprot, field.type);
-          }
-          break;
         case 5: // COMPARATOR_TYPE
           if (field.type == TType.STRING) {
             this.comparator_type = iprot.readString();
@@ -1447,13 +1391,6 @@ public void read(TProtocol iprot) throws TException {
             TProtocolUtil.skip(iprot, field.type);
           }
           break;
-        case 7: // RECONCILER
-          if (field.type == TType.STRING) {
-            this.reconciler = iprot.readString();
-          } else { 
-            TProtocolUtil.skip(iprot, field.type);
-          }
-          break;
         case 8: // COMMENT
           if (field.type == TType.STRING) {
             this.comment = iprot.readString();
@@ -1582,13 +1519,6 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldEnd();
       }
     }
-    if (this.clock_type != null) {
-      if (isSetClock_type()) {
-        oprot.writeFieldBegin(CLOCK_TYPE_FIELD_DESC);
-        oprot.writeString(this.clock_type);
-        oprot.writeFieldEnd();
-      }
-    }
     if (this.comparator_type != null) {
       if (isSetComparator_type()) {
         oprot.writeFieldBegin(COMPARATOR_TYPE_FIELD_DESC);
@@ -1603,13 +1533,6 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldEnd();
       }
     }
-    if (this.reconciler != null) {
-      if (isSetReconciler()) {
-        oprot.writeFieldBegin(RECONCILER_FIELD_DESC);
-        oprot.writeString(this.reconciler);
-        oprot.writeFieldEnd();
-      }
-    }
     if (this.comment != null) {
       if (isSetComment()) {
         oprot.writeFieldBegin(COMMENT_FIELD_DESC);
@@ -1712,16 +1635,6 @@ public String toString() {
       }
       first = false;
     }
-    if (isSetClock_type()) {
-      if (!first) sb.append(", ");
-      sb.append("clock_type:");
-      if (this.clock_type == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.clock_type);
-      }
-      first = false;
-    }
     if (isSetComparator_type()) {
       if (!first) sb.append(", ");
       sb.append("comparator_type:");
@@ -1742,16 +1655,6 @@ public String toString() {
       }
       first = false;
     }
-    if (isSetReconciler()) {
-      if (!first) sb.append(", ");
-      sb.append("reconciler:");
-      if (this.reconciler == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.reconciler);
-      }
-      first = false;
-    }
     if (isSetComment()) {
       if (!first) sb.append(", ");
       sb.append("comment:");
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Clock.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Clock.java
index 68a1cbf9..e69de29b 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Clock.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Clock.java
@@ -1,340 +0,0 @@
-/**
- * Autogenerated by Thrift
- *
- * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
- */
-package org.apache.cassandra.thrift;
-/*
- * 
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * 
- *   http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- * 
- */
-
-
-import java.util.List;
-import java.util.ArrayList;
-import java.util.Map;
-import java.util.HashMap;
-import java.util.EnumMap;
-import java.util.Set;
-import java.util.HashSet;
-import java.util.EnumSet;
-import java.util.Collections;
-import java.util.BitSet;
-import java.util.Arrays;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import org.apache.thrift.*;
-import org.apache.thrift.async.*;
-import org.apache.thrift.meta_data.*;
-import org.apache.thrift.transport.*;
-import org.apache.thrift.protocol.*;
-
-/**
- * Encapsulate types of conflict resolution.
- * 
- * @param timestamp. User-supplied timestamp. When two columns with this type of clock conflict, the one with the
- *                   highest timestamp is the one whose value the system will converge to. No other assumptions
- *                   are made about what the timestamp represents, but using microseconds-since-epoch is customary.
- */
-public class Clock implements TBase<Clock, Clock._Fields>, java.io.Serializable, Cloneable {
-  private static final TStruct STRUCT_DESC = new TStruct("Clock");
-
-  private static final TField TIMESTAMP_FIELD_DESC = new TField("timestamp", TType.I64, (short)1);
-
-  public long timestamp;
-
-  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
-  public enum _Fields implements TFieldIdEnum {
-    TIMESTAMP((short)1, "timestamp");
-
-    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
-
-    static {
-      for (_Fields field : EnumSet.allOf(_Fields.class)) {
-        byName.put(field.getFieldName(), field);
-      }
-    }
-
-    /**
-     * Find the _Fields constant that matches fieldId, or null if its not found.
-     */
-    public static _Fields findByThriftId(int fieldId) {
-      switch(fieldId) {
-        case 1: // TIMESTAMP
-          return TIMESTAMP;
-        default:
-          return null;
-      }
-    }
-
-    /**
-     * Find the _Fields constant that matches fieldId, throwing an exception
-     * if it is not found.
-     */
-    public static _Fields findByThriftIdOrThrow(int fieldId) {
-      _Fields fields = findByThriftId(fieldId);
-      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
-      return fields;
-    }
-
-    /**
-     * Find the _Fields constant that matches name, or null if its not found.
-     */
-    public static _Fields findByName(String name) {
-      return byName.get(name);
-    }
-
-    private final short _thriftId;
-    private final String _fieldName;
-
-    _Fields(short thriftId, String fieldName) {
-      _thriftId = thriftId;
-      _fieldName = fieldName;
-    }
-
-    public short getThriftFieldId() {
-      return _thriftId;
-    }
-
-    public String getFieldName() {
-      return _fieldName;
-    }
-  }
-
-  // isset id assignments
-  private static final int __TIMESTAMP_ISSET_ID = 0;
-  private BitSet __isset_bit_vector = new BitSet(1);
-
-  public static final Map<_Fields, FieldMetaData> metaDataMap;
-  static {
-    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
-    tmpMap.put(_Fields.TIMESTAMP, new FieldMetaData("timestamp", TFieldRequirementType.REQUIRED, 
-        new FieldValueMetaData(TType.I64)));
-    metaDataMap = Collections.unmodifiableMap(tmpMap);
-    FieldMetaData.addStructMetaDataMap(Clock.class, metaDataMap);
-  }
-
-  public Clock() {
-  }
-
-  public Clock(
-    long timestamp)
-  {
-    this();
-    this.timestamp = timestamp;
-    setTimestampIsSet(true);
-  }
-
-  /**
-   * Performs a deep copy on <i>other</i>.
-   */
-  public Clock(Clock other) {
-    __isset_bit_vector.clear();
-    __isset_bit_vector.or(other.__isset_bit_vector);
-    this.timestamp = other.timestamp;
-  }
-
-  public Clock deepCopy() {
-    return new Clock(this);
-  }
-
-  @Deprecated
-  public Clock clone() {
-    return new Clock(this);
-  }
-
-  public long getTimestamp() {
-    return this.timestamp;
-  }
-
-  public Clock setTimestamp(long timestamp) {
-    this.timestamp = timestamp;
-    setTimestampIsSet(true);
-    return this;
-  }
-
-  public void unsetTimestamp() {
-    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
-  }
-
-  /** Returns true if field timestamp is set (has been asigned a value) and false otherwise */
-  public boolean isSetTimestamp() {
-    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
-  }
-
-  public void setTimestampIsSet(boolean value) {
-    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
-  }
-
-  public void setFieldValue(_Fields field, Object value) {
-    switch (field) {
-    case TIMESTAMP:
-      if (value == null) {
-        unsetTimestamp();
-      } else {
-        setTimestamp((Long)value);
-      }
-      break;
-
-    }
-  }
-
-  public void setFieldValue(int fieldID, Object value) {
-    setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
-  }
-
-  public Object getFieldValue(_Fields field) {
-    switch (field) {
-    case TIMESTAMP:
-      return new Long(getTimestamp());
-
-    }
-    throw new IllegalStateException();
-  }
-
-  public Object getFieldValue(int fieldId) {
-    return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
-  }
-
-  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
-  public boolean isSet(_Fields field) {
-    switch (field) {
-    case TIMESTAMP:
-      return isSetTimestamp();
-    }
-    throw new IllegalStateException();
-  }
-
-  public boolean isSet(int fieldID) {
-    return isSet(_Fields.findByThriftIdOrThrow(fieldID));
-  }
-
-  @Override
-  public boolean equals(Object that) {
-    if (that == null)
-      return false;
-    if (that instanceof Clock)
-      return this.equals((Clock)that);
-    return false;
-  }
-
-  public boolean equals(Clock that) {
-    if (that == null)
-      return false;
-
-    boolean this_present_timestamp = true;
-    boolean that_present_timestamp = true;
-    if (this_present_timestamp || that_present_timestamp) {
-      if (!(this_present_timestamp && that_present_timestamp))
-        return false;
-      if (this.timestamp != that.timestamp)
-        return false;
-    }
-
-    return true;
-  }
-
-  @Override
-  public int hashCode() {
-    return 0;
-  }
-
-  public int compareTo(Clock other) {
-    if (!getClass().equals(other.getClass())) {
-      return getClass().getName().compareTo(other.getClass().getName());
-    }
-
-    int lastComparison = 0;
-    Clock typedOther = (Clock)other;
-
-    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
-    if (lastComparison != 0) {
-      return lastComparison;
-    }
-    if (isSetTimestamp()) {      lastComparison = TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-    }
-    return 0;
-  }
-
-  public void read(TProtocol iprot) throws TException {
-    TField field;
-    iprot.readStructBegin();
-    while (true)
-    {
-      field = iprot.readFieldBegin();
-      if (field.type == TType.STOP) { 
-        break;
-      }
-      switch (field.id) {
-        case 1: // TIMESTAMP
-          if (field.type == TType.I64) {
-            this.timestamp = iprot.readI64();
-            setTimestampIsSet(true);
-          } else { 
-            TProtocolUtil.skip(iprot, field.type);
-          }
-          break;
-        default:
-          TProtocolUtil.skip(iprot, field.type);
-      }
-      iprot.readFieldEnd();
-    }
-    iprot.readStructEnd();
-
-    // check for required fields of primitive type, which can't be checked in the validate method
-    if (!isSetTimestamp()) {
-      throw new TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
-    }
-    validate();
-  }
-
-  public void write(TProtocol oprot) throws TException {
-    validate();
-
-    oprot.writeStructBegin(STRUCT_DESC);
-    oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
-    oprot.writeI64(this.timestamp);
-    oprot.writeFieldEnd();
-    oprot.writeFieldStop();
-    oprot.writeStructEnd();
-  }
-
-  @Override
-  public String toString() {
-    StringBuilder sb = new StringBuilder("Clock(");
-    boolean first = true;
-
-    sb.append("timestamp:");
-    sb.append(this.timestamp);
-    first = false;
-    sb.append(")");
-    return sb.toString();
-  }
-
-  public void validate() throws TException {
-    // check for required fields
-    // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
-  }
-
-}
-
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java
index eab397c0..29a824f3 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Column.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -50,7 +51,7 @@
  * Basic unit of data within a ColumnFamily.
  * @param name, the name by which this column is set and retrieved.  Maximum 64KB long.
  * @param value. The data associated with the name.  Maximum 2GB long, but in practice you should limit it to small numbers of MB (since Thrift must read the full value into memory to operate on it).
- * @param clock. The clock is used for conflict detection/resolution when two columns with same name need to be compared.
+ * @param timestamp. The timestamp is used for conflict detection/resolution when two columns with same name need to be compared.
  * @param ttl. An optional, positive delay (in seconds) after which the column will be automatically deleted.
  */
 public class Column implements TBase<Column, Column._Fields>, java.io.Serializable, Cloneable {
@@ -58,19 +59,19 @@
 
   private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)1);
   private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRING, (short)2);
-  private static final TField CLOCK_FIELD_DESC = new TField("clock", TType.STRUCT, (short)3);
+  private static final TField TIMESTAMP_FIELD_DESC = new TField("timestamp", TType.I64, (short)3);
   private static final TField TTL_FIELD_DESC = new TField("ttl", TType.I32, (short)4);
 
   public byte[] name;
   public byte[] value;
-  public Clock clock;
+  public long timestamp;
   public int ttl;
 
   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
   public enum _Fields implements TFieldIdEnum {
     NAME((short)1, "name"),
     VALUE((short)2, "value"),
-    CLOCK((short)3, "clock"),
+    TIMESTAMP((short)3, "timestamp"),
     TTL((short)4, "ttl");
 
     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
@@ -90,8 +91,8 @@ public static _Fields findByThriftId(int fieldId) {
           return NAME;
         case 2: // VALUE
           return VALUE;
-        case 3: // CLOCK
-          return CLOCK;
+        case 3: // TIMESTAMP
+          return TIMESTAMP;
         case 4: // TTL
           return TTL;
         default:
@@ -134,8 +135,9 @@ public String getFieldName() {
   }
 
   // isset id assignments
-  private static final int __TTL_ISSET_ID = 0;
-  private BitSet __isset_bit_vector = new BitSet(1);
+  private static final int __TIMESTAMP_ISSET_ID = 0;
+  private static final int __TTL_ISSET_ID = 1;
+  private BitSet __isset_bit_vector = new BitSet(2);
 
   public static final Map<_Fields, FieldMetaData> metaDataMap;
   static {
@@ -144,8 +146,8 @@ public String getFieldName() {
         new FieldValueMetaData(TType.STRING)));
     tmpMap.put(_Fields.VALUE, new FieldMetaData("value", TFieldRequirementType.REQUIRED, 
         new FieldValueMetaData(TType.STRING)));
-    tmpMap.put(_Fields.CLOCK, new FieldMetaData("clock", TFieldRequirementType.REQUIRED, 
-        new StructMetaData(TType.STRUCT, Clock.class)));
+    tmpMap.put(_Fields.TIMESTAMP, new FieldMetaData("timestamp", TFieldRequirementType.REQUIRED, 
+        new FieldValueMetaData(TType.I64)));
     tmpMap.put(_Fields.TTL, new FieldMetaData("ttl", TFieldRequirementType.OPTIONAL, 
         new FieldValueMetaData(TType.I32)));
     metaDataMap = Collections.unmodifiableMap(tmpMap);
@@ -158,12 +160,13 @@ public Column() {
   public Column(
     byte[] name,
     byte[] value,
-    Clock clock)
+    long timestamp)
   {
     this();
     this.name = name;
     this.value = value;
-    this.clock = clock;
+    this.timestamp = timestamp;
+    setTimestampIsSet(true);
   }
 
   /**
@@ -180,9 +183,7 @@ public Column(Column other) {
       this.value = new byte[other.value.length];
       System.arraycopy(other.value, 0, value, 0, other.value.length);
     }
-    if (other.isSetClock()) {
-      this.clock = new Clock(other.clock);
-    }
+    this.timestamp = other.timestamp;
     this.ttl = other.ttl;
   }
 
@@ -243,28 +244,27 @@ public void setValueIsSet(boolean value) {
     }
   }
 
-  public Clock getClock() {
-    return this.clock;
+  public long getTimestamp() {
+    return this.timestamp;
   }
 
-  public Column setClock(Clock clock) {
-    this.clock = clock;
+  public Column setTimestamp(long timestamp) {
+    this.timestamp = timestamp;
+    setTimestampIsSet(true);
     return this;
   }
 
-  public void unsetClock() {
-    this.clock = null;
+  public void unsetTimestamp() {
+    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
   }
 
-  /** Returns true if field clock is set (has been asigned a value) and false otherwise */
-  public boolean isSetClock() {
-    return this.clock != null;
+  /** Returns true if field timestamp is set (has been asigned a value) and false otherwise */
+  public boolean isSetTimestamp() {
+    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
   }
 
-  public void setClockIsSet(boolean value) {
-    if (!value) {
-      this.clock = null;
-    }
+  public void setTimestampIsSet(boolean value) {
+    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
   }
 
   public int getTtl() {
@@ -308,11 +308,11 @@ public void setFieldValue(_Fields field, Object value) {
       }
       break;
 
-    case CLOCK:
+    case TIMESTAMP:
       if (value == null) {
-        unsetClock();
+        unsetTimestamp();
       } else {
-        setClock((Clock)value);
+        setTimestamp((Long)value);
       }
       break;
 
@@ -339,8 +339,8 @@ public Object getFieldValue(_Fields field) {
     case VALUE:
       return getValue();
 
-    case CLOCK:
-      return getClock();
+    case TIMESTAMP:
+      return new Long(getTimestamp());
 
     case TTL:
       return new Integer(getTtl());
@@ -360,8 +360,8 @@ public boolean isSet(_Fields field) {
       return isSetName();
     case VALUE:
       return isSetValue();
-    case CLOCK:
-      return isSetClock();
+    case TIMESTAMP:
+      return isSetTimestamp();
     case TTL:
       return isSetTtl();
     }
@@ -403,12 +403,12 @@ public boolean equals(Column that) {
         return false;
     }
 
-    boolean this_present_clock = true && this.isSetClock();
-    boolean that_present_clock = true && that.isSetClock();
-    if (this_present_clock || that_present_clock) {
-      if (!(this_present_clock && that_present_clock))
+    boolean this_present_timestamp = true;
+    boolean that_present_timestamp = true;
+    if (this_present_timestamp || that_present_timestamp) {
+      if (!(this_present_timestamp && that_present_timestamp))
         return false;
-      if (!this.clock.equals(that.clock))
+      if (this.timestamp != that.timestamp)
         return false;
     }
 
@@ -426,7 +426,29 @@ public boolean equals(Column that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_name = true && (isSetName());
+    builder.append(present_name);
+    if (present_name)
+      builder.append(name);
+
+    boolean present_value = true && (isSetValue());
+    builder.append(present_value);
+    if (present_value)
+      builder.append(value);
+
+    boolean present_timestamp = true;
+    builder.append(present_timestamp);
+    if (present_timestamp)
+      builder.append(timestamp);
+
+    boolean present_ttl = true && (isSetTtl());
+    builder.append(present_ttl);
+    if (present_ttl)
+      builder.append(ttl);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(Column other) {
@@ -455,11 +477,11 @@ public int compareTo(Column other) {
         return lastComparison;
       }
     }
-    lastComparison = Boolean.valueOf(isSetClock()).compareTo(typedOther.isSetClock());
+    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    if (isSetClock()) {      lastComparison = TBaseHelper.compareTo(this.clock, typedOther.clock);
+    if (isSetTimestamp()) {      lastComparison = TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
       if (lastComparison != 0) {
         return lastComparison;
       }
@@ -500,10 +522,10 @@ public void read(TProtocol iprot) throws TException {
             TProtocolUtil.skip(iprot, field.type);
           }
           break;
-        case 3: // CLOCK
-          if (field.type == TType.STRUCT) {
-            this.clock = new Clock();
-            this.clock.read(iprot);
+        case 3: // TIMESTAMP
+          if (field.type == TType.I64) {
+            this.timestamp = iprot.readI64();
+            setTimestampIsSet(true);
           } else { 
             TProtocolUtil.skip(iprot, field.type);
           }
@@ -524,6 +546,9 @@ public void read(TProtocol iprot) throws TException {
     iprot.readStructEnd();
 
     // check for required fields of primitive type, which can't be checked in the validate method
+    if (!isSetTimestamp()) {
+      throw new TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
+    }
     validate();
   }
 
@@ -541,11 +566,9 @@ public void write(TProtocol oprot) throws TException {
       oprot.writeBinary(this.value);
       oprot.writeFieldEnd();
     }
-    if (this.clock != null) {
-      oprot.writeFieldBegin(CLOCK_FIELD_DESC);
-      this.clock.write(oprot);
+    oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
+    oprot.writeI64(this.timestamp);
       oprot.writeFieldEnd();
-    }
     if (isSetTtl()) {
       oprot.writeFieldBegin(TTL_FIELD_DESC);
       oprot.writeI32(this.ttl);
@@ -586,12 +609,8 @@ public String toString() {
     }
     first = false;
     if (!first) sb.append(", ");
-    sb.append("clock:");
-    if (this.clock == null) {
-      sb.append("null");
-    } else {
-      sb.append(this.clock);
-    }
+    sb.append("timestamp:");
+    sb.append(this.timestamp);
     first = false;
     if (isSetTtl()) {
       if (!first) sb.append(", ");
@@ -611,9 +630,7 @@ public void validate() throws TException {
     if (value == null) {
       throw new TProtocolException("Required field 'value' was not present! Struct: " + toString());
     }
-    if (clock == null) {
-      throw new TProtocolException("Required field 'clock' was not present! Struct: " + toString());
-    }
+    // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
   }
 
 }
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnDef.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnDef.java
index 2784867b..a168cca9 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnDef.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnDef.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -431,7 +432,29 @@ public boolean equals(ColumnDef that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_name = true && (isSetName());
+    builder.append(present_name);
+    if (present_name)
+      builder.append(name);
+
+    boolean present_validation_class = true && (isSetValidation_class());
+    builder.append(present_validation_class);
+    if (present_validation_class)
+      builder.append(validation_class);
+
+    boolean present_index_type = true && (isSetIndex_type());
+    builder.append(present_index_type);
+    if (present_index_type)
+      builder.append(index_type.getValue());
+
+    boolean present_index_name = true && (isSetIndex_name());
+    builder.append(present_index_name);
+    if (present_index_name)
+      builder.append(index_name);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(ColumnDef other) {
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnOrSuperColumn.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnOrSuperColumn.java
index 69f0d3c2..6f12e3fd 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnOrSuperColumn.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnOrSuperColumn.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -303,7 +304,19 @@ public boolean equals(ColumnOrSuperColumn that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_column = true && (isSetColumn());
+    builder.append(present_column);
+    if (present_column)
+      builder.append(column);
+
+    boolean present_super_column = true && (isSetSuper_column());
+    builder.append(present_super_column);
+    if (present_super_column)
+      builder.append(super_column);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(ColumnOrSuperColumn other) {
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnParent.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnParent.java
index 12cdb5cd..593fe617 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnParent.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnParent.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -307,7 +308,19 @@ public boolean equals(ColumnParent that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_column_family = true && (isSetColumn_family());
+    builder.append(present_column_family);
+    if (present_column_family)
+      builder.append(column_family);
+
+    boolean present_super_column = true && (isSetSuper_column());
+    builder.append(present_super_column);
+    if (present_super_column)
+      builder.append(super_column);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(ColumnParent other) {
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnPath.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnPath.java
index 3350a099..13c77939 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnPath.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/ColumnPath.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -368,7 +369,24 @@ public boolean equals(ColumnPath that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_column_family = true && (isSetColumn_family());
+    builder.append(present_column_family);
+    if (present_column_family)
+      builder.append(column_family);
+
+    boolean present_super_column = true && (isSetSuper_column());
+    builder.append(present_super_column);
+    if (present_super_column)
+      builder.append(super_column);
+
+    boolean present_column = true && (isSetColumn());
+    builder.append(present_column);
+    if (present_column)
+      builder.append(column);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(ColumnPath other) {
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java
index 59c83e35..c3accf1b 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -42,6 +43,6 @@
 
 public class Constants {
 
-  public static final String VERSION = "16.0.0";
+  public static final String VERSION = "17.0.0";
 
 }
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Deletion.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Deletion.java
index 46343727..fd9e15b5 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Deletion.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Deletion.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -49,17 +50,17 @@
 public class Deletion implements TBase<Deletion, Deletion._Fields>, java.io.Serializable, Cloneable {
   private static final TStruct STRUCT_DESC = new TStruct("Deletion");
 
-  private static final TField CLOCK_FIELD_DESC = new TField("clock", TType.STRUCT, (short)1);
+  private static final TField TIMESTAMP_FIELD_DESC = new TField("timestamp", TType.I64, (short)1);
   private static final TField SUPER_COLUMN_FIELD_DESC = new TField("super_column", TType.STRING, (short)2);
   private static final TField PREDICATE_FIELD_DESC = new TField("predicate", TType.STRUCT, (short)3);
 
-  public Clock clock;
+  public long timestamp;
   public byte[] super_column;
   public SlicePredicate predicate;
 
   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
   public enum _Fields implements TFieldIdEnum {
-    CLOCK((short)1, "clock"),
+    TIMESTAMP((short)1, "timestamp"),
     SUPER_COLUMN((short)2, "super_column"),
     PREDICATE((short)3, "predicate");
 
@@ -76,8 +77,8 @@
      */
     public static _Fields findByThriftId(int fieldId) {
       switch(fieldId) {
-        case 1: // CLOCK
-          return CLOCK;
+        case 1: // TIMESTAMP
+          return TIMESTAMP;
         case 2: // SUPER_COLUMN
           return SUPER_COLUMN;
         case 3: // PREDICATE
@@ -122,12 +123,14 @@ public String getFieldName() {
   }
 
   // isset id assignments
+  private static final int __TIMESTAMP_ISSET_ID = 0;
+  private BitSet __isset_bit_vector = new BitSet(1);
 
   public static final Map<_Fields, FieldMetaData> metaDataMap;
   static {
     Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
-    tmpMap.put(_Fields.CLOCK, new FieldMetaData("clock", TFieldRequirementType.REQUIRED, 
-        new StructMetaData(TType.STRUCT, Clock.class)));
+    tmpMap.put(_Fields.TIMESTAMP, new FieldMetaData("timestamp", TFieldRequirementType.REQUIRED, 
+        new FieldValueMetaData(TType.I64)));
     tmpMap.put(_Fields.SUPER_COLUMN, new FieldMetaData("super_column", TFieldRequirementType.OPTIONAL, 
         new FieldValueMetaData(TType.STRING)));
     tmpMap.put(_Fields.PREDICATE, new FieldMetaData("predicate", TFieldRequirementType.OPTIONAL, 
@@ -140,19 +143,20 @@ public Deletion() {
   }
 
   public Deletion(
-    Clock clock)
+    long timestamp)
   {
     this();
-    this.clock = clock;
+    this.timestamp = timestamp;
+    setTimestampIsSet(true);
   }
 
   /**
    * Performs a deep copy on <i>other</i>.
    */
   public Deletion(Deletion other) {
-    if (other.isSetClock()) {
-      this.clock = new Clock(other.clock);
-    }
+    __isset_bit_vector.clear();
+    __isset_bit_vector.or(other.__isset_bit_vector);
+    this.timestamp = other.timestamp;
     if (other.isSetSuper_column()) {
       this.super_column = new byte[other.super_column.length];
       System.arraycopy(other.super_column, 0, super_column, 0, other.super_column.length);
@@ -171,28 +175,27 @@ public Deletion clone() {
     return new Deletion(this);
   }
 
-  public Clock getClock() {
-    return this.clock;
+  public long getTimestamp() {
+    return this.timestamp;
   }
 
-  public Deletion setClock(Clock clock) {
-    this.clock = clock;
+  public Deletion setTimestamp(long timestamp) {
+    this.timestamp = timestamp;
+    setTimestampIsSet(true);
     return this;
   }
 
-  public void unsetClock() {
-    this.clock = null;
+  public void unsetTimestamp() {
+    __isset_bit_vector.clear(__TIMESTAMP_ISSET_ID);
   }
 
-  /** Returns true if field clock is set (has been asigned a value) and false otherwise */
-  public boolean isSetClock() {
-    return this.clock != null;
+  /** Returns true if field timestamp is set (has been asigned a value) and false otherwise */
+  public boolean isSetTimestamp() {
+    return __isset_bit_vector.get(__TIMESTAMP_ISSET_ID);
   }
 
-  public void setClockIsSet(boolean value) {
-    if (!value) {
-      this.clock = null;
-    }
+  public void setTimestampIsSet(boolean value) {
+    __isset_bit_vector.set(__TIMESTAMP_ISSET_ID, value);
   }
 
   public byte[] getSuper_column() {
@@ -245,11 +248,11 @@ public void setPredicateIsSet(boolean value) {
 
   public void setFieldValue(_Fields field, Object value) {
     switch (field) {
-    case CLOCK:
+    case TIMESTAMP:
       if (value == null) {
-        unsetClock();
+        unsetTimestamp();
       } else {
-        setClock((Clock)value);
+        setTimestamp((Long)value);
       }
       break;
 
@@ -278,8 +281,8 @@ public void setFieldValue(int fieldID, Object value) {
 
   public Object getFieldValue(_Fields field) {
     switch (field) {
-    case CLOCK:
-      return getClock();
+    case TIMESTAMP:
+      return new Long(getTimestamp());
 
     case SUPER_COLUMN:
       return getSuper_column();
@@ -298,8 +301,8 @@ public Object getFieldValue(int fieldId) {
   /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
   public boolean isSet(_Fields field) {
     switch (field) {
-    case CLOCK:
-      return isSetClock();
+    case TIMESTAMP:
+      return isSetTimestamp();
     case SUPER_COLUMN:
       return isSetSuper_column();
     case PREDICATE:
@@ -325,12 +328,12 @@ public boolean equals(Deletion that) {
     if (that == null)
       return false;
 
-    boolean this_present_clock = true && this.isSetClock();
-    boolean that_present_clock = true && that.isSetClock();
-    if (this_present_clock || that_present_clock) {
-      if (!(this_present_clock && that_present_clock))
+    boolean this_present_timestamp = true;
+    boolean that_present_timestamp = true;
+    if (this_present_timestamp || that_present_timestamp) {
+      if (!(this_present_timestamp && that_present_timestamp))
         return false;
-      if (!this.clock.equals(that.clock))
+      if (this.timestamp != that.timestamp)
         return false;
     }
 
@@ -357,7 +360,24 @@ public boolean equals(Deletion that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_timestamp = true;
+    builder.append(present_timestamp);
+    if (present_timestamp)
+      builder.append(timestamp);
+
+    boolean present_super_column = true && (isSetSuper_column());
+    builder.append(present_super_column);
+    if (present_super_column)
+      builder.append(super_column);
+
+    boolean present_predicate = true && (isSetPredicate());
+    builder.append(present_predicate);
+    if (present_predicate)
+      builder.append(predicate);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(Deletion other) {
@@ -368,11 +388,11 @@ public int compareTo(Deletion other) {
     int lastComparison = 0;
     Deletion typedOther = (Deletion)other;
 
-    lastComparison = Boolean.valueOf(isSetClock()).compareTo(typedOther.isSetClock());
+    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
     if (lastComparison != 0) {
       return lastComparison;
     }
-    if (isSetClock()) {      lastComparison = TBaseHelper.compareTo(this.clock, typedOther.clock);
+    if (isSetTimestamp()) {      lastComparison = TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
       if (lastComparison != 0) {
         return lastComparison;
       }
@@ -408,10 +428,10 @@ public void read(TProtocol iprot) throws TException {
         break;
       }
       switch (field.id) {
-        case 1: // CLOCK
-          if (field.type == TType.STRUCT) {
-            this.clock = new Clock();
-            this.clock.read(iprot);
+        case 1: // TIMESTAMP
+          if (field.type == TType.I64) {
+            this.timestamp = iprot.readI64();
+            setTimestampIsSet(true);
           } else { 
             TProtocolUtil.skip(iprot, field.type);
           }
@@ -439,6 +459,9 @@ public void read(TProtocol iprot) throws TException {
     iprot.readStructEnd();
 
     // check for required fields of primitive type, which can't be checked in the validate method
+    if (!isSetTimestamp()) {
+      throw new TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
+    }
     validate();
   }
 
@@ -446,11 +469,9 @@ public void write(TProtocol oprot) throws TException {
     validate();
 
     oprot.writeStructBegin(STRUCT_DESC);
-    if (this.clock != null) {
-      oprot.writeFieldBegin(CLOCK_FIELD_DESC);
-      this.clock.write(oprot);
+    oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
+    oprot.writeI64(this.timestamp);
       oprot.writeFieldEnd();
-    }
     if (this.super_column != null) {
       if (isSetSuper_column()) {
         oprot.writeFieldBegin(SUPER_COLUMN_FIELD_DESC);
@@ -474,12 +495,8 @@ public String toString() {
     StringBuilder sb = new StringBuilder("Deletion(");
     boolean first = true;
 
-    sb.append("clock:");
-    if (this.clock == null) {
-      sb.append("null");
-    } else {
-      sb.append(this.clock);
-    }
+    sb.append("timestamp:");
+    sb.append(this.timestamp);
     first = false;
     if (isSetSuper_column()) {
       if (!first) sb.append(", ");
@@ -512,9 +529,7 @@ public String toString() {
 
   public void validate() throws TException {
     // check for required fields
-    if (clock == null) {
-      throw new TProtocolException("Required field 'clock' was not present! Struct: " + toString());
-    }
+    // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
   }
 
 }
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/IndexClause.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/IndexClause.java
index 208bb692..07010c77 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/IndexClause.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/IndexClause.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -385,7 +386,24 @@ public boolean equals(IndexClause that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_expressions = true && (isSetExpressions());
+    builder.append(present_expressions);
+    if (present_expressions)
+      builder.append(expressions);
+
+    boolean present_start_key = true && (isSetStart_key());
+    builder.append(present_start_key);
+    if (present_start_key)
+      builder.append(start_key);
+
+    boolean present_count = true;
+    builder.append(present_count);
+    if (present_count)
+      builder.append(count);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(IndexClause other) {
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/IndexExpression.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/IndexExpression.java
index 81a215d8..c5adc744 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/IndexExpression.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/IndexExpression.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -378,7 +379,24 @@ public boolean equals(IndexExpression that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_column_name = true && (isSetColumn_name());
+    builder.append(present_column_name);
+    if (present_column_name)
+      builder.append(column_name);
+
+    boolean present_op = true && (isSetOp());
+    builder.append(present_op);
+    if (present_op)
+      builder.append(op.getValue());
+
+    boolean present_value = true && (isSetValue());
+    builder.append(present_value);
+    if (present_value)
+      builder.append(value);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(IndexExpression other) {
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/InvalidRequestException.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/InvalidRequestException.java
index 155fa634..f1fa0316 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/InvalidRequestException.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/InvalidRequestException.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -248,7 +249,14 @@ public boolean equals(InvalidRequestException that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_why = true && (isSetWhy());
+    builder.append(present_why);
+    if (present_why)
+      builder.append(why);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(InvalidRequestException other) {
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeyCount.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeyCount.java
index 5ef051fa..b3722a04 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeyCount.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeyCount.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -305,7 +306,19 @@ public boolean equals(KeyCount that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_key = true && (isSetKey());
+    builder.append(present_key);
+    if (present_key)
+      builder.append(key);
+
+    boolean present_count = true;
+    builder.append(present_count);
+    if (present_count)
+      builder.append(count);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(KeyCount other) {
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeyRange.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeyRange.java
index d46b9a95..e9c840b2 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeyRange.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeyRange.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -482,7 +483,34 @@ public boolean equals(KeyRange that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_start_key = true && (isSetStart_key());
+    builder.append(present_start_key);
+    if (present_start_key)
+      builder.append(start_key);
+
+    boolean present_end_key = true && (isSetEnd_key());
+    builder.append(present_end_key);
+    if (present_end_key)
+      builder.append(end_key);
+
+    boolean present_start_token = true && (isSetStart_token());
+    builder.append(present_start_token);
+    if (present_start_token)
+      builder.append(start_token);
+
+    boolean present_end_token = true && (isSetEnd_token());
+    builder.append(present_end_token);
+    if (present_end_token)
+      builder.append(end_token);
+
+    boolean present_count = true;
+    builder.append(present_count);
+    if (present_count)
+      builder.append(count);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(KeyRange other) {
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeySlice.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeySlice.java
index aaf9d8dc..266121ca 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeySlice.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeySlice.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -330,7 +331,19 @@ public boolean equals(KeySlice that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_key = true && (isSetKey());
+    builder.append(present_key);
+    if (present_key)
+      builder.append(key);
+
+    boolean present_columns = true && (isSetColumns());
+    builder.append(present_columns);
+    if (present_columns)
+      builder.append(columns);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(KeySlice other) {
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KsDef.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KsDef.java
index bc1e3ddf..2dd5ed61 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KsDef.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KsDef.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -521,7 +522,34 @@ public boolean equals(KsDef that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_name = true && (isSetName());
+    builder.append(present_name);
+    if (present_name)
+      builder.append(name);
+
+    boolean present_strategy_class = true && (isSetStrategy_class());
+    builder.append(present_strategy_class);
+    if (present_strategy_class)
+      builder.append(strategy_class);
+
+    boolean present_strategy_options = true && (isSetStrategy_options());
+    builder.append(present_strategy_options);
+    if (present_strategy_options)
+      builder.append(strategy_options);
+
+    boolean present_replication_factor = true;
+    builder.append(present_replication_factor);
+    if (present_replication_factor)
+      builder.append(replication_factor);
+
+    boolean present_cf_defs = true && (isSetCf_defs());
+    builder.append(present_cf_defs);
+    if (present_cf_defs)
+      builder.append(cf_defs);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(KsDef other) {
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Mutation.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Mutation.java
index 57cdab9d..9852d53d 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Mutation.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Mutation.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -298,7 +299,19 @@ public boolean equals(Mutation that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_column_or_supercolumn = true && (isSetColumn_or_supercolumn());
+    builder.append(present_column_or_supercolumn);
+    if (present_column_or_supercolumn)
+      builder.append(column_or_supercolumn);
+
+    boolean present_deletion = true && (isSetDeletion());
+    builder.append(present_deletion);
+    if (present_deletion)
+      builder.append(deletion);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(Mutation other) {
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/NotFoundException.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/NotFoundException.java
index cf70f8d3..16e5c26f 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/NotFoundException.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/NotFoundException.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -182,7 +183,9 @@ public boolean equals(NotFoundException that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    return builder.toHashCode();
   }
 
   public int compareTo(NotFoundException other) {
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SlicePredicate.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SlicePredicate.java
index b5e3cad3..bf86745e 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SlicePredicate.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SlicePredicate.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -327,7 +328,19 @@ public boolean equals(SlicePredicate that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_column_names = true && (isSetColumn_names());
+    builder.append(present_column_names);
+    if (present_column_names)
+      builder.append(column_names);
+
+    boolean present_slice_range = true && (isSetSlice_range());
+    builder.append(present_slice_range);
+    if (present_slice_range)
+      builder.append(slice_range);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(SlicePredicate other) {
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SliceRange.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SliceRange.java
index d7aea8ea..0d10f8f5 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SliceRange.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SliceRange.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -441,7 +442,29 @@ public boolean equals(SliceRange that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_start = true && (isSetStart());
+    builder.append(present_start);
+    if (present_start)
+      builder.append(start);
+
+    boolean present_finish = true && (isSetFinish());
+    builder.append(present_finish);
+    if (present_finish)
+      builder.append(finish);
+
+    boolean present_reversed = true;
+    builder.append(present_reversed);
+    if (present_reversed)
+      builder.append(reversed);
+
+    boolean present_count = true;
+    builder.append(present_count);
+    if (present_count)
+      builder.append(count);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(SliceRange other) {
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SuperColumn.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SuperColumn.java
index 051c0705..10b2870e 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SuperColumn.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SuperColumn.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -329,7 +330,19 @@ public boolean equals(SuperColumn that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_name = true && (isSetName());
+    builder.append(present_name);
+    if (present_name)
+      builder.append(name);
+
+    boolean present_columns = true && (isSetColumns());
+    builder.append(present_columns);
+    if (present_columns)
+      builder.append(columns);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(SuperColumn other) {
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/TimedOutException.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/TimedOutException.java
index 063b3240..371130fe 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/TimedOutException.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/TimedOutException.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -182,7 +183,9 @@ public boolean equals(TimedOutException that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    return builder.toHashCode();
   }
 
   public int compareTo(TimedOutException other) {
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/TokenRange.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/TokenRange.java
index afb6d12e..abe311e2 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/TokenRange.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/TokenRange.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -380,7 +381,24 @@ public boolean equals(TokenRange that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    boolean present_start_token = true && (isSetStart_token());
+    builder.append(present_start_token);
+    if (present_start_token)
+      builder.append(start_token);
+
+    boolean present_end_token = true && (isSetEnd_token());
+    builder.append(present_end_token);
+    if (present_end_token)
+      builder.append(end_token);
+
+    boolean present_endpoints = true && (isSetEndpoints());
+    builder.append(present_endpoints);
+    if (present_endpoints)
+      builder.append(endpoints);
+
+    return builder.toHashCode();
   }
 
   public int compareTo(TokenRange other) {
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/UnavailableException.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/UnavailableException.java
index be1e94cc..9f2a40f5 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/UnavailableException.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/UnavailableException.java
@@ -26,6 +26,7 @@
  */
 
 
+import org.apache.commons.lang.builder.HashCodeBuilder;
 import java.util.List;
 import java.util.ArrayList;
 import java.util.Map;
@@ -182,7 +183,9 @@ public boolean equals(UnavailableException that) {
 
   @Override
   public int hashCode() {
-    return 0;
+    HashCodeBuilder builder = new HashCodeBuilder();
+
+    return builder.toHashCode();
   }
 
   public int compareTo(UnavailableException other) {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/avro/AvroRecordFactory.java b/cassandra/trunk/src/java/org/apache/cassandra/avro/AvroRecordFactory.java
index c44fb6ee..159d5d17 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/avro/AvroRecordFactory.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/avro/AvroRecordFactory.java
@@ -30,25 +30,18 @@
 
 public class AvroRecordFactory
 {
-    public static Column newColumn(ByteBuffer name, ByteBuffer value, Clock clock)
+    public static Column newColumn(ByteBuffer name, ByteBuffer value, long timestamp)
     {
         Column column = new Column();
         column.name = name;
         column.value = value;
-        column.clock = clock;
+        column.timestamp = timestamp;
         return column;
     }
 
-    public static Clock newClock(long timestamp)
+    public static Column newColumn(byte[] name, byte[] value, long timestamp)
     {
-        Clock clock = new Clock();
-        clock.timestamp = timestamp;
-        return clock;
-    }
-    
-    public static Column newColumn(byte[] name, byte[] value, Clock clock)
-    {
-        return newColumn(ByteBuffer.wrap(name), ByteBuffer.wrap(value), clock);
+        return newColumn(ByteBuffer.wrap(name), ByteBuffer.wrap(value), timestamp);
     }
     
     public static SuperColumn newSuperColumn(ByteBuffer name, List<Column> columns)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/avro/AvroValidation.java b/cassandra/trunk/src/java/org/apache/cassandra/avro/AvroValidation.java
index 746cf471..0b5d7b9c 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/avro/AvroValidation.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/avro/AvroValidation.java
@@ -281,14 +281,6 @@ static void validateTtl(Column column) throws InvalidRequestException
             throw newInvalidRequestException("ttl must be a positive value");
     }
     
-    static IClock validateClock(Clock clock) throws InvalidRequestException
-    {
-        if (clock.timestamp >= 0)
-            return new TimestampClock(clock.timestamp);
-        
-        throw newInvalidRequestException("Clock must have a timestamp set");
-    }
-    
     static void validatePredicate(String keyspace, ColumnParent cp, SlicePredicate predicate)
     throws InvalidRequestException
     {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java b/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java
index d1d4b5bd..a303d942 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/avro/CassandraServer.java
@@ -212,18 +212,13 @@ public ColumnOrSuperColumn get(ByteBuffer key, ColumnPath columnPath, Consistenc
             if (column.isMarkedForDelete())
                 continue;
             
-            Column avroColumn = newColumn(column.name(), column.value(), avronateIClock(column.clock()));
+            Column avroColumn = newColumn(column.name(), column.value(), ((TimestampClock)column.clock()).timestamp());
             avroColumns.add(avroColumn);
         }
         
         return avroColumns;
     }
 
-    private static Clock avronateIClock(IClock clock)
-    {
-        return newClock(((org.apache.cassandra.db.TimestampClock) clock).timestamp());
-    }
-
     private GenericArray<ColumnOrSuperColumn> avronateColumns(Collection<IColumn> columns, boolean reverseOrder)
     {
         ArrayList<ColumnOrSuperColumn> avroColumns = new ArrayList<ColumnOrSuperColumn>(columns.size());
@@ -232,7 +227,7 @@ private static Clock avronateIClock(IClock clock)
             if (column.isMarkedForDelete())
                 continue;
             
-            Column avroColumn = newColumn(column.name(), column.value(), avronateIClock(column.clock()));
+            Column avroColumn = newColumn(column.name(), column.value(), ((TimestampClock)column.clock()).timestamp());
             
             if (column instanceof ExpiringColumn)
                 avroColumn.ttl = ((ExpiringColumn)column).getTimeToLive();
@@ -401,7 +396,7 @@ public Void insert(ByteBuffer key, ColumnParent parent, Column column, Consisten
                    parent.super_column == null ? null : parent.super_column.array(),
                    column.name.array()),
                    column.value.array(),
-                   unavronateClock(column.clock),
+                   unavronateClock(column.timestamp),
                    column.ttl == null ? 0 : column.ttl);
         }
         catch (MarshalException e)
@@ -413,7 +408,7 @@ public Void insert(ByteBuffer key, ColumnParent parent, Column column, Consisten
         return null;
     }
     
-    public Void remove(ByteBuffer key, ColumnPath columnPath, Clock clock, ConsistencyLevel consistencyLevel)
+    public Void remove(ByteBuffer key, ColumnPath columnPath, long timestamp, ConsistencyLevel consistencyLevel)
     throws AvroRemoteException, InvalidRequestException, UnavailableException, TimedOutException
     {
         if (logger.isDebugEnabled())
@@ -421,11 +416,10 @@ public Void remove(ByteBuffer key, ColumnPath columnPath, Clock clock, Consisten
         
         AvroValidation.validateKey(key.array());
         AvroValidation.validateColumnPath(clientState.getKeyspace(), columnPath);
-        IClock dbClock = AvroValidation.validateClock(clock);
         
         RowMutation rm = new RowMutation(clientState.getKeyspace(), key.array());
         byte[] superName = columnPath.super_column == null ? null : columnPath.super_column.array();
-        rm.delete(new QueryPath(columnPath.column_family.toString(), superName), dbClock);
+        rm.delete(new QueryPath(columnPath.column_family.toString(), superName), unavronateClock(timestamp));
         
         doInsert(consistencyLevel, rm);
         
@@ -498,9 +492,9 @@ public Void batch_mutate(List<MutationsMapEntry> mutationMap, ConsistencyLevel c
         return null;
     }
 
-    private static IClock unavronateClock(Clock clock)
+    private static IClock unavronateClock(long timestamp)
     {
-        return new org.apache.cassandra.db.TimestampClock(clock.timestamp);
+        return new org.apache.cassandra.db.TimestampClock(timestamp);
     }
     
     // FIXME: This is copypasta from o.a.c.db.RowMutation, (RowMutation.getRowMutation uses Thrift types directly).
@@ -530,11 +524,11 @@ private static void addColumnOrSuperColumnToRowMutation(RowMutation rm, String c
         if (cosc.column == null)
         {
             for (Column column : cosc.super_column.columns)
-                rm.add(new QueryPath(cfName, cosc.super_column.name.array(), column.name.array()), column.value.array(), unavronateClock(column.clock));
+                rm.add(new QueryPath(cfName, cosc.super_column.name.array(), column.name.array()), column.value.array(), unavronateClock(column.timestamp));
         }
         else
         {
-            rm.add(new QueryPath(cfName, null, cosc.column.name.array()), cosc.column.value.array(), unavronateClock(cosc.column.clock));
+            rm.add(new QueryPath(cfName, null, cosc.column.name.array()), cosc.column.value.array(), unavronateClock(cosc.column.timestamp));
         }
     }
     
@@ -548,14 +542,14 @@ private static void deleteColumnOrSuperColumnToRowMutation(RowMutation rm, Strin
             for (ByteBuffer col : del.predicate.column_names)
             {
                 if (del.super_column == null && DatabaseDescriptor.getColumnFamilyType(rm.getTable(), cfName) == ColumnFamilyType.Super)
-                    rm.delete(new QueryPath(cfName, col.array()), unavronateClock(del.clock));
+                    rm.delete(new QueryPath(cfName, col.array()), unavronateClock(del.timestamp));
                 else
-                    rm.delete(new QueryPath(cfName, superName, col.array()), unavronateClock(del.clock));
+                    rm.delete(new QueryPath(cfName, superName, col.array()), unavronateClock(del.timestamp));
             }
         }
         else
         {
-            rm.delete(new QueryPath(cfName, superName), unavronateClock(del.clock));
+            rm.delete(new QueryPath(cfName, superName), unavronateClock(del.timestamp));
         }
     }
     
@@ -842,28 +836,17 @@ private void release()
     private CFMetaData convertToCFMetaData(CfDef cf_def) throws InvalidRequestException, ConfigurationException
     {
         String cfType = cf_def.column_type == null ? D_CF_CFTYPE : cf_def.column_type.toString();
-        ClockType clockType = ClockType.create(cf_def.clock_type == null ? D_CF_CFCLOCKTYPE : cf_def.clock_type.toString());
         String compare = cf_def.comparator_type == null ? D_CF_COMPTYPE : cf_def.comparator_type.toString();
         String validate = cf_def.default_validation_class == null ? D_CF_COMPTYPE : cf_def.default_validation_class.toString();
         String subCompare = cf_def.subcomparator_type == null ? D_CF_SUBCOMPTYPE : cf_def.subcomparator_type.toString();
-        String reconcilerName = cf_def.reconciler == null  ? D_CF_RECONCILER : cf_def.reconciler.toString();
-        
-        AbstractReconciler reconciler = DatabaseDescriptor.getReconciler(reconcilerName);
-        if (reconciler == null)
-        {
-            if (clockType == ClockType.Timestamp)    
-                reconciler = TimestampReconciler.instance; // default
-            else
-                throw new ConfigurationException("No reconciler specified for column family " + cf_def.name);
-        }
 
         return new CFMetaData(cf_def.keyspace.toString(),
                               cf_def.name.toString(),
                               ColumnFamilyType.create(cfType),
-                              clockType,
+                              ClockType.Timestamp,
                               DatabaseDescriptor.getComparator(compare),
                               subCompare.length() == 0 ? null : DatabaseDescriptor.getComparator(subCompare),
-                              reconciler,
+                              TimestampReconciler.instance,
                               cf_def.comment == null ? "" : cf_def.comment.toString(),
                               cf_def.row_cache_size == null ? CFMetaData.DEFAULT_ROW_CACHE_SIZE : cf_def.row_cache_size,
                               cf_def.preload_row_cache == null ? CFMetaData.DEFAULT_PRELOAD_ROW_CACHE : cf_def.preload_row_cache,
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
index 1032609e..1f35668d 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
@@ -42,10 +42,8 @@
      */
     private enum AddColumnFamilyArgument {
         COLUMN_TYPE,
-        CLOCK_TYPE,
         COMPARATOR,
         SUBCOMPARATOR,
-        RECONCILER,
         COMMENT,
         ROWS_CACHED,
         PRELOAD_ROW_CACHE,
@@ -251,16 +249,12 @@ private void printCmdHelp(CommonTree ast)
                 css_.out.println("");
                 css_.out.println("valid attributes are:");
                 css_.out.println("    - column_type: One of Super or Standard");
-                css_.out.println("    - clock_type: Timestamp");
                 css_.out.println("    - comparator: The class used as a comparator when sorting column names.");
                 css_.out.println("                  Valid options include: AsciiType, BytesType, LexicalUUIDType,");
                 css_.out.println("                  LongType, TimeUUIDType, and UTF8Type");
                 css_.out.println("    - subcomparator: Name of comparator used for subcolumns (when");
                 css_.out.println("                     column_type=Super only). Valid options are identical to");
                 css_.out.println("                     comparator above.");
-                css_.out.println("    - reconciler: Name of reconciler class that determines what to do with");
-                css_.out.println("                  conflicting versions of a column. Timestamp is currently the");
-                css_.out.println("                  only valid value.");
                 css_.out.println("    - comment: Human-readable column family description. Any string is valid.");
                 css_.out.println("    - rows_cached: Number of rows to cache");
                 css_.out.println("    - preload_row_cache: Set to true to automatically load the row cache");
@@ -499,9 +493,8 @@ else if (columnSpecCnt == 2)
             columnName = CliCompiler.getColumn(columnFamilySpec, 1).getBytes("UTF-8");
         }
 
-        Clock thrift_clock = new Clock().setTimestamp(FBUtilities.timestampMicros());
         thriftClient_.remove(key.getBytes(), new ColumnPath(columnFamily).setSuper_column(superColumnName).setColumn(columnName),
-                             thrift_clock, ConsistencyLevel.ONE);
+                             FBUtilities.timestampMicros(), ConsistencyLevel.ONE);
         css_.out.println(String.format("%s removed.", (columnSpecCnt == 0) ? "row" : "column"));
     }
 
@@ -524,7 +517,7 @@ private void doSlice(String keyspace, String key, String columnFamily, byte[] su
                 css_.out.printf("=> (super_column=%s,", formatSuperColumnName(keyspace, columnFamily, superColumn));
                 for (Column col : superColumn.getColumns())
                     css_.out.printf("\n     (column=%s, value=%s, timestamp=%d)", formatSubcolumnName(keyspace, columnFamily, col),
-                                    new String(col.value, "UTF-8"), col.clock.timestamp);
+                                    new String(col.value, "UTF-8"), col.timestamp);
                 
                 css_.out.println(")"); 
             }
@@ -532,7 +525,7 @@ private void doSlice(String keyspace, String key, String columnFamily, byte[] su
             {
                 Column column = cosc.column;
                 css_.out.printf("=> (column=%s, value=%s, timestamp=%d)\n", formatColumnName(keyspace, columnFamily, column),
-                                new String(column.value, "UTF-8"), column.clock.timestamp);
+                                new String(column.value, "UTF-8"), column.timestamp);
             }
         }
         
@@ -638,7 +631,7 @@ else if (columnSpecCnt == 2)
         ColumnPath path = new ColumnPath(columnFamily).setSuper_column(superColumnName).setColumn(columnName);
         Column column = thriftClient_.get(key.getBytes(), path, ConsistencyLevel.ONE).column;
         css_.out.printf("=> (column=%s, value=%s, timestamp=%d)\n", formatColumnName(keySpace, columnFamily, column),
-                        new String(column.value, "UTF-8"), column.clock.timestamp);
+                        new String(column.value, "UTF-8"), column.timestamp);
     }
 
     // Execute SET statement
@@ -683,9 +676,8 @@ else if (columnSpecCnt == 1)
         }
         
         // do the insert
-        Clock thrift_clock = new Clock().setTimestamp(FBUtilities.timestampMicros());
         thriftClient_.insert(key.getBytes(), new ColumnParent(columnFamily).setSuper_column(superColumnName),
-                             new Column(columnName, value.getBytes(), thrift_clock), ConsistencyLevel.ONE);
+                             new Column(columnName, value.getBytes(), FBUtilities.timestampMicros()), ConsistencyLevel.ONE);
         
         css_.out.println("Value inserted.");
     }
@@ -789,10 +781,6 @@ private void executeAddColumnFamily(CommonTree ast) throws TException, InvalidRe
                 cfDef.setColumn_type(CliUtils.unescapeSQLString(mValue));
                 break;
 
-            case CLOCK_TYPE:
-                cfDef.setClock_type(CliUtils.unescapeSQLString(mValue));
-                break;
-
             case COMPARATOR:
                 cfDef.setComparator_type(CliUtils.unescapeSQLString(mValue));
                 break;
@@ -801,10 +789,6 @@ private void executeAddColumnFamily(CommonTree ast) throws TException, InvalidRe
                 cfDef.setSubcomparator_type(CliUtils.unescapeSQLString(mValue));
                 break;
 
-            case RECONCILER:
-                cfDef.setReconciler(CliUtils.unescapeSQLString(mValue));
-                break;
-
             case COMMENT:
                 cfDef.setComment(CliUtils.unescapeSQLString(mValue));
                 break;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java b/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
index 9b9c32ad..e0e10a1e 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
@@ -305,11 +305,9 @@ public String pretty()
         cf.keyspace = new Utf8(tableName);
         cf.name = new Utf8(cfName);
         cf.column_type = new Utf8(cfType.name());
-        cf.clock_type = new Utf8(clockType.name());
         cf.comparator_type = new Utf8(comparator.getClass().getName());
         if (subcolumnComparator != null)
             cf.subcomparator_type = new Utf8(subcolumnComparator.getClass().getName());
-        cf.reconciler = new Utf8(reconciler.getClass().getName());
         cf.comment = new Utf8(comment);
         cf.row_cache_size = rowCacheSize;
         cf.key_cache_size = keyCacheSize;
@@ -330,14 +328,12 @@ public static CFMetaData inflate(org.apache.cassandra.config.avro.CfDef cf)
     {
         AbstractType comparator;
         AbstractType subcolumnComparator = null;
-        AbstractReconciler reconciler;
         AbstractType validator;
         try
         {
             comparator = DatabaseDescriptor.getComparator(cf.comparator_type.toString());
             if (cf.subcomparator_type != null)
                 subcolumnComparator = DatabaseDescriptor.getComparator(cf.subcomparator_type.toString());
-            reconciler = DatabaseDescriptor.getReconciler(cf.reconciler.toString());
             validator = cf.default_validation_class == null
                         ? BytesType.instance
                         : DatabaseDescriptor.getComparator(cf.default_validation_class.toString());
@@ -355,10 +351,10 @@ public static CFMetaData inflate(org.apache.cassandra.config.avro.CfDef cf)
         return new CFMetaData(cf.keyspace.toString(),
                               cf.name.toString(),
                               ColumnFamilyType.create(cf.column_type.toString()),
-                              ClockType.create(cf.clock_type.toString()),
+                              ClockType.Timestamp,
                               comparator,
                               subcolumnComparator,
-                              reconciler,
+                              TimestampReconciler.instance,
                               cf.comment.toString(),
                               cf.row_cache_size,
                               cf.preload_row_cache,
@@ -452,8 +448,6 @@ public CFMetaData apply(org.apache.cassandra.avro.CfDef cf_def) throws Configura
             throw new ConfigurationException("names do not match.");
         if (!cf_def.column_type.toString().equals(cfType.name()))
             throw new ConfigurationException("types do not match.");
-        if (!cf_def.clock_type.toString().equals(clockType.name()))
-            throw new ConfigurationException("clock types do not match.");
         if (comparator != DatabaseDescriptor.getComparator(cf_def.comparator_type.toString()))
             throw new ConfigurationException("comparators do not match.");
         if (cf_def.subcomparator_type == null || cf_def.subcomparator_type.equals(""))
@@ -497,8 +491,6 @@ public CFMetaData apply(org.apache.cassandra.thrift.CfDef cf_def) throws Configu
             throw new ConfigurationException("names do not match.");
         if (!cf_def.column_type.equals(cfType.name()))
             throw new ConfigurationException("types do not match.");
-        if (!cf_def.clock_type.equals(clockType.name()))
-            throw new ConfigurationException("clock types do not match.");
         if (comparator != DatabaseDescriptor.getComparator(cf_def.comparator_type))
             throw new ConfigurationException("comparators do not match.");
         if (cf_def.subcomparator_type == null || cf_def.subcomparator_type.equals(""))
@@ -536,14 +528,12 @@ else if (subcolumnComparator != DatabaseDescriptor.getComparator(cf_def.subcompa
         org.apache.cassandra.thrift.CfDef def = new org.apache.cassandra.thrift.CfDef(cfm.tableName, cfm.cfName);
         def.setId(cfm.cfId);
         def.setColumn_type(cfm.cfType.name());
-        def.setClock_type(cfm.clockType.name());
         def.setComparator_type(cfm.comparator.getClass().getName());
         if (cfm.subcolumnComparator != null)
         {
             def.setSubcomparator_type(cfm.subcolumnComparator.getClass().getName());
             def.setColumn_type("Super");
         }
-        def.setReconciler(cfm.reconciler == null ? "" : cfm.reconciler.getClass().getName());
         def.setComment(cfm.comment == null ? "" : cfm.comment);
         def.setRow_cache_size(cfm.rowCacheSize);
         def.setPreload_row_cache(cfm.preloadRowCache);
@@ -575,14 +565,12 @@ else if (subcolumnComparator != DatabaseDescriptor.getComparator(cf_def.subcompa
         def.keyspace = cfm.tableName;
         def.id = cfm.cfId;
         def.column_type = cfm.cfType.name();
-        def.clock_type = cfm.clockType.name();
         def.comparator_type = cfm.comparator.getClass().getName();
         if (cfm.subcolumnComparator != null)
         {
             def.subcomparator_type = cfm.subcolumnComparator.getClass().getName();
             def.column_type = "Super";
         }
-        def.reconciler = cfm.reconciler == null ? "" : cfm.reconciler.getClass().getName();
         def.comment = cfm.comment == null ? "" : cfm.comment;
         def.row_cache_size = cfm.rowCacheSize;
         def.preload_row_cache = cfm.preloadRowCache;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index 4213ca5d..1b2f0b47 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -542,17 +542,6 @@ else if (cf.compare_subcolumns_with != null)
                     throw new ConfigurationException("compare_subcolumns_with is only a valid attribute on super columnfamilies (not regular columnfamily " + cf.name + ")");
                 }
                 
-                if (cf.clock_type == null)
-                    cf.clock_type = ClockType.Timestamp; // default
-                
-                AbstractReconciler reconciler = getReconciler(cf.reconciler);
-                if (reconciler == null)
-                {
-                    if (cf.clock_type == ClockType.Timestamp)    
-                        reconciler = TimestampReconciler.instance; // default
-                    else
-                        throw new ConfigurationException("No reconciler specified for column family " + cf.name);
-                }
                 if (cf.read_repair_chance < 0.0 || cf.read_repair_chance > 1.0)
                 {                        
                     throw new ConfigurationException("read_repair_chance must be between 0.0 and 1.0");
@@ -575,10 +564,10 @@ else if (cf.compare_subcolumns_with != null)
                 cfDefs[j++] = new CFMetaData(keyspace.name, 
                                              cf.name, 
                                              cfType, 
-                                             cf.clock_type, 
+                                             ClockType.Timestamp,
                                              comparator, 
                                              subcolumnComparator, 
-                                             reconciler, 
+                                             TimestampReconciler.instance, 
                                              cf.comment, 
                                              cf.rows_cached,
                                              cf.preload_row_cache, 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/RawColumnFamily.java b/cassandra/trunk/src/java/org/apache/cassandra/config/RawColumnFamily.java
index f7d6d67f..25f81153 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/RawColumnFamily.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/RawColumnFamily.java
@@ -34,8 +34,6 @@
 {
     public String name;            
     public ColumnFamilyType column_type;
-    public ClockType clock_type;
-    public String reconciler;
     public String compare_with;
     public String compare_subcolumns_with;
     public String comment;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java b/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java
index 3cd699ff..e536fce8 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java
@@ -28,7 +28,6 @@
 import org.apache.commons.lang.ArrayUtils;
 import org.apache.commons.lang.StringUtils;
 
-import org.apache.cassandra.concurrent.Stage;
 import org.apache.cassandra.io.util.DataOutputBuffer;
 import org.apache.cassandra.io.ICompactSerializer;
 import org.apache.cassandra.net.Message;
@@ -36,12 +35,10 @@
 import org.apache.cassandra.thrift.ColumnOrSuperColumn;
 import org.apache.cassandra.thrift.Deletion;
 import org.apache.cassandra.thrift.Mutation;
-import org.apache.cassandra.thrift.Clock;
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.db.filter.QueryPath;
 import org.apache.cassandra.config.CFMetaData;
 import org.apache.cassandra.config.DatabaseDescriptor;
-import org.apache.cassandra.concurrent.StageManager;
 
 public class RowMutation
 {
@@ -253,13 +250,13 @@ public static RowMutation getRowMutation(String table, byte[] key, Map<String, L
                     assert cosc.super_column != null;
                     for (org.apache.cassandra.thrift.Column column : cosc.super_column.columns)
                     {
-                        rm.add(new QueryPath(cfName, cosc.super_column.name, column.name), column.value, unthriftifyClock(column.clock), column.ttl);
+                        rm.add(new QueryPath(cfName, cosc.super_column.name, column.name), column.value, new TimestampClock(column.timestamp), column.ttl);
                     }
                 }
                 else
                 {
                     assert cosc.super_column == null;
-                    rm.add(new QueryPath(cfName, null, cosc.column.name), cosc.column.value, unthriftifyClock(cosc.column.clock), cosc.column.ttl);
+                    rm.add(new QueryPath(cfName, null, cosc.column.name), cosc.column.value, new TimestampClock(cosc.column.timestamp), cosc.column.ttl);
                 }
             }
         }
@@ -305,12 +302,12 @@ private static void addColumnOrSuperColumnToRowMutation(RowMutation rm, String c
         {
             for (org.apache.cassandra.thrift.Column column : cosc.super_column.columns)
             {
-                rm.add(new QueryPath(cfName, cosc.super_column.name, column.name), column.value, unthriftifyClock(column.clock), column.ttl);
+                rm.add(new QueryPath(cfName, cosc.super_column.name, column.name), column.value, new TimestampClock(column.timestamp), column.ttl);
             }
         }
         else
         {
-            rm.add(new QueryPath(cfName, null, cosc.column.name), cosc.column.value, unthriftifyClock(cosc.column.clock), cosc.column.ttl);
+            rm.add(new QueryPath(cfName, null, cosc.column.name), cosc.column.value, new TimestampClock(cosc.column.timestamp), cosc.column.ttl);
         }
     }
 
@@ -321,21 +318,16 @@ private static void deleteColumnOrSuperColumnToRowMutation(RowMutation rm, Strin
             for(byte[] c : del.predicate.column_names)
             {
                 if (del.super_column == null && DatabaseDescriptor.getColumnFamilyType(rm.table_, cfName) == ColumnFamilyType.Super)
-                    rm.delete(new QueryPath(cfName, c), unthriftifyClock(del.clock));
+                    rm.delete(new QueryPath(cfName, c), new TimestampClock(del.timestamp));
                 else
-                    rm.delete(new QueryPath(cfName, del.super_column, c), unthriftifyClock(del.clock));
+                    rm.delete(new QueryPath(cfName, del.super_column, c), new TimestampClock(del.timestamp));
             }
         }
         else
         {
-            rm.delete(new QueryPath(cfName, del.super_column), unthriftifyClock(del.clock));
+            rm.delete(new QueryPath(cfName, del.super_column), new TimestampClock(del.timestamp));
         }
     }
-
-    private static IClock unthriftifyClock(Clock clock)
-    {
-        return new TimestampClock(clock.getTimestamp());
-    }
 }
 
 class RowMutationSerializer implements ICompactSerializer<RowMutation>
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java b/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java
index 3e9da415..5c8f9e22 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java
@@ -314,12 +314,7 @@ private IColumn unthriftifySuper(SuperColumn super_column)
 
         private IColumn unthriftifySimple(Column column)
         {
-            return new org.apache.cassandra.db.Column(column.name, column.value, unthriftifyClock(column.clock));
-        }
-
-        private IClock unthriftifyClock(Clock clock)
-        {
-            return new org.apache.cassandra.db.TimestampClock(clock.getTimestamp());
+            return new org.apache.cassandra.db.Column(column.name, column.value, new TimestampClock(column.timestamp));
         }
     }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java b/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java
index 0a9bcbc3..6e186a4c 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordWriter.java
@@ -37,7 +37,6 @@
 import org.apache.cassandra.client.RingCache;
 import static org.apache.cassandra.io.SerDeUtils.copy;
 import org.apache.cassandra.thrift.Cassandra;
-import org.apache.cassandra.thrift.Clock;
 import org.apache.cassandra.thrift.Column;
 import org.apache.cassandra.thrift.ColumnOrSuperColumn;
 import org.apache.cassandra.thrift.ConsistencyLevel;
@@ -210,7 +209,7 @@ private Mutation avroToThrift(org.apache.cassandra.avro.Mutation amut)
         else
         {
             // deletion
-            Deletion deletion = new Deletion(avroToThrift(amut.deletion.clock));
+            Deletion deletion = new Deletion(amut.deletion.timestamp);
             mutation.setDeletion(deletion);
             org.apache.cassandra.avro.SlicePredicate apred = amut.deletion.predicate;
             if (amut.deletion.super_column != null)
@@ -240,12 +239,7 @@ private SliceRange avroToThrift(org.apache.cassandra.avro.SliceRange asr)
 
     private Column avroToThrift(org.apache.cassandra.avro.Column acol)
     {
-        return new Column(copy(acol.name), copy(acol.value), avroToThrift(acol.clock));
-    }
-
-    private Clock avroToThrift(org.apache.cassandra.avro.Clock aclo)
-    {
-        return new Clock(aclo.timestamp);
+        return new Column(copy(acol.name), copy(acol.value), acol.timestamp);
     }
 
     /**
@@ -262,7 +256,7 @@ public void close(TaskAttemptContext context) throws IOException, InterruptedExc
     }
 
     /** Fills the deprecated RecordWriter interface for streaming. */
-    @Deprecated @Override
+    @Deprecated
     public void close(org.apache.hadoop.mapred.Reporter reporter) throws IOException
     {
         flush();
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index fcc209de..453564ce 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -1785,14 +1785,12 @@ public String exportSchema() throws IOException
                 rcf.name = cfm.cfName;
                 rcf.compare_with = cfm.comparator.getClass().getName();
                 rcf.compare_subcolumns_with = cfm.subcolumnComparator == null ? null : cfm.subcolumnComparator.getClass().getName();
-                rcf.clock_type = cfm.clockType;
                 rcf.column_type = cfm.cfType;
                 rcf.comment = cfm.comment;
                 rcf.keys_cached = cfm.keyCacheSize;
                 rcf.preload_row_cache = cfm.preloadRowCache;
                 rcf.read_repair_chance = cfm.readRepairChance;
                 rcf.gc_grace_seconds = cfm.gcGraceSeconds;
-                rcf.reconciler = cfm.reconciler.getClass().getName();
                 rcf.rows_cached = cfm.rowCacheSize;
                 rcf.column_metadata = new RawColumnDefinition[cfm.column_metadata.size()];
                 int j = 0;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
index 7225c2ee..8ad4179b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
@@ -205,14 +205,10 @@ public CassandraServer()
         return thriftSuperColumns;
     }
 
-    private static Clock thriftifyIClock(IClock clock)
+    private static long thriftifyIClock(IClock clock)
     {
-        Clock thrift_clock = new Clock();
-        if (clock instanceof TimestampClock)
-        {
-            thrift_clock.setTimestamp(((TimestampClock)clock).timestamp());
-        }
-        return thrift_clock;
+        assert clock instanceof TimestampClock;
+        return ((TimestampClock)clock).timestamp();
     }
 
     private Map<byte[], List<ColumnOrSuperColumn>> getSlice(List<ReadCommand> commands, ConsistencyLevel consistency_level)
@@ -367,12 +363,11 @@ public void insert(byte[] key, ColumnParent column_parent, Column column, Consis
         ThriftValidation.validateKey(key);
         ThriftValidation.validateColumnParent(clientState.getKeyspace(), column_parent);
         ThriftValidation.validateColumn(clientState.getKeyspace(), column_parent, column);
-        IClock cassandra_clock = ThriftValidation.validateClock(column.clock);
 
         RowMutation rm = new RowMutation(clientState.getKeyspace(), key);
         try
         {
-            rm.add(new QueryPath(column_parent.column_family, column_parent.super_column, column.name), column.value, cassandra_clock, column.ttl);
+            rm.add(new QueryPath(column_parent.column_family, column_parent.super_column, column.name), column.value, new TimestampClock(column.timestamp), column.ttl);
         }
         catch (MarshalException e)
         {
@@ -411,7 +406,7 @@ public void batch_mutate(Map<byte[],Map<String,List<Mutation>>> mutation_map, Co
         doInsert(consistency_level, rowMutations);
     }
 
-    public void remove(byte[] key, ColumnPath column_path, Clock clock, ConsistencyLevel consistency_level)
+    public void remove(byte[] key, ColumnPath column_path, long clock, ConsistencyLevel consistency_level)
     throws InvalidRequestException, UnavailableException, TimedOutException
     {
         if (logger.isDebugEnabled())
@@ -422,10 +417,8 @@ public void remove(byte[] key, ColumnPath column_path, Clock clock, ConsistencyL
         ThriftValidation.validateKey(key);
         ThriftValidation.validateColumnPathOrParent(clientState.getKeyspace(), column_path);
 
-        IClock cassandra_clock = ThriftValidation.validateClock(clock);
-
         RowMutation rm = new RowMutation(clientState.getKeyspace(), key);
-        rm.delete(new QueryPath(column_path), cassandra_clock);
+        rm.delete(new QueryPath(column_path), new TimestampClock(clock));
 
         doInsert(consistency_level, Arrays.asList(rm));
     }
@@ -928,28 +921,14 @@ private CFMetaData convertToCFMetaData(CfDef cf_def) throws InvalidRequestExcept
         {
           throw new InvalidRequestException("Invalid column type " + cf_def.column_type);
         }
-        ClockType clockType = ClockType.create(cf_def.clock_type);
-        if (clockType == null)
-        {
-            throw new InvalidRequestException("Invalid clock type " + cf_def.clock_type);
-        }
-        AbstractReconciler reconciler = DatabaseDescriptor.getReconciler(cf_def.reconciler);
-        if (reconciler == null)
-        {
-            if (clockType == ClockType.Timestamp)    
-                reconciler = TimestampReconciler.instance; // default
-            else
-                throw new ConfigurationException("No reconciler specified for column family " + cf_def.name);
-
-        }
 
         return new CFMetaData(cf_def.keyspace,
                               cf_def.name,
                               cfType,
-                              clockType,
+                              ClockType.Timestamp,
                               DatabaseDescriptor.getComparator(cf_def.comparator_type),
                               cf_def.subcomparator_type == null ? null : DatabaseDescriptor.getComparator(cf_def.subcomparator_type),
-                              reconciler,
+                              TimestampReconciler.instance,
                               cf_def.comment,
                               cf_def.row_cache_size,
                               cf_def.preload_row_cache,
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java b/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java
index 9d3e47df..1716aa66 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java
@@ -212,7 +212,6 @@ public static void validateColumnOrSuperColumn(String keyspace, String cfName, C
         if (cosc.column != null)
         {
             validateTtl(cosc.column);
-            validateClock(cosc.column.clock);
             ThriftValidation.validateColumnPath(keyspace, new ColumnPath(cfName).setSuper_column(null).setColumn(cosc.column.name));
         }
 
@@ -221,7 +220,6 @@ public static void validateColumnOrSuperColumn(String keyspace, String cfName, C
             for (Column c : cosc.super_column.columns)
             {
                 validateTtl(c);
-                validateClock(c.clock);
                 ThriftValidation.validateColumnPath(keyspace, new ColumnPath(cfName).setSuper_column(cosc.super_column.name).setColumn(c.name));
             }
         }
@@ -240,15 +238,6 @@ private static void validateTtl(Column column) throws InvalidRequestException
         assert column.isSetTtl() || column.ttl == 0;
     }
 
-    public static IClock validateClock(Clock clock) throws InvalidRequestException
-    {
-        if (clock.isSetTimestamp())
-        {
-            return new TimestampClock(clock.getTimestamp());
-        }
-        throw new InvalidRequestException("Clock must have one a timestamp");
-    }
-
     public static void validateMutation(String keyspace, String cfName, Mutation mut)
             throws InvalidRequestException
     {
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/client/TestRingCache.java b/cassandra/trunk/test/unit/org/apache/cassandra/client/TestRingCache.java
index 67d656c1..0d87ca7d 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/client/TestRingCache.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/client/TestRingCache.java
@@ -98,11 +98,9 @@ public static void main(String[] args) throws Throwable
             // now, read the row back directly from the host owning the row locally
             tester.setup(firstEndpoint.getHostAddress(), DatabaseDescriptor.getRpcPort());
             tester.thriftClient.set_keyspace(keyspace);
-            Clock clock = new Clock();
-            clock.setTimestamp(1);
-            tester.thriftClient.insert(row, parent, new Column("col1".getBytes(), "val1".getBytes(), clock), ConsistencyLevel.ONE);
+            tester.thriftClient.insert(row, parent, new Column("col1".getBytes(), "val1".getBytes(), 1), ConsistencyLevel.ONE);
             Column column = tester.thriftClient.get(row, col, ConsistencyLevel.ONE).column;
-            System.out.println("read row " + new String(row) + " " + new String(column.name) + ":" + new String(column.value) + ":" + column.clock.timestamp);
+            System.out.println("read row " + new String(row) + " " + new String(column.name) + ":" + new String(column.value) + ":" + column.timestamp);
         }
 
         System.exit(1);
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
index 2ddd86a7..5ba4f8f7 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
@@ -529,7 +529,6 @@ public void testUpdateColumnFamilyNoIndexes() throws ConfigurationException, IOE
         cf_def.setKeyspace(cf.tableName);
         cf_def.setName(cf.cfName);
         cf_def.setColumn_type(cf.cfType.name());
-        cf_def.setClock_type(cf.clockType.name());
         cf_def.setComment(cf.comment);
         cf_def.setComparator_type(cf.comparator.getClass().getName());
         cf_def.setSubcomparator_type(null);
@@ -539,7 +538,6 @@ public void testUpdateColumnFamilyNoIndexes() throws ConfigurationException, IOE
         cf_def.setRead_repair_chance(cf.readRepairChance);
         cf_def.setRow_cache_size(43.3);
         cf_def.setColumn_metadata(new ArrayList<ColumnDef>());
-        cf_def.setReconciler("org.apache.cassandra.db.clock.TimestampReconciiler");
         cf_def.setDefault_validation_class("BytesType");
         
         // test valid operations.
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/service/EmbeddedCassandraServiceTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/service/EmbeddedCassandraServiceTest.java
index e482bab1..d81be6c4 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/service/EmbeddedCassandraServiceTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/service/EmbeddedCassandraServiceTest.java
@@ -18,30 +18,17 @@
 */
 package org.apache.cassandra.service;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
-import java.util.HashMap;
+
+import org.junit.BeforeClass;
+import org.junit.Test;
 
 import org.apache.cassandra.config.CFMetaData;
 import org.apache.cassandra.config.ConfigurationException;
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.config.KSMetaData;
-import org.apache.cassandra.thrift.Cassandra;
-import org.apache.cassandra.thrift.Clock;
-import org.apache.cassandra.thrift.Column;
-import org.apache.cassandra.thrift.ColumnOrSuperColumn;
-import org.apache.cassandra.thrift.Column;
-import org.apache.cassandra.thrift.ColumnParent;
-import org.apache.cassandra.thrift.ColumnPath;
-import org.apache.cassandra.thrift.ColumnParent;
-import org.apache.cassandra.thrift.ConsistencyLevel;
-import org.apache.cassandra.thrift.InvalidRequestException;
-import org.apache.cassandra.thrift.NotFoundException;
-import org.apache.cassandra.thrift.TimedOutException;
-import org.apache.cassandra.thrift.UnavailableException;
+import org.apache.cassandra.thrift.*;
 import org.apache.thrift.TException;
 import org.apache.thrift.protocol.TBinaryProtocol;
 import org.apache.thrift.protocol.TProtocol;
@@ -49,12 +36,9 @@
 import org.apache.thrift.transport.TSocket;
 import org.apache.thrift.transport.TTransport;
 import org.apache.thrift.transport.TTransportException;
-import org.junit.BeforeClass;
-import org.junit.Test;
 
-import org.apache.cassandra.thrift.AuthenticationRequest;
-import org.apache.cassandra.thrift.AuthorizationException;
-import org.apache.cassandra.thrift.AuthenticationException;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
 
 /**
  * Example how to use an embedded cassandra service.
@@ -113,10 +97,8 @@ public void testEmbeddedCassandraService() throws AuthenticationException, Autho
         cp.setColumn("name".getBytes("utf-8"));
 
         // insert
-        Clock clock = new Clock();
-        clock.setTimestamp(timestamp);
         client.insert(key_user_id, par, new Column("name".getBytes("utf-8"),
-                "Ran".getBytes("UTF-8"), clock), ConsistencyLevel.ONE);
+                "Ran".getBytes("UTF-8"), timestamp), ConsistencyLevel.ONE);
 
         // read
         ColumnOrSuperColumn got = client.get(key_user_id, cp,
