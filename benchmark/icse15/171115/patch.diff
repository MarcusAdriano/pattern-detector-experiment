diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBinary.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBinary.java
index 8f57653f..dcd81379 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBinary.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLBinary.java
@@ -58,6 +58,7 @@
 
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.sql.PreparedStatement;
 
 /**
  * SQLBinary satisfies the DataValueDescriptor
@@ -1080,4 +1081,12 @@ private static int compare(byte[] left, byte[] right) {
 		return 0;
 
 	}
+
+      /** Adding this method to ensure that super class' setInto method doesn't get called
+      * that leads to the violation of JDBC spec( untyped nulls ) when batching is turned on.
+      */
+     public void setInto(PreparedStatement ps, int position) throws SQLException, StandardException {
+
+                  ps.setBytes(position, getBytes());
+     }
 }
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLDate.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLDate.java
index 5f950889..b6959e77 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLDate.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLDate.java
@@ -51,6 +51,7 @@
 import java.sql.Time;
 import java.sql.Timestamp;
 import java.sql.Types;
+import java.sql.PreparedStatement;
 
 import java.util.Calendar;
 import java.util.GregorianCalendar;
@@ -997,4 +998,13 @@ public static DateTimeDataValue computeDateFunction( DataValueDescriptor operand
             throw se;
         }
     } // end of computeDateFunction
+
+    /** Adding this method to ensure that super class' setInto method doesn't get called
+      * that leads to the violation of JDBC spec( untyped nulls ) when batching is turned on.
+      */     
+    public void setInto(PreparedStatement ps, int position) throws SQLException, StandardException {
+
+                  ps.setDate(position, getDate((Calendar) null));
+     }
+
 }
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLTime.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLTime.java
index 41cbd977..94af4cf8 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLTime.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLTime.java
@@ -48,6 +48,7 @@
 import java.sql.Time;
 import java.sql.Timestamp;
 import java.sql.Types;
+import java.sql.PreparedStatement;
 
 import java.util.Calendar;
 import java.util.GregorianCalendar;
@@ -965,5 +966,14 @@ static int computeEncodedTime(java.util.Date value, Calendar currentCal) throws
 		currentCal.setTime(value);
 		return computeEncodedTime(currentCal);
 	}
+
+     /** Adding this method to ensure that super class' setInto method doesn't get called
+      * that leads to the violation of JDBC spec( untyped nulls ) when batching is turned on.
+      */
+    public void setInto(PreparedStatement ps, int position) throws SQLException, StandardException {
+
+		      ps.setTime(position, getTime((Calendar) null));
+   }
+
 }
 
diff --git a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/parameterMapping.java b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/parameterMapping.java
index 8f391312..2b772baf 100644
--- a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/parameterMapping.java
+++ b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/parameterMapping.java
@@ -379,6 +379,31 @@ else if (st == jdbcTypes.length)
 								dumpSQLExceptions(sqle);
 
 						}
+						
+						/**
+						  * Adding this piece of code to test the support for batching of statements.
+						  * Some datatypes had problems when batching was turned on which was 
+						  * not there when batching was not on, this will test that behaviour
+						  * for all such datatypes
+						  */
+						s.execute("DELETE FROM PM.TYPE_AS");
+						try {
+							System.out.print("  setNull with batching support(" + TestUtil.sqlNameFromJdbc(sqlTypeNull) + ") ");
+							psi.setNull(1, sqlTypeNull);
+							psi.addBatch();
+							psi.executeBatch();
+
+							getValidValue(psq, jdbcTypes[type]); // yes type, not st
+
+							System.out.println("");
+
+						} catch (SQLException sqle) {							 
+							sqleResult = sqle;
+							if ("22005".equals(sqle.getSQLState()))
+								System.out.println("IC");
+							else
+								dumpSQLExceptions(sqle);													     
+						}						
 					}					 
 				 }
 
