diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java
index cf401144..2a729417 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java
@@ -127,15 +127,7 @@ public int compare(File file1, File file2) {
 					// appropriate.
 					graph = new SubsystemGraph(root);
 					ResourceInstaller.newInstance(coordination, root, root).install();
-					// TODO Begin proof of concept.
-					// This is a proof of concept for initializing the relationships between the root subsystem and bundles
-					// that already existed in its region. Not sure this will be the final resting place. Plus, there are issues
-					// since this does not take into account the possibility of already existing bundles going away or new bundles
-					// being installed out of band while this initialization is taking place. Need a bundle event hook for that.
-					BundleContext context = Activator.getInstance().getBundleContext().getBundle(org.osgi.framework.Constants.SYSTEM_BUNDLE_LOCATION).getBundleContext();
-					for (Bundle b : context.getBundles())
-						ResourceInstaller.newInstance(coordination, b.adapt(BundleRevision.class), root).install();
-					// TODO End proof of concept.
+					populateRootSubsystem(root, coordination);
 				} catch (Exception e) {
 					coordination.fail(e);
 				} finally {
@@ -155,6 +147,7 @@ public int compare(File file1, File file2) {
 					root = getSubsystemById(0);
 					graph = new SubsystemGraph(root);
 					ResourceInstaller.newInstance(coordination, root, root).install();
+					populateRootSubsystem(root, coordination);
 				} catch (Exception e) {
 					coordination.fail(e);
 				} finally {
@@ -165,6 +158,22 @@ public int compare(File file1, File file2) {
 		return root;
 	}
 	
+	private void populateRootSubsystem(BasicSubsystem root, Coordination coordination) throws Exception {
+		// TODO Begin proof of concept.
+		// This is a proof of concept for initializing the relationships between the root subsystem and bundles
+		// that already existed in its region. Not sure this will be the final resting place. Plus, there are issues
+		// since this does not take into account the possibility of already existing bundles going away or new bundles
+		// being installed out of band while this initialization is taking place. Need a bundle event hook for that.
+		BundleContext context = Activator.getInstance().getBundleContext().getBundle(org.osgi.framework.Constants.SYSTEM_BUNDLE_LOCATION).getBundleContext();
+		for (Bundle bundle : context.getBundles()) {
+			BundleRevision revision = bundle.adapt(BundleRevision.class);
+			if (!resourceReferences.getSubsystems(revision).isEmpty())
+				continue;
+			ResourceInstaller.newInstance(coordination, revision, root).install();
+		}
+		// TODO End proof of concept.
+	}
+	
 	public BasicSubsystem getSubsystemById(long id) {
 		synchronized (idToSubsystem) {
 			return idToSubsystem.get(id);
diff --git a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/UnmanagedBundleTest.java b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/UnmanagedBundleTest.java
index e69de29b..28811b7a 100644
--- a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/UnmanagedBundleTest.java
+++ b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/UnmanagedBundleTest.java
@@ -0,0 +1,119 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.subsystem.itests;
+
+import java.io.FileInputStream;
+import java.io.IOException;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
+import org.osgi.framework.Bundle;
+
+/*
+ * Contains a series of tests for unmanaged bundles. An unmanaged bundle is a
+ * bundle that was installed outside of the Subsystems API.
+ */
+@RunWith(MavenConfiguredJUnit4TestRunner.class)
+public class UnmanagedBundleTest extends SubsystemTest {
+	/*
+	 * Bundle-SymbolicName: bundle.a.jar
+	 */
+	private static final String BUNDLE_A = "bundle.a.jar";
+	
+	@Before
+	public static void createApplications() throws Exception {
+		if (createdApplications) {
+			return;
+		};
+		createBundleA();
+		createdApplications = true;
+	}
+	
+	private static void createBundleA() throws IOException {
+		createBundle(BUNDLE_A);
+	}
+	
+	/*
+	 * Test that an unmanaged bundle is detected as a constituent in the root
+	 * subsystem when the subsystems core bundle is active.
+	 */
+	@Test
+	public void testInstallWhileImplBundleActive() throws Exception {
+		Bundle a = bundleContext.installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A));
+		try {
+			assertConstituent(getRootSubsystem(), BUNDLE_A);
+		}
+		finally {
+			uninstallSilently(a);
+		}
+	}
+	
+	/*
+	 * Test that an unmanaged bundle is detected as a constituent in the root
+	 * subsystem when the subsystems core bundle is stopped. This ensures that
+	 * persistence isn't interfering with detection.
+	 */
+	@Test
+	public void testInstallWhileImplBundleStopped() throws Exception {
+		Bundle core = getSubsystemCoreBundle();
+		core.stop();
+		try {
+			Bundle a = bundleContext.installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A));
+			try {
+				core.start();
+				assertConstituent(getRootSubsystem(), BUNDLE_A);
+			}
+			finally {
+				uninstallSilently(a);
+			}
+		}
+		finally {
+			core.start();
+		}
+	}
+	
+	/*
+	 * Test that an unmanaged bundle is detected as a constituent in the root
+	 * subsystem when the subsystems core bundle is uninstalled.
+	 */
+	@Test
+	public void testInstallWhileImplBundleUninstalled() throws Exception {
+		Bundle core = getSubsystemCoreBundle();
+		core.uninstall();
+		try {
+			Bundle a = bundleContext.installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A));
+			try {
+				core = bundleContext.installBundle(core.getLocation());
+				core.start();
+				assertConstituent(getRootSubsystem(), BUNDLE_A);
+			}
+			finally {
+				uninstallSilently(a);
+			}
+		}
+		finally {
+			if (core.getState() == Bundle.UNINSTALLED) {
+				core = bundleContext.installBundle(core.getLocation());
+				core.start();
+			}
+		}
+	}
+}
