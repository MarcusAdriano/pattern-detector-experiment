diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Agent.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Agent.java
index d6a37045..53d067fc 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Agent.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Agent.java
@@ -268,8 +268,7 @@ final void disconnectEvent() {
         connection_.completeChainBreakingDisconnect();
     }
 
-    public void beginWriteChainOutsideUOW() throws SqlException {
-    }
+    abstract public void beginWriteChainOutsideUOW() throws SqlException;
 
     public void beginWriteChain(ClientStatement statement) throws SqlException {
         connection_.writeTransactionStart(statement);
@@ -280,10 +279,10 @@ final void beginBatchedWriteChain(ClientStatement statement)
         beginWriteChain(statement);
     }
 
-    protected void endWriteChain() {
-    }
+    abstract protected void endWriteChain();
 
     private final void endBatchedWriteChain() {
+        endWriteChain();
     }
 
     protected void beginReadChain(ClientStatement statement)
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/BlobLocatorInputStream.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/BlobLocatorInputStream.java
index d5caf8fe..a519137b 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/BlobLocatorInputStream.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/BlobLocatorInputStream.java
@@ -179,9 +179,10 @@ public int read(byte[] b, int off, int len) throws IOException
             currentPos += result.length;
             return result;       
         } catch (SqlException ex) {
-            IOException ioEx = new IOException();
-            ioEx.initCause(ex);
-            throw ioEx;
+            // Passing cause as ctor argument ensures that the IOException 
+            // inherits the cause's message, (unlike invoking initCause() on a 
+            // default-constructed IOException).
+            throw new IOException(ex);
         }
     }
 
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClobLocatorInputStream.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClobLocatorInputStream.java
index 9bfdd59d..0e135fc1 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClobLocatorInputStream.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClobLocatorInputStream.java
@@ -153,9 +153,10 @@ public int read(byte[] b, int off, int len) throws IOException {
             currentPos += result.length;
             return result;
         } catch (SqlException ex) {
-            IOException ioEx = new IOException();
-            ioEx.initCause(ex);
-            throw ioEx;
+            // Passing cause as ctor argument ensures that the IOException 
+            // inherits the cause's message, (unlike invoking initCause() on a 
+            // default-constructed IOException).
+            throw new IOException(ex);
         }
     }
 
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClobLocatorReader.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClobLocatorReader.java
index b79b2020..48043870 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClobLocatorReader.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ClobLocatorReader.java
@@ -227,9 +227,10 @@ private void checkClosed() throws IOException {
             currentPos += result.length;
             return result;
         } catch (SqlException ex) {
-            IOException ioEx = new IOException();
-            ioEx.initCause(ex);
-            throw ioEx;
+            // Passing cause as ctor argument ensures that the IOException 
+            // inherits the cause's message, (unlike invoking initCause() on a 
+            // default-constructed IOException).
+            throw new IOException(ex);
         }
     }
 }
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetAgent.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetAgent.java
index 63b22a03..a5a1eea6 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetAgent.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetAgent.java
@@ -107,6 +107,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     SqlException exceptionOpeningSocket_ = null;
     SqlException exceptionConvertingRdbnam = null;
     
+    /**
+     * Flag which indicates that a writeChain has been started and data sent to
+     * the server.
+     * If true, starting a new write chain will throw a DisconnectException. 
+     * It is cleared when the write chain is ended.
+     */
+    private boolean writeChainIsDirty_ = false;
     //---------------------constructors/finalizer---------------------------------
 
     // Only used for testing
@@ -462,22 +469,40 @@ private void writeDeferredResetConnection() throws SqlException {
             throw de;
         }
     }
+    /**
+     * Marks the agent's write chain as dirty. A write chain is dirty when data
+     * from it has been sent to the server. A dirty write chain cannot be reset 
+     * and reused for another request until the remaining data has been sent to
+     * the server and the write chain properly ended. 
+     * 
+     * Resetting a dirty chain will cause the new request to be appended to the 
+     * unfinished request already at the server, which will likely lead to 
+     * cryptic syntax errors.
+     */
+    void markWriteChainAsDirty() {    
+        writeChainIsDirty_ = true;
+    }
 
+    private void verifyWriteChainIsClean() throws DisconnectException {
+        if (writeChainIsDirty_) { 
+            throw new DisconnectException(this, 
+                new ClientMessageId(SQLState.NET_WRITE_CHAIN_IS_DIRTY));
+        }
+    }
     public void beginWriteChainOutsideUOW() throws SqlException {
+        verifyWriteChainIsClean();
         request_.initialize();
         writeDeferredResetConnection();
-        super.beginWriteChainOutsideUOW();
     }
 
     public void beginWriteChain(ClientStatement statement) throws SqlException {
+        verifyWriteChainIsClean();
         request_.initialize();
         writeDeferredResetConnection();
         super.beginWriteChain(statement);
     }
 
-    protected void endWriteChain() {
-        super.endWriteChain();
-    }
+    protected void endWriteChain() {}
 
     private void readDeferredResetConnection() throws SqlException {
         if (!netConnection_.resetConnectionAtFirstSql_) {
@@ -496,19 +521,19 @@ private void readDeferredResetConnection() throws SqlException {
 
     protected void beginReadChain(ClientStatement statement)
             throws SqlException {
+        // Clear here as endWriteChain may not always be called
+        writeChainIsDirty_ = false;
         readDeferredResetConnection();
         super.beginReadChain(statement);
     }
 
     protected void beginReadChainOutsideUOW() throws SqlException {
+        // Clear here as endWriteChain may not always be called
+        writeChainIsDirty_ = false;
         readDeferredResetConnection();
         super.beginReadChainOutsideUOW();
     }
 
-    public void endReadChain() throws SqlException {
-        super.endReadChain();
-    }
-
     /**
      * Switches the current CCSID manager to UTF-8
      */
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/Request.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/Request.java
index 8ce0d6e9..d7ea7b51 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/Request.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/Request.java
@@ -41,6 +41,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.nio.CharBuffer;
 import java.nio.charset.Charset;
 import java.util.Hashtable;
+import org.apache.derby.iapi.error.ExceptionUtil;
 
 
 class Request {
@@ -315,7 +316,27 @@ final private void writePlainScalarStream(boolean chained,
                 try {
                     bytesRead =
                         in.read(buffer.array(), buffer.position(), bytesToRead);
-                } catch (Exception e) {
+                } catch (IOException ioe) {
+                    if (netAgent_.getOutputStream() == null) {
+                        // The exception has taken down the connection, so we 
+                        // check if it was caused by attempting to 
+                        // read the stream from our own connection...
+                        for (Throwable t = ioe; t != null; t = t.getCause()) {
+                            if (t instanceof SqlException
+                                    && ((SqlException) t).getSQLState().equals(ExceptionUtil.getSQLStateFromIdentifier(SQLState.NET_WRITE_CHAIN_IS_DIRTY))) {
+                                throw new SqlException(netAgent_.logWriter_,
+                                        new ClientMessageId(SQLState.NET_LOCATOR_STREAM_PARAMS_NOT_SUPPORTED),
+                                        ioe, parameterIndex);
+                            }
+                        }
+                        // Something else has killed the connection, fast forward to despair...
+                        throw new SqlException(netAgent_.logWriter_,
+                                new ClientMessageId(SQLState.NET_DISCONNECT_EXCEPTION_ON_READ),
+                                ioe, parameterIndex, ioe.getMessage());
+                    }
+                    // The OutPutStream is still intact so try to finish request
+                    // with what we managed to read
+
                     status = DRDAConstants.STREAM_READ_ERROR;
                     padScalarStreamForError(leftToRead, bytesToRead,
                             writeEXTDTAStatusByte, status);
@@ -324,7 +345,7 @@ final private void writePlainScalarStream(boolean chained,
                         new SqlException(
                             netAgent_.logWriter_,
                             new ClientMessageId(SQLState.NET_EXCEPTION_ON_READ),
-                            e, parameterIndex, e.getMessage()));
+                            ioe, parameterIndex, ioe.getMessage()));
 
                     return;
                 }
@@ -1176,6 +1197,7 @@ protected void flush(OutputStream socketOutputStream) throws IOException {
     private void sendBytes(OutputStream socketOutputStream)
             throws IOException {
         try {
+            netAgent_.markWriteChainAsDirty();
             socketOutputStream.write(buffer.array(), 0, buffer.position());
             socketOutputStream.flush();
         } finally {
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index 75c08c21..7a4f39d6 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -1630,6 +1630,9 @@ The message identifier (ie. the value that matches a field in this class)
     String NET_XARETVAL_ERROR                                       = "XN019.S";
     String NET_MARSHALLING_UDT_ERROR                     = "XN020.S";
     String NET_UDT_COERCION_ERROR                               = "XN021.S";
+    String NET_WRITE_CHAIN_IS_DIRTY                                 = "XN022.C";
+    String NET_LOCATOR_STREAM_PARAMS_NOT_SUPPORTED                  = "XN023.C";
+    String NET_DISCONNECT_EXCEPTION_ON_READ                         = "XN024.C";
     
     // XML - Derby-specific XML errors not covered by
     // SQL standard.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java
index e1a9567b..5b90325b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ErrorCodeTest.java
@@ -201,6 +201,9 @@ public void test_errorcode() throws Exception
         		{"XJ05B","JDBC attribute '{0}' has an invalid value '{1}', valid values are '{2}'.","40000"},
         		{"XJ081","Conflicting create/restore/recovery attributes specified.","40000"},
         		{"XJ213","The traceLevel connection property does not have a valid format for a number.","40000"},
+        		{"XN022","A write chain that has transmitted data to the server cannot be reset until the request is finished and the chain terminated.","40000"},
+        		{"XN023","The stream specified by parameter #{0} is locator-based and requires a nested request on the same connection to be materialized. This is not supported.","40000"},
+        		{"XN024","Encountered an exception which terminated the connection, while reading from the stream specified by parameter #{0}. The Exception had this message: '{1}'.","40000"},
         		{"XRE20","Failover performed successfully for database '{0}', the database has been shutdown.","45000"},
         		{"XSDB0","Unexpected exception on in-memory page {0}","45000"},
         		{"XSDB1","Unknown page format at page {0}","45000"},
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java
index 69f515d2..c4bed2c7 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/largedata/LobLimitsTest.java
@@ -1082,18 +1082,22 @@ private void selectUpdateClob(String testId,
         long dlen = rs.getLong(2);
         assertEquals("FAIL - MISMATCH LENGTHS GOT " + l + " expected "
                 + dlen + " for row in CLOBTBL with ID=" + id, dlen, l);
-        // DERBY-5317 cannot use setCharacterStream with value from
-        // Clob.getCharacterStream because server will try to stream
-        // lob to and from server at the same time. setClob can be
-        // used as a work around.
-        if (!usingDerbyNetClient()) {
+                
             PreparedStatement psUpd =
-                    prepareStatement("update CLOBTBL set content=?, " +
-                            "dlen =? where id = ?");
+                prepareStatement("update CLOBTBL set content=?, "
+                + "dlen =? where id = ?");
             psUpd.setCharacterStream(1, value.getCharacterStream(), (int) l);
             psUpd.setLong(2, l);
             psUpd.setInt(3, updateId);
-
+        if (usingDerbyNetClient()) {
+            // DERBY-5317 cannot use setCharacterStream with value from
+            // Clob.getCharacterStream because server will try to stream
+            // lob to and from server at the same time. setClob can be
+            // used as a work around.
+            // Verify that new error is thrown 
+            assertPreparedStatementError("XN023", psUpd);
+            return;
+        } else {
             assertUpdateCount(psUpd, 1);
         }
         commit();
