diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java
index f4b89f79..29d5997a 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.java
@@ -86,6 +86,7 @@
   private SolrParams initArgs = null;
   private Analyzer analyzer = null;
   private String idField = null;
+  private FieldType idSchemaFT;
 
   boolean forceElevation = false;
   // For each IndexReader, keep a query->elevation map
@@ -115,6 +116,7 @@
       this.priority = new HashMap<String, Integer>();
       int max = elevate.size()+5;
       for( String id : elevate ) {
+        id = idSchemaFT.readableToIndexed(id);
         TermQuery tq = new TermQuery( new Term( idField, id ) );
         include.add( tq, BooleanClause.Occur.SHOULD );
         this.priority.put( id, max-- );
@@ -126,7 +128,7 @@
       else {
         this.exclude = new BooleanClause[exclude.size()];
         for( int i=0; i<exclude.size(); i++ ) {
-          TermQuery tq = new TermQuery( new Term( idField, exclude.get(i) ) );
+          TermQuery tq = new TermQuery( new Term( idField, idSchemaFT.readableToIndexed(exclude.get(i)) ) );
           this.exclude[i] = new BooleanClause( tq, BooleanClause.Occur.MUST_NOT );
         }
       }
@@ -154,10 +156,11 @@ public void inform(SolrCore core)
     }
 
     SchemaField sf = core.getSchema().getUniqueKeyField();
-    if( sf == null || !(sf.getType() instanceof StrField)) {
+    if( sf == null || sf.getType().isTokenized() == true) {
       throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, 
-          "QueryElevationComponent requires the schema to have a uniqueKeyField implemented using StrField" );
+          "QueryElevationComponent requires the schema to have a uniqueKeyField implemented using a non-tokenized field" );
     }
+    idSchemaFT = sf.getType();
     idField = StringHelper.intern(sf.getName());
     
     forceElevation = initArgs.getBool( QueryElevationParams.FORCE_ELEVATION, forceElevation );
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest.java b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest.java
index 474f7bc3..96246f7d 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest.java
@@ -25,6 +25,8 @@
 import java.util.Map;
 
 import org.apache.lucene.index.IndexReader;
+
+import org.apache.lucene.util.BytesRef;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.common.params.CommonParams;
 import org.apache.solr.common.params.MapSolrParams;
@@ -35,6 +37,7 @@
 import org.apache.solr.handler.component.QueryElevationComponent.ElevationObj;
 import org.apache.solr.request.LocalSolrQueryRequest;
 import org.apache.solr.request.SolrQueryRequest;
+
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -43,29 +46,65 @@
 
 public class QueryElevationComponentTest extends SolrTestCaseJ4 {
 
-  @BeforeClass
-  public static void beforeClass() throws Exception {
+
+  @Before
+  @Override
+  public void setUp() throws Exception{
+    super.setUp();
+  }
+
+  private void init(String schema) throws Exception {
     //write out elevate-data.xml to the Data dir first by copying it from conf, which we know exists, this way we can test both conf and data configurations
     createTempDir();
     File parent = new File(TEST_HOME(), "conf");
     File elevateFile = new File(parent, "elevate.xml");
     File elevateDataFile = new File(dataDir, "elevate-data.xml");
     FileUtils.copyFile(elevateFile, elevateDataFile);
-    initCore("solrconfig-elevate.xml", "schema12.xml");
+
+    initCore("solrconfig-elevate.xml",schema);
+    clearIndex();
+    assertU(commit());
   }
 
-  @Before
-  @Override
-  public void setUp() throws Exception{
-    super.setUp();
+  private void delete() throws Exception {
+    deleteCore();
+  }
+
+  @Test
+  public void testFieldType() throws Exception {
+    try {
+      init("schema11.xml");
     clearIndex();
     assertU(commit());
-    assertU(optimize());
+      assertU(adoc("id", "1", "text", "XXXX XXXX",           "str_s", "a" ));
+      assertU(adoc("id", "2", "text", "YYYY",      "str_s", "b" ));
+      assertU(adoc("id", "3", "text", "ZZZZ", "str_s", "c" ));
+
+      assertU(adoc("id", "4", "text", "XXXX XXXX",                 "str_s", "x" ));
+      assertU(adoc("id", "5", "text", "YYYY YYYY",         "str_s", "y" ));
+      assertU(adoc("id", "6", "text", "XXXX XXXX", "str_s", "z" ));
+      assertU(adoc("id", "7", "text", "AAAA", "str_s", "a" ));
+      assertU(adoc("id", "8", "text", "AAAA", "str_s", "a" ));
+      assertU(adoc("id", "9", "text", "AAAA AAAA", "str_s", "a" ));
+      assertU(commit());
+
+      assertQ("", req(CommonParams.Q, "AAAA", CommonParams.QT, "/elevate",
+          CommonParams.FL, "id, score, [elevated]")
+              ,"//*[@numFound='3']"
+              ,"//result/doc[1]/float[@name='id'][.='7.0']"
+              ,"//result/doc[2]/float[@name='id'][.='8.0']"
+              ,"//result/doc[3]/float[@name='id'][.='9.0']"
+              );
+    } finally{
+      delete();
+    }
   }
   
   @Test
   public void testInterface() throws Exception
   {
+    try {
+      init("schema12.xml");
     SolrCore core = h.getCore();
     
     NamedList<String> args = new NamedList<String>();
@@ -77,12 +116,12 @@ public void testInterface() throws Exception
     comp.inform( core );
 
     SolrQueryRequest req = req();
-    IndexReader reader = req.getSearcher().getReader();
+      IndexReader reader = req.getSearcher().getIndexReader();
     Map<String, ElevationObj> map = comp.getElevationMap( reader, core );
     req.close();
 
     // Make sure the boosts loaded properly
-    assertEquals( 3, map.size() );
+      assertEquals( 4, map.size() );
     assertEquals( 1, map.get( "XXXX" ).priority.size() );
     assertEquals( 2, map.get( "YYYY" ).priority.size() );
     assertEquals( 3, map.get( "ZZZZ" ).priority.size() );
@@ -99,7 +138,7 @@ public void testInterface() throws Exception
     comp.init( args );
     comp.inform( core );
     map = comp.getElevationMap( reader, core );
-    assertEquals( 3, map.size() );
+      assertEquals( 4, map.size() );
     assertEquals( null, map.get( "XXXX" ) );
     assertEquals( null, map.get( "YYYY" ) );
     assertEquals( null, map.get( "ZZZZ" ) );
@@ -112,12 +151,17 @@ public void testInterface() throws Exception
 
     assertQ("Make sure QEC handles null queries", req("qt","/elevate", "q.alt","*:*", "defType","dismax"),
         "//*[@numFound='0']");
+    } finally {
+      delete();
+    }
 
   }
 
   @Test
-  public void testSorting() throws IOException
+  public void testSorting() throws Exception
   {
+    try {
+      init("schema12.xml");
     assertU(adoc("id", "a", "title", "ipod",           "str_s1", "a" ));
     assertU(adoc("id", "b", "title", "ipod ipod",      "str_s1", "b" ));
     assertU(adoc("id", "c", "title", "ipod ipod ipod", "str_s1", "c" ));
@@ -136,7 +180,7 @@ public void testSorting() throws IOException
     args.put( "indent", "true" );
     //args.put( CommonParams.FL, "id,title,score" );
     SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );
-    IndexReader reader = req.getSearcher().getReader();
+      IndexReader reader = req.getSearcher().getIndexReader();
     QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( "elevate" );
 
     assertQ("Make sure standard sort works as expected", req
@@ -184,7 +228,7 @@ public void testSorting() throws IOException
         );
     
     // Try normal sort by 'id'
-    // default 'forceBoost' shoudl be false
+      // default 'forceBoost' should be false
     assertEquals( false, booster.forceElevation );
     args.put( CommonParams.SORT, "str_s1 asc" );
     assertQ( null, req
@@ -212,6 +256,7 @@ public void testSorting() throws IOException
 	    ,"//result/doc[1]/str[@name='id'][.='x']"
 	    ,"//result/doc[2]/str[@name='id'][.='a']"            
 	    );
+
     // Test exclusion
     booster.elevationCache.clear();
     args.remove( CommonParams.SORT );
@@ -226,6 +271,9 @@ public void testSorting() throws IOException
 
 
     req.close();
+    } finally {
+      delete();
+    }
   }
   
   // write a test file to boost some docs
@@ -249,6 +297,8 @@ private void writeFile( File file, String query, String ... ids ) throws Excepti
   @Test
   public void testElevationReloading() throws Exception
   {
+    try {
+      init("schema12.xml");
     String testfile = "data-elevation.xml";
     File f = new File( h.getCore().getDataDir(), testfile );
     writeFile( f, "aaa", "A" );
@@ -260,7 +310,7 @@ public void testElevationReloading() throws Exception
     comp.inform( h.getCore() );
 
     SolrQueryRequest req = req();
-    IndexReader reader = req.getSearcher().getReader();
+      IndexReader reader = req.getSearcher().getIndexReader();
     Map<String, ElevationObj> map = comp.getElevationMap(reader, h.getCore());
     assertTrue( map.get( "aaa" ).priority.containsKey( "A" ) );
     assertNull( map.get( "bbb" ) );
@@ -272,10 +322,13 @@ public void testElevationReloading() throws Exception
     assertU(commit());
 
     req = req();
-    reader = req.getSearcher().getReader();
+      reader = req.getSearcher().getIndexReader();
     map = comp.getElevationMap(reader, h.getCore());
     assertNull( map.get( "aaa" ) );
     assertTrue( map.get( "bbb" ).priority.containsKey( "B" ) );
     req.close();
+    } finally {
+      delete();
+    }
   }
 }
