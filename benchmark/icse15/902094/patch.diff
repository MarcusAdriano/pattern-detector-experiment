diff --git a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/PersistenceBundleManager.java b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/PersistenceBundleManager.java
index d09150e8..8e4d9e26 100644
--- a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/PersistenceBundleManager.java
+++ b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/PersistenceBundleManager.java
@@ -126,6 +126,8 @@ public Object addingBundle(Bundle bundle, BundleEvent event)
    */
   public synchronized void addingProvider(ServiceReference ref)
   {
+    if(_logger.isDebugEnabled())
+      _logger.debug("Adding a provider: {}", new Object[] {ref});
     persistenceProviders.add(ref);
   }
   
@@ -139,6 +141,10 @@ public void removingProvider(ServiceReference ref)
     //We may get a null reference if the ref-list is empty to start with
     if(ref == null)
       return;
+    
+    if(_logger.isDebugEnabled())
+      _logger.debug("Removing a provider: {}", new Object[] {ref});
+    
     Map<Bundle, EntityManagerFactoryManager> mgrs;
     synchronized (this) {
       persistenceProviders.remove(ref);
@@ -221,6 +227,9 @@ private EntityManagerFactoryManager setupManager(Bundle bundle,
       //If we have no persistence units then our job is done
       if (!!!persistenceXmls.isEmpty()) {
         
+        if(_logger.isDebugEnabled())
+          _logger.debug("Located Persistence descriptors: {} in bundle {}", new Object[] {persistenceXmls, bundle.getSymbolicName() + "_" + bundle.getVersion()});
+        
         if(bundle.getState() == Bundle.ACTIVE) {
           _logger.warn("The bundle {} is already active, it may not be possible to create managed persistence units for it.", 
               new Object[] {bundle.getSymbolicName() + "_" + bundle.getVersion()});
@@ -241,6 +250,10 @@ private EntityManagerFactoryManager setupManager(Bundle bundle,
         
         //If we have any persistence units then find a provider to use
         if(!!!pUnits.isEmpty()) {
+          
+          if(_logger.isDebugEnabled())
+            _logger.debug("Located Persistence units: {}", new Object[] {pUnits});
+          
           ServiceReference ref = getProviderServiceReference(pUnits);
           //If we found a provider then create the ManagedPersistenceUnitInfo objects
           if(ref != null) {  
diff --git a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/PersistenceDescriptorImpl.java b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/PersistenceDescriptorImpl.java
index e14cd4ea..33347cd9 100644
--- a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/PersistenceDescriptorImpl.java
+++ b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/impl/PersistenceDescriptorImpl.java
@@ -59,4 +59,12 @@ public InputStream getInputStream() {
     return inputStream;
   }
   
+  public String toString()
+  {
+    if(location != null)
+      return location;
+    else 
+      return super.toString();
+  }
+  
 }
diff --git a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/parsing/impl/PersistenceUnitImpl.java b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/parsing/impl/PersistenceUnitImpl.java
index fa2ecb55..1fa58eca 100644
--- a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/parsing/impl/PersistenceUnitImpl.java
+++ b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/parsing/impl/PersistenceUnitImpl.java
@@ -44,7 +44,7 @@
    * The Service Reference for the provider to which this persistence
    * unit is tied
    */
-  ServiceReference provider;
+  private ServiceReference provider;
 
   
   /**
@@ -61,7 +61,10 @@ public PersistenceUnitImpl(Bundle b, String name, String transactionType, String
     this.bundle = b;
     metadata.put(SCHEMA_VERSION, version);
 
-    if (name != null)metadata.put(UNIT_NAME, name);
+    if (name == null)
+      name = "";
+      
+    metadata.put(UNIT_NAME, name);
     if (transactionType != null) metadata.put(TRANSACTION_TYPE, transactionType);
 
   }
@@ -180,4 +183,10 @@ public void setProviderReference(ServiceReference providerRef)
   {
     provider = providerRef;
   }
+  
+  public String toString()
+  {
+    return "Persistence unit " + metadata.get(UNIT_NAME) + " in bundle "
+    + bundle.getSymbolicName() + "_" + bundle.getVersion();
+  }
 }
diff --git a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/PersistenceUnitInfoImpl.java b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/PersistenceUnitInfoImpl.java
index d04e7a09..ef04c4f2 100644
--- a/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/PersistenceUnitInfoImpl.java
+++ b/incubator/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/unit/impl/PersistenceUnitInfoImpl.java
@@ -20,6 +20,7 @@
 
 import java.net.URL;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 import java.util.Properties;
 
@@ -76,10 +77,15 @@ public ClassLoader getClassLoader() {
   public List<URL> getJarFileUrls() {
     List<String> jarFiles = (List<String>) unit.getPersistenceXmlMetadata().get(ParsedPersistenceUnit.JAR_FILES);
     List<URL> urls = new ArrayList<URL>();
-    
-    for(String jarFile : jarFiles)
-      urls.add(bundle.getResource(jarFile));
-    
+    if(jarFiles != null) {
+      for(String jarFile : jarFiles){
+        URL url = bundle.getResource(jarFile);
+        if(url == null)
+          _logger.error("The persistence unit {} in bundle {} listed the jar file {}, but " +
+          		"{} could not be found in the bundle", new Object[]{getPersistenceUnitName(),
+              bundle.getSymbolicName() + "_" + bundle.getVersion(), jarFile, jarFile});
+      }
+    }
     return urls;
   }
 
@@ -100,12 +106,20 @@ public DataSource getJtaDataSource() {
 
   @SuppressWarnings("unchecked")
   public List<String> getManagedClassNames() {
-    return (List<String>) unit.getPersistenceXmlMetadata().get(ParsedPersistenceUnit.MANAGED_CLASSES);
+    List<String> classes = (List<String>) unit.getPersistenceXmlMetadata().get(ParsedPersistenceUnit.MANAGED_CLASSES);
+    if(classes == null)
+      classes = new ArrayList<String>();
+    
+    return Collections.unmodifiableList(classes);
   }
 
   @SuppressWarnings("unchecked")
   public List<String> getMappingFileNames() {
-    return (List<String>) unit.getPersistenceXmlMetadata().get(ParsedPersistenceUnit.MAPPING_FILES);
+    List<String> mappingFiles = (List<String>) unit.getPersistenceXmlMetadata().get(ParsedPersistenceUnit.MAPPING_FILES);
+    if(mappingFiles == null)
+      mappingFiles = new ArrayList<String>();
+    
+    return Collections.unmodifiableList(mappingFiles);
   }
 
   public ClassLoader getNewTempClassLoader() {
@@ -150,17 +164,22 @@ public Properties getProperties() {
 
   public SharedCacheMode getSharedCacheMode() {
     // TODO This needs to be supported once we parse JPA 2.0 xml
-    return null;
+    return SharedCacheMode.UNSPECIFIED;
   }
 
   public PersistenceUnitTransactionType getTransactionType() {
-    return PersistenceUnitTransactionType.valueOf(
-        (String) unit.getPersistenceXmlMetadata().get(ParsedPersistenceUnit.TRANSACTION_TYPE));
+    
+    String s = (String) unit.getPersistenceXmlMetadata().get(ParsedPersistenceUnit.TRANSACTION_TYPE);
+
+    if(s == null)
+      return PersistenceUnitTransactionType.JTA;
+    else
+      return PersistenceUnitTransactionType.valueOf(s);
   }
 
   public ValidationMode getValidationMode() {
     // TODO This needs to be supported once we parse JPA 2.0 xml
-    return null;
+    return ValidationMode.AUTO;
   }
   
 }
