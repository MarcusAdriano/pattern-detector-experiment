diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java
index 1efa13a6..e319385d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData.java
@@ -450,13 +450,13 @@ public String getSystemFunctions()  {
 	}
 
     /**
-     * Get a comma separated list of time and date functions.
-		not sure if this includes these built-ins or not, but here they are.
-		FIXME: find a way to reference method aliases known to be "date/time"
+     * Get a comma separated list of JDBC escaped time date functions.
+     * Must be a complete or sub set of functions in appendix C.3
+     * of JDBC 3.0 specification.
      * @return the list
      */
 	public String getTimeDateFunctions() {
-		return "CURDATE,CURTIME,CURRENT_DATE,CURRENT_TIME,CURRENT_TIMESTAMP,EXTRACT";
+		return "CURDATE,CURTIME,HOUR,MINUTE,MONTH,SECOND,TIMESTAMPADD,TIMESTAMPDIFF,YEAR";
 	}
 
     /**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadataJdbc20.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadataJdbc20.java
index 95b4e370..a5b4ff7c 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadataJdbc20.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/metadataJdbc20.java
@@ -118,6 +118,9 @@ public static void main(String[] args) {
 			System.out.println("Test escaped string functions - JDBC 3.0 C.2");
 			testEscapedFunctions(con, STRING_FUNCTIONS, met.getStringFunctions());
 			
+			System.out.println("Test escaped date time functions - JDBC 3.0 C.3");
+			testEscapedFunctions(con, TIMEDATE_FUNCTIONS, met.getTimeDateFunctions());
+
 			System.out.println("Test escaped system functions - JDBC 3.0 C.4");
 			testEscapedFunctions(con, SYSTEM_FUNCTIONS, met.getSystemFunctions());
 
@@ -235,6 +238,29 @@ static void dumpRS(ResultSet s) throws SQLException {
 		{ "UCASE", "'Fernando Alonso'" }
 		};
 	
+	private static final String[][] TIMEDATE_FUNCTIONS =
+	{	
+		// Section C.3 JDBC 3.0 spec.
+		{ "CURDATE" },
+		{ "CURTIME" },
+		{ "DAYNAME", "{d '1995-12-19'h}" },
+		{ "DAYOFMONTH", "{d '1995-12-19'}" },
+		{ "DAYOFWEEK", "{d '1995-12-19'}" },
+		{ "DAYOFYEAR", "{d '1995-12-19'}" },
+		{ "HOUR", "{t '16:13:03'}" },
+		{ "MINUTE", "{t '16:13:03'}" },
+		{ "MONTH", "{d '1995-12-19'}" },
+		{ "MONTHNAME", "{d '1995-12-19'}" },
+		{ "NOW" },
+		{ "QUARTER", "{d '1995-12-19'}" },
+		{ "SECOND", "{t '16:13:03'}" },
+		{ "TIMESTAMPADD", "SQL_TSI_DAY", "7", "{ts '1995-12-19 12:15:54'}" },
+		{ "TIMESTAMPDIFF", "SQL_TSI_DAY", "{ts '1995-12-19 12:15:54'}", "{ts '1997-11-02 00:15:23'}" },
+		{ "WEEK", "{d '1995-12-19'}" },
+		{ "YEAR", "{d '1995-12-19'}" },
+		
+	};
+
 	private static final String[][] SYSTEM_FUNCTIONS =
 	{	
 		// Section C.4 JDBC 3.0 spec.
@@ -323,6 +349,18 @@ private static boolean executeEscaped(Connection conn, String[] specDetails)
 		
 		sql = sql + ") }";
 		
+		// Special processing for functions that return
+		// current date, time or timestamp. This is to
+		// ensure we don't have output that depends on
+		// the time the test is run.
+		if ("CURDATE".equals(specDetails[0]))
+			sql = "VALUES CASE WHEN { fn CURDATE()} = CURRENT_DATE THEN 'OK' ELSE 'wrong' END";
+		else if ("CURTIME".equals(specDetails[0]))
+			sql = "VALUES CASE WHEN { fn CURTIME()} = CURRENT_TIME THEN 'OK' ELSE 'wrong' END";
+		else if ("NOW".equals(specDetails[0]))
+			sql = "VALUES CASE WHEN { fn NOW()} = CURRENT_TIMESTAMP THEN 'OK' ELSE 'wrong' END";
+		
+		
 		System.out.print("Executing " + sql + " -- ");
 			
 		try {
