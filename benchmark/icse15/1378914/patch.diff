diff --git a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.java b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.java
index abd84c3a..4271f220 100644
--- a/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.java
+++ b/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/JmxMonitoredMap.java
@@ -61,6 +61,13 @@
 
   public JmxMonitoredMap(String coreName, String coreHashCode,
                          final JmxConfiguration jmxConfig) {
+    this(coreName, coreHashCode, jmxConfig, null);
+  }
+  
+  // TODO: Make public? Move Map<String,?> env to environment?
+  // Currently the map is needed to bind to localhost
+  JmxMonitoredMap(String coreName, String coreHashCode,
+                         final JmxConfiguration jmxConfig, Map<String,?> env) {
     this.coreHashCode = coreHashCode;
     jmxRootName = (null != jmxConfig.rootName ?
                    jmxConfig.rootName
@@ -94,7 +101,7 @@ public JmxMonitoredMap(String coreName, String coreHashCode,
         server = MBeanServerFactory.newMBeanServer();
         JMXConnectorServer connector = JMXConnectorServerFactory
                 .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),
-                        null, server);
+                        env, server);
         connector.start();
         LOG.info("JMX monitoring is enabled at " + jmxConfig.serviceUrl);
       } catch (Exception e) {
diff --git a/lucene/dev/trunk/solr/core/src/test/org/apache/solr/cloud/TestMultiCoreConfBootstrap.java b/lucene/dev/trunk/solr/core/src/test/org/apache/solr/cloud/TestMultiCoreConfBootstrap.java
index 8effb269..0a7f773f 100644
--- a/lucene/dev/trunk/solr/core/src/test/org/apache/solr/cloud/TestMultiCoreConfBootstrap.java
+++ b/lucene/dev/trunk/solr/core/src/test/org/apache/solr/cloud/TestMultiCoreConfBootstrap.java
@@ -25,9 +25,7 @@
 import org.apache.solr.util.AbstractSolrTestCase;
 import org.apache.solr.util.ExternalPaths;
 import org.junit.After;
-import org.junit.AfterClass;
 import org.junit.Before;
-import org.junit.BeforeClass;
 import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -37,26 +35,24 @@
   protected CoreContainer cores = null;
   private String home;
 
-  protected static ZkTestServer zkServer;
-  protected static String zkDir;
-  
-  @BeforeClass
-  public static void beforeClass() {
-    createTempDir();
-  }
-  
-  @AfterClass
-  public static void afterClass() {
-    zkServer = null;
-    zkDir = null;
-  }
+  protected File dataDir2;
+  protected ZkTestServer zkServer;
+  protected String zkDir;
   
   @Override
   @Before
   public void setUp() throws Exception {
     super.setUp();
+    
+    createTempDir();
+    dataDir2 = new File(TEMP_DIR, getSimpleClassName() + "-core1-"
+        + System.currentTimeMillis());
+    dataDir2.mkdirs();
+
     home = ExternalPaths.EXAMPLE_MULTICORE_HOME;
     System.setProperty("solr.solr.home", home);
+    System.setProperty( "solr.core0.data.dir", dataDir.getCanonicalPath() ); 
+    System.setProperty( "solr.core1.data.dir", dataDir2.getCanonicalPath() ); 
     
     zkDir = dataDir.getAbsolutePath() + File.separator
         + "zookeeper/server1/data";
@@ -82,14 +78,11 @@ public void tearDown() throws Exception {
     
     zkServer.shutdown();
     
-    File dataDir1 = new File(home + File.separator + "core0","data");
-    File dataDir2 = new File(home + File.separator + "core1","data");
-
     String skip = System.getProperty("solr.test.leavedatadir");
     if (null != skip && 0 != skip.trim().length()) {
       log.info("NOTE: per solr.test.leavedatadir, dataDir will not be removed: " + dataDir.getAbsolutePath());
     } else {
-      if (!AbstractSolrTestCase.recurseDelete(dataDir1)) {
+      if (!AbstractSolrTestCase.recurseDelete(dataDir)) {
         log.warn("!!!! WARNING: best effort to remove " + dataDir.getAbsolutePath() + " FAILED !!!!!");
       }
       if (!AbstractSolrTestCase.recurseDelete(dataDir2)) {
@@ -97,6 +90,9 @@ public void tearDown() throws Exception {
       }
     }
 
+    zkServer = null;
+    zkDir = null;
+
     super.tearDown();
   }
 
diff --git a/lucene/dev/trunk/solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap.java b/lucene/dev/trunk/solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap.java
index 24c4666b..4e1a7600 100644
--- a/lucene/dev/trunk/solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap.java
+++ b/lucene/dev/trunk/solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap.java
@@ -30,10 +30,15 @@
 import javax.management.remote.JMXConnector;
 import javax.management.remote.JMXConnectorFactory;
 import javax.management.remote.JMXServiceURL;
+import javax.management.remote.rmi.RMIConnectorServer;
+import java.io.IOException;
+import java.net.InetSocketAddress;
+import java.net.Socket;
 import java.net.ServerSocket;
 import java.net.URL;
-import java.rmi.RemoteException;
 import java.rmi.registry.LocateRegistry;
+import java.rmi.server.RMIServerSocketFactory;
+import java.util.Collections;
 import java.util.Set;
 
 import static org.hamcrest.CoreMatchers.allOf;
@@ -61,33 +66,38 @@
   public void setUp() throws Exception {
 
     super.setUp();
-
-    int retries = 5;
-    for (int i = 0; i < retries; i++) {
-      try {
-        ServerSocket server = new ServerSocket(0);
-        try {
-          port = server.getLocalPort();
-        } finally {
-          server.close();
-        }
-        // System.out.println("Using port: " + port);
+    String oldHost = System.getProperty("java.rmi.server.hostname");
         try {
-          LocateRegistry.createRegistry(port);
-        } catch (RemoteException e) {
-          throw e;
+      // this stupid sysprop thing is needed, because remote stubs use the
+      // hostname to connect, which does not work with server bound to 127.0.0.1
+      // See: http://weblogs.java.net/blog/emcmanus/archive/2006/12/multihomed_comp.html
+      System.setProperty("java.rmi.server.hostname", "127.0.0.1");
+      class LocalhostRMIServerSocketFactory implements RMIServerSocketFactory {
+        ServerSocket socket;
+        
+        @Override
+        public ServerSocket createServerSocket(int port) throws IOException {
+          socket = new ServerSocket();
+          socket.bind(new InetSocketAddress("127.0.0.1", port));
+          return socket;
         }
-        String url = "service:jmx:rmi:///jndi/rmi://:" + port + "/solrjmx";
+      };
+      LocalhostRMIServerSocketFactory factory = new LocalhostRMIServerSocketFactory();
+      LocateRegistry.createRegistry(0, null, factory);
+      port = factory.socket.getLocalPort();
+      //System.out.println("Using port: " + port);
+      String url = "service:jmx:rmi://127.0.0.1:"+port+"/jndi/rmi://127.0.0.1:"+port+"/solrjmx";
         JmxConfiguration config = new JmxConfiguration(true, null, url, null);
-        monitoredMap = new JmxMonitoredMap<String, SolrInfoMBean>("", "", config);
+      monitoredMap = new JmxMonitoredMap<String, SolrInfoMBean>("", "", config,
+        Collections.singletonMap(RMIConnectorServer.RMI_SERVER_SOCKET_FACTORY_ATTRIBUTE, factory));
         JMXServiceURL u = new JMXServiceURL(url);
         connector = JMXConnectorFactory.connect(u);
         mbeanServer = connector.getMBeanServerConnection();
-        break;
-      } catch (Exception e) {
-        if(retries == (i + 1)) {
-          throw e;
-        }
+    } finally {
+      if (oldHost == null) {
+        System.clearProperty("java.rmi.server.hostname");
+      } else {
+        System.setProperty("java.rmi.server.hostname", oldHost);
       }
     }
   }
