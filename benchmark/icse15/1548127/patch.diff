diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java
index a9dcba9e..0b3181b4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java
@@ -31,6 +31,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.loader.ClassInspector;
 import org.apache.derby.shared.common.sanity.SanityManager;
 import org.apache.derby.iapi.sql.compile.CompilerContext;
+import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
@@ -733,4 +734,12 @@ private boolean isUserDefinedAggregate()
         return uad instanceof UserAggregateDefinition;
     }
 
+    @Override
+    void acceptChildren(Visitor v) throws StandardException {
+        super.acceptChildren(v);
+
+        if (userAggregateName != null) {
+            userAggregateName = (TableName) userAggregateName.accept(v);
+        }
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AllResultColumn.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AllResultColumn.java
index 0a992582..52b5e773 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AllResultColumn.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AllResultColumn.java
@@ -23,6 +23,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.services.context.ContextManager;
+import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.shared.common.sanity.SanityManager;
 
 /**
@@ -81,4 +82,13 @@ ResultColumn cloneMe() throws StandardException
     public TableName getTableNameObject() {
         return tableName;
     }
+
+    @Override
+    void acceptChildren(Visitor v) throws StandardException {
+        super.acceptChildren(v);
+
+        if (tableName != null) {
+            tableName = (TableName) tableName.accept(v);
+        }
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BaseColumnNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BaseColumnNode.java
index eaa04189..82c00a5d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BaseColumnNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BaseColumnNode.java
@@ -25,6 +25,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.services.compiler.MethodBuilder;
 import org.apache.derby.iapi.services.context.ContextManager;
+import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.shared.common.sanity.SanityManager;
 import org.apache.derby.iapi.store.access.Qualifier;
 import org.apache.derby.iapi.types.DataTypeDescriptor;
@@ -180,4 +181,13 @@ boolean isEquivalent(ValueNode o)
 
 		return false;
 	}
+
+    @Override
+    void acceptChildren(Visitor v) throws StandardException {
+        super.acceptChildren(v);
+
+        if (tableName != null) {
+            tableName = (TableName) tableName.accept(v);
+        }
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java
index 52fe6074..2d285966 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ColumnReference.java
@@ -26,6 +26,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.services.compiler.MethodBuilder;
 import org.apache.derby.iapi.services.context.ContextManager;
+import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.shared.common.sanity.SanityManager;
 import org.apache.derby.iapi.store.access.Qualifier;
 import org.apache.derby.iapi.types.DataTypeDescriptor;
@@ -1248,4 +1249,13 @@ protected boolean isScoped()
 		void setColName(String cName) { colName = cName; }
 		void setSource(ResultColumn rc) { source = rc; }
 	}
+
+    @Override
+    void acceptChildren(Visitor v) throws StandardException {
+        super.acceptChildren(v);
+
+        if (tableName != null) {
+            tableName = (TableName) tableName.accept(v);
+        }
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java
index 7688a73c..66982fe1 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ConstraintDefinitionNode.java
@@ -29,6 +29,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.monitor.Monitor;
 import org.apache.derby.shared.common.sanity.SanityManager;
 import org.apache.derby.iapi.services.uuid.UUIDFactory;
+import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.iapi.sql.depend.ProviderList;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 
@@ -500,4 +501,13 @@ private	UUIDFactory	getUUIDFactory()
 		}
 		return	uuidFactory;
 	}
+
+    @Override
+    void acceptChildren(Visitor v) throws StandardException {
+        super.acceptChildren(v);
+
+        if (constraintName != null) {
+            constraintName = (TableName) constraintName.accept(v);
+        }
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java
index 24f8e248..120efb52 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateIndexNode.java
@@ -30,6 +30,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.services.context.ContextManager;
 import org.apache.derby.iapi.services.property.PropertyUtil;
+import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.shared.common.sanity.SanityManager;
 import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
@@ -322,4 +323,17 @@ private void verifyAndGetUniqueNames()
 			}
 		}
 	}
+
+    @Override
+    void acceptChildren(Visitor v) throws StandardException {
+        super.acceptChildren(v);
+
+        if (indexName != null) {
+            indexName = (TableName) indexName.accept(v);
+        }
+
+        if (tableName != null) {
+            tableName = (TableName) tableName.accept(v);
+        }
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateSequenceNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateSequenceNode.java
index 8491fca8..6d834c4e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateSequenceNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateSequenceNode.java
@@ -28,6 +28,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.types.DataTypeDescriptor;
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.services.context.ContextManager;
+import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.iapi.types.TypeId;
 
 
@@ -248,5 +249,12 @@ public ConstantAction makeConstantAction() {
                         _cycle);
     }
 
+    @Override
+    void acceptChildren(Visitor v) throws StandardException {
+        super.acceptChildren(v);
 
+        if (_sequenceName != null) {
+            _sequenceName = (TableName) _sequenceName.accept(v);
+        }
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java
index 4bf8ce38..167ac540 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java
@@ -34,6 +34,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.shared.common.sanity.SanityManager;
 import org.apache.derby.iapi.sql.compile.CompilerContext;
 import org.apache.derby.iapi.sql.compile.Visitable;
+import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.iapi.sql.conn.Authorizer;
 import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
 import org.apache.derby.iapi.sql.depend.DependencyManager;
@@ -997,4 +998,16 @@ public String toString()
 		}
 	}
 
+    @Override
+    void acceptChildren(Visitor v) throws StandardException {
+        super.acceptChildren(v);
+
+        if (triggerName != null) {
+            triggerName = (TableName) triggerName.accept(v);
+        }
+
+        if (tableName != null) {
+            tableName = (TableName) tableName.accept(v);
+        }
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java
index 676b1bbb..aafe591a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CurrentOfNode.java
@@ -34,8 +34,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.compile.Optimizable;
 import org.apache.derby.iapi.sql.compile.OptimizablePredicateList;
 import org.apache.derby.iapi.sql.compile.Optimizer;
-import org.apache.derby.iapi.sql.compile.RequiredRowOrdering;
 import org.apache.derby.iapi.sql.compile.RowOrdering;
+import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
 import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
@@ -593,4 +593,17 @@ ExecPreparedStatement getCursorStatement()
 
 		return activation.getPreparedStatement();
 	}
+
+    @Override
+    void acceptChildren(Visitor v) throws StandardException {
+        super.acceptChildren(v);
+
+        if (exposedTableName != null) {
+            exposedTableName = (TableName) exposedTableName.accept(v);
+        }
+
+        if (baseTableName != null) {
+            baseTableName = (TableName) baseTableName.accept(v);
+        }
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java
index 6f6dda77..105e65ca 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DDLStatementNode.java
@@ -30,6 +30,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.context.ContextManager;
 import org.apache.derby.shared.common.sanity.SanityManager;
 import org.apache.derby.iapi.sql.compile.CompilerContext;
+import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.iapi.sql.conn.Authorizer;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
@@ -485,4 +486,12 @@ FromList	makeFromList( DataDictionary dd, TableElementList tableElementList, boo
         return fromList;
 	}
     
+    @Override
+    void acceptChildren(Visitor v) throws StandardException {
+        super.acceptChildren(v);
+
+        if (tableName != null) {
+            tableName = (TableName) tableName.accept(v);
+        }
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java
index e2243f62..ca77c5ca 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DMLModStatementNode.java
@@ -22,7 +22,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package	org.apache.derby.impl.sql.compile;
 
 import java.util.ArrayList;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import org.apache.derby.catalog.DefaultInfo;
@@ -1980,9 +1979,11 @@ void acceptChildren(Visitor v)
 
 		if (targetTableName != null)
 		{
-			targetTableName.accept(v);
+            targetTableName = (TableName) targetTableName.accept(v);
+		}
+
+        if (synonymTableName != null) {
+            synonymTableName = (TableName) synonymTableName.accept(v);
 		}
 	}
 }
-
-
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DropSequenceNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DropSequenceNode.java
index 5c33fa49..3f975515 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DropSequenceNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/DropSequenceNode.java
@@ -25,6 +25,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.services.context.ContextManager;
+import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
 import org.apache.derby.iapi.sql.dictionary.SequenceDescriptor;
@@ -90,4 +91,12 @@ public ConstantAction makeConstantAction() throws StandardException {
         return getGenericConstantActionFactory().getDropSequenceConstantAction(getSchemaDescriptor(), getRelativeName());
 	}
 
+    @Override
+    void acceptChildren(Visitor v) throws StandardException {
+        super.acceptChildren(v);
+
+        if (dropItem != null) {
+            dropItem = (TableName) dropItem.accept(v);
+        }
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ExecSPSNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ExecSPSNode.java
index 5b2041c4..ac03a690 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ExecSPSNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ExecSPSNode.java
@@ -27,6 +27,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.loader.GeneratedClass;
 import org.apache.derby.shared.common.sanity.SanityManager;
 import org.apache.derby.iapi.sql.ResultDescription;
+import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 import org.apache.derby.iapi.sql.dictionary.SPSDescriptor;
 import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
@@ -311,4 +312,13 @@ String statementToString()
 	{
 		return "EXECUTE STATEMENT";
 	}
+
+    @Override
+    void acceptChildren(Visitor v) throws StandardException {
+        super.acceptChildren(v);
+
+        if (name != null) {
+            name = (TableName) name.accept(v);
+        }
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FKConstraintDefinitionNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FKConstraintDefinitionNode.java
index 346f0a8b..3af54a47 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FKConstraintDefinitionNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FKConstraintDefinitionNode.java
@@ -26,6 +26,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.context.ContextManager;
 import org.apache.derby.shared.common.sanity.SanityManager;
 import org.apache.derby.iapi.sql.StatementType;
+import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.iapi.sql.conn.Authorizer;
 import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
@@ -161,4 +162,13 @@ int getPrivType()
 	{
 		return Authorizer.REFERENCES_PRIV;
 	}
+
+    @Override
+    void acceptChildren(Visitor v) throws StandardException {
+        super.acceptChildren(v);
+
+        if (refTableName != null) {
+            refTableName = (TableName) refTableName.accept(v);
+        }
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
index 3b42624e..067699d8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
@@ -4890,6 +4890,10 @@ void acceptChildren(Visitor v)
 		if (requalificationRestrictionList != null) {
 			requalificationRestrictionList.accept(v);
 		}
+
+        if (tableName != null) {
+            tableName = (TableName) tableName.accept(v);
+        }
 	}
 
     /**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromTable.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromTable.java
index fee55db5..58d3381f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromTable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromTable.java
@@ -39,6 +39,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.compile.OptimizablePredicateList;
 import org.apache.derby.iapi.sql.compile.Optimizer;
 import org.apache.derby.iapi.sql.compile.RowOrdering;
+import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.iapi.sql.dictionary.*;
 import org.apache.derby.iapi.types.DataTypeDescriptor;
 import org.apache.derby.iapi.util.JBitSet;
@@ -1522,4 +1523,17 @@ TableName getOrigTableName()
 	{
 		return this.origTableName;
 	}
+
+    @Override
+    void acceptChildren(Visitor v) throws StandardException {
+        super.acceptChildren(v);
+
+        if (origTableName != null) {
+            origTableName = (TableName) origTableName.accept(v);
+        }
+
+        if (corrTableName != null) {
+            corrTableName = (TableName) corrTableName.accept(v);
+        }
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
index fa359d5e..878915ea 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
@@ -1856,6 +1856,10 @@ void acceptChildren(Visitor v)
 		{
 			methodCall = (MethodCallNode) methodCall.accept(v);
 		}
+
+        if (exposedName != null) {
+            exposedName = (TableName) exposedName.accept(v);
+        }
 	}
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LockTableNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LockTableNode.java
index 59b08f9e..a880afa2 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LockTableNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LockTableNode.java
@@ -26,6 +26,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.context.ContextManager;
 import org.apache.derby.shared.common.sanity.SanityManager;
 import org.apache.derby.iapi.sql.compile.CompilerContext;
+import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.iapi.sql.conn.Authorizer;
 import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
 import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
@@ -178,4 +179,13 @@ public ConstantAction makeConstantAction() throws StandardException
 						conglomerateNumber,
 						exclusiveMode);
 	}
+
+    @Override
+    void acceptChildren(Visitor v) throws StandardException {
+        super.acceptChildren(v);
+
+        if (tableName != null) {
+            tableName = (TableName) tableName.accept(v);
+        }
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NextSequenceNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NextSequenceNode.java
index e08d239e..83559c8e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NextSequenceNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NextSequenceNode.java
@@ -30,6 +30,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.context.ContextManager;
 import org.apache.derby.shared.common.sanity.SanityManager;
 import org.apache.derby.iapi.sql.compile.CompilerContext;
+import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
 import org.apache.derby.iapi.sql.dictionary.SequenceDescriptor;
 
@@ -188,4 +189,13 @@ public String toString() {
     boolean isEquivalent(ValueNode other) throws StandardException {
         return false;
     }
+
+    @Override
+    void acceptChildren(Visitor v) throws StandardException {
+        super.acceptChildren(v);
+
+        if (sequenceName != null) {
+            sequenceName = (TableName) sequenceName.accept(v);
+        }
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PrivilegeNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PrivilegeNode.java
index 97f3e5bd..82cd6e1d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PrivilegeNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/PrivilegeNode.java
@@ -29,6 +29,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.services.context.ContextManager;
+import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.shared.common.sanity.SanityManager;
 import org.apache.derby.iapi.sql.depend.Provider;
 import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
@@ -352,4 +353,13 @@ private StandardException unimplementedFeature()
     {
         return StandardException.newException( SQLState.BTREE_UNIMPLEMENTED_FEATURE );
     }
+
+    @Override
+    void acceptChildren(Visitor v) throws StandardException {
+        super.acceptChildren(v);
+
+        if (objectName != null) {
+            objectName = (TableName) objectName.accept(v);
+        }
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RenameNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RenameNode.java
index cc699038..da75ddb2 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RenameNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RenameNode.java
@@ -27,6 +27,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.shared.common.sanity.SanityManager;
 import org.apache.derby.iapi.sql.StatementType;
 import org.apache.derby.iapi.sql.compile.CompilerContext;
+import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.iapi.sql.dictionary.ColumnDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
 import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
@@ -455,4 +456,13 @@ private StandardException descriptorExistsException(TupleDescriptor tuple,
 										   parent.getDescriptorType(),
 										   parent.getDescriptorName());
 	}
+
+    @Override
+    void acceptChildren(Visitor v) throws StandardException {
+        super.acceptChildren(v);
+
+        if (newTableName != null) {
+            newTableName = (TableName) newTableName.accept(v);
+        }
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SetConstraintsNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SetConstraintsNode.java
index 68addcc5..5482c73f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SetConstraintsNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SetConstraintsNode.java
@@ -25,6 +25,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.services.context.ContextManager;
 import org.apache.derby.shared.common.sanity.SanityManager;
+import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 import org.apache.derby.iapi.sql.execute.ConstantAction;
 
@@ -122,4 +123,14 @@ public void bindStatement() throws StandardException
         }
     }
 
+    @Override
+    void acceptChildren(Visitor v) throws StandardException {
+        super.acceptChildren(v);
+
+        if (constraints != null) {
+            for (int i = 0; i < constraints.size(); i++) {
+                constraints.set(i, (TableName) constraints.get(i).accept(v));
+            }
+        }
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java
index e5ae7379..ecfc8dc4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/StaticMethodCallNode.java
@@ -37,6 +37,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.context.ContextManager;
 import org.apache.derby.shared.common.sanity.SanityManager;
 import org.apache.derby.iapi.sql.compile.CompilerContext;
+import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.iapi.sql.conn.Authorizer;
 import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
 import org.apache.derby.iapi.sql.dictionary.AliasDescriptor;
@@ -1441,4 +1442,13 @@ int getPrivType()
 	{
 		return Authorizer.EXECUTE_PRIV;
 	}
+
+    @Override
+    void acceptChildren(Visitor v) throws StandardException {
+        super.acceptChildren(v);
+
+        if (procedureName != null) {
+            procedureName = (TableName) procedureName.accept(v);
+        }
+    }
 }
