diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 78df7f8a..b26f3f9d 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -1580,11 +1580,11 @@ public ColumnFamily getSliceFrom(String key, String cfName, String startColumn,
     throws IOException, ExecutionException, InterruptedException
     {
         lock_.readLock().lock();
+        List<ColumnIterator> iterators = new ArrayList<ColumnIterator>();
         try
         {
             final ColumnFamily returnCF;
             ColumnIterator iter;
-            List<ColumnIterator> iterators = new ArrayList<ColumnIterator>();
         
             /* add the current memtable */
             memtableLock_.readLock().lock();
@@ -1637,9 +1637,7 @@ public int compare(IColumn c1, IColumn c2)
             Iterator collated = IteratorUtils.collatedIterator(comparator, iterators);
             if (!collated.hasNext())
                 return new ColumnFamily(cfName, DatabaseDescriptor.getColumnFamilyType(cfName));
-            List<IColumn> L = new ArrayList();
-            CollectionUtils.addAll(L, collated);
-            ReducingIterator<IColumn> reduced = new ReducingIterator<IColumn>(L.iterator())
+            ReducingIterator<IColumn> reduced = new ReducingIterator<IColumn>(collated)
             {
                 ColumnFamily curCF = returnCF.cloneMeShallow();
 
@@ -1675,14 +1673,23 @@ protected IColumn getReduced()
                 returnCF.addColumn(column);
             }
 
-            /* close remaining cursors */
-            for (ColumnIterator ci : iterators)
-                ci.close();
-
             return removeDeleted(returnCF);
         }
         finally
         {
+            /* close all cursors */
+            for (ColumnIterator ci : iterators)
+            {
+                try
+                {
+                    ci.close();
+                }
+                catch (Throwable th)
+                {
+                    logger_.error(th);
+                }
+            }
+
             lock_.readLock().unlock();
         }
     }
