diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java
index 0e0999f2..9b8ac4eb 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OrderByColumn.java
@@ -46,6 +46,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private ResultColumn	resultCol;
 	private boolean			ascending = true;
 	private ValueNode expression;
+	private OrderByList     list;
     /**
      * If this sort key is added to the result column list then it is at result column position
      * 1 + resultColumnList.size() - resultColumnList.getOrderBySelect() + addedColumnOffset
@@ -140,14 +141,25 @@ ValueNode getNonRedundantExpression()
 	/**
 	 * Bind this column.
 	 *
+	 * During binding, we may discover that this order by column was pulled
+	 * up into the result column list, but is now a duplicate, because the
+	 * actual result column was expanded into the result column list when "*"
+	 * expressions were replaced with the list of the table's columns. In such
+	 * a situation, we will end up calling back to the OrderByList to
+	 * adjust the addedColumnOffset values of the columns; the "oblist"
+	 * parameter exists to allow that callback to be performed.
+	 *
 	 * @param target	The result set being selected from
+	 * @param oblist    OrderByList which contains this column
 	 *
 	 * @exception StandardException		Thrown on error
 	 * @exception StandardException		Thrown when column not found
 	 */
-	public void bindOrderByColumn(ResultSetNode target)
+	public void bindOrderByColumn(ResultSetNode target, OrderByList oblist)
 				throws StandardException 
 	{
+		this.list = oblist;
+
 		if(expression instanceof ColumnReference){
 		
 			ColumnReference cr = (ColumnReference) expression;
@@ -201,8 +213,8 @@ public void pullUpOrderByColumn(ResultSetNode target)
 
 			ColumnReference cr = (ColumnReference) expression;
 
-			resultCol = targetCols.getOrderByColumn(cr.getColumnName(),
-                                                    cr.getTableNameNode());
+			resultCol = targetCols.findResultColumnForOrderBy(
+                    cr.getColumnName(), cr.getTableNameNode());
 
 			if(resultCol == null){
 				resultCol = (ResultColumn) getNodeFactory().getNode(C_NodeTypes.RESULT_COLUMN,
@@ -333,9 +345,10 @@ private ResultColumn resolveColumnReference(ResultSetNode target,
 
 		ResultColumnList	targetCols = target.getResultColumns();
 
-		resultCol = targetCols.getOrderByColumn(cr.getColumnName(),
+		resultCol = targetCols.getOrderByColumnToBind(cr.getColumnName(),
 							cr.getTableNameNode(),
-							sourceTableNumber);
+							sourceTableNumber,
+							this);
         /* Search targetCols before using addedColumnOffset because select list wildcards, '*',
          * are expanded after pullUpOrderByColumn is called. A simple column reference in the
          * order by clause may be found in the user specified select list now even though it was
@@ -353,4 +366,36 @@ private ResultColumn resolveColumnReference(ResultSetNode target,
 
 	}
 
+	/**
+	 * Reset addedColumnOffset to indicate that column is no longer added
+	 *
+	 * An added column is one which was artificially added to the result
+	 * column list due to its presence in the ORDER BY clause, as opposed to
+	 * having been explicitly selected by the user. Since * is not expanded
+	 * until after the ORDER BY columns have been pulled up, we may add a
+	 * column, then later decide it is a duplicate of an explicitly selected
+	 * column. In that case, this method is called, and it does the following:
+	 * - resets addedColumnOffset to -1 to indicate this is not an added col
+	 * - calls back to the OrderByList to adjust any other added cols
+	 */
+	void clearAddedColumnOffset()
+	{
+		list.closeGap(addedColumnOffset);
+		addedColumnOffset = -1;
+	}
+	/**
+	 * Adjust addedColumnOffset to reflect that a column has been removed
+	 *
+	 * This routine is called when a previously-added result column has been
+	 * removed due to being detected as a duplicate. If that added column had
+	 * a lower offset than our column, we decrement our offset to reflect that
+	 * we have just been moved down one slot in the result column list.
+	 *
+	 * @param gap   offset of the column which has just been removed from list
+	 */
+	void collapseAddedColumnGap(int gap)
+	{
+		if (addedColumnOffset > gap)
+			addedColumnOffset--;
+	}
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OrderByList.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OrderByList.java
index 0bb7bd96..7830dcf0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OrderByList.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/OrderByList.java
@@ -150,7 +150,7 @@ public void bindOrderByColumns(ResultSetNode target)
 		for (int index = 0; index < size; index++)
 		{
 			OrderByColumn obc = (OrderByColumn) elementAt(index);
-			obc.bindOrderByColumn(target);
+			obc.bindOrderByColumn(target, this);
 
 			/*
 			** Always sort if we are ordering on an expression, and not
@@ -164,6 +164,30 @@ public void bindOrderByColumns(ResultSetNode target)
 		}
 	}
 
+	/**
+	 * Adjust addedColumnOffset values due to removal of a duplicate column
+	 *
+	 * This routine is called by bind processing when it identifies and
+	 * removes a column from the result column list which was pulled up due
+	 * to its presence in the ORDER BY clause, but which was later found to
+	 * be a duplicate. The OrderByColumn instance for the removed column
+	 * has been adjusted to point to the true column in the result column
+	 * list and its addedColumnOffset has been reset to -1. This routine
+	 * finds any other OrderByColumn instances which had an offset greater
+	 * than that of the column that has been deleted, and decrements their
+	 * addedColumOffset to account for the deleted column's removal.
+	 *
+	 * @param gap   column which has been removed from the result column list
+	 */
+	void closeGap(int gap)
+	{
+		for (int index = 0; index < size(); index++)
+		{
+			OrderByColumn obc = (OrderByColumn) elementAt(index);
+			obc.collapseAddedColumnGap(gap);
+		}
+	}
+
 	/**
 		Pull up Order By columns by their names to the target resultset
 		of the cursor specification.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java
index 8e579aaa..cc507a89 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java
@@ -466,6 +466,26 @@ public int getVirtualColumnId()
 		return virtualColumnId;
 	}
 
+	/**
+	 * Adjust this virtualColumnId to account for the removal of a column
+	 *
+	 * This routine is called when bind processing finds and removes
+	 * duplicate columns in the result list which were pulled up due to their
+	 * presence in the ORDER BY clause, but were later found to be duplicate.
+	 * 
+	 * If this column is a virtual column, and if this column's virtual
+	 * column id is greater than the column id which is being removed, then
+	 * we must logically shift this column to the left by decrementing its
+	 * virtual column id.
+	 *
+	 * @param removedColumnId   id of the column being removed.
+	 */
+	public void collapseVirtualColumnIdGap(int removedColumnId)
+	{
+		if (columnDescriptor == null && virtualColumnId > removedColumnId)
+			virtualColumnId--;
+	}
+
 	/**
 	 * Generate a unique (across the entire statement) column name for unnamed
 	 * ResultColumns
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
index 1ef4e571..5d1bfb0e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumnList.java
@@ -89,8 +89,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * statement uses the "*" token to select all the columns from a table,
      * then during ORDER BY parsing we redundantly generate the columns
      * mentioned in the ORDER BY clause into the ResultColumnlist, but then
-     * later in getOrderByColumn we determine that these are duplicates and
-     * we take them back out again.
+     * later in getOrderByColumnToBind we determine that these are
+     * duplicates and we take them back out again.
      */
 
 	/*
@@ -385,18 +385,47 @@ public ResultColumn getAtMostOneResultColumn(
 	}
 
 	/**
-	 * For order by, get a ResultColumn that matches the specified 
+	 * For order by column bind, get a ResultColumn that matches the specified 
 	 * columnName.
 	 *
+	 * This method is called during bind processing, in the special
+	 * "bind the order by" call that is made by CursorNode.bindStatement().
+	 * The OrderByList has a special set of bind processing routines
+	 * that analyzes the columns in the ORDER BY list and verifies that
+	 * each column is one of:
+	 * - a direct reference to a column explicitly mentioned in
+	 *   the SELECT list
+	 * - a direct reference to a column implicitly mentioned as "SELECT *"
+	 * - a direct reference to a column "pulled up" into the result
+	 *   column list
+	 * - or a valid and fully-bound expression ("c+2", "YEAR(hire_date)", etc.)
+	 *
+	 * At this point in the processing, it is possible that we'll find
+	 * the column present in the RCL twice: once because it was pulled
+	 * up during statement compilation, and once because it was added
+	 * when "SELECT *" was expanded into the table's actual column list.
+	 * If we find such a duplicated column, we can, and do, remove the
+	 * pulled-up copy of the column and point the OrderByColumn
+	 * to the actual ResultColumn from the *-expansion.
+	 *
+	 * Note that the association of the OrderByColumn with the
+	 * corresponding ResultColumn in the RCL occurs in
+	 * OrderByColumn.resolveAddedColumn.
+	 *
 	 * @param columnName	The ResultColumn to get from the list
 	 * @param tableName	The table name on the OrderByColumn, if any
 	 * @param tableNumber	The tableNumber corresponding to the FromTable with the
 	 *						exposed name of tableName, if tableName != null.
+	 * @param obc           The OrderByColumn we're binding.
 	 *
 	 * @return	the column that matches that name.
 	 * @exception StandardException thrown on ambiguity
 	 */
-	public ResultColumn getOrderByColumn(String columnName, TableName tableName, int tableNumber)
+	public ResultColumn getOrderByColumnToBind(
+            String columnName,
+            TableName tableName,
+            int tableNumber,
+            OrderByColumn obc)
 		throws StandardException
 	{
 		int				size = size();
@@ -455,6 +484,9 @@ else if (index >= size - orderBySelect)
 				{// remove the column due to pullup of orderby item
 					removeElement(resultColumn);
 					decOrderBySelect();
+					obc.clearAddedColumnOffset();
+					collapseVirtualColumnIdGap(
+							resultColumn.getColumnPosition());
 					break;
 				}
 			}
@@ -462,18 +494,58 @@ else if (index >= size - orderBySelect)
 		return retVal;
 	}
 
+	/**
+	 * Adjust virtualColumnId values due to result column removal
+	 *
+	 * This method is called when a duplicate column has been detected and
+	 * removed from the list. We iterate through each of the other columns
+	 * in the list and notify them of the column removal so they can adjust
+	 * their virtual column id if necessary.
+	 *
+	 * @param gap   id of the column which was just removed.
+	 */
+	private void collapseVirtualColumnIdGap(int gap)
+	{
+		for (int index = 0; index < size(); index++)
+			((ResultColumn) elementAt(index)).collapseVirtualColumnIdGap(gap);
+	}
+
 
 	/**
 	 * For order by, get a ResultColumn that matches the specified 
 	 * columnName.
 	 *
+	 * This method is called during pull-up processing, at the very
+	 * start of bind processing, as part of
+	 * OrderByList.pullUpOrderByColumns. Its job is to figure out
+	 * whether the provided column (from the ORDER BY list) already
+	 * exists in the ResultColumnList or not. If the column does
+	 * not exist in the RCL, we return NULL, which signifies that
+	 * a new ResultColumn should be generated and added ("pulled up")
+	 * to the RCL by our caller.
+	 *
+	 * Note that at this point in the processing, we should never
+	 * find this column present in the RCL multiple times; if the
+	 * column is already present in the RCL, then we don't need to,
+	 * and won't, pull a new ResultColumn up into the RCL.
+	 *
+	 * If the caller specified "SELECT *", then the RCL at this
+	 * point contains a special AllResultColumn object. This object
+	 * will later be expanded and replaced by the actual set of
+	 * columns in the table, but at this point we don't know what
+	 * those columns are, so we may pull up an OrderByColumn
+	 * which duplicates a column in the *-expansion; such
+	 * duplicates will be removed at the end of bind processing
+	 * by OrderByList.bindOrderByColumns.
+	 *
 	 * @param columnName	The ResultColumn to get from the list
 	 * @param tableName	The table name on the OrderByColumn, if any
 	 *
-	 * @return	the column that matches that name.
+	 * @return	the column that matches that name, or NULL if pull-up needed
 	 * @exception StandardException thrown on ambiguity
 	 */
-	public ResultColumn getOrderByColumn(String columnName, TableName tableName)
+	public ResultColumn findResultColumnForOrderBy(
+                            String columnName, TableName tableName)
 		throws StandardException
 	{
 		int				size = size();
@@ -513,10 +585,10 @@ else if (! retVal.isEquivalent(resultColumn))
 					throw StandardException.newException(SQLState.LANG_DUPLICATE_COLUMN_FOR_ORDER_BY, columnName);
 				}
 				else if (index >= size - orderBySelect)
-				{// remove the column due to pullup of orderby item
-					removeElement(resultColumn);
-					decOrderBySelect();
-					break;
+				{
+					SanityManager.THROWASSERT(
+							"Unexpectedly found ORDER BY column '" +
+							columnName + "' pulled up at position " +index);
 				}
 			}
 		}
@@ -3973,7 +4045,7 @@ public void incOrderBySelect()
 		orderBySelect++;
 	}
 
-	public void decOrderBySelect()
+	private void decOrderBySelect()
 	{
 		orderBySelect--;
 	}
