diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
index 74423a66..9dcd74e3 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
@@ -1575,23 +1575,24 @@ public void setValue(
                 }
                 else if (nanos > 0)
                 {
-                    String microsStr = Integer.toString( nanos);
-                    if(microsStr.length() > SQLTimestamp.MAX_FRACTION_DIGITS)
-                    {
-                        sb.append(
-                            microsStr.substring(
-                                0, SQLTimestamp.MAX_FRACTION_DIGITS));
-                    }
-                    else
-                    {
-                        for(int i = microsStr.length(); 
-                            i < SQLTimestamp.MAX_FRACTION_DIGITS ; i++)
+                    String nanoString = Integer.toString(nanos);
+                    int len = nanoString.length();
+
+                    // Add leading zeros if nanoString is shorter than
+                    // MAX_FRACTION_DIGITS.
+                    for (int i = len;
+                         i < SQLTimestamp.MAX_FRACTION_DIGITS; i++)
                         {
-                            sb.append( '0');
+                        sb.append('0');
                         }
 
-                        sb.append( microsStr);
+                    // Remove trailing zeros to match the format from
+                    // Timestamp.toString().
+                    while (nanoString.charAt(len - 1) == '0') {
+                        len--;
                     }
+
+                    sb.append(nanoString.substring(0, len));
                 }
                 strValue= sb.toString();
             }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java
index 3bb20368..af66a40d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java
@@ -982,6 +982,40 @@ public void testConversionToString() throws SQLException {
         JDBC.assertSingleValueResultSet(ps.executeQuery(), dateString);
     }
     
+    /**
+     * Test that trailing zeros in the nanoseconds component of a timestamp
+     * are handled the same way by
+     * {@code PreparedStatement.setTimestamp(int,Timestamp)} and
+     * {@code PreparedStatement.setTimestamp(int,Timestamp, Calendar)}
+     * when converting the timestamp to a VARCHAR. (DERBY-4810)
+     */
+    public void testTrailingZeros() throws SQLException {
+        PreparedStatement ps =
+                prepareStatement("values cast(? as varchar(29))");
+
+        String[] tsStrings = {
+            "2010-09-22 14:40:33.000000000",
+            "2010-09-22 14:40:33.012000000",
+            "2010-09-22 14:40:33.123456000",
+            "2010-09-22 14:40:33.139990900",
+            "2010-09-22 14:40:33.139990983",
+        };
+
+        for (int i = 0; i < tsStrings.length; i++) {
+            Timestamp ts = Timestamp.valueOf(tsStrings[i]);
+
+            // We expect the converted value to have the same format as
+            // what Timestamp.toString() returns.
+            String expected = ts.toString();
+
+            ps.setTimestamp(1, ts);
+            JDBC.assertSingleValueResultSet(ps.executeQuery(), expected);
+
+            ps.setTimestamp(1, ts, Calendar.getInstance());
+            JDBC.assertSingleValueResultSet(ps.executeQuery(), expected);
+        }
+    }
+
     public void testConversion_Aggregates() throws SQLException{
         Statement st = createStatement();
         
