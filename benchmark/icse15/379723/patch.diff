diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/HandleResult.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/HandleResult.java
index dc595a98..f1b4e8c9 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/HandleResult.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/HandleResult.java
@@ -43,6 +43,13 @@ public static void main(String[] args) throws Exception
     public static String handleResult(int exitCode, InputStream stdout,
         InputStream stderr, PrintWriter printWriter)
         throws IOException
+    {
+		return handleResult(exitCode, stdout, stderr, printWriter, null);
+	}
+	
+    public static String handleResult(int exitCode, InputStream stdout,
+        InputStream stderr, PrintWriter printWriter, String encoding)
+        throws IOException
     {
 		StringBuffer sb = new StringBuffer();
 
@@ -53,7 +60,11 @@ public static String handleResult(int exitCode, InputStream stdout,
         if (stdout != null)
         {
     		// reader for stdout
-    		BufferedReader outReader = new BufferedReader(new InputStreamReader(stdout));
+        	BufferedReader outReader;
+        	if(encoding != null)
+        		outReader = new BufferedReader(new InputStreamReader(stdout, encoding));
+        	else
+        		outReader = new BufferedReader(new InputStreamReader(stdout));
 
             // Read each line and write to printWriter
     		String s = null;
@@ -75,7 +86,11 @@ public static String handleResult(int exitCode, InputStream stdout,
         if (stderr != null)
         {
             // reader for stderr
-    		BufferedReader errReader = new BufferedReader(new InputStreamReader(stderr));
+        	BufferedReader errReader;
+        	if(encoding != null)
+        		errReader = new BufferedReader(new InputStreamReader(stderr, encoding));
+        	else
+        		errReader = new BufferedReader(new InputStreamReader(stderr));
 
     		String s = null;
     		int lines = 0;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/ProcessStreamResult.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/ProcessStreamResult.java
index e7af57e7..7dcf3ac2 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/ProcessStreamResult.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/ProcessStreamResult.java
@@ -28,7 +28,9 @@
 {
 
 	protected InputStream in;
-	protected BufferedOutputStream bos;
+	protected OutputStreamWriter outStream;
+	// Encoding to be used to read output of test jvm process
+	protected String encoding;
 	protected boolean finished;
 	protected IOException ioe;
 	protected Thread myThread;
@@ -38,9 +40,16 @@
 
 	public ProcessStreamResult(InputStream in, BufferedOutputStream bos,
 	    String timemin) throws IOException, InterruptedException
+	{
+		this(in, bos, timemin, null);
+	}
+	
+	public ProcessStreamResult(InputStream in, BufferedOutputStream bos,
+	  String timemin, String encoding) throws IOException, InterruptedException
 	{
 		this.in = in;
-        this.bos = bos;
+		this.outStream = new OutputStreamWriter(bos);
+		this.encoding = encoding;
         this.startTime = System.currentTimeMillis();
         if (timemin != null)
         {
@@ -65,10 +74,19 @@ public void run()
         
 		try
 		{
-			byte[] ba = new byte[1024];
+			char[] ca = new char[1024];
 			int valid;
 			interrupted = false;
-			while ((valid = in.read(ba, 0, ba.length)) != -1)
+			
+			// Create an InputStreamReader with encoding, if specified. 
+			// Otherwise, use default.
+			InputStreamReader inStream;
+			if(encoding != null)
+        		inStream = new InputStreamReader(in, encoding);
+        	else
+        		inStream = new InputStreamReader(in);
+			
+			while ((valid = inStream.read(ca, 0, ca.length)) != -1)
 			{
 			    //System.out.println("Still reading thread: " + tname);
 /*				if (timeout > 0) {
@@ -90,8 +108,8 @@ public void run()
 						}
 					}
 			    }
-*/    			bos.write(ba, 0, valid);
-    			bos.flush();
+*/    			outStream.write(ca, 0, valid);
+    			outStream.flush();
 			}
 		}
 		catch (IOException ioe)
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java
index 071a7406..bb55f330 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunList.java
@@ -118,6 +118,7 @@
 	static Properties specialProperties; // for testSpecialProps
 	static BufferedReader runlistFile;
 	static String hostName;
+	static String testEncoding;	// Encoding used for child jvm and to read the test output 
 
     static String [] clientExclusionKeywords = new String [] {
         "at-or-before:", "at-or-after:", "when-at-or-before:jdk",
@@ -414,6 +415,9 @@ private static void runTests(Properties suiteProps, String suite)
             jvmProps.addElement("serverJvm=" + serverJvm);
         if ( (serverJvmName != null) && (serverJvmName.length()>0) )
             jvmProps.addElement("serverJvmName=" + serverJvmName);
+        if (testEncoding != null)
+            jvmProps.addElement("derbyTesting.encoding=" + testEncoding);
+
         if ( (hostName != null) && (hostName.length()>0) )
         	jvmProps.addElement("hostName=" + hostName);
         if ( useprocess == false )
@@ -516,7 +520,7 @@ else if (otherSpecialProps.length()>0)
                     pr.waitFor();
 
                     String result = HandleResult.handleResult(pr.exitValue(),
-                        stdout.getData(), stderr.getData(), pwOut);
+                        stdout.getData(), stderr.getData(), pwOut, testEncoding);
                     pr.destroy();
                 }
                 catch(Throwable t)
@@ -611,6 +615,7 @@ public static Properties locateSuiteProperties(String suiteName,
         {
             // Reset framework to the parent suite's framework, if any
             // because framework may have been set by previous suite
+            testEncoding = parentProps.getProperty("derbyTesting.encoding");
             framework = parentProps.getProperty("framework");
             serverJvm = parentProps.getProperty("serverJvm");
             serverJvmName = parentProps.getProperty("serverJvmName");
@@ -739,6 +744,7 @@ else if (javaCmd.equals("jview"))
 		serverJvm = suiteProperties.getProperty("serverJvm");
 		serverJvmName = suiteProperties.getProperty("serverJvmName");
 		hostName = suiteProperties.getProperty("hostName");
+		testEncoding = suiteProperties.getProperty("derbyTesting.encoding");
 		canondir = suiteProperties.getProperty("canondir");
 		mtestdir = suiteProperties.getProperty("mtestdir");
 		String usepr = suiteProperties.getProperty("useprocess");
@@ -822,6 +828,14 @@ private static void setSuiteProperties(Properties p, String suiteName,
             p.put("serverJvmName", serverJvmName);
 		else
             serverJvmName = p.getProperty("serverJvmName");
+        
+        // derbyTesting.encoding may be set at the top, or just
+        // set for individual suites
+        if(parentProperties.getProperty("derbyTesting.encoding") != null)
+		    p.put("derbyTesting.encoding", testEncoding);
+		else
+            testEncoding = p.getProperty("derbyTesting.encoding");
+
         if ( hostName != null )
             p.put("hostName", hostName);
         else
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java
index d5f05f42..38d9ee07 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunSuite.java
@@ -72,6 +72,7 @@
 	static String bootcp; //  path for j9 bootclasspath setting
 	static String serverJvm; //  path for j9 bootclasspath setting
 	static String hostName; // needs to be settable for IPV6 testing; localhost otherwise. 
+	static String testEncoding; // setting the encoding.
 	static String ijdefaultResourcePackage; // for ij tests only
 	static String debug; // for setting verbose mode to pass down to RunTest
     static String timeout; // to allow killing a hanging test
@@ -351,6 +352,7 @@ static Properties getSuiteProperties(String suiteName, boolean isTop)
             reportstderr = p.getProperty("reportstderr");
             timeout = p.getProperty("timeout");
             shutdownurl = p.getProperty("shutdownurl");
+            testEncoding = p.getProperty("derbyTesting.encoding");
         }
         suites = p.getProperty("suites");
 		return p;
@@ -475,6 +477,9 @@ private static void getSystemProperties()
 		String serverJvm = sp.getProperty("serverJvm");
 		if (serverJvm != null)
 		    suiteProperties.put("serverJvm", serverJvm);
+		String cmlTestEncoding = sp.getProperty("derbyTesting.encoding");
+		if (cmlTestEncoding != null)
+		    suiteProperties.put("derbyTesting.encoding", cmlTestEncoding);
 		String testout = sp.getProperty("testoutname");
 		if (testout != null)
 		    suiteProperties.put("testoutname", testout); // toursDemo
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
index f6578701..7fcecc5f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
@@ -122,6 +122,7 @@
 	static String runwithjvm="true";
 	static boolean startServer=true; // should test harness start the server
 	static String hostName; // needs to be settable for ipv testing, localhost otherwise.)
+	static String testEncoding; // Encoding used for child jvm and to read the test output
 
 	// Other test variables for directories, files, output
 	static String scriptName = ""; // testname as passed in
@@ -930,6 +931,13 @@ private static void getProperties(Properties sp)
             }
         }
 		
+        testEncoding = sp.getProperty("derbyTesting.encoding");
+        if ((testEncoding != null) && (!jvmName.equals("jdk15")))
+        {
+            skiptest = true;
+            addSkiptestReason("derbyTesting.encoding can only be used with jdk15, skipping test");
+        }
+		
         javaCmd = sp.getProperty("javaCmd");
         bootcp = sp.getProperty("bootcp");
         jvmflags = sp.getProperty("jvmflags");
@@ -1528,6 +1536,18 @@ else if (encryption)
 	                    jvmflags = "";
 	            }
 	        }
+	        //Check derbyTesting.encoding property
+	        if(testEncoding == null) {
+	            testEncoding = ap.getProperty("derbyTesting.encoding");
+	            // only bother if we have jdk15, otherwise we'll be skipping
+	            if ((jvmName.equals("jdk15")) && (testEncoding != null))
+	            {
+	                    jvmflags = (jvmflags==null?"":jvmflags+" ") 
+	                                + "-Dfile.encoding=" + testEncoding; 
+	                    ap.put("file.encoding",testEncoding);	
+	            }
+	        }
+	        
 	        if (NetServer.isJCCConnection(framework)
 	        		|| "true".equalsIgnoreCase(ap.getProperty("noSecurityManager")))
 	        	runWithoutSecurityManager = true;
@@ -2068,6 +2088,15 @@ else if ( (runDir != null) && (runDir.exists()) )
             		jvmProps.addElement("hostName=" + hostName);
         }
             
+        // if we're not jdk15, don't, we'll skip
+        if ((testEncoding != null) && (jvmName.equals("jdk15")))
+        {
+            jvmProps.addElement("derbyTesting.encoding=" + testEncoding);
+            jvmProps.addElement("file.encoding=" + testEncoding);
+            jvmflags = (jvmflags==null?"":jvmflags+" ") 
+                         + "-Dfile.encoding=" + testEncoding; 
+        }
+            
         if ( (jvmflags != null) && (jvmflags.length()>0) )
         {
             jvm.setFlags(jvmflags);
@@ -2195,17 +2224,20 @@ private static void execTestProcess(String[] testCmd)
                 fos = new FileOutputStream(tmpOutFile);
                 bos = new BufferedOutputStream(fos, 1024);
                 prout = 
-                    new ProcessStreamResult(pr.getInputStream(), bos, timeoutStr);
+                    new ProcessStreamResult(pr.getInputStream(), bos, 
+                    					timeoutStr, testEncoding);
             }
             else
             {
                 fos = new FileOutputStream(stdOutFile);
                 bos = new BufferedOutputStream(fos, 1024);
                 prout = 
-                    new ProcessStreamResult(pr.getInputStream(), bos, timeoutStr);
+                    new ProcessStreamResult(pr.getInputStream(), bos, 
+                    					timeoutStr, testEncoding);
             }
             prerr =
-                new ProcessStreamResult(pr.getErrorStream(), bos, timeoutStr);
+                new ProcessStreamResult(pr.getErrorStream(), bos, 
+                						timeoutStr, testEncoding);
     
             if (framework != null && ! framework.equals(""))
                 if (verbose) System.out.println("The test should be running...");
