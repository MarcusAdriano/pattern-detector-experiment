diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java
index 4f4f8910..7d8e0c40 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java
@@ -40,6 +40,7 @@
 import java.sql.ResultSet;
 import java.sql.ResultSetMetaData;
 import java.sql.SQLException;
+import java.io.UnsupportedEncodingException;
 import java.sql.Statement;
 import java.sql.Types;
 
@@ -2710,10 +2711,10 @@ private static void prepareBlobTable(Connection conn)
                 "insert into testBlob (a, b) values(?,?)");
 
             // insert small strings
-			insertRow(ps,"".getBytes());
-            insertRow(ps,"you can lead a horse to water but you can't form it into beverage".getBytes());
-            insertRow(ps,"a stitch in time says ouch".getBytes());
-            insertRow(ps,"here is a string with a return \n character".getBytes());
+			insertRow(ps,"".getBytes("US-ASCII"));
+            insertRow(ps,"you can lead a horse to water but you can't form it into beverage".getBytes("US-ASCII"));
+            insertRow(ps,"a stitch in time says ouch".getBytes("US-ASCII"));
+            insertRow(ps,"here is a string with a return \n character".getBytes("US-ASCII"));
 
             // insert larger strings using setAsciiStream
             for (int i = 0; i < numFiles; i++)
@@ -2779,10 +2780,10 @@ private static void prepareBinaryTable(Connection conn)
                 "insert into testBinary values(?,?)");
 
             // insert small strings
-			insertRow(ps,"".getBytes());
-            insertRow(ps,"you can lead a horse to water but you can't form it into beverage".getBytes());
-            insertRow(ps,"a stitch in time says ouch".getBytes());
-            insertRow(ps,"here is a string with a return \n character".getBytes());
+			insertRow(ps,"".getBytes("US-ASCII"));
+            insertRow(ps,"you can lead a horse to water but you can't form it into beverage".getBytes("US-ASCII"));
+            insertRow(ps,"a stitch in time says ouch".getBytes("US-ASCII"));
+            insertRow(ps,"here is a string with a return \n character".getBytes("US-ASCII"));
 
             // insert a null
             // ps.setNull(1, Types.BINARY);
@@ -2821,14 +2822,14 @@ private static void prepareSearchBlobTable(Connection conn)
 			stmt.execute("alter table searchBlob add column a blob(300k)");
             PreparedStatement ps = conn.prepareStatement(
                 "insert into searchBlob (a, b) values(?,?)");
-            insertRow(ps,"horse".getBytes());
-            insertRow(ps,"ouch".getBytes());
-            insertRow(ps,"\n".getBytes());
-            insertRow(ps,"".getBytes());
-            insertRow(ps,"Beginning".getBytes());
-            insertRow(ps,"position-69".getBytes());
-            insertRow(ps,"I-am-hiding-here-at-position-5910".getBytes());
-            insertRow(ps,"Position-9907".getBytes());
+            insertRow(ps,"horse".getBytes("US-ASCII"));
+            insertRow(ps,"ouch".getBytes("US-ASCII"));
+            insertRow(ps,"\n".getBytes("US-ASCII"));
+            insertRow(ps,"".getBytes("US-ASCII"));
+            insertRow(ps,"Beginning".getBytes("US-ASCII"));
+            insertRow(ps,"position-69".getBytes("US-ASCII"));
+            insertRow(ps,"I-am-hiding-here-at-position-5910".getBytes("US-ASCII"));
+            insertRow(ps,"Position-9907".getBytes("US-ASCII"));
 
             // insert larger blobs using setBinaryStream
             for (int i = 0; i < numFiles; i++)
@@ -2948,13 +2949,13 @@ private static void blobTest2(Connection conn)
                 blobclob4BLOB.printInterval(blob, 1, 50, 5, i, blobLength);
                 blobclob4BLOB.printInterval(blob, 1, 1, 6, i, blobLength);
                 /*
-                System.out.println(i + "(0) " + new String(blob.getBytes(9905,50)));
-                System.out.println(i + "(1) " + new String(blob.getBytes(5910,150)));
-                System.out.println(i + "(2) " + new String(blob.getBytes(5910,50)));
-                System.out.println(i + "(3) " + new String(blob.getBytes(204,50)));
-                System.out.println(i + "(4) " + new String(blob.getBytes(68,50)));
-                System.out.println(i + "(5) " + new String(blob.getBytes(1,50)));
-                System.out.println(i + "(6) " + new String(blob.getBytes(1,1)));
+                System.out.println(i + "(0) " + new String(blob.getBytes(9905,50), "US-ASCII"));
+                System.out.println(i + "(1) " + new String(blob.getBytes(5910,150), "US-ASCII"));
+                System.out.println(i + "(2) " + new String(blob.getBytes(5910,50), "US-ASCII"));
+                System.out.println(i + "(3) " + new String(blob.getBytes(204,50), "US-ASCII"));
+                System.out.println(i + "(4) " + new String(blob.getBytes(68,50), "US-ASCII"));
+                System.out.println(i + "(5) " + new String(blob.getBytes(1,50), "US-ASCII"));
+                System.out.println(i + "(6) " + new String(blob.getBytes(1,1), "US-ASCII"));
                 */
                 if (blobLength > 100)
                 {
@@ -2964,7 +2965,7 @@ private static void blobTest2(Connection conn)
                         System.out.println("FAIL : length of bytes is " +
                             res.length + " should be 100");
                     else
-                        System.out.println(new String(res));
+                        System.out.println(new String(res, "US-ASCII")); // ensure fixed string
                 }
             }
             System.out.println("blobTest2 finished");
@@ -3075,7 +3076,8 @@ private static void blobTest4(Connection conn)
                         continue;
                     }
                     if (blobLength2 < 150)
-                        searchStr = new String(rs2.getBytes(1));
+                        // get string for printing from bytes in fixed format
+                        searchStr = new String(rs2.getBytes(1),"US-ASCII");
                     else
                         searchStr = null;
 
@@ -3145,7 +3147,7 @@ private static void blobTest51(Connection conn) {
             for (int i = 0; i < 10; i++)
             {
                 // insert a string
-                ps.setBytes(1, val.getBytes());
+                ps.setBytes(1, val.getBytes("US-ASCII"));
                 ps.executeUpdate();
                 val = val.trim() + "x";
             }
@@ -3712,7 +3714,7 @@ private static void blobTest94(Connection conn)
 	    	}
             try
             {
-                blob.position("foo".getBytes(),2);
+                blob.position("foo".getBytes("US-ASCII"),2);
             }
             catch (SQLException e)
             {
@@ -3803,7 +3805,7 @@ private static void blobTest95(Connection conn)
 	    	}
             try
             {
-                blob.position("foo".getBytes(),2);
+                blob.position("foo".getBytes("US-ASCII"),2);
             }
             catch (SQLException e)
             {
@@ -3981,13 +3983,15 @@ private static void clobNegativeTest_Derby265(Connection conn)
         conn.setAutoCommit(false);
         PreparedStatement ps = conn.prepareStatement("insert into \"MAPS\" values(?,?,?,?,?,?)");
         for (int i = 0; i < 3; i++) {
-            FileReader fr = new FileReader(fileName[4]);
+            File file = new File(fileName[4]);
+            InputStream fileIS = new FileInputStream(file);
+            Reader fr = new InputStreamReader(fileIS, "US-ASCII");
             ps.setInt(1, i);
             ps.setString(2, "x" + i);
             ps.setString(3, "abc");
             ps.setString(4, "abc");
             ps.setString(5, "abc");
-            ps.setCharacterStream(6, new java.io.BufferedReader(fr),300000);
+            ps.setCharacterStream(6, fr, 300000);
             ps.executeUpdate();
             fr.close();
         }
@@ -4092,8 +4096,10 @@ static void printInterval(Blob blob, long pos, int length,
 			System.out.println("testing Blob.getBytes() with pos " + pos + " > " + blobLength);
         try
         {
+            // generate a new string out of the blob for comparison, 
+            // ensure it's using fixed format.
             System.out.println(iteration + "(" + testNum + ") " +
-                new String(blob.getBytes(pos,length)));
+                new String(blob.getBytes(pos,length), "US-ASCII"));
 
 			long l1 = blob.length();
 			if (l1 != blobLength) {
@@ -4168,11 +4174,11 @@ static void printPosition(
         int rowNum,
         String searchStr,
         long position,
-        Blob blob, int blobLength)
+        Blob blob, int blobLength) throws UnsupportedEncodingException
     {
         try
         {
-            long result = blob.position(searchStr.getBytes(),position);
+            long result = blob.position(searchStr.getBytes("US-ASCII"),position);
             if ((searchStr == "") && (result == 1))
                 return;
             if (result != -1)
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultset.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultset.java
index 15925ec3..d37e9d08 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultset.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultset.java
@@ -834,7 +834,8 @@ public static void dumpRS(ResultSet s) throws SQLException
 				} catch(SQLException ex){
 					if (ex.getSQLState().equals("22005")) {
 						if (s.getBytes(i) != null)
-                row.append(new String(s.getBytes(i)));
+							row.append(s.getBytes(i).toString());
+                //row.append(new String(s.getBytes(i)));
 						else
                 row.append(s.getBytes(i));
 					} else throw ex;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/coalesceTests.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/coalesceTests.java
index fc32e007..9c872d75 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/coalesceTests.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/coalesceTests.java
@@ -1142,18 +1142,18 @@ public static void testCharForBitDataCoalesce( Connection conn) throws Throwable
     } catch(Exception ex) {}
 			s.executeUpdate("create table tC (cbd1 char(254) for bit data, cbd2 char(40) for bit data, vcbd1 varchar(253) for bit data, vcbd2 varchar(2000) for bit data, lvcbd1 long varchar for bit data, lvcbd2 long varchar for bit data, blob1 BLOB(200), blob2 BLOB(33K))");
 			ps = conn.prepareStatement("insert into tC values (?,?,?,?,?,?,?,?)");
-			ps.setBytes(1, "cbd1 not null".getBytes());
-			ps.setBytes(2, "cbd2 not null".getBytes());
-			ps.setBytes(3, "vcbd1 not null".getBytes());
-			ps.setBytes(4, "vcbd2 not null".getBytes());
-			ps.setBytes(5, "lvcbd1 not null".getBytes());
-			ps.setBytes(6, "lvcbd2 not null".getBytes());
-			ps.setBytes(7, "blob1 not null".getBytes());
-			ps.setBytes(8, "blob2 not null".getBytes());
+			ps.setBytes(1, "cbd1 not null".getBytes("US-ASCII"));
+			ps.setBytes(2, "cbd2 not null".getBytes("US-ASCII"));
+			ps.setBytes(3, "vcbd1 not null".getBytes("US-ASCII"));
+			ps.setBytes(4, "vcbd2 not null".getBytes("US-ASCII"));
+			ps.setBytes(5, "lvcbd1 not null".getBytes("US-ASCII"));
+			ps.setBytes(6, "lvcbd2 not null".getBytes("US-ASCII"));
+			ps.setBytes(7, "blob1 not null".getBytes("US-ASCII"));
+			ps.setBytes(8, "blob2 not null".getBytes("US-ASCII"));
 			ps.executeUpdate();
-			ps.setBytes(1, "cbd1 not null but cbd2 is".getBytes());
+			ps.setBytes(1, "cbd1 not null but cbd2 is".getBytes("US-ASCII"));
 			ps.setBytes(2, null);
-			ps.setBytes(3, "vcbd1 not null but vcbd2 is".getBytes());
+			ps.setBytes(3, "vcbd1 not null but vcbd2 is".getBytes("US-ASCII"));
 			ps.setBytes(4, null);
 			ps.setBytes(5, null);
 			ps.setBytes(6, null);
@@ -1161,13 +1161,13 @@ public static void testCharForBitDataCoalesce( Connection conn) throws Throwable
 			ps.setBytes(8, null);
 			ps.executeUpdate();
 			ps.setBytes(1, null);
-			ps.setBytes(2, "cbd2 not null but cbd1 is".getBytes());
+			ps.setBytes(2, "cbd2 not null but cbd1 is".getBytes("US-ASCII"));
 			ps.setBytes(3, null);
-			ps.setBytes(4, "vcbd2 not null but vcbd1 is".getBytes());
-			ps.setBytes(5, "lvcbd1 not null again".getBytes());
-			ps.setBytes(6, "lvcbd2 not null again".getBytes());
-			ps.setBytes(7, "blob1 not null again".getBytes());
-			ps.setBytes(8, "blob2 not null again".getBytes());
+			ps.setBytes(4, "vcbd2 not null but vcbd1 is".getBytes("US-ASCII"));
+			ps.setBytes(5, "lvcbd1 not null again".getBytes("US-ASCII"));
+			ps.setBytes(6, "lvcbd2 not null again".getBytes("US-ASCII"));
+			ps.setBytes(7, "blob1 not null again".getBytes("US-ASCII"));
+			ps.setBytes(8, "blob2 not null again".getBytes("US-ASCII"));
 			ps.executeUpdate();
 			ps.setBytes(1, null);
 			ps.setBytes(2, null);
@@ -1403,7 +1403,7 @@ static private void dumpSQLExceptions (SQLException se) {
 	}
 
 	// lifted from the metadata test
-	public static void dumpRS(ResultSet s) throws SQLException
+	public static void dumpRS(ResultSet s) throws SQLException, UnsupportedEncodingException
 	{
 		if (s == null)
 		{
@@ -1464,7 +1464,7 @@ public static void dumpRS(ResultSet s) throws SQLException
 				} catch(SQLException ex){
 					if (ex.getSQLState().equals("22005")) {
 						if (s.getBytes(i) != null)
-                row.append(new String(s.getBytes(i)));
+					        row.append(s.getBytes(i).toString());
 						else
                 row.append(s.getBytes(i));
 					} else throw ex;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/streamingColumn.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/streamingColumn.java
index e0bda3a8..d2c84c60 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/streamingColumn.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/streamingColumn.java
@@ -588,7 +588,7 @@ static void streamTest7(Connection conn) throws Exception
 			"this is a relatively long string, hopefully the row will be split or otherwise become long ???  I don't think it will become long but maybe if it rolls back it will become strange";
 		for (int i = 0; i < 100; i++)
 		{
-			ByteArrayInputStream string1 = new ByteArrayInputStream(longString.getBytes());
+			ByteArrayInputStream string1 = new ByteArrayInputStream(longString.getBytes("US-ASCII"));
 			ps.setAsciiStream(1, string1, longString.length());
 			ps.setInt(2, i);
 			ps.executeUpdate();
@@ -708,8 +708,9 @@ static void streamTest8(Connection conn, int stream1_len, int stream2_len)
 				// get the second column as a string
 				String resultString = rs.getString(2);
 
-                // compare result with expected
-                String canon = new String(stream1_byte_array[a]);
+                // compare result with expected, using fixed length string from 
+				// the streamed byte array 
+                String canon = new String(stream1_byte_array[a], "US-ASCII");
 
                 if (canon.compareTo(resultString) != 0)
                 {
@@ -722,8 +723,9 @@ static void streamTest8(Connection conn, int stream1_len, int stream2_len)
 				// get the second column as a string
 				resultString = rs.getString(3);
 
-                // compare result with expected
-                canon = new String(stream2_byte_array[a]);
+                // compare result with expected, using fixed length string from
+				// the second streamed byte array.
+                canon = new String(stream2_byte_array[a], "US-ASCII");
 
                 if (canon.compareTo(resultString) != 0)
                 {
@@ -1022,7 +1024,7 @@ private static void streamTest11(Connection conn) {
 					dumpSQLExceptions(e);
 			}
 
-			Reader filer = new InputStreamReader(fileIn);
+			Reader filer = new InputStreamReader(fileIn,"US-ASCII");
 			try {
 				System.out.println("===> testing using setCharacterStream with -1 as length");
 				ps.setCharacterStream(2, filer, -1);
@@ -1784,7 +1786,7 @@ private static void insertDataUsingCharacterStream(PreparedStatement ps, int int
 	throws Exception{
 	 	File file = new File(fileName);
 	 	InputStream fileIn = new FileInputStream(file);
-	 	Reader filer = new InputStreamReader(fileIn);
+	 	Reader filer = new InputStreamReader(fileIn, "US-ASCII");
 	 	System.out.println("===> testing(using setCharacterStream) " + fileName + " length = " + file.length());
 	 	ps.setInt(1, intValue);
 	 	// insert a streaming column
@@ -1878,7 +1880,7 @@ static int updateLongString(Connection conn, int oldkey, int newkey)
 			"update foo set a = ?, b = ? where a = " + oldkey);
 
 		String updateString = pad("", newkey);
-		ByteArrayInputStream bais = new ByteArrayInputStream(updateString.getBytes());
+		ByteArrayInputStream bais = new ByteArrayInputStream(updateString.getBytes("US-ASCII"));
 		ps.setInt(1, newkey);
 		ps.setAsciiStream(2, bais, updateString.length());
 		int nRows = ps.executeUpdate();
@@ -1909,7 +1911,7 @@ static int streamInStringCol(PreparedStatement ps, String data, boolean binaryCo
 
 	public static int streamInLongCol(PreparedStatement ps, Object data) throws Exception {
 		String s = (String)data;
-		ByteArrayInputStream bais = new ByteArrayInputStream(s.getBytes());
+		ByteArrayInputStream bais = new ByteArrayInputStream(s.getBytes("US-ASCII"));
 		ps.setAsciiStream(1, bais, s.length());
 		int nRows = ps.executeUpdate();
 		bais.close();
