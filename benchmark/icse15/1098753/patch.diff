diff --git a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/CompactionManager.java b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/CompactionManager.java
index 6310d62e..35d5276e 100644
--- a/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/CompactionManager.java
+++ b/cassandra/branches/cassandra-0.8/src/java/org/apache/cassandra/db/CompactionManager.java
@@ -378,7 +378,7 @@ else if (!cfname.equals(p.left.cfname))
         submitUserDefined(cfs, descriptors, getDefaultGcBefore(cfs));
     }
 
-    Future<Object> submitUserDefined(final ColumnFamilyStore cfs, final Collection<Descriptor> dataFiles, final int gcBefore)
+    public Future<Object> submitUserDefined(final ColumnFamilyStore cfs, final Collection<Descriptor> dataFiles, final int gcBefore)
     {
         Callable<Object> callable = new Callable<Object>()
         {
diff --git a/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/CleanupHelper.java b/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/CleanupHelper.java
index dd4cc797..41dc5f50 100644
--- a/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/CleanupHelper.java
+++ b/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/CleanupHelper.java
@@ -27,10 +27,7 @@
 import org.slf4j.LoggerFactory;
 
 import org.apache.cassandra.config.DatabaseDescriptor;
-import org.apache.cassandra.db.ColumnFamilyStore;
-import org.apache.cassandra.db.DecoratedKey;
-import org.apache.cassandra.db.RowMutation;
-import org.apache.cassandra.db.Table;
+import org.apache.cassandra.db.*;
 import org.apache.cassandra.db.commitlog.CommitLog;
 import org.apache.cassandra.db.filter.QueryPath;
 import org.apache.cassandra.io.util.FileUtils;
diff --git a/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/SchemaLoader.java b/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/SchemaLoader.java
index 6417b032..03f74937 100644
--- a/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/SchemaLoader.java
+++ b/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/SchemaLoader.java
@@ -188,6 +188,8 @@ public static void loadSchema()
                                   standardCFMD(ks_kcs, "Standard1")
                                               .keyCacheSize(0.5),
                                   standardCFMD(ks_kcs, "Standard2")
+                                              .keyCacheSize(1.0),
+                                  standardCFMD(ks_kcs, "Standard3")
                                               .keyCacheSize(1.0)));
 
         // RowCacheSpace
diff --git a/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/Util.java b/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/Util.java
index 72e7b920..ee3a4f18 100644
--- a/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/Util.java
+++ b/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/Util.java
@@ -24,8 +24,11 @@
 import java.net.InetAddress;
 import java.net.UnknownHostException;
 import java.nio.ByteBuffer;
+import java.util.ArrayList;
+import java.util.Collection;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
 
 import org.apache.cassandra.db.*;
 import org.apache.cassandra.db.columniterator.IdentityQueryFilter;
@@ -34,6 +37,8 @@
 import org.apache.cassandra.dht.*;
 import org.apache.cassandra.gms.ApplicationState;
 import org.apache.cassandra.gms.VersionedValue;
+import org.apache.cassandra.io.sstable.Descriptor;
+import org.apache.cassandra.io.sstable.SSTableReader;
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.utils.ByteBufferUtil;
 import org.apache.cassandra.utils.NodeId;
@@ -179,4 +184,13 @@ public static void createInitialRing(StorageService ss, IPartitioner partitioner
         for (int i=0; i<endpointTokens.size(); ++i)
             assertTrue(ss.getTokenMetadata().isMember(hosts.get(i)));
     }
+
+    public static Future<?> compactAll(ColumnFamilyStore cfs)
+    {
+        List<Descriptor> descriptors = new ArrayList<Descriptor>();
+        for (SSTableReader sstable : cfs.getSSTables())
+            descriptors.add(sstable.descriptor);
+        return CompactionManager.instance.submitUserDefined(cfs, descriptors, Integer.MAX_VALUE);
+    }
+
 }
diff --git a/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/db/CompactionsPurgeTest.java b/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/db/CompactionsPurgeTest.java
index 84b1bf16..503db61e 100644
--- a/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/db/CompactionsPurgeTest.java
+++ b/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/db/CompactionsPurgeTest.java
@@ -171,12 +171,10 @@ public void testCompactionPurgeOneFile() throws IOException, ExecutionException,
             rm.apply();
         }
         cfs.forceBlockingFlush();
-
         assert cfs.getSSTables().size() == 1 : cfs.getSSTables(); // inserts & deletes were in the same memtable -> only deletes in sstable
 
         // compact and test that the row is completely gone
-        Descriptor descriptor = cfs.getSSTables().iterator().next().descriptor;
-        CompactionManager.instance.submitUserDefined(cfs, Collections.singletonList(descriptor), Integer.MAX_VALUE).get();
+        Util.compactAll(cfs).get();
         assert cfs.getSSTables().isEmpty();
         ColumnFamily cf = table.getColumnFamilyStore(cfName).getColumnFamily(QueryFilter.getIdentityFilter(key, new QueryPath(cfName)));
         assert cf == null : cf;
@@ -213,9 +211,7 @@ public void testCompactionPurgeTombstonedRow() throws IOException, ExecutionExce
 
         // flush and major compact
         cfs.forceBlockingFlush();
-        assert cfs.getSSTables().size() == 1;
-        Descriptor descriptor = cfs.getSSTables().iterator().next().descriptor;
-        CompactionManager.instance.submitUserDefined(cfs, Collections.singletonList(descriptor), Integer.MAX_VALUE).get();
+        Util.compactAll(cfs).get();
 
         // re-inserts with timestamp lower than delete
         rm = new RowMutation(tableName, key.key);
diff --git a/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/db/KeyCacheTest.java b/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/db/KeyCacheTest.java
index 265abf68..34816e8a 100644
--- a/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/db/KeyCacheTest.java
+++ b/cassandra/branches/cassandra-0.8/test/unit/org/apache/cassandra/db/KeyCacheTest.java
@@ -35,11 +35,14 @@
 import org.apache.cassandra.utils.ByteBufferUtil;
 import org.apache.cassandra.utils.Pair;
 
+import static junit.framework.Assert.assertEquals;
+
 public class KeyCacheTest extends CleanupHelper
 {
     private static final String TABLE1 = "KeyCacheSpace";
     private static final String COLUMN_FAMILY1 = "Standard1";
     private static final String COLUMN_FAMILY2 = "Standard2";
+    private static final String COLUMN_FAMILY3 = "Standard3";
 
     @Test
     public void testKeyCache50() throws IOException, ExecutionException, InterruptedException
@@ -58,19 +61,19 @@ public void testKeyCacheLoad() throws Exception
     {
         CompactionManager.instance.disableAutoCompaction();
 
-        ColumnFamilyStore store = Table.open(TABLE1).getColumnFamilyStore(COLUMN_FAMILY2);
+        ColumnFamilyStore store = Table.open(TABLE1).getColumnFamilyStore(COLUMN_FAMILY3);
 
         // empty the cache
         store.invalidateKeyCache();
         assert store.getKeyCacheSize() == 0;
 
         // insert data and force to disk
-        insertData(TABLE1, COLUMN_FAMILY2, 0, 100);
+        insertData(TABLE1, COLUMN_FAMILY3, 0, 100);
         store.forceBlockingFlush();
 
         // populate the cache
-        readData(TABLE1, COLUMN_FAMILY2, 0, 100);
-        assert store.getKeyCacheSize() == 100;
+        readData(TABLE1, COLUMN_FAMILY3, 0, 100);
+        assertEquals(100, store.getKeyCacheSize());
 
         // really? our caches don't implement the map interface? (hence no .addAll)
         Map<Pair<Descriptor, DecoratedKey>, Long> savedMap = new HashMap<Pair<Descriptor, DecoratedKey>, Long>();
@@ -88,7 +91,7 @@ public void testKeyCacheLoad() throws Exception
 
         // load the cache from disk
         store.unregisterMBean(); // unregistering old MBean to test how key cache will be loaded
-        ColumnFamilyStore newStore = ColumnFamilyStore.createColumnFamilyStore(Table.open(TABLE1), COLUMN_FAMILY2);
+        ColumnFamilyStore newStore = ColumnFamilyStore.createColumnFamilyStore(Table.open(TABLE1), COLUMN_FAMILY3);
         assert newStore.getKeyCacheSize() == 100;
 
         assert savedMap.size() == 100;
@@ -103,10 +106,10 @@ public void testKeyCache(String cfName, int expectedCacheSize) throws IOExceptio
         CompactionManager.instance.disableAutoCompaction();
 
         Table table = Table.open(TABLE1);
-        ColumnFamilyStore store = table.getColumnFamilyStore(cfName);
+        ColumnFamilyStore cfs = table.getColumnFamilyStore(cfName);
 
         // KeyCache should start at size 1 if we're caching X% of zero data.
-        int keyCacheSize = store.getKeyCacheCapacity();
+        int keyCacheSize = cfs.getKeyCacheCapacity();
         assert keyCacheSize == 1 : keyCacheSize;
 
         DecoratedKey key1 = Util.dk("key1");
@@ -130,13 +133,13 @@ public void testKeyCache(String cfName, int expectedCacheSize) throws IOExceptio
         rm.apply();
 
         // After a flush, the cache should expand to be X% of indices * INDEX_INTERVAL.
-        store.forceBlockingFlush();
-        keyCacheSize = store.getKeyCacheCapacity();
+        cfs.forceBlockingFlush();
+        keyCacheSize = cfs.getKeyCacheCapacity();
         assert keyCacheSize == expectedCacheSize : keyCacheSize;
 
         // After a compaction, the cache should expand to be X% of zero data.
-        CompactionManager.instance.submitMajor(store, 0, Integer.MAX_VALUE).get();
-        keyCacheSize = store.getKeyCacheCapacity();
+        Util.compactAll(cfs).get();
+        keyCacheSize = cfs.getKeyCacheCapacity();
         assert keyCacheSize == 1 : keyCacheSize;
     }
 }
