diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
index 33ad2e1a..78717476 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
@@ -4398,6 +4398,7 @@ void setDynamicResultSet(EmbedStatement owningStmt) {
         
         if (owningStmt != null) {
 		    this.owningStmt = owningStmt;
+            this.applicationStmt = owningStmt.applicationStatement;
             this.localConn = owningStmt.getEmbedConnection();
         }
         else
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ProcedureTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ProcedureTest.java
index 6163de86..e060cc60 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ProcedureTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ProcedureTest.java
@@ -75,6 +75,7 @@ public void testExecuteQueryWithOneDynamicResultSet() throws SQLException {
         Statement stmt = createStatement();
         ResultSet rs = stmt.executeQuery("CALL RETRIEVE_DYNAMIC_RESULTS(1)");
         assertNotNull("executeQuery() returned null.", rs);
+        assertSame(stmt, rs.getStatement());
         JDBC.assertDrainResultsHasData(rs);
     }
 
@@ -159,6 +160,7 @@ public void testExecuteQueryWithOneDynamicResultSet_prepared()
         ps.setInt(1, 1);
         ResultSet rs = ps.executeQuery();
         assertNotNull("executeQuery() returned null.", rs);
+        assertSame(ps, rs.getStatement());
         JDBC.assertDrainResultsHasData(rs);
 
     }
@@ -258,6 +260,7 @@ public void testExecuteQueryWithOneDynamicResultSet_callable()
         cs.setInt(1, 1);
         ResultSet rs = cs.executeQuery();
         assertNotNull("executeQuery() returned null.", rs);
+        assertSame(cs, rs.getStatement());
         JDBC.assertDrainResultsHasData(rs);
     }
 
@@ -947,6 +950,7 @@ private void checkExecuteClosesResults(CallableStatement cs, ResultSet[] allRS)
             do {
 
                     allRS[pass++] = cs.getResultSet();                
+                    assertSame(cs, allRS[pass-1].getStatement());
                     // expect everything to stay open.                        
 
             } while (cs.getMoreResults(Statement.KEEP_CURRENT_RESULT));
@@ -973,6 +977,7 @@ private void checkCSCloseClosesResults(CallableStatement cs, ResultSet[] allRS)
             do {
 
                     allRS[pass++] = cs.getResultSet();                
+                    assertSame(cs, allRS[pass-1].getStatement());
                     // expect everything to stay open.                        
 
             } while (cs.getMoreResults(Statement.KEEP_CURRENT_RESULT));
@@ -993,10 +998,12 @@ private void mixedGetMoreResults(CallableStatement cs, ResultSet[] allRS) throws
 
             //first two with KEEP_CURRENT_RESULT"
             allRS[0] = cs.getResultSet();
+            assertSame(cs, allRS[0].getStatement());
             boolean moreRS = cs.getMoreResults(Statement.KEEP_CURRENT_RESULT);
             if (!moreRS)
                     fail("FAIL - no second result set");
             allRS[1] = cs.getResultSet();                
+            assertSame(cs, allRS[1].getStatement());
             // two open
             allRS[0].next();
             assertEquals(2,allRS[0].getInt(1));
@@ -1009,6 +1016,7 @@ private void mixedGetMoreResults(CallableStatement cs, ResultSet[] allRS) throws
                     fail("FAIL - no third result set");
             // first and third open
             allRS[2] = cs.getResultSet();
+            assertSame(cs, allRS[2].getStatement());
             assertEquals(2,allRS[0].getInt(1));
             JDBC.assertClosed(allRS[1]);
             allRS[2].next();
@@ -1020,6 +1028,7 @@ private void mixedGetMoreResults(CallableStatement cs, ResultSet[] allRS) throws
             if (!moreRS)
                     fail("FAIL - no fourth result set");
             allRS[3] = cs.getResultSet();
+            assertSame(cs, allRS[3].getStatement());
             allRS[3].next();
             // first, third and fourth open, second closed
             assertEquals(2,allRS[0].getInt(1));
@@ -1032,6 +1041,7 @@ private void mixedGetMoreResults(CallableStatement cs, ResultSet[] allRS) throws
             if (!moreRS)
                    fail("FAIL - no fifth result set");
             allRS[4] = cs.getResultSet();
+            assertSame(cs, allRS[4].getStatement());
             allRS[4].next();
             // only fifth open
             JDBC.assertClosed(allRS[0]);
@@ -1067,6 +1077,7 @@ private void keepCurrentGetMoreResults(CallableStatement cs, ResultSet[] allRS)
             for (int i = 0; i < 5; i++)
             {
                 allRS[i] = cs.getResultSet();
+                assertSame(cs, allRS[i].getStatement());
                 allRS[i].next();
                 assertEquals(2+i, allRS[i].getInt(1));
                 
@@ -1087,6 +1098,7 @@ private void closeCurrentGetMoreResults(CallableStatement cs, ResultSet[] allRS)
             for (int i = 0; i < 5; i++)
             {
                 allRS[i] = cs.getResultSet();
+                assertSame(cs, allRS[i].getStatement());
                 allRS[i].next();
                 assertEquals(2+i, allRS[i].getInt(1));
                 
@@ -1116,6 +1128,7 @@ private void defaultGetMoreResults(CallableStatement cs, ResultSet[] allRS) thro
             for (int i = 0; i < 5; i++)
             {
                 allRS[i] = cs.getResultSet();
+                assertSame(cs, allRS[i].getStatement());
                 allRS[i].next();
                 assertEquals(2+i, allRS[i].getInt(1));
                 
