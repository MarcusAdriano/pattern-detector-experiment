diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
index 1cc7bad3..06635d6b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
@@ -462,13 +462,6 @@ public boolean nextAccessPath(Optimizer optimizer,
 
 				for (int i = 0; i < baseColumnPositions.length; i++)
 				{
-					//Check if the order by column has equijoin on another 
-					//column which is already identified as an ordered column
-					if (doesOrderByColumnHaveEquiJoin(
-							irg, predList, rowOrdering))
-						rowOrdering.columnAlwaysOrdered(this, 
-								baseColumnPositions[i]);
-
 					/*
 					** Don't add the column to the ordering if it's already
 					** an ordered column.  This can happen in the following
@@ -4370,86 +4363,6 @@ private boolean isStrictlyOrdered(ColumnReference[] crs, ConglomerateDescriptor
 		return true;
 	}
 
-	//Check if the columns in the index have an equijoin on them
-	//with other already ordered columns from the other optimizables. This
-	//is done by going through the columns in the index and checking the
-	//predicate list for equijoins on the index columns. 
-	private boolean doesOrderByColumnHaveEquiJoin(IndexRowGenerator irg,
-			OptimizablePredicateList predList, RowOrdering ro)
-	throws StandardException
-	{
-		if (predList == null)
-		{
-			return false;
-		}
-
-		// is this a unique index. 
-		if (! irg.isUnique())
-		{
-			return false;
-		}
-
-		PredicateList restrictionList = (PredicateList) predList;
-
-		int[] baseColumnPositions = irg.baseColumnPositions();
-
-		for (int index = 0; index < baseColumnPositions.length; index++)
-		{
-			// get the column number at this position
-			int curCol = baseColumnPositions[index];
-
-			//Check if this column from the index has an equi join predicate
-			//on them.
-			int j = restrictionList.hasEqualityPredicateOnOrderedColumn(
-					this, curCol, true);
-			if (j == -1)
-				return false;
-
-			//We have found a predicate which has an equi join involving the
-			//index column. Now ensure that the equi join is with a column
-			//which is already identified as always ordered.
-			Predicate		predicate;
-			predicate = (Predicate) restrictionList.elementAt(j);
-			ValueNode vn = predicate.getAndNode().getLeftOperand();
-			ColumnReference cr;
-  			if (vn instanceof BinaryRelationalOperatorNode)
-  			{
-  				BinaryRelationalOperatorNode bon = 
-  					(BinaryRelationalOperatorNode) vn;
-  				cr = null;
-				if (bon.columnOnOneSide(this) == 
-					BinaryRelationalOperatorNode.LEFT)
-				{
-	  				//If the index column is on left side, then look for the 
-					//operand on the other side to see if it is of type 
-					//ColumnReference. If it is, then check if that column 
-					//is identified as always ordered
-					if (bon.getRightOperand() instanceof ColumnReference)
-						cr = (ColumnReference)bon.getRightOperand();
-				} else
-				{
-	  				//If the index column is on right side, then look for the 
-					//operand on the other side to see if it is of type 
-					//ColumnReference. If it is, then check if that column 
-					//is identified as always ordered
-					if (bon.getLeftOperand() instanceof ColumnReference)
-						cr = (ColumnReference)bon.getLeftOperand();
-				}
-				if (cr!=null)
-				{
-					//We have found that the index column is involved in an
-					//equijoin with another column. Now check if that other
-					//column is always ordered
-					if (ro.orderedOnColumn(1, cr.getTableNumber(), 
-							cr.getColumnNumber()))
-						return true;
-				}
-  			}
-		}
-
-		return false;
-	}
-
 	/**
 	 * Is this a one-row result set with the given conglomerate descriptor?
 	 */
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndSortAvoidance.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndSortAvoidance.java
index fa7338ef..42d39c03 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndSortAvoidance.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndSortAvoidance.java
@@ -10024,6 +10024,74 @@ protected void setUp() throws SQLException {
             		"INSERT INTO test2 (entity_id, rel_id) VALUES (1, 103)");
             //End of tables creation for DERBY-4240 repro
 
+            //Start of tables creation for DERBY-4331 repro
+            st.executeUpdate(
+            		"CREATE TABLE REPOSITORIES ( ID INT CONSTRAINT "+
+            		"REPOSITORIES_PRIMARY_ID PRIMARY KEY GENERATED ALWAYS "+
+            		"AS IDENTITY, "+
+            		"PATH VARCHAR(32672) CONSTRAINT REPOSITORIES_PATH "+
+            		"UNIQUE NOT NULL)");
+            st.executeUpdate(
+            		"CREATE TABLE FILES ( ID INT CONSTRAINT FILES_PRIMARY_ID "+
+            		"PRIMARY KEY GENERATED ALWAYS AS IDENTITY, "+
+            		"PATH VARCHAR(32672) NOT NULL, REPOSITORY INT NOT NULL "+
+            		"REFERENCES REPOSITORIES ON DELETE CASCADE, "+
+            		"CONSTRAINT FILES_REPOSITORY_PATH UNIQUE "+
+            		"(REPOSITORY, PATH))");
+            st.executeUpdate(
+            		"CREATE TABLE AUTHORS ( "+
+            		"ID INT CONSTRAINT AUTHORS_PRIMARY_ID PRIMARY KEY "+
+            		"GENERATED ALWAYS AS IDENTITY, REPOSITORY INT NOT NULL "+
+            		"REFERENCES REPOSITORIES ON DELETE CASCADE, "+
+            		"NAME VARCHAR(32672) NOT NULL, "+
+            		"CONSTRAINT AUTHORS_REPOSITORY_NAME UNIQUE (REPOSITORY, NAME))");
+            st.executeUpdate(
+            		"CREATE TABLE CHANGESETS ( "+
+            		"ID INT CONSTRAINT CHANGESETS_PRIMARY_ID PRIMARY KEY "+
+            		"GENERATED ALWAYS AS IDENTITY, " +
+            		"REPOSITORY INT NOT NULL REFERENCES REPOSITORIES "+
+            		"ON DELETE CASCADE, REVISION VARCHAR(1024) NOT NULL, "+
+            		"AUTHOR INT NOT NULL REFERENCES AUTHORS ON DELETE CASCADE, "+
+            		"TIME TIMESTAMP NOT NULL, MESSAGE VARCHAR(32672) NOT NULL, "+
+            		"CONSTRAINT CHANGESETS_REPOSITORY_REVISION UNIQUE "+
+            		"(REPOSITORY, REVISION))");
+            st.executeUpdate(
+            		"CREATE UNIQUE INDEX IDX_CHANGESETS_ID_DESC ON "+
+            		"CHANGESETS(ID DESC)");
+            st.executeUpdate(
+            		"CREATE TABLE FILECHANGES ( "+
+            		"ID INT CONSTRAINT FILECHANGES_PRIMARY_ID PRIMARY KEY "+
+            		"GENERATED ALWAYS AS IDENTITY, FILE INT NOT NULL "+
+            		"REFERENCES FILES ON DELETE CASCADE, "+
+            		"CHANGESET INT NOT NULL REFERENCES CHANGESETS "+
+            		"ON DELETE CASCADE, " +
+            		"CONSTRAINT FILECHANGES_FILE_CHANGESET "+
+            		"UNIQUE (FILE, CHANGESET))");
+            st.executeUpdate(
+            		"insert into repositories(path) values "+
+            		"'/var/tmp/source5923202038296723704opengrok/mercurial'");
+            st.executeUpdate(
+            		"insert into files(path, repository) values "+
+            		"('/mercurial/Makefile', 1), "+
+            		"('/mercurial/main.c', 1), "+
+            		"('/mercurial/header.h', 1), "+
+            		"('/mercurial/.hgignore', 1)");
+            st.executeUpdate(
+            		"insert into authors(repository, name) values "+
+            		"(1, 'Trond Norbye <trond.norbye@sun.com>')");
+            st.executeUpdate(
+            		"insert into changesets(repository, revision, author, "+
+            		"time, message) values (1,'0:816b6279ae9c',1,"+
+            		"'2008-08-12 22:00:00.0','Add .hgignore file'),"+
+            		"(1,'1:f24a5fd7a85d',1,'2008-08-12 22:03:00.0',"+
+            		"'Created a small dummy program'),"+
+            		"(1,'2:585a1b3f2efb',1,'2008-08-12 22:13:00.0',"+
+            		"'Add lint make target and fix lint warnings')");
+            st.executeUpdate(
+            		"insert into filechanges(file, changeset) values "+
+            		"(4,1),(1,2),(3,2),(2,2),(1,3),(2,3)");
+            //End of tables creation for DERBY-4331 repro
+
             getConnection().commit();
             st.close();
     }
@@ -10039,11 +10107,196 @@ protected void tearDown() throws Exception {
         //drop tables needed for DERBY-4240
         stmt.executeUpdate("drop table test1");
         stmt.executeUpdate("drop table test2");
+        //drop tables needed for DERBY-4331
+        stmt.executeUpdate("drop table FILECHANGES");
+        stmt.executeUpdate("drop table CHANGESETS");
+        stmt.executeUpdate("drop table AUTHORS");
+        stmt.executeUpdate("drop table FILES");
+        stmt.executeUpdate("drop table REPOSITORIES");
         stmt.close();
         commit();
         super.tearDown();
     }
 
+    /**
+     * Add a test case for DERBY-4331 where the rows were not ordered correctly
+     * for both ascending and descending order by clause.  
+     */
+    public void testDerby4331() throws SQLException {
+        Statement s;
+        ResultSet rs;
+        RuntimeStatisticsParser rtsp;
+        String [][] desc_result = new String[][] {
+        		{"3"},{"3"},{"2"},{"2"},{"2"},{"1"}};
+        String [][] asc_result  = new String[][] {
+        		{"1"},{"2"},{"2"},{"2"},{"3"},{"3"}};
+        
+        String sql1 = 
+        	"SELECT CS.ID FROM CHANGESETS CS, FILECHANGES FC, "+
+        	"REPOSITORIES R, FILES F, AUTHORS A WHERE "+
+        	"R.PATH = '/var/tmp/source5923202038296723704opengrok/mercurial' "+
+        	"AND F.REPOSITORY = R.ID AND A.REPOSITORY = R.ID AND "+
+        	"CS.REPOSITORY = R.ID AND CS.ID = FC.CHANGESET AND F.ID = FC.FILE "+
+        	"AND A.ID = CS.AUTHOR AND EXISTS ( "+
+        	"SELECT 1 FROM FILES F2 WHERE "+
+        	"F2.ID = FC.FILE AND F2.REPOSITORY = R.ID AND "+
+        	"F2.PATH LIKE '/%' ESCAPE '#') "+
+        	"ORDER BY CS.ID DESC";
+        s = createStatement();
+        rs = s.executeQuery(sql1);
+        JDBC.assertFullResultSet(rs, desc_result);
+        
+        sql1 = 
+        	"SELECT CS.ID FROM --DERBY-PROPERTIES joinOrder=FIXED \n" +
+        	"CHANGESETS CS, FILECHANGES FC, REPOSITORIES R, FILES F, "+
+        	"AUTHORS A WHERE " +
+        	"R.PATH = '/var/tmp/source5923202038296723704opengrok/mercurial' "+
+        	"AND F.REPOSITORY = R.ID AND A.REPOSITORY = R.ID AND "+
+        	"CS.REPOSITORY = R.ID AND CS.ID = FC.CHANGESET AND "+
+        	"F.ID = FC.FILE AND A.ID = CS.AUTHOR AND EXISTS ( "+
+        	"SELECT 1 FROM FILES F2 WHERE "+
+        	"F2.ID = FC.FILE AND F2.REPOSITORY = R.ID AND "+
+        	"F2.PATH LIKE '/%' ESCAPE '#') "+
+        	"ORDER BY CS.ID DESC"; 
+        rs = s.executeQuery(sql1);
+        JDBC.assertFullResultSet(rs, desc_result);
+
+        sql1 =
+        	"SELECT CS.ID FROM --DERBY-PROPERTIES joinOrder=FIXED  \n" +
+        	"REPOSITORIES R -- DERBY-PROPERTIES constraint=REPOSITORIES_PATH \n"+
+        	",FILES F -- DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH \n"+
+        	",FILECHANGES FC -- DERBY-PROPERTIES constraint=FILECHANGES_FILE_CHANGESET \n"+
+        	", AUTHORS A -- DERBY-PROPERTIES constraint=AUTHORS_REPOSITORY_NAME \n"+
+        	", CHANGESETS CS -- DERBY-PROPERTIES constraint=CHANGESETS_PRIMARY_ID \n"+
+        	"WHERE "+
+        	"R.PATH = '/var/tmp/source5923202038296723704opengrok/mercurial' "+
+        	"AND F.REPOSITORY = R.ID AND "+
+        	"A.REPOSITORY = R.ID AND "+
+        	"CS.REPOSITORY = R.ID AND "+
+        	"CS.ID = FC.CHANGESET AND "+
+        	"F.ID = FC.FILE AND "+
+        	"A.ID = CS.AUTHOR AND "+
+        	"EXISTS ( SELECT 1 FROM FILES F2 WHERE "+
+        	"F2.ID = FC.FILE AND F2.REPOSITORY = R.ID AND "+
+        	"F2.PATH LIKE '/%' ESCAPE '#') "+
+        	"ORDER BY CS.ID DESC"; 
+        rs = s.executeQuery(sql1);
+        JDBC.assertFullResultSet(rs, desc_result);
+
+        sql1 =
+        	"SELECT CS.ID FROM " +
+        	" CHANGESETS CS, FILECHANGES FC, REPOSITORIES R, FILES F, "+
+        	"AUTHORS A WHERE "+
+        	"R.PATH = '/var/tmp/source5923202038296723704opengrok/mercurial' "+
+        	"AND F.REPOSITORY = R.ID AND A.REPOSITORY = R.ID AND "+
+        	"CS.REPOSITORY = R.ID AND CS.ID = FC.CHANGESET AND "+
+        	"F.ID = FC.FILE AND A.ID = CS.AUTHOR AND EXISTS ( "+
+        	"SELECT 1 FROM FILES F2 WHERE F2.REPOSITORY = 1) "+
+        	"ORDER BY CS.ID DESC";
+        rs = s.executeQuery(sql1);
+        JDBC.assertFullResultSet(rs, desc_result);
+        
+        sql1 = 
+        	"SELECT CS.ID FROM --DERBY-PROPERTIES joinOrder=FIXED \n" +
+        	"REPOSITORIES R, FILES F, FILECHANGES FC, AUTHORS A, "+
+        	"CHANGESETS CS WHERE " +
+        	"R.PATH = '/var/tmp/source5923202038296723704opengrok/mercurial' "+
+        	"AND F.REPOSITORY = R.ID AND A.REPOSITORY = R.ID AND "+
+        	"CS.REPOSITORY = R.ID AND CS.ID = FC.CHANGESET AND "+
+        	"F.ID = FC.FILE AND A.ID = CS.AUTHOR AND EXISTS ( "+
+        	"SELECT 1 FROM FILES F2 WHERE "+
+        	"F2.ID = FC.FILE AND F2.REPOSITORY = R.ID AND "+
+        	"F2.PATH LIKE '/%' ESCAPE '#') ORDER BY CS.ID DESC";
+        rs = s.executeQuery(sql1);
+        JDBC.assertFullResultSet(rs, desc_result);
+        
+        sql1 =
+        	"SELECT CS.ID FROM --DERBY-PROPERTIES joinOrder=FIXED \n"+
+        	"REPOSITORIES R --DERBY-PROPERTIES constraint=REPOSITORIES_PATH \n"+
+        	", FILES F --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH \n"+
+        	", FILECHANGES FC --DERBY-PROPERTIES constraint=FILECHANGES_FILE_CHANGESET \n"+
+        	", AUTHORS A --DERBY-PROPERTIES constraint=AUTHORS_REPOSITORY_NAME \n"+
+        	", CHANGESETS CS --DERBY-PROPERTIES constraint=CHANGESETS_PRIMARY_ID \n"+
+        	"WHERE " +
+        	"R.PATH = '/var/tmp/source5923202038296723704opengrok/mercurial' "+
+        	"AND F.REPOSITORY = R.ID AND A.REPOSITORY = R.ID AND "+
+        	"CS.REPOSITORY = R.ID AND CS.ID = FC.CHANGESET AND "+
+        	"F.ID = FC.FILE AND A.ID = CS.AUTHOR AND EXISTS ( SELECT 1 "+
+        	"FROM FILES F2 --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH \n"+
+        	"WHERE F2.ID = FC.FILE AND F2.REPOSITORY = R.ID AND "+
+        	"F2.PATH LIKE '/%' ESCAPE '#') ORDER BY CS.ID DESC";
+        rs = s.executeQuery(sql1);
+        JDBC.assertFullResultSet(rs, desc_result);
+        
+        sql1 = 
+        	"SELECT CS.ID FROM --DERBY-PROPERTIES joinOrder=FIXED \n" +
+        	"REPOSITORIES R --DERBY-PROPERTIES constraint=REPOSITORIES_PATH \n"+
+        	", FILES F --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH \n"+
+        	", FILECHANGES FC --DERBY-PROPERTIES constraint=FILECHANGES_FILE_CHANGESET \n"+
+        	", AUTHORS A --DERBY-PROPERTIES constraint=AUTHORS_REPOSITORY_NAME \n"+
+        	", CHANGESETS CS --DERBY-PROPERTIES constraint=CHANGESETS_PRIMARY_ID \n"+
+        	"WHERE "+
+        	"R.PATH = '/var/tmp/source5923202038296723704opengrok/mercurial' "+
+        	"AND F.REPOSITORY = R.ID AND A.REPOSITORY = R.ID AND "+
+        	"CS.REPOSITORY = R.ID AND CS.ID = FC.CHANGESET AND "+
+        	"F.ID = FC.FILE AND A.ID = CS.AUTHOR AND EXISTS ( "+
+        	"SELECT 1 "+
+        	"FROM FILES F2 --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH \n"+
+        	"WHERE F2.ID = FC.FILE )ORDER BY CS.ID DESC";
+        rs = s.executeQuery(sql1);
+        JDBC.assertFullResultSet(rs, desc_result);
+        
+        sql1 = 
+        	"SELECT CS.ID FROM --DERBY-PROPERTIES joinOrder=FIXED \n"+
+        	"REPOSITORIES R --DERBY-PROPERTIES constraint=REPOSITORIES_PATH \n"+
+        	", FILES F --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH \n"+
+        	", FILECHANGES FC --DERBY-PROPERTIES constraint=FILECHANGES_FILE_CHANGESET \n"+
+        	", CHANGESETS CS --DERBY-PROPERTIES constraint=CHANGESETS_PRIMARY_ID \n"+
+        	"WHERE "+
+        	"R.PATH = '/var/tmp/source5923202038296723704opengrok/mercurial' "+
+        	"AND F.REPOSITORY = R.ID AND CS.REPOSITORY = R.ID AND "+
+        	"CS.ID = FC.CHANGESET AND F.ID = FC.FILE AND EXISTS ("+
+        	"SELECT 1 " +
+        	"FROM FILES F2 --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH \n"+
+        	"WHERE F2.ID = FC.FILE) ORDER BY CS.ID DESC";
+        rs = s.executeQuery(sql1);
+        JDBC.assertFullResultSet(rs, desc_result);
+        
+        sql1 =
+        	"SELECT CS.ID FROM --DERBY-PROPERTIES joinOrder=FIXED \n"+
+        	"FILES F --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH \n"+
+        	", FILECHANGES FC --DERBY-PROPERTIES constraint=FILECHANGES_FILE_CHANGESET \n"+
+        	", CHANGESETS CS --DERBY-PROPERTIES constraint=CHANGESETS_PRIMARY_ID \n"+
+        	"WHERE CS.ID = FC.CHANGESET AND F.ID = FC.FILE AND EXISTS ( "+
+        	"SELECT 1 "+
+        	"FROM FILES F2 --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH \n"+
+        	"WHERE F2.ID = FC.FILE) ORDER BY CS.ID DESC";
+        rs = s.executeQuery(sql1);
+        JDBC.assertFullResultSet(rs, desc_result);
+        
+        sql1 = 
+        	"SELECT CS.ID FROM --DERBY-PROPERTIES joinOrder=FIXED \n"+
+        	"FILES F --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH \n"+
+        	", FILECHANGES FC --DERBY-PROPERTIES constraint=FILECHANGES_FILE_CHANGESET \n"+
+        	", CHANGESETS CS --DERBY-PROPERTIES constraint=CHANGESETS_PRIMARY_ID \n"+
+        	"WHERE CS.ID = FC.CHANGESET AND F.ID = FC.FILE AND EXISTS ( "+
+        	"SELECT 1 "+
+        	"FROM FILES F2 --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH \n"+
+        	"WHERE F2.ID = FC.FILE) ORDER BY CS.ID";
+        rs = s.executeQuery(sql1);
+        JDBC.assertFullResultSet(rs, asc_result);
+
+        sql1 = 
+        	"SELECT CS.ID FROM --DERBY-PROPERTIES joinOrder=FIXED \n"+
+        	"FILES F --DERBY-PROPERTIES constraint=FILES_REPOSITORY_PATH \n"+
+        	", FILECHANGES FC --DERBY-PROPERTIES constraint=FILECHANGES_FILE_CHANGESET \n"+
+        	", CHANGESETS CS --DERBY-PROPERTIES constraint=CHANGESETS_PRIMARY_ID \n"+
+        	"WHERE CS.ID = FC.CHANGESET AND F.ID = FC.FILE "+
+        	"ORDER BY CS.ID DESC";
+        rs = s.executeQuery(sql1);
+        JDBC.assertFullResultSet(rs, desc_result);
+   }
+
     /**
      * Add a test case for DERBY-4240 where the rows were not ordered despite
      * an order by clause. The fix for DERBY-3926 took care of the bug. 
