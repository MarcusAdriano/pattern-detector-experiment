diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/LogicalStatementEntity.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/LogicalStatementEntity.java
index 63d12673..8e7bb27a 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/LogicalStatementEntity.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/LogicalStatementEntity.java
@@ -231,8 +231,8 @@ synchronized boolean isLogicalEntityClosed() {
      * instance implements {@code iface}
      */
     public boolean isWrapperFor(Class<?> iface) throws SQLException {
-        return ((org.apache.derby.client.am.Statement) getPhysStmt())
-                .isWrapperFor(iface);
+        getPhysStmt(); // Just to check that the statement is not closed.
+        return iface.isInstance(this);
     }
 
     /**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java
index 11d650b7..0eaa9051 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/CallableStatementTest.java
@@ -491,6 +491,10 @@ public void testIsNotWrapperForResultSet() throws SQLException {
         assertFalse(cStmt.isWrapperFor(ResultSet.class));
     }
 
+    public void testIsWrapperForSelf() throws SQLException {
+        assertTrue(cStmt.isWrapperFor(cStmt.getClass()));
+    }
+
     public void testUnwrapStatement() throws SQLException {
         Statement stmt = cStmt.unwrap(Statement.class);
         assertSame("Unwrap returned wrong object.", cStmt, stmt);
@@ -506,6 +510,11 @@ public void testUnwrapCallableStatement() throws SQLException {
         assertSame("Unwrap returned wrong object.", cStmt, cs);
     }
 
+    public void testUnwrapAsSelf() throws SQLException {
+        PreparedStatement cs = cStmt.unwrap(cStmt.getClass());
+        assertSame("Unwrap returned wrong object.", cStmt, cs);
+    }
+
     public void testUnwrapResultSet() {
         try {
             ResultSet rs = cStmt.unwrap(ResultSet.class);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java
index bc4fd5da..0b2334bf 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/PreparedStatementTest.java
@@ -372,6 +372,10 @@ public void testIsNotWrapperForResultSet() throws SQLException {
         assertFalse(ps.isWrapperFor(ResultSet.class));
     }
 
+    public void testIsWrapperForSelf() throws SQLException {
+        assertTrue(ps.isWrapperFor(ps.getClass()));
+    }
+
     public void testUnwrapStatement() throws SQLException {
         Statement stmt = ps.unwrap(Statement.class);
         assertSame("Unwrap returned wrong object.", ps, stmt);
@@ -382,6 +386,11 @@ public void testUnwrapPreparedStatement() throws SQLException {
         assertSame("Unwrap returned wrong object.", ps, ps2);
     }
 
+    public void testUnwrapAsSelf() throws SQLException {
+        PreparedStatement ps2 = ps.unwrap(ps.getClass());
+        assertSame("Unwrap returned wrong object.", ps, ps2);
+    }
+
     public void testUnwrapCallableStatement() {
         try {
             CallableStatement cs = ps.unwrap(CallableStatement.class);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java
index 960e4398..ff07eece 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ClosedObjectTest.java
@@ -28,6 +28,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.Map;
 import java.util.Properties;
 import javax.sql.ConnectionPoolDataSource;
 import javax.sql.DataSource;
@@ -117,9 +120,8 @@ public void testClosedObjects() throws Throwable {
     /** Creates a suite with all tests in the class. */
     public static Test suite() {
         TestSuite suite = new TestSuite("ClosedObjectTest suite");
-        suite.addTest(baseSuite("ClosedObjectTest:embedded"));
-        suite.addTest(TestConfiguration.clientServerDecorator(
-            baseSuite("ClosedObjectTest:client")));
+        suite.addTest(baseSuite(false));
+        suite.addTest(baseSuite(true));
         return suite;
     }
 
@@ -128,11 +130,13 @@ public static Test suite() {
      * <code>DataSource</code>, <code>ConnectionPoolDataSource</code>
      * and <code>XADataSource</code> to obtain objects.
      *
+     * @param network whether or not to run tests with the network client
      * @return a <code>Test</code> value
      * @exception Exception if an error occurs while building the test suite
      */
-    private static Test baseSuite(String name)  {
-        TestSuite topSuite = new TestSuite(name);
+    private static Test baseSuite(boolean network) {
+        TestSuite topSuite = new TestSuite(
+            "ClosedObjectTest:" + (network ? "client" : "embedded"));
 
         TestSuite dsSuite = new TestSuite("ClosedObjectTest DataSource");
         DataSourceDecorator dsDecorator = new DataSourceDecorator(dsSuite);
@@ -142,12 +146,16 @@ private static Test baseSuite(String name)  {
         // JDBC 3 required for ConnectionPoolDataSource and XADataSource
         if (JDBC.vmSupportsJDBC3()) {
             
-            TestSuite poolSuite = new TestSuite(
-                    "ClosedObjectTest ConnectionPoolDataSource");
-            PoolDataSourceDecorator poolDecorator =
-                new PoolDataSourceDecorator(poolSuite);
-            topSuite.addTest(poolDecorator);
-            fillDataSourceSuite(poolSuite, poolDecorator);
+            // Plain connection pool test.
+            topSuite.addTest(poolSuite(Collections.emptyMap()));
+
+            // The client driver has a variant of connection pool that caches
+            // and reuses JDBC statements. Test it here by setting the
+            // maxStatements property.
+            if (network) {
+                topSuite.addTest(poolSuite(Collections.singletonMap(
+                        "maxStatements", Integer.valueOf(5))));
+            }
     
             TestSuite xaSuite = new TestSuite("ClosedObjectTest XA");
             XADataSourceDecorator xaDecorator = new XADataSourceDecorator(xaSuite);
@@ -155,7 +163,25 @@ private static Test baseSuite(String name)  {
             fillDataSourceSuite(xaSuite, xaDecorator);
         }
 
-        return topSuite;
+        return network ?
+                TestConfiguration.clientServerDecorator(topSuite) :
+                topSuite;
+    }
+
+    /**
+     * Creates a suite that tests objects produced by a
+     * ConnectionPoolDataSource.
+     *
+     * @param dsProps properties to set on the data source
+     * @return a suite
+     */
+    private static Test poolSuite(Map dsProps) {
+        TestSuite poolSuite = new TestSuite(
+                "ClosedObjectTest ConnectionPoolDataSource");
+        PoolDataSourceDecorator poolDecorator =
+                new PoolDataSourceDecorator(poolSuite, dsProps);
+        fillDataSourceSuite(poolSuite, poolDecorator);
+        return poolDecorator;
     }
 
     /**
@@ -750,13 +776,17 @@ protected Connection newConnection_() throws SQLException {
      * <code>ConnectionPoolDataSource</code>.
      */
     private static class PoolDataSourceDecorator extends DataSourceDecorator {
+        private final Map dsProps;
+
         /**
          * Creates a new <code>PoolDataSourceDecorator</code> instance.
          *
          * @param test the test to decorate
+         * @param dsProps data source properties
          */
-        public PoolDataSourceDecorator(Test test) {
+        public PoolDataSourceDecorator(Test test, Map dsProps) {
             super(test);
+            this.dsProps = dsProps;
         }
 
         /**
@@ -768,6 +798,11 @@ public PoolDataSourceDecorator(Test test) {
          */
         protected Connection newConnection_() throws SQLException {
             ConnectionPoolDataSource ds = J2EEDataSource.getConnectionPoolDataSource();
+            for (Iterator it = dsProps.entrySet().iterator(); it.hasNext(); ) {
+                Map.Entry e = (Map.Entry) it.next();
+                J2EEDataSource.setBeanProperty(
+                    ds, (String) e.getKey(), e.getValue());
+            }
             PooledConnection pc =
                 ds.getPooledConnection();
             return pc.getConnection();
