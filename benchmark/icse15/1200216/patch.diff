diff --git a/aries/trunk/util/src/main/java/org/apache/aries/util/AriesFrameworkUtil.java b/aries/trunk/util/src/main/java/org/apache/aries/util/AriesFrameworkUtil.java
index dd16b335..e12307aa 100644
--- a/aries/trunk/util/src/main/java/org/apache/aries/util/AriesFrameworkUtil.java
+++ b/aries/trunk/util/src/main/java/org/apache/aries/util/AriesFrameworkUtil.java
@@ -22,7 +22,6 @@
 import org.apache.aries.util.internal.EquinoxWorker;
 import org.apache.aries.util.internal.FelixWorker;
 import org.apache.aries.util.internal.FrameworkUtilWorker;
-import org.apache.aries.util.internal.R43Worker;
 import org.osgi.framework.Bundle;
 import org.osgi.framework.FrameworkUtil;
 import org.osgi.framework.ServiceRegistration;
@@ -32,15 +31,11 @@
   private static FrameworkUtilWorker worker;
   
   static {
-    try {
-      worker = new R43Worker();
-    } catch (Throwable e) {
-    }
     Bundle b = FrameworkUtil.getBundle(AriesFrameworkUtil.class);
-    String bundleClassName = b == null? "": b.getClass().getName();
-    if (worker == null && isEquinox(bundleClassName)) {
+    String bundleClassName = b.getClass().getName();
+    if (isEquinox(bundleClassName)) {
       worker = new EquinoxWorker();
-    } else if (worker == null && bundleClassName.startsWith("org.apache.felix")) {
+    } else if (bundleClassName.startsWith("org.apache.felix")) {
       worker = new FelixWorker();
     } 
     
diff --git a/aries/trunk/util/src/main/java/org/apache/aries/util/internal/DefaultWorker.java b/aries/trunk/util/src/main/java/org/apache/aries/util/internal/DefaultWorker.java
index 31ce6e0e..40456074 100644
--- a/aries/trunk/util/src/main/java/org/apache/aries/util/internal/DefaultWorker.java
+++ b/aries/trunk/util/src/main/java/org/apache/aries/util/internal/DefaultWorker.java
@@ -39,8 +39,7 @@
 
   static
   {
-    Bundle bundle = FrameworkUtil.getBundle(DefaultWorker.class);
-    BundleContext myContext = bundle == null? null: bundle.getBundleContext();
+    BundleContext myContext = FrameworkUtil.getBundle(DefaultWorker.class).getBundleContext();
     
     // This may be created during framework shutdown when the bundle context is null.
     // So we need to cope and not NPE during construction.
diff --git a/aries/trunk/util/src/main/java/org/apache/aries/util/internal/R43Worker.java b/aries/trunk/util/src/main/java/org/apache/aries/util/internal/R43Worker.java
index 0c8ffdfe..e69de29b 100644
--- a/aries/trunk/util/src/main/java/org/apache/aries/util/internal/R43Worker.java
+++ b/aries/trunk/util/src/main/java/org/apache/aries/util/internal/R43Worker.java
@@ -1,42 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *  http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-
-package org.apache.aries.util.internal;
-
-import org.osgi.framework.Bundle;
-import org.osgi.framework.wiring.BundleWiring;
-
-/**
- * @version $Rev:$ $Date:$
- */
-public class R43Worker implements FrameworkUtilWorker {
-
-    static {
-        BundleWiring.class.getClassLoader();
-    }
-
-    public ClassLoader getClassLoader(Bundle b) {
-        return b.adapt(BundleWiring.class).getClassLoader();
-    }
-
-    public boolean isValid() {
-        return true;
-    }
-}
diff --git a/aries/trunk/util/src/main/java/org/apache/aries/util/tracker/RecursiveBundleTracker.java b/aries/trunk/util/src/main/java/org/apache/aries/util/tracker/RecursiveBundleTracker.java
index e9e06491..0ffdd68e 100644
--- a/aries/trunk/util/src/main/java/org/apache/aries/util/tracker/RecursiveBundleTracker.java
+++ b/aries/trunk/util/src/main/java/org/apache/aries/util/tracker/RecursiveBundleTracker.java
@@ -18,7 +18,6 @@
  */
 package org.apache.aries.util.tracker;
 
-import org.apache.aries.util.tracker.hook.BundleHookBundleTracker;
 import org.osgi.framework.Bundle;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.ServiceReference;
@@ -31,11 +30,11 @@
  * order to use this class clients must create a subclass and implement the methods of the
  * <code>BundleTrackerCustomizer</code> interface. In spite of this, instances of this class
  * MUST NOT be passed as a parameter to any <code>BundleTracker</code>.</p>
- * <p/>
+ * 
  * The model for using this is that classes should instantiate it
  * and pass it a 'vanilla' bundle tracker.
- *
  * @author pradine
+ *
  */
 public final class RecursiveBundleTracker {
   private static final int COMPOSITE_BUNDLE_MASK =
@@ -57,18 +56,11 @@ public RecursiveBundleTracker(BundleContext context, int stateMask, BundleTracke
     // We always need INSTALLED events so we can recursively listen to the frameworks
     if ((stateMask & COMPOSITE_BUNDLE_MASK) != COMPOSITE_BUNDLE_MASK)
       throw new IllegalArgumentException();
-
-    BundleTracker tracker = null;
-    try {
-      tracker = new BundleHookBundleTracker(context, stateMask, customizer);
-    } catch (Throwable e) {
-    }
-    if (tracker == null && areMultipleFrameworksAvailable(context)) {
+       if (areMultipleFrameworksAvailable(context)) {
       tracker = new InternalRecursiveBundleTracker(context, stateMask, customizer);
     } else {
       tracker = new BundleTracker(context, stateMask, customizer);
     }
-    this.tracker = tracker;
   }
 
   private static boolean areMultipleFrameworksAvailable(BundleContext context) {
