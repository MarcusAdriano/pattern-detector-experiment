diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java
index fc3b3c8b..59c68fd5 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby151Test.java
@@ -98,6 +98,13 @@ protected void setUp()
     protected void tearDown()
             throws java.lang.Exception {
 
+        // Clearing the interrupt flag; makes sense for embedded part of
+        // the test. When running c/s, it would be the server thread which
+        // receives the interrupt, and since db is shut down, that should
+        // be ok for later tests. We need to clear the flag here since, for
+        // embedded, the app thread is affected.
+        Thread.currentThread().interrupted();
+
         Statement stmt = createStatement();
         stmt.executeUpdate("DROP TABLE d151");
         stmt.close();
@@ -150,12 +157,6 @@ public void testD151 () throws SQLException {
             println("Not able to test fix for DERBY-151: No interrupt seen");
         } catch (SQLException e) {
             assertSQLState("XSDG9", e);
-            // Clearing the interrupt flag; makes sense for embedded part of
-            // the test. When running c/s, it would be the server thread which
-            // receives the interrupt, and since db is shut down, that should
-            // be ok for later tests. We need to clear the flag here since, for
-            // embedded, the app thread is affected.
-            Thread.currentThread().interrupted();
         }
     }
 }
