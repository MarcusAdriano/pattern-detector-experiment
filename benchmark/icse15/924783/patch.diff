diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/DefsTable.java b/cassandra/trunk/src/java/org/apache/cassandra/db/DefsTable.java
index 28c17ec4..ebd07b47 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/DefsTable.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/DefsTable.java
@@ -71,10 +71,7 @@ else if (ksm.cfMetaData().containsKey(cfm.cfName))
                 ksm = new KSMetaData(ksm.name, ksm.strategyClass, ksm.replicationFactor, ksm.snitch, newCfs.toArray(new CFMetaData[newCfs.size()]));
         
                 // store it.
-                UUID newVersion = UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress());
-                RowMutation rm = new RowMutation(Table.DEFINITIONS, newVersion.toString());
-                rm.add(new QueryPath(SCHEMA_CF, null, ksm.name.getBytes()), KSMetaData.serialize(ksm), System.currentTimeMillis());
-                rm.apply();
+                UUID newVersion = saveKeyspaceDefinition(ksm);
         
                 // reinitialize the table.
                 Table.open(ksm.name).addCf(cfm.cfName);
@@ -108,10 +105,7 @@ else if (!ksm.cfMetaData().containsKey(cfm.cfName))
                 ksm = new KSMetaData(ksm.name, ksm.strategyClass, ksm.replicationFactor, ksm.snitch, newCfs.toArray(new CFMetaData[newCfs.size()]));
                 
                 // store it.
-                UUID newVersion = UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress());
-                RowMutation rm = new RowMutation(Table.DEFINITIONS, newVersion.toString());
-                rm.add(new QueryPath(SCHEMA_CF, null, ksm.name.getBytes()), KSMetaData.serialize(ksm), System.currentTimeMillis());
-                rm.apply();
+                UUID newVersion = saveKeyspaceDefinition(ksm);
                 
                 // reinitialize the table.
                 CFMetaData.purge(cfm);
@@ -169,10 +163,7 @@ protected void runMayThrow() throws Exception
                 ksm = new KSMetaData(ksm.name, ksm.strategyClass, ksm.replicationFactor, ksm.snitch, newCfs.toArray(new CFMetaData[newCfs.size()]));
                 
                 // store it
-                UUID newVersion = UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress());
-                RowMutation rm = new RowMutation(Table.DEFINITIONS, newVersion.toString());
-                rm.add(new QueryPath(SCHEMA_CF, null, ksm.name.getBytes()), KSMetaData.serialize(ksm), System.currentTimeMillis());
-                rm.apply();
+                UUID newVersion = saveKeyspaceDefinition(ksm);
                 
                 // leave it up to operators to ensure there are no writes going on durng the file rename. Just know that
                 // attempting row mutations on oldcfName right now would be really bad.
@@ -196,6 +187,24 @@ protected void runMayThrow() throws Exception
         });
     }
 
+    /** adds a keyspace */
+    public static Future add(final KSMetaData ksm)
+    {
+        return executor.submit(new WrappedRunnable()
+        {
+            protected void runMayThrow() throws Exception
+            {
+                if (DatabaseDescriptor.getTableDefinition(ksm.name) != null)
+                    throw new ConfigurationException("Keyspace already exists.");
+                
+                UUID versionId = saveKeyspaceDefinition(ksm);
+                DatabaseDescriptor.setTableDefinition(ksm, versionId);
+                Table.open(ksm.name);
+                CommitLog.instance().forceNewSegment();
+            }
+        });
+    }
+    
     /** dumps current keyspace definitions to storage */
     public static synchronized void dumpToStorage(UUID version) throws IOException
     {
@@ -267,4 +276,13 @@ private static void renameStorageFiles(String table, String oldCfName, String ne
         if (mostRecentProblem != null)
             throw new IOException("One or more IOExceptions encountered while renaming files. Most recent problem is included.", mostRecentProblem);
     }
+    
+    private static UUID saveKeyspaceDefinition(KSMetaData ksm) throws IOException
+    {
+        UUID newVersion = UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress());
+        RowMutation rm = new RowMutation(Table.DEFINITIONS, newVersion.toString());
+        rm.add(new QueryPath(SCHEMA_CF, null, ksm.name.getBytes()), KSMetaData.serialize(ksm), System.currentTimeMillis());
+        rm.apply();
+        return newVersion;
+    }
 }
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
index 9b1c27b8..72ac90c3 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
@@ -27,6 +27,8 @@
 import org.apache.cassandra.db.filter.NamesQueryFilter;
 import org.apache.cassandra.db.filter.QueryPath;
 import org.apache.cassandra.db.filter.SliceQueryFilter;
+import org.apache.cassandra.locator.EndPointSnitch;
+import org.apache.cassandra.locator.RackAwareStrategy;
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.db.marshal.UTF8Type;
 import org.apache.cassandra.utils.UUIDGen;
@@ -195,4 +197,31 @@ public void renameCf() throws IOException, ExecutionException, InterruptedExcept
         assert cfam.getColumnCount() == 1;
         assert Arrays.equals(cfam.getColumn("col5".getBytes()).value(), "updated".getBytes());
     }
+    
+    @Test
+    public void addNewKS() throws IOException, ExecutionException, InterruptedException
+    {
+        CFMetaData newCf = new CFMetaData("NewKeyspace1", "AddedStandard1", "Standard", new UTF8Type(), null, "A new cf for a new ks", 0, 0);
+        KSMetaData newKs = new KSMetaData(newCf.tableName, RackAwareStrategy.class, 5, new EndPointSnitch(), newCf);
+        
+        int segmentCount = CommitLog.instance().getSegmentCount();
+        DefsTable.add(newKs).get();
+        assert CommitLog.instance().getSegmentCount() == segmentCount + 1;
+        
+        assert DatabaseDescriptor.getTableDefinition(newCf.tableName) != null;
+        assert DatabaseDescriptor.getTableDefinition(newCf.tableName) == newKs;
+
+        // test reads and writes.
+        RowMutation rm = new RowMutation(newCf.tableName, "key0");
+        rm.add(new QueryPath(newCf.cfName, null, "col0".getBytes()), "value0".getBytes(), 1L);
+        rm.apply();
+        ColumnFamilyStore store = Table.open(newCf.tableName).getColumnFamilyStore(newCf.cfName);
+        assert store != null;
+        store.forceBlockingFlush();
+        
+        ColumnFamily cfam = store.getColumnFamily(new NamesQueryFilter("key0", new QueryPath(newCf.cfName), "col0".getBytes()));
+        assert cfam.getColumn("col0".getBytes()) != null;
+        IColumn col = cfam.getColumn("col0".getBytes());
+        assert Arrays.equals("value0".getBytes(), col.value());
+    }
 }
