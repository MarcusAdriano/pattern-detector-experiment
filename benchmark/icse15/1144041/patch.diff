diff --git a/lucene/dev/branches/branch_3x/solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer.java b/lucene/dev/branches/branch_3x/solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer.java
index e9f795b0..c9ed1c4d 100644
--- a/lucene/dev/branches/branch_3x/solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer.java
+++ b/lucene/dev/branches/branch_3x/solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer.java
@@ -32,11 +32,11 @@
 import org.apache.commons.httpclient.methods.PostMethod;
 import org.apache.commons.httpclient.methods.RequestEntity;
 import org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;
+import org.apache.commons.httpclient.methods.multipart.FilePart;
 import org.apache.commons.httpclient.methods.multipart.Part;
-import org.apache.commons.httpclient.methods.multipart.PartBase;
+import org.apache.commons.httpclient.methods.multipart.PartSource;
 import org.apache.commons.httpclient.methods.multipart.StringPart;
 import org.apache.commons.httpclient.params.HttpMethodParams;
-import org.apache.commons.io.IOUtils;
 import org.apache.solr.client.solrj.ResponseParser;
 import org.apache.solr.client.solrj.SolrRequest;
 import org.apache.solr.client.solrj.SolrServer;
@@ -324,25 +324,24 @@ else if( SolrRequest.METHOD.POST == request.getMethod() ) {
                   final ContentStream c = content;
 
                   String charSet = null;
-                  String transferEncoding = null;
-                  parts.add(new PartBase(c.getName(), c.getContentType(),
-                      charSet, transferEncoding) {
+                  PartSource source = new PartSource() {
                     @Override
-                    protected long lengthOfData() throws IOException {
+                    public long getLength() {
                       return c.getSize();
                     }
 
-                    @Override
-                    protected void sendData(OutputStream out)
-                        throws IOException {
-                      InputStream in = c.getStream();
-                      try {
-                        IOUtils.copy(in, out);
-                      } finally {
-                        in.close();
+                    public String getFileName() {
+                      return c.getName();
                       }
+
+                    @Override
+                    public InputStream createInputStream() throws IOException {
+                      return c.getStream();
                     }
-                  });
+                  };
+                
+                  parts.add(new FilePart(c.getName(), source, 
+                                         c.getContentType(), charSet));
                 }
               }
               if (parts.size() > 0) {
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/client/solrj/SolrExampleTests.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/client/solrj/SolrExampleTests.java
index 59ad8689..7a4e6844 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/client/solrj/SolrExampleTests.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/client/solrj/SolrExampleTests.java
@@ -358,6 +358,24 @@ public void testContentStreamRequest() throws Exception {
     Assert.assertEquals( 10, rsp.getResults().getNumFound() );
   }
 
+ @Test
+ public void testMultiContentStreamRequest() throws Exception {
+    SolrServer server = getSolrServer();
+    server.deleteByQuery( "*:*" );// delete everything!
+    server.commit();
+    QueryResponse rsp = server.query( new SolrQuery( "*:*") );
+    Assert.assertEquals( 0, rsp.getResults().getNumFound() );
+
+    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest("/update");
+    up.addFile(getFile("docs1.xml")); // 2
+    up.addFile(getFile("docs2.xml")); // 3
+    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);
+    NamedList<Object> result = server.request(up);
+    assertNotNull("Couldn't upload xml files", result);
+    rsp = server.query( new SolrQuery( "*:*") );
+    Assert.assertEquals( 5 , rsp.getResults().getNumFound() );
+  }
+
 
  protected void assertNumFound( String query, int num ) throws SolrServerException, IOException
   {
