diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/schema/IndexSchema.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
index d0091ba0..2a562298 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/schema/IndexSchema.java
@@ -677,7 +677,7 @@ public Similarity getSimilarity() {
     } catch(Exception e) {
       // unexpected exception...
       SolrConfig.severeErrors.add( e );
-      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,"Schema Parsing Failed",e,false);
+      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,"Schema Parsing Failed: " + e.getMessage(), e,false);
     }
 
     // create the field analyzers
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/schema/SchemaField.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/schema/SchemaField.java
index e8c36565..381a8a10 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/schema/SchemaField.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/schema/SchemaField.java
@@ -233,20 +233,27 @@ static int calcProps(String name, FieldType ft, Map<String, String> props) {
     }
 
     if (on(falseProps,INDEXED)) {
-      int pp = (INDEXED | OMIT_NORMS | OMIT_TF_POSITIONS | OMIT_POSITIONS
+      int pp = (INDEXED 
               | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS
               | SORT_MISSING_FIRST | SORT_MISSING_LAST);
       if (on(pp,trueProps)) {
-        throw new RuntimeException("SchemaField: " + name + " conflicting indexed field options:" + props);
+        throw new RuntimeException("SchemaField: " + name + " conflicting 'true' field options for non-indexed field:" + props);
+      }
+      p &= ~pp;
+    }
+    if (on(falseProps,INDEXED)) {
+      int pp = (OMIT_NORMS | OMIT_TF_POSITIONS | OMIT_POSITIONS);
+      if (on(pp,falseProps)) {
+        throw new RuntimeException("SchemaField: " + name + " conflicting 'false' field options for non-indexed field:" + props);
       }
       p &= ~pp;
 
     }
 
-    if (on(falseProps,OMIT_TF_POSITIONS)) {
+    if (on(trueProps,OMIT_TF_POSITIONS)) {
       int pp = (OMIT_POSITIONS | OMIT_TF_POSITIONS);
-      if (on(pp, trueProps)) {
-        throw new RuntimeException("SchemaField: " + name + " conflicting indexed field options:" + props);
+      if (on(pp, falseProps)) {
+        throw new RuntimeException("SchemaField: " + name + " conflicting tf and position field options:" + props);
       }
       p &= ~pp;
     }
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest.java b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest.java
index 6e3c24d6..51270bbe 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/schema/BadIndexSchemaTest.java
@@ -21,37 +21,44 @@
 import java.util.LinkedList;
 import java.util.List;
 
+import org.apache.solr.SolrTestCaseJ4;
+import org.apache.solr.common.SolrException;
+import org.apache.solr.common.SolrException.ErrorCode;
 import org.apache.solr.core.SolrConfig;
-import org.apache.solr.core.SolrCore;
-import org.apache.solr.util.AbstractSolrTestCase;
-
 
+import org.junit.Test;
 
 /**
  */
-public class BadIndexSchemaTest extends AbstractSolrTestCase {
-
-  private static final String bad_type = "StrField (bad_type)";
-
-  @Override public String getSchemaFile() { return "bad-schema.xml"; }
-  @Override public String getSolrConfigFile() { return "solrconfig.xml"; }
+public class BadIndexSchemaTest extends SolrTestCaseJ4 {
 
-  @Override 
-  public void setUp() throws Exception {
-    ignoreException("_twice");
-    ignoreException("ftAgain");
-    ignoreException("fAgain");
-    ignoreException(Pattern.quote(bad_type));
-
-    super.setUp();
-  }
+  private void doTest(final String schema, final String errString) 
+    throws Exception {
   
-  @Override 
-  public void tearDown() throws Exception {
+    ignoreException(Pattern.quote(errString));
+    try {
+      initCore( "solrconfig.xml", schema );
+    } catch (SolrException e) {
+      // short circut out if we found what we expected
+      if (-1 != e.getMessage().indexOf(errString)) return;
+
+      // otherwise, rethrow it, possibly completley unrelated
+      throw new SolrException
+        (ErrorCode.SERVER_ERROR, 
+         "Unexpected error, expected error matching: " + errString, e);
+    } finally {
     SolrConfig.severeErrors.clear();
-    super.tearDown();
+    }
+    fail("Did not encounter any exception from: " + schema);
   }
 
+  @Test
+  public void testSevereErrorsForInvalidFieldOptions() throws Exception {
+    doTest("bad-schema-not-indexed-but-norms.xml", "bad_field");
+    doTest("bad-schema-not-indexed-but-tf.xml", "bad_field");
+    doTest("bad-schema-not-indexed-but-pos.xml", "bad_field");
+    doTest("bad-schema-omit-tf-but-not-pos.xml", "bad_field");
+  }
   
   private Throwable findErrorWithSubstring( List<Throwable> err, String v )
   {
@@ -63,11 +70,15 @@ private Throwable findErrorWithSubstring( List<Throwable> err, String v )
     return null;
   }
   
+  public void testSevereErrors() throws Exception {
+    final String bad_type = "StrField (bad_type)";
+    try {
+      initCore( "solrconfig.xml", "bad-schema.xml" );
   
-  public void testSevereErrors() 
-  {
-    SolrCore core = h.getCore();
-    IndexSchema schema = core.getSchema();
+      ignoreException("_twice");
+      ignoreException("ftAgain");
+      ignoreException("fAgain");
+      ignoreException(Pattern.quote(bad_type));
 
     for( Throwable t : SolrConfig.severeErrors ) {
       log.info( "got ex:"+t.getMessage() );
@@ -96,5 +107,8 @@ public void testSevereErrors()
 
     // make sure thats all of them
     assertTrue( err.isEmpty() );
+    } finally {
+      SolrConfig.severeErrors.clear();
+    }
   }
 }
