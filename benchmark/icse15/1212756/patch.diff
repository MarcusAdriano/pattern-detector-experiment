diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/MultiReader.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/MultiReader.java
index e439fdd3..7eadeeea 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/MultiReader.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/MultiReader.java
@@ -112,6 +112,21 @@ protected synchronized IndexReader doOpenIfChanged() throws CorruptIndexExceptio
     return doReopen(false);
   }
   
+  /**
+   * If the index has changed since it was opened, open and return a new reader;
+   * else, return {@code null}.
+   * 
+   * @see #openIfChanged(IndexReader, boolean)
+   * @deprecated Write support will be removed in Lucene 4.0.
+   * Use {@link #doOpenIfChanged()} instead
+   */
+  @Deprecated @Override
+  protected IndexReader doOpenIfChanged(boolean openReadOnly) throws CorruptIndexException, IOException {
+    if (!openReadOnly)
+      throw new UnsupportedOperationException("MultiReader does not support reopening in read/write mode");
+    return doReopen(false);
+  }
+
   /**
    * Clones the subreaders.
    * (see {@link IndexReader#clone()}).
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/ParallelReader.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/ParallelReader.java
index 8f6d5b25..26d94ab5 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/ParallelReader.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/ParallelReader.java
@@ -174,6 +174,21 @@ protected synchronized IndexReader doOpenIfChanged() throws CorruptIndexExceptio
     return doReopen(false);
   }
     
+  /**
+   * If the index has changed since it was opened, open and return a new reader;
+   * else, return {@code null}.
+   * 
+   * @see #openIfChanged(IndexReader, boolean)
+   * @deprecated Write support will be removed in Lucene 4.0.
+   * Use {@link #doOpenIfChanged()} instead
+   */
+  @Deprecated @Override
+  protected IndexReader doOpenIfChanged(boolean openReadOnly) throws CorruptIndexException, IOException {
+    if (!openReadOnly)
+      throw new UnsupportedOperationException("ParallelReader does not support reopening in read/write mode");
+    return doReopen(false);
+  }
+
   private IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {
     ensureOpen();
     
