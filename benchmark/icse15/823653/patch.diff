diff --git a/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/SolrQuery.java b/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/SolrQuery.java
index 36e22b8a..ca9e5ed7 100644
--- a/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/SolrQuery.java
+++ b/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/SolrQuery.java
@@ -191,7 +191,7 @@ public int getFacetMinCount() {
    * Sets facet missing boolean flag 
    * 
    * @param v flag to indicate the field of  {@link FacetParams#FACET_MISSING} .
-   * @return
+   * @return this
    */
   public SolrQuery setFacetMissing(Boolean v) {
     this.set(FacetParams.FACET_MISSING, v);
@@ -515,11 +515,11 @@ public String getQueryType() {
   }
 
   /**
-   * @see org.apache.solr.common.params.ModifiableSolrParams#set(String, String ...)
+   * @see ModifiableSolrParams#set(String,String[])
    * @param name
    * @param values
    *  
-   * @return
+   * @return this
    */
   public SolrQuery setParam(String name, String ... values) {
     this.set(name, values);
@@ -530,7 +530,7 @@ public SolrQuery setParam(String name, String ... values) {
    * @see org.apache.solr.common.params.ModifiableSolrParams#set(String, boolean)
    * @param name
    * @param value
-   * @return
+   * @return this
    */
   public SolrQuery setParam(String name, boolean value) {
     this.set(name, value);
diff --git a/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer.java b/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer.java
index 77db0da8..e9ddfe8f 100644
--- a/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer.java
+++ b/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer.java
@@ -192,7 +192,8 @@ public CommonsHttpSolrServer(URL baseURL, HttpClient client, boolean useMultiPar
   }
 
   /**
-   * @see {@link #useMultiPartPost}, {@link #_parser}
+   * @see #useMultiPartPost
+   * @see #_parser
    */
   public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {
     _baseURL = baseURL.toExternalForm();
diff --git a/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer.java b/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer.java
index 6d1c8985..f884a299 100644
--- a/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer.java
+++ b/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer.java
@@ -54,7 +54,7 @@
  * SolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient,"http://host1:8080/solr/","http://host2:8080/solr","http://host2:8080/solr");
  * </pre></blockquote>
  * This detects if a dead server comes alive automatically. The check is done in fixed intervals in a dedicated thread.
- * This interval can be set using {@see #setAliveCheckInterval} , the default is set to one minute.
+ * This interval can be set using {@link #setAliveCheckInterval} , the default is set to one minute.
  * <p/>
  * <b>When to use this?</b><br/> This can be used as a software load balancer when you do not wish to setup an external
  * load balancer. The code is relatively new and the API is currently experimental. Alternatives to this code are to use
diff --git a/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/response/DocumentAnalysisResponse.java b/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/response/DocumentAnalysisResponse.java
index 23facf51..9cc66b9f 100644
--- a/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/response/DocumentAnalysisResponse.java
+++ b/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/response/DocumentAnalysisResponse.java
@@ -184,22 +184,22 @@ public String getFieldName() {
     }
 
     /**
-     * Returns the number of query time analysis phases or {@code -1) if this field analysis doesn't hold a query
-     * time analysis.
+     * Returns the number of query time analysis phases or {@code -1} if 
+     * this field analysis doesn't hold a query time analysis.
      *
-     * @return Returns the number of query time analysis phases or {@code -1) if this field analysis doesn't hold a
-     *         query time analysis.
+     * @return Returns the number of query time analysis phases or {@code -1} 
+     *         if this field analysis doesn't hold a query time analysis.
      */
     public int getQueryPhasesCount() {
       return queryPhases == null ? -1 : queryPhases.size();
     }
 
     /**
-     * Returns the query time analysis phases for the field or {@code null} if this field doesn't hold a query time
-     * analysis.
+     * Returns the query time analysis phases for the field or {@code null} 
+     * if this field doesn't hold a query time analysis.
      *
-     * @return Returns the query time analysis phases for the field or {@code null} if this field doesn't hold a
-     *         query time analysis.
+     * @return Returns the query time analysis phases for the field or 
+     *         {@code null} if this field doesn't hold a query time analysis.
      */
     public Iterable<AnalysisPhase> getQueryPhases() {
       return queryPhases;
diff --git a/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/response/FieldAnalysisResponse.java b/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/response/FieldAnalysisResponse.java
index f857a75e..be255bbb 100644
--- a/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/response/FieldAnalysisResponse.java
+++ b/lucene/solr/trunk/src/solrj/org/apache/solr/client/solrj/response/FieldAnalysisResponse.java
@@ -150,22 +150,24 @@ private Analysis() {
     }
 
     /**
-     * Returns the number of query time analysis phases in this analysis or {@code -1) if query time analysis
-     * doesn't exist.
+     * Returns the number of query time analysis phases in this analysis or 
+     * {@code -1} if query time analysis doesn't exist.
      *
-     * @return Returns the number of query time analysis phases in this analysis or {@code -1) if query time
-     *         analysis doesn't exist.
+     * @return Returns the number of query time analysis phases in this 
+     *         analysis or {@code -1} if query time analysis doesn't exist.
      */
     public int getQueryPhasesCount() {
       return queryPhases == null ? -1 : queryPhases.size();
     }
 
     /**
-     * Returns the query time analysis phases for this analysis or {@code null} if query time analysis doesn't
-     * exist.
+     * Returns the query time analysis phases for this analysis or {@code null}
+     * if query time analysis doesn't exist.
+     * 
+     *
+     * @return The query time analysis phases for this analysis or {@code null}
+     *         if query time analysis doesn't exist.
      *
-     * @return The query time analysis phases for this analysis or {@code null} if query time analysis doesn't
-     *         exist.
      */
     public Iterable<AnalysisPhase> getQueryPhases() {
       return queryPhases;
