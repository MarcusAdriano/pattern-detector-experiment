diff --git a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
index c785ac5c..2cb9afb0 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
@@ -412,6 +412,13 @@ private void internal_insert(ByteBuffer key, ColumnParent column_parent, Column
         state().hasColumnFamilyAccess(column_parent.column_family, Permission.WRITE);
 
         CFMetaData metadata = ThriftValidation.validateColumnFamily(state().getKeyspace(), column_parent.column_family, false);
+        ThriftValidation.validateKey(metadata, key);
+        ThriftValidation.validateColumnParent(metadata, column_parent);
+        // SuperColumn field is usually optional, but not when we're inserting
+        if (metadata.cfType == ColumnFamilyType.Super && column_parent.super_column == null)
+        {
+            throw new InvalidRequestException("missing mandatory super column name for super CF " + column_parent.column_family);
+        }
         ThriftValidation.validateColumnNames(metadata, column_parent, Arrays.asList(column.name));
         ThriftValidation.validateColumnData(metadata, column);
 
@@ -1043,6 +1050,11 @@ public void add(ByteBuffer key, ColumnParent column_parent, CounterColumn column
         ThriftValidation.validateKey(metadata, key);
         ThriftValidation.validateCommutativeForWrite(metadata, consistency_level);
         ThriftValidation.validateColumnParent(metadata, column_parent);
+        // SuperColumn field is usually optional, but not when we're adding
+        if (metadata.cfType == ColumnFamilyType.Super && column_parent.super_column == null)
+        {
+            throw new InvalidRequestException("missing mandatory super column name for super CF " + column_parent.column_family);
+        }
         ThriftValidation.validateColumnNames(metadata, column_parent, Arrays.asList(column.name));
 
         RowMutation rm = new RowMutation(keyspace, key);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java b/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java
index 19b9a434..97bea558 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java
@@ -150,6 +150,7 @@ public static void validateColumnParent(CFMetaData metadata, ColumnParent column
                 throw new InvalidRequestException("columnfamily alone is required for standard CF " + metadata.cfName);
             }
         }
+
         if (column_parent.super_column != null)
         {
             validateColumnNames(metadata, (ByteBuffer)null, Arrays.asList(column_parent.super_column));
@@ -337,6 +338,10 @@ public static void validateMutation(CFMetaData metadata, Mutation mut)
 
     public static void validateDeletion(CFMetaData metadata, Deletion del) throws InvalidRequestException
     {
+
+        if (del.super_column != null)
+            validateColumnNames(metadata, (ByteBuffer)null, Arrays.asList(del.super_column));
+
         if (del.predicate != null)
         {
             validateSlicePredicate(metadata, del.super_column, del.predicate);
