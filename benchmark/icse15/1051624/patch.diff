diff --git a/lucene/solr/branches/branch-1.4/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec.java b/lucene/solr/branches/branch-1.4/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec.java
index ec10256d..bddf74cb 100644
--- a/lucene/solr/branches/branch-1.4/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec.java
+++ b/lucene/solr/branches/branch-1.4/src/solrj/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec.java
@@ -129,7 +129,7 @@ public List readIterator(FastInputStream fis) throws IOException {
 
       private List readOuterMostDocIterator(FastInputStream fis) throws IOException {
         NamedList params = (NamedList) namedList[0].getVal(0);
-        updateRequest.setParams(namedListToSolrParams(params));
+        updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));
         if (handler == null) return super.readIterator(fis);
         while (true) {
           Object o = readVal(fis);
@@ -208,17 +208,6 @@ private NamedList solrParamsToNamedList(SolrParams params) {
     return nl;
   }
 
-  private ModifiableSolrParams namedListToSolrParams(NamedList nl) {
-    ModifiableSolrParams solrParams = new ModifiableSolrParams();
-    for (int i = 0; i < nl.size(); i++) {
-      List<String> l = (List) nl.getVal(i);
-      if (l != null)
-        solrParams.add(nl.getName(i),
-                (String[]) l.toArray(new String[l.size()]));
-    }
-    return solrParams;
-  }
-
   public static interface StreamingDocumentHandler {
     public void document(SolrInputDocument document, UpdateRequest req);
   }
diff --git a/lucene/solr/branches/branch-1.4/src/test/org/apache/solr/client/solrj/embedded/SolrExampleBinaryTest.java b/lucene/solr/branches/branch-1.4/src/test/org/apache/solr/client/solrj/embedded/SolrExampleBinaryTest.java
index e69de29b..2eeece70 100644
--- a/lucene/solr/branches/branch-1.4/src/test/org/apache/solr/client/solrj/embedded/SolrExampleBinaryTest.java
+++ b/lucene/solr/branches/branch-1.4/src/test/org/apache/solr/client/solrj/embedded/SolrExampleBinaryTest.java
@@ -0,0 +1,55 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.solr.client.solrj.embedded;
+
+import org.apache.solr.client.solrj.SolrExampleTests;
+import org.apache.solr.client.solrj.SolrServer;
+import org.apache.solr.client.solrj.impl.BinaryRequestWriter;
+import org.apache.solr.client.solrj.impl.BinaryResponseParser;
+import org.apache.solr.client.solrj.impl.CommonsHttpSolrServer;
+import org.apache.solr.client.solrj.impl.StreamingUpdateSolrServer;
+import org.junit.BeforeClass;
+
+
+/**
+ * A subclass of SolrExampleTests that explicitly uses the binary 
+ * codec for communication. 
+ */
+public class SolrExampleBinaryTest extends SolrExampleJettyTest {
+  @Override
+  public SolrServer createNewSolrServer()
+  {
+    try {
+      // setup the server...
+      String url = "http://localhost:"+port+context;
+      CommonsHttpSolrServer s = new CommonsHttpSolrServer( url );
+      s.setConnectionTimeout(100); // 1/10th sec
+      s.setDefaultMaxConnectionsPerHost(100);
+      s.setMaxTotalConnections(100);
+
+      // setup binary mode
+      s.setParser(new BinaryResponseParser());
+      s.setRequestWriter(new BinaryRequestWriter());
+
+      return s;
+    }
+    catch( Exception ex ) {
+      throw new RuntimeException( ex );
+    }
+  }
+}
