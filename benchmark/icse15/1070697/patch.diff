diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
index 5a4dca69..9300ed3e 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/sql/conn/LanguageConnectionContext.java
@@ -22,6 +22,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.iapi.sql.conn;
 
 import org.apache.derby.iapi.services.context.Context;
+import org.apache.derby.iapi.services.io.FormatableBitSet;
 import org.apache.derby.iapi.db.Database;
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.sql.compile.CompilerContext;
@@ -1200,4 +1201,20 @@ public String getCurrentRoleIdDelimited(Activation a)
 	 */
     public  Object    getLastQueryTree();
 
+
+    /**
+     * Get the referenced column map for a table
+     *
+     * @return the map
+     */
+    public FormatableBitSet getReferencedColumnMap(TableDescriptor td);
+
+    /**
+     * Set the referenced column map for a table
+     *
+     * @param td the table descriptor
+     * @param map the map
+     */
+    public void setReferencedColumnMap(TableDescriptor td,
+                                       FormatableBitSet map);
 }
diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java
index cd1c180a..03d76d3e 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/sql/dictionary/TableDescriptor.java
@@ -24,7 +24,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.util.Enumeration;
 import java.util.Iterator;
 import java.util.List;
-import java.util.WeakHashMap;
+import java.util.Map;
 
 import org.apache.derby.catalog.Dependable;
 import org.apache.derby.catalog.DependableFinder;
@@ -33,10 +33,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.io.FormatableBitSet;
 import org.apache.derby.iapi.services.io.StoredFormatIds;
 import org.apache.derby.iapi.services.sanity.SanityManager;
+import org.apache.derby.iapi.services.context.ContextService;
 import org.apache.derby.iapi.sql.StatementType;
 import org.apache.derby.iapi.sql.depend.Provider;
 import org.apache.derby.iapi.sql.execute.ExecRow;
 import org.apache.derby.iapi.types.DataValueDescriptor;
+import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
 
 /**
  * This class represents a table descriptor. The external interface to this
@@ -114,37 +116,38 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private	GenericDescriptorList	triggerDescriptorList;
 	ViewDescriptor					viewDescriptor;
 
-	/**
-	 * referencedColumnMap is thread local (since DERBY-2861)
-	 *
-	 * It contains a weak hash map keyed by the the TableDescriptor
-	 * and the value is the actual referencedColumnMap bitmap.  So,
-	 * each thread has a weak hash map it uses to find the appropriate
-	 * referencedColumnMap for 'this' TableDescriptor.
-	 *
-	 * Since the hash map is weak, when the TableDescriptor is no
-	 * longer referenced the hash entry can be garbage collected (it
-	 * is the *key* of a weak hash map that is weak, not the value).
-	 */
-	private static ThreadLocal referencedColumnMap = new ThreadLocal() {
-			protected Object initialValue() {
-				// Key: TableDescriptor
-				// Value: FormatableBitSet
-				return new WeakHashMap();
+	private FormatableBitSet referencedColumnMapGet() {
+
+        LanguageConnectionContext lcc =
+            (LanguageConnectionContext)ContextService.getContextOrNull(
+                LanguageConnectionContext.CONTEXT_ID);
+
+        if (SanityManager.DEBUG) {
+            SanityManager.ASSERT(lcc != null);
 			}
-		};
 
-	private FormatableBitSet referencedColumnMapGet() {
-		WeakHashMap map = (WeakHashMap)(referencedColumnMap.get());
+        return lcc.getReferencedColumnMap(this);
 
-		return (FormatableBitSet) (map.get(this));
 	}
 
 	private void referencedColumnMapPut
 		(FormatableBitSet newReferencedColumnMap) {
 
-		WeakHashMap map = (WeakHashMap)(referencedColumnMap.get());
-		map.put(this, newReferencedColumnMap);
+        LanguageConnectionContext lcc =
+            (LanguageConnectionContext)ContextService.getContextOrNull(
+                LanguageConnectionContext.CONTEXT_ID);
+
+        if (SanityManager.DEBUG) {
+            SanityManager.ASSERT(lcc != null || newReferencedColumnMap == null);
+        }
+
+        // This method is called with a null argument at database
+        // creation time when there is no lcc, cf stack trace in the
+        // JIRA for DERBY-4895, we can safely ignore that, as there
+        // exists no referencedColumnMap yet.
+        if (lcc != null) {
+            lcc.setReferencedColumnMap(this, newReferencedColumnMap);
+        }
 	}
 
 	/** A list of statistics pertaining to this table-- 
diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
index 6a0b6c15..15f3a36a 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
@@ -37,6 +37,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
 import org.apache.derby.iapi.services.loader.GeneratedClass;
 import org.apache.derby.iapi.services.cache.Cacheable;
+import org.apache.derby.iapi.services.io.FormatableBitSet;
 import org.apache.derby.iapi.db.Database;
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.sql.compile.CompilerContext;
@@ -82,6 +83,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.util.List;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.WeakHashMap;
 import java.util.Iterator;
 import java.util.Map;
 
@@ -138,6 +140,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
     private Object lastQueryTree; // for debugging
     
+    private WeakHashMap referencedColumnMap;
+
 	/**
 	The transaction to use within this language connection context.  It may
 	be more appropriate to have it in a separate context (LanguageTransactionContext?).
@@ -346,6 +350,7 @@ public void initialize() throws StandardException
 
 
 		setDefaultSchema(initDefaultSchemaDescriptor());
+        referencedColumnMap = new WeakHashMap();
 	}
 
 	/**
@@ -719,6 +724,7 @@ public void resetFromPool()
 
 		// Reset the current role
 		getCurrentSQLSessionContext().setRole(null);
+		referencedColumnMap = new WeakHashMap();
 	}
 
     // debug methods
@@ -3550,4 +3556,13 @@ public SQLSessionContext createSQLSessionContext() {
 			getInitialDefaultSchemaDescriptor());
 	}
 
+
+    public FormatableBitSet getReferencedColumnMap(TableDescriptor td) {
+        return (FormatableBitSet)referencedColumnMap.get(td);
+    }
+
+    public void setReferencedColumnMap(TableDescriptor td,
+                                       FormatableBitSet map) {
+        referencedColumnMap.put(td, map);
+    }
 }
