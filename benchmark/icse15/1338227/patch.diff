diff --git a/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java b/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
index 0e716b10..73c9b1f2 100644
--- a/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
+++ b/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java
@@ -272,6 +272,7 @@ public void process(ResponseBuilder rb) throws IOException
                 .setField(searcher.getSchema().getField(field))
                 .setGroupSort(groupingSpec.getGroupSort())
                 .setTopNGroups(cmd.getOffset() + cmd.getLen())
+                .setIncludeGroupCount(groupingSpec.isIncludeGroupCount())
                 .build()
             );
           }
@@ -313,7 +314,6 @@ public void process(ResponseBuilder rb) throws IOException
                     .setMaxDocPerGroup(groupingSpec.getGroupOffset() + groupingSpec.getGroupLimit())
                     .setNeedScores(needScores)
                     .setNeedMaxScore(needScores)
-                    .setNeedGroupCount(groupingSpec.isIncludeGroupCount())
                     .build()
             );
           }
diff --git a/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/handler/component/ResponseBuilder.java b/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/handler/component/ResponseBuilder.java
index 0e81eba8..4089a4f3 100644
--- a/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/handler/component/ResponseBuilder.java
+++ b/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/handler/component/ResponseBuilder.java
@@ -154,6 +154,7 @@ public void addRequest(SearchComponent me, ShardRequest sreq) {
 
   // Context fields for grouping
   public final Map<String, Collection<SearchGroup<String>>> mergedSearchGroups = new HashMap<String, Collection<SearchGroup<String>>>();
+  public final Map<String, Integer> mergedGroupCounts = new HashMap<String, Integer>();
   public final Map<String, Map<SearchGroup<String>, Set<String>>> searchGroupToShards = new HashMap<String, Map<SearchGroup<String>, Set<String>>>();
   public final Map<String, TopGroups<String>> mergedTopGroups = new HashMap<String, TopGroups<String>>();
   public final Map<String, QueryCommandResult> mergedQueryCommandResults = new HashMap<String, QueryCommandResult>();
diff --git a/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/Pair.java b/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/Pair.java
index e69de29b..85af3720 100644
--- a/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/Pair.java
+++ b/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/Pair.java
@@ -0,0 +1,42 @@
+package org.apache.solr.search.grouping.distributed.command;
+
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * A simple data structure to hold a pair of typed objects.
+ *
+ * @lucene.experimental
+ */
+public class Pair<A, B> {
+
+  private final A a;
+  private final B b;
+
+  public Pair(A a, B b) {
+    this.a = a;
+    this.b = b;
+  }
+
+  public A getA() {
+    return a;
+  }
+
+  public B getB() {
+    return b;
+  }
+}
diff --git a/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/SearchGroupsFieldCommand.java b/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/SearchGroupsFieldCommand.java
index 57bbd0d9..458afcad 100644
--- a/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/SearchGroupsFieldCommand.java
+++ b/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/SearchGroupsFieldCommand.java
@@ -20,26 +20,25 @@
 import org.apache.lucene.search.Collector;
 import org.apache.lucene.search.Sort;
 import org.apache.lucene.search.grouping.SearchGroup;
+import org.apache.lucene.search.grouping.TermAllGroupsCollector;
 import org.apache.lucene.search.grouping.TermFirstPassGroupingCollector;
 import org.apache.solr.schema.SchemaField;
 import org.apache.solr.search.grouping.Command;
 
 import java.io.IOException;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
+import java.util.*;
 
 /**
- *
+ * Creates all the collectors needed for the first phase and how to handle the results.
  */
-public class SearchGroupsFieldCommand implements Command<Collection<SearchGroup<String>>> {
+public class SearchGroupsFieldCommand implements Command<Pair<Integer, Collection<SearchGroup<String>>>> {
 
   public static class Builder {
 
     private SchemaField field;
     private Sort groupSort;
     private Integer topNGroups;
+    private boolean includeGroupCount = false;
 
     public Builder setField(SchemaField field) {
       this.field = field;
@@ -56,12 +55,17 @@ public Builder setTopNGroups(int topNGroups) {
       return this;
     }
 
+    public Builder setIncludeGroupCount(boolean includeGroupCount) {
+      this.includeGroupCount = includeGroupCount;
+      return this;
+    }
+
     public SearchGroupsFieldCommand build() {
       if (field == null || groupSort == null || topNGroups == null) {
         throw new IllegalStateException("All fields must be set");
       }
 
-      return new SearchGroupsFieldCommand(field, groupSort, topNGroups);
+      return new SearchGroupsFieldCommand(field, groupSort, topNGroups, includeGroupCount);
     }
 
   }
@@ -69,30 +73,45 @@ public SearchGroupsFieldCommand build() {
   private final SchemaField field;
   private final Sort groupSort;
   private final int topNGroups;
+  private final boolean includeGroupCount;
 
   private TermFirstPassGroupingCollector firstPassGroupingCollector;
+  private TermAllGroupsCollector allGroupsCollector;
 
-  private SearchGroupsFieldCommand(SchemaField field, Sort groupSort, int topNGroups) {
+  private SearchGroupsFieldCommand(SchemaField field, Sort groupSort, int topNGroups, boolean includeGroupCount) {
     this.field = field;
     this.groupSort = groupSort;
     this.topNGroups = topNGroups;
+    this.includeGroupCount = includeGroupCount;
   }
 
   public List<Collector> create() throws IOException {
+    List<Collector> collectors = new ArrayList<Collector>();
     if (topNGroups > 0) {
       firstPassGroupingCollector = new TermFirstPassGroupingCollector(field.getName(), groupSort, topNGroups);
-      return Arrays.asList((Collector) firstPassGroupingCollector);
-    } else {
-      return Collections.emptyList();
+      collectors.add(firstPassGroupingCollector);
+    }
+    if (includeGroupCount) {
+      allGroupsCollector = new TermAllGroupsCollector(field.getName());
+      collectors.add(allGroupsCollector);
     }
+    return collectors;
   }
 
-  public Collection<SearchGroup<String>> result() {
+  public Pair<Integer, Collection<SearchGroup<String>>> result() {
+    final Collection<SearchGroup<String>> topGroups;
     if (topNGroups > 0) {
-      return firstPassGroupingCollector.getTopGroups(0, true);
+      topGroups = firstPassGroupingCollector.getTopGroups(0, true);
+    } else {
+      topGroups = Collections.emptyList();
+    }
+    final Integer groupCount;
+    if (includeGroupCount) {
+      groupCount = allGroupsCollector.getGroupCount();
     } else {
-      return Collections.emptyList();
+      groupCount = null;
     }
+    return new Pair<Integer, Collection<SearchGroup<String>>>(groupCount, topGroups);
   }
 
   public Sort getSortWithinGroup() {
diff --git a/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/TopGroupsFieldCommand.java b/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/TopGroupsFieldCommand.java
index 2f3dbcef..512c6af0 100644
--- a/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/TopGroupsFieldCommand.java
+++ b/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/command/TopGroupsFieldCommand.java
@@ -30,7 +30,7 @@
 import java.util.List;
 
 /**
- *
+ * Defines all collectors for retrieving the second phase and how to handle the collector result.
  */
 public class TopGroupsFieldCommand implements Command<TopGroups<String>> {
 
@@ -43,7 +43,6 @@
     private Integer maxDocPerGroup;
     private boolean needScores = false;
     private boolean needMaxScore = false;
-    private boolean needGroupCount = false;
 
     public Builder setField(SchemaField field) {
       this.field = field;
@@ -80,18 +79,13 @@ public Builder setNeedMaxScore(Boolean needMaxScore) {
       return this;
     }
 
-    public Builder setNeedGroupCount(Boolean needGroupCount) {
-      this.needGroupCount = needGroupCount;
-      return this;
-    }
-
     public TopGroupsFieldCommand build() {
       if (field == null || groupSort == null ||  sortWithinGroup == null || firstPhaseGroups == null ||
           maxDocPerGroup == null) {
         throw new IllegalStateException("All required fields must be set");
       }
 
-      return new TopGroupsFieldCommand(field, groupSort, sortWithinGroup, firstPhaseGroups, maxDocPerGroup, needScores, needMaxScore, needGroupCount);
+      return new TopGroupsFieldCommand(field, groupSort, sortWithinGroup, firstPhaseGroups, maxDocPerGroup, needScores, needMaxScore);
     }
 
   }
@@ -103,10 +97,7 @@ public TopGroupsFieldCommand build() {
   private final int maxDocPerGroup;
   private final boolean needScores;
   private final boolean needMaxScore;
-  private final boolean needGroupCount;
-
   private TermSecondPassGroupingCollector secondPassCollector;
-  private TermAllGroupsCollector allGroupsCollector;
 
   private TopGroupsFieldCommand(SchemaField field,
                                 Sort groupSort,
@@ -114,8 +105,7 @@ private TopGroupsFieldCommand(SchemaField field,
                                 Collection<SearchGroup<String>> firstPhaseGroups,
                                 int maxDocPerGroup,
                                 boolean needScores,
-                                boolean needMaxScore,
-                                boolean needGroupCount) {
+                                boolean needMaxScore) {
     this.field = field;
     this.groupSort = groupSort;
     this.sortWithinGroup = sortWithinGroup;
@@ -123,7 +113,6 @@ private TopGroupsFieldCommand(SchemaField field,
     this.maxDocPerGroup = maxDocPerGroup;
     this.needScores = needScores;
     this.needMaxScore = needMaxScore;
-    this.needGroupCount = needGroupCount;
   }
 
   public List<Collector> create() throws IOException {
@@ -136,11 +125,6 @@ private TopGroupsFieldCommand(SchemaField field,
           field.getName(), firstPhaseGroups, groupSort, sortWithinGroup, maxDocPerGroup, needScores, needMaxScore, true
     );
     collectors.add(secondPassCollector);
-    if (!needGroupCount) {
-      return collectors;
-    }
-    allGroupsCollector = new TermAllGroupsCollector(field.getName());
-    collectors.add(allGroupsCollector);
     return collectors;
   }
 
@@ -150,11 +134,7 @@ private TopGroupsFieldCommand(SchemaField field,
       return new TopGroups<String>(groupSort.getSort(), sortWithinGroup.getSort(), 0, 0, new GroupDocs[0]);
     }
 
-    TopGroups<String> result = secondPassCollector.getTopGroups(0);
-    if (allGroupsCollector != null) {
-      result = new TopGroups<String>(result, allGroupsCollector.getGroupCount());
-    }
-    return result;
+    return secondPassCollector.getTopGroups(0);
   }
 
   public String getKey() {
diff --git a/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/SearchGroupShardResponseProcessor.java b/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/SearchGroupShardResponseProcessor.java
index 27184d9d..cb05e3ff 100644
--- a/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/SearchGroupShardResponseProcessor.java
+++ b/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/SearchGroupShardResponseProcessor.java
@@ -26,6 +26,7 @@
 import org.apache.solr.handler.component.ShardResponse;
 import org.apache.solr.search.SortSpec;
 import org.apache.solr.search.grouping.distributed.ShardResponseProcessor;
+import org.apache.solr.search.grouping.distributed.command.Pair;
 import org.apache.solr.search.grouping.distributed.shardresultserializer.SearchGroupsResultTransformer;
 
 import java.io.IOException;
@@ -62,9 +63,17 @@ public void process(ResponseBuilder rb, ShardRequest shardRequest) {
         maxElapsedTime = (int) Math.max(maxElapsedTime, srsp.getSolrResponse().getElapsedTime());
         @SuppressWarnings("unchecked")
         NamedList<NamedList> firstPhaseResult = (NamedList<NamedList>) srsp.getSolrResponse().getResponse().get("firstPhase");
-        Map<String, Collection<SearchGroup<String>>> result = serializer.transformToNative(firstPhaseResult, groupSort, null, srsp.getShard());
+        Map<String, Pair<Integer, Collection<SearchGroup<String>>>> result = serializer.transformToNative(firstPhaseResult, groupSort, null, srsp.getShard());
         for (String field : commandSearchGroups.keySet()) {
-          Collection<SearchGroup<String>> searchGroups = result.get(field);
+          Pair<Integer, Collection<SearchGroup<String>>> firstPhaseCommandResult = result.get(field);
+          Integer groupCount = firstPhaseCommandResult.getA();
+          if (groupCount != null) {
+            Integer existingGroupCount = rb.mergedGroupCounts.get(field);
+            // Assuming groups don't cross shard boundary...
+            rb.mergedGroupCounts.put(field, existingGroupCount != null ? existingGroupCount + groupCount : groupCount);
+          }
+
+          Collection<SearchGroup<String>> searchGroups = firstPhaseCommandResult.getB();
           if (searchGroups == null) {
             continue;
           }
diff --git a/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer.java b/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer.java
index c7c9a91d..27e5f878 100644
--- a/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer.java
+++ b/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer.java
@@ -25,6 +25,7 @@
 import org.apache.solr.schema.SchemaField;
 import org.apache.solr.search.SolrIndexSearcher;
 import org.apache.solr.search.grouping.Command;
+import org.apache.solr.search.grouping.distributed.command.Pair;
 import org.apache.solr.search.grouping.distributed.command.SearchGroupsFieldCommand;
 
 import java.io.IOException;
@@ -33,7 +34,7 @@
 /**
  * Implementation for transforming {@link SearchGroup} into a {@link NamedList} structure and visa versa.
  */
-public class SearchGroupsResultTransformer implements ShardResultTransformer<List<Command>, Map<String, Collection<SearchGroup<String>>>> {
+public class SearchGroupsResultTransformer implements ShardResultTransformer<List<Command>, Map<String, Pair<Integer, Collection<SearchGroup<String>>>>> {
 
   private final SolrIndexSearcher searcher;
 
@@ -47,17 +48,20 @@ public SearchGroupsResultTransformer(SolrIndexSearcher searcher) {
   public NamedList transform(List<Command> data) throws IOException {
     NamedList<NamedList> result = new NamedList<NamedList>();
     for (Command command : data) {
-      NamedList commandResult;
+      final NamedList<Object> commandResult = new NamedList<Object>();
       if (SearchGroupsFieldCommand.class.isInstance(command)) {
         SearchGroupsFieldCommand fieldCommand = (SearchGroupsFieldCommand) command;
-        Collection<SearchGroup<String>> searchGroups = fieldCommand.result();
-        if (searchGroups == null) {
-          continue;
+        Pair<Integer, Collection<SearchGroup<String>>> pair = fieldCommand.result();
+        Integer groupedCount = pair.getA();
+        Collection<SearchGroup<String>> searchGroups = pair.getB();
+        if (searchGroups != null) {
+          commandResult.add("topGroups", serializeSearchGroup(searchGroups, fieldCommand.getGroupSort()));
+        }
+        if (groupedCount != null) {
+          commandResult.add("groupCount", groupedCount);
         }
-
-        commandResult = serializeSearchGroup(searchGroups, fieldCommand.getGroupSort());
       } else {
-        commandResult = null;
+        continue;
       }
 
       result.add(command.getKey(), commandResult);
@@ -68,20 +72,24 @@ public NamedList transform(List<Command> data) throws IOException {
   /**
    * {@inheritDoc}
    */
-  public Map<String, Collection<SearchGroup<String>>> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) throws IOException {
-    Map<String, Collection<SearchGroup<String>>> result = new HashMap<String, Collection<SearchGroup<String>>>();
+  public Map<String, Pair<Integer, Collection<SearchGroup<String>>>> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) throws IOException {
+    Map<String, Pair<Integer, Collection<SearchGroup<String>>>> result = new HashMap<String, Pair<Integer, Collection<SearchGroup<String>>>>();
     for (Map.Entry<String, NamedList> command : shardResponse) {
       List<SearchGroup<String>> searchGroups = new ArrayList<SearchGroup<String>>();
+      NamedList topGroupsAndGroupCount = command.getValue();
       @SuppressWarnings("unchecked")
-      NamedList<List<Comparable>> rawSearchGroups = command.getValue();
+      NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get("topGroups");
+      if (rawSearchGroups != null) {
       for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){
         SearchGroup<String> searchGroup = new SearchGroup<String>();
         searchGroup.groupValue = rawSearchGroup.getKey() != null ? rawSearchGroup.getKey() : null;
         searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);
         searchGroups.add(searchGroup);
       }
+      }
 
-      result.put(command.getKey(), searchGroups);
+      Integer groupCount = (Integer) topGroupsAndGroupCount.get("groupCount");
+      result.put(command.getKey(), new Pair<Integer, Collection<SearchGroup<String>>>(groupCount, searchGroups));
     }
     return result;
   }
diff --git a/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer.java b/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer.java
index e484b087..d9d5d1e1 100644
--- a/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer.java
+++ b/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer.java
@@ -113,10 +113,9 @@ public NamedList transform(List<Command> data) throws IOException {
       }
 
       Integer totalHitCount = (Integer) commandResult.get("totalHitCount");
-      Integer totalGroupCount = (Integer) commandResult.get("totalGroupCount");
 
       List<GroupDocs<String>> groupDocs = new ArrayList<GroupDocs<String>>();
-      for (int i = totalGroupCount == null ? 2 : 3; i < commandResult.size(); i++) {
+      for (int i = 2; i < commandResult.size(); i++) {
         String groupValue = commandResult.getName(i);
         @SuppressWarnings("unchecked")
         NamedList<Object> groupResult = (NamedList<Object>) commandResult.getVal(i);
@@ -149,9 +148,6 @@ public NamedList transform(List<Command> data) throws IOException {
       TopGroups<String> topGroups = new TopGroups<String>(
         groupSort.getSort(), sortWithinGroup.getSort(), totalHitCount, totalGroupedHitCount, groupDocsArr
       );
-      if (totalGroupCount != null) {
-        topGroups = new TopGroups<String>(topGroups, totalGroupCount);
-      }
 
       result.put(key, topGroups);
     }
diff --git a/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer.java b/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer.java
index f22bef24..cebb22ca 100644
--- a/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer.java
+++ b/lucene/dev/branches/lucene_solr_3_6/solr/core/src/java/org/apache/solr/search/grouping/endresulttransformer/GroupedEndResultTransformer.java
@@ -56,8 +56,9 @@ public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSou
         TopGroups<String> topGroups = (TopGroups<String>) value;
         NamedList<Object> command = new SimpleOrderedMap<Object>();
         command.add("matches", rb.totalHitCount);
-        if (topGroups.totalGroupCount != null) {
-          command.add("ngroups", topGroups.totalGroupCount);
+        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());
+        if (totalGroupCount != null) {
+          command.add("ngroups", totalGroupCount);
         }
 
         List<NamedList> groups = new ArrayList<NamedList>();
diff --git a/lucene/dev/branches/lucene_solr_3_6/solr/core/src/test/org/apache/solr/TestDistributedGrouping.java b/lucene/dev/branches/lucene_solr_3_6/solr/core/src/test/org/apache/solr/TestDistributedGrouping.java
index eff7f10f..f30c510e 100644
--- a/lucene/dev/branches/lucene_solr_3_6/solr/core/src/test/org/apache/solr/TestDistributedGrouping.java
+++ b/lucene/dev/branches/lucene_solr_3_6/solr/core/src/test/org/apache/solr/TestDistributedGrouping.java
@@ -172,11 +172,16 @@ public void doTest() throws Exception {
     query("q", "*:*", "fq", s2 + ":a", "rows", 100, "fl", "id," + s1, "group", "true", "group.field", s1, "group.limit", 10, "sort", s1 + " asc, id asc", "group.truncate", "true");
     query("q", "*:*", "fq", s2 + ":a", "rows", 100, "fl", "id," + s1, "group", "true", "group.field", s1, "group.limit", 10, "sort", s1 + " asc, id asc", "group.truncate", "true", "facet", "true", "facet.field", t1);
 
+    // SOLR-3316
     query("q", "*:*", "fq", s2 + ":a", "rows", 0, "fl", "id," + s1, "group", "true", "group.field", s1, "group.limit", 10, "sort", s1 + " asc, id asc", "facet", "true", "facet.field", t1);
     query("q", "*:*", "fq", s2 + ":a", "rows", 0, "fl", "id," + s1, "group", "true", "group.field", s1, "group.limit", 10, "sort", s1 + " asc, id asc", "group.truncate", "true", "facet", "true", "facet.field", t1);
 
+    // SOLR-3436
+    query("q", "*:*", "fq", s1 + ":a", "fl", "id," + s1, "group", "true", "group.field", s1, "sort", s1 + " asc, id asc", "group.ngroups", "true");
+    query("q", "*:*", "fq", s1 + ":a", "rows", 0, "fl", "id," + s1, "group", "true", "group.field", s1, "sort", s1 + " asc, id asc", "group.ngroups", "true");
+
     ModifiableSolrParams params = new ModifiableSolrParams();
-    Object[] q =  {"q", "*:*", "fq", s2 + ":a", "rows", 1, "fl", "id," + s1, "group", "true", "group.field", s1, "group.limit", 10};
+    Object[] q =  {"q", "*:*", "fq", s2 + ":a", "rows", 1, "fl", "id," + s1, "group", "true", "group.field", s1, "group.limit", 10, "group.ngroups", "true"};
 
     for (int i = 0; i < q.length; i += 2) {
       params.add(q[i].toString(), q[i + 1].toString());
@@ -190,7 +195,9 @@ public void doTest() throws Exception {
     NamedList nl = (NamedList<?>) rsp.getResponse().get("grouped");
     nl = (NamedList<?>) nl.getVal(0);
     int matches = (Integer) nl.getVal(0);
+    int groupCount = (Integer) nl.get("ngroups");
     assertEquals(100 * clients.size(), matches);
+    assertEquals(clients.size(), groupCount);
 
     // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur
     simpleQuery("q", "*:*", "rows", 100, "fl", "id," + s1, "group", "true", "group.field", s1, "group.limit", 10, "sort", s1 + " desc", "group.sort", "score desc"); // SOLR-2955
