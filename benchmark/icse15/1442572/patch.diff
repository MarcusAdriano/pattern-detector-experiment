diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
index 13115faf..6bb95215 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Activator.java
@@ -75,8 +75,8 @@ private static synchronized void checkInstance() {
 	private volatile RegionDigraph regionDigraph;
 	private volatile Resolver resolver;
 	private ServiceTracker<?,?> serviceTracker;
-	// @GuardedBy("this")
-	private Subsystems subsystems;
+
+	private volatile Subsystems subsystems;
 	
 	private final Collection<ServiceRegistration<?>> registrations = new HashSet<ServiceRegistration<?>>();
 	private final Collection<Repository> repositories = Collections.synchronizedSet(new HashSet<Repository>());
@@ -110,12 +110,7 @@ public Resolver getResolver() {
 		return resolver;
 	}
 	
-	/* Synchronization was introduced here to prevent conflicts between the
-	 * BundleEventHook and the activation process. The activation process
-	 * must complete the initialization of the root subsystem in order to
-	 * fully initialize the Subsystems object.
-	 */
-	public synchronized Subsystems getSubsystems() {
+	public Subsystems getSubsystems() {
 		return subsystems;
 	}
 	
@@ -154,7 +149,6 @@ private void activate() {
 		synchronized (Activator.class) {
 			instance = Activator.this;
 		}
-		registerBundleEventHook();
 		try {
 			subsystems = new Subsystems();
 		}
@@ -164,11 +158,12 @@ private void activate() {
 		catch (Exception e) {
 			throw new SubsystemException(e);
 		}
+		registerBundleEventHook();
 		registrations.add(bundleContext.registerService(ResolverHookFactory.class, new SubsystemResolverHookFactory(subsystems), null));
 		registrar = new SubsystemServiceRegistrar(bundleContext);
 		BasicSubsystem root = subsystems.getRootSubsystem();
-		root.start();
 		bundleEventHook.activate();
+		root.start();
 	}
 	
 	private void deactivate() {
diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java
index f70ac221..a5ff580f 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java
@@ -33,7 +33,6 @@
 	
 	private boolean active;
 	private List<BundleEvent> events;
-	private volatile Subsystems subsystems;
 	
 	public BundleEventHook() {
 		activator = Activator.getInstance();
@@ -78,13 +77,7 @@ synchronized void processPendingEvents() {
 	}
 	
 	private Subsystems getSubsystems() {
-		if (subsystems == null) {
-			synchronized (this) {
-				if (subsystems == null)
-					subsystems = activator.getSubsystems();
-			}
-		}
-		return subsystems;
+		return activator.getSubsystems();
 	}
 	
 	private void handleEvent(BundleEvent event) {
diff --git a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java
index dca778fd..5ccd668e 100644
--- a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java
+++ b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java
@@ -718,6 +718,17 @@ protected Subsystem getRootSubsystem() {
 		return getOsgiService(Subsystem.class);
 	}
 	
+	protected Subsystem getRootSubsystemInState(Subsystem.State state, long timeout) throws InterruptedException {
+		Subsystem root = getRootSubsystem();
+		long now = System.currentTimeMillis();
+		long then = now + timeout;
+		while (!root.getState().equals(state) && System.currentTimeMillis() < then)
+			Thread.sleep(100);
+		if (!root.getState().equals(state))
+			fail("Root subsystem never achieved state: " + state);
+		return root;
+	}
+	
 	protected Bundle getSystemBundle() {
 		return bundleContext.getBundle(Constants.SYSTEM_BUNDLE_LOCATION);
 	}
diff --git a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/UnmanagedBundleTest.java b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/UnmanagedBundleTest.java
index 0c5f83db..4f9141c8 100644
--- a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/UnmanagedBundleTest.java
+++ b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/UnmanagedBundleTest.java
@@ -26,6 +26,7 @@
 import org.junit.runner.RunWith;
 import org.ops4j.pax.exam.junit.MavenConfiguredJUnit4TestRunner;
 import org.osgi.framework.Bundle;
+import org.osgi.service.subsystem.Subsystem;
 
 /*
  * Contains a series of tests for unmanaged bundles. An unmanaged bundle is a
@@ -59,7 +60,7 @@ private static void createBundleA() throws IOException {
 	public void testInstallWhileImplBundleActive() throws Exception {
 		Bundle a = bundleContext.installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A));
 		try {
-			assertConstituent(getRootSubsystem(), BUNDLE_A);
+			assertConstituent(getRootSubsystemInState(Subsystem.State.ACTIVE, 5000L), BUNDLE_A);
 		}
 		finally {
 			uninstallSilently(a);
