diff --git a/db/derby/code/branches/10.3/java/build/org/apache/derbyBuild/propertyconfig.java b/db/derby/code/branches/10.3/java/build/org/apache/derbyBuild/propertyconfig.java
index 34e61355..697996f8 100644
--- a/db/derby/code/branches/10.3/java/build/org/apache/derbyBuild/propertyconfig.java
+++ b/db/derby/code/branches/10.3/java/build/org/apache/derbyBuild/propertyconfig.java
@@ -313,7 +313,7 @@ private static void process(Properties moduleList, String config,
 		FileOutputStream os = new FileOutputStream(outputfile);
 		try
 		{
-			outputProp.save(os, 
+			outputProp.store(os,
 							header.
 							concat("# config is ").concat(config).
 							concat(footer));
diff --git a/db/derby/code/branches/10.3/java/build/org/apache/derbyBuild/splitmessages.java b/db/derby/code/branches/10.3/java/build/org/apache/derbyBuild/splitmessages.java
index 99efdb85..e9222899 100644
--- a/db/derby/code/branches/10.3/java/build/org/apache/derbyBuild/splitmessages.java
+++ b/db/derby/code/branches/10.3/java/build/org/apache/derbyBuild/splitmessages.java
@@ -174,7 +174,7 @@ public static void main(String[] args) throws Exception {
 				new FileOutputStream(new File(dir, "m"+i+locale+".properties")), 16 * 1024);
 
             
-			c[i].save(fos, (String) null);
+			c[i].store(fos, (String) null);
 			fos.flush();
 			fos.close();
             
@@ -182,7 +182,7 @@ public static void main(String[] args) throws Exception {
 				// add duplicate english file as the base
 				fos = new BufferedOutputStream(
 					new FileOutputStream(new File(dir, "m"+i+".properties")), 16 * 1024);
-				c[i].save(fos, (String) null);
+				c[i].store(fos, (String) null);
 				fos.flush();
 				fos.close();
 			}
@@ -199,7 +199,7 @@ public static void main(String[] args) throws Exception {
             new FileOutputStream(new File(dir, clientPropsFileName)), 
             16 * 1024);
 
-        clientProps.save(clientOutStream, (String)null);
+        clientProps.store(clientOutStream, (String)null);
         clientOutStream.flush();
         clientOutStream.close();
         
@@ -210,7 +210,7 @@ public static void main(String[] args) throws Exception {
                 new FileOutputStream(new File(dir, "clientmessages.properties")), 
                 16 * 1024);
 
-            clientProps.save(clientOutStream, (String)null);
+            clientProps.store(clientOutStream, (String)null);
             clientOutStream.flush();
             clientOutStream.close();            
         }
diff --git a/db/derby/code/branches/10.3/java/client/org/apache/derby/client/am/CallableStatement.java b/db/derby/code/branches/10.3/java/client/org/apache/derby/client/am/CallableStatement.java
index 9bdc67b8..0b4f2440 100644
--- a/db/derby/code/branches/10.3/java/client/org/apache/derby/client/am/CallableStatement.java
+++ b/db/derby/code/branches/10.3/java/client/org/apache/derby/client/am/CallableStatement.java
@@ -408,6 +408,7 @@ public double getDouble(int parameterIndex) throws SQLException {
         }
     }
 
+    /** @deprecated */
     public java.math.BigDecimal getBigDecimal(int parameterIndex, int scale) throws SQLException, ArithmeticException {
         try
         {
diff --git a/db/derby/code/branches/10.3/java/client/org/apache/derby/client/am/PreparedStatement.java b/db/derby/code/branches/10.3/java/client/org/apache/derby/client/am/PreparedStatement.java
index db0b2183..40da6019 100644
--- a/db/derby/code/branches/10.3/java/client/org/apache/derby/client/am/PreparedStatement.java
+++ b/db/derby/code/branches/10.3/java/client/org/apache/derby/client/am/PreparedStatement.java
@@ -1190,6 +1190,7 @@ private void checkTypeForSetClob(int parameterIndex)
      * value
      * @param length the number of bytes in the stream
      * @exception SQLException throws feature not implemented.
+     * @deprecated
      */
     public void setUnicodeStream(int parameterIndex,
                                  java.io.InputStream x,
diff --git a/db/derby/code/branches/10.3/java/client/org/apache/derby/client/am/ResultSet.java b/db/derby/code/branches/10.3/java/client/org/apache/derby/client/am/ResultSet.java
index abdc5bd6..a0e80951 100644
--- a/db/derby/code/branches/10.3/java/client/org/apache/derby/client/am/ResultSet.java
+++ b/db/derby/code/branches/10.3/java/client/org/apache/derby/client/am/ResultSet.java
@@ -793,6 +793,7 @@ public double getDouble(int column) throws SQLException {
     }
 
     // Live life on the edge and run unsynchronized
+    /** @deprecated */
     public java.math.BigDecimal getBigDecimal(int column, int scale) throws SQLException {
         try
         {
@@ -1178,6 +1179,7 @@ public String getString(int column) throws SQLException {
      *
      * @param column the column to retrieve as a Unicode stream
      * @exception SQLException throws feature not implemented
+     * @deprecated
      */
     public java.io.InputStream getUnicodeStream(int column) throws SQLException {
         if (agent_.loggingEnabled()) {
@@ -1537,6 +1539,7 @@ public final double getDouble(String columnName) throws SQLException {
         }
     }
 
+    /** @deprecated */
     public final java.math.BigDecimal getBigDecimal(String columnName, int scale) throws SQLException {
         try
         {
@@ -1705,6 +1708,7 @@ public final String getString(String columnName) throws SQLException {
         }
     }
 
+    /** @deprecated */
     public final java.io.InputStream getUnicodeStream(String columnName) throws SQLException {
         try
         {
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement.java
index f620e71a..2f1fe055 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement.java
@@ -112,6 +112,7 @@ public final double getDouble(int parameterIndex)
         return getCallableStatement().getDouble( parameterIndex);
     }
 
+    /** @deprecated */
     public final BigDecimal getBigDecimal(int parameterIndex,
                                               int scale)
         throws SQLException
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java
index 15c4273f..fc37a4fd 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java
@@ -308,6 +308,7 @@ public final void setAsciiStream(int parameterIndex, InputStream x, int length)
      * UNICODE parameter value 
      * @param length the number of bytes in the stream 
 	 * @exception SQLException thrown on failure.
+     * @deprecated
      */
     public final void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException
     {
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/db/BasicDatabase.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/db/BasicDatabase.java
index 81b79858..6621d537 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/db/BasicDatabase.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/db/BasicDatabase.java
@@ -407,6 +407,7 @@ public Locale getLocale() {
 
 	/**
 		Return the UUID of this database.
+        @deprecated
 	*/
 	public final UUID getId() {
 		return myUUID;
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement20.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement20.java
index d3aaa9f4..24db5764 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement20.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/EmbedCallableStatement20.java
@@ -1058,6 +1058,7 @@ public final void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLExce
     /**
 	 * @see CallableStatement#getBigDecimal
      * @exception SQLException NoOutputParameters thrown.
+     * @deprecated
      */
     public final BigDecimal getBigDecimal(int parameterIndex, int scale) throws SQLException
 	{
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
index dcb98dd4..e8e48657 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
@@ -609,6 +609,7 @@ public final void setAsciiStream(int parameterIndex, InputStream x, int length)
      * UNICODE parameter value
      * @param length the number of bytes in the stream
 	 * @exception SQLException thrown on failure.
+     * @deprecated
      */
     public void setUnicodeStream(int parameterIndex, InputStream x, int length)
 	    throws SQLException
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet20.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet20.java
index 3247caf6..aeb79fc9 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet20.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet20.java
@@ -93,6 +93,7 @@ public EmbedResultSet20(org.apache.derby.impl.jdbc.EmbedConnection conn,
 		 * @param scale the number of digits to the right of the decimal
 		 * @return the column value; if the value is SQL NULL, the result is null
 		 * @exception SQLException thrown on failure.
+         * @deprecated
 		 */
 		public final BigDecimal getBigDecimal(int columnIndex, int scale)
 			throws SQLException {
@@ -128,6 +129,7 @@ public final BigDecimal getBigDecimal(int columnIndex)
 		 * @param scale the number of digits to the right of the decimal
 		 * @return the column value; if the value is SQL NULL, the result is null
 		 * @exception SQLException thrown on failure.
+         * @deprecated
 		 */
 		public final BigDecimal getBigDecimal(String columnName, int scale)
 			throws SQLException {
@@ -141,6 +143,7 @@ public final BigDecimal getBigDecimal(String columnName, int scale)
      *
 		Deprecated in JDBC 2.0, not supported by JCC.
 	 * @exception SQLException thrown on failure.
+     * @deprecated
      */
     public final java.io.InputStream getUnicodeStream(int columnIndex) throws SQLException {
 		throw Util.notImplemented("getUnicodeStream");
@@ -148,6 +151,7 @@ public final BigDecimal getBigDecimal(String columnName, int scale)
     /**
 		Deprecated in JDBC 2.0, not supported by JCC.
 	 * @exception SQLException thrown on failure.
+     * @deprecated
      */
     public final java.io.InputStream getUnicodeStream(String columnName) throws SQLException {
 		throw Util.notImplemented("getUnicodeStream");
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/vti/UpdatableVTITemplate.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/vti/UpdatableVTITemplate.java
index ca94f00a..252702fa 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/vti/UpdatableVTITemplate.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/vti/UpdatableVTITemplate.java
@@ -468,6 +468,7 @@ public void setAsciiStream(int parameterIndex, InputStream x, int length) throws
 	 * @see java.sql.PreparedStatement
 	 *
  	 * @exception SQLException on unexpected JDBC error
+     * @deprecated
 	 */
 	public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException
 	{
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/vti/VTITemplate.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/vti/VTITemplate.java
index ea13104b..f395785b 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/vti/VTITemplate.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/vti/VTITemplate.java
@@ -151,6 +151,7 @@ public double getDouble(int columnIndex) throws SQLException {
 	 * @see java.sql.ResultSet
 	 *
  	 * @exception SQLException on unexpected JDBC error
+     * @deprecated
 	 */
     public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException {
         throw new SQLException("getBigDecimal");
@@ -205,6 +206,7 @@ public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException
 	 * @see java.sql.ResultSet
 	 *
  	 * @exception SQLException on unexpected JDBC error
+     * @deprecated
 	 */
     public java.io.InputStream getUnicodeStream(int columnIndex) throws SQLException {
         throw new SQLException("getUnicodeStream");
@@ -296,6 +298,7 @@ public double getDouble(String columnName) throws SQLException {
 	 * @see java.sql.ResultSet
 	 *
  	 * @exception SQLException on unexpected JDBC error
+     * @deprecated
 	 */
     public BigDecimal getBigDecimal(String columnName, int scale) throws SQLException {
         return getBigDecimal(findColumn(columnName), scale);
@@ -350,6 +353,7 @@ public BigDecimal getBigDecimal(String columnName, int scale) throws SQLExceptio
 	 * @see java.sql.ResultSet
 	 *
  	 * @exception SQLException on unexpected JDBC error
+     * @deprecated
 	 */
     public java.io.InputStream getUnicodeStream(String columnName) throws SQLException {
         throw new SQLException("getUnicodeStream");
diff --git a/db/derby/code/branches/10.3/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java b/db/derby/code/branches/10.3/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java
index 1c80c07c..407dc0b1 100644
--- a/db/derby/code/branches/10.3/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java
+++ b/db/derby/code/branches/10.3/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java
@@ -340,8 +340,7 @@ else if (type == Types.REAL || 	type == Types.FLOAT ||
 				return getNumberAsString(rs.getDouble(columnNumber));
 			}
 			else if (SUPPORTS_BIG_DECIMAL_CALLS && (type == Types.NUMERIC || type == Types.DECIMAL)) {
-				return	getNumberAsString(rs.getBigDecimal(columnNumber,
-											rsm.getScale(columnNumber)));
+				return getNumberAsString(rs.getBigDecimal(columnNumber));
 			}
 			else if (type == Types.TIME ) {
 				return getTimeAsString(rs.getTime(columnNumber));
diff --git a/db/derby/code/branches/10.3/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java b/db/derby/code/branches/10.3/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java
index 04b8158c..16651641 100644
--- a/db/derby/code/branches/10.3/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java
+++ b/db/derby/code/branches/10.3/java/tools/org/apache/derby/impl/tools/sysinfo/Main.java
@@ -1233,7 +1233,15 @@ public Object run()
      */
     private static String formatURL(URL loc)
     {
-        String filename = URLDecoder.decode(loc.toString());
+        String filename;
+        try {
+            // Should use UTF-8 according to
+            // http://www.w3.org/TR/html40/appendix/notes.html#non-ascii-chars
+            filename = URLDecoder.decode(loc.toString(), "UTF-8");
+        } catch (UnsupportedEncodingException e) {
+            // All JVMs are required to support UTF-8.
+            return null;
+        }
 
         if (filename.startsWith("jar:")) { filename = filename.substring(4); }
         if (filename.startsWith("file:")) { filename = filename.substring(5); }
