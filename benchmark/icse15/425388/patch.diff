diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/DirStorageFactory4.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/DirStorageFactory4.java
index 4434fa02..8421f972 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/DirStorageFactory4.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/DirStorageFactory4.java
@@ -52,9 +52,14 @@ public DirStorageFactory4()
      */
     StorageFile newPersistentFile( String path)
     {
+        String dir = dataDirectory;
+        if (canonicalName != null && path != null && home != null && 
+                !path.startsWith(home)) {
+            dir = canonicalName;
+        }
         if( path == null)
-            return new DirFile4( dataDirectory, rwsOK);
-        return new DirFile4(dataDirectory, path, rwsOK);
+            return new DirFile4(dir, rwsOK);
+        return new DirFile4(dir, path, rwsOK);
     }
 
     /**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
index 97d278a2..c1372285 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
@@ -1436,8 +1436,8 @@ are active and calls bootPersistentServices(PersistentService)
 		to boot all the services that that provider knows about.
 	*/
 	protected void bootPersistentServices() {
-		for (Enumeration e = new ProviderEnumeration( applicationProperties); ; ) {
-
+		Enumeration e = new ProviderEnumeration( applicationProperties);
+		while (e.hasMoreElements()) {
 			PersistentService provider = (PersistentService) e.nextElement();
 			bootProviderServices(provider);
 		}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java
index 51e9db12..ce1dc6da 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/Sed.java
@@ -164,6 +164,7 @@ public static void main(String[] args) throws Exception {
 
         //Filter to suppress absould paths in error message for roll forward recovery tests 
         searchStrings.addElement("Directory.*.wombat.already.exists");
+        searchStrings.addElement("Directory.*.extinout/crwombatlog/log.*.exists");
 
         // Filter for "DB2ConnectionCorrelator" text that can be printed as
         // part of some JCC error messages.
@@ -233,6 +234,7 @@ public static void main(String[] args) throws Exception {
             subStrings.addElement("-----"); 
         }
         subStrings.addElement("Directory DBLOCATION/wombat already exists");
+        subStrings.addElement("Directory 'extinout<sp>crwombatlog<sp>log' exists");
         // ignore the 'DB2ConnectionCorrelator' thing altogether.
         subStrings.addElement("");
 		// Filter for SAX exception name diffs between jvms.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootAllTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootAllTest.java
index e69de29b..9e7c5c25 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootAllTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootAllTest.java
@@ -0,0 +1,144 @@
+/*
+
+   Derby - Class org.apache.derbyTesting.functionTests.tests.store.BootAllTest
+
+   Copyright 1999, 2004 The Apache Software Foundation or its licensors, as applicable.
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derbyTesting.functionTests.tests.store;
+
+import org.apache.derbyTesting.functionTests.util.BaseTestCase;
+import org.apache.derbyTesting.functionTests.util.TestUtil;
+
+import junit.framework.*;
+import java.sql.*;
+import java.util.Properties;
+import java.util.Arrays;
+
+/**
+ * Tests for the system property "derby.system.bootAll"
+ *
+ * DERBY-1296 - Setting property derby.system.bootAll causes an Exception
+ * 
+ */
+public class BootAllTest  extends BaseTestCase {
+
+    /** JDBC Connection */
+    private Connection con;
+    private Driver driver;
+    private String databases[] = new String[] {"wombat1", "wombat2", "wombat3"};
+    
+    final static String DATABASE_SHUT_DOWN = "08006";
+    final static String ALL_DATABASES_SHUT_DOWN = "XJ015";
+
+    /**
+     * Creates a new instance of BootAllTest
+     */
+    public BootAllTest(String name) {
+        super(name);
+    }
+
+    /**
+     * Create the databases
+     */
+    public void setUp() throws Exception {
+        for (int i = 0; i < databases.length; i++) {
+            con = CONFIG.getConnection(databases[i]);
+            con.close();
+            try {
+                con = CONFIG.
+                        getConnection(databases[i] + ";shutdown=true");
+            } catch (SQLException se) {
+                assertEquals("Expected exception on setUp " + se.getSQLState(), 
+                        DATABASE_SHUT_DOWN, se.getSQLState());
+            }
+        }
+        String url = CONFIG.getJDBCUrl("");
+        driver = DriverManager.getDriver(url);
+        DriverManager.deregisterDriver(driver);
+        try {
+            driver.connect(url + ";shutdown=true", null);
+        } catch (SQLException se) {
+            assertEquals("Expected exception on tearDown " + se.getSQLState(), 
+                    ALL_DATABASES_SHUT_DOWN, se.getSQLState());
+        }
+        System.runFinalization();
+        System.gc();
+    }
+
+    /**
+     * Shutdown all databases
+     */
+    public void tearDown() throws Exception {
+        String driverName = CONFIG.getJDBCClient().getJDBCDriverName();
+        Class.forName(driverName);
+        println("Teardown of: " + getName());
+        try {
+            con = CONFIG.
+                    getConnection(";shutdown=true");
+        } catch (SQLException se) {
+            assertEquals("Expected exception on tearDown " + se.getSQLState(), 
+                    ALL_DATABASES_SHUT_DOWN, se.getSQLState());
+        }
+    }
+
+    /**
+     * DERBY-1296 - Setting property derby.system.bootAll causes an Exception
+     *
+     * Check that setting the system property "derby.system.bootAll" will not 
+     * cause an exception when used in combination with the system property
+     * "derby.system.home".
+     *
+     * The property "derby.system.home" is set by default for all tests and does
+     * not need to be explicitly set in this test.
+     */
+    public void testSettingBootAllPropertyWithHomePropertySet() 
+            throws Exception 
+    {
+        String returnedDatabases[] = null;
+
+        setSystemProperty("derby.system.bootAll", "true");
+
+        String driverName = CONFIG.getJDBCClient().getJDBCDriverName();
+        String url = CONFIG.getJDBCUrl("");
+
+        Class.forName(driverName).newInstance();
+        DriverManager.registerDriver(driver);
+
+        Driver driver = DriverManager.getDriver(url);
+
+        DriverPropertyInfo[] attributes = driver.getPropertyInfo(url, null);
+        for (int i = 0; i < attributes.length; i++) {
+            if (attributes[i].name.equalsIgnoreCase("databaseName")) {
+                returnedDatabases = attributes[i].choices;
+            }
+        }
+
+        Arrays.sort(returnedDatabases);
+
+        assertEquals("The number of databases should be", 
+                databases.length, 
+                returnedDatabases.length);
+
+        for (int i = 0; i < databases.length; i++) {
+            assertEquals("Database names should be", 
+                    databases[i], 
+                    returnedDatabases[i]);
+        }
+
+    }
+    
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestConfiguration.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestConfiguration.java
index 9b4fc465..623ff397 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestConfiguration.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestConfiguration.java
@@ -127,7 +127,7 @@ public Object run() {
      */
     private String createJDBCUrlWithDatabaseName(String name) {
         if (jdbcClient == JDBCClient.EMBEDDED) {
-            return jdbcClient.getUrlBase() + dbName;
+            return jdbcClient.getUrlBase() + name;
         } else {
             return jdbcClient.getUrlBase() + hostName + ":" + port + "/" + name;
         }
@@ -216,23 +216,40 @@ public int getPort() {
      */
     public Connection getDefaultConnection()
         throws SQLException {
+        return getConnection(getDatabaseName());
+    }
+    
+    /**
+     * Get connection to a database.
+     * If the database does not exist, it will be created.
+     * A default username and password will be used for the connection.
+     *
+     * @param databaseName database to connect to
+     *
+     * @return connection to default database.
+     */
+    public Connection getConnection (String databaseName) throws SQLException {
         Connection con = null;
         JDBCClient client =getJDBCClient();
         if (HAVE_DRIVER) {            
             loadJDBCDriver(client.getJDBCDriverName());
             if (!isSingleLegXA()) {
                 con = DriverManager.getConnection(
-                        getJDBCUrl() + ";create=true",
+                        getJDBCUrl(databaseName) + ";create=true",
                         getUserName(),
                         getUserPassword());
             }
             else {
-                con = TestDataSourceFactory.getXADataSource().getXAConnection (getUserName(),
+                Properties attrs = 
+                        getDataSourcePropertiesForDatabase(databaseName);
+                con = TestDataSourceFactory.getXADataSource(attrs).
+                        getXAConnection (getUserName(), 
                             getUserPassword()).getConnection();                
             }
         } else {
             //Use DataSource for JSR169
-            con = TestDataSourceFactory.getDataSource().getConnection();
+            Properties attrs = getDataSourcePropertiesForDatabase(databaseName);
+            con = TestDataSourceFactory.getDataSource(attrs).getConnection();
         }
         return con;
     }
@@ -390,12 +407,30 @@ public boolean isSingleLegXA () {
      * connect to the default database
      */
     public static Properties getDefaultDataSourceProperties() {
+        return getDataSourcePropertiesForDatabase(
+                DERBY_TEST_CONFIG.getDatabaseName());
+    }
+    
+    /**
+     * Generate properties which can be set on a
+     * <code>DataSource</code> in order to connect to a given
+     * database.
+     *
+     * @param databaseName database to connect to
+     *
+     * @return a <code>Properties</code> object containing server
+     * name, port number, database name and other attributes needed to
+     * connect to the database
+     */
+    public static Properties getDataSourcePropertiesForDatabase
+            (String databaseName) 
+    {
         Properties attrs = new Properties();
         if (!(DERBY_TEST_CONFIG.getJDBCClient() == JDBCClient.EMBEDDED)) {
             attrs.setProperty("serverName", DERBY_TEST_CONFIG.getHostName());
             attrs.setProperty("portNumber", Integer.toString(DERBY_TEST_CONFIG.getPort()));
         }
-        attrs.setProperty("databaseName", DERBY_TEST_CONFIG.getDatabaseName());
+        attrs.setProperty("databaseName", databaseName);
         attrs.setProperty("connectionAttributes", "create=true");
         return attrs;
     }
