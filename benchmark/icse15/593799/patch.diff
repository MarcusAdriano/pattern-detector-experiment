diff --git a/lucene/java/trunk/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java b/lucene/java/trunk/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java
index 56205306..7eed12a0 100644
--- a/lucene/java/trunk/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java
+++ b/lucene/java/trunk/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData.java
@@ -126,7 +126,8 @@ public void reinit(boolean eraseIndex) throws Exception {
         FileUtils.fullyDelete(indexDir);
       }
       indexDir.mkdirs();
-      directory = FSDirectory.getDirectory(indexDir);
+      final boolean doSync = config.get("fsdirectory.dosync", true);
+      directory = FSDirectory.getDirectory(indexDir, null, doSync);
     } else {
       directory = new RAMDirectory();
     }
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/store/FSDirectory.java b/lucene/java/trunk/src/java/org/apache/lucene/store/FSDirectory.java
index 51ac2a54..53a01ad0 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/store/FSDirectory.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/store/FSDirectory.java
@@ -62,6 +62,14 @@
 
   private static boolean disableLocks = false;
 
+  private static boolean DEFAULT_DO_SYNC = true;
+
+  // True if we should call sync() before closing a file.
+  // This improves chances that index will still be
+  // consistent if the machine or OS abruptly crashes.  See
+  // LUCENE-1044.
+  private boolean doSync = DEFAULT_DO_SYNC;
+
   // TODO: should this move up to the Directory base class?  Also: should we
   // make a per-instance (in addition to the static "default") version?
 
@@ -136,17 +144,34 @@ public static boolean getDisableLocks() {
    * @return the FSDirectory for the named file.  */
   public static FSDirectory getDirectory(String path)
       throws IOException {
-    return getDirectory(new File(path), null);
+    return getDirectory(new File(path), null, DEFAULT_DO_SYNC);
   }
 
   /** Returns the directory instance for the named location.
    * @param path the path to the directory.
    * @param lockFactory instance of {@link LockFactory} providing the
-   *        locking implementation.
+   *        locking implementation.  If null, the default
+   *        {@link SimpleFSLockFactory} is used.
    * @return the FSDirectory for the named file.  */
   public static FSDirectory getDirectory(String path, LockFactory lockFactory)
       throws IOException {
-    return getDirectory(new File(path), lockFactory);
+    return getDirectory(new File(path), lockFactory, DEFAULT_DO_SYNC);
+  }
+
+  /** Returns the directory instance for the named location.
+   * @param path the path to the directory.
+   * @param lockFactory instance of {@link LockFactory} providing the
+   *        locking implementation.  If null, the default
+   *        {@link SimpleFSLockFactory} is used.
+   * @param doSync if true (the default), sync() is called
+   *        on all file descriptors before close().  This
+   *        improves the likelihood that the index will
+   *        remain consistent when the OS or machine crashes
+   *        or the power cord is pulled.
+   * @return the FSDirectory for the named file.  */
+  public static FSDirectory getDirectory(String path, LockFactory lockFactory, boolean doSync)
+      throws IOException {
+    return getDirectory(new File(path), lockFactory, doSync);
   }
 
   /** Returns the directory instance for the named location.
@@ -154,15 +179,32 @@ public static FSDirectory getDirectory(String path, LockFactory lockFactory)
    * @return the FSDirectory for the named file.  */
   public static FSDirectory getDirectory(File file)
     throws IOException {
-    return getDirectory(file, null);
+    return getDirectory(file, null, DEFAULT_DO_SYNC);
   }
 
   /** Returns the directory instance for the named location.
    * @param file the path to the directory.
    * @param lockFactory instance of {@link LockFactory} providing the
-   *        locking implementation.
+   *        locking implementation.  If null, the default
+   *        {@link SimpleFSLockFactory} is used.
    * @return the FSDirectory for the named file.  */
   public static FSDirectory getDirectory(File file, LockFactory lockFactory)
+      throws IOException {
+    return getDirectory(file, lockFactory, DEFAULT_DO_SYNC);
+  }
+
+  /** Returns the directory instance for the named location.
+   * @param file the path to the directory.
+   * @param lockFactory instance of {@link LockFactory} providing the
+   *        locking implementation.  If null, the default
+   *        {@link SimpleFSLockFactory} is used.
+   * @param doSync if true (the default), sync() is called
+   *        on all file descriptors before close().  This
+   *        improves the likelihood that the index will
+   *        remain consistent when the OS or machine crashes
+   *        or the power cord is pulled.
+   * @return the FSDirectory for the named file.  */
+  public static FSDirectory getDirectory(File file, LockFactory lockFactory, boolean doSync)
     throws IOException
   {
     file = new File(file.getCanonicalPath());
@@ -183,7 +225,7 @@ public static FSDirectory getDirectory(File file, LockFactory lockFactory)
         } catch (Exception e) {
           throw new RuntimeException("cannot load FSDirectory class: " + e.toString(), e);
         }
-        dir.init(file, lockFactory);
+        dir.init(file, lockFactory, doSync);
         DIRECTORIES.put(file, dir);
       } else {
         // Catch the case where a Directory is pulled from the cache, but has a
@@ -254,7 +296,7 @@ private void create() throws IOException {
 
   protected FSDirectory() {};                     // permit subclassing
 
-  private void init(File path, LockFactory lockFactory) throws IOException {
+  private void init(File path, LockFactory lockFactory, boolean doSync) throws IOException {
 
     // Set up lockFactory with cascaded defaults: if an instance was passed in,
     // use that; else if locks are disabled, use NoLockFactory; else if the
@@ -262,6 +304,7 @@ private void init(File path, LockFactory lockFactory) throws IOException {
     // instantiate that; else, use SimpleFSLockFactory:
 
     directory = path;
+    this.doSync = doSync;
 
     boolean doClearLockID = false;
 
@@ -432,7 +475,7 @@ public IndexOutput createOutput(String name) throws IOException {
     if (file.exists() && !file.delete())          // delete existing, if any
       throw new IOException("Cannot overwrite: " + file);
 
-    return new FSIndexOutput(file);
+    return new FSIndexOutput(file, doSync);
   }
 
   // Inherit javadoc
@@ -588,10 +631,13 @@ boolean isFDValid() throws IOException {
     // remember if the file is open, so that we don't try to close it
     // more than once
     private boolean isOpen;
+    private boolean doSync;
   
-    public FSIndexOutput(File path) throws IOException {
+    public FSIndexOutput(File path, boolean doSync) throws IOException {
       file = new RandomAccessFile(path, "rw");
+
       isOpen = true;
+      this.doSync = doSync;
     }
   
     /** output methods: */
@@ -601,11 +647,16 @@ public void flushBuffer(byte[] b, int offset, int size) throws IOException {
     public void close() throws IOException {
       // only close the file if it has not been closed yet
       if (isOpen) {
+        try {
         super.close();
+          if (doSync)
+            file.getFD().sync();
+        } finally {
         file.close();
         isOpen = false;
       }
     }
+    }
   
     /** Random-access methods */
     public void seek(long pos) throws IOException {
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/index/TestAtomicUpdate.java b/lucene/java/trunk/src/test/org/apache/lucene/index/TestAtomicUpdate.java
index f6a698cb..17c7e813 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/index/TestAtomicUpdate.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/index/TestAtomicUpdate.java
@@ -177,7 +177,7 @@ public void testAtomicUpdates() throws Exception {
     // Second in an FSDirectory:
     String tempDir = System.getProperty("java.io.tmpdir");
     File dirPath = new File(tempDir, "lucene.test.atomic");
-    directory = FSDirectory.getDirectory(dirPath);
+    directory = FSDirectory.getDirectory(dirPath, null, false);
     runTest(directory);
     directory.close();
     _TestUtil.rmDir(dirPath);
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java b/lucene/java/trunk/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
index 0e65f272..d85a352c 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java
@@ -152,7 +152,7 @@ public void searchIndex(String dirName) throws IOException {
 
     dirName = fullDir(dirName);
 
-    Directory dir = FSDirectory.getDirectory(dirName);
+    Directory dir = FSDirectory.getDirectory(dirName, null, false);
     IndexSearcher searcher = new IndexSearcher(dir);
     
     Hits hits = searcher.search(new TermQuery(new Term("content", "aaa")));
@@ -172,7 +172,7 @@ public void changeIndexWithAdds(String dirName, boolean autoCommit) throws IOExc
 
     dirName = fullDir(dirName);
 
-    Directory dir = FSDirectory.getDirectory(dirName);
+    Directory dir = FSDirectory.getDirectory(dirName, null, false);
 
     // open writer
     IndexWriter writer = new IndexWriter(dir, autoCommit, new WhitespaceAnalyzer(), false);
@@ -232,7 +232,7 @@ public void changeIndexNoAdds(String dirName, boolean autoCommit) throws IOExcep
 
     dirName = fullDir(dirName);
 
-    Directory dir = FSDirectory.getDirectory(dirName);
+    Directory dir = FSDirectory.getDirectory(dirName, null, false);
 
     // make sure searching sees right # hits
     IndexSearcher searcher = new IndexSearcher(dir);
@@ -280,7 +280,7 @@ public void createIndex(String dirName, boolean doCFS) throws IOException {
 
     dirName = fullDir(dirName);
 
-    Directory dir = FSDirectory.getDirectory(dirName);
+    Directory dir = FSDirectory.getDirectory(dirName, null, false);
     IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);
     writer.setUseCompoundFile(doCFS);
     
@@ -311,7 +311,7 @@ public void testExactFileNames() throws IOException {
       rmDir(outputDir);
 
       try {
-        Directory dir = FSDirectory.getDirectory(fullDir(outputDir));
+        Directory dir = FSDirectory.getDirectory(fullDir(outputDir), null, false);
 
         boolean autoCommit = 0 == pass;
  
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/index/TestCompoundFile.java b/lucene/java/trunk/src/test/org/apache/lucene/index/TestCompoundFile.java
index de0b617c..26f96575 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/index/TestCompoundFile.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/index/TestCompoundFile.java
@@ -62,7 +62,7 @@ public void setUp() throws Exception {
        super.setUp();
        File file = new File(System.getProperty("tempDir"), "testIndex");
        _TestUtil.rmDir(file);
-       dir = FSDirectory.getDirectory(file);
+       dir = FSDirectory.getDirectory(file, null, false);
     }
 
 
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexModifier.java b/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexModifier.java
index cd89051f..392c4724 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexModifier.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/index/TestIndexModifier.java
@@ -147,7 +147,7 @@ private void testIndexInternal(int maxWait) throws IOException {
     if (tempDir == null)
       throw new IOException("java.io.tmpdir undefined, cannot run test");
     File indexDir = new File(tempDir, "lucenetestindex");
-    Directory rd = FSDirectory.getDirectory(indexDir);
+    Directory rd = FSDirectory.getDirectory(indexDir, null, false);
     IndexThread.id = 0;
     IndexThread.idStack.clear();
     IndexModifier index = new IndexModifier(rd, new StandardAnalyzer(), create);
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/index/TestNorms.java b/lucene/java/trunk/src/test/org/apache/lucene/index/TestNorms.java
index 1b662690..37d1d7f1 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/index/TestNorms.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/index/TestNorms.java
@@ -81,7 +81,7 @@ public void testNorms() throws IOException {
     
     // test with a single index: index1
     File indexDir1 = new File(tempDir, "lucenetestindex1");
-    Directory dir1 = FSDirectory.getDirectory(indexDir1);
+    Directory dir1 = FSDirectory.getDirectory(indexDir1, null, false);
 
     norms = new ArrayList();
     modifiedNorms = new ArrayList();
@@ -99,14 +99,14 @@ public void testNorms() throws IOException {
     numDocNorms = 0;
     
     File indexDir2 = new File(tempDir, "lucenetestindex2");
-    Directory dir2 = FSDirectory.getDirectory(indexDir2);
+    Directory dir2 = FSDirectory.getDirectory(indexDir2, null, false);
 
     createIndex(dir2);
     doTestNorms(dir2);
 
     // add index1 and index2 to a third index: index3
     File indexDir3 = new File(tempDir, "lucenetestindex3");
-    Directory dir3 = FSDirectory.getDirectory(indexDir3);
+    Directory dir3 = FSDirectory.getDirectory(indexDir3, null, false);
 
     createIndex(dir3);
     IndexWriter iw = new IndexWriter(dir3,anlzr,false);
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/index/TestStressIndexing.java b/lucene/java/trunk/src/test/org/apache/lucene/index/TestStressIndexing.java
index 0f9868ec..cfa8f73e 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/index/TestStressIndexing.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/index/TestStressIndexing.java
@@ -178,7 +178,7 @@ public void testStressIndexAndSearching() throws Exception {
     // FSDir
     String tempDir = System.getProperty("java.io.tmpdir");
     File dirPath = new File(tempDir, "lucene.test.stress");
-    directory = FSDirectory.getDirectory(dirPath);
+    directory = FSDirectory.getDirectory(dirPath, null, false);
     runStressTest(directory, true, null);
     directory.close();
 
@@ -188,7 +188,7 @@ public void testStressIndexAndSearching() throws Exception {
     directory.close();
 
     // With ConcurrentMergeScheduler, in FSDir
-    directory = FSDirectory.getDirectory(dirPath);
+    directory = FSDirectory.getDirectory(dirPath, null, false);
     runStressTest(directory, true, new ConcurrentMergeScheduler());
     directory.close();
 
@@ -198,7 +198,7 @@ public void testStressIndexAndSearching() throws Exception {
     directory.close();
 
     // With ConcurrentMergeScheduler and autoCommit=false, in FSDir
-    directory = FSDirectory.getDirectory(dirPath);
+    directory = FSDirectory.getDirectory(dirPath, null, false);
     runStressTest(directory, false, new ConcurrentMergeScheduler());
     directory.close();
 
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/index/TestThreadedOptimize.java b/lucene/java/trunk/src/test/org/apache/lucene/index/TestThreadedOptimize.java
index 5ee7a76f..e5fee5c8 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/index/TestThreadedOptimize.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/index/TestThreadedOptimize.java
@@ -149,7 +149,7 @@ public void testThreadedOptimize() throws Exception {
       throw new IOException("tempDir undefined, cannot run test");
 
     String dirName = tempDir + "/luceneTestThreadedOptimize";
-    directory = FSDirectory.getDirectory(dirName);
+    directory = FSDirectory.getDirectory(dirName, null, false);
     runTest(directory, false, null);
     runTest(directory, true, null);
     runTest(directory, false, new ConcurrentMergeScheduler());
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/store/TestLockFactory.java b/lucene/java/trunk/src/test/org/apache/lucene/store/TestLockFactory.java
index c7e7349e..66b0136b 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/store/TestLockFactory.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/store/TestLockFactory.java
@@ -320,7 +320,7 @@ public void testStressLocksNativeFSLockFactory() throws IOException {
     }
 
     public void _testStressLocks(LockFactory lockFactory, String indexDirName) throws IOException {
-        FSDirectory fs1 = FSDirectory.getDirectory(indexDirName, lockFactory);
+        FSDirectory fs1 = FSDirectory.getDirectory(indexDirName, lockFactory, false);
 
         // First create a 1 doc index:
         IndexWriter w = new IndexWriter(fs1, new WhitespaceAnalyzer(), true);
