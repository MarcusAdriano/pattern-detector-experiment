diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DatabasePropertyTestSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DatabasePropertyTestSetup.java
index d3273fa1..1c954958 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DatabasePropertyTestSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DatabasePropertyTestSetup.java
@@ -292,7 +292,7 @@ protected void tearDown()
             if (sqle.getSQLState().equals("25502")) {
                 // firstly, check on the state of the connection when we
                 // get this error
-                System.out.println("Apparently this is a read-only connection? Get some data:");
+                System.out.println("Apparently this is a read-only connection in teardown()? Get some data:");
                 System.out.println("conn.isClosed: " + conn.isClosed());
                 System.out.println("conn.isReadOnly: " + conn.isReadOnly());
                 System.out.println("conn.getHoldability: " + conn.getHoldability());
@@ -349,6 +349,46 @@ private void clearProperties(Connection conn) throws SQLException
     }
 
     private void setProperties(Properties values) throws SQLException
+    {
+        Connection conn = getConnection();
+        try {
+            attemptSetProperties(values, conn);
+        } catch (SQLException sqle) {
+            // To try to prevent the error situation of DERBY-5686, which
+            // cascades to many test failures, catch ERROR 25502, and if it occurs
+            // try to gather some information, close the connection,
+            // and retry the clearing of the properties on a new connection
+            if (sqle.getSQLState().equals("25502")) {
+                // firstly, check on the state of the connection when we
+                // get this error
+                System.out.println("Apparently this is a read-only connection? Get some data:");
+                System.out.println("conn.isClosed: " + conn.isClosed());
+                System.out.println("conn.isReadOnly: " + conn.isReadOnly());
+                System.out.println("conn.getHoldability: " + conn.getHoldability());
+                System.out.println("conn.getTransactionIsolation: " + conn.getTransactionIsolation());
+                System.out.println("conn.getAutoCommit: " + conn.getAutoCommit());
+                // now try to close the connection, then try open a new one, 
+                // and try to executeUpdate again.
+                conn.close();
+                Connection conn2 = getConnection();
+                // check if this second connection is read-only
+                if (conn2.isReadOnly())
+                {
+                    System.out.println("Sorry, conn2 is also read-only, won't retry");
+                    // give up
+                    throw sqle;
+                }
+                else
+                {   
+                    // retry
+                    System.out.println("retrying to set the Properties");
+                    attemptSetProperties(values, conn2);
+                }
+            }
+        }
+    }
+    
+    private void attemptSetProperties(Properties values, Connection coonn) throws SQLException
     {
         Connection conn = getConnection();
         conn.setAutoCommit(false);
