diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java
index 874281a7..7efa2fb6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/ScrollInsensitiveResultSet.java
@@ -239,6 +239,10 @@ public ExecRow	getAbsoluteRow(int row) throws StandardException
                     return null;
 		}
 
+		if (seenLast && row > lastPosition) {
+		   return setAfterLastRow();
+		}		
+
 		if (row > 0)
 		{
 			// position is from the start of the result set
@@ -423,6 +427,10 @@ public ExecRow	getNextRowCore() throws StandardException
 		if (!isOpen)
 			throw StandardException.newException(SQLState.LANG_RESULT_SET_NOT_OPEN, "next");
 
+		if (seenLast && currentPosition == lastPosition) {
+		   return setAfterLastRow();
+		}
+
 		/* Should we get the next row from the source or the hash table? */
 		if (currentPosition == positionInSource)
 		{
@@ -600,8 +608,15 @@ public ExecRow	setAfterLastRow()
 		{
 			getLastRow();
 		}
+		if (lastPosition == 0) {
+		   // empty rs special case
+		   currentPosition = 0;
+		   afterLast = false;
+		} else {
 		currentPosition = lastPosition + 1;
 		afterLast = true;
+		}
+
 		beforeFirst = false;
 		currentRow = null;
 		return null;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/scrollCursors2.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/scrollCursors2.java
index 4c779916..38f09d59 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/scrollCursors2.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/scrollCursors2.java
@@ -823,6 +823,20 @@ static boolean scrollInsensitivePositive( Connection conn)
 		rs.close();
 
 
+		// Empty result set tests (DERBY-992)
+		rs = s_i_r.executeQuery("select * from t where 1=0");
+		rs.afterLast();
+		if (rs.isAfterLast()) {
+			System.out.println("afterLast() on empty RS should be no-op");
+		}
+		
+		rs.beforeFirst(); 
+		if (rs.isBeforeFirst()) {
+			System.out.println("beforeFirst() on empty RS should be no-op");
+		}
+
+		rs.close();
+
 		// Scroll insensitive and updatable
 		s_i_u = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
 									 ResultSet.CONCUR_UPDATABLE);
