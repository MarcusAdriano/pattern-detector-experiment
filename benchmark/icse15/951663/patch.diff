diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/similarity/item/CountUsersKeyWritable.java b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/similarity/item/CountUsersKeyWritable.java
index b12ccf06..36f390cc 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/similarity/item/CountUsersKeyWritable.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/similarity/item/CountUsersKeyWritable.java
@@ -17,11 +17,6 @@
 
 package org.apache.mahout.cf.taste.hadoop.similarity.item;
 
-import java.io.DataInput;
-import java.io.DataOutput;
-import java.io.IOException;
-import java.io.Serializable;
-
 import org.apache.hadoop.io.WritableComparable;
 import org.apache.hadoop.io.WritableComparator;
 import org.apache.hadoop.mapreduce.Partitioner;
@@ -29,6 +24,10 @@
 import org.apache.mahout.math.VarLongWritable;
 import org.apache.mahout.math.Varint;
 
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
 /**
  * a writable key that is used by {@link CountUsersMapper} and {@link CountUsersReducer} to
  * count unique users by sending all userIDs to the same reducer and have them sorted in
@@ -92,7 +91,7 @@ public int getPartition(CountUsersKeyWritable key, VarLongWritable value, int nu
   /**
    * all userIDs go to the same reducer
    */
-  public static class CountUsersGroupComparator extends WritableComparator implements Serializable {
+  public static class CountUsersGroupComparator extends WritableComparator {
 
     public CountUsersGroupComparator() {
       super(CountUsersKeyWritable.class, true);
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/common/IntPairWritable.java b/mahout/trunk/core/src/main/java/org/apache/mahout/common/IntPairWritable.java
index 65440857..c7baecb6 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/common/IntPairWritable.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/common/IntPairWritable.java
@@ -17,16 +17,16 @@
 
 package org.apache.mahout.common;
 
+import org.apache.hadoop.io.BinaryComparable;
+import org.apache.hadoop.io.WritableComparable;
+import org.apache.hadoop.io.WritableComparator;
+
 import java.io.DataInput;
 import java.io.DataOutput;
 import java.io.IOException;
 import java.io.Serializable;
 import java.util.Arrays;
 
-import org.apache.hadoop.io.BinaryComparable;
-import org.apache.hadoop.io.WritableComparable;
-import org.apache.hadoop.io.WritableComparator;
-
 /**
  * A {@link WritableComparable} which encapsulates an ordered pair of signed integers.
  */
@@ -146,7 +146,7 @@ private static int getInt(byte[] b, int offset) {
     WritableComparator.define(IntPairWritable.class, new Comparator());
   }
 
-  public static final class Comparator extends WritableComparator implements Serializable {
+  public static final class Comparator extends WritableComparator {
     public Comparator() {
       super(IntPairWritable.class);
     }
@@ -185,7 +185,7 @@ private static int compareInts(byte[] b1, int s1, byte[] b2, int s2) {
   /**
    * Compare only the first part of the pair, so that reduce is called once for each value of the first part.
    */
-  public static class FirstGroupingComparator extends WritableComparator implements Serializable {
+  public static class FirstGroupingComparator extends WritableComparator {
     
     public FirstGroupingComparator() {
       super(IntPairWritable.class);
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/decomposer/EigenStatus.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/decomposer/EigenStatus.java
index 64c693e0..112cb521 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/decomposer/EigenStatus.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/decomposer/EigenStatus.java
@@ -20,7 +20,7 @@
 public class EigenStatus {
   private final double eigenValue;
   private final double cosAngle;
-  private Boolean inProgress;
+  private volatile Boolean inProgress;
 
   public EigenStatus(double eigenValue, double cosAngle) {
     this(eigenValue, cosAngle, true);
@@ -41,14 +41,10 @@ public double getEigenValue() {
   }
 
   public boolean inProgress() {
-    synchronized (inProgress) {
       return inProgress;
     }
-  }
 
   void setInProgress(boolean status) {
-    synchronized (inProgress) {
       inProgress = status;
     }
-  }
 }
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Beta.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Beta.java
index f2cf58e9..0a9610b0 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Beta.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Beta.java
@@ -68,7 +68,11 @@ protected double b00(double a, double b, RandomEngine randomGenerator) {
       a_ = a - 1.0;
       b_ = b - 1.0;
       double c = (b * b_) / (a * a_);
-      t = (c == 1.0) ? 0.5 : (1.0 - Math.sqrt(c)) / (1.0 - c);  // t = t_opt
+      if (Math.abs(c - 1.0) < 1e-8) {
+        t = 0.5;
+      } else {
+        t = (1.0 - Math.sqrt(c)) / (1.0 - c);
+      }
       fa = Math.exp(a_ * Math.log(t));
       fb = Math.exp(b_ * Math.log(1.0 - t));              // f(t) = fa * fb
 
diff --git a/mahout/trunk/utils/src/main/java/org/apache/mahout/utils/nlp/collocations/llr/GramKeyGroupComparator.java b/mahout/trunk/utils/src/main/java/org/apache/mahout/utils/nlp/collocations/llr/GramKeyGroupComparator.java
index 95922fe9..4c2c913d 100644
--- a/mahout/trunk/utils/src/main/java/org/apache/mahout/utils/nlp/collocations/llr/GramKeyGroupComparator.java
+++ b/mahout/trunk/utils/src/main/java/org/apache/mahout/utils/nlp/collocations/llr/GramKeyGroupComparator.java
@@ -17,15 +17,13 @@
 
 package org.apache.mahout.utils.nlp.collocations.llr;
 
-import java.io.Serializable;
-
 import org.apache.hadoop.io.WritableComparable;
 import org.apache.hadoop.io.WritableComparator;
 
 /** Group GramKeys based on their Gram, ignoring the secondary sort key, so that all keys with the same Gram are sent
  *  to the same call of the reduce method, sorted in natural order (for GramKeys).
  */
-public class GramKeyGroupComparator extends WritableComparator implements Serializable {
+public class GramKeyGroupComparator extends WritableComparator {
 
   protected GramKeyGroupComparator() {
     super(GramKey.class, true);
