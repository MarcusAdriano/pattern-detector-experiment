diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMWriter.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMWriter.java
index 8843b363..6bf463fa 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMWriter.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMWriter.java
@@ -58,6 +58,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	// Default buffer size
 	private final static int DEFAULT_BUFFER_SIZE = 32767;
 
+	/**
+     * The maximum length in bytes for strings sent by {@code writeLDString()},
+     * which is the maximum unsigned integer value that fits in two bytes.
+     */
+    private final static int MAX_VARCHAR_BYTE_LENGTH = 0xFFFF;
+
 	/**
 	 * Output buffer.
 	 */
@@ -1193,39 +1199,49 @@ protected void writeLDString(String s, int index) throws DRDAProtocolException
 		// actual writing of the length is delayed until we have encoded the
 		// string.
 		final int lengthPos = buffer.position();
-		// Position on which to start writing the string (right after length,
-		// which is 2 bytes long).
-		final int stringPos = lengthPos + 2;
-		// don't send more than LONGVARCHAR_MAX_LEN bytes
-		final int maxStrLen =
-			Math.min(maxEncodedLength(s), FdocaConstants.LONGVARCHAR_MAX_LEN);
-
-		ensureLength(2 + maxStrLen);
 
-		// limit the writable area of the output buffer
-		buffer.position(stringPos);
-		buffer.limit(stringPos + maxStrLen);
-
-		// encode the string
-		CharBuffer input = CharBuffer.wrap(s);
-		encoder.reset();
-		CoderResult res = encoder.encode(input, buffer, true);
-		if (res == CoderResult.UNDERFLOW) {
-			res = encoder.flush(buffer);
+        // Reserve two bytes for the length field and move the position to
+        // where the string should be inserted.
+        ensureLength(2);
+		final int stringPos = lengthPos + 2;
+        buffer.position(stringPos);
+
+        // Write the string.
+        writeString(s);
+
+        int byteLength = buffer.position() - stringPos;
+
+        // If the byte representation of the string is too long, it needs to
+        // be truncated.
+        if (byteLength > MAX_VARCHAR_BYTE_LENGTH) {
+            // Truncate the string down to the maximum byte length.
+            byteLength = MAX_VARCHAR_BYTE_LENGTH;
+            // Align with character boundaries so that we don't send over
+            // half a character.
+            while (isContinuationByte(buffer.get(stringPos + byteLength))) {
+                byteLength--;
 		}
-		if (SanityManager.DEBUG) {
-			// UNDERFLOW is returned if the entire string was encoded, OVERFLOW
-			// is returned if the string was truncated at LONGVARCHAR_MAX_LEN
-			SanityManager.ASSERT(
-				res == CoderResult.UNDERFLOW || res == CoderResult.OVERFLOW,
-				"Unexpected coder result: " + res);
+            // Set the buffer position right after the truncated string.
+            buffer.position(stringPos + byteLength);
 		}
 
-		// write the length in bytes
-		buffer.putShort(lengthPos, (short) (maxStrLen - buffer.remaining()));
+        // Go back and write the length in bytes.
+        buffer.putShort(lengthPos, (short) byteLength);
+	}
 
-		// remove the limit on the output buffer
-		buffer.limit(buffer.capacity());
+    /**
+     * Check if a byte value represents a continuation byte in a UTF-8 byte
+     * sequence. Continuation bytes in UTF-8 always match the bit pattern
+     * {@code 10xxxxxx}.
+     *
+     * @param b the byte to check
+     * @return {@code true} if {@code b} is a continuation byte, or
+     * {@code false} if it is the first byte in a UTF-8 sequence
+     */
+    private static boolean isContinuationByte(byte b) {
+        // Check the values of the two most significant bits. If they are
+        // 10xxxxxx, it's a continuation byte.
+        return (b & 0xC0) == 0x80;
 	}
 
 	/**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/PrepareStatementTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/PrepareStatementTest.java
index 918de978..98eaf4a2 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/PrepareStatementTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/PrepareStatementTest.java
@@ -1288,9 +1288,16 @@ public void testDerby3230() throws SQLException {
      */
     private static String makeString(int length)
     {
-        StringBuffer buf = new StringBuffer();
-        for (int i = 0; i < length; ++i) buf.append("X");
-        return buf.toString();
+        return makeString(length, 'X');
+    }
+
+    /**
+     * Return a string of the given length filled with the specified character.
+     */
+    private static String makeString(int length, char ch) {
+        char[] buf = new char[length];
+        Arrays.fill(buf, ch);
+        return new String(buf);
     }
 
     /**
@@ -1319,4 +1326,62 @@ public void testReadBlobCloseToMaxDssLength() throws Exception {
         rs.close();
     }
 
+    /**
+     * Verify that string values aren't truncated when their UTF-8 encoded
+     * representation exceeds 32KB. DERBY-5236.
+     */
+    public void testLongColumn() throws Exception {
+        PreparedStatement ps = prepareStatement(
+                "values cast(? as varchar(32672))");
+
+        String s1 = makeString(20000, '\u4e10');
+        ps.setString(1, s1);
+        JDBC.assertSingleValueResultSet(ps.executeQuery(), s1);
+
+        // 64K-1 bytes, should be OK.
+        String s2 =
+                s1 + makeString(64 * 1024 - s1.getBytes("UTF-8").length - 1);
+        ps.setString(1, s2);
+        JDBC.assertSingleValueResultSet(ps.executeQuery(), s2);
+
+        // 64K bytes, will be truncated to 64K-1 by the client driver because
+        // of limitation in the protocol.
+        String s3 = s2 + 'X';
+        ps.setString(1, s3);
+        if (usingDerbyNetClient()) {
+            String expected = s3.substring(0, s3.length() - 1);
+            JDBC.assertSingleValueResultSet(ps.executeQuery(), expected);
+        } else {
+            // Embedded is OK. No truncation.
+            JDBC.assertSingleValueResultSet(ps.executeQuery(), s3);
+        }
+
+        // 64K+1 bytes, will be truncated by the client driver because of
+        // limitation in the protocol. Should be truncated to to 64K-2 to
+        // match the character boundary.
+        String s4 = s3.substring(0, s3.length() - 2) + '\u4e10';
+        ps.setString(1, s4);
+        if (usingDerbyNetClient()) {
+            String expected = s4.substring(0, s4.length() - 1);
+            JDBC.assertSingleValueResultSet(ps.executeQuery(), expected);
+        } else {
+            // Embedded is OK. No truncation.
+            JDBC.assertSingleValueResultSet(ps.executeQuery(), s4);
+        }
+
+        // Try two columns at 64K+1 bytes. Expect same result as above.
+        PreparedStatement ps2 = prepareStatement(
+                "values (cast(? as varchar(32672)), " +
+                "cast(? as varchar(32672)))");
+        ps2.setString(1, s4);
+        ps2.setString(2, s4);
+        if (usingDerbyNetClient()) {
+            String expected = s4.substring(0, s4.length() - 1);
+            String[][] expectedRow = {{expected, expected}};
+            JDBC.assertFullResultSet(ps2.executeQuery(), expectedRow);
+        } else {
+            String[][] expectedRow = {{s4, s4}};
+            JDBC.assertFullResultSet(ps2.executeQuery(), expectedRow);
+        }
+    }
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Derby5236Test.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Derby5236Test.java
index daf5940e..e69de29b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Derby5236Test.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Derby5236Test.java
@@ -1,59 +0,0 @@
-/*
-
-   Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.Derby5236Test
-
-   Licensed to the Apache Software Foundation (ASF) under one or more
-   contributor license agreements.  See the NOTICE file distributed with
-   this work for additional information regarding copyright ownership.
-   The ASF licenses this file to You under the Apache License, Version 2.0
-   (the "License"); you may not use this file except in compliance with
-   the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-
- */
-
-package org.apache.derbyTesting.functionTests.tests.jdbcapi;
-
-import java.sql.PreparedStatement;
-import java.sql.SQLException;
-import java.util.Arrays;
-import junit.framework.Test;
-import org.apache.derbyTesting.junit.BaseJDBCTestCase;
-import org.apache.derbyTesting.junit.JDBC;
-import org.apache.derbyTesting.junit.TestConfiguration;
-
-/**
- * Test case for DERBY-5236.
- */
-public class Derby5236Test extends BaseJDBCTestCase {
-    public Derby5236Test(String name) {
-        super(name);
-    }
-
-    public static Test suite() {
-        return TestConfiguration.defaultSuite(Derby5236Test.class);
-    }
-
-    /**
-     * Verify that string values aren't truncated when their UTF-8 encoded
-     * representation exceeds 32KB.
-     */
-    public void testLongColumn() throws SQLException {
-        PreparedStatement ps = prepareStatement(
-                "values cast(? as varchar(20000))");
-
-        char[] chars = new char[20000];
-        Arrays.fill(chars, '\u4e10');
-        String str = new String(chars);
-
-        ps.setString(1, str);
-        JDBC.assertSingleValueResultSet(ps.executeQuery(), str);
-    }
-}
