diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AbstractCommutativeType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AbstractCommutativeType.java
index 6a582678..8790b81f 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AbstractCommutativeType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AbstractCommutativeType.java
@@ -25,14 +25,20 @@
 
 import org.apache.cassandra.db.Column;
 import org.apache.cassandra.db.IColumnContainer;
+import org.apache.cassandra.utils.ByteBufferUtil;
 
-public abstract class AbstractCommutativeType extends AbstractType
+public abstract class AbstractCommutativeType extends AbstractType<Long>
 {
     public boolean isCommutative()
     {
         return true;
     }
 
+    public Long compose(ByteBuffer bytes)
+    {
+        return ByteBufferUtil.toLong(bytes);
+    }
+
     /**
      * create commutative column
      */
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AbstractType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AbstractType.java
index a284e7c0..baa4f64e 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AbstractType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AbstractType.java
@@ -36,7 +36,7 @@
  * should always handle those values even if they normally do not
  * represent a valid ByteBuffer for the type being compared.
  */
-public abstract class AbstractType implements Comparator<ByteBuffer>
+public abstract class AbstractType<T> implements Comparator<ByteBuffer>
 {
     public final Comparator<IndexInfo> indexComparator;
     public final Comparator<IndexInfo> indexReverseComparator;
@@ -92,11 +92,7 @@ public int compare(ByteBuffer o1, ByteBuffer o2)
         };
     }
 
-    /** @deprecated; use reverseComparator field instead */
-    public Comparator<ByteBuffer> getReverseComparator()
-    {
-        return reverseComparator;
-    }
+    public abstract T compose(ByteBuffer bytes);
 
     /** get a string representation of the bytes suitable for log messages */
     public abstract String getString(ByteBuffer bytes);
@@ -111,6 +107,12 @@ public ByteBuffer fromString(String source)
     /* validate that the byte array is a valid sequence for the type we are supposed to be comparing */
     public abstract void validate(ByteBuffer bytes) throws MarshalException;
 
+    /** @deprecated; use reverseComparator field instead */
+    public Comparator<ByteBuffer> getReverseComparator()
+    {
+        return reverseComparator;
+    }
+
     /* convenience method */
     public String getString(Collection<ByteBuffer> names)
     {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AsciiType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AsciiType.java
index bc54b2fd..fc82ec51 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AsciiType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AsciiType.java
@@ -28,7 +28,7 @@
 
 import org.apache.cassandra.utils.ByteBufferUtil;
 
-public class AsciiType extends BytesType
+public class AsciiType extends AbstractType<String>
 {
     public static final AsciiType instance = new AsciiType();
 
@@ -47,6 +47,16 @@ public String getString(ByteBuffer bytes)
         }
     }
 
+    public int compare(ByteBuffer o1, ByteBuffer o2)
+    {
+        return BytesType.bytesCompare(o1, o2);
+    }
+
+    public String compose(ByteBuffer bytes)
+    {
+        return getString(bytes);
+    }
+
     public ByteBuffer fromString(String source)
     {
         return ByteBuffer.wrap(source.getBytes(Charsets.US_ASCII));
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/BytesType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/BytesType.java
index db840a3a..c70ec27c 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/BytesType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/BytesType.java
@@ -26,13 +26,25 @@
 import org.apache.cassandra.utils.ByteBufferUtil;
 import org.apache.cassandra.utils.FBUtilities;
 
-public class BytesType extends AbstractType
+public class BytesType extends AbstractType<ByteBuffer>
 {
     public static final BytesType instance = new BytesType();
 
     BytesType() {} // singleton
     
+    public ByteBuffer compose(ByteBuffer bytes)
+    {
+        return bytes.duplicate();
+    }
+    
     public int compare(ByteBuffer o1, ByteBuffer o2)
+    {
+        return BytesType.bytesCompare(o1, o2);
+ 
+    }
+
+    
+    public static int bytesCompare(ByteBuffer o1, ByteBuffer o2)
     {
         if(null == o1){
             if(null == o2) return 0;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/IntegerType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/IntegerType.java
index b7373924..5ccfb412 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/IntegerType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/IntegerType.java
@@ -22,9 +22,10 @@
 import java.math.BigInteger;
 import java.nio.ByteBuffer;
 
+import org.apache.cassandra.utils.ByteBufferUtil;
 import org.apache.thrift.TBaseHelper;
 
-public final class IntegerType extends AbstractType
+public final class IntegerType extends AbstractType<BigInteger>
 {
     public static final IntegerType instance = new IntegerType();
 
@@ -56,6 +57,11 @@ private static int findMostSignificantByte(ByteBuffer bytes)
 
     IntegerType() {/* singleton */}
 
+    public BigInteger compose(ByteBuffer bytes)
+    {
+        return new BigInteger(ByteBufferUtil.getArray(bytes));
+    }
+
     public int compare(ByteBuffer lhs, ByteBuffer rhs)
     {
         int lhsLen = lhs.remaining();
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LexicalUUIDType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LexicalUUIDType.java
index 6aff6411..71dc9bf8 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LexicalUUIDType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LexicalUUIDType.java
@@ -26,12 +26,17 @@
 
 import org.apache.cassandra.utils.UUIDGen;
 
-public class LexicalUUIDType extends AbstractType
+public class LexicalUUIDType extends AbstractType<UUID>
 {
     public static final LexicalUUIDType instance = new LexicalUUIDType();
 
     LexicalUUIDType() {} // singleton
 
+    public UUID compose(ByteBuffer bytes)
+    {
+        return UUIDGen.getUUID(bytes);
+    }
+
     public int compare(ByteBuffer o1, ByteBuffer o2)
     {
         if (o1.remaining() == 0)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LocalByPartionerType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LocalByPartionerType.java
index ebc3ed3a..7c2414e4 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LocalByPartionerType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LocalByPartionerType.java
@@ -29,7 +29,7 @@
 
 /** for sorting columns representing row keys in the row ordering as determined by a partitioner.
  * Not intended for user-defined CFs, and will in fact error out if used with such. */
-public class LocalByPartionerType<T extends Token> extends AbstractType
+public class LocalByPartionerType<T extends Token> extends AbstractType<ByteBuffer>
 {
     private final IPartitioner<T> partitioner;
 
@@ -38,6 +38,11 @@ public LocalByPartionerType(IPartitioner<T> partitioner)
         this.partitioner = partitioner;
     }
 
+    public ByteBuffer compose(ByteBuffer bytes)
+    {
+        throw new UnsupportedOperationException("You can't do this with a local partitioner.");
+    }
+
     public String getString(ByteBuffer bytes)
     {
         return ByteBufferUtil.bytesToHex(bytes);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LongType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LongType.java
index 7d715cd9..c21891e8 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LongType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LongType.java
@@ -25,12 +25,17 @@
 
 import org.apache.cassandra.utils.ByteBufferUtil;
 
-public class LongType extends AbstractType
+public class LongType extends AbstractType<Long>
 {
     public static final LongType instance = new LongType();
 
     LongType() {} // singleton
 
+    public Long compose(ByteBuffer bytes)
+    {
+        return ByteBufferUtil.toLong(bytes);
+    }
+
     public int compare(ByteBuffer o1, ByteBuffer o2)
     {
         if (o1.remaining() == 0)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
index 521010e9..d9e44a02 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
@@ -26,12 +26,17 @@
 
 import org.apache.cassandra.utils.UUIDGen;
 
-public class TimeUUIDType extends AbstractType
+public class TimeUUIDType extends AbstractType<UUID>
 {
     public static final TimeUUIDType instance = new TimeUUIDType();
 
     TimeUUIDType() {} // singleton
 
+    public UUID compose(ByteBuffer bytes)
+    {
+        return UUIDGen.getUUID(bytes);
+    }
+
     public int compare(ByteBuffer o1, ByteBuffer o2)
     {
         if (o1.remaining() == 0)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/UTF8Type.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/UTF8Type.java
index c4ee5b6d..f2457c57 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/UTF8Type.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/UTF8Type.java
@@ -27,12 +27,22 @@
 
 import org.apache.cassandra.utils.ByteBufferUtil;
 
-public class UTF8Type extends BytesType
+public class UTF8Type extends AbstractType<String>
 {
     public static final UTF8Type instance = new UTF8Type();
 
     UTF8Type() {} // singleton
 
+    public String compose(ByteBuffer bytes)
+    {
+        return getString(bytes);
+    }
+
+    public int compare(ByteBuffer o1, ByteBuffer o2)
+    {
+        return BytesType.bytesCompare(o1, o2);
+    }
+
     public String getString(ByteBuffer bytes)
     {
         try
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/utils/ByteBufferUtil.java b/cassandra/trunk/src/java/org/apache/cassandra/utils/ByteBufferUtil.java
index 3337e9aa..23b492ee 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/utils/ByteBufferUtil.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/utils/ByteBufferUtil.java
@@ -368,6 +368,11 @@ public static int toInt(ByteBuffer bytes)
         return bytes.getInt(bytes.position());
     }
 
+    public static long toLong(ByteBuffer bytes)
+    {
+        return bytes.getLong(bytes.position());
+    }
+
     public static ByteBuffer bytes(int i)
     {
         return ByteBuffer.allocate(4).putInt(0, i);
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/RoundTripTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/RoundTripTest.java
index 5b146a5f..f9b81b4f 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/RoundTripTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/marshal/RoundTripTest.java
@@ -21,6 +21,7 @@ public void testInteger()
         assert IntegerType.instance.getString(IntegerType.instance.fromString("1")).equals("1");
         assert IntegerType.instance.fromString(IntegerType.instance.getString(ByteBuffer.wrap(bi.toByteArray())))
                 .equals(ByteBuffer.wrap(bi.toByteArray()));
+        assert IntegerType.instance.compose(ByteBuffer.wrap(bi.toByteArray())).equals(bi);
     }
     
     @Test
@@ -30,6 +31,7 @@ public void testLong()
         assert LongType.instance.getString(LongType.instance.fromString("1")).equals("1");
         assert LongType.instance.fromString(LongType.instance.getString(ByteBuffer.wrap(v)))
                 .equals(ByteBuffer.wrap(v));
+        assert LongType.instance.compose(ByteBuffer.wrap(v)) == 1L;
     }
     
     @Test
@@ -39,6 +41,7 @@ public void testAscii() throws Exception
         assert AsciiType.instance.getString(AsciiType.instance.fromString("abc")).equals("abc");
         assert AsciiType.instance.fromString(AsciiType.instance.getString(ByteBuffer.wrap(abc)))
                 .equals(ByteBuffer.wrap(abc));
+        assert AsciiType.instance.compose(ByteBuffer.wrap(abc)).equals("abc");
     }
     
     @Test
@@ -49,6 +52,7 @@ public void testBytes()
                 .equals(FBUtilities.bytesToHex(v));
         assert BytesType.instance.fromString(BytesType.instance.getString(ByteBuffer.wrap(v)))
                 .equals(ByteBuffer.wrap(v));
+        assert BytesType.instance.compose(ByteBuffer.wrap(v)).equals(ByteBuffer.wrap(v));
     }
     
     @Test
@@ -59,6 +63,7 @@ public void testLexicalUUID()
                 .equals(uuid.toString());
         assert LexicalUUIDType.instance.fromString(LexicalUUIDType.instance.getString(ByteBuffer.wrap(UUIDGen.decompose(uuid))))
                 .equals(ByteBuffer.wrap(UUIDGen.decompose(uuid)));
+        assert LexicalUUIDType.instance.compose(ByteBuffer.wrap(UUIDGen.decompose(uuid))).equals(uuid);
     }
     
     @Test
@@ -69,6 +74,7 @@ public void testTimeUUID()
                 .equals(uuid.toString());
         assert TimeUUIDType.instance.fromString(TimeUUIDType.instance.getString(ByteBuffer.wrap(UUIDGen.decompose(uuid))))
                 .equals(ByteBuffer.wrap(UUIDGen.decompose(uuid)));
+        assert TimeUUIDType.instance.compose(ByteBuffer.wrap(UUIDGen.decompose(uuid))).equals(uuid);
     }
     
     @Test
@@ -78,5 +84,6 @@ public void testUtf8() throws Exception
         assert UTF8Type.instance.getString(UTF8Type.instance.fromString(v)).equals(v);
         assert UTF8Type.instance.fromString(UTF8Type.instance.getString(ByteBuffer.wrap(v.getBytes(Charsets.UTF_8))))
                 .equals(ByteBuffer.wrap(v.getBytes(Charsets.UTF_8)));
+        assert UTF8Type.instance.compose(ByteBuffer.wrap(v.getBytes(Charsets.UTF_8))).equals(v);
     }
 }
