diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
index 92c699ed..b604d733 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
@@ -326,6 +326,7 @@ else if (!shutdown)
 				tr = new TransactionResourceImpl(driver, url, info);
 				active = true;
 				setupContextStack();
+				context = pushConnectionContext(tr.getContextManager());
 
 				if (!bootDatabase(info, false))
 				{
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DboPowersTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DboPowersTest.java
index 0b037df7..ab0cf83a 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DboPowersTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DboPowersTest.java
@@ -22,6 +22,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derbyTesting.functionTests.tests.jdbcapi;
 
 import java.sql.SQLException;
+import java.sql.Connection;
 import javax.sql.DataSource;
 import junit.framework.Test;
 import junit.framework.TestSuite;
@@ -445,8 +446,9 @@ public void testEncrypt() throws SQLException
         JDBCDataSource.setBeanProperty(ds, "user", user);
         JDBCDataSource.setBeanProperty(ds, "password", password);
 
+        Connection con = null;
         try {
-            ds.getConnection();
+            con = ds.getConnection();
             vetEncryptionAttempt(user, null);
         } catch (SQLException e) {
             vetEncryptionAttempt(user, e);
@@ -454,6 +456,12 @@ public void testEncrypt() throws SQLException
             return;
         }
 
+        try {
+            derby3038(con);
+        } catch (SQLException e) {
+            fail("derby3038 regression: " + e);
+        } 
+
         // we managed to encrypt: bring db down and up again to verify
         bringDbDown();
         bringDbUp(bootPassword);
@@ -753,4 +761,35 @@ private void vetAttempt (String user, SQLException e,
             break;
         }
     }
+
+
+    /**
+     * Make and call a stored procedure which opens a nested
+     * connection to expose DERBY-3038.
+     */
+    private void derby3038(Connection con) throws SQLException {
+
+        java.sql.Statement s = con.createStatement();
+
+        try {
+            s.executeUpdate
+                ("CREATE PROCEDURE DERBY3038PROC () " + 
+                 "LANGUAGE JAVA PARAMETER STYLE JAVA EXTERNAL NAME '" +
+                 DboPowersTest.class.getName() + ".derby3038Proc' " + 
+                 "READS SQL DATA");
+            s.executeUpdate("CALL DERBY3038PROC()");
+        } finally {
+            s.close();
+        }
+    }
+
+
+    public static void derby3038Proc() 
+        throws SQLException {
+
+        // Before fixing DERNY-3038 this connect would fail.
+        Connection con = java.sql.DriverManager.
+            getConnection("jdbc:default:connection");
+        con.close();
+    }
 }
