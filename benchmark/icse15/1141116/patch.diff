diff --git a/db/derby/code/branches/10.8/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java b/db/derby/code/branches/10.8/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
index 1de77094..746faa33 100644
--- a/db/derby/code/branches/10.8/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
+++ b/db/derby/code/branches/10.8/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
@@ -769,21 +769,10 @@ public Object run() throws IOException
 			break;
 		}
 		
-		// We accept clients on a separate thread so we don't run into a problem
-		// blocking on the accept when trying to process a shutdown
-		final ClientThread clientThread =	 
-			(ClientThread) AccessController.doPrivileged(
-								new PrivilegedExceptionAction() {
-									public Object run() throws Exception
-									{
-										return new ClientThread(thisControl, 
-																serverSocket);
-									}
-								}
-							);
-		clientThread.start();
-        
-        // Now that we are up and running, register any MBeans
+        // First, register any MBeans. We do this before we start accepting
+        // connections from the clients to ease testing of JMX (DERBY-3689).
+        // This way we know that once we can connect to the network server,
+        // the MBeans will be available.
         ManagementService mgmtService = ((ManagementService)
                 Monitor.getSystemModule(Module.JMX));
         
@@ -798,6 +787,20 @@ public Object run() throws Exception
                             NetworkServerMBean.class,
                             "type=NetworkServer");
                 			
+		// We accept clients on a separate thread so we don't run into a problem
+		// blocking on the accept when trying to process a shutdown
+		final ClientThread clientThread =	 
+			(ClientThread) AccessController.doPrivileged(
+								new PrivilegedExceptionAction() {
+									public Object run() throws Exception
+									{
+										return new ClientThread(thisControl, 
+																serverSocket);
+									}
+								}
+							);
+		clientThread.start();
+
 		try {
 			// wait until we are told to shutdown or someone sends an InterruptedException
 	        synchronized(shutdownSync) {
