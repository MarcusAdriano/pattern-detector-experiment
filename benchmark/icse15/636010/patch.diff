diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java
index f2b0bf94..54182e41 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/iapi/sql/execute/ResultSetFactory.java
@@ -21,6 +21,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.iapi.sql.execute;
 
+import org.apache.derby.catalog.TypeDescriptor;
+
 import org.apache.derby.iapi.error.StandardException;
 
 import org.apache.derby.iapi.sql.ResultSet;
@@ -641,6 +643,7 @@ NoPutResultSet getRowResultSet(Activation activation, GeneratedMethod row,
 											optimizer
 		@param optimizerEstimatedCost		Estimated total cost by optimizer
 		@param isDerbyStyleTableFunction    True if this is a Derby-style table function
+		@param returnType The name of the return type (a multi-set) as a string
 		@return the row as a result set.
 		@exception StandardException thrown when unable to create the
 			result set
@@ -657,7 +660,8 @@ public NoPutResultSet getVTIResultSet(Activation activation, GeneratedMethod row
 									 int scanIsolationLevel,
 									 double optimizerEstimatedRowCount,
 									 double optimizerEstimatedCost,
-									 boolean isDerbyStyleTableFunction
+                                     boolean isDerbyStyleTableFunction,
+                                     String returnType
                                           )
 		 throws StandardException;
 
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/iapi/types/TypeId.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/iapi/types/TypeId.java
index d393e7ed..bbd077a8 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/iapi/types/TypeId.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/iapi/types/TypeId.java
@@ -1037,6 +1037,15 @@ public boolean isLongVarcharTypeId()
 				return (formatId == StoredFormatIds.LONGVARCHAR_TYPE_ID);
 		}
 
+		/** 
+		 *Is this a LongVarbinary?
+		 * @return true if this is LongVarbinary
+		 */
+		public boolean isLongVarbinaryTypeId()
+		{
+				return (formatId == StoredFormatIds.LONGVARBIT_TYPE_ID);
+		}
+
 
 		/** 
 		 * Is this DATE/TIME or TIMESTAMP?
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
index d8dba847..585f95ec 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
@@ -21,6 +21,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package	org.apache.derby.impl.sql.compile;
 
+import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
+import org.apache.derby.iapi.services.io.FormatIdOutputStream;
 import org.apache.derby.iapi.services.loader.ClassInspector;
 import org.apache.derby.iapi.services.loader.GeneratedMethod;
 
@@ -1323,7 +1325,18 @@ private int getScanArguments(ActivationClassBuilder acb,
 		// Whether or not this is a Derby-style Table Function
 		mb.push(isDerbyStyleTableFunction);
 
-		return 15;
+		// Push the return type
+        if ( isDerbyStyleTableFunction )
+        {
+            String  returnType = freezeReturnType( methodCall.getRoutineInfo().getReturnType() );
+            mb.push( returnType );
+        }
+        else
+        {
+			mb.pushNull( String.class.getName());
+        }
+
+		return 16;
 	}
 
 	private void generateConstructor(ActivationClassBuilder acb,
@@ -1675,4 +1688,27 @@ private VTICosting  getVTICosting()
         }
     }
 
+    /**
+     * Serialize a row multi set as a string.
+     */
+    private String  freezeReturnType( TypeDescriptor td )
+        throws StandardException
+    {
+        try {
+            DynamicByteArrayOutputStream    dbaos = new DynamicByteArrayOutputStream();
+            FormatIdOutputStream                fios = new FormatIdOutputStream( dbaos );
+
+            fios.writeObject( td );
+            dbaos.flush();
+
+            byte[]      rawResult = dbaos.getByteArray();
+
+            return new String( rawResult );
+            
+        } catch (Throwable t)
+        {
+            throw StandardException.unexpectedUserException( t );
+        }
+    }
+    
 }
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java
index 360a696e..4626784e 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/GenericResultSetFactory.java
@@ -21,6 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.impl.sql.execute;
 
+import org.apache.derby.catalog.TypeDescriptor;
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.services.loader.GeneratedMethod;
 import org.apache.derby.iapi.services.sanity.SanityManager;
@@ -444,7 +445,8 @@ public NoPutResultSet getVTIResultSet(Activation activation, GeneratedMethod row
 									 int scanIsolationLevel,
 									 double optimizerEstimatedRowCount,
 									 double optimizerEstimatedCost,
-									 boolean isDerbyStyleTableFunction
+                                     boolean isDerbyStyleTableFunction,
+                                     String returnType
                                           )
 		throws StandardException
 	{
@@ -459,7 +461,8 @@ public NoPutResultSet getVTIResultSet(Activation activation, GeneratedMethod row
 								scanIsolationLevel,
 							    optimizerEstimatedRowCount,
 								optimizerEstimatedCost,
-								isDerbyStyleTableFunction
+								isDerbyStyleTableFunction,
+                                returnType
                                 );
 	}
 
diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java
index adcf5905..68c12b57 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/sql/execute/VTIResultSet.java
@@ -21,6 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.impl.sql.execute;
 
+import org.apache.derby.catalog.TypeDescriptor;
 import org.apache.derby.iapi.services.loader.ClassFactory;
 import org.apache.derby.iapi.services.loader.ClassInspector;
 
@@ -37,13 +38,17 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.sql.Activation;
 import org.apache.derby.iapi.sql.ResultDescription;
+import org.apache.derby.iapi.types.TypeId;
+import org.apache.derby.iapi.types.DataTypeDescriptor;
 import org.apache.derby.iapi.types.DataValueDescriptor;
+import org.apache.derby.iapi.types.VariableSizeDataValue;
 import org.apache.derby.iapi.sql.execute.ExecutionContext;
 
 import org.apache.derby.iapi.store.access.Qualifier;
 
 import org.apache.derby.iapi.error.StandardException;
 
+import org.apache.derby.iapi.services.io.FormatIdInputStream;
 import org.apache.derby.iapi.services.loader.GeneratedMethod;
 
 import org.apache.derby.iapi.types.RowLocation;
@@ -56,6 +61,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.vti.IFastPath;
 import org.apache.derby.vti.VTIEnvironment;
 
+import java.io.ByteArrayInputStream;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
@@ -94,6 +100,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 	private boolean isDerbyStyleTableFunction;
 
+    private String  returnType;
+
+    private DataTypeDescriptor[]    returnColumnTypes;
+
 	/**
 		Specified isolation level of SELECT (scan). If not set or
 		not application, it will be set to ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL
@@ -114,7 +124,8 @@ Specified isolation level of SELECT (scan). If not set or
 				 int scanIsolationLevel,
 			     double optimizerEstimatedRowCount,
 				 double optimizerEstimatedCost,
-				 boolean isDerbyStyleTableFunction
+				 boolean isDerbyStyleTableFunction,
+                 String returnType
                  ) 
 		throws StandardException
 	{
@@ -129,6 +140,7 @@ Specified isolation level of SELECT (scan). If not set or
 		this.pushedQualifiers = pushedQualifiers;
 		this.scanIsolationLevel = scanIsolationLevel;
 		this.isDerbyStyleTableFunction = isDerbyStyleTableFunction;
+        this.returnType = returnType;
 
 		if (erdNumber != -1)
 		{
@@ -541,6 +553,12 @@ public void populateFromResultSet(ExecRow row)
 	{
 		try
 		{
+            DataTypeDescriptor[]    columnTypes = null;
+            if ( isDerbyStyleTableFunction )
+            {
+                    columnTypes = getReturnColumnTypes();
+            }
+
 			boolean[] nullableColumn = setNullableColumnList();
 			DataValueDescriptor[] columns = row.getRowArray();
 			// ExecRows are 0-based, ResultSets are 1-based
@@ -563,6 +581,18 @@ public void populateFromResultSet(ExecRow row)
 									 */
 									nullableColumn[rsColNumber]);
 				rsColNumber++;
+
+                // for Derby-style table functions, coerce the value coming out
+                // of the ResultSet to the declared SQL type of the return
+                // column
+                if ( isDerbyStyleTableFunction )
+                {
+                    DataTypeDescriptor  dtd = columnTypes[ index ];
+                    DataValueDescriptor dvd = columns[ index ];
+
+                    cast( dtd, dvd );
+                }
+
 			}
 
 		} catch (StandardException se) {
@@ -626,4 +656,121 @@ public Object getSharedState(String key) {
 
 		return compileTimeConstants.get(key);
 	}
+
+    /**
+     * <p>
+     * Get the types of the columns returned by a Derby-style table function.
+     * </p>
+     */
+    private DataTypeDescriptor[]    getReturnColumnTypes()
+        throws StandardException
+    {
+        if ( returnColumnTypes == null )
+        {
+            TypeDescriptor      td = thawReturnType( returnType );
+            TypeDescriptor[]    columnTypes = td.getRowTypes();
+            int                         count = columnTypes.length;
+
+            returnColumnTypes = new DataTypeDescriptor[ count ];
+            for ( int i = 0; i < count; i++ )
+            {
+                returnColumnTypes[ i ] = DataTypeDescriptor.getType( columnTypes[ i ] );
+            }
+        }
+
+        return returnColumnTypes;
+    }
+
+    /**
+     * <p>
+     * Deserialize a type descriptor from a string.
+     * </p>
+     */
+    private TypeDescriptor  thawReturnType( String ice )
+        throws StandardException
+    {
+        try {
+            byte[]                                          bytes = ice.getBytes();
+            ByteArrayInputStream                    bais = new ByteArrayInputStream( bytes );
+            FormatIdInputStream                     fiis = new FormatIdInputStream( bais );
+            TypeDescriptor                              td = (TypeDescriptor) fiis.readObject();
+
+            return td;
+            
+        } catch (Throwable t)
+        {
+            throw StandardException.unexpectedUserException( t );
+        }
+    }
+    
+    /**
+     * <p>
+     * Cast the value coming out of the user-coded ResultSet. The
+     * rules are described in CastNode.getDataValueConversion().
+     * </p>
+     */
+    private void    cast( DataTypeDescriptor dtd, DataValueDescriptor dvd )
+        throws StandardException
+    {
+        TypeId      typeID = dtd.getTypeId();
+
+        if ( !typeID.isBlobTypeId() && !typeID.isClobTypeId() )
+        {
+            if ( typeID.isLongVarcharTypeId() ) { castLongvarchar( dtd, dvd ); }
+            else if ( typeID.isLongVarbinaryTypeId() ) { castLongvarbinary( dtd, dvd ); }
+            else
+            {
+                Object      o = dvd.getObject();
+
+                dvd.setObjectForCast( o, true, typeID.getCorrespondingJavaTypeName() );
+
+                if ( typeID.variableLength() )
+                {
+                    VariableSizeDataValue   vsdv = (VariableSizeDataValue) dvd;
+                    int                                 width;
+                    if ( typeID.isNumericTypeId() ) { width = dtd.getPrecision(); }
+                    else { width = dtd.getMaximumWidth(); }
+            
+                    vsdv.setWidth( width, dtd.getScale(), false );
+                }
+            }
+
+        }
+
+    }
+
+    /**
+     * <p>
+     * Truncate long varchars to the legal maximum.
+     * </p>
+     */
+    private void    castLongvarchar( DataTypeDescriptor dtd, DataValueDescriptor dvd )
+        throws StandardException
+    {
+        if ( dvd.getLength() > TypeId.LONGVARCHAR_MAXWIDTH )
+        {
+            dvd.setValue( dvd.getString().substring( 0, TypeId.LONGVARCHAR_MAXWIDTH ) );
+        }
+    }
+    
+    /**
+     * <p>
+     * Truncate long varbinary values to the legal maximum.
+     * </p>
+     */
+    private void    castLongvarbinary( DataTypeDescriptor dtd, DataValueDescriptor dvd )
+        throws StandardException
+    {
+        if ( dvd.getLength() > TypeId.LONGVARBIT_MAXWIDTH )
+        {
+            byte[]  original = dvd.getBytes();
+            byte[]  result = new byte[ TypeId.LONGVARBIT_MAXWIDTH ];
+
+            System.arraycopy( original, 0, result, 0, TypeId.LONGVARBIT_MAXWIDTH );
+            
+            dvd.setValue( result );
+        }
+    }
+    
+    
 }
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java
index e12873c7..ae924a71 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/StringColumnVTI.java
@@ -406,7 +406,9 @@ public BigDecimal getBigDecimal(int columnIndex) throws SQLException
         if ( columnValue == null ) { return null; }
         else
         {
-            return columnValue.getBytes();
+            try {
+                return columnValue.getBytes( "UTF-8" );
+            } catch (Throwable t) { throw new SQLException( t.getMessage() ); }
         }
     }
 
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
index 1cb112e7..bf83387d 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
@@ -25,6 +25,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.*;
 import java.sql.*;
 import java.text.NumberFormat;
+import java.util.Arrays;
 import java.util.ArrayList;
 
 import org.apache.derby.shared.common.reference.JDBC40Translation;
@@ -49,7 +50,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     //
     ///////////////////////////////////////////////////////////////////////////////////
 
-    private static  final   String  UTF8 = "UTF8";
+    private static  final   String  UTF8 = "UTF-8";
+
+    private static  final   int MAX_VARIABLE_DATA_TYPE_LENGTH = 32700;
     
     // functions to drop at teardown time
     private static  final   String[]    FUNCTION_NAMES =
@@ -64,6 +67,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
         "constructorException",
         "goodVTICosting",
         "allStringTypesFunction",
+        "coercionFunction",
     };
     
     // tables to drop at teardown time
@@ -173,7 +177,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private static  final   String[][]  ALL_STRING_TYPES_ROWS =
     {
         {
-            "char col",   // CHAR
+            "char col            ",   // CHAR
             //"clob col", long string types are not comparable
             //"long varchar col",   // LONG VARCHAR long string types are not comparable
             "varchar col",   // VARCHAR
@@ -919,6 +923,8 @@ public void tableFunctionTest()
         
         collationTest();
         subqueryTest();
+
+        coercionTest();
     }
     
     /**
@@ -1077,6 +1083,47 @@ private void  simpleVTIResults()
              SIMPLE_ROWS,
              new int[] { Types.VARCHAR, Types.VARCHAR }
              );
+        
+        goodStatement
+        (
+         "create function returnsACoupleRowsAsCHAR()\n" +
+         "returns TABLE\n" +
+         "  (\n" +
+         "     column0 char( 10 ),\n" +
+         "     column1 char( 10 )\n" +
+         "  )\n" +
+         "language java\n" +
+         "parameter style DERBY_JDBC_RESULT_SET\n" +
+         "no sql\n" +
+         "external name '" + getClass().getName() + ".returnsACoupleRows'\n"
+         );   
+        
+        String[][] CHAR_ROWS = new String[SIMPLE_ROWS.length][];
+        for (int r = 0; r < CHAR_ROWS.length; r++)
+        {
+        	CHAR_ROWS[r] = new String[SIMPLE_ROWS[r].length];
+        	for (int c = 0; c < CHAR_ROWS[r].length; c++)
+        	{
+        		String cv = SIMPLE_ROWS[r][c];
+        		if (cv != null)
+        		{
+        			if (cv.length() < 10)
+        			{
+        				StringBuffer sb = new StringBuffer(cv);
+        				for (int p = cv.length(); p < 10; p++)
+        					sb.append(' ');
+        				CHAR_ROWS[r][c] = sb.toString();
+        			}	
+        		}
+        	}
+        }
+        assertResults
+        (
+         "select s.*\n" +
+         "    from TABLE( returnsACoupleRowsAsCHAR() ) s\n",
+         CHAR_ROWS,
+         new int[] { Types.CHAR, Types.CHAR }
+         );        
     }
     
     /**
@@ -1514,6 +1561,130 @@ private void  subqueryTest()
              );
     }
     
+    /**
+     * Verify that variable length data values are coerced to their
+     * declared types, regardless of what actually is returned by the
+     * user-coded ResultSet. See DERBY-3341.
+     */
+    private void  coercionTest()
+        throws Exception
+    {
+        goodStatement
+            (
+             "create function coercionFunction( )\n" +
+             "returns TABLE\n" +
+             "  (\n" +
+             "     keyCol int,\n" +
+             "     charCol char( 5 ),\n" +
+             "     varcharCol varchar( 5 ),\n" +
+             "     charForBitDataCol char( 5 ) for bit data,\n" +
+             "     varcharForBitDataCol varchar( 5 ) for bit data,\n" +
+             "     decimalCol decimal( 5, 2 ),\n" +
+             "     longvarcharCol long varchar,\n" +
+             "     longvarcharForBitDataCol long varchar for bit data\n" +
+             "  )\n" +
+             "language java\n" +
+             "parameter style DERBY_JDBC_RESULT_SET\n" +
+             "no sql\n" +
+             "external name 'org.apache.derbyTesting.functionTests.tests.lang.TableFunctionTest.coercionFunction'\n"
+             );
+        
+        assertResults
+            (
+             "select *\n" +
+             "from TABLE( coercionFunction( ) ) as f order by keyCol\n",
+             new String[]
+             {
+                 "KEYCOL",
+                 "CHARCOL",
+                 "VARCHARCOL",
+                 "CHARFORBITDATACOL",
+                 "VARCHARFORBITDATACOL",
+                 "DECIMALCOL",
+                 "LONGVARCHARCOL",
+                 "LONGVARCHARFORBITDATACOL",
+             },
+             makeCoercionOutputs(),
+             new int[]
+             {
+                 Types.INTEGER,
+                 Types.CHAR,
+                 Types.VARCHAR,
+                 Types.BINARY,
+                 Types.VARBINARY,
+                 Types.DECIMAL,
+                 Types.LONGVARCHAR,
+                 Types.LONGVARBINARY,
+             }
+             );
+    }
+    
+    /**
+     * <p>
+     * Make the input rows for the coercion function.
+     * </p>
+     */
+    private static  String[][]  makeCoercionInputs()
+    {
+        return new String[][]
+        {
+            { "1", "abc", "abc", "abc", "abc", "12.3", makeString( 5 ), makeByteString( 5 )  },    // too short
+            { "2", "abcdef", "abcdef", "abcdef", "abcdef", "12.345", makeString( 32700 + 1 ), makeByteString( 32700 + 1 ) },   // too long
+            { "3", "abcde", "abcde", "abcde", "abcde", "123.45", makeString( 5 ), makeByteString( 5 ) },  //  just right
+        };
+    }
+
+    /**
+     * <p>
+     * Make the expected output rows which should come back from the coercion function.
+     * </p>
+     */
+    private static  String[][]  makeCoercionOutputs()
+    {
+        return new String[][]
+        {
+            { "1", "abc  ", "abc", "abc  ", "abc", "12.30", makeString( 5 ), makeByteString( 5 ) },
+            { "2", "abcde", "abcde", "abcde", "abcde", "12.34", makeString( 32700 ), makeByteString( 32700 ) },
+            { "3", "abcde", "abcde", "abcde", "abcde", "123.45", makeString( 5 ), makeByteString( 5 ) },
+        };
+    }
+
+    /**
+     * <p>
+     * Return a String of the specified length.
+     * </p>
+     */
+    private static  String  makeString( int count )
+    {
+        char[]  raw = new char[ count ];
+
+        Arrays.fill( raw, 'a' );
+
+        return new String( raw );
+    }
+    
+    /**
+     * <p>
+     * Return a String encoding a byte array of the specified length.
+     * </p>
+     */
+    private static  String  makeByteString( int count )
+    {
+        try {
+            byte[]  raw = new byte[ count ];
+            byte    value = (byte) 1;
+
+            Arrays.fill( raw, value );
+
+            return new String( raw, UTF8 );
+        }
+        catch (Throwable t)
+        {
+            println( t.getMessage() );
+            return null;
+        }
+    }
+    
     ///////////////////////////////////////////////////////////////////////////////////
     //
     // Derby FUNCTIONS
@@ -1566,6 +1737,14 @@ public  static  ResultSet appendFooAndBar( String text )
         return makeVTI( kernel );
     }
 
+    /**
+     * A VTI which returns variable-length data typed columns.
+     */
+    public  static  ResultSet coercionFunction()
+    {
+        return makeVTI( makeCoercionInputs() );
+    }
+
     ///////////////////////////////////////////////////////////////////////////////////
     //
     // MINIONS
@@ -1843,7 +2022,9 @@ private void assertResults( int[] expectedJdbcTypes, String[] columnNames, Resul
                 case Types.BINARY:
                 case Types.VARBINARY:
                 case Types.LONGVARBINARY:
-                    actualValue = squeezeString(  rs.getBytes( column ) );
+                    byte[]  bytes = rs.getBytes( column );
+
+                    actualValue = squeezeString(  bytes );
                     actualValueByName = squeezeString(  rs.getBytes( columnName ) );
                     break;
 
@@ -1871,7 +2052,7 @@ private void assertResults( int[] expectedJdbcTypes, String[] columnNames, Resul
                 assertEquals( (expectedValue == null), rs.wasNull() );
                 
                 if ( expectedValue == null )    { assertNull( actualValue ); }
-                else { assertTrue( expectedValue.equals( actualValue ) ); }
+                else { assertEquals(expectedValue, actualValue); }
             }
         }
 
@@ -2057,5 +2238,4 @@ private	double  readDoubleTag( String optimizerOutput, String tag )
         return 0.0;
     }
 
-
 }
