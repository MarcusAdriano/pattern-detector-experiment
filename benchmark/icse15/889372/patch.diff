diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/ArrayIterator.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/ArrayIterator.java
index 8458e367..e69de29b 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/ArrayIterator.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/ArrayIterator.java
@@ -1,83 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.mahout.cf.taste.impl.common;
-
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.NoSuchElementException;
-
-/** <p>Simple, fast {@link Iterator} for an array.</p> */
-public final class ArrayIterator<T> implements SkippingIterator<T>, Iterable<T> {
-
-  private final T[] array;
-  private int position;
-  private final int max;
-
-  /**
-   * <p>Creates an {@link ArrayIterator} over an entire array.</p>
-   *
-   * @param array array to iterate over
-   */
-  public ArrayIterator(T[] array) {
-    if (array == null) {
-      throw new IllegalArgumentException("array is null");
-    }
-    this.array = array; // yeah, not going to copy the array here, for performance
-    this.position = 0;
-    this.max = array.length;
-  }
-
-  @Override
-  public boolean hasNext() {
-    return position < max;
-  }
-
-  @Override
-  public T next() {
-    if (position >= array.length) {
-      throw new NoSuchElementException();
-    }
-    return array[position++];
-  }
-
-  /**
-   * @throws UnsupportedOperationException
-   */
-  @Override
-  public void remove() {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
-  public void skip(int n) {
-    if (n > 0) {
-      position += n;
-    }
-  }
-
-  @Override
-  public Iterator<T> iterator() {
-    return this;
-  }
-
-  @Override
-  public String toString() {
-    return "ArrayIterator[" + Arrays.toString(array) + '@' + position + ']';
-  }
-
-}
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/EmptyIterable.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/EmptyIterable.java
index 4f2d32ac..e69de29b 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/EmptyIterable.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/EmptyIterable.java
@@ -1,41 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.mahout.cf.taste.impl.common;
-
-import java.util.Iterator;
-
-/** <p>An {@link Iterable} over no elements: always produces an {@link Iterator} which iterates over nothing.</p> */
-public final class EmptyIterable<T> implements Iterable<T> {
-
-  private final Iterator<T> iterator;
-
-  public EmptyIterable() {
-    iterator = new EmptyIterator<T>();
-  }
-
-  @Override
-  public Iterator<T> iterator() {
-    return iterator;
-  }
-
-  @Override
-  public String toString() {
-    return "EmptyIterable[iterator:" + iterator + ']';
-  }
-
-}
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/EmptyIterator.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/EmptyIterator.java
index b2191383..e69de29b 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/EmptyIterator.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/EmptyIterator.java
@@ -1,51 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.mahout.cf.taste.impl.common;
-
-import java.util.Iterator;
-import java.util.NoSuchElementException;
-
-/** <p>An empty {@link Iterator}, which iterates over nothing.</p> */
-final class EmptyIterator<T> implements Iterator<T> {
-
-  /** @return false */
-  @Override
-  public boolean hasNext() {
-    return false;
-  }
-
-  /** @return never returns anything */
-  @Override
-  public T next() {
-    throw new NoSuchElementException();
-  }
-
-  /**
-   * @throws UnsupportedOperationException
-   */
-  @Override
-  public void remove() {
-    throw new UnsupportedOperationException();
-  }
-
-  @Override
-  public String toString() {
-    return "EmptyIterator";
-  }
-
-}
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/IteratorIterable.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/IteratorIterable.java
index 7de92f5d..e69de29b 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/IteratorIterable.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/IteratorIterable.java
@@ -1,57 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.mahout.cf.taste.impl.common;
-
-import java.util.Iterator;
-
-/**
- * <p>Simple utility class that makes an {@link Iterator} {@link Iterable} by returning the {@link Iterator}
- * itself.</p>
- */
-public final class IteratorIterable<T> implements Iterable<T> {
-
-  private Iterator<T> iterator;
-
-  /**
-   * <p>Constructs an {@link IteratorIterable} for an {@link Iterator}.</p>
-   *
-   * @param iterator {@link Iterator} on which to base this {@link IteratorIterable}
-   */
-  public IteratorIterable(Iterator<T> iterator) {
-    if (iterator == null) {
-      throw new IllegalArgumentException("iterator is null");
-    }
-    this.iterator = iterator;
-  }
-
-  @Override
-  public Iterator<T> iterator() {
-    if (iterator == null) {
-      throw new IllegalStateException("iterator() has already been called");
-    }
-    Iterator<T> result = iterator;
-    iterator = null;
-    return result;
-  }
-
-  @Override
-  public String toString() {
-    return "IteratorIterable[iterator:" + iterator + ']';
-  }
-
-}
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/IteratorUtils.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/IteratorUtils.java
index a4f7585e..e69de29b 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/IteratorUtils.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/IteratorUtils.java
@@ -1,90 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.mahout.cf.taste.impl.common;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.List;
-
-/** <p>{@link java.util.Iterator}-related methods without a better home.</p> */
-public final class IteratorUtils {
-
-  private IteratorUtils() {
-  }
-
-  /**
-   * @param iterable {@link Iterable} whose contents are to be put into a {@link List}
-   * @return a {@link List} with the objects one gets by iterating over the given {@link Iterable}
-   */
-  public static <K> List<K> iterableToList(Iterable<K> iterable) {
-    return iterableToList(iterable, null);
-  }
-
-  public static long[] longIteratorToList(LongPrimitiveIterator iterator) {
-    long[] result = new long[5];
-    int size = 0;
-    while (iterator.hasNext()) {
-      if (size == result.length) {
-        long[] newResult = new long[(result.length << 1)];
-        System.arraycopy(result, 0, newResult, 0, result.length);
-        result = newResult;
-      }
-      result[size++] = iterator.next();
-    }
-    if (size != result.length) {
-      long[] newResult = new long[size];
-      System.arraycopy(result, 0, newResult, 0, size);
-      result = newResult;
-    }
-    return result;
-  }
-
-  /**
-   * @param iterable   {@link Iterable} whose contents are to be put into a {@link List}
-   * @param comparator {@link Comparator} defining the sort order of the returned {@link List}
-   * @return a {@link List} with the objects one gets by iterating over the given {@link Iterable}, sorted according to
-   *         the given {@link Comparator}
-   */
-  public static <K> List<K> iterableToList(Iterable<K> iterable, Comparator<K> comparator) {
-    if (iterable == null) {
-      throw new IllegalArgumentException("iterable is null");
-    }
-    List<K> list;
-    if (iterable instanceof Collection) {
-      if (iterable instanceof List) {
-        list = (List<K>) iterable;
-      } else {
-        Collection<K> collection = (Collection<K>) iterable;
-        list = new ArrayList<K>(collection.size());
-        list.addAll(collection);
-      }
-    } else {
-      list = new ArrayList<K>();
-      for (K item : iterable) {
-        list.add(item);
-      }
-    }
-    if (comparator != null) {
-      Collections.sort(list, comparator);
-    }
-    return list;
-  }
-
-}
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/PermutingIterator.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/PermutingIterator.java
index 0462ddd7..e69de29b 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/PermutingIterator.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/PermutingIterator.java
@@ -1,75 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.mahout.cf.taste.impl.common;
-
-import org.apache.mahout.common.RandomUtils;
-
-import java.util.Iterator;
-import java.util.NoSuchElementException;
-import java.util.Random;
-
-/** An {@link Iterator} that iterates in a random order over a given sequence of elements. It is non-destructive. */
-public final class PermutingIterator<T> implements Iterator<T> {
-
-  private final T[] elements;
-  private final int[] permutation;
-  private int offset;
-
-  public PermutingIterator(T[] elements) {
-    this.elements = elements;
-    this.permutation = new int[elements.length];
-    offset = 0;
-    buildPermutation();
-  }
-
-  private void buildPermutation() {
-    int length = permutation.length;
-    for (int i = 0; i < length; i++) {
-      permutation[i] = i;
-    }
-    Random r = RandomUtils.getRandom();
-    for (int i = 0; i < length - 1; i++) {
-      int swapWith = i + r.nextInt(length - i);
-      if (i != swapWith) {
-        int temp = permutation[i];
-        permutation[i] = permutation[swapWith];
-        permutation[swapWith] = temp;
-      }
-    }
-  }
-
-  @Override
-  public boolean hasNext() {
-    return offset < elements.length;
-  }
-
-  @Override
-  public T next() {
-    if (offset >= elements.length) {
-      throw new NoSuchElementException();
-    }
-    return elements[permutation[offset++]];
-  }
-
-  /** @throws UnsupportedOperationException always */
-  @Override
-  public void remove() {
-    throw new UnsupportedOperationException();
-  }
-
-}
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/SamplingIterable.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/SamplingIterable.java
index bae51105..e69de29b 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/SamplingIterable.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/SamplingIterable.java
@@ -1,45 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.mahout.cf.taste.impl.common;
-
-import java.util.Iterator;
-
-/**
- * Wraps an {@link Iterable} whose {@link Iterable#iterator()} returns only some subset of the elements that it would,
- * as determined by a sampling rate parameter.
- */
-public final class SamplingIterable<T> implements Iterable<T> {
-
-  private final Iterable<? extends T> delegate;
-  private final double samplingRate;
-
-  public SamplingIterable(Iterable<? extends T> delegate, double samplingRate) {
-    this.delegate = delegate;
-    this.samplingRate = samplingRate;
-  }
-
-  @Override
-  public Iterator<T> iterator() {
-    return new SamplingIterator<T>(delegate.iterator(), samplingRate);
-  }
-
-  public static <T> Iterable<T> maybeWrapIterable(Iterable<T> delegate, double samplingRate) {
-    return samplingRate >= 1.0 ? delegate : new SamplingIterable<T>(delegate, samplingRate);
-  }
-
-}
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/SamplingIterator.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/SamplingIterator.java
index a4ff6329..e69de29b 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/SamplingIterator.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/SamplingIterator.java
@@ -1,101 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.mahout.cf.taste.impl.common;
-
-import org.apache.mahout.common.RandomUtils;
-
-import java.util.Iterator;
-import java.util.NoSuchElementException;
-import java.util.Random;
-
-/**
- * Wraps an {@link Iterator} and returns only some subset of the elements that it would, as determined by a sampling
- * rate parameter.
- */
-public final class SamplingIterator<T> implements Iterator<T> {
-
-  private static final Random r = RandomUtils.getRandom();
-
-  private final Iterator<? extends T> delegate;
-  private final double samplingRate;
-  private T next;
-  private boolean hasNext;
-
-  public SamplingIterator(Iterator<? extends T> delegate, double samplingRate) {
-    this.delegate = delegate;
-    this.samplingRate = samplingRate;
-    this.hasNext = true;
-    doNext();
-  }
-
-  @Override
-  public boolean hasNext() {
-    return hasNext;
-  }
-
-  @Override
-  public T next() {
-    if (hasNext) {
-      T result = next;
-      doNext();
-      return result;
-    }
-    throw new NoSuchElementException();
-  }
-
-  private void doNext() {
-    boolean found = false;
-    if (delegate instanceof SkippingIterator) {
-      SkippingIterator<? extends T> skippingDelegate = (SkippingIterator<? extends T>) delegate;
-      int toSkip = 0;
-      while (r.nextDouble() >= samplingRate) {
-        toSkip++;
-      }
-      // Really, would be nicer to select value from geometric distribution, for small values of samplingRate
-      if (toSkip > 0) {
-        skippingDelegate.skip(toSkip);
-      }
-      if (skippingDelegate.hasNext()) {
-        next = skippingDelegate.next();
-        found = true;
-      }
-    } else {
-      while (delegate.hasNext()) {
-        T delegateNext = delegate.next();
-        if (r.nextDouble() < samplingRate) {
-          next = delegateNext;
-          found = true;
-          break;
-        }
-      }
-    }
-    if (!found) {
-      hasNext = false;
-      next = null;
-    }
-  }
-
-  /**
-   * @throws UnsupportedOperationException
-   */
-  @Override
-  public void remove() {
-    throw new UnsupportedOperationException();
-  }
-
-}
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/GenericItemSimilarity.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/GenericItemSimilarity.java
index 21302f03..8a4ca197 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/GenericItemSimilarity.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/GenericItemSimilarity.java
@@ -20,8 +20,8 @@
 import org.apache.mahout.cf.taste.common.Refreshable;
 import org.apache.mahout.cf.taste.common.TasteException;
 import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
-import org.apache.mahout.cf.taste.impl.common.IteratorIterable;
-import org.apache.mahout.cf.taste.impl.common.IteratorUtils;
+import org.apache.mahout.common.iterator.IteratorIterable;
+import org.apache.mahout.common.iterator.IteratorUtils;
 import org.apache.mahout.common.RandomUtils;
 import org.apache.mahout.cf.taste.impl.recommender.TopItems;
 import org.apache.mahout.cf.taste.model.DataModel;
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/GenericUserSimilarity.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/GenericUserSimilarity.java
index 9d816ac4..439a2695 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/GenericUserSimilarity.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/GenericUserSimilarity.java
@@ -20,8 +20,8 @@
 import org.apache.mahout.cf.taste.common.Refreshable;
 import org.apache.mahout.cf.taste.common.TasteException;
 import org.apache.mahout.cf.taste.impl.common.FastByIDMap;
-import org.apache.mahout.cf.taste.impl.common.IteratorIterable;
-import org.apache.mahout.cf.taste.impl.common.IteratorUtils;
+import org.apache.mahout.common.iterator.IteratorIterable;
+import org.apache.mahout.common.iterator.IteratorUtils;
 import org.apache.mahout.common.RandomUtils;
 import org.apache.mahout.cf.taste.impl.recommender.TopItems;
 import org.apache.mahout.cf.taste.model.DataModel;
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/ArrayIterator.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/ArrayIterator.java
index e69de29b..112ea7bf 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/ArrayIterator.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/ArrayIterator.java
@@ -0,0 +1,85 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.common.iterator;
+
+import org.apache.mahout.cf.taste.impl.common.SkippingIterator;
+
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.NoSuchElementException;
+
+/** <p>Simple, fast {@link Iterator} for an array.</p> */
+public final class ArrayIterator<T> implements SkippingIterator<T>, Iterable<T> {
+
+  private final T[] array;
+  private int position;
+  private final int max;
+
+  /**
+   * <p>Creates an {@link ArrayIterator} over an entire array.</p>
+   *
+   * @param array array to iterate over
+   */
+  public ArrayIterator(T[] array) {
+    if (array == null) {
+      throw new IllegalArgumentException("array is null");
+    }
+    this.array = array; // yeah, not going to copy the array here, for performance
+    this.position = 0;
+    this.max = array.length;
+  }
+
+  @Override
+  public boolean hasNext() {
+    return position < max;
+  }
+
+  @Override
+  public T next() {
+    if (position >= array.length) {
+      throw new NoSuchElementException();
+    }
+    return array[position++];
+  }
+
+  /**
+   * @throws UnsupportedOperationException
+   */
+  @Override
+  public void remove() {
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
+  public void skip(int n) {
+    if (n > 0) {
+      position += n;
+    }
+  }
+
+  @Override
+  public Iterator<T> iterator() {
+    return this;
+  }
+
+  @Override
+  public String toString() {
+    return "ArrayIterator[" + Arrays.toString(array) + '@' + position + ']';
+  }
+
+}
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/DelegatingIterator.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/DelegatingIterator.java
index e69de29b..e0efa189 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/DelegatingIterator.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/DelegatingIterator.java
@@ -0,0 +1,51 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.common.iterator;
+
+import java.util.Iterator;
+
+/**
+ * An iterator that delegates to another iterator.
+ */
+public abstract class DelegatingIterator<T> implements Iterator<T> {
+
+  private final Iterator<? extends T> delegate;
+
+  protected DelegatingIterator(Iterator<T> delegate) {
+    if (delegate == null) {
+      throw new IllegalArgumentException("delegate is null");
+    }
+    this.delegate = delegate;
+  }
+
+  @Override
+  public final boolean hasNext() {
+    return delegate.hasNext();
+  }
+
+  @Override
+  public final T next() {
+    return delegate.next();
+  }
+
+  @Override
+  public final void remove() {
+    delegate.remove();
+  }
+
+}
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/EmptyIterable.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/EmptyIterable.java
index e69de29b..fbafb9cd 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/EmptyIterable.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/EmptyIterable.java
@@ -0,0 +1,41 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.common.iterator;
+
+import java.util.Iterator;
+
+/** <p>An {@link Iterable} over no elements: always produces an {@link Iterator} which iterates over nothing.</p> */
+public final class EmptyIterable<T> implements Iterable<T> {
+
+  private final Iterator<T> iterator;
+
+  public EmptyIterable() {
+    iterator = new EmptyIterator<T>();
+  }
+
+  @Override
+  public Iterator<T> iterator() {
+    return iterator;
+  }
+
+  @Override
+  public String toString() {
+    return "EmptyIterable[iterator:" + iterator + ']';
+  }
+
+}
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/EmptyIterator.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/EmptyIterator.java
index e69de29b..d1d02d15 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/EmptyIterator.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/EmptyIterator.java
@@ -0,0 +1,51 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.common.iterator;
+
+import java.util.Iterator;
+import java.util.NoSuchElementException;
+
+/** <p>An empty {@link Iterator}, which iterates over nothing.</p> */
+public final class EmptyIterator<T> implements Iterator<T> {
+
+  /** @return false */
+  @Override
+  public boolean hasNext() {
+    return false;
+  }
+
+  /** @return never returns anything */
+  @Override
+  public T next() {
+    throw new NoSuchElementException();
+  }
+
+  /**
+   * @throws UnsupportedOperationException
+   */
+  @Override
+  public void remove() {
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
+  public String toString() {
+    return "EmptyIterator";
+  }
+
+}
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/FixedSizeSamplingIterator.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/FixedSizeSamplingIterator.java
index e69de29b..a3718e8c 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/FixedSizeSamplingIterator.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/FixedSizeSamplingIterator.java
@@ -0,0 +1,55 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.common.iterator;
+
+import org.apache.mahout.common.RandomUtils;
+
+import java.util.Iterator;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+/**
+ * Sample a fixed number of elements from an Iterator.  The results can appear in any order.
+ */
+public final class FixedSizeSamplingIterator<T> extends DelegatingIterator<T> {
+
+  public FixedSizeSamplingIterator(int size, Iterator<T> source) {
+    super(buildDelegate(size, source));
+  }
+
+  private static <T> Iterator<T> buildDelegate(int size, Iterator<T> source) {
+    List<T> buf = new ArrayList<T>(size);
+    int sofar = 0;
+    while (source.hasNext()) {
+      T v = source.next();
+      sofar++;
+      if (buf.size() < size) {
+        buf.add(v);
+      } else {
+        Random generator = RandomUtils.getRandom();
+        int position = generator.nextInt(sofar);
+        if (position < buf.size()) {
+          buf.set(position, v);
+        }
+      }
+    }
+    return buf.iterator();
+  }
+
+}
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/IteratorIterable.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/IteratorIterable.java
index e69de29b..2ad38b35 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/IteratorIterable.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/IteratorIterable.java
@@ -0,0 +1,57 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.common.iterator;
+
+import java.util.Iterator;
+
+/**
+ * <p>Simple utility class that makes an {@link Iterator} {@link Iterable} by returning the {@link Iterator}
+ * itself.</p>
+ */
+public final class IteratorIterable<T> implements Iterable<T> {
+
+  private Iterator<T> iterator;
+
+  /**
+   * <p>Constructs an {@link IteratorIterable} for an {@link Iterator}.</p>
+   *
+   * @param iterator {@link Iterator} on which to base this {@link IteratorIterable}
+   */
+  public IteratorIterable(Iterator<T> iterator) {
+    if (iterator == null) {
+      throw new IllegalArgumentException("iterator is null");
+    }
+    this.iterator = iterator;
+  }
+
+  @Override
+  public Iterator<T> iterator() {
+    if (iterator == null) {
+      throw new IllegalStateException("iterator() has already been called");
+    }
+    Iterator<T> result = iterator;
+    iterator = null;
+    return result;
+  }
+
+  @Override
+  public String toString() {
+    return "IteratorIterable[iterator:" + iterator + ']';
+  }
+
+}
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/IteratorUtils.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/IteratorUtils.java
index e69de29b..56354639 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/IteratorUtils.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/IteratorUtils.java
@@ -0,0 +1,92 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.common.iterator;
+
+import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+
+/** <p>{@link java.util.Iterator}-related methods without a better home.</p> */
+public final class IteratorUtils {
+
+  private IteratorUtils() {
+  }
+
+  /**
+   * @param iterable {@link Iterable} whose contents are to be put into a {@link List}
+   * @return a {@link List} with the objects one gets by iterating over the given {@link Iterable}
+   */
+  public static <K> List<K> iterableToList(Iterable<K> iterable) {
+    return iterableToList(iterable, null);
+  }
+
+  public static long[] longIteratorToList(LongPrimitiveIterator iterator) {
+    long[] result = new long[5];
+    int size = 0;
+    while (iterator.hasNext()) {
+      if (size == result.length) {
+        long[] newResult = new long[(result.length << 1)];
+        System.arraycopy(result, 0, newResult, 0, result.length);
+        result = newResult;
+      }
+      result[size++] = iterator.next();
+    }
+    if (size != result.length) {
+      long[] newResult = new long[size];
+      System.arraycopy(result, 0, newResult, 0, size);
+      result = newResult;
+    }
+    return result;
+  }
+
+  /**
+   * @param iterable   {@link Iterable} whose contents are to be put into a {@link List}
+   * @param comparator {@link Comparator} defining the sort order of the returned {@link List}
+   * @return a {@link List} with the objects one gets by iterating over the given {@link Iterable}, sorted according to
+   *         the given {@link Comparator}
+   */
+  public static <K> List<K> iterableToList(Iterable<K> iterable, Comparator<K> comparator) {
+    if (iterable == null) {
+      throw new IllegalArgumentException("iterable is null");
+    }
+    List<K> list;
+    if (iterable instanceof Collection) {
+      if (iterable instanceof List) {
+        list = (List<K>) iterable;
+      } else {
+        Collection<K> collection = (Collection<K>) iterable;
+        list = new ArrayList<K>(collection.size());
+        list.addAll(collection);
+      }
+    } else {
+      list = new ArrayList<K>();
+      for (K item : iterable) {
+        list.add(item);
+      }
+    }
+    if (comparator != null) {
+      Collections.sort(list, comparator);
+    }
+    return list;
+  }
+
+}
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/PermutingIterator.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/PermutingIterator.java
index e69de29b..d453867b 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/PermutingIterator.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/PermutingIterator.java
@@ -0,0 +1,75 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.common.iterator;
+
+import org.apache.mahout.common.RandomUtils;
+
+import java.util.Iterator;
+import java.util.NoSuchElementException;
+import java.util.Random;
+
+/** An {@link Iterator} that iterates in a random order over a given sequence of elements. It is non-destructive. */
+public final class PermutingIterator<T> implements Iterator<T> {
+
+  private final T[] elements;
+  private final int[] permutation;
+  private int offset;
+
+  public PermutingIterator(T[] elements) {
+    this.elements = elements;
+    this.permutation = new int[elements.length];
+    offset = 0;
+    buildPermutation();
+  }
+
+  private void buildPermutation() {
+    int length = permutation.length;
+    for (int i = 0; i < length; i++) {
+      permutation[i] = i;
+    }
+    Random r = RandomUtils.getRandom();
+    for (int i = 0; i < length - 1; i++) {
+      int swapWith = i + r.nextInt(length - i);
+      if (i != swapWith) {
+        int temp = permutation[i];
+        permutation[i] = permutation[swapWith];
+        permutation[swapWith] = temp;
+      }
+    }
+  }
+
+  @Override
+  public boolean hasNext() {
+    return offset < elements.length;
+  }
+
+  @Override
+  public T next() {
+    if (offset >= elements.length) {
+      throw new NoSuchElementException();
+    }
+    return elements[permutation[offset++]];
+  }
+
+  /** @throws UnsupportedOperationException always */
+  @Override
+  public void remove() {
+    throw new UnsupportedOperationException();
+  }
+
+}
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/SamplingIterable.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/SamplingIterable.java
index e69de29b..aa3ddeb1 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/SamplingIterable.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/SamplingIterable.java
@@ -0,0 +1,45 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.common.iterator;
+
+import java.util.Iterator;
+
+/**
+ * Wraps an {@link Iterable} whose {@link Iterable#iterator()} returns only some subset of the elements that it would,
+ * as determined by a iterator rate parameter.
+ */
+public final class SamplingIterable<T> implements Iterable<T> {
+
+  private final Iterable<? extends T> delegate;
+  private final double samplingRate;
+
+  public SamplingIterable(Iterable<? extends T> delegate, double samplingRate) {
+    this.delegate = delegate;
+    this.samplingRate = samplingRate;
+  }
+
+  @Override
+  public Iterator<T> iterator() {
+    return new SamplingIterator<T>(delegate.iterator(), samplingRate);
+  }
+
+  public static <T> Iterable<T> maybeWrapIterable(Iterable<T> delegate, double samplingRate) {
+    return samplingRate >= 1.0 ? delegate : new SamplingIterable<T>(delegate, samplingRate);
+  }
+
+}
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/SamplingIterator.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/SamplingIterator.java
index e69de29b..84c027ee 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/SamplingIterator.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/SamplingIterator.java
@@ -0,0 +1,102 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.common.iterator;
+
+import org.apache.mahout.cf.taste.impl.common.SkippingIterator;
+import org.apache.mahout.common.RandomUtils;
+
+import java.util.Iterator;
+import java.util.NoSuchElementException;
+import java.util.Random;
+
+/**
+ * Wraps an {@link Iterator} and returns only some subset of the elements that it would, as determined by a iterator
+ * rate parameter.
+ */
+public final class SamplingIterator<T> implements Iterator<T> {
+
+  private static final Random r = RandomUtils.getRandom();
+
+  private final Iterator<? extends T> delegate;
+  private final double samplingRate;
+  private T next;
+  private boolean hasNext;
+
+  public SamplingIterator(Iterator<? extends T> delegate, double samplingRate) {
+    this.delegate = delegate;
+    this.samplingRate = samplingRate;
+    this.hasNext = true;
+    doNext();
+  }
+
+  @Override
+  public boolean hasNext() {
+    return hasNext;
+  }
+
+  @Override
+  public T next() {
+    if (hasNext) {
+      T result = next;
+      doNext();
+      return result;
+    }
+    throw new NoSuchElementException();
+  }
+
+  private void doNext() {
+    boolean found = false;
+    if (delegate instanceof SkippingIterator) {
+      SkippingIterator<? extends T> skippingDelegate = (SkippingIterator<? extends T>) delegate;
+      int toSkip = 0;
+      while (r.nextDouble() >= samplingRate) {
+        toSkip++;
+      }
+      // Really, would be nicer to select value from geometric distribution, for small values of samplingRate
+      if (toSkip > 0) {
+        skippingDelegate.skip(toSkip);
+      }
+      if (skippingDelegate.hasNext()) {
+        next = skippingDelegate.next();
+        found = true;
+      }
+    } else {
+      while (delegate.hasNext()) {
+        T delegateNext = delegate.next();
+        if (r.nextDouble() < samplingRate) {
+          next = delegateNext;
+          found = true;
+          break;
+        }
+      }
+    }
+    if (!found) {
+      hasNext = false;
+      next = null;
+    }
+  }
+
+  /**
+   * @throws UnsupportedOperationException
+   */
+  @Override
+  public void remove() {
+    throw new UnsupportedOperationException();
+  }
+
+}
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/StableFixedSizeSamplingIterator.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/StableFixedSizeSamplingIterator.java
index e69de29b..d5799d9b 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/StableFixedSizeSamplingIterator.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/common/iterator/StableFixedSizeSamplingIterator.java
@@ -0,0 +1,113 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.common.iterator;
+
+import org.apache.mahout.common.RandomUtils;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Random;
+
+/**
+ * Sample a fixed number of elements from an Iterator.  The results will appear in the original order at some
+ * cost in time and memory relative to a FixedSizeSampler.
+ */
+public class StableFixedSizeSamplingIterator<T> extends DelegatingIterator<T> {
+
+  public StableFixedSizeSamplingIterator(int size, Iterator<T> source) {
+    super(buildDelegate(size, source));
+  }
+
+  private static <T> Iterator<T> buildDelegate(int size, Iterator<T> source) {
+    List<Entry<T>> buf = new ArrayList<Entry<T>>(size);
+    int sofar = 0;
+    while (source.hasNext()) {
+      T v = source.next();
+      sofar++;
+      if (buf.size() < size) {
+        buf.add(new Entry<T>(sofar, v));
+      } else {
+        Random generator = RandomUtils.getRandom();
+        int position = generator.nextInt(sofar);
+        if (position < buf.size()) {
+          buf.get(position).value = v;
+        }
+      }
+    }
+
+    Collections.sort(buf);
+    return new DelegateIterator(buf);
+  }
+
+  private static class Entry<T> implements Comparable<Entry<T>> {
+    
+    private final int originalIndex;
+    private T value;
+
+    private Entry(int originalIndex, T value) {
+      this.originalIndex = originalIndex;
+      this.value = value;
+    }
+
+    @Override
+    public boolean equals(Object other) {
+      return other instanceof Entry && originalIndex == ((Entry<T>) other).originalIndex;
+    }
+
+    public int hashCode() {
+      return originalIndex;
+    }
+
+    @Override
+    public int compareTo(Entry<T> other) {
+      if (originalIndex < other.originalIndex) {
+        return -1;
+      } else if (originalIndex > other.originalIndex) {
+        return 1;
+      } else {
+        return 0;
+      }
+    }
+  }
+
+  private static class DelegateIterator<T> implements Iterator<T> {
+
+    private final Iterator<Entry<T>> iterator;
+
+    private DelegateIterator(List<Entry<T>> buf) {
+      iterator = buf.iterator();
+    }
+
+    @Override
+    public boolean hasNext() {
+      return iterator.hasNext();
+    }
+
+    @Override
+    public T next() {
+      return iterator.next().value;
+    }
+
+    @Override
+    public void remove() {
+      throw new UnsupportedOperationException("Can't change sampler contents");
+    }
+  }
+}
diff --git a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/common/EmptyIteratorTest.java b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/common/EmptyIteratorTest.java
index a4c55f96..e69de29b 100644
--- a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/common/EmptyIteratorTest.java
+++ b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/common/EmptyIteratorTest.java
@@ -1,49 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.mahout.cf.taste.impl.common;
-
-import org.apache.mahout.cf.taste.impl.TasteTestCase;
-
-import java.util.Iterator;
-import java.util.NoSuchElementException;
-
-public final class EmptyIteratorTest extends TasteTestCase {
-
-  public void testIterator() {
-    Iterator<Object> mock = new EmptyIterator<Object>();
-    assertFalse(mock.hasNext());
-    try {
-      mock.next();
-      fail("Should have thrown NoSuchElementException");
-    } catch (NoSuchElementException nsee) {
-      // good
-    }
-    try {
-      mock.remove();
-      fail("Should have thrown UnsupportedOperationException");
-    } catch (UnsupportedOperationException uoe) {
-      // good
-    }
-  }
-
-  public void testIterable() {
-    Iterable<Object> mock = new EmptyIterable<Object>();
-    assertNotNull(mock.iterator());
-  }
-
-}
diff --git a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/common/IteratorUtilsTest.java b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/common/IteratorUtilsTest.java
index 1e6fbb97..e69de29b 100644
--- a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/common/IteratorUtilsTest.java
+++ b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/cf/taste/impl/common/IteratorUtilsTest.java
@@ -1,69 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.mahout.cf.taste.impl.common;
-
-import org.apache.mahout.cf.taste.impl.TasteTestCase;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
-import java.util.TreeSet;
-
-public final class IteratorUtilsTest extends TasteTestCase {
-
-  private static final List<String> TEST_DATA;
-
-  static {
-    List<String> temp = new ArrayList<String>(3);
-    temp.add("bar");
-    temp.add("baz");
-    temp.add("foo");
-    TEST_DATA = Collections.unmodifiableList(temp);
-  }
-
-  public void testArray() {
-    String[] data = TEST_DATA.toArray(new String[3]);
-    assertEquals(TEST_DATA, IteratorUtils.iterableToList(new ArrayIterator<String>(data)));
-  }
-
-  public void testList() {
-    assertEquals(TEST_DATA, IteratorUtils.iterableToList(TEST_DATA));
-  }
-
-  public void testCollection() {
-    Collection<String> data = new TreeSet<String>();
-    data.add("foo");
-    data.add("bar");
-    data.add("baz");
-    assertEquals(TEST_DATA, IteratorUtils.iterableToList(data));
-  }
-
-  public void testComparator() {
-    Collection<String> data = new ArrayList<String>(3);
-    data.add("baz");
-    data.add("bar");
-    data.add("foo");
-    assertEquals(TEST_DATA, IteratorUtils.iterableToList(data, String.CASE_INSENSITIVE_ORDER));
-  }
-
-  public void testEmpty() {
-    assertEquals(0, IteratorUtils.iterableToList(new ArrayList<Object>(0)).size());
-  }
-
-}
diff --git a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/EmptyIteratorTest.java b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/EmptyIteratorTest.java
index e69de29b..64ac130b 100644
--- a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/EmptyIteratorTest.java
+++ b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/EmptyIteratorTest.java
@@ -0,0 +1,49 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.common.iterator;
+
+import org.apache.mahout.cf.taste.impl.TasteTestCase;
+
+import java.util.Iterator;
+import java.util.NoSuchElementException;
+
+public final class EmptyIteratorTest extends TasteTestCase {
+
+  public void testIterator() {
+    Iterator<Object> mock = new EmptyIterator<Object>();
+    assertFalse(mock.hasNext());
+    try {
+      mock.next();
+      fail("Should have thrown NoSuchElementException");
+    } catch (NoSuchElementException nsee) {
+      // good
+    }
+    try {
+      mock.remove();
+      fail("Should have thrown UnsupportedOperationException");
+    } catch (UnsupportedOperationException uoe) {
+      // good
+    }
+  }
+
+  public void testIterable() {
+    Iterable<Object> mock = new EmptyIterable<Object>();
+    assertNotNull(mock.iterator());
+  }
+
+}
diff --git a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/Integers.java b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/Integers.java
index e69de29b..1d06729c 100644
--- a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/Integers.java
+++ b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/Integers.java
@@ -0,0 +1,72 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.common.iterator;
+
+import java.util.Iterator;
+import java.util.NoSuchElementException;
+
+/**
+ * Handy source of well characterized Iterators and Iterables.
+ */
+public final class Integers {
+
+  private Integers() {
+  }
+
+  public static Iterator<Integer> iterator(final int n) {
+    return new IntegerIterator(n);
+  }
+
+  public static Iterable<Integer> iterable(final int n) {
+    return new Iterable<Integer>() {
+      @Override
+      public Iterator<Integer> iterator() {
+        return Integers.iterator(n);
+      }
+    };
+  }
+
+  private static class IntegerIterator implements Iterator<Integer> {
+
+    private int v;
+    private final int max;
+
+    IntegerIterator(int n) {
+      v = 0;
+      max = n;
+    }
+
+    @Override
+    public boolean hasNext() {
+      return v < max;
+    }
+
+    @Override
+    public Integer next() {
+      if (v >= max) {
+        throw new NoSuchElementException();
+      }
+      return v++;
+    }
+
+    @Override
+    public void remove() {
+      throw new UnsupportedOperationException("Can't remove anything from the set of integers");
+    }
+  }
+}
diff --git a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/IteratorUtilsTest.java b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/IteratorUtilsTest.java
index e69de29b..04dab9b0 100644
--- a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/IteratorUtilsTest.java
+++ b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/IteratorUtilsTest.java
@@ -0,0 +1,69 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.common.iterator;
+
+import org.apache.mahout.cf.taste.impl.TasteTestCase;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+import java.util.TreeSet;
+
+public final class IteratorUtilsTest extends TasteTestCase {
+
+  private static final List<String> TEST_DATA;
+
+  static {
+    List<String> temp = new ArrayList<String>(3);
+    temp.add("bar");
+    temp.add("baz");
+    temp.add("foo");
+    TEST_DATA = Collections.unmodifiableList(temp);
+  }
+
+  public void testArray() {
+    String[] data = TEST_DATA.toArray(new String[3]);
+    assertEquals(TEST_DATA, IteratorUtils.iterableToList(new ArrayIterator<String>(data)));
+  }
+
+  public void testList() {
+    assertEquals(TEST_DATA, IteratorUtils.iterableToList(TEST_DATA));
+  }
+
+  public void testCollection() {
+    Collection<String> data = new TreeSet<String>();
+    data.add("foo");
+    data.add("bar");
+    data.add("baz");
+    assertEquals(TEST_DATA, IteratorUtils.iterableToList(data));
+  }
+
+  public void testComparator() {
+    Collection<String> data = new ArrayList<String>(3);
+    data.add("baz");
+    data.add("bar");
+    data.add("foo");
+    assertEquals(TEST_DATA, IteratorUtils.iterableToList(data, String.CASE_INSENSITIVE_ORDER));
+  }
+
+  public void testEmpty() {
+    assertEquals(0, IteratorUtils.iterableToList(new ArrayList<Object>(0)).size());
+  }
+
+}
diff --git a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/SamplerCase.java b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/SamplerCase.java
index e69de29b..8109a47e 100644
--- a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/SamplerCase.java
+++ b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/SamplerCase.java
@@ -0,0 +1,89 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.common.iterator;
+
+import junit.framework.TestCase;
+
+import java.util.Iterator;
+import java.util.Arrays;
+
+import org.apache.mahout.common.RandomUtils;
+
+public abstract class SamplerCase extends TestCase {
+  // these provide access to the underlying implementation
+  protected abstract DelegatingIterator<Integer> createSampler(int n, Iterator<Integer> source);
+
+  protected abstract boolean isSorted();
+
+  @Override
+  protected void setUp() throws Exception {
+    RandomUtils.useTestSeed();
+  }
+
+  public void testEmptyCase() {
+    assertFalse(createSampler(100, Integers.iterator(0)).hasNext());
+  }
+
+  public void testSmallInput() {
+    DelegatingIterator<Integer> t = createSampler(10, Integers.iterator(1));
+    assertTrue(t.hasNext());
+    assertEquals(0, t.next().intValue());
+    assertFalse(t.hasNext());
+
+    t = createSampler(10, Integers.iterator(1));
+    assertTrue(t.hasNext());
+    assertEquals(0, t.next().intValue());
+    assertFalse(t.hasNext());
+  }
+
+  public void testAbsurdSize() {
+    DelegatingIterator<Integer> t = createSampler(0, Integers.iterator(2));
+    assertFalse(t.hasNext());
+  }
+
+  public void testExactSizeMatch() {
+    DelegatingIterator<Integer> t = createSampler(10, Integers.iterator(10));
+    for (int i = 0; i < 10; i++) {
+      assertTrue(t.hasNext());
+      assertEquals(i, t.next().intValue());
+    }
+    assertFalse(t.hasNext());
+  }
+
+  public void testSample() {
+    Iterator<Integer> source = Integers.iterator(100);
+    DelegatingIterator<Integer> t = createSampler(15, source);
+
+    // this is just a regression test, not a real test
+    Iterator<Integer> expected = Arrays.asList(16, 23, 2, 3, 32, 85, 6, 53, 8, 75, 15, 81, 12, 59, 14).iterator();
+    for (int i = 0; i < 15; i++) {
+      assertTrue(t.hasNext());
+      int actual = t.next();
+      // any of the first few values should be in the original places
+      if (actual < 15) {
+        assertEquals(i, actual);
+      }
+      assertTrue(actual >= 0 && actual < 100);
+
+      // this is just a regression test, but still of some value
+      assertEquals(expected.next().intValue(), actual);
+      assertFalse(source.hasNext());
+    }
+    assertFalse(t.hasNext());
+  }
+}
diff --git a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/TestFixedSizeSampler.java b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/TestFixedSizeSampler.java
index e69de29b..8543236a 100644
--- a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/TestFixedSizeSampler.java
+++ b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/TestFixedSizeSampler.java
@@ -0,0 +1,32 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.common.iterator;
+
+import java.util.Iterator;
+
+public class TestFixedSizeSampler extends SamplerCase {
+  @Override
+  protected DelegatingIterator<Integer> createSampler(int n, Iterator<Integer> source) {
+    return new FixedSizeSamplingIterator<Integer>(n, source);
+  }
+
+  @Override
+  protected boolean isSorted() {
+    return false;
+  }
+}
diff --git a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/TestSamplingIterator.java b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/TestSamplingIterator.java
index e69de29b..136f935c 100644
--- a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/TestSamplingIterator.java
+++ b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/TestSamplingIterator.java
@@ -0,0 +1,75 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.common.iterator;
+
+import junit.framework.TestCase;
+
+import java.util.Iterator;
+
+import org.apache.mahout.common.RandomUtils;
+
+public abstract class TestSamplingIterator extends TestCase {
+
+  @Override
+  protected void setUp() throws Exception {
+    RandomUtils.useTestSeed();
+  }
+
+  public void testEmptyCase() {
+    assertFalse(new SamplingIterator<Integer>(Integers.iterator(0), 0.9999).hasNext());
+    assertFalse(new SamplingIterator<Integer>(Integers.iterator(0), 1).hasNext());
+    assertFalse(new SamplingIterator<Integer>(Integers.iterator(0), 2).hasNext());
+  }
+
+  public void testSmallInput() {
+    Iterator<Integer> t = new SamplingIterator<Integer>(Integers.iterator(1), 0.9999);
+    assertTrue(t.hasNext());
+    assertEquals(0, t.next().intValue());
+    assertFalse(t.hasNext());
+  }
+
+  public void testAbsurdSampleRate() {
+    Iterator<Integer> t = new SamplingIterator<Integer>(Integers.iterator(2), 0);
+    assertFalse(t.hasNext());
+  }
+
+  public void testExactSizeMatch() {
+    Iterator<Integer> t = new SamplingIterator<Integer>(Integers.iterator(10), 1);
+    for (int i = 0; i < 10; i++) {
+      assertTrue(t.hasNext());
+      assertEquals(i, t.next().intValue());
+    }
+    assertFalse(t.hasNext());
+  }
+
+  public void testSample() {
+    for (int i = 0; i < 100; i++) {
+      Iterator<Integer> t = new SamplingIterator<Integer>(Integers.iterator(1000), 0.1);
+      int k = 0;
+      while (t.hasNext()) {
+        int v = t.next();
+        k++;
+        assertTrue(v >= 0);
+        assertTrue(v < 1000);
+      }
+      double sd = Math.sqrt(0.9 * 0.1 * 1000);
+      assertTrue(k >= 100 - 3 * sd);
+      assertTrue(k >= 100 + 3 * sd);
+    }
+  }
+}
diff --git a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/TestStableFixedSizeSampler.java b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/TestStableFixedSizeSampler.java
index e69de29b..88aee869 100644
--- a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/TestStableFixedSizeSampler.java
+++ b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/common/iterator/TestStableFixedSizeSampler.java
@@ -0,0 +1,32 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.common.iterator;
+
+import java.util.Iterator;
+
+public class TestStableFixedSizeSampler extends SamplerCase {
+  @Override
+  protected DelegatingIterator<Integer> createSampler(int n, Iterator<Integer> source) {
+    return new StableFixedSizeSamplingIterator<Integer>(n, source);
+  }
+
+  @Override
+  protected boolean isSorted() {
+    return true;
+  }
+}
