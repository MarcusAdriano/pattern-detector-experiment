diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java
index e5510c87..69ca27b2 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ModifyColumnNode.java
@@ -209,8 +209,13 @@ public void checkExistingConstraints(TableDescriptor td)
 					((existingConstraint.getConstraintType() == 
 					 DataDictionary.PRIMARYKEY_CONSTRAINT)))
 				{
-                    throw StandardException.newException(
-                         SQLState.LANG_MODIFY_COLUMN_EXISTING_CONSTRAINT, name);
+					String errorState = 
+						(getLanguageConnectionContext().getDataDictionary()
+								.checkVersion(DataDictionary.DD_VERSION_DERBY_10_4, 
+								null))
+						? SQLState.LANG_MODIFY_COLUMN_EXISTING_PRIMARY_KEY
+						: SQLState.LANG_MODIFY_COLUMN_EXISTING_CONSTRAINT;
+					throw StandardException.newException(errorState, name);
 				}
 				// unique key or primary key.
 				ConstraintDescriptorList 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableElementList.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableElementList.java
index bb529853..230e4dd5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableElementList.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/TableElementList.java
@@ -1070,7 +1070,13 @@ private void checkForNullColumns(ConstraintDefinitionNode cdn, TableDescriptor t
             // todo dtd may be null if the column does not exist, we should check that first
             if (dtd != null && dtd.isNullable())
             {
-                throw StandardException.newException(SQLState.LANG_DB2_ADD_UNIQUE_OR_PRIMARY_KEY_ON_NULL_COLS, colName);
+                String errorState = 
+                   (getLanguageConnectionContext().getDataDictionary()
+                        .checkVersion(DataDictionary.DD_VERSION_DERBY_10_4, null))
+                    ? SQLState.LANG_ADD_PRIMARY_KEY_ON_NULL_COLS
+                    : SQLState.LANG_DB2_ADD_UNIQUE_OR_PRIMARY_KEY_ON_NULL_COLS;
+
+                throw StandardException.newException(errorState, colName);
             }
         }
     }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
index bf896cc3..5d7b70e1 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
@@ -2601,7 +2601,14 @@ private void updateNewAutoincrementColumn(Activation activation, String columnNa
 									lcc,
 									false))
 			{	
-				if (errorMsg.equals(SQLState.LANG_NULL_DATA_IN_PRIMARY_KEY))
+				if (errorMsg.equals(SQLState.LANG_NULL_DATA_IN_PRIMARY_KEY_OR_UNIQUE_CONSTRAINT))
+				{	//alter table add primary key
+					 //soft upgrade mode
+					throw StandardException.newException(
+						SQLState.LANG_NULL_DATA_IN_PRIMARY_KEY_OR_UNIQUE_CONSTRAINT, 
+						td.getQualifiedName());
+				}
+				else if (errorMsg.equals(SQLState.LANG_NULL_DATA_IN_PRIMARY_KEY)) 
 				{	//alter table add primary key
 					throw StandardException.newException(
 						SQLState.LANG_NULL_DATA_IN_PRIMARY_KEY, 
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index 2e602205..d25529f4 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -771,6 +771,7 @@ The message identifier (ie. the value that matches a field in this class)
 	String LANG_DB2_INVALID_COLS_SPECIFIED                             = "42802";
         String LANG_DB2_INVALID_SELECT_COL_FOR_HAVING = "42803";
 	String LANG_DB2_ADD_UNIQUE_OR_PRIMARY_KEY_ON_NULL_COLS			   = "42831";
+	String LANG_ADD_PRIMARY_KEY_ON_NULL_COLS                           = "42831.S.1";
 	String LANG_DB2_REPLACEMENT_ERROR								   = "42815.S.713";
 	String LANG_DB2_COALESCE_DATATYPE_MISMATCH								   = "42815.S.171";
 	String LANG_DB2_TOO_LONG_FLOATING_POINT_LITERAL			           = "42820";
@@ -988,6 +989,7 @@ The message identifier (ie. the value that matches a field in this class)
 	String LANG_MODIFY_COLUMN_FKEY_CONSTRAINT						   = "42Z18";
 	String LANG_MODIFY_COLUMN_REFERENCED							   = "42Z19";
 	String LANG_MODIFY_COLUMN_EXISTING_CONSTRAINT					   = "42Z20";
+	String LANG_MODIFY_COLUMN_EXISTING_PRIMARY_KEY					   = "42Z20.S.1";
 
 	String LANG_AI_INVALID_INCREMENT								   = "42Z21";
 	String LANG_AI_INVALID_TYPE										   = "42Z22";
@@ -1301,7 +1303,8 @@ The message identifier (ie. the value that matches a field in this class)
 	String LANG_ADDING_NON_NULL_COLUMN_TO_NON_EMPTY_TABLE              = "X0Y57.S";
 	String LANG_ADD_PRIMARY_KEY_FAILED1                                = "X0Y58.S";
 	String LANG_ADD_CHECK_CONSTRAINT_FAILED                            = "X0Y59.S";
-	String LANG_NULL_DATA_IN_PRIMARY_KEY                 	   	   	   = "X0Y63.S";
+	String LANG_NULL_DATA_IN_PRIMARY_KEY_OR_UNIQUE_CONSTRAINT      	   = "X0Y63.S";
+	String LANG_NULL_DATA_IN_PRIMARY_KEY                               = "X0Y63.S.1";
 	String LANG_NO_COMMIT_IN_NESTED_CONNECTION                         = "X0Y66.S";
 	String LANG_NO_ROLLBACK_IN_NESTED_CONNECTION                       = "X0Y67.S";
 	String LANG_OBJECT_ALREADY_EXISTS                                  = "X0Y68.S";
