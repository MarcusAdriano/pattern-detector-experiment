diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/CassandraServer.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/CassandraServer.java
index 9072bd48..1b336740 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/CassandraServer.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/CassandraServer.java
@@ -221,9 +221,9 @@ public void start() throws IOException
     throws InvalidRequestException, UnavailableException, TimedOutException
     {
         ThriftValidation.validateColumnParent(keyspace, column_parent);
-        List<ReadCommand> commands = new ArrayList<ReadCommand>();
-        SliceRange range = predicate.slice_range;
+        ThriftValidation.validatePredicate(keyspace, column_parent, predicate);
 
+        List<ReadCommand> commands = new ArrayList<ReadCommand>();
         if (predicate.column_names != null)
         {
             for (String key: keys)
@@ -231,16 +231,15 @@ public void start() throws IOException
                 ThriftValidation.validateKey(key);
                 commands.add(new SliceByNamesReadCommand(keyspace, key, column_parent, predicate.column_names));
             }
-            ThriftValidation.validateColumns(keyspace, column_parent, predicate.column_names);
         }
         else
         {
+            SliceRange range = predicate.slice_range;
             for (String key: keys)
             {
                 ThriftValidation.validateKey(key);
                 commands.add(new SliceFromReadCommand(keyspace, key, column_parent, range.start, range.finish, range.reversed, range.count));
             }
-            ThriftValidation.validateRange(keyspace, column_parent, range);
         }
 
         return getSlice(commands, consistency_level);
@@ -556,10 +555,7 @@ else if (propertyName.equals("version"))
     {
         if (logger.isDebugEnabled())
             logger.debug("range_slice");
-        if (predicate.getSlice_range() != null)
-            ThriftValidation.validateRange(keyspace, column_parent, predicate.getSlice_range());
-        else
-            ThriftValidation.validateColumns(keyspace, column_parent, predicate.getColumn_names());
+        ThriftValidation.validatePredicate(keyspace, column_parent, predicate);
         if (!StorageService.getPartitioner().preservesOrder())
         {
             throw new InvalidRequestException("range queries may only be performed against an order-preserving partitioner");
diff --git a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/ThriftValidation.java b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/ThriftValidation.java
index 234a19f4..9afac9c1 100644
--- a/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/ThriftValidation.java
+++ b/incubator/cassandra/branches/cassandra-0.5/src/java/org/apache/cassandra/service/ThriftValidation.java
@@ -205,4 +205,18 @@ public static void validateRange(String keyspace, ColumnParent column_parent, Sl
             throw new InvalidRequestException("range finish must come after start in the order of traversal");
         }
     }
+
+    public static void validatePredicate(String keyspace, ColumnParent column_parent, SlicePredicate predicate)
+            throws InvalidRequestException
+    {
+        if (predicate.column_names == null && predicate.slice_range == null)
+            throw new InvalidRequestException("predicate column_names and slice_range may not both be null");
+        if (predicate.column_names != null && predicate.slice_range != null)
+            throw new InvalidRequestException("predicate column_names and slice_range may not both be present");
+
+        if (predicate.getSlice_range() != null)
+            validateRange(keyspace, column_parent, predicate.slice_range);
+        else
+            validateColumns(keyspace, column_parent, predicate.column_names);
+    }
 }
