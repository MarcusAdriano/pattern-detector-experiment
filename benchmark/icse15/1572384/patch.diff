diff --git a/db/derby/code/branches/10.10/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java b/db/derby/code/branches/10.10/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
index 4c108418..d462f890 100644
--- a/db/derby/code/branches/10.10/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
+++ b/db/derby/code/branches/10.10/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
@@ -2762,8 +2762,9 @@ private void writeLDString(String msg) throws Exception
             }
             else
             {
-                commandOs.writeShort(msg.length());
-                writeString(msg);
+                byte[] msgBytes = msg.getBytes(DEFAULT_ENCODING);
+                commandOs.writeShort(msgBytes.length);
+                commandOs.write(msgBytes);
             }
         }
         catch (IOException e)
diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java
index d44934da..4f019adb 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java
@@ -51,6 +51,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 public class NetworkServerControlApiTest extends BaseJDBCTestCase {
 
+    private static final String NON_ASCII_USER = "bj\u00F8rn";
+    private static final String NON_ASCII_PASSWORD = "l\u00F8yndom";
+
     private static String POLICY_FILE_NAME="functionTests/tests/derbynet/NetworkServerControlApiTest.policy";
     private static String TARGET_POLICY_FILE_NAME="server.policy";
     
@@ -167,6 +170,25 @@ public void xtestTraceSystemPropertiesHasPermission() throws SQLException{
         assertTrue(fileExists(derbysystemhome+"/trace/Server1.trace"));
     }
     
+    /**
+     * Run the shutdown command with credentials that contain non-ASCII
+     * characters. Regression test case for DERBY-6457.
+     */
+    public void xtestShutdownWithNonASCIICredentials() throws Exception {
+        NetworkServerControl control =
+                NetworkServerTestSetup.getNetworkServerControl();
+
+        // Verify that the server is up.
+        NetworkServerTestSetup.pingForServerStart(control);
+
+        // Shut down the server with the default credentials, which contain
+        // non-ASCII characters. See NON_ASCII_USER and NON_ASCII_PASSWORD.
+        // This call used to hang forever before DERBY-6457 was fixed.
+        control.shutdown();
+
+        // Verify that the server is down.
+        NetworkServerTestSetup.pingForServerUp(control, null, false);
+    }
     
     /**
      * Test NetworkServerControl ping command.
@@ -318,6 +340,10 @@ public static Test suite()
         
         suite = decorateSystemPropertyTests(suite);
                     
+        suite.addTest(decorateShutdownTest(
+                "xtestShutdownWithNonASCIICredentials",
+                NON_ASCII_USER, NON_ASCII_PASSWORD));
+
         return suite;
     }
 
@@ -340,6 +366,30 @@ private static TestSuite decorateSystemPropertyTests(TestSuite suite) {
         return suite;
     }
 
+    /**
+     * Decorate a test case that will attempt to shut down a network server
+     * using the supplied credentials. The network server will run with
+     * authentication enabled.
+     *
+     * @param testName name of the test case to decorate
+     * @param user the user that should attempt to shut down the server
+     * @param password the password to be used when shutting down the server
+     * @return the decorated test case
+     */
+    private static Test decorateShutdownTest(String testName,
+                                             String user, String password) {
+        Properties props = new Properties();
+        props.setProperty("derby.connection.requireAuthentication", "true");
+        props.setProperty("derby.authentication.provider", "BUILTIN");
+        props.setProperty("derby.user." + user, password);
+
+        Test test = new NetworkServerControlApiTest(testName);
+        test = TestConfiguration.clientServerDecorator(test);
+        test = new SystemPropertyTestSetup(test, props, true);
+        test = TestConfiguration.changeUserDecorator(test, user, password);
+        return test;
+    }
+
      // test fixtures from maxthreads
     public void test_04_MaxThreads_0() throws Exception {
         NetworkServerControl server = new NetworkServerControl(InetAddress.getLocalHost(),TestConfiguration.getCurrent().getPort());
diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java
index b6c57952..3a2488c3 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java
@@ -125,6 +125,24 @@ protected void setUp()
     protected void tearDown()
     throws java.lang.Exception
     {
+        // Shut down the engine to restore any static properties. Do that
+        // before the properties are reset to their old values, since the
+        // engine shutdown may rely on some of the system properties. For
+        // example, the system properties could contain the user database
+        // (in derby.user.* style properties), and clearing those first
+        // would lead to "invalid authentication" errors when attempting
+        // to shut down the engine.
+        try {
+            if (staticProperties) {
+                TestConfiguration.getCurrent().shutdownEngine();
+            }
+        } finally {
+            restoreOldPropertyValues();
+            oldValues = null;
+        }
+    }
+
+    private void restoreOldPropertyValues() throws Exception {
     	// Clear all the system properties set by the new set
     	// that will not be reset by the old set.
        	for (Enumeration e = newValues.propertyNames(); e.hasMoreElements();)
@@ -135,10 +153,6 @@ protected void tearDown()
        	}
     	// and then reset nay old values
     	setProperties(oldValues);
-    	// shutdown engine to restore any static properties
-    	if (staticProperties)
-    		TestConfiguration.getCurrent().shutdownEngine();
-        oldValues = null;
     }
     
     private void setProperties(Properties values)
