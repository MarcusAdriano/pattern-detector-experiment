diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
index 0b68ff11..b5a24035 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
@@ -39,10 +39,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
 import org.apache.derbyTesting.junit.TestConfiguration;
 
-import org.apache.derby.iapi.reference.Property;
-import org.apache.derby.iapi.tools.i18n.LocalizedResource;
 import org.apache.derby.drda.NetworkServerControl;
-import org.apache.derby.impl.drda.NetworkServerControlImpl;
 
 /**
  * This Junit test class tests whether the server comes up under a security
@@ -95,7 +92,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
     private static final Outcome FAILED_NO_AUTHENTICATION = new Outcome( false, authenticationFailure() );
     private static final Outcome RUNNING_SECURITY_NOT_BOOTED = new Outcome( true, "" );
-    private static final Outcome RUNNING_SECURITY_BOOTED = new Outcome( true, getTextMessage( "DRDA_SecurityInstalled.I" ) );
+    private static final Outcome RUNNING_SECURITY_BOOTED = new Outcome( true,  serverBootedOK() );
 
         
     // startup state
@@ -108,7 +105,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     // helper state for intercepting server error messages
     private InputStream[]  _inputStreamHolder;
 
-    private static  LocalizedResource   _messageResolver;
     
     ///////////////////////////////////////////////////////////////////////////////////
     //
@@ -238,8 +234,7 @@ protected void tearDown() throws Exception
 
         if ( setUnsecureOption )
         {
-            list.add
-                ( '-' + NetworkServerControlImpl.DASHARGS[ NetworkServerControlImpl.DASHARG_UNSECURE ] );
+            list.add( "-noSecurityManager" );
         }
         
         String[]    result = new String[ list.size() ];
@@ -328,36 +323,18 @@ private String  getServerOutput()
         return new String( inputBuffer, 0, bytesRead );
     }
 
-    private static  LocalizedResource   getMessageResolver()
-    {
-        if ( _messageResolver == null )
-        {
-            _messageResolver = new LocalizedResource( null, null, "org.apache.derby.loc.drda.messages" );
-        }
-
-        return _messageResolver;
-    }
-
-    private static  String  getTextMessage( String key )
-    {
-        return getTextMessage( key, new String[]{} );
-    }
-    private static  String  getTextMessage( String key, Object[] args )
+    private static  String  authenticationFailure()
     {
-        return getMessageResolver().getTextMessage( key, args );
+        return "Network Server startup failed. " +
+            "User authentication should be enabled " +
+            "before the Network Server installs a security manager. " +
+            "Please either set the 'derby.connection.requireAuthentication' " +
+            "system property to true or run the network server with the '-noSecurityManager' option.";
     }
     
-    private static  String  authenticationFailure()
+    private static  String  serverBootedOK()
     {
-        return getTextMessage
-            (
-             "DRDA_NoAuthentication.S",
-             new String[]
-                {
-                    Property.REQUIRE_AUTHENTICATION_PARAMETER,
-                    NetworkServerControlImpl.DASHARGS[  NetworkServerControlImpl.DASHARG_UNSECURE ]
-                }
-             );
+        return "Security manager installed using the Basic server security policy.";
     }
 
     private boolean serverCameUp()
