diff --git a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/csPrepStmt.java b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/csPrepStmt.java
index 4d7f9388..22ea114f 100644
--- a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/csPrepStmt.java
+++ b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/csPrepStmt.java
@@ -148,12 +148,12 @@ public static void main (String args[])
 			ps.setBigDecimal(8, new BigDecimal("88.88"));
 			ps.setBigDecimal(9, new BigDecimal("99.1"));
 			ps.setString(10, "column11string");
-			byte[] c11ba = new String("column11vcstring").getBytes();
+			byte[] c11ba = new String("column11vcstring").getBytes("UTF-8");
 			int len = c11ba.length;
 			ps.setAsciiStream(11, new ByteArrayInputStream(c11ba), len);
-			byte[] c12ba = new String("column12lvcstring").getBytes();
+			byte[] c12ba = new String("column12lvcstring").getBytes("UTF-8");
 			len = c12ba.length;
-			ps.setCharacterStream(12, new InputStreamReader(new ByteArrayInputStream(c12ba)),len);
+			ps.setCharacterStream(12, new InputStreamReader(new ByteArrayInputStream(c12ba),"UTF-8"),len);
 			ps.setBytes(13,ba);
 			ps.setBinaryStream(14, new ByteArrayInputStream(ba), ba.length);
 			ps.setBytes(15,ba);
diff --git a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/prepStmt.java b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/prepStmt.java
index a9fc1979..7bb729e5 100644
--- a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/prepStmt.java
+++ b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/prepStmt.java
@@ -148,12 +148,12 @@ public static void main (String args[])
 			ps.setBigDecimal(7, new BigDecimal("77.77"));
 			ps.setBigDecimal(8, new BigDecimal("8.1"));
 			ps.setString(9, "column9string");
-			byte[] c10ba = new String("column10vcstring").getBytes();
+			byte[] c10ba = new String("column10vcstring").getBytes("UTF-8");
 			int len = c10ba.length;
 			ps.setAsciiStream(10, new ByteArrayInputStream(c10ba), len);
-			byte[] c11ba = new String("column11lvcstring").getBytes();
+			byte[] c11ba = new String("column11lvcstring").getBytes("UTF-8");
 			len = c11ba.length;
-			ps.setCharacterStream(11, new InputStreamReader(new ByteArrayInputStream(c11ba)),len);
+			ps.setCharacterStream(11, new InputStreamReader(new ByteArrayInputStream(c11ba),"UTF-8"),len);
 			ps.setBytes(12,ba);
 			// Calling setBytes on the varchar for bit data type because it 
 			// Appears DB2 UDB accepts this only for the BLOB data type...
