diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/Sort.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/Sort.java
index 251724d1..0650d37f 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/Sort.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/Sort.java
@@ -205,7 +205,7 @@ public int hashCode() {
   /** Whether the relevance score is needed to sort documents. */
   boolean needsScores() {
     for (SortField sortField : fields) {
-      if (sortField.getType() == SortField.Type.SCORE) {
+      if (sortField.needsScores()) {
         return true;
       }
     }
diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/SortField.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/SortField.java
index 7f7122e9..12bbfee1 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/SortField.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/search/SortField.java
@@ -428,4 +428,9 @@ public void setBytesComparator(Comparator<BytesRef> b) {
   public SortField rewrite(IndexSearcher searcher) throws IOException {
     return this;
   }
+  
+  /** Whether the relevance score is needed to sort documents. */
+  public boolean needsScores() {
+    return type == Type.SCORE;
+  }
 }
diff --git a/lucene/dev/branches/branch_4x/lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionSortField.java b/lucene/dev/branches/branch_4x/lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionSortField.java
index 98962a4c..7e155477 100644
--- a/lucene/dev/branches/branch_4x/lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionSortField.java
+++ b/lucene/dev/branches/branch_4x/lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionSortField.java
@@ -36,4 +36,9 @@
   public FieldComparator<?> getComparator(final int numHits, final int sortPos) throws IOException {
     return new ExpressionComparator(source, numHits);
   }
+
+  @Override
+  public boolean needsScores() {
+    return true; // TODO: maybe we can optimize by "figuring this out" somehow...
+  }
 }
