diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/cache/InstrumentedCache.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/cache/InstrumentedCache.java
index a876ed6a..4ed61930 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/cache/InstrumentedCache.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/cache/InstrumentedCache.java
@@ -33,6 +33,7 @@
     private final AtomicLong hits = new AtomicLong(0);
     private final AtomicLong lastRequests = new AtomicLong(0);
     private final AtomicLong lastHits = new AtomicLong(0);
+    private volatile boolean capacityModified;
 
     public InstrumentedCache(int capacity)
     {
@@ -69,10 +70,16 @@ public int getCapacity()
         return capacity;
     }
 
+    public boolean isCapacityModified()
+    {
+        return capacityModified;
+    }
+
     public void setCapacity(int capacity)
     {
         map.setCapacity(capacity);
         this.capacity = capacity;
+        capacityModified = true;
      }
 
     public int getSize()
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/SSTableTracker.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/SSTableTracker.java
index 6d1f9253..6eab84de 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/SSTableTracker.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/io/SSTableTracker.java
@@ -107,6 +107,8 @@ public synchronized void updateCacheSizes()
     {
         long keys = estimatedKeys();
         
+        if (!keyCache.isCapacityModified())
+        {
         int keyCacheSize = DatabaseDescriptor.getKeysCachedFor(ksname, cfname, keys);
         if (keyCacheSize != keyCache.getCapacity())
         {
@@ -115,7 +117,10 @@ public synchronized void updateCacheSizes()
                 logger.debug("key cache capacity for " + cfname + " is " + keyCacheSize);
             keyCache.setCapacity(keyCacheSize);
         }
+        }
 
+        if (!rowCache.isCapacityModified())
+        {
         int rowCacheSize = DatabaseDescriptor.getRowsCachedFor(ksname, cfname, keys);
         if (rowCacheSize != rowCache.getCapacity())
         {   
@@ -124,6 +129,7 @@ public synchronized void updateCacheSizes()
             rowCache.setCapacity(rowCacheSize);
         }
     }
+    }
 
     // the modifiers create new, unmodifiable objects each time; the volatile fences the assignment
     // so we don't need any further synchronization for the common case here
