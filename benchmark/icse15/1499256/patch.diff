diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/timer/Java5SingletonTimerFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/timer/Java5SingletonTimerFactory.java
index d4e45d46..e69de29b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/timer/Java5SingletonTimerFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/timer/Java5SingletonTimerFactory.java
@@ -1,54 +0,0 @@
-/*
-
-   Derby - Class org.apache.derby.impl.services.timer.Java5SingletonTimerFactory
-
-   Licensed to the Apache Software Foundation (ASF) under one or more
-   contributor license agreements.  See the NOTICE file distributed with
-   this work for additional information regarding copyright ownership.
-   The ASF licenses this file to you under the Apache License, Version 2.0
-   (the "License"); you may not use this file except in compliance with
-   the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-
- */
-
-package org.apache.derby.impl.services.timer;
-
-import java.util.TimerTask;
-import java.util.concurrent.atomic.AtomicInteger;
-
-/**
- * Extension of {@code SingletonTimerFactory} that takes advantage of the
- * new {@code Timer.purge()} method in Java 5.
- */
-public class Java5SingletonTimerFactory extends SingletonTimerFactory {
-    /**
-     * The number of times {@link #cancel(TimerTask)} has been called.
-     * Used for determining whether it's time to purge cancelled tasks from
-     * the timer.
-     */
-    private final AtomicInteger cancelCount = new AtomicInteger();
-
-    @Override public void cancel(TimerTask task) {
-        super.cancel(task);
-
-        // DERBY-6114: Cancelled tasks stay in the timer's queue until they
-        // are scheduled to run, unless we call the purge() method. This
-        // prevents garbage collection of the tasks. Even though the tasks
-        // are small objects, there could be many of them, especially when
-        // both the transaction throughput and tasks' delays are high, it
-        // could lead to OutOfMemoryErrors. Since purge() could be a heavy
-        // operation if the queue is big, we don't call it every time a task
-        // is cancelled.
-        if (cancelCount.incrementAndGet() % 1000 == 0) {
-            getCancellationTimer().purge();
-        }
-    }
-}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java
index b0327780..9f4f2000 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java
@@ -30,6 +30,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.util.Timer;
 import java.util.Properties;
 import java.util.TimerTask;
+import java.util.concurrent.atomic.AtomicInteger;
 
 
 /**
@@ -52,6 +53,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      */
     private Timer singletonTimer;
 
+    /**
+     * The number of times {@link #cancel(TimerTask)} has been called.
+     * Used for determining whether it's time to purge cancelled tasks from
+     * the timer.
+     */
+    private final AtomicInteger cancelCount = new AtomicInteger();
+
     /**
      * Initializes this TimerFactory with a singleton Timer instance.
      */
@@ -66,65 +74,17 @@ public SingletonTimerFactory()
          // DERBY-3745 We want to avoid leaking class loaders, so 
          // we make sure the context class loader is null before
          // creating the thread
-        ClassLoader savecl = null;
-        boolean hasGetClassLoaderPerms = false;
-        try {
-            savecl = AccessController.doPrivileged(
-            new PrivilegedAction<ClassLoader>() {
-                public ClassLoader run()  {
-                    return Thread.currentThread().getContextClassLoader();
-                }
-            });
-            hasGetClassLoaderPerms = true;
-        } catch (SecurityException se) {
-            // Ignore security exception. Versions of Derby before
-            // the DERBY-3745 fix did not require getClassLoader 
-            // privs.  We may leak class loaders if we are not
-            // able to do this but we can't just fail.
-        }
-        if (hasGetClassLoaderPerms)
-            try {
-                AccessController.doPrivileged(
-                new PrivilegedAction<Object>() {
-                    public Object run()  {
-                        Thread.currentThread().setContextClassLoader(null);
-                        return null;
-                    }
-                });
-            } catch (SecurityException se) {
-                // ignore security exception.  Earlier versions of Derby, before the 
-                // DERBY-3745 fix did not require setContextClassloader permissions.
-                // We may leak class loaders if we are not able to set this, but 
-                // cannot just fail.
+        ClassLoader savecl = getContextClassLoader();
+        if (savecl != null) {
+            setContextClassLoader(null);
             }
+
         singletonTimer = new Timer(true); // Run as daemon
-        if (hasGetClassLoaderPerms)
-            try {
-                final ClassLoader tmpsavecl = savecl;
-                AccessController.doPrivileged(
-                new PrivilegedAction<Object>() {
-                    public Object run()  {
-                        Thread.currentThread().setContextClassLoader(tmpsavecl);
-                        return null;
-                    }
-                });
-            } catch (SecurityException se) {
-                // ignore security exception.  Earlier versions of Derby, before the 
-                // DERBY-3745 fix did not require setContextClassloader permissions.
-                // We may leak class loaders if we are not able to set this, but 
-                // cannot just fail.
-            }
-    }
 
-    /**
-     * Returns a Timer object that can be used for adding TimerTasks
-     * that cancel executing statements.
-     *
-     * @return a Timer object for cancelling statements.
-     */
-    Timer getCancellationTimer()
-    {
-        return singletonTimer;
+        if (savecl != null) {
+            // Restore the original context class loader.
+            setContextClassLoader(savecl);
+        }
     }
 
     // TimerFactory interface methods
@@ -137,6 +97,23 @@ public void schedule(TimerTask task, long delay) {
     /** {@inheritDoc} */
     public void cancel(TimerTask task) {
         task.cancel();
+
+        // DERBY-6114: Cancelled tasks stay in the timer's queue until they
+        // are scheduled to run, unless we call the purge() method. This
+        // prevents garbage collection of the tasks. Even though the tasks
+        // are small objects, there could be many of them, especially when
+        // both the transaction throughput and tasks' delays are high, it
+        // could lead to OutOfMemoryErrors. Since purge() could be a heavy
+        // operation if the queue is big, we don't call it every time a task
+        // is cancelled.
+        //
+        // When Java 7 has been made the lowest supported level, we should
+        // consider replacing the java.util.Timer instance with a
+        // java.util.concurrent.ScheduledThreadPoolExecutor, and call
+        // setRemoveOnCancelPolicy(true) on the executor.
+        if (cancelCount.incrementAndGet() % 1000 == 0) {
+            singletonTimer.purge();
+        }
     }
 
     // ModuleControl interface methods
@@ -167,4 +144,40 @@ public void stop()
     {
         singletonTimer.cancel();
     }
+
+    // Helper methods
+
+    private static ClassLoader getContextClassLoader() {
+        try {
+            return AccessController.doPrivileged(
+                    new PrivilegedAction<ClassLoader>() {
+                public ClassLoader run() {
+                    return Thread.currentThread().getContextClassLoader();
+                }
+            });
+        } catch (SecurityException se) {
+            // Ignore security exception. Versions of Derby before
+            // the DERBY-3745 fix did not require getContextClassLoader
+            // privileges. We may leak class loaders if we are not
+            // able to do this, but we can't just fail.
+            return null;
+        }
+    }
+
+    private static void setContextClassLoader(final ClassLoader cl) {
+        try {
+            AccessController.doPrivileged(new PrivilegedAction<Void>() {
+                public Void run() {
+                    Thread.currentThread().setContextClassLoader(cl);
+                    return null;
+                }
+            });
+        } catch (SecurityException se) {
+            // Ignore security exception. Earlier versions of Derby, before
+            // the DERBY-3745 fix, did not require setContextClassLoader
+            // permissions. We may leak class loaders if we are not able to
+            // set this, but cannot just fail.
+        }
+    }
+
 }
