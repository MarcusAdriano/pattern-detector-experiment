diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/DRDAServerStarter.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/DRDAServerStarter.java
index 2b5faf8a..5b24cf44 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/DRDAServerStarter.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/DRDAServerStarter.java
@@ -104,10 +104,10 @@ public void boot(boolean create,
 						  public Object run() throws NoSuchMethodException, SecurityException
 						  {
 							  if (listenAddress == null)
-								  return serverClass.getDeclaredConstructor(null);
+								  return serverClass.getConstructor(null);
 							  else
 								  return
-									  serverClass.getDeclaredConstructor(new
+									  serverClass.getConstructor(new
 										  Class[] {java.net.InetAddress.class,
 												   Integer.TYPE});}
 					  }
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/services/bytecode/d_BCValidate.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/services/bytecode/d_BCValidate.java
index 12fa5119..138d443f 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/services/bytecode/d_BCValidate.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/services/bytecode/d_BCValidate.java
@@ -57,7 +57,7 @@ static void checkMethod(short opcode, Type dt, String methodName, String[] debug
 
 
 		if (SanityManager.DEBUG) {
-			String reason;
+			String reason = null;
 			try {
 
 				String declaringClass = dt.javaName();
@@ -85,16 +85,71 @@ static void checkMethod(short opcode, Type dt, String methodName, String[] debug
 
 				}
 
+				// If the class is not in the same class loader then it
+				// it must be a non-Derby class. In that case any method etc.
+				// being accessed must be public, so don't use the getDeclared
+				// methods. Default SecurityManager behaviour is to grant access to public members
+				// and members from classes loaded by the same class loader. Thus
+				// we try to fall into these categories to avoid having to grant
+				// permissions to derby jars for the function tests.
+				
+				ClassLoader declareLoader = declaring.getClassLoader();
+				ClassLoader myLoader = d_BCValidate.class.getClassLoader();
+				
+				boolean sameClassLoader = false;
+				if (declareLoader == myLoader)
+					sameClassLoader = true;
+				else if (declareLoader != null)
+					sameClassLoader = declareLoader.equals(myLoader);
+				
 				String actualReturnType;
 
 				if (methodName.equals("<init>")) {
-					Constructor c = declaring.getDeclaredConstructor(params);
+					Constructor c;
+					
+					if (sameClassLoader)
+					{
+						c = declaring.getDeclaredConstructor(params);
+					}
+					else
+					{
+						c = declaring.getConstructor(params);
+						
+						// check this construct is declared by this
+						// class, has to be, right? But no harm checking.
+						if (!c.getDeclaringClass().equals(declaring))
+						{
+							reason = "constructor " + c.toString() + " declared on " + c.getDeclaringClass() + " expected " + declaring;
+						}
+					}
+					
 					actualReturnType = "void";
 				} else {
-					Method m = declaring.getDeclaredMethod(methodName, params);
+					Method m;
+					
+					if (sameClassLoader)
+					{
+						m = declaring.getDeclaredMethod(methodName, params);
+					}
+					else
+					{
+						m = declaring.getMethod(methodName, params);
+						
+						// check this method is declared by this
+						// class? But no harm checking.
+						if (!m.getDeclaringClass().equals(declaring))
+						{
+							reason = "method " + m.toString() + " declared on " + m.getDeclaringClass() + " expected " + declaring;
+						}
+					}
+					
 					actualReturnType = m.getReturnType().getName();
 				}
 
+				// do we already have a problem?
+				if (reason == null)
+				{
+
 				Class requestedReturnType = loadClass(rt.javaName());
 
 				// check the return type
@@ -112,6 +167,7 @@ static void checkMethod(short opcode, Type dt, String methodName, String[] debug
 				} else {
 					reason = "return type is " + actualReturnType;
 				}
+				}
 
 
 			} catch (Exception e) {
