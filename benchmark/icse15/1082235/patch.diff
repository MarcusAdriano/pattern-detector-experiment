diff --git a/db/derby/code/branches/10.7/java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java b/db/derby/code/branches/10.7/java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java
index 5de99dc2..0142e2d1 100644
--- a/db/derby/code/branches/10.7/java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java
+++ b/db/derby/code/branches/10.7/java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java
@@ -352,8 +352,7 @@ public SPSDescriptor getActionSPS(LanguageConnectionContext lcc)
 		//will then get updated into SYSSTATEMENTS table.
 		if((!actionSPS.isValid() ||
 				 (actionSPS.getPreparedStatement() == null)) && 
-				 isRow &&
-				 referencedColsInTriggerAction != null) 
+				 isRow && (referencingOld || referencingNew))
 		{
 			SchemaDescriptor compSchema;
 			compSchema = getDataDictionary().getSchemaDescriptor(triggerSchemaId, null);
diff --git a/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java b/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
index 7d097950..42a93449 100644
--- a/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
+++ b/db/derby/code/branches/10.7/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
@@ -4652,8 +4652,7 @@ public String getTriggerActionString(
 			boolean createTriggerTime
 			) throws StandardException
 	{
-		boolean in10_7_orHigherVersion =
-			checkVersion(DataDictionary.DD_VERSION_DERBY_10_7,null);
+		boolean in10_7_orHigherVersion = false;
 		
 		StringBuffer newText = new StringBuffer();
 		int start = 0;
@@ -4937,6 +4936,14 @@ public String getTriggerActionString(
 			newText.append(triggerDefinition.substring(start, tokBeginOffset-actionOffset));
 			int colPositionInRuntimeResultSet = -1;
 			ColumnDescriptor triggerColDesc = triggerTableDescriptor.getColumnDescriptor(colName);
+			//DERBY-5121 We can come here if the column being used in trigger
+			// action is getting dropped and we have come here through that
+			// ALTER TABLE DROP COLUMN. In that case, we will not find the
+			// column in the trigger table.
+			if (triggerColDesc == null) {
+				throw StandardException.newException(
+		                SQLState.LANG_COLUMN_NOT_FOUND, tableName+"."+colName);
+			}
 			int colPositionInTriggerTable = triggerColDesc.getPosition();
 
 			//This part of code is little tricky and following will help
diff --git a/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java b/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java
index a05c1194..2f35f9a7 100644
--- a/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java
+++ b/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java
@@ -576,6 +576,34 @@ public void testReadRequiredColumnsOnlyFromTriggerTable() throws SQLException, I
         JDBC.assertFullResultSet(rs, result);
     }
     
+    public void testDERBY5121() throws SQLException
+    {
+        Statement s = createStatement();
+
+        s.executeUpdate("CREATE TABLE T1 (A1 int)");
+        s.executeUpdate("CREATE TABLE T2 (B1 int, B2 int, B3 int)");
+        s.executeUpdate("CREATE TRIGGER t2UpdateTrigger "+
+        		"after UPDATE of b1 on t2 " +
+        		"referencing new row as nr for each ROW " +
+        		"insert into t1 values ( nr.b3 ) ");
+        s.executeUpdate("INSERT INTO T2 VALUES(0,0,0)");
+        s.executeUpdate("update t2 set b1 = 100 , b2 = 1");
+        ResultSet rs =s.executeQuery("SELECT * FROM T1");
+        JDBC.assertFullResultSet(rs, new String[][] {{"0"}});
+
+        s.executeUpdate("CREATE TABLE T3 (A1 int)");
+        s.executeUpdate("CREATE TABLE T4 (B1 int, B2 int, B3 int)");
+        s.executeUpdate("CREATE TRIGGER t4UpdateTrigger "+
+        		"after UPDATE of b1 on t4 " +
+        		"referencing new table as nt for each STATEMENT " +
+        		"insert into t3 select b3 from nt");
+        s.executeUpdate("INSERT INTO T4 VALUES(0,0,0)");
+        s.executeUpdate("update t4 set b1 = 100 , b2 = 1");
+        rs =s.executeQuery("SELECT * FROM T3");
+        JDBC.assertFullResultSet(rs, new String[][] {{"0"}});
+
+    }
+    
     /** 
      * Test for DERBY-3238 trigger fails with IOException if triggering table has large lob.
      * 
