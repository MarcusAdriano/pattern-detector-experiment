diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java
index aae64869..986a7387 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java
@@ -199,26 +199,37 @@ public ValueNode bindExpression(FromList fromList,
 		TypeCompiler tc = leftOperand.getTypeCompiler();
 		if (!(leftOperand.getTypeId().isStringTypeId() || leftOperand
 				.getTypeId().isBitTypeId())) {
+			DataTypeDescriptor dtd = DataTypeDescriptor.getBuiltInDataTypeDescriptor(
+					Types.VARCHAR, true, tc
+					.getCastToCharWidth(leftOperand							.getTypeServices()));	
+			// DERBY-2910 - Match current schema collation for implicit cast as we do for
+			// explicit casts per SQL Spec 6.12 (10)									
+			dtd.setCollationType(getSchemaDescriptor(null).getCollationType());
+			dtd.setCollationDerivation(StringDataValue.COLLATION_DERIVATION_IMPLICIT);
+
 			leftOperand = (ValueNode) getNodeFactory().getNode(
 					C_NodeTypes.CAST_NODE,
 					leftOperand,
-					DataTypeDescriptor.getBuiltInDataTypeDescriptor(
-							Types.VARCHAR, true, tc
-									.getCastToCharWidth(leftOperand
-											.getTypeServices())),
+					dtd,
 					getContextManager());
 			((CastNode) leftOperand).bindCastNodeOnly();
 		}
 		tc = rightOperand.getTypeCompiler();
 		if (!(rightOperand.getTypeId().isStringTypeId() || rightOperand
 				.getTypeId().isBitTypeId())) {
+			DataTypeDescriptor dtd = DataTypeDescriptor.getBuiltInDataTypeDescriptor(
+					Types.VARCHAR, true, tc
+							.getCastToCharWidth(rightOperand
+									.getTypeServices()));
+			// DERBY-2910 - Match current schema collation for implicit cast as we do for
+			// explicit casts per SQL Spec 6.12 (10)					
+			dtd.setCollationType(getSchemaDescriptor(null).getCollationType());
+			dtd.setCollationDerivation(StringDataValue.COLLATION_DERIVATION_IMPLICIT);
+
 			rightOperand = (ValueNode) getNodeFactory().getNode(
 					C_NodeTypes.CAST_NODE,
 					rightOperand,
-					DataTypeDescriptor.getBuiltInDataTypeDescriptor(
-							Types.VARCHAR, true, tc
-									.getCastToCharWidth(rightOperand
-											.getTypeServices())),
+					dtd,
 					getContextManager());
 			((CastNode) rightOperand).bindCastNodeOnly();
 		}
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java
index a52713bc..b46a3f0e 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java
@@ -454,25 +454,7 @@ else if (pattern.indexOf('_') == -1 &&
         return this;
     }
 
-    private ValueNode castArgToNationalString(
-    ValueNode       vn, 
-    TypeCompiler    vnTC, 
-    TypeId          vnTypeId)
-        throws StandardException
-    {
-        ValueNode newNode =  (ValueNode)
-            getNodeFactory().getNode(
-                C_NodeTypes.CAST_NODE,
-                vn, 
-                new DataTypeDescriptor(vnTypeId, 
-                true,
-                vnTC.getCastToCharWidth(vn.getTypeServices())), 
-                getContextManager());
-
-        ((CastNode) newNode).bindCastNodeOnly();
 
-        return newNode;
-    }
 
     private void finishBindExpr()
     throws StandardException
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/SimpleStringOperatorNode.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/SimpleStringOperatorNode.java
index b7297f54..ea4bebca 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/SimpleStringOperatorNode.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/SimpleStringOperatorNode.java
@@ -102,14 +102,20 @@ public ValueNode bindExpression(
 				}
 
 				default:
+					DataTypeDescriptor dtd = DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.VARCHAR, true, 
+							  operand.getTypeCompiler().
+								getCastToCharWidth(
+									operand.getTypeServices()));
+				// DERBY-2910 - Match current schema collation for implicit cast as we do for
+				// explicit casts per SQL Spec 6.12 (10)					
+				dtd.setCollationType(getSchemaDescriptor(null).getCollationType());
+				dtd.setCollationDerivation(StringDataValue.COLLATION_DERIVATION_IMPLICIT);
+			
 					operand =  (ValueNode)
 						getNodeFactory().getNode(
 							C_NodeTypes.CAST_NODE,
 							operand,
-							DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.VARCHAR, true, 
-										  operand.getTypeCompiler().
-											getCastToCharWidth(
-												operand.getTypeServices())),
+							dtd,
 							getContextManager());
 					((CastNode) operand).bindCastNodeOnly();
 					operandType = operand.getTypeId();
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java
index 468ab112..76884d78 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/TernaryOperatorNode.java
@@ -734,13 +734,18 @@ protected ValueNode castArgToString(ValueNode vn) throws StandardException
 		TypeCompiler vnTC = vn.getTypeCompiler();
 		if (! vn.getTypeId().isStringTypeId())
 		{
+			DataTypeDescriptor dtd = DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.VARCHAR, true,
+	                vnTC.getCastToCharWidth(
+		                    vn.getTypeServices()));
+			// DERBY-2910 - Match current schema collation for implicit cast as we do for
+			// explicit casts per SQL Spec 6.12 (10)							                    
+			dtd.setCollationType(getSchemaDescriptor(null).getCollationType());
+			dtd.setCollationDerivation(StringDataValue.COLLATION_DERIVATION_IMPLICIT);
 			ValueNode newNode = (ValueNode)
 						getNodeFactory().getNode(
 							C_NodeTypes.CAST_NODE,
 							vn,
-							DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.VARCHAR, true,
-							                vnTC.getCastToCharWidth(
-							                    vn.getTypeServices())),
+							dtd,
 							getContextManager());
 			((CastNode) newNode).bindCastNodeOnly();
 			return newNode;
diff --git a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
index 3b36b485..da3c3ee2 100644
--- a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
+++ b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
@@ -1004,8 +1004,23 @@ private void commonTestingForTerritoryBasedDB(Statement s) throws SQLException{
         		" FROM DERBY_2961 ORDER BY 1",
         		new String[][] {{"1",null}});
     }
-    s.close();
  
+    //DERBY-2910 
+    // Test proper collation is set for  implicit cast with 
+    // UPPER(CURRENT_DATE) and concatonation.
+    
+    s.executeUpdate("create table a (vc varchar(30))");
+    s.executeUpdate("insert into a values(CURRENT_DATE)");
+    rs = s.executeQuery("select vc from a where vc = CURRENT_DATE");
+    assertEquals(1,JDBC.assertDrainResults(rs));
+    rs = s.executeQuery("select vc from a where vc = UPPER(CURRENT_DATE)");
+    JDBC.assertDrainResults(rs,1);
+    rs = s.executeQuery("select vc from a where vc =  '' || CURRENT_DATE");
+    JDBC.assertDrainResults(rs,1);
+    rs = s.executeQuery("select vc from a where '' || CURRENT_DATE = vc");
+    assertEquals(1,JDBC.assertDrainResults(rs));
+    assertStatementError("42818",s,"select TABLENAME FROM SYS.SYSTABLES WHERE UPPER(CURRENT_DATE) = TABLENAME");
+    s.close();
 }
 
 private void setUpTable(Statement s) throws SQLException {
