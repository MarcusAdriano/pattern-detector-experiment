diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java
index cf1dd840..67c487ed 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateTriggerNode.java
@@ -755,7 +755,7 @@ else if (!isRow && trn.isRow)
 			** 4) Additional restriction on BEFORE triggers
 			*/
 			if (this.isBefore && !trn.isRow) {
-			// OLD_TABLE and NEW_TABLE not allowed for BEFORE triggers.
+			// OLD TABLE and NEW TABLE not allowed for BEFORE triggers.
 				throw StandardException.newException(SQLState.LANG_TRIGGER_BAD_REF_MISMATCH, "BEFORE", "row");
 			}
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
index 13795bac..24cc07f9 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/BlobClob4BlobTest.java
@@ -369,12 +369,12 @@ public void testTriggersWithClobColumn() throws Exception {
         stmt.executeUpdate(
                 "create trigger T13A after update on testClob " +
                 "referencing new as n old as o " +
-                "for each row mode db2sql "+
+                "for each row "+
                 "insert into testClobTriggerA(a, b) values (n.a, n.b)");
         stmt.executeUpdate(
                 "create trigger T13B after INSERT on testClobTriggerA " +
-                "referencing new_table as n " +
-                "for each statement mode db2sql "+
+                "referencing new table as n " +
+                "for each statement "+
                 "insert into testClobTriggerB(a, b) select n.a, n.b from n");
 
         commit();
@@ -1904,13 +1904,13 @@ public void testTriggerWithBlobColumn() throws Exception {
         stmt.executeUpdate(
                 "create trigger T8A after update on testBlob " +
                 "referencing new as n old as o " +
-                "for each row mode db2sql "+
+                "for each row "+
                 "insert into blobTest8TriggerA(a, b, crc32) " +
                 "values (n.a, n.b, n.crc32)");
         stmt.executeUpdate(
                 "create trigger T8B after INSERT on blobTest8TriggerA " +
-                "referencing new_table as n " +
-                "for each statement mode db2sql "+
+                "referencing new table as n " +
+                "for each statement "+
                 "insert into blobTest8TriggerB(a, b, crc32) " +
                 "select n.a, n.b, n.crc32 from n");
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java
index 2c94b2df..aee4257d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java
@@ -484,7 +484,7 @@ private void actionTypesSetup(String type) throws SQLException
         
         s.executeUpdate("CREATE TRIGGER AIS " +
                 "AFTER INSERT ON T_MAIN " +
-                "REFERENCING NEW_TABLE AS N " +
+                "REFERENCING NEW TABLE AS N " +
                 "FOR EACH STATEMENT " +      
                 "INSERT INTO T_ACTION_STATEMENT(A, V1, ID, V2) " +
                 "SELECT 'I', V, ID, V FROM N");
@@ -499,7 +499,7 @@ private void actionTypesSetup(String type) throws SQLException
         
         s.executeUpdate("CREATE TRIGGER AUS " +
                 "AFTER UPDATE OF V ON T_MAIN " +
-                "REFERENCING NEW_TABLE AS N OLD_TABLE AS O " +
+                "REFERENCING NEW TABLE AS N OLD TABLE AS O " +
                 "FOR EACH STATEMENT " +      
                 "INSERT INTO T_ACTION_STATEMENT(A, V1, ID, V2) " +
                 "SELECT 'U', N.V, N.ID, O.V FROM N,O WHERE O.ID = N.ID");
@@ -514,7 +514,7 @@ private void actionTypesSetup(String type) throws SQLException
         
         s.executeUpdate("CREATE TRIGGER ADS " +
                 "AFTER DELETE ON T_MAIN " +
-                "REFERENCING OLD_TABLE AS O " +
+                "REFERENCING OLD TABLE AS O " +
                 "FOR EACH STATEMENT " +      
                 "INSERT INTO T_ACTION_STATEMENT(A, V1, ID, V2) " +
                 "SELECT 'D', O.V, O.ID, O.V FROM O");        
