diff --git a/cassandra/trunk/src/java/org/apache/cassandra/client/RingCache.java b/cassandra/trunk/src/java/org/apache/cassandra/client/RingCache.java
index 23f9721c..b6d29b5c 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/client/RingCache.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/client/RingCache.java
@@ -24,6 +24,8 @@
 import org.apache.cassandra.dht.Token;
 import org.apache.cassandra.locator.AbstractReplicationStrategy;
 import org.apache.cassandra.locator.TokenMetadata;
+
+import java.io.IOException;
 import java.net.InetAddress;
 import java.net.UnknownHostException;
 
@@ -53,13 +55,16 @@
     private final String keyspace;
     private TokenMetadata tokenMetadata;
 
-    public RingCache(String keyspace)
+    public RingCache(String keyspace) throws IOException
     {
         for (InetAddress seed : DatabaseDescriptor.getSeeds())
         {
             seeds_.add(seed.getHostAddress());
         }
+        
         this.keyspace = keyspace;
+        
+        DatabaseDescriptor.loadSchemas();
         refreshEndPointMap();
     }
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index d8c0fca7..a3bbf853 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -865,7 +865,10 @@ public static IEndPointSnitch getEndPointSnitch(String table)
 
     public static Class<? extends AbstractReplicationStrategy> getReplicaPlacementStrategyClass(String table)
     {
-        return tables.get(table).strategyClass;
+    	KSMetaData meta = tables.get(table);
+    	if (meta == null)
+            throw new RuntimeException(table + " not found. Failure to call loadSchemas() perhaps?");
+        return meta.strategyClass;
     }
     
     public static String getJobTrackerAddress()
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/client/TestRingCache.java b/cassandra/trunk/test/unit/org/apache/cassandra/client/TestRingCache.java
index 445d7d1d..2738cff5 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/client/TestRingCache.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/client/TestRingCache.java
@@ -17,6 +17,7 @@
  */
 package org.apache.cassandra.client;
 
+import java.io.IOException;
 import java.net.InetAddress;
 import java.util.List;
 
@@ -35,16 +36,15 @@
  */
 public class TestRingCache
 {
-    private static RingCache ringCache;
-    private static String keyspace = "Keyspace1";
-    private static Cassandra.Client thriftClient;
+    private RingCache ringCache;
+    private Cassandra.Client thriftClient;
 
-    static
+    public TestRingCache(String keyspace) throws IOException
     {
         ringCache = new RingCache(keyspace);
     }
 
-    private static void setup(String server, int port) throws Exception
+    private void setup(String server, int port) throws Exception
     {
         /* Establish a thrift connection to the cassandra instance */
         TSocket socket = new TSocket(server, port);
@@ -68,7 +68,7 @@ public static void main(String[] args) throws Throwable
     {
         int minRow;
         int maxRow;
-        String rowPrefix;
+        String rowPrefix, keyspace = "Keyspace1";
         if (args.length > 0)
         {
             keyspace = args[0];
@@ -83,21 +83,23 @@ public static void main(String[] args) throws Throwable
             rowPrefix = "row";
         }
 
+        TestRingCache tester = new TestRingCache(keyspace);
+
         for (int nRows = minRow; nRows < maxRow; nRows++)
         {
             String row = rowPrefix + nRows;
             ColumnPath col = new ColumnPath("Standard1").setSuper_column(null).setColumn("col1".getBytes());
 
-            List<InetAddress> endPoints = ringCache.getEndPoint(row);
+            List<InetAddress> endPoints = tester.ringCache.getEndPoint(row);
             String hosts="";
             for (int i = 0; i < endPoints.size(); i++)
                 hosts = hosts + ((i > 0) ? "," : "") + endPoints.get(i);
             System.out.println("hosts with key " + row + " : " + hosts + "; choose " + endPoints.get(0));
 
             // now, read the row back directly from the host owning the row locally
-            setup(endPoints.get(0).getHostAddress(), DatabaseDescriptor.getRpcPort());
-            thriftClient.insert(keyspace, row, col, "val1".getBytes(), 1, ConsistencyLevel.ONE);
-            Column column=thriftClient.get(keyspace, row, col, ConsistencyLevel.ONE).column;
+            tester.setup(endPoints.get(0).getHostAddress(), DatabaseDescriptor.getRpcPort());
+            tester.thriftClient.insert(keyspace, row, col, "val1".getBytes(), 1, ConsistencyLevel.ONE);
+            Column column = tester.thriftClient.get(keyspace, row, col, ConsistencyLevel.ONE).column;
             System.out.println("read row " + row + " " + new String(column.name) + ":" + new String(column.value) + ":" + column.timestamp);
         }
 
