diff --git a/db/derby/code/branches/10.9/java/engine/org/apache/derby/iapi/types/SQLDouble.java b/db/derby/code/branches/10.9/java/engine/org/apache/derby/iapi/types/SQLDouble.java
index daf295ee..ae38374c 100644
--- a/db/derby/code/branches/10.9/java/engine/org/apache/derby/iapi/types/SQLDouble.java
+++ b/db/derby/code/branches/10.9/java/engine/org/apache/derby/iapi/types/SQLDouble.java
@@ -46,6 +46,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.ObjectInput;
 import java.io.IOException;
 
+import java.math.BigDecimal;
 import java.sql.ResultSet;
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
@@ -459,7 +460,23 @@ public  void setBigDecimal(Number bigDecimal) throws StandardException
 		// Note BigDecimal.doubleValue() handles the case where
 		// its value is outside the range of a double. It returns
 		// infinity values which should throw an exception in setValue(double).
-		setValue(bigDecimal.doubleValue());
+
+        double v = bigDecimal.doubleValue();
+
+        if (v == 0) {
+            // We need to catch underflow here, since BigDecimal#doubleValue it
+            // just returns 0 (i.e. no exception).
+            boolean isZero =
+                ((BigDecimal) bigDecimal).compareTo(BigDecimal.ZERO) == 0;
+
+            if (!isZero) {
+                throw StandardException.
+                    newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE,
+                                 TypeId.REAL_NAME);
+            }
+        }
+
+        setValue(v);
 		
 	}
 
diff --git a/db/derby/code/branches/10.9/java/engine/org/apache/derby/iapi/types/SQLReal.java b/db/derby/code/branches/10.9/java/engine/org/apache/derby/iapi/types/SQLReal.java
index 0b3b0613..0f5383a2 100644
--- a/db/derby/code/branches/10.9/java/engine/org/apache/derby/iapi/types/SQLReal.java
+++ b/db/derby/code/branches/10.9/java/engine/org/apache/derby/iapi/types/SQLReal.java
@@ -46,6 +46,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.ObjectInput;
 import java.io.IOException;
 
+import java.math.BigDecimal;
 import java.sql.ResultSet;
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
@@ -414,8 +415,24 @@ public  void setBigDecimal(Number bigDecimal) throws StandardException
 
 		// Note BigDecimal.floatValue() handles the case where
 		// its value is outside the range of a float. It returns
-		// infinity values which should throw an exception in setValue(double).
-		setValue(bigDecimal.floatValue());
+        // infinity values which should throw an exception in setValue(float).
+
+        float v = bigDecimal.floatValue();
+
+        if (v == 0) {
+            // We need to catch underflow here, since BigDecimal#floatValue it
+            // just returns 0 (i.e. no exception).
+            boolean isZero =
+                ((BigDecimal) bigDecimal).compareTo(BigDecimal.ZERO) == 0;
+
+            if (!isZero) {
+                throw StandardException.
+                    newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE,
+                                 TypeId.REAL_NAME);
+            }
+        }
+
+        setValue(v);
 		
 	}
 
diff --git a/db/derby/code/branches/10.9/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java b/db/derby/code/branches/10.9/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java
index c22e7168..bba5b3c7 100644
--- a/db/derby/code/branches/10.9/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java
+++ b/db/derby/code/branches/10.9/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java
@@ -4764,11 +4764,11 @@ public void testDerby5533UpdateXXX() throws SQLException
         }
 
         // REAL Underflow checking
-        //
-        // Uncomment when DERBY-5546 is fixed:
-        // assertUpdateState(rs, "F04", bdSmallestPosDoubleValue, "22003");
-        // assertUpdateState(rs, "F04", bdSmallestNegDoubleValue, "22003");
-
+        // Remove test when DERBY-5534 is fixed
+        if (usingEmbedded()) {
+            assertUpdateState(rs, "F04", bdSmallestPosDoubleValue, "22003");
+            assertUpdateState(rs, "F04", bdSmallestNegDoubleValue, "22003");
+        }
 
         // DOUBLE, FLOAT (SQL FLOAT is really the same as SQL DOUBLE in Derby)
         final String[] dfCols = new String[]{"F05", "F06"};
@@ -4808,12 +4808,13 @@ public void testDerby5533UpdateXXX() throws SQLException
             }
 
             // DOUBLE, FLOAT underflow checking
-            //
-            // Uncomment when DERBY-5546 is fixed
-            // assertUpdateState(rs, dfCols[i],
-            //     bdSmallestPosDoubleValue.divide(BigDecimal.TEN), "22003");
-            // assertUpdateState(rs, dfCols[i],
-            //     bdSmallestNegDoubleValue.divide(BigDecimal.TEN), "22003");
+            // Remove test when DERBY-5534 is fixed
+            if (usingEmbedded()) {
+                assertUpdateState(rs, dfCols[i],
+                    bdSmallestPosDoubleValue.divide(BigDecimal.TEN), "22003");
+                assertUpdateState(rs, dfCols[i],
+                    bdSmallestNegDoubleValue.divide(BigDecimal.TEN), "22003");
+            }
         }
 
         // Derby BOOLEAN: not range checked: FALSE of 0, else TRUE.
