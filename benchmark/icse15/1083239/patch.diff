diff --git a/lucene/dev/branches/lucene_solr_3_1/lucene/src/java/org/apache/lucene/store/IndexInput.java b/lucene/dev/branches/lucene_solr_3_1/lucene/src/java/org/apache/lucene/store/IndexInput.java
index 3c459b84..8f3fc641 100644
--- a/lucene/dev/branches/lucene_solr_3_1/lucene/src/java/org/apache/lucene/store/IndexInput.java
+++ b/lucene/dev/branches/lucene_solr_3_1/lucene/src/java/org/apache/lucene/store/IndexInput.java
@@ -78,6 +78,9 @@ public int readInt() throws IOException {
    * @see IndexOutput#writeVInt(int)
    */
   public int readVInt() throws IOException {
+    /* This is the original code of this method,
+     * but a Hotspot bug (see LUCENE-2975) corrupts the for-loop if
+     * readByte() is inlined. So the loop was unwinded!
     byte b = readByte();
     int i = b & 0x7F;
     for (int shift = 7; (b & 0x80) != 0; shift += 7) {
@@ -85,6 +88,22 @@ public int readVInt() throws IOException {
       i |= (b & 0x7F) << shift;
     }
     return i;
+    */
+    byte b = readByte();
+    int i = b & 0x7F;
+    if ((b & 0x80) == 0) return i;
+    b = readByte();
+    i |= (b & 0x7F) << 7;
+    if ((b & 0x80) == 0) return i;
+    b = readByte();
+    i |= (b & 0x7F) << 14;
+    if ((b & 0x80) == 0) return i;
+    b = readByte();
+    i |= (b & 0x7F) << 21;
+    if ((b & 0x80) == 0) return i;
+    b = readByte();
+    assert (b & 0x80) == 0;
+    return i | ((b & 0x7F) << 28);
   }
 
   /** Reads eight bytes and returns a long.
@@ -98,6 +117,9 @@ public long readLong() throws IOException {
    * nine bytes.  Smaller values take fewer bytes.  Negative numbers are not
    * supported. */
   public long readVLong() throws IOException {
+    /* This is the original code of this method,
+     * but a Hotspot bug (see LUCENE-2975) corrupts the for-loop if
+     * readByte() is inlined. So the loop was unwinded!
     byte b = readByte();
     long i = b & 0x7F;
     for (int shift = 7; (b & 0x80) != 0; shift += 7) {
@@ -105,6 +127,34 @@ public long readVLong() throws IOException {
       i |= (b & 0x7FL) << shift;
     }
     return i;
+    */
+    byte b = readByte();
+    long i = b & 0x7FL;
+    if ((b & 0x80) == 0) return i;
+    b = readByte();
+    i |= (b & 0x7FL) << 7;
+    if ((b & 0x80) == 0) return i;
+    b = readByte();
+    i |= (b & 0x7FL) << 14;
+    if ((b & 0x80) == 0) return i;
+    b = readByte();
+    i |= (b & 0x7FL) << 21;
+    if ((b & 0x80) == 0) return i;
+    b = readByte();
+    i |= (b & 0x7FL) << 28;
+    if ((b & 0x80) == 0) return i;
+    b = readByte();
+    i |= (b & 0x7FL) << 35;
+    if ((b & 0x80) == 0) return i;
+    b = readByte();
+    i |= (b & 0x7FL) << 42;
+    if ((b & 0x80) == 0) return i;
+    b = readByte();
+    i |= (b & 0x7FL) << 49;
+    if ((b & 0x80) == 0) return i;
+    b = readByte();
+    assert (b & 0x80) == 0;
+    return i | ((b & 0x7FL) << 56);
   }
 
   /** Call this if readString should read characters stored
diff --git a/lucene/dev/branches/lucene_solr_3_1/lucene/src/test/org/apache/lucene/index/TestIndexInput.java b/lucene/dev/branches/lucene_solr_3_1/lucene/src/test/org/apache/lucene/index/TestIndexInput.java
index de2987a8..b3117ef5 100644
--- a/lucene/dev/branches/lucene_solr_3_1/lucene/src/test/org/apache/lucene/index/TestIndexInput.java
+++ b/lucene/dev/branches/lucene_solr_3_1/lucene/src/test/org/apache/lucene/index/TestIndexInput.java
@@ -19,16 +19,21 @@
 
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.store.IndexInput;
+import org.apache.lucene.store.IndexOutput;
+import org.apache.lucene.store.RAMDirectory;
 
 import java.io.IOException;
 
 public class TestIndexInput extends LuceneTestCase {
-  public void testRead() throws IOException {
-    IndexInput is = new MockIndexInput(new byte[] { 
+
+  static final byte[] READ_TEST_BYTES = new byte[] { 
       (byte) 0x80, 0x01,
       (byte) 0xFF, 0x7F,
       (byte) 0x80, (byte) 0x80, 0x01,
       (byte) 0x81, (byte) 0x80, 0x01,
+    (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0x07,
+    (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0x07,
+    (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0x7F,
       0x06, 'L', 'u', 'c', 'e', 'n', 'e',
 
       // 2-byte UTF-8 (U+00BF "INVERTED QUESTION MARK") 
@@ -58,12 +63,16 @@ public void testRead() throws IOException {
       // null bytes
       0x01, 0x00,
       0x08, 'L', 'u', 0x00, 'c', 'e', 0x00, 'n', 'e',
-    });
+  };
         
+  private void checkReads(IndexInput is) throws IOException {
     assertEquals(128,is.readVInt());
     assertEquals(16383,is.readVInt());
     assertEquals(16384,is.readVInt());
     assertEquals(16385,is.readVInt());
+    assertEquals(Integer.MAX_VALUE, is.readVInt());
+    assertEquals((long) Integer.MAX_VALUE, is.readVLong());
+    assertEquals(Long.MAX_VALUE, is.readVLong());
     assertEquals("Lucene",is.readString());
 
     assertEquals("\u00BF",is.readString());
@@ -80,6 +89,25 @@ public void testRead() throws IOException {
     assertEquals("Lu\u0000ce\u0000ne",is.readString());
   }
 
+  // this test only checks BufferedIndexInput because MockIndexInput extends BufferedIndexInput
+  public void testBufferedIndexInputRead() throws IOException {
+    final IndexInput is = new MockIndexInput(READ_TEST_BYTES);
+    checkReads(is);
+    is.close();
+  }
+
+  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly
+  public void testRawIndexInputRead() throws IOException {
+    final RAMDirectory dir = new RAMDirectory();
+    final IndexOutput os = dir.createOutput("foo");
+    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);
+    os.close();
+    final IndexInput is = dir.openInput("foo");
+    checkReads(is);
+    is.close();
+    dir.close();
+  }
+
   /**
    * Expert
    *
