diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
index dad19e36..5ed0aadc 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
@@ -2103,12 +2103,10 @@ public int parseArgs(String args[]) throws Exception
         // For convenience just use NetworkServerControlImpls log writer for user messages
         logWriter = makePrintWriter(System.out);
 
-        int command = COMMAND_START; 
-        if (args.length > 0)
-            command = findCommand(args);
-        else
+        int command = findCommand(args);
+        if (command == COMMAND_UNKNOWN)
         {
-            consolePropertyMessage("DRDA_NoArgs.U");
+            consolePropertyMessage("DRDA_NoCommand.U");
         }
 
         return command;
@@ -2273,10 +2271,11 @@ private int findCommand(String [] args) throws Exception
 						return i;
 					}
 				}
-			}
+
 			// didn't find command
 			consolePropertyMessage("DRDA_UnknownCommand.U", 
 				(String) commandArgs.firstElement());
+			}
 		} catch (Exception e) {
 			if (e.getMessage().equals(NetworkServerControlImpl.UNEXPECTED_ERR))
 				throw e;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java
index 925f8422..cf214e6d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetworkServerControlApiTest.java
@@ -32,7 +32,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derbyTesting.junit.TestConfiguration;
 
 import java.io.File;
-import java.io.IOException;
 import java.net.InetAddress;
 import java.net.UnknownHostException;
 import java.security.AccessController;
@@ -59,6 +58,43 @@ public NetworkServerControlApiTest(String name) {
      *  TODO: Add tests for other API calls.
      */
     
+    /**
+     *   Test other commands. These should all give a helpful error and the
+     *   usage message
+     */
+    public void testWrongUsage() throws Exception
+    {
+        final String nsc = "org.apache.derby.drda.NetworkServerControl";
+        // we'll assume that we get the full message if we get 'Usage'
+        // because sometimes, the message gets returned with carriage return,
+        // and sometimes it doesn't, checking for two different parts...
+        final String usage = "Usage: ";
+
+        // no arguments
+        String[] cmd = new String[] {nsc};
+        assertExecJavaCmdAsExpected(new String[] 
+            {"No command given.", usage}, cmd, 1);
+
+        // some option but no command
+        cmd = new String[] {nsc, "-h", "localhost"};
+        assertExecJavaCmdAsExpected(new String[] 
+            {"No command given.", usage}, cmd, 1);
+
+        // unknown command
+        cmd = new String[] {nsc, "unknowncmd"};
+        assertExecJavaCmdAsExpected(new String[] 
+            {"Command unknowncmd is unknown.", usage}, cmd, 1);
+
+        // unknown option
+        cmd = new String[] {nsc, "-unknownarg"};
+        assertExecJavaCmdAsExpected(new String[] 
+            {"Argument -unknownarg is unknown.", usage}, cmd, 1);
+
+        // wrong number of arguments
+        cmd = new String[] {nsc, "ping", "arg1"};
+        assertExecJavaCmdAsExpected(new String[] 
+            {"Invalid number of arguments for command ping.", usage}, cmd, 1);
+    }
     
      /** 
      * @throws Exception
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java
index 04073d73..1ed894f9 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java
@@ -108,8 +108,8 @@ public static Test suite()
                 badServerProperties, new String[] {}, true));
         
         // The other fixtures, testToggleTrace (trace on/off), 
-        // testToggleLogConnections (logconnections on/off) , and
-        // testWrongCommands can all use the default setup with adjusted policy
+        // and testToggleLogConnections (logconnections on/off)
+        // can all use the default setup with adjusted policy
         
         // need english locale so we can compare command output for those tests 
         if (!Locale.getDefault().getLanguage().equals("en"))
@@ -637,33 +637,4 @@ public void testToggleLogConnections()
         // traceAll should be back to false
         verifyProperties(expectedLogConnectionsOff);    
     }
-
-    
-    /**
-     *   Test other commands. These should all give a helpful error and the
-     *   usage message
-     *   Note: maybe these test cases should be moved to another Test,
-     *   as they don't actually test any properties. 
-     */
-    public void testWrongCommands() 
-    throws SQLException, IOException, InterruptedException
-    {
-        String nsc = "org.apache.derby.drda.NetworkServerControl";
-        // no arguments
-        String[] cmd = new String[] {nsc};
-        // we'll assume that we get the full message if we get 'Usage'
-        // because sometimes, the message gets returned with carriage return,
-        // and sometimes it doesn't, checking for two different parts...
-        assertExecJavaCmdAsExpected(new String[] 
-            {"No arguments given.", "Usage: "}, cmd, 1);
-        //Unknown command
-        cmd = new String[] {nsc, "unknowncmd"};
-        assertExecJavaCmdAsExpected(new String[] 
-            {"Command unknowncmd is unknown.", "Usage: "}, cmd, 0);
-        // wrong number of arguments
-        cmd = new String[] {nsc, "ping", "arg1"};
-        assertExecJavaCmdAsExpected(new String[] 
-            {"Invalid number of arguments for command ping.",
-             "Usage: "}, cmd, 1);
-    }
 }
