diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/text/LuceneSegmentRecordReader.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/text/LuceneSegmentRecordReader.java
index 00d90bae..f23eeff8 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/text/LuceneSegmentRecordReader.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/text/LuceneSegmentRecordReader.java
@@ -57,6 +57,12 @@ public void initialize(InputSplit split, TaskAttemptContext context) throws IOEx
 
 
     IndexSearcher searcher = new IndexSearcher(segmentReader);
+    String idField = lucene2SeqConfiguration.getIdField();
+    LuceneIndexHelper.fieldShouldExistInIndex(searcher, idField);
+    for (String field : lucene2SeqConfiguration.getFields()) {
+        LuceneIndexHelper.fieldShouldExistInIndex(searcher, field);
+    }
+
     Weight weight = lucene2SeqConfiguration.getQuery().createWeight(searcher);
     scorer = weight.scorer(segmentReader.getContext(), false, false, null);
     if (scorer == null) {
diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/text/LuceneSeqFileHelper.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/text/LuceneSeqFileHelper.java
index a557f3e7..fe5af54b 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/text/LuceneSeqFileHelper.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/text/LuceneSeqFileHelper.java
@@ -16,6 +16,7 @@
  */
 package org.apache.mahout.text;
 
+import com.google.common.base.Strings;
 import org.apache.hadoop.io.Text;
 import org.apache.lucene.document.Document;
 
@@ -47,14 +48,6 @@ public static void populateValues(Document document, Text theValue, List<String>
         }
       }
     }
-    theValue.set(nullSafe(valueBuilder.toString()));
-  }
-
-  public static String nullSafe(String value) {
-    if (value == null) {
-      return "";
-    } else {
-      return value;
-    }
+    theValue.set(Strings.nullToEmpty(valueBuilder.toString()));
   }
 }
diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromLuceneStorage.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromLuceneStorage.java
index 4adf2a80..6d2b487b 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromLuceneStorage.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromLuceneStorage.java
@@ -20,6 +20,7 @@
 import java.io.IOException;
 import java.util.List;
 
+import com.google.common.base.Strings;
 import com.google.common.io.Closeables;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileSystem;
@@ -62,6 +63,12 @@ public void run(final LuceneStorageConfiguration lucene2seqConf) throws IOExcept
       Directory directory = FSDirectory.open(new File(indexPath.toUri().getPath()));
       IndexReader reader = DirectoryReader.open(directory);
       IndexSearcher searcher = new IndexSearcher(reader);
+
+      LuceneIndexHelper.fieldShouldExistInIndex(searcher, lucene2seqConf.getIdField());
+      for (String field : lucene2seqConf.getFields()) {
+        LuceneIndexHelper.fieldShouldExistInIndex(searcher, field);
+      }
+
       Configuration configuration = lucene2seqConf.getConfiguration();
       FileSystem fileSystem = FileSystem.get(configuration);
       Path sequenceFilePath = new Path(lucene2seqConf.getSequenceFilesOutputPath(), indexPath.getName());
@@ -106,7 +113,7 @@ public void collect(int docNum) throws IOException {
 
         Document doc = storedFieldVisitor.getDocument();
         List<String> fields = lucene2seqConf.getFields();
-        Text theKey = new Text(LuceneSeqFileHelper.nullSafe(doc.get(lucene2seqConf.getIdField())));
+        Text theKey = new Text(Strings.nullToEmpty(doc.get(lucene2seqConf.getIdField())));
         Text theValue = new Text();
         LuceneSeqFileHelper.populateValues(doc, theValue, fields);
         //if they are both empty, don't write
diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromLuceneStorageMapper.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromLuceneStorageMapper.java
index a5fe3eec..31a20159 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromLuceneStorageMapper.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/text/SequenceFilesFromLuceneStorageMapper.java
@@ -17,6 +17,7 @@
 
 package org.apache.mahout.text;
 
+import com.google.common.base.Strings;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.io.NullWritable;
 import org.apache.hadoop.io.Text;
@@ -59,7 +60,7 @@ protected void map(Text key, NullWritable text, Context context) throws IOExcept
     segmentReader.document(docId, storedFieldVisitor);
     Document document = storedFieldVisitor.getDocument();
     List<String> fields = l2sConf.getFields();
-    Text theKey = new Text(LuceneSeqFileHelper.nullSafe(document.get(l2sConf.getIdField())));
+    Text theKey = new Text(Strings.nullToEmpty(document.get(l2sConf.getIdField())));
     Text theValue = new Text();
     LuceneSeqFileHelper.populateValues(document, theValue, fields);
     //if they are both empty, don't write
diff --git a/mahout/trunk/integration/src/test/java/org/apache/mahout/text/AbstractLuceneStorageTest.java b/mahout/trunk/integration/src/test/java/org/apache/mahout/text/AbstractLuceneStorageTest.java
index 5b56ea66..fe652656 100644
--- a/mahout/trunk/integration/src/test/java/org/apache/mahout/text/AbstractLuceneStorageTest.java
+++ b/mahout/trunk/integration/src/test/java/org/apache/mahout/text/AbstractLuceneStorageTest.java
@@ -74,11 +74,6 @@ protected void commitDocuments(Directory directory, SingleFieldDocument... docum
     commitDocuments(directory, Arrays.asList(documents));
   }
 
-  protected void assertSimpleDocumentEquals(SingleFieldDocument expected, Pair<Text, Text> actual) {
-    assertEquals(expected.getId(), actual.getFirst().toString());
-    assertEquals(expected.getField(), actual.getSecond().toString());
-  }
-
   protected void assertMultipleFieldsDocumentEquals(MultipleFieldsDocument expected, Pair<Text, Text> actual) {
     assertEquals(expected.getId(), actual.getFirst().toString());
     assertEquals(expected.getField() + " " + expected.getField1() + " " + expected.getField2(), actual.getSecond().toString());
diff --git a/mahout/trunk/integration/src/test/java/org/apache/mahout/text/LuceneSegmentRecordReaderTest.java b/mahout/trunk/integration/src/test/java/org/apache/mahout/text/LuceneSegmentRecordReaderTest.java
index bf1c2531..4cfd295f 100644
--- a/mahout/trunk/integration/src/test/java/org/apache/mahout/text/LuceneSegmentRecordReaderTest.java
+++ b/mahout/trunk/integration/src/test/java/org/apache/mahout/text/LuceneSegmentRecordReaderTest.java
@@ -32,19 +32,26 @@
 import java.lang.reflect.InvocationTargetException;
 
 import static java.util.Arrays.asList;
+import static org.apache.mahout.text.doc.SingleFieldDocument.*;
 
 public class LuceneSegmentRecordReaderTest extends AbstractLuceneStorageTest {
   private Configuration configuration;
 
+  private LuceneStorageConfiguration lucene2SeqConf;
+
+  private LuceneSegmentRecordReader recordReader;
+
+  private SegmentInfos segmentInfos;
 
   @Before
   public void before() throws IOException, InterruptedException {
-    LuceneStorageConfiguration lucene2SeqConf = new
-    LuceneStorageConfiguration(getConfiguration(), asList(getIndexPath1()), new Path("output"), "id", asList("field"));
+    lucene2SeqConf = new LuceneStorageConfiguration(getConfiguration(), asList(getIndexPath1()), new Path("output"), ID_FIELD, asList(FIELD));
     configuration = lucene2SeqConf.serialize();
+    recordReader = new LuceneSegmentRecordReader();
     commitDocuments(getDirectory(getIndexPath1AsFile()), docs.subList(0, 500));
     commitDocuments(getDirectory(getIndexPath1AsFile()), docs.subList(500, 1000));
-
+    segmentInfos = new SegmentInfos();
+    segmentInfos.read(getDirectory(getIndexPath1AsFile()));
   }
 
   @After
@@ -54,9 +61,6 @@ public void after() throws IOException {
 
   @Test
   public void testKey() throws Exception {
-    LuceneSegmentRecordReader recordReader = new LuceneSegmentRecordReader();
-    SegmentInfos segmentInfos = new SegmentInfos();
-    segmentInfos.read(getDirectory(getIndexPath1AsFile()));
     for (SegmentInfoPerCommit segmentInfo : segmentInfos) {
       int docId = 0;
       LuceneSegmentInputSplit inputSplit = new LuceneSegmentInputSplit(getIndexPath1(), segmentInfo.info.name, segmentInfo.sizeInBytes());
@@ -72,11 +76,29 @@ public void testKey() throws Exception {
     }
   }
 
+  @Test(expected = IllegalArgumentException.class)
+  public void testNonExistingIdField() throws Exception {
+    configuration = new LuceneStorageConfiguration(getConfiguration(), asList(getIndexPath1()), new Path("output"), "nonExistingId", asList(FIELD)).serialize();
+    SegmentInfoPerCommit segmentInfo = segmentInfos.iterator().next();
+    LuceneSegmentInputSplit inputSplit = new LuceneSegmentInputSplit(getIndexPath1(), segmentInfo.info.name, segmentInfo.sizeInBytes());
+    TaskAttemptContext context = getTaskAttemptContext(configuration, new TaskAttemptID());
+    recordReader.initialize(inputSplit, context);
+  }
+
+  @Test(expected = IllegalArgumentException.class)
+  public void testNonExistingField() throws Exception {
+    configuration = new LuceneStorageConfiguration(getConfiguration(), asList(getIndexPath1()), new Path("output"), ID_FIELD, asList("nonExistingField")).serialize();
+    SegmentInfoPerCommit segmentInfo = segmentInfos.iterator().next();
+    LuceneSegmentInputSplit inputSplit = new LuceneSegmentInputSplit(getIndexPath1(), segmentInfo.info.name, segmentInfo.sizeInBytes());
+    TaskAttemptContext context = getTaskAttemptContext(configuration, new TaskAttemptID());
+    recordReader.initialize(inputSplit, context);
+  }
+
   // Use reflection to abstract this incompatibility between Hadoop 1 & 2 APIs.
   private TaskAttemptContext getTaskAttemptContext(Configuration conf, TaskAttemptID jobID) throws
       ClassNotFoundException, NoSuchMethodException, IllegalAccessException,
       InvocationTargetException, InstantiationException {
-    Class<? extends TaskAttemptContext> clazz = null;
+    Class<? extends TaskAttemptContext> clazz;
     if (!TaskAttemptContext.class.isInterface()) {
       clazz = TaskAttemptContext.class;
     } else {
diff --git a/mahout/trunk/integration/src/test/java/org/apache/mahout/text/SequenceFilesFromLuceneStorageDriverTest.java b/mahout/trunk/integration/src/test/java/org/apache/mahout/text/SequenceFilesFromLuceneStorageDriverTest.java
index bc4c03a9..f3b46eb2 100644
--- a/mahout/trunk/integration/src/test/java/org/apache/mahout/text/SequenceFilesFromLuceneStorageDriverTest.java
+++ b/mahout/trunk/integration/src/test/java/org/apache/mahout/text/SequenceFilesFromLuceneStorageDriverTest.java
@@ -27,6 +27,7 @@
 import org.apache.mahout.common.iterator.sequencefile.PathFilters;
 import org.apache.mahout.common.iterator.sequencefile.PathType;
 import org.apache.mahout.common.iterator.sequencefile.SequenceFileDirIterator;
+import org.apache.mahout.text.doc.MultipleFieldsDocument;
 import org.apache.mahout.text.doc.SingleFieldDocument;
 import org.junit.After;
 import org.junit.Before;
@@ -53,7 +54,7 @@ public void before() throws Exception {
       + "org.apache.hadoop.io.serializer.WritableSerialization");
 
     seqFilesOutputPath = new Path(getTestTempDirPath(), "seqfiles");
-    idField = "id";
+    idField = SingleFieldDocument.ID_FIELD;
     fields = asList("field");
 
     driver = new SequenceFilesFromLuceneStorageDriver() {
@@ -90,6 +91,9 @@ public void testNewLucene2SeqConfiguration() {
 
   @Test
   public void testRun() throws Exception {
+    List<MultipleFieldsDocument> docs = asList(new MultipleFieldsDocument("123", "test 1", "test 2", "test 3"));
+    commitDocuments(getDirectory(getIndexPath1AsFile()), docs.get(0));
+
     String queryField = "queryfield";
     String queryTerm = "queryterm";
     String maxHits = "500";
diff --git a/mahout/trunk/integration/src/test/java/org/apache/mahout/text/SequenceFilesFromLuceneStorageTest.java b/mahout/trunk/integration/src/test/java/org/apache/mahout/text/SequenceFilesFromLuceneStorageTest.java
index 3f9305c1..e29408b1 100644
--- a/mahout/trunk/integration/src/test/java/org/apache/mahout/text/SequenceFilesFromLuceneStorageTest.java
+++ b/mahout/trunk/integration/src/test/java/org/apache/mahout/text/SequenceFilesFromLuceneStorageTest.java
@@ -16,6 +16,7 @@
  */
 package org.apache.mahout.text;
 
+import com.google.common.collect.Maps;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.io.Text;
@@ -33,7 +34,6 @@
 import org.junit.Test;
 
 import java.io.IOException;
-import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
 
@@ -79,7 +79,7 @@ public void testRun2Directories() throws Exception {
     lucene2Seq.run(lucene2SeqConf);
 
     Iterator<Pair<Text, Text>> iterator = lucene2SeqConf.getSequenceFileIterator();
-    Map<String, Text> map = new HashMap<String, Text>();
+    Map<String, Text> map = Maps.newHashMap();
     while (iterator.hasNext()) {
       Pair<Text, Text> next = iterator.next();
       map.put(next.getFirst().toString(), next.getSecond());
@@ -143,7 +143,7 @@ public void testRunQuery() throws IOException {
       asList(getIndexPath1()),
       seqFilesOutputPath,
       SingleFieldDocument.ID_FIELD,
-      asList(UnstoredFieldsDocument.FIELD, UnstoredFieldsDocument.UNSTORED_FIELD));
+      asList(SingleFieldDocument.FIELD));
 
     Query query = new TermQuery(new Term(lucene2SeqConf.getFields().get(0), "599"));
 
@@ -201,4 +201,30 @@ public void testRunNumericField() throws IOException {
     assertNumericFieldEquals(doc2, iterator.next());
     assertNumericFieldEquals(doc3, iterator.next());
   }
+
+  @Test(expected = IllegalArgumentException.class)
+  public void testNonExistingIdField() throws IOException {
+    commitDocuments(getDirectory(getIndexPath1AsFile()), docs.subList(0, 500));
+
+    lucene2SeqConf = new LuceneStorageConfiguration(configuration,
+        asList(getIndexPath1()),
+        seqFilesOutputPath,
+        "nonExistingField",
+        asList(SingleFieldDocument.FIELD));
+
+    lucene2Seq.run(lucene2SeqConf);
+  }
+
+  @Test(expected = IllegalArgumentException.class)
+  public void testNonExistingField() throws IOException {
+    commitDocuments(getDirectory(getIndexPath1AsFile()), docs.subList(0, 500));
+
+    lucene2SeqConf = new LuceneStorageConfiguration(configuration,
+        asList(getIndexPath1()),
+        seqFilesOutputPath,
+        SingleFieldDocument.ID_FIELD,
+        asList(SingleFieldDocument.FIELD, "nonExistingField"));
+
+    lucene2Seq.run(lucene2SeqConf);
+  }
 }
