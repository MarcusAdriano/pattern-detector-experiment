diff --git a/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogAuthorImpl.java b/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogAuthorImpl.java
index e69de29b..bc29c45b 100644
--- a/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogAuthorImpl.java
+++ b/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogAuthorImpl.java
@@ -0,0 +1,88 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog;
+
+import java.util.Calendar;
+import java.util.Date;
+import java.util.List;
+
+import org.apache.aries.samples.blog.api.BlogAuthor;
+import org.apache.aries.samples.blog.api.BlogEntry;
+import org.apache.aries.samples.blog.persistence.api.Author;
+import org.apache.aries.samples.blog.persistence.api.Entry;
+
+
+
+public class BlogAuthorImpl implements BlogAuthor
+{
+  private static Calendar cal = Calendar.getInstance();
+  private Author author;
+  
+  public BlogAuthorImpl(Author a)
+  {
+    author = a;
+  }
+
+  public String getBio()
+  {
+    return author.getBio();
+  }
+
+  public String getEmailAddress()
+  {
+    return author.getEmail();
+  }
+
+  public String getFullName()
+  {
+    return author.getName();
+  }
+
+  public String getName()
+  {
+    return author.getDisplayName();
+  }
+
+  public String getDateOfBirth()
+  {
+    Date dob = author.getDob();
+    
+    int year;
+    int month;
+    int date;
+    
+    synchronized (cal) {
+      cal.setTime(dob);
+      year = cal.get(Calendar.YEAR);
+      month = cal.get(Calendar.MONTH) + 1;
+      date = cal.get(Calendar.DATE);
+    }
+    
+    return year + "-" + month + "-" + date;
+  }
+  
+	public List<? extends BlogEntry> getEntries() {
+		return adapt(author.getEntries());
+	}
+	
+	private List<? extends BlogEntry> adapt (List<? extends Entry> list) {
+		List<BlogEntryImpl> bei = null;;
+		return bei;
+	}
+}
diff --git a/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogAuthorManagerImpl.java b/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogAuthorManagerImpl.java
index e69de29b..3c4e36bc 100644
--- a/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogAuthorManagerImpl.java
+++ b/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogAuthorManagerImpl.java
@@ -0,0 +1,98 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.Iterator;
+import java.util.List;
+
+import org.apache.aries.samples.blog.api.*;
+import org.apache.aries.samples.blog.persistence.api.Author;
+import org.apache.aries.samples.blog.persistence.api.BlogPersistenceService;
+
+
+
+public class BlogAuthorManagerImpl implements BlogAuthorManager
+{
+  private BlogPersistenceService persistenceService;
+
+  // Blueprint injection used to set the persistenceService
+  public void setPersistenceService(BlogPersistenceService persistenceService)
+  {
+    this.persistenceService = persistenceService;
+  }
+  
+  public void createAuthor(String email, String dob, String name, String displayName, String bio) throws ParseException
+  {
+    if(email == null) throw new IllegalArgumentException("Email must not be null");
+   
+    Date dateOfBirth;
+    
+	dateOfBirth = (dob == null || "".equals(dob)) ? null : new SimpleDateFormat("dd-mm-yyyy").parse(dob);
+	
+    persistenceService.createAuthor(email, dateOfBirth, name, displayName, bio);
+  }
+  
+  public List<? extends BlogAuthor> getAllAuthors()
+  {
+	  List<? extends Author> authors = persistenceService.getAllAuthors();
+		return adaptAuthor(authors);
+  }
+  
+  public BlogAuthor getAuthor(String emailAddress)
+  {
+    if(emailAddress == null) throw new IllegalArgumentException("Email must not be null");
+    Author a = persistenceService.getAuthor(emailAddress);
+    if (a != null)
+		return new BlogAuthorImpl(a);
+	else
+		return null;
+  }
+  
+  public void removeAuthor(String emailAddress)
+  {
+    if(emailAddress == null) throw new IllegalArgumentException("Email must not be null");
+    persistenceService.removeAuthor(emailAddress);
+  }
+  
+  public void updateAuthor(String email, String dob, String name, String displayName, String bio) throws ParseException
+  { 
+	  if (email == null)
+			throw new IllegalArgumentException("Email must not be null");
+    Date dateOfBirth = (dob == null) ? null : new SimpleDateFormat("yyyy-MM-dd").parse(dob);
+    persistenceService.updateAuthor(email, dateOfBirth, name, displayName, bio);
+  }
+  
+	private List<? extends BlogAuthor> adaptAuthor(
+			List<? extends Author> authors) {
+		List<BlogAuthorImpl> list = new ArrayList<BlogAuthorImpl>();
+
+		Iterator<? extends Author> a = authors.iterator();
+		while (a.hasNext()) {
+			list.add(new BlogAuthorImpl(a.next()));
+		}
+
+		return list;
+
+	}
+  
+}
diff --git a/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogCommentImpl.java b/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogCommentImpl.java
index e69de29b..2c9c31ea 100644
--- a/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogCommentImpl.java
+++ b/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogCommentImpl.java
@@ -0,0 +1,88 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog;
+
+import java.util.Date;
+import java.util.Calendar;
+
+import org.apache.aries.samples.blog.api.BlogAuthor;
+import org.apache.aries.samples.blog.api.BlogComment;
+import org.apache.aries.samples.blog.api.BlogEntry;
+import org.apache.aries.samples.blog.comment.persistence.api.Comment;
+
+
+public class BlogCommentImpl implements BlogComment {
+	private static Calendar cal = Calendar.getInstance();
+	
+	private Comment comment;
+	
+	public BlogCommentImpl(Comment c) {
+		 comment = c;
+	}
+  /** Get comment 
+   *  @return the String representing the comment 
+   */
+  public String getComment() {
+	  return comment.getComment();
+  }
+  
+  /** Get the author of the comment 
+   *  @return the BlogAuthor instance 
+   */
+  public BlogAuthor getAuthor() {
+	  return new BlogAuthorImpl(comment.getAuthor());
+  }
+  
+  /** Get the parent blog post for the comment 
+   *  @return the BlogPost instance the comment is attached to.  
+   */
+  public BlogEntry getEntry() {
+	  return new BlogEntryImpl(comment.getEntry());
+  }
+
+  /** Get the Id value of the comment 
+   *  @return the integer id of the comment 
+   */
+  public int getId() {
+	  return comment.getId();
+  }
+  
+  /** Get the creation date for the comment 
+   *  @return the String representation of the date the comment was
+   *  created in dd-mm-yyyy format. 
+   */
+  public String getCommentCreationDate() {
+	  
+	  Date dc = comment.getCreationDate();
+	  int year;
+		int month;
+		int date;
+
+		synchronized (cal) {
+			cal.setTime(dc);
+			year = cal.get(Calendar.YEAR);
+			month = cal.get(Calendar.MONTH) + 1;
+			date = cal.get(Calendar.DATE);
+		}
+
+		return year + "-" + month + "-" + date;
+
+  }
+  
+}
diff --git a/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogCommentManagerImpl.java b/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogCommentManagerImpl.java
index e69de29b..80053515 100644
--- a/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogCommentManagerImpl.java
+++ b/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogCommentManagerImpl.java
@@ -0,0 +1,88 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+import org.apache.aries.samples.blog.api.BlogComment;
+import org.apache.aries.samples.blog.api.BlogCommentManager;
+import org.apache.aries.samples.blog.comment.persistence.api.BlogCommentService;
+import org.apache.aries.samples.blog.comment.persistence.api.Comment;
+
+
+public class BlogCommentManagerImpl implements BlogCommentManager {
+	
+	private BlogCommentService commentService;
+	private boolean commentServiceValid;
+	
+	// Injected via blueprint
+	public void setCommentService(BlogCommentService bcs) {
+		commentService = bcs;
+	}
+
+
+	public void createComment(String comment, String email, long entryId) {
+		commentService.createComment(comment, email, entryId);
+	}
+
+	public List<? extends BlogComment> getCommentsByAuthor(String email) {
+		List<? extends Comment> comment = commentService.getCommentsForAuthor(email);
+		return adaptComment(comment);
+		
+	}		
+
+	public List<? extends BlogComment> getCommentsForPost(long id) {
+		List<? extends Comment> comment = commentService.getCommentsForEntry(id);
+		return adaptComment(comment);
+	}
+		
+
+	public void deleteComment(int id) {
+		commentService.delete(id);
+	}
+
+	private List<? extends BlogComment> adaptComment(
+			List<? extends Comment> comments) {
+		List<BlogComment> list = new ArrayList<BlogComment>();
+
+		Iterator<? extends Comment> c = comments.iterator();
+		while (c.hasNext()) {
+			list.add(new BlogCommentImpl(c.next()));
+			
+		}
+		return list;
+
+	}
+	
+	public boolean isCommentingAvailable() {
+		return commentServiceValid;
+	}
+	
+	public void blogServiceBound(BlogCommentService comment, Map props) {
+		commentServiceValid = true;
+	}
+
+	public void blogServiceUnbound(BlogCommentService comment, Map props) {
+
+	}
+
+}
diff --git a/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogEntryImpl.java b/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogEntryImpl.java
index e69de29b..5d32a9d3 100644
--- a/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogEntryImpl.java
+++ b/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogEntryImpl.java
@@ -0,0 +1,69 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog;
+
+import java.util.Date;
+
+import org.apache.aries.samples.blog.api.BlogAuthor;
+import org.apache.aries.samples.blog.api.BlogEntry;
+import org.apache.aries.samples.blog.persistence.api.Entry;
+
+
+/** Implementation of a BlogPast */
+public class BlogEntryImpl implements BlogEntry
+{
+  public Entry theEntry;
+
+  public BlogEntryImpl(Entry blogEntry)
+  {
+    theEntry = blogEntry;
+  }
+
+  public BlogAuthor getAuthor()
+  {
+    return new BlogAuthorImpl(theEntry.getAuthor());
+    
+  }
+
+  public String getBody()
+  {
+    return theEntry.getBlogText();
+  }
+
+  public String getTitle()
+  {
+    return theEntry.getTitle();
+  }
+
+  public String getAuthorEmail()
+  {
+    return theEntry.getAuthor().getEmail();
+  }
+  
+  public Date getPublishDate()
+  {
+    return theEntry.getPublishDate();
+  }
+  
+  public long getId()
+  {
+    return theEntry.getId();
+  }
+
+}
diff --git a/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogEntryManagerImpl.java b/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogEntryManagerImpl.java
index e69de29b..77f0f067 100644
--- a/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogEntryManagerImpl.java
+++ b/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogEntryManagerImpl.java
@@ -0,0 +1,168 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+import org.apache.aries.samples.blog.api.BlogAuthor;
+import org.apache.aries.samples.blog.api.BlogEntry;
+import org.apache.aries.samples.blog.api.BlogEntryManager;
+import org.apache.aries.samples.blog.persistence.api.BlogPersistenceService;
+import org.apache.aries.samples.blog.persistence.api.Entry;
+
+
+
+public class BlogEntryManagerImpl implements BlogEntryManager
+{
+  private BlogPersistenceService persistenceService;
+  
+
+  // Injected via blueprint
+  public void setPersistenceService(BlogPersistenceService persistenceService)
+  {
+    this.persistenceService = persistenceService;
+  }
+  
+  
+  public void createBlogPost(String email, String title, String blogText, List<String> tags)
+  {
+    persistenceService.createBlogPost(email, title, blogText, tags);
+  }
+  
+  public Entry findBlogEntryByTitle(String title)
+  {
+    return persistenceService.findBlogEntryByTitle(title);
+  }
+  
+  public List<? extends BlogEntry> getAllBlogEntries()
+  {
+	  List<? extends Entry> entries = persistenceService.getAllBlogEntries();
+		return adaptEntries(entries);
+  }
+  
+  public List<? extends BlogEntry> getBlogEntries(int firstPostIndex, int noOfPosts)
+  { 
+	  List<? extends Entry> entries = persistenceService.getBlogEntries(firstPostIndex, noOfPosts);		   		      
+		return adaptEntries(entries);
+  }
+  
+  public List<? extends BlogEntry> getBlogsForAuthor(String emailAddress)
+  {
+		List <?extends Entry> entries= persistenceService.getBlogsForAuthor(emailAddress);
+		return adaptEntries(entries);
+    
+  }
+  
+  public List<? extends BlogEntry> getBlogEntriesModifiedBetween(String startDate, String endDate) throws ParseException
+  {
+    if(startDate == null || "".equals(startDate)) throw new IllegalArgumentException("A valid start date must be supplied");
+    if(endDate == null || "".equals(endDate)) throw new IllegalArgumentException("A valid end date must be supplied");
+    SimpleDateFormat sdf = new SimpleDateFormat("dd-mm-yyyy");
+    Date start = sdf.parse(startDate);
+    Date end = sdf.parse(endDate);
+	List <? extends Entry> entries = persistenceService.getBlogEntriesModifiedBetween(start, end);
+	return adaptEntries(entries);
+  }
+  
+  public int getNoOfPosts()
+  {
+    return persistenceService.getNoOfBlogEntries();
+  }
+  
+  public void removeBlogEntry(BlogAuthor a, String title, String publishDate) throws ParseException
+  {
+    if(a == null) throw new IllegalArgumentException("An author must be specified");
+    if(title == null) title = "";
+    if(publishDate == null) throw new IllegalArgumentException("The article must have a publication date");
+    Date pubDate = parseDate(publishDate);
+    long found = -920234218060948564L;
+    
+    for(BlogEntry b : a.getEntries()) {
+      if(title.equals(b.getTitle()) && pubDate.equals(b.getPublishDate())){
+        found = b.getId();
+        break;
+      }
+    }
+    persistenceService.removeBlogEntry(found);
+  }
+  
+  public void updateBlogEntry(BlogEntry originalEntry, BlogAuthor a, String title, String publishDate, String blogText, List<String> tags) throws ParseException
+  {
+	
+	if (originalEntry.getAuthor() == null
+			|| originalEntry.getAuthorEmail() == null)
+		throw new IllegalArgumentException("An author must be specified");
+	if (title == null)
+		title = "";
+	if (publishDate == null)
+		throw new IllegalArgumentException(
+				"The article must have a publication date");
+	long found = -920234218060948564L;
+	Date pubDate = parseDate(publishDate);
+	for (BlogEntry b : getBlogsForAuthor(originalEntry.getAuthorEmail()
+			)) {
+		if (title.equals(b.getTitle())
+				&& pubDate.equals(b.getPublishDate())) {
+			found = b.getId();
+			break;
+		}
+	}
+
+	if (found == -920234218060948564L)
+		throw new IllegalArgumentException("No blog entry could be found");
+
+	String email = a.getEmailAddress();
+
+	if (tags == null) {
+		tags = new ArrayList<String>();
+	}
+
+	Date updatedDate = new Date(System.currentTimeMillis());
+
+	persistenceService.updateBlogEntry(found, email, title, blogText, tags,
+			updatedDate);
+  }
+  
+  private Date parseDate(String dateString) throws ParseException
+  {
+    SimpleDateFormat sdf = new SimpleDateFormat("dd-mm-yyyy");
+    return sdf.parse(dateString);
+  }
+
+  
+  public BlogEntry getBlogPost(long id)
+  {
+    return new BlogEntryImpl(persistenceService.getBlogEntryById(id));
+  }
+  
+	private List <? extends BlogEntry> adaptEntries(List<? extends Entry> e) {
+		  List<BlogEntryImpl> posts = new ArrayList<BlogEntryImpl>();
+		    
+		    for (Entry entry : e) {
+		      posts.add(new BlogEntryImpl(entry));
+		    }
+		      
+		return posts;
+	}
+	
+}
diff --git a/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogImpl.java b/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogImpl.java
index e69de29b..67d53eee 100644
--- a/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogImpl.java
+++ b/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BlogImpl.java
@@ -0,0 +1,32 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog;
+
+import org.apache.aries.samples.blog.api.Blog;
+
+
+/** Implementation of Blog */
+public class BlogImpl implements Blog
+{
+  
+  public String getBlogTitle()
+  {
+    return "Sample Blog";
+  }
+}
diff --git a/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BloggingServiceImpl.java b/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BloggingServiceImpl.java
index e69de29b..bbc28701 100644
--- a/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BloggingServiceImpl.java
+++ b/incubator/aries/trunk/samples/blog-sample/blog-biz/src/main/java/org/apache/aries/samples/blog/BloggingServiceImpl.java
@@ -0,0 +1,127 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.samples.blog;
+
+import java.text.ParseException;
+import java.util.Arrays;
+import java.util.List;
+
+import org.apache.aries.samples.blog.api.BlogAuthor;
+import org.apache.aries.samples.blog.api.BlogAuthorManager;
+import org.apache.aries.samples.blog.api.BlogComment;
+import org.apache.aries.samples.blog.api.BlogCommentManager;
+import org.apache.aries.samples.blog.api.BlogEntry;
+import org.apache.aries.samples.blog.api.BlogEntryManager;
+import org.apache.aries.samples.blog.api.BloggingService;
+
+/** Implementation of the BloggingService */
+public class BloggingServiceImpl implements BloggingService {
+	private BlogEntryManager blogEntryManager;
+	private BlogAuthorManager blogAuthorManager;
+	private BlogCommentManager blogCommentManager;
+
+	// Injected via blueprint
+	public void setBlogEntryManager(BlogEntryManager blogPostManager) {
+		this.blogEntryManager = blogPostManager;
+	}
+
+	// Injected via blueprint
+	public void setBlogAuthorManager(BlogAuthorManager authorManager) {
+		this.blogAuthorManager = authorManager;
+	}
+	
+	// Injected via blueprint
+	public void setBlogCommentManager(BlogCommentManager commentManager) {
+		this.blogCommentManager = commentManager;
+	}
+
+
+	public String getBlogTitle() {
+		return new BlogImpl().getBlogTitle();
+	}
+
+	public BlogAuthor getBlogAuthor(String email) {
+		return blogAuthorManager.getAuthor(email);
+	}
+
+	public void createBlogAuthor(String email, String nickName, String name,
+			String bio, String dob) {
+		try {
+			blogAuthorManager.createAuthor(email, dob, name, nickName, bio);
+		} catch (ParseException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+	}
+
+	public void updateBlogAuthor(String email, String nickName, String name,
+			String bio, String dob) {
+		try {
+			blogAuthorManager.updateAuthor(email, dob, name, nickName, bio);
+		} catch (ParseException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+	}
+
+	public BlogEntry getPost(long id) {
+		return blogEntryManager.getBlogPost(id);
+	}
+
+	public List<? extends BlogEntry> getBlogEntries(int firstPostIndex,
+			int noOfPosts) {
+		return blogEntryManager.getBlogEntries(firstPostIndex, noOfPosts);
+
+	}
+
+	public List<? extends BlogEntry> getAllBlogEntries() {
+		return blogEntryManager.getAllBlogEntries();
+	}
+
+	public int getNoOfEntries() {
+		return blogEntryManager.getNoOfPosts();
+	}
+
+	public void createBlogEntry(String email, String title, String blogText,
+			String tags) {
+		blogEntryManager.createBlogPost(email, title, blogText, Arrays
+				.asList(tags.split(",")));
+	}
+
+	public void createBlogComment(String comment, String authorEmail, long id) {
+		blogCommentManager.createComment(comment, authorEmail, id);
+	}
+
+	public void deleteBlogComment(BlogComment comment) {
+		blogCommentManager.deleteComment(comment.getId());
+	}
+
+	public List<? extends BlogComment> getCommentsForEntry(BlogEntry entry) {
+		return blogCommentManager.getCommentsForPost(entry.getId());
+	}
+
+	public BlogEntry getBlogEntry(long id) {
+		return blogEntryManager.getBlogPost(id);
+	}
+	
+	public boolean isCommentingAvailable() {
+		return blogCommentManager.isCommentingAvailable();
+
+	}
+}
