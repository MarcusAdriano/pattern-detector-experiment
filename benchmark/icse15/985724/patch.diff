diff --git a/cassandra/trunk/src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java b/cassandra/trunk/src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java
index 565a1a10..90192f07 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java
@@ -118,7 +118,7 @@ public String getDatacenter(InetAddress endpoint)
 
     public List<InetAddress> sortByProximity(final InetAddress address, List<InetAddress> addresses)
     {
-        assert address == FBUtilities.getLocalAddress(); // we only know about ourself
+        assert address.equals(FBUtilities.getLocalAddress()); // we only know about ourself
         Collections.sort(addresses, new Comparator<InetAddress>()
         {
             public int compare(InetAddress a1, InetAddress a2)
@@ -134,14 +134,12 @@ public int compareEndpoints(InetAddress target, InetAddress a1, InetAddress a2)
         Double scored1 = scores.get(a1);
         Double scored2 = scores.get(a2);
 
-        if (scored1 == null || scored2 == null)
+        if (scored1 == null || scored2 == null || scored1.equals(scored2))
             return subsnitch.compareEndpoints(target, a1, a2);
-        if (scored1.equals(scored2))
-            return 0;
         if (scored1 < scored2)
-            return 1;
-        else
             return -1;
+        else
+            return 1;
     }
 
     public void receiveTiming(InetAddress host, Double latency) // this is cheap
@@ -234,7 +232,7 @@ public int size()
     {
         double mean = mean();
         double exponent = (-1) * (t) / mean;
-        return Math.pow( Math.E, exponent);
+        return 1 - Math.pow( Math.E, exponent);
     }
 
     double score()
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/locator/DynamicEndpointSnitchTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/locator/DynamicEndpointSnitchTest.java
index 62904b46..c7eb9824 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/locator/DynamicEndpointSnitchTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/locator/DynamicEndpointSnitchTest.java
@@ -25,9 +25,6 @@
 
 import org.junit.Test;
 
-import static org.junit.Assert.*;
-import org.apache.cassandra.locator.DynamicEndpointSnitch;
-import org.apache.cassandra.locator.SimpleSnitch;
 import org.apache.cassandra.utils.FBUtilities;
 
 public class DynamicEndpointSnitchTest
@@ -35,6 +32,7 @@
     @Test
     public void testSnitch() throws UnknownHostException, InterruptedException
     {
+        int sleeptime = 150;
         DynamicEndpointSnitch dsnitch = new DynamicEndpointSnitch(new SimpleSnitch());
         InetAddress self = FBUtilities.getLocalAddress();
         ArrayList<InetAddress> order = new ArrayList<InetAddress>();
@@ -50,34 +48,31 @@ public void testSnitch() throws UnknownHostException, InterruptedException
             dsnitch.receiveTiming(host3, 1.0);
         }
 
-        Thread.sleep(1500);
+        Thread.sleep(sleeptime);
 
         order.add(host1);
         order.add(host2);
         order.add(host3);
-
         assert dsnitch.getSortedListByProximity(self, order).equals(order);
 
         // make host1 a little worse
         dsnitch.receiveTiming(host1, 2.0);
-        Thread.sleep(1500);
-        order.clear();
+        Thread.sleep(sleeptime);
 
+        order.clear();
         order.add(host2);
         order.add(host3);
         order.add(host1);
-
         assert dsnitch.getSortedListByProximity(self, order).equals(order);
 
-        // make host2 a little worse
+        // make host2 as bad as host1
         dsnitch.receiveTiming(host2, 2.0);
-        Thread.sleep(1500);
-        order.clear();
+        Thread.sleep(sleeptime);
 
+        order.clear();
         order.add(host3);
-        order.add(host2);
         order.add(host1);
-
+        order.add(host2);
         assert dsnitch.getSortedListByProximity(self, order).equals(order);
 
         // make host3 the worst
@@ -85,25 +80,25 @@ public void testSnitch() throws UnknownHostException, InterruptedException
         {
             dsnitch.receiveTiming(host3, 2.0);
         }
-        Thread.sleep(1500);
-        order.clear();
+        Thread.sleep(sleeptime);
 
-        order.add(host2);
+        order.clear();
         order.add(host1);
+        order.add(host2);
         order.add(host3);
+        assert dsnitch.getSortedListByProximity(self, order).equals(order);
 
         // make host3 equal to the others
         for (int i = 0; i < 2; i++)
         {
             dsnitch.receiveTiming(host3, 1.0);
         }
-        Thread.sleep(1500);
-        order.clear();
+        Thread.sleep(sleeptime);
 
+        order.clear();
         order.add(host1);
         order.add(host2);
         order.add(host3);
-
         assert dsnitch.getSortedListByProximity(self, order).equals(order);
     }
 }
