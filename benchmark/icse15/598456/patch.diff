diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/SysinfoLocaleTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/SysinfoLocaleTest.java
index 27edd411..74952159 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/SysinfoLocaleTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/SysinfoLocaleTest.java
@@ -53,6 +53,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      */
     private final boolean localizedToGerman;
 
+    /** Name of the test. */
+    private final String name;
+
     /** The default locale before this test started. */
     private Locale savedLocale;
 
@@ -61,11 +64,24 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      *
      * @param defaultLocale the default locale for this test
      * @param german true if output is expected to be localized to German
+     * @param info extra information to append to the test name (for debugging)
      */
-    private SysinfoLocaleTest(Locale defaultLocale, boolean german) {
+    private SysinfoLocaleTest(Locale defaultLocale, boolean german,
+                              String info) {
         super("testSysinfoLocale");
         this.defaultLocale = defaultLocale;
         this.localizedToGerman = german;
+        this.name = super.getName() + ":" + info;
+    }
+
+    /**
+     * Returns the name of the test, which includes the default locale and
+     * derby.ui.locale to aid debugging.
+     *
+     * @return name of the test
+     */
+    public String getName() {
+        return name;
     }
 
     /**
@@ -130,7 +146,8 @@ private static Test createTest(Locale loc, String ui, boolean german) {
         // always set the encoding so that we can reliably read the output
         prop.setProperty("derby.ui.codeset", ENCODING);
 
-        Test test = new SysinfoLocaleTest(loc, german);
+        String info = "defaultLocale=" + loc + ",uiLocale=" + ui;
+        Test test = new SysinfoLocaleTest(loc, german, info);
         return new SystemPropertyTestSetup(test, prop);
     }
 
@@ -193,21 +210,30 @@ private static String getSysinfoOutput() throws Exception {
         "Informazioni sulla locale",
     };
 
+    /**
+     * Checks that all the expected substrings are part of the output from
+     * sysinfo. Fails if one or more of the substrings are not found.
+     *
+     * @param expectedSubstrings substrings in the expected locale
+     * @param output the output from sysinfo
+     */
+    private void assertContains(String[] expectedSubstrings, String output) {
+        for (int i = 0; i < expectedSubstrings.length; i++) {
+            String s = expectedSubstrings[i];
+            if (output.indexOf(s) == -1) {
+                fail("Substring '" + s + "' not found in output: " + output);
+            }
+        }
+    }
+
     /**
      * Test method which checks that the output from sysinfo is correctly
      * localized.
      */
     public void testSysinfoLocale() throws Exception {
         String output = getSysinfoOutput();
-
-        for (int i = 0; i < GERMAN_STRINGS.length; i++) {
-            assertEquals(localizedToGerman,
-                         output.indexOf(GERMAN_STRINGS[i]) != -1);
-        }
-
-        for (int i = 0; i < ITALIAN_STRINGS.length; i++) {
-            assertEquals(localizedToGerman,
-                         output.indexOf(ITALIAN_STRINGS[i]) == -1);
-        }
+        String[] expectedSubstrings =
+                localizedToGerman ? GERMAN_STRINGS : ITALIAN_STRINGS;
+        assertContains(expectedSubstrings, output);
     }
 }
