diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/AffinityMatrixInputJob.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/AffinityMatrixInputJob.java
index b45d221f..63917093 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/AffinityMatrixInputJob.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/AffinityMatrixInputJob.java
@@ -59,6 +59,8 @@ public static void runJob(Path input, Path output, int rows, int cols)
     FileInputFormat.addInputPath(job, input);
     FileOutputFormat.setOutputPath(job, output);
 
+    job.setJarByClass(AffinityMatrixInputJob.class);
+
     job.waitForCompletion(true);
   }
 
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/AffinityMatrixInputMapper.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/AffinityMatrixInputMapper.java
index e788814c..0c6845f6 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/AffinityMatrixInputMapper.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/AffinityMatrixInputMapper.java
@@ -57,7 +57,7 @@ protected void map(LongWritable key, Text value, Context context) throws IOExcep
     if (elements.length != 3) {
       throw new IOException("Expected input of length 3, received "
           + elements.length + ". Please make sure you adhere to "
-          + "the structure of (i,j,value) for representing a graph in text.");
+          + "the structure of (i,j,value) for representing a graph in text. Input line was: '"+value+"'.");
     } else if (elements[0].length() == 0 || elements[1].length() == 0 || elements[2].length() == 0) {
       throw new IOException("Found an element of 0 length. Please be sure you adhere to the structure of "
           + "(i,j,value) for  representing a graph in text.");
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/MatrixDiagonalizeJob.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/MatrixDiagonalizeJob.java
index e4e0b2ea..58625e88 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/MatrixDiagonalizeJob.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/MatrixDiagonalizeJob.java
@@ -67,6 +67,8 @@ public static Vector runJob(Path affInput, int dimensions)
     FileInputFormat.addInputPath(job, affInput);
     FileOutputFormat.setOutputPath(job, diagOutput);
     
+    job.setJarByClass(MatrixDiagonalizeJob.class);
+
     job.waitForCompletion(true);
     
     // read the results back from the path
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/UnitVectorizerJob.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/UnitVectorizerJob.java
index 516a7d82..6bb13d44 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/UnitVectorizerJob.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/UnitVectorizerJob.java
@@ -61,6 +61,8 @@ public static void runJob(Path input, Path output)
     FileInputFormat.addInputPath(job, input);
     FileOutputFormat.setOutputPath(job, output);
 
+    job.setJarByClass(UnitVectorizerJob.class);
+
     job.waitForCompletion(true);
   }
   
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/VectorCache.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/VectorCache.java
index dc96e3ac..3500eb9c 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/VectorCache.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/VectorCache.java
@@ -19,6 +19,7 @@
 
 import java.io.IOException;
 import java.net.URI;
+import java.util.Arrays;
 
 import com.google.common.io.Closeables;
 import org.apache.hadoop.conf.Configuration;
@@ -32,6 +33,9 @@
 import org.apache.mahout.common.iterator.sequencefile.SequenceFileValueIterator;
 import org.apache.mahout.math.Vector;
 import org.apache.mahout.math.VectorWritable;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 
 /**
  * This class handles reading and writing vectors to the Hadoop
@@ -40,6 +44,8 @@
  */
 public final class VectorCache {
 
+  private static final Logger log = LoggerFactory.getLogger(VectorCache.class);
+
   private VectorCache() {
   }
 
@@ -94,6 +100,7 @@ public static Vector load(Configuration conf) throws IOException {
     if (files == null || files.length < 1) {
       return null;
     }
+    log.info("Files are: {}", Arrays.toString(files));
     return load(conf, new Path(files[0].getPath()));
   }
   
@@ -101,6 +108,7 @@ public static Vector load(Configuration conf) throws IOException {
    * Loads a Vector from the specified path. Returns null if no vector exists.
    */
   public static Vector load(Configuration conf, Path input) throws IOException {
+    log.info("Loading vector from: {}", input);
     SequenceFileValueIterator<VectorWritable> iterator =
         new SequenceFileValueIterator<VectorWritable>(input, true, conf);
     try {
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/VectorMatrixMultiplicationJob.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/VectorMatrixMultiplicationJob.java
index 64c0722a..c9a5079c 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/VectorMatrixMultiplicationJob.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/spectral/common/VectorMatrixMultiplicationJob.java
@@ -78,6 +78,9 @@ public static DistributedRowMatrix runJob(Path markovPath, Vector diag, Path out
     
     FileInputFormat.addInputPath(job, markovPath);
     FileOutputFormat.setOutputPath(job, outputPath);
+
+    job.setJarByClass(VectorMatrixMultiplicationJob.class);
+
     job.waitForCompletion(true);
     
     // build the resulting DRM from the results
