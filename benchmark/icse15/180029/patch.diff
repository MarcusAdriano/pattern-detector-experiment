diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/BigIntegerDecimal.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/BigIntegerDecimal.java
index 43b27151..1bf81bd3 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/BigIntegerDecimal.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/BigIntegerDecimal.java
@@ -131,8 +131,32 @@ public void setValue(String theValue) throws StandardException
 				if (dot > ePosition)
 					throw invalidFormat();
 				
+				// Integer.parseInt does not handle a + sign in
+				// front of the number, while the format for the
+				// exponent allows it. Need to strip it off.
+				
+				int expOffset = ePosition + 1;
+
+				if (expOffset >= theValue.length())
+					throw invalidFormat();
+				
+				if (theValue.charAt(expOffset) == '+')
+				{
+					// strip the plus but must ensure the next character
+					// is not a - sign. Any other invalid sign will be handled
+					// by Integer.parseInt.
+					expOffset++;
+					if (expOffset >= theValue.length())
+						throw invalidFormat();
+					if (theValue.charAt(expOffset) == '-')
+						throw invalidFormat();
+				}
+				
+				String exponent = theValue.substring(expOffset);
+				
+				
 				//	TODO Need to handle a + sign in the exponent
-				scale = -1 * Integer.parseInt(theValue.substring(ePosition + 1));
+				scale = -1 * Integer.parseInt(exponent);
 				theValue = theValue.substring(0, ePosition);
 			}
 			
@@ -157,8 +181,6 @@ public void setValue(String theValue) throws StandardException
 			data2c = bi.toByteArray();
 			sqlScale = scale;
 			
-			//System.out.println("setValue unscaled " + bi + "scale " + sqlScale);
-
 		} catch (NumberFormatException nfe) 
 		{
 		    throw invalidFormat();
@@ -176,7 +198,6 @@ public String getString() {
 		
 		// TODO - correct impl
 		String unscaled = new BigInteger(data2c).toString();
-		//System.out.println("Scale" + sqlScale + " unv " + unscaled);
 		
 		if (sqlScale == 0)
 			return unscaled;
@@ -217,13 +238,15 @@ public int getDecimalValuePrecision()
 		if (this.isNegative())
 			precision--;
 		
+		if (precision < sqlScale)
+			return sqlScale;
+		
 		return precision;
 	}
 	
 
 	/**
 	 * Compare two non-null NumberDataValues using DECIMAL arithmetic.
-	 * Uses add() to perform the calculation.
 	 */
 	protected int typeCompare(DataValueDescriptor arg) throws StandardException {
 		
@@ -498,4 +521,14 @@ private static BigInteger rescale(BigInteger bi, int deltaScale) {
 		}
 		return bi;
 	}
+	/*
+	 * String display of value
+	 */
+	public String toString()
+	{
+		if (isNull())
+			return "NULL";
+		else
+			return getString();
+	}
 }
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/BinaryDecimal.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/BinaryDecimal.java
index a5a86260..47484baf 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/BinaryDecimal.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/BinaryDecimal.java
@@ -662,8 +662,13 @@ public final int getLength()
 	public DataValueDescriptor getClone() {
 		BinaryDecimal dvd = (BinaryDecimal) getNewNull();
 		
-		dvd.data2c = this.data2c;
-		dvd.sqlScale = this.sqlScale;
+		if (this.data2c != null)
+		{
+			dvd.data2c = new byte[data2c.length];
+			System.arraycopy(data2c, 0, dvd.data2c, 0, data2c.length);
+			dvd.sqlScale = sqlScale;
+		}
+		
 		return dvd;
 	}
 
@@ -683,4 +688,17 @@ public int estimateMemoryUsage() {
 		// TODO Auto-generated method stub
 		return 0;
 	}
+	
+	public int hashCode()
+	{
+		if (isNull())
+			return 0;
+
+		try {
+			return (int) Double.doubleToLongBits(getDouble());
+		} catch (StandardException se)
+		{
+			return 0;
+		}
+	}
 }
diff --git a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLDecimal.java b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLDecimal.java
index 153d533c..ff33ceab 100644
--- a/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLDecimal.java
+++ b/incubator/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLDecimal.java
@@ -561,7 +561,6 @@ public void restoreToNull()
 	protected int typeCompare(DataValueDescriptor arg) throws StandardException
 	{
 		BigDecimal otherValue = SQLDecimal.getBigDecimal(arg);
-
 		return getBigDecimal().compareTo(otherValue);
 	}
 
@@ -1008,7 +1007,7 @@ public String toString()
 		if (isNull())
 			return "NULL";
 		else
-			return getBigDecimal().toString();
+			return getString();
 	}
 
 	/*
