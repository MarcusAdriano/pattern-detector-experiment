diff --git a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMWriter.java b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMWriter.java
index 51bbfa9b..9876871b 100644
--- a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMWriter.java
+++ b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMWriter.java
@@ -637,6 +637,11 @@ protected void writeScalarBytes (int codePoint, byte[] buf, int length)
 	}
 
 
+	// TODO: Rewrite writeScalarStream to avoid passing a length.
+	// The length is never written and not required by the DRDA spec.
+	// Also looks like on IOException we just pad out the stream instead
+	// of actually sending an exception.  Similar code is in client, so 
+	// should be fixed in both places.
 	protected int  writeScalarStream (boolean chainedWithSameCorrelator,
 									  int codePoint,
 									  int length,
@@ -681,7 +686,6 @@ protected int  writeScalarStream (boolean chainedWithSameCorrelator,
 
 			bytesToRead = flushScalarStreamSegment (leftToRead, bytesToRead);
 		} while (leftToRead > 0);
-		
 		// check to make sure that the specified length wasn't too small
 		try {
 			if (in.read() != -1) {
diff --git a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
index 5881d996..1cb50b41 100644
--- a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
+++ b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
@@ -5910,11 +5910,10 @@ private boolean writeFDODTA (DRDAStatement stmt)
 					switch (ndrdaType)
 					{
 						case FdocaConstants.DRDA_TYPE_NLOBBYTES:
-							writeFdocaVal(i,rs.getBlob(i),drdaType,
-										  precision,scale,rs.wasNull(),stmt);
-							break;
 						case  FdocaConstants.DRDA_TYPE_NLOBCMIXED:
-							writeFdocaVal(i,rs.getClob(i),drdaType,
+							EXTDTAInputStream extdtaStream=  
+								EXTDTAInputStream.getEXTDTAStream(rs, i, drdaType);
+							writeFdocaVal(i,extdtaStream, drdaType,
 										  precision,scale,rs.wasNull(),stmt);
 							break;
 						case FdocaConstants.DRDA_TYPE_NINTEGER:
@@ -6550,19 +6549,13 @@ else if (tsLen > 26)
 					writer.writeLDString(val.toString(), index);
 					break;
 				case FdocaConstants.DRDA_TYPE_NLOBBYTES:
+				case FdocaConstants.DRDA_TYPE_NLOBCMIXED:
 					// do not send EXTDTA for lob of length 0, beetle 5967
-					valLength = ((Blob) val).length();
+					valLength = ((EXTDTAInputStream) val).length();
 					if (valLength > 0)
 						stmt.addExtDtaObject(val, index);
 					writer.writeExtendedLength (valLength);
 					break;
-				case FdocaConstants.DRDA_TYPE_NLOBCMIXED:
-					valLength = ((Clob) val).length();
-					// do not send EXTDTA for lob of length 0, beetle 5967
-					if (valLength > 0) 
-						stmt.addExtDtaObject(val,index);
-					writer.writeExtendedLength(valLength);
-					break;
 				case  FdocaConstants.DRDA_TYPE_NFIXBYTE:
 					writer.writeBytes((byte[]) val);
 					break;
@@ -7125,28 +7118,23 @@ void writeEXTDTA (DRDAStatement stmt) throws SQLException, DRDAProtocolException
 				writeNullByte = true;
 		
 		Object o  = extdtaValues.get(i);
-        if (o instanceof Blob) {
-			Blob b = (Blob) o;
-			long blobLength = b.length();
+        if (o instanceof EXTDTAInputStream) {
+			EXTDTAInputStream stream = (EXTDTAInputStream) o;
+			long lobLength = stream.length();
 			writer.writeScalarStream (chainedWithSameCorrelator,
 									  CodePoint.EXTDTA,
-									  (int) Math.min(blobLength,
+									  (int) Math.min(lobLength,
 													 Integer.MAX_VALUE),
-									  b.getBinaryStream (),
+									  stream,
 									  writeNullByte);
 			
+			try {
+				// close the stream when done
+				if (stream != null)
+					stream.close();
+			} catch (IOException e) {
+				Util.javaException(e);
 		}
-		else if (o instanceof  Clob) {
-			Clob c = (Clob) o;
-			long[] outlen = {-1};
-			ByteArrayInputStream  unicodeStream =
-				convertClobToUnicodeStream(c, outlen);
-			writer.writeScalarStream (chainedWithSameCorrelator,
-									  CodePoint.EXTDTA,
-									  (int) Math.min(outlen[0],
-													 Integer.MAX_VALUE),		 
-									  unicodeStream,
-									  writeNullByte);
 		}
 		else if (o instanceof  byte[]) {
 			byte[] b = (byte []) o;
@@ -7163,43 +7151,6 @@ else if (o instanceof  byte[]) {
   }
 
 
-
-	private  java.io.ByteArrayInputStream  
-		convertClobToUnicodeStream (
-								Clob c,
-								long outlen[]) throws SQLException
-	{
-		java.io.Reader characterStream = c.getCharacterStream();
-		// Extract all the characters and write into a StringWriter.
-		java.io.StringWriter sw = new java.io.StringWriter ();
-		try {
-			int read = characterStream.read();
-			while (read != -1) {
-				sw.write(read);
-				read = characterStream.read();
-			}
-    }
-		catch (java.io.IOException e) {
-			throw new SQLException (e.getMessage());
-		}
-
-		// Extract the String from the StringWriter and extract the UTF-8 bytes.
-		String string = sw.toString();
-
-		byte[] utf8Bytes = null;
-		try {
-			utf8Bytes = string.getBytes("UTF-8");
-		}
-		catch (java.io.UnsupportedEncodingException e) {
-			throw new SQLException (e.getMessage());
-    }
-
-		// Create a new ByteArrayInputStream based on the bytes.
-
-		outlen[0]= utf8Bytes.length;
-		return new java.io.ByteArrayInputStream (utf8Bytes);
-		}
-
 	/**
 	 * Check SQLWarning and write SQLCARD as needed.
 	 * 
diff --git a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java
index e69de29b..c3ba0933 100644
--- a/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java
+++ b/incubator/derby/code/trunk/java/drda/org/apache/derby/impl/drda/EXTDTAInputStream.java
@@ -0,0 +1,282 @@
+/*
+ 
+ Derby - Class org.apache.derby.impl.drda.DRDAStatement
+
+ Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
+
+ Licensed under the Apache License, Version 2.0 (the "License");
+ you may not use this file except in compliance with the License.
+ You may obtain a copy of the License at
+
+ http://www.apache.org/licenses/LICENSE-2.0
+
+ Unless required by applicable law or agreed to in writing, software
+ distributed under the License is distributed on an "AS IS" BASIS,
+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ See the License for the specific language governing permissions and
+ limitations under the License.
+
+ */
+package org.apache.derby.impl.drda;
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+
+import org.apache.derby.iapi.services.sanity.SanityManager;
+import org.apache.derby.impl.jdbc.Util;
+
+/**
+ * @author marsden
+ * 
+ * EXTDTAObjectHolder provides Externalized Large Object representation that
+ * does not hold locks until the end of the transaction (DERBY-255)
+ * 
+ * It serves as a holder for lob data and is only valid as long as the original
+ * result set from which it came is on the same row.  
+ * 
+ *  
+ */
+public class EXTDTAInputStream extends InputStream {
+
+	long dataLength = 0; // length of the stream;
+
+	InputStream binaryInputStream = null;
+
+	int columnNumber;
+
+	ResultSet dataResultSet = null;
+	
+	
+	/**
+	 * @param dataLength
+	 * @param binaryInputStream
+	 */
+	private EXTDTAInputStream( int dataLength, InputStream binaryInputStream) {
+		
+		this.dataLength = dataLength;
+		this.binaryInputStream = binaryInputStream;
+	}
+
+	/**
+	 * Retrieve stream from the ResultSet and column specified.  Create an
+	 * input stream and length for the large object being retrieved. Do not hold
+	 * locks until end of transaction. DERBY-255.
+	 * 
+	 * 
+	 * @see DDMWriter.writeScalarStream
+	 * 
+	 * @param rs
+	 *            result set from which to retrieve the lob
+	 * @param column
+	 *            column number
+	 * @param drdaType
+	 *            FD:OCA type of object one of
+	 * 			   FdocaConstants.DRDA_TYPE_NLOBBYTES
+	 * 			   FdocaConstants.DRDA_TYPE_LOBBYTES
+	 * 			   FdocaConstants.DRDA_TYPE_NLOBCMIXED
+	 *  		   FdocaConstants.DRDA_TYPE_LOBCMIXED
+	 * 
+	 * @returns null if the value is null or a new EXTDTAInputStream corresponding to 
+	 *  		rs.getBinaryStream(column) value and associated length
+	 * 
+	 * @throws SQLException
+	 */
+	public static EXTDTAInputStream getEXTDTAStream(ResultSet rs, int column, int drdaType) 
+			throws SQLException {
+		
+		EXTDTAInputStream extdtaStream = null;
+		int length = 0;
+		byte[] bytes = null;
+		
+		int ndrdaType = drdaType | 1; //nullable drdaType
+		// BLOBS
+		if (ndrdaType == FdocaConstants.DRDA_TYPE_NLOBBYTES) 
+		{
+			//TODO: Change to just use rs.getBinaryStream() by 
+			// eliminating the need for a length parameter in
+			//DDMWriter.writeScalarStream and therefore eliminating the need for dataLength in this class
+			bytes = rs.getBytes(column);
+			
+		}
+		// CLOBS
+		else if (ndrdaType ==  FdocaConstants.DRDA_TYPE_NLOBCMIXED)
+		{	
+			//TODO: Change to use getCharacterStream and change the read method
+			// to stream the data after length is no longer needed in DDMWRiter.writeScalarStream
+			String s  = rs.getString(column);
+			try {
+				if (s != null)
+					bytes = s.getBytes(NetworkServerControlImpl.DEFAULT_ENCODING);
+			}
+			catch (java.io.UnsupportedEncodingException e) {
+				throw new SQLException (e.getMessage());
+			}
+		}
+		else
+		{
+			SanityManager.THROWASSERT("DRDAType: " + drdaType +
+						" not valid EXTDTA object type");
+		}
+		
+		if (bytes != null)
+		{
+			length = bytes.length;
+			InputStream is = new ByteArrayInputStream(bytes);
+			extdtaStream =  new EXTDTAInputStream(length, is);
+		}
+		
+		return extdtaStream;
+	}
+
+	
+	/**
+	 * Get the length of the InputStream 
+	 * This method is currently not used because there seems to be no way to 
+	 * reset the she stream.
+	 *   
+	 * @param binaryInputStream
+	 *            an InputStream whose length needs to be calclulated
+	 * @return length of stream
+	 */
+	private static long getInputStreamLength(InputStream binaryInputStream)
+			throws SQLException {
+		long length = 0;
+		if (binaryInputStream == null)
+			return length;
+		
+		try {
+			for (;;) {
+				int avail = binaryInputStream.available();
+				binaryInputStream.skip(avail);
+				if (avail == 0)
+					break;
+				length += avail;
+				
+			}
+			//binaryInputStream.close();
+		} catch (IOException ioe) {
+			throw Util.javaException(ioe);
+		}
+
+		return length;
+
+	}
+	
+	
+	
+	/**
+	 * Return the length of the binary stream which was calculated when
+	 * EXTDTAObject was created.
+	 * 
+	 * @return the length of the stream once converted to an InputStream
+	 */
+	public long length() throws SQLException {
+		return dataLength;
+		
+	}
+
+	/**
+	 * 
+	 * 
+	 * @see java.io.InputStream#read()
+	 */
+	public int read() throws IOException {
+		return binaryInputStream.read();
+	}
+
+	/**
+	 * 
+	 * 
+	 * @see java.io.InputStream#available()
+	 */
+	public int available() throws IOException {
+		return binaryInputStream.available();
+	}
+
+	/**
+	 * 
+	 * 
+	 * @see java.io.InputStream#close()
+	 */
+	public void close() throws IOException {
+		if (binaryInputStream != null)
+			binaryInputStream.close();	
+	}
+
+	/**
+	 * 
+	 * 
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	public boolean equals(Object arg0) {
+		return binaryInputStream.equals(arg0);
+	}
+
+	/**
+	 * 
+	 * 
+	 * @see java.lang.Object#hashCode()
+	 */
+	public int hashCode() {
+		return binaryInputStream.hashCode();
+	}
+
+	/**
+	 * 
+	 * 
+	 * @see java.io.InputStream#mark(int)
+	 */
+	public void mark(int arg0) {
+		binaryInputStream.mark(arg0);
+	}
+
+	/**
+	 * 
+	 * 
+	 * @see java.io.InputStream#markSupported()
+	 */
+	public boolean markSupported() {
+		return binaryInputStream.markSupported();
+	}
+
+	/**
+	 * 
+	 * 
+	 * @see java.io.InputStream#read(byte[])
+	 */
+	public int read(byte[] arg0) throws IOException {
+		return binaryInputStream.read(arg0);
+	}
+
+	/**
+	 * 
+	 * 
+	 * @see java.io.InputStream#read(byte[], int, int)
+	 */
+	public int read(byte[] arg0, int arg1, int arg2) throws IOException {
+		return binaryInputStream.read(arg0, arg1, arg2);
+	}
+
+	/**
+	 * 
+	 * 
+	 * @see java.io.InputStream#reset()
+	 */
+	public void reset() throws IOException {
+		binaryInputStream.reset();
+	}
+
+	/**
+	 * 
+	 * 
+	 * @see java.io.InputStream#skip(long)
+	 */
+	public long skip(long arg0) throws IOException {
+		return binaryInputStream.skip(arg0);
+	}
+
+
+}
diff --git a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java
index 59a2151d..f6503dbd 100644
--- a/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java
+++ b/incubator/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/blobclob4BLOB.java
@@ -20,26 +20,34 @@
 
 package org.apache.derbyTesting.functionTests.tests.jdbcapi;
 
-import org.apache.derbyTesting.functionTests.util.TestUtil;
-import org.apache.derbyTesting.functionTests.util.Formatters;
-
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.OutputStream;
+import java.io.OutputStreamWriter;
+import java.io.Reader;
+import java.io.Writer;
+import java.sql.Blob;
+import java.sql.Clob;
 import java.sql.Connection;
-import java.sql.DriverManager;
-import java.sql.ResultSetMetaData;
+import java.sql.PreparedStatement;
 import java.sql.ResultSet;
-import java.sql.Statement;
+import java.sql.ResultSetMetaData;
 import java.sql.SQLException;
+import java.sql.Statement;
 import java.sql.Types;
-import java.sql.Clob;
-import java.sql.Blob;
 
+import org.apache.derby.tools.JDBCDisplayUtil;
 import org.apache.derby.tools.ij;
+import org.apache.derbyTesting.functionTests.util.Formatters;
 import org.apache.derbyTesting.functionTests.util.TestUtil;
 
-import java.io.*;
-import java.sql.PreparedStatement;
-import java.util.Properties;
-
 /**
  * Test of JDBC blob and clob
  *
@@ -59,6 +67,7 @@
 
 	static boolean isDerbyNet = false;
 	static boolean debug = true;
+	private static final String START = "\nSTART: ";
 
 	static
 	{
@@ -135,6 +144,7 @@ public static void main(String[] args)
             clobTest93(conn);
             clobTest94(conn);
             clobTest95(conn);
+  
             // restart the connection
             conn = ij.startJBMS();
             conn.setAutoCommit(false);
@@ -158,6 +168,7 @@ public static void main(String[] args)
             blobTest93(conn);
             blobTest94(conn);
             blobTest95(conn);
+     
             // restart the connection
             conn = ij.startJBMS();
             conn.setAutoCommit(false);
@@ -184,7 +195,7 @@ public static void main(String[] args)
 //            e.fillInStackTrace();
             if (debug) e.printStackTrace();
 		}
-		System.out.println("Test blobclob finished");
+		System.out.println("Test blobclob finished\n");
     }
 
 
@@ -224,7 +235,7 @@ some very large (many pages).
     */
     private static void prepareCLOBMAIN(Connection conn)
     {
-        //System.out.println("prepareCLOBMAIN started");
+        System.out.println(START +"prepareCLOBMAIN");
 		ResultSet rs;
 		Statement stmt;
 
@@ -306,7 +317,7 @@ some very large (many pages) ??
     */
     private static void prepareSearchClobTable(Connection conn)
     {
-        //System.out.println("prepareSearchClobTable started");
+        System.out.println(START + "prepareSearchClobTable");
 		ResultSet rs;
 		Statement stmt;
 
@@ -367,7 +378,7 @@ private static void prepareSearchClobTable(Connection conn)
 			System.out.println("FAIL -- unexpected exception:" + e.toString());
 			if (debug) e.printStackTrace();
 		}
-        //System.out.println("prepareSearchClobTable finished");
+        System.out.println("prepareSearchClobTable finished");
     }
 
 
@@ -383,7 +394,7 @@ private static void prepareUnicodeTable(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
-
+		 System.out.println(START + "prepareUnicodeTable");
 		try {
 			stmt = conn.createStatement();
 			// creating table small then add large column - that way forcing table to have default small page size, but have large rows.
@@ -441,7 +452,7 @@ private static void setCharacterStreamTest(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
-
+		 System.out.println(START + "setCharacterStreamTest");
 		try
         {
 			stmt = conn.createStatement();
@@ -517,6 +528,7 @@ private static void setCharacterStreamTest(Connection conn)
      */
     private static void prepareUnicodeFile(Connection conn)
     {
+    	 System.out.println(START + "prepareUnicodeFile");
 		try
         {
             File file = new File(unicodeFileName);
@@ -569,6 +581,7 @@ private static void clobTest0(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
+		 System.out.println(START + "clobTest0");
         try
         {
 			stmt = conn.createStatement();
@@ -626,7 +639,7 @@ private static void clobTest11(Connection conn) {
 		ResultSetMetaData met;
 		ResultSet rs;
 		Statement stmt;
-
+		 System.out.println(START + "clobTest1");
 		try {
 			stmt = conn.createStatement();
 			rs = stmt.executeQuery("select a,b from testCLOB_MAIN");
@@ -679,7 +692,7 @@ private static void clobTest12(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
-
+		System.out.println(START + "clobTest12");
 		try
         {
 			stmt = conn.createStatement();
@@ -751,7 +764,7 @@ private static void clobTest2(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
-
+		System.out.println(START + "clobTest2");
 		try
         {
 			stmt = conn.createStatement();
@@ -812,7 +825,7 @@ private static void clobTest22(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
-
+		System.out.println(START + "clobTest22");
 		try
         {
 			stmt = conn.createStatement();
@@ -863,7 +876,7 @@ private static void clobTest3(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
-
+		 System.out.println(START + "clobTest3");
 		try
         {
 			stmt = conn.createStatement();
@@ -912,7 +925,7 @@ private static void clobTest32(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
-
+		System.out.println(START + "clobTest32");
 		try
         {
 			stmt = conn.createStatement();
@@ -967,7 +980,7 @@ private static void clobTest4(Connection conn)
     {
 		ResultSet rs, rs2;
 		Statement stmt, stmt2;
-
+		System.out.println(START + "clobTest4");
 		try
         {
 			stmt = conn.createStatement();
@@ -1034,7 +1047,7 @@ private static void clobTest42(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
-
+		 System.out.println(START + "clobTest42");
 		try
         {
 			stmt = conn.createStatement();
@@ -1116,7 +1129,7 @@ private static void clobTest51(Connection conn) {
 		ResultSetMetaData met;
 		ResultSet rs;
 		Statement stmt;
-
+		System.out.println(START + "clobTest51");
 		try {
 			stmt = conn.createStatement();
 			stmt.execute("create table testCLOB10 (a CLOB(10))");
@@ -1183,6 +1196,7 @@ private static void clobTest52(Connection conn) {
 		Statement stmt;
 
 		try {
+			System.out.println(START + "clobTest52");
 			stmt = conn.createStatement();
 			System.out.println("create table testInteger (a integer)");
 			stmt.execute("create table testInteger (a integer)");
@@ -1228,7 +1242,7 @@ private static void clobTest53(Connection conn) {
 		ResultSetMetaData met;
 		ResultSet rs;
 		Statement stmt;
-
+		System.out.println(START + "clobTest53"); 
 		try {
 			stmt = conn.createStatement();
 			stmt.execute("create table testClobColumn (a clob(1K))");
@@ -1253,9 +1267,9 @@ private static void clobTest54(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt1, stmt2;
+		System.out.println(START + "clobTest54");
         try
         {
-			System.out.println("start clobTest54");
 			stmt1 = conn.createStatement();
 			stmt1.execute("create table testClob2 (a integer, b integer)");
             PreparedStatement ps = conn.prepareStatement(
@@ -1300,6 +1314,7 @@ private static void clobTest6(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
+		System.out.println(START + "clobTest6");
 		try
         {
 			stmt = conn.createStatement();
@@ -1410,8 +1425,7 @@ private static void clobTest7(Connection conn)
     {
 		ResultSet rs, rs2;
 		Statement stmt1, stmt2;
-
-		System.out.println("start clobTest7");
+		System.out.println(START + "clobTest7");
         try
         {
 			stmt1 = conn.createStatement();
@@ -1471,7 +1485,7 @@ private static void clobTest7(Connection conn)
 	*/
   	private static void clobTest8(Connection conn)
     {
-		System.out.println("start clobTest8");
+  		System.out.println(START + "clobTest8");
 		try {
 			Statement s = conn.createStatement();
 
@@ -1629,6 +1643,7 @@ private static void clobTest8(Connection conn)
 	}
 
 	private static void checkClob8(Statement s, String pstr) throws SQLException {
+		
 		ResultSet rs = s.executeQuery("SELECT ID, DD, POS, L FROM C8.T8POS ORDER BY 1");
 
 		while (rs.next()) {
@@ -1756,6 +1771,7 @@ private static void clobTest91(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
+		System.out.println(START + "clobTest91");
 		try {
 			stmt = conn.createStatement();
 			rs = stmt.executeQuery("select a,b from testCLOB_MAIN");
@@ -1808,12 +1824,13 @@ private static void clobTest91(Connection conn)
 
     /*
         test locking
-        need to run prepareCLOBMAIN first
+        need to run prepareCLOBMAIN fverirst
     */
 	private static void clobTest92(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt,stmt2;
+		System.out.println(START + "clobTest92");
         try
         {
 			stmt = conn.createStatement();
@@ -1867,6 +1884,7 @@ private static void clobTest93(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt, stmt2;
+		System.out.println(START + "clobTest93");
         try
         {
 			stmt = conn.createStatement();
@@ -1929,6 +1947,7 @@ private static void clobTest94(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
+		System.out.println(START + "clobTest94");
         try
         {
 			stmt = conn.createStatement();
@@ -1936,8 +1955,10 @@ private static void clobTest94(Connection conn)
 			// fetch row back, get the column as a clob.
             Clob clob = null, shortClob = null;
             int clobLength;
+            int i = 0;
 			while (rs.next())
             {
+				//System.out.println("ACCESSING ROW:" + i++);
                 clobLength = rs.getInt(2);
                 if (clobLength == 10000)
                     clob = rs.getClob(1);
@@ -2011,6 +2032,7 @@ private static void clobTest95(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
+		System.out.println(START + "clobTest95");
         try
         {
 			stmt = conn.createStatement();
@@ -2124,6 +2146,7 @@ private static void clobTest96(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
+		System.out.println(START + "clobTest96");
 		try {
 			stmt = conn.createStatement();
 			rs = stmt.executeQuery("select a,b from testCLOB_MAIN");
@@ -2180,6 +2203,7 @@ private static void bug2(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
+		System.out.println(START + "bug2");
 		try {
 			stmt = conn.createStatement();
 			rs = stmt.executeQuery("select a,b from testCLOB_MAIN");
@@ -2235,6 +2259,7 @@ private static void clobTestGroupfetch(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt,stmt2;
+		System.out.println(START + "clobTestGroupFetch");
         try
         {
 			stmt = conn.createStatement();
@@ -2271,6 +2296,7 @@ private static void bug(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt, stmt2;
+		System.out.println(START + "bug" );
         try
         {
 			stmt = conn.createStatement();
@@ -2348,7 +2374,7 @@ private static void clobTest9999(Connection conn) {
 		ResultSetMetaData met;
 		ResultSet rs;
 		Statement stmt;
-
+		System.out.println(START + "clobTest9999");
 		try {
 			stmt = conn.createStatement();
 			stmt.execute("call SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY('derby.storage.pageSize','4096')");
@@ -2403,6 +2429,7 @@ private static void clobTestSelfDestructive(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
+		System.out.println(START + "clobTestSelfDestructive");
         try
         {
 			stmt = conn.createStatement();
@@ -2480,6 +2507,7 @@ private static void clobTestSelfDestructive2(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
+		System.out.println(START + "clobTestSelfDestructive2");
         try
         {
 			stmt = conn.createStatement();
@@ -2576,6 +2604,7 @@ private static void printLockTable(Connection conn)
 
     private static void unicodeTest()
     {
+    	System.out.println(START + "unicodeTest");
         try
         {
             // String to Unicode bytes
@@ -2630,7 +2659,7 @@ private static void prepareBlobTable(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
-
+		System.out.println(START + "prepareBlobTable");
 		try {
 			stmt = conn.createStatement();
 			// creating table to fit within default 4k table size, then add large column
@@ -2700,7 +2729,7 @@ private static void prepareBinaryTable(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
-
+		System.out.println(START + "prepareBinaryTable");
 		try
         {
 			stmt = conn.createStatement();
@@ -2743,7 +2772,7 @@ private static void prepareSearchBlobTable(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
-
+		System.out.println(START + "prepareSearchBlobTable");
 		try {
 			stmt = conn.createStatement();
 			// creating table to fit within default 4k table size, then add large column
@@ -2804,6 +2833,7 @@ private static void blobTest0(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
+		System.out.println(START + "blobTest0");
         try
         {
 			stmt = conn.createStatement();
@@ -2855,6 +2885,7 @@ private static void blobTest2(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
+		System.out.println(START + "blobTest2");
 		try
         {
 			stmt = conn.createStatement();
@@ -2915,6 +2946,7 @@ private static void blobTest3(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
+		System.out.println(START + "blobTest3");
 		try
         {
 			stmt = conn.createStatement();
@@ -2963,6 +2995,7 @@ private static void blobTest4(Connection conn)
     {
 		ResultSet rs, rs2;
 		Statement stmt, stmt2;
+		System.out.println(START + "blobTest4");
 		try
         {
 			stmt = conn.createStatement();
@@ -3028,6 +3061,7 @@ private static void printPositionBlob(
         int searchRowNum,
         Blob searchBlob)
     {
+    	
         try
         {
             long result = blob.position(searchBlob,position);
@@ -3058,7 +3092,7 @@ private static void blobTest51(Connection conn) {
 		ResultSetMetaData met;
 		ResultSet rs;
 		Statement stmt;
-
+		System.out.println(START + "blobTest51");
 		try {
 			stmt = conn.createStatement();
 			stmt.execute("create table testVarbinary (a blob(13))");
@@ -3121,7 +3155,7 @@ private static void blobTest52(Connection conn) {
 		ResultSetMetaData met;
 		ResultSet rs;
 		Statement stmt;
-
+		System.out.println(START + "blobTest52");
 		try {
 			stmt = conn.createStatement();
 			stmt.execute("create table testInteger2 (a integer)");
@@ -3155,7 +3189,7 @@ private static void blobTest53(Connection conn) {
 		ResultSetMetaData met;
 		ResultSet rs;
 		Statement stmt;
-
+		System.out.println(START + "blobTest53");
 		try {
 			stmt = conn.createStatement();
 			stmt.execute("create table testBlobColumn (a blob(1K))");
@@ -3179,6 +3213,7 @@ private static void blobTest54(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt1, stmt2;
+		System.out.println(START + "blobTest54");
         try
         {
 			stmt1 = conn.createStatement();
@@ -3223,6 +3258,7 @@ private static void blobTest6(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
+		System.out.println(START + "blobTest6");
 		try
         {
 			stmt = conn.createStatement();
@@ -3332,6 +3368,7 @@ private static void blobTest7(Connection conn)
     {
 		ResultSet rs, rs2;
 		Statement stmt1, stmt2;
+		System.out.println(START + "blobTest7");
         try
         {
 			stmt1 = conn.createStatement();
@@ -3394,6 +3431,7 @@ private static void blobTest91(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
+		System.out.println(START + "blobTest91");
 		try {
 			stmt = conn.createStatement();
 			rs = stmt.executeQuery("select a,b from testBlob");
@@ -3452,6 +3490,7 @@ private static void blobTest92(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt,stmt2;
+		System.out.println(START + "blobTest92");
         try
         {
 			stmt = conn.createStatement();
@@ -3473,16 +3512,32 @@ private static void blobTest92(Connection conn)
             // turn off autocommit, otherwise blobs/clobs cannot hang around
             // until end of transaction
             conn2.setAutoCommit(false);
-            // update should go through since we don't get any locks on blobs
+            if (!TestUtil.isNetFramework())
+            {
+            // Note: Locks held until the end of transaction only for embedded.
+            // Network Server cannot differentiate a getBlob from a getBytes so 
+            // does not hold locks for blob calls (DERBY-255) 
+            // The LOB is materialized on the client so we do not need to hold locks.
+            // One ugly thing about this test is that these rows are used by other tests.
+            // If this tests fails and the rows get updated, other tests can get 
+            // NullPointer exceptions.	
+            
+            // Update should go through since we don't get any locks on blobs
             // that are not long columns
             stmt2 = conn2.createStatement();
             stmt2.executeUpdate("update testBlob set a = null where b = 26");
             if (shortBlob.length() != 26)
                 System.out.println("FAILED: blob length changed to " + shortBlob.length());
             // should timeout waiting for the lock to do this
+            
             stmt2 = conn2.createStatement();
             stmt2.executeUpdate("update testBlob set b = b + 1 where b = 10000");
-
+            	throw new Exception("FAIL: Should have gotten lock timeout");
+            }
+            else
+            {
+            	System.out.println("Locks not held by Network Server for Blobs since they are materialized on client");
+            }
             conn.commit();
             conn2.commit();
             System.out.println("blobTest92 finished");
@@ -3504,6 +3559,7 @@ private static void blobTest93(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt, stmt2;
+		System.out.println(START + "blobTest93");
         try
         {
 			stmt = conn.createStatement();
@@ -3565,6 +3621,7 @@ private static void blobTest94(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
+		System.out.println(START + "blobTest94");
         try
         {
 			stmt = conn.createStatement();
@@ -3584,6 +3641,7 @@ private static void blobTest94(Connection conn)
             conn.commit();
 
             // no problem accessing this after commit since it is in memory
+            if (shortBlob != null)
             System.out.println("shortBlob length after commit is " + shortBlob.length());
             // these should all give blob/clob data unavailable exceptions
 
@@ -3648,6 +3706,7 @@ private static void blobTest95(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
+		System.out.println(START + "blobTest95");
         try
         {
 			stmt = conn.createStatement();
@@ -3746,6 +3805,7 @@ private static void blobTest96(Connection conn)
     {
 		ResultSet rs;
 		Statement stmt;
+		System.out.println(START + "blobTest96");
 		try {
 			stmt = conn.createStatement();
 			rs = stmt.executeQuery("select a,b from testBlob");
@@ -3803,6 +3863,7 @@ private static void blobTest96(Connection conn)
      */
     private static void blobNegativeTest_Derby265(Connection conn)
             throws SQLException, FileNotFoundException,IOException {
+    	System.out.println(START + "blobTestNegativeTest_Derby265");
         // basically setup the tables for clob and blob
         Statement s = conn.createStatement();
         s.execute("create table \"MAPS_BLOB\"(MAP_ID int, MAP_NAME varchar(20),REGION varchar(20),AREA varchar(20), PHOTO_FORMAT varchar(20),PICTURE blob(2G))");
@@ -3843,11 +3904,10 @@ private static void blobNegativeTest_Derby265(Connection conn)
             rs2.next();
             rs2.getBlob(6);
         } catch (SQLException sqle) {
-            if ("XJ073".equals(sqle.getSQLState()))
-                System.out.println("Expected Exception " + sqle.getMessage());
-            else
-                System.out.println("FAIL -- unexpected exception:"
-                        + sqle.toString());
+        	String sqlstate = sqle.getSQLState();
+        	boolean expected = (sqlstate != null && 
+        				(sqlstate.equals("XJ073") || sqlstate.equals("XCL30")));
+            	TestUtil.dumpSQLExceptions(sqle,expected);            	
         }
         finally {
             rs2.close();
@@ -3873,6 +3933,7 @@ private static void blobNegativeTest_Derby265(Connection conn)
     private static void clobNegativeTest_Derby265(Connection conn)
             throws SQLException, FileNotFoundException,IOException {
 
+    	System.out.println(START + "clobNegativeTest_Derby265");
         // basically setup the tables for clob 
         Statement s = conn.createStatement();
         s.execute("create table \"MAPS\"(MAP_ID int, MAP_NAME varchar(20),REGION varchar(20),AREA varchar(20), PHOTO_FORMAT varchar(20),PICTURE clob(2G))");
@@ -3911,11 +3972,10 @@ private static void clobNegativeTest_Derby265(Connection conn)
             rs2.next();
             rs2.getClob(6); // no longer valid
         } catch (SQLException sqle) {
-            if ("XJ073".equals(sqle.getSQLState()))
-                System.out.println("Expected Exception " + sqle.getMessage());
-            else
-                System.out.println("FAIL -- unexpected exception:"
-                        + sqle.toString());
+        	String sqlstate = sqle.getSQLState();
+        	boolean expected = (sqlstate != null && 
+        				(sqlstate.equals("XJ073") || sqlstate.equals("XCL30")));
+            	TestUtil.dumpSQLExceptions(sqle,expected);
         }
         finally {
             rs2.close();
@@ -3959,16 +4019,28 @@ static void printInterval(Clob clob, long pos, int length,
 
 
 			if (pos < 1 || pos > clobLength)
-				expected = isOutOfBoundException(e);
-			TestUtil.dumpSQLExceptions(e, expected);
-			if (!expected) e.printStackTrace();
+			{
+				if (isOutOfBoundException(e))
+					expected = true;
+			} 
+			else
+			{
+				System.out.println("FAIL -- unexpected exception:" + e.toString());
+			}
+			TestUtil.dumpSQLExceptions(e,expected);
 		}
+		
 		catch (Exception e)
 		{
+			// Known bug.  JCC 5914.  
 			if ((pos > clobLength) && isDerbyNet && (e.getMessage() != null &&
 													e.getMessage().indexOf("String index out of range") >= 0))
-				System.out.println("Known JCC Bug 5914 - " + e.getMessage());
-			else System.out.println("Known JCC Bug 5914");
+				System.out.println("EXPECTED Out of bounds exception");
+			else
+			{
+				System.out.println("FAIL -- unexpected exception:" + e.toString());
+	            if (debug) e.printStackTrace();
+			}
 		}
     }
 
