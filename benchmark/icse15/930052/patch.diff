diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java
index 1ed894f9..c94afe1d 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/ServerPropertiesTest.java
@@ -473,7 +473,7 @@ public Object run(){
             "org.apache.derby.drda.NetworkServerControl", "-p",
             String.valueOf(fourthAlternatePort).toString(), 
             "-noSecurityManager", "start"};
-        Utilities.execJavaCmd(commandArray);
+        execJavaCmd(commandArray);
         
         if (!canPingServer(fourthAlternatePort, true)) {
             actionResult = "Can not ping server specified with -p";
@@ -486,7 +486,7 @@ public Object run(){
                 "org.apache.derby.drda.NetworkServerControl", "-p",
                 String.valueOf(fourthAlternatePort).toString(), 
                 "-noSecurityManager", "shutdown"};
-        Utilities.execJavaCmd(commandArray);
+        execJavaCmd(commandArray);
 
         if (canPingServer(fourthAlternatePort, false)) {
             actionResult = "Can still ping server specified with -p";
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java
index e69de29b..406d5f32 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SysinfoTest.java
@@ -0,0 +1,314 @@
+/*
+
+   Derby - Class 
+   org.apache.derbyTesting.functionTests.tests.derbynet.SysinfoTest
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to You under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+package org.apache.derbyTesting.functionTests.tests.derbynet;
+
+import java.io.File;
+import java.net.URL;
+import java.security.AccessController;
+import java.util.Properties;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.Derby;
+import org.apache.derbyTesting.junit.JDBC;
+import org.apache.derbyTesting.junit.NetworkServerTestSetup;
+import org.apache.derbyTesting.junit.SecurityManagerSetup;
+import org.apache.derbyTesting.junit.SupportFilesSetup;
+import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
+import org.apache.derbyTesting.junit.TestConfiguration;
+
+/**
+	This tests the sysinfo command
+ */
+
+public class SysinfoTest extends BaseJDBCTestCase {
+
+    private static String TARGET_POLICY_FILE_NAME="sysinfo.policy";
+    private String OUTPUT;
+
+    /**
+     * Set to true before adding a test to the suite to add some extra properties.
+     */
+    private static boolean useProperties = false;
+
+
+    /**
+     * Default constructor
+     * @param name
+     */
+    public SysinfoTest(String name) {
+        super(name);
+        /**
+         * Output from sysinfo without the extra properties. 
+         */
+        String OUTPUT1 = 
+            "--------- Derby Network Server Information --------\n" + 
+            "derby.drda.maxThreads=0\n" + 
+            "derby.drda.sslMode=off\n" + 
+            "derby.drda.keepAlive=true\n" + 
+            "derby.drda.minThreads=0\n" + 
+            "derby.drda.portNumber=1527\n" + 
+            "derby.drda.logConnections=false\n" + 
+            "derby.drda.timeSlice=0\n" + 
+            "derby.drda.startNetworkServer=false\n" + 
+            "derby.drda.traceAll=false\n" + 
+            "--------- Derby Information --------\n" + 
+            "------------------------------------------------------\n" + 
+            "----------------- Locale Information -----------------\n" + 
+            "------------------------------------------------------";
+
+        /**
+         * Output by sysinfo with the extra properties.
+         */
+        String OUTPUT2 = 
+            "--------- Derby Network Server Information --------\n" + 
+            "derby.drda.securityMechanism=USER_ONLY_SECURITY\n" + 
+            "derby.drda.maxThreads=0\n" + 
+            "derby.drda.sslMode=off\n" + 
+            "derby.drda.keepAlive=true\n" + 
+            "derby.drda.minThreads=0\n" + 
+            "derby.drda.portNumber=1527\n" + 
+            "derby.drda.logConnections=false\n" + 
+            "derby.drda.timeSlice=0\n" + 
+            "derby.drda.startNetworkServer=false\n" + 
+            "derby.drda.traceAll=false\n" + 
+            "--------- Derby Information --------\n" + 
+            "------------------------------------------------------\n" + 
+            "----------------- Locale Information -----------------\n" + 
+            "------------------------------------------------------";
+
+        if (useProperties)
+            OUTPUT = OUTPUT2;
+        else 
+            OUTPUT = OUTPUT1;
+    }
+
+    /**
+     * Creates a suite with two testcases, with and without some extra 
+     * system properties.
+     * 
+     * @return
+     */
+    public static Test suite() {
+        TestSuite suite = new TestSuite("SysinfoTest");
+
+        // we need to be able to run the server
+        if (!Derby.hasServer()) return suite;
+        // don't run with JSR169 for this is a network server test
+        if (JDBC.vmSupportsJSR169()) return suite;
+
+        useProperties = false;
+        // a call to sysinfo will eventually attempt to load resource 
+        // org.apache.derby.info.DBMS.properties.
+        // If we're using classes, we don't have read permission for the dir.
+        // So, figure out the path & pass the property on so the reference
+        // in the policy file can be resolved.
+        // Note: can't use $derbyTesting.codeclasses as on windows it has
+        // the slashes adjusted.
+        if (!TestConfiguration.loadingFromJars()) {
+            Properties propstmp = new Properties();
+            propstmp.put("sysinfotest.classesdir", findClassDir());
+            suite.addTest(new SystemPropertyTestSetup(decorateTest(), propstmp));
+        }
+        else
+            suite.addTest(decorateTest());
+
+        useProperties = true;
+        Properties props = new Properties();
+        if (!TestConfiguration.loadingFromJars())
+            props.put("sysinfotest.classesdir", findClassDir());
+        props.put("derby.infolog.append","true");
+        props.put("derby.locks.waitTimeout","120");
+        props.put("derby.language.logStatementText","true");
+        //#drda property ,test for it in sysinfo output
+        props.put("derby.drda.securityMechanism","USER_ONLY_SECURITY");
+        suite.addTest(new SystemPropertyTestSetup(decorateTest(), props));
+
+        return suite;
+    }
+
+    private String makePolicyName() {
+        try {
+            String  userDir = getSystemProperty( "user.dir" );
+            String  fileName = userDir + File.separator + 
+            SupportFilesSetup.EXTINOUT + File.separator + TARGET_POLICY_FILE_NAME;
+            File      file = new File( fileName );
+            String  urlString = file.toURL().toExternalForm();
+
+            return urlString;
+        }
+        catch (Exception e) {
+            fail("Unexpected exception caught by " +
+                    "makeServerPolicyName(): " + e );
+            return null;
+        }
+    }
+
+    /**
+     * Decorate a test with SecurityManagerSetup, clientServersuite, and
+     * SupportFilesSetup.
+     * 
+     * @return the decorated test
+     */
+    private static Test decorateTest() {
+        String policyName = new SysinfoTest("test").makePolicyName();
+        Test test = TestConfiguration.clientServerSuite(SysinfoTest.class);
+
+        // Install a security manager using the initial policy file.
+        test = TestConfiguration.singleUseDatabaseDecorator(
+                new SecurityManagerSetup(test, policyName));
+
+        // Copy over the policy file we want to use.
+        String POLICY_FILE_NAME=
+            "functionTests/tests/derbynet/SysinfoTest.policy";
+
+        test = new SupportFilesSetup
+        (
+                test,
+                null,
+                new String[] { POLICY_FILE_NAME },
+                null,
+                new String[] { TARGET_POLICY_FILE_NAME}
+        );
+        return test;
+    }
+
+    /**
+     * Test sysinfo
+     * 
+     * @throws Exception
+     */	
+    public void testSysinfo() throws Exception {
+        String[] SysInfoCmd = 
+            new String[] {"org.apache.derby.drda.NetworkServerControl", "sysinfo"};
+
+        Process p = execJavaCmd(SysInfoCmd);
+        String s = readProcessOutput(p);
+
+        s = sed(s);
+
+        print("testSysinfo", s);
+        assertEquals(OUTPUT,s);
+
+    }
+
+    /**
+     * Test sysinfo by calling NetworkServerControl.getSysinfo()
+     * 
+     * @throws Exception
+     */
+    public void testSysinfoMethod() throws Exception {	
+
+        String s = NetworkServerTestSetup.
+        getNetworkServerControlDefault().getSysinfo();
+        s = sed(s);
+
+        print("testSysinfoMethod", s);
+        assertEquals(OUTPUT, s);
+    }		
+
+    /**
+     * Test sysinfo w/ foreign (non-English) locale.
+     * 
+     * @throws Exception
+     */
+    public void testSysinfoLocale() throws Exception {
+
+        String[] SysInfoLocaleCmd = 
+            new String[] {"-Duser.language=de", "-Duser.country=DE", 
+                "org.apache.derby.drda.NetworkServerControl", "sysinfo"};
+        Process p = execJavaCmd(SysInfoLocaleCmd);
+        String s = readProcessOutput(p);
+        s = sed(s);
+
+        print("testSysinfoLocale", s);
+        assertEquals(OUTPUT, s);
+    }
+
+    /**
+     * Removes lines containing a number of preset words from the given string.
+     * Also trims the string to make it easier to compare.
+     * 
+     * @param s the string to remove lines from
+     * @return the string with the lines removed
+     */
+    private String sed(String s) {
+        /**
+         * Lines containing these strings will be deleted from the output before
+         * asserting that output is correct.
+         */
+        String[] sed = {"Version", "version", "Java", "OS", 
+                "[0-9*].[0-9*].[0-9*]","JRE - JDBC","derby.drda.traceDirectory",
+                "Unable to access Protection Domain","listing properties",
+                "Current Locale",           //Remove these because locale info is
+                "Found support for locale:" //not printed when running from jars..
+        };                          
+
+        for (int i = 0; i < sed.length; i++) {
+            // first, replace \r\n with \n, that's needed if we're on
+            // windows
+            s = s.replaceAll("\r\n", "\n");
+            s = s.replaceAll("(?m)^.*" + sed[i] + ".*\n", "");
+        }
+        s = s.trim();
+        return s;
+    }
+
+    /**
+     * Prints strings to System.out to make it easier to update the tests
+     * when the output changes if derby.tests.debug is true.
+     * 
+     * @param name just a label to identify the string
+     * @param s the string to be printed
+     */
+    private void print(String name,String s) {
+        println("\n\n>>>" + name + ">>>");
+        println(s);
+        println("<<<" + name + "<<<\n\n");
+    }
+
+    public void tearDown() throws Exception {
+        super.tearDown();
+        TARGET_POLICY_FILE_NAME = null;
+        OUTPUT = null;
+    }
+
+    private static String findClassDir() {
+        URL url = null;
+        try {
+            final Class cl = Class.forName("org.apache.derbyTesting." +
+                    "functionTests.tests.derbynet.SysinfoTest");
+        url = (URL)
+           AccessController.doPrivileged(new java.security.PrivilegedAction() {
+            public Object run() {
+                return cl.getProtectionDomain().getCodeSource().getLocation();
+            }
+        });
+        } catch (ClassNotFoundException e) {
+            // need catch to silence compiler, but as we're referring to *this*
+            // class, it ok to ignore this.
+        }
+        return url.getPath();
+    }
+}
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/_Suite.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/_Suite.java
index 1afec3cc..d35be4ad 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/_Suite.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/_Suite.java
@@ -54,6 +54,7 @@ public static Test suite() {
         suite.addTest(BadConnectionTest.suite());
         suite.addTest(NetHarnessJavaTest.suite());
         suite.addTest(SecureServerTest.suite());
+        suite.addTest(SysinfoTest.suite());
         suite.addTest(SSLTest.suite());
         suite.addTest(NetIjTest.suite());
         suite.addTest(NSinSameJVMTest.suite());
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/sysinfo.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/sysinfo.java
index 2921b096..e69de29b 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/sysinfo.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/sysinfo.java
@@ -1,107 +0,0 @@
-/*
-
-   Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.sysinfo
-
-   Licensed to the Apache Software Foundation (ASF) under one or more
-   contributor license agreements.  See the NOTICE file distributed with
-   this work for additional information regarding copyright ownership.
-   The ASF licenses this file to You under the Apache License, Version 2.0
-   (the "License"); you may not use this file except in compliance with
-   the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-
- */
-package org.apache.derbyTesting.functionTests.tests.derbynet;
-
-import java.sql.*;
-import java.util.Vector;
-import java.util.Properties;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.BufferedOutputStream;
-import java.net.InetAddress;
-
-import org.apache.derbyTesting.functionTests.harness.jvm;
-import org.apache.derbyTesting.functionTests.util.ExecProcUtil;
-import org.apache.derby.drda.NetworkServerControl;
-import org.apache.derby.tools.ij;
-
-/**
-	This tests the sysinfo command
-*/
-
-public class sysinfo
-{
-
-	private static Properties properties = new java.util.Properties();
-	private static jvm jvm;
-	private static Vector vCmd;
-	private static BufferedOutputStream bos;
-	private static String[] SysInfoCmd = new String[] {"org.apache.derby.drda.NetworkServerControl",
-		"sysinfo"};
-	private static String[] SysInfoLocaleCmd = new String[] {"-Duser.language=err",
-		"-Duser.country=DE", "org.apache.derby.drda.NetworkServerControl", "sysinfo"};
-
-    /*
-     * Test calling server's sysinfo 
-     * 
-     */
-	public static void test (String args[])
-        throws Exception
-	{
-		if ((System.getProperty("java.vm.name") != null) && System.getProperty("java.vm.name").equals("J9"))
-			jvm = jvm.getJvm("j9_13");
-		else
-			jvm = jvm.getJvm("currentjvm");		// ensure compatibility
-		vCmd = jvm.getCommandLine();
-		try
-		{
-			Connection conn1 = ij.startJBMS();
-            bos = new BufferedOutputStream(System.out, 1024);
-
-			/************************************************************
-			 *  Test sysinfo
-			 ************************************************************/
-			System.out.println("Testing Sysinfo");
-			ExecProcUtil.execCmdDumpResults(SysInfoCmd,vCmd,bos);	
-			System.out.println("End test");
-			
-			/************************************************************
-			 *  Test sysinfo by calling NetworkServerControl.getSysinfo()
-			 ************************************************************/
-			System.out.println("Testing Sysinfo (method)");
-			NetworkServerControl derbyServer = 
-				new NetworkServerControl( InetAddress.getByName("localhost"),
-										NetworkServerControl.DEFAULT_PORTNUMBER);
-			System.out.println(derbyServer.getSysinfo());
-			System.out.println("End test (method)");
-			
-			/************************************************************
-			 *  Test sysinfo w/ foreign (non-English) locale
-			 ************************************************************/
-			System.out.println("Testing Sysinfo (locale)");
-			ExecProcUtil.execCmdDumpResults(SysInfoLocaleCmd,vCmd,bos);	
-			System.out.println("End test (locale)");
-
-			bos.close();
-		}
-		catch (Exception e)
-		{
-			e.printStackTrace();
-		}
-	}
-    
-    public static void main(String[] args)
-        throws Exception
-    {
-       test(args);
-    }
-
-}
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/sysinfo_withproperties.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/sysinfo_withproperties.java
index 1da4e140..e69de29b 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/sysinfo_withproperties.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/sysinfo_withproperties.java
@@ -1,42 +0,0 @@
-/*
-
-   Derby - Class org.apache.derbyTesting.functionTests.tests.derbynet.sysinfo_withproperties
-
-   Licensed to the Apache Software Foundation (ASF) under one or more
-   contributor license agreements.  See the NOTICE file distributed with
-   this work for additional information regarding copyright ownership.
-   The ASF licenses this file to You under the Apache License, Version 2.0
-   (the "License"); you may not use this file except in compliance with
-   the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-
- */
-package org.apache.derbyTesting.functionTests.tests.derbynet;
-
-/**
-	Purpose of this class is to test the sysinfo command when 
-    server is started with some drda properties. The derby properties
-    in the test harness framework are added to 
-    sysinfo_withproperties_derby.properties.
-    
-    Most of the work of calling sysinfo is done in sysinfo.
-    @see sysinfo#test 
-*/
-
-public class sysinfo_withproperties
-{
-	public static void main (String args[]) throws Exception
-	{
-        // test the sysinfo calls.
-        sysinfo.test(args);
-        
-	}
-
-}
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
index 694553e9..1bf37f89 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
@@ -436,7 +436,6 @@ public Object run() {
 	}
     
     /**
-   /**
     * Execute command using 'java' executable and verify that it completes
     * with expected results
     * @param expectedString String to compare the resulting output with. May be
@@ -446,10 +445,36 @@ public Object run() {
     * @throws InterruptedException
     * @throws IOException
     */
-   public void  assertExecJavaCmdAsExpected(
-           String[] expectedString, String[] cmd, int expectedExitValue)
-   throws InterruptedException, IOException {
+	public void assertExecJavaCmdAsExpected(String[] expectedString,
+	        String[] cmd, int expectedExitValue) throws InterruptedException,
+	        IOException {
+
+	    Process pr = execJavaCmd(cmd);
+	    String output = readProcessOutput(pr);
+	    int exitValue = pr.exitValue();
+
+	    Assert.assertEquals(expectedExitValue, exitValue);
+	    if (expectedString != null) {
+	        for (int i = 0; i < expectedString.length; i++) {
+	            assertFalse(output.indexOf(expectedString[i]) < 0);
+	        }
+	    }
+	}
+
        
+	/**
+	 * Execute a java command and return the process.
+	 * The caller should decide what to do with the process, if anything,
+	 * typical activities would be to do a pr.waitFor, or to
+	 * get a getInputStream or getErrorStream
+	 * Note, that for verifying the output of a Java process, there is
+	 * assertExecJavaCmdAsExpected
+	 * 
+	 * @param cmd array of java arguments for command
+	 * @return the process that was started
+	 * @throws IOException
+	 */
+	public Process execJavaCmd(String[] cmd) throws IOException {
        int totalSize = 3 + cmd.length;
        String[] tcmd = new String[totalSize];
        tcmd[0] = "java";
@@ -459,6 +484,7 @@ public void  assertExecJavaCmdAsExpected(
        System.arraycopy(cmd, 0, tcmd, 3, cmd.length);
        
        final String[] command = tcmd;
+
        Process pr = null;
        try {
            pr = (Process) AccessController
@@ -476,40 +502,45 @@ public Object run() throws IOException {
            else
                throw (SecurityException) e;
        }
+	    return pr;
+	}
+   
+   /**
+    * Reads output from a process and returns it as a string.
+    * This will block until the process terminates.
+    * 
+    * @param pr a running process
+    * @return output of the process
+    * @throws InterruptedException
+    */
+   public String readProcessOutput(Process pr) throws InterruptedException {
        InputStream is = pr.getInputStream();
-       if ( is == null )
-       {
-           fail("Unexpectedly receiving no text from the java command");
+		if (is == null) {
+			fail("Unexpectedly receiving no text from the process");
        }
        
        String output = "";
-       try
-       {
+		try {
            char[] ca = new char[1024];
            // Create an InputStreamReader with default encoding; we're hoping
            // this to be en. If not, we may not match the expected string.
            InputStreamReader inStream;
                inStream = new InputStreamReader(is);
+
            // keep reading from the stream until all done
-           while ((inStream.read(ca, 0, ca.length)) != -1)
+		    int charsRead;
+		    while ((charsRead = inStream.read(ca, 0, ca.length)) != -1)
            {
-               output = output + new String(ca).trim();
+		        output = output + new String(ca, 0, charsRead);
            }
        } catch (Exception e) {
-           fail("Exception accessing inputstream from javacommand");
+		    fail("Exception accessing inputstream from process", e);
        }
        
        // wait until the process exits
        pr.waitFor();
        
-       Assert.assertEquals(expectedExitValue, pr.exitValue());
-       if (expectedString != null)
-       {
-           for (int i=0 ; i<expectedString.length ; i++)
-           {
-               assertFalse(output.indexOf(expectedString[i]) < 0);
-           }
-       }
+		return output;
    }
     
     /**
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/junit/Utilities.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/junit/Utilities.java
index 7aad8d53..39e2a898 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/junit/Utilities.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/junit/Utilities.java
@@ -154,51 +154,6 @@ public static void showResultSet(ResultSet rs) throws SQLException {
                     System.out.println("};\n");
             }
         }
-        /**
-         * Execute a java command and return the process.
-         * The caller should decide what to do with the process, if anything,
-         * typical activities would be to do a pr.waitFor, or to
-         * get a getInputStream or getErrorStream
-         * Note, that for verifying the output of a Java process, there is
-         * BaseTestCase.assertExecJavaCmdAsExpected
-         * 
-         * @param args
-         * @return the Process 
-         * @throws InterruptedException
-         */
-        public static Process execJavaCmd(String[] args) throws IOException, InterruptedException {
-            
-            int totalSize = 3 + args.length;
-            String[] cmd = new String[totalSize];
-            cmd[0] = "java";
-            cmd[1] = "-classpath";
-            cmd[2] = BaseTestCase.getSystemProperty("java.class.path");
-                    
-            System.arraycopy(args, 0, cmd, 3, args.length);
-            
-            final String[] command = cmd;
-            Process pr = null;
-            try {
-                pr = (Process) AccessController
-                    .doPrivileged(new PrivilegedExceptionAction() {
-                        public Object run() throws IOException {
-                            Process result = null;
-        
-                                result = Runtime.getRuntime().exec(command);
-        
-                            return result;
-                        }
-                    });
-            } catch (PrivilegedActionException pe) {
-                Exception e = pe.getException();
-                if (e instanceof IOException)
-                    throw (IOException) e;
-                else
-                    throw (SecurityException) e;
-            }
-            
-            return pr;
-        }
         
     /**
      * Calls the public method <code>getInfo</code> of the sysinfo tool within
