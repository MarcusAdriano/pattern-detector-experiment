diff --git a/lucene/dev/trunk/solr/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.java b/lucene/dev/trunk/solr/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.java
index 3eb6f646..f85c37fc 100644
--- a/lucene/dev/trunk/solr/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.java
+++ b/lucene/dev/trunk/solr/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper.java
@@ -107,6 +107,7 @@ public synchronized void saveCommitPoint(Long indexCommitVersion) {
     AtomicInteger reserveCount = savedCommits.get(indexCommitVersion);
     if (reserveCount == null) reserveCount = new AtomicInteger();
     reserveCount.incrementAndGet();
+    savedCommits.put(indexCommitVersion, reserveCount);
   }
 
   /** Release a previously saved commit point */
@@ -167,7 +168,7 @@ public void delete() {
       Long version = delegate.getVersion();
       Long reserve = reserves.get(version);
       if (reserve != null && System.currentTimeMillis() < reserve) return;
-      if(savedCommits.contains(version)) return;
+      if(savedCommits.containsKey(version)) return;
       delegate.delete();
     }
 
diff --git a/lucene/dev/trunk/solr/src/java/org/apache/solr/handler/ReplicationHandler.java b/lucene/dev/trunk/solr/src/java/org/apache/solr/handler/ReplicationHandler.java
index 84c9f5ce..15cd24a4 100644
--- a/lucene/dev/trunk/solr/src/java/org/apache/solr/handler/ReplicationHandler.java
+++ b/lucene/dev/trunk/solr/src/java/org/apache/solr/handler/ReplicationHandler.java
@@ -282,10 +282,9 @@ private void doSnapShoot(SolrParams params, SolrQueryResponse rsp, SolrQueryRequ
 
       if(indexCommit == null) {
         indexCommit = req.getSearcher().getReader().getIndexCommit();
-        // race?
-        delPolicy.setReserveDuration(indexCommit.getVersion(), reserveCommitDuration);
       }
  
+      // small race here before the commit point is saved
       new SnapShooter(core, params.get("location")).createSnapAsync(indexCommit, this);
 
     } catch (Exception e) {
@@ -793,14 +792,14 @@ public void inform(SolrCore core) {
       }
       List backup = master.getAll("backupAfter");
       boolean backupOnCommit = backup.contains("commit");
-      boolean backupOnOptimize = backup.contains("optimize");
+      boolean backupOnOptimize = !backupOnCommit && backup.contains("optimize");
       List replicateAfter = master.getAll(REPLICATE_AFTER);
       replicateOnCommit = replicateAfter.contains("commit");
-      replicateOnOptimize = replicateAfter.contains("optimize");
+      replicateOnOptimize = !replicateOnCommit && replicateAfter.contains("optimize");
 
       // if we only want to replicate on optimize, we need the deletion policy to
       // save the last optimized commit point.
-      if (replicateOnOptimize && !replicateOnCommit) {
+      if (replicateOnOptimize) {
         IndexDeletionPolicyWrapper wrapper = core.getDeletionPolicy();
         IndexDeletionPolicy policy = wrapper == null ? null : wrapper.getWrappedDeletionPolicy();
         if (policy instanceof SolrDeletionPolicy) {
@@ -827,7 +826,7 @@ public void inform(SolrCore core) {
           IndexReader reader = s==null ? null : s.get().getReader();
           if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {
             try {
-              if(!replicateOnCommit && replicateOnOptimize){
+              if(replicateOnOptimize){
                 Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());
                 for (IndexCommit ic : commits) {
                   if(ic.isOptimized()){
@@ -928,20 +927,27 @@ public void init(NamedList args) {/*no op*/ }
        * This refreshes the latest replicateable index commit and optionally can create Snapshots as well
        */
       public void postCommit() {
+        IndexCommit currentCommitPoint = core.getDeletionPolicy().getLatestCommit();
+
         if (getCommit) {
-          IndexCommit oldCommitPoint = indexCommitPoint;
-          indexCommitPoint = core.getDeletionPolicy().getLatestCommit();
+          // IndexCommit oldCommitPoint = indexCommitPoint;
+          indexCommitPoint = currentCommitPoint;
+
+          // We don't need to save commit points for replication, the SolrDeletionPolicy
+          // always saves the last commit point (and the last optimized commit point, if needed)
+          /***
           if (indexCommitPoint != null) {
             core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());
           }
           if(oldCommitPoint != null){
             core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());
           }
+          ***/
         }
         if (snapshoot) {
           try {
             SnapShooter snapShooter = new SnapShooter(core, null);
-            snapShooter.createSnapAsync(core.getDeletionPolicy().getLatestCommit(), ReplicationHandler.this);
+            snapShooter.createSnapAsync(currentCommitPoint, ReplicationHandler.this);
           } catch (Exception e) {
             LOG.error("Exception while snapshooting", e);
           }
