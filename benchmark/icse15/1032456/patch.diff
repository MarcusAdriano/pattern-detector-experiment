diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/ColumnFamily.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/ColumnFamily.java
index c18f2e6f..f3bd581a 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/ColumnFamily.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/ColumnFamily.java
@@ -355,7 +355,7 @@ public String toString()
     {
         StringBuilder sb = new StringBuilder("ColumnFamily(");
         CFMetaData cfm = metadata();
-        sb.append(cfm == null ? "-deleted-" : cfm.cfName);
+        sb.append(cfm == null ? "<anonymous>" : cfm.cfName);
 
         if (isMarkedForDelete())
             sb.append(" -deleted at " + getMarkedForDeleteAt() + "-");
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/Table.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/Table.java
index 2bb33bcd..9e934efb 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/Table.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/Table.java
@@ -368,6 +368,8 @@ public Row getRow(QueryFilter filter) throws IOException
     public void apply(RowMutation mutation, Object serializedMutation, boolean writeCommitLog) throws IOException
     {
         List<Memtable> memtablesToFlush = Collections.emptyList();
+        if (logger.isDebugEnabled())
+            logger.debug("applying mutation of {}", FBUtilities.bytesToHex(mutation.key()));
 
         // write the mutation to the commitlog and memtables
         flusherLock.readLock().lock();
@@ -394,6 +396,8 @@ public void apply(RowMutation mutation, Object serializedMutation, boolean write
                         if (mutatedIndexedColumns == null)
                             mutatedIndexedColumns = new TreeSet<ByteBuffer>();
                         mutatedIndexedColumns.add(column);
+                        if (logger.isDebugEnabled())
+                            logger.debug("mutating indexed column " + cf.getComparator().getString(column));
                     }
                 }
 
@@ -458,6 +462,8 @@ private static void ignoreObsoleteMutations(ColumnFamily cf, SortedSet<ByteBuffe
             IColumn resolvedColumn = resolved == null ? null : resolved.getColumn(oldColumn.name());
             if (resolvedColumn != null && resolvedColumn.equals(oldColumn))
             {
+                if (logger.isDebugEnabled())
+                    logger.debug("ignoring obsolete mutation of " + cf.getComparator().getString(oldColumn.name()));
                 cf.remove(oldColumn.name());
                 mutatedIndexedColumns.remove(oldColumn.name());
                 oldIndexedColumns.remove(oldColumn.name());
@@ -501,6 +507,9 @@ private static ColumnFamily readCurrentIndexedColumns(DecoratedKey key, ColumnFa
             {
                 cfi.addColumn(new Column(key, FBUtilities.EMPTY_BYTE_BUFFER, column.timestamp()));
             }
+            System.out.println(cfi.toString());
+            if (logger.isDebugEnabled())
+                logger.debug("applying index row {}:{}", valueKey, cfi);
             Memtable fullMemtable = cfs.getIndexedColumnFamilyStore(columnName).apply(valueKey, cfi);
             if (fullMemtable != null)
                 fullMemtables = addFullMemtable(fullMemtables, fullMemtable);
@@ -520,6 +529,8 @@ private static ColumnFamily readCurrentIndexedColumns(DecoratedKey key, ColumnFa
                 ColumnFamily cfi = cfs.newIndexedColumnFamily(columnName);
                 cfi.addTombstone(key, localDeletionTime, column.timestamp());
                 Memtable fullMemtable = cfs.getIndexedColumnFamilyStore(columnName).apply(valueKey, cfi);
+                if (logger.isDebugEnabled())
+                    logger.debug("applying index tombstones {}:{}", valueKey, cfi);
                 if (fullMemtable != null)
                     fullMemtables = addFullMemtable(fullMemtables, fullMemtable);
             }
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/marshal/LocalByPartionerType.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/marshal/LocalByPartionerType.java
index 91511f0f..bba064e9 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/marshal/LocalByPartionerType.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/marshal/LocalByPartionerType.java
@@ -23,6 +23,7 @@
 
 import org.apache.cassandra.dht.IPartitioner;
 import org.apache.cassandra.dht.Token;
+import org.apache.cassandra.utils.FBUtilities;
 
 /** for sorting columns representing row keys in the row ordering as determined by a partitioner.
  * Not intended for user-defined CFs, and will in fact error out if used with such. */
@@ -37,7 +38,7 @@ public LocalByPartionerType(IPartitioner<T> partitioner)
 
     public String getString(ByteBuffer bytes)
     {
-        return null;
+        return FBUtilities.bytesToHex(bytes);
     }
 
     public int compare(ByteBuffer o1, ByteBuffer o2)
