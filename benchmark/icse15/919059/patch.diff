diff --git a/incubator/cassandra/trunk/contrib/client_only/ClientOnlyExample.java b/incubator/cassandra/trunk/contrib/client_only/ClientOnlyExample.java
index fb24a8a6..11aa8b1d 100644
--- a/incubator/cassandra/trunk/contrib/client_only/ClientOnlyExample.java
+++ b/incubator/cassandra/trunk/contrib/client_only/ClientOnlyExample.java
@@ -24,8 +24,6 @@
 import org.apache.cassandra.thrift.ConsistencyLevel;
 import org.apache.cassandra.thrift.UnavailableException;
 
-import static org.apache.cassandra.thrift.ThriftGlue.createColumnPath;
-
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -53,7 +51,7 @@ private static void testWriting() throws IOException
         for (int i = 0; i < 100; i++)
         {
             RowMutation change = new RowMutation("Keyspace1", "key" + i);
-            ColumnPath cp = createColumnPath("Standard1", null, ("colb").getBytes());
+            ColumnPath cp = new ColumnPath("Standard1").setSuper_column(null).setColumn(("colb").getBytes());
             change.add(new QueryPath(cp), ("value" + i).getBytes(), 0);
 
             // don't call change.apply().  The reason is that is makes a static call into Table, which will perform
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
index cc64a53c..b9c03ec1 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
@@ -19,26 +19,11 @@
 
 import org.apache.cassandra.db.marshal.AbstractType;
 import org.apache.cassandra.db.marshal.BytesType;
+import org.apache.cassandra.thrift.*;
 import org.apache.thrift.*;
 
 import org.antlr.runtime.tree.*;
 
-import static org.apache.cassandra.thrift.ThriftGlue.*;
-
-import org.apache.cassandra.service.*;
-import org.apache.cassandra.thrift.Cassandra;
-import org.apache.cassandra.thrift.Column;
-import org.apache.cassandra.thrift.ColumnOrSuperColumn;
-import org.apache.cassandra.thrift.ColumnParent;
-import org.apache.cassandra.thrift.ColumnPath;
-import org.apache.cassandra.thrift.ConsistencyLevel;
-import org.apache.cassandra.thrift.InvalidRequestException;
-import org.apache.cassandra.thrift.NotFoundException;
-import org.apache.cassandra.thrift.SliceRange;
-import org.apache.cassandra.thrift.SuperColumn;
-import org.apache.cassandra.thrift.TimedOutException;
-import org.apache.cassandra.thrift.UnavailableException;
-
 import java.util.*;
 import java.io.UnsupportedEncodingException;
 
@@ -177,12 +162,12 @@ private void executeCount(CommonTree ast) throws TException, InvalidRequestExcep
        
        if (columnSpecCnt == 0)
        {
-           colParent = createColumnParent(columnFamily, null);
+           colParent = new ColumnParent(columnFamily).setSuper_column(null);
        }
        else
        {
            assert (columnSpecCnt == 1);
-           colParent = createColumnParent(columnFamily, CliCompiler.getColumn(columnFamilySpec, 0).getBytes("UTF-8"));
+           colParent = new ColumnParent(columnFamily).setSuper_column(CliCompiler.getColumn(columnFamilySpec, 0).getBytes("UTF-8"));
        }
        
        int count = thriftClient_.get_count(tableName, key, colParent, ConsistencyLevel.ONE);
@@ -246,7 +231,7 @@ else if (columnSpecCnt == 2)
             columnName = CliCompiler.getColumn(columnFamilySpec, 1).getBytes("UTF-8");
         }
         
-        thriftClient_.remove(tableName, key, createColumnPath(columnFamily, superColumnName, columnName),
+        thriftClient_.remove(tableName, key, new ColumnPath(columnFamily).setSuper_column(superColumnName).setColumn(columnName),
                              System.currentTimeMillis(), ConsistencyLevel.ONE);
         css_.out.println(String.format("%s removed.", (columnSpecCnt == 0) ? "row" : "column"));
     }  
@@ -256,8 +241,8 @@ private void doSlice(String keyspace, String key, String columnFamily, byte[] su
     {
         SliceRange range = new SliceRange(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, true, 1000000);
         List<ColumnOrSuperColumn> columns = thriftClient_.get_slice(keyspace, key, 
-            createColumnParent(columnFamily, superColumnName),
-            createSlicePredicate(null, range), ConsistencyLevel.ONE);
+                                                                    new ColumnParent(columnFamily).setSuper_column(superColumnName),
+                                                                    new SlicePredicate().setColumn_names(null).setSlice_range(range), ConsistencyLevel.ONE);
         int size = columns.size();
         
         // Print out super columns or columns.
@@ -374,7 +359,7 @@ else if (columnSpecCnt == 2)
         }
         
         // Perform a get(), print out the results.
-        ColumnPath path = createColumnPath(columnFamily, superColumnName, columnName);
+        ColumnPath path = new ColumnPath(columnFamily).setSuper_column(superColumnName).setColumn(columnName);
         Column column = thriftClient_.get(tableName, key, path, ConsistencyLevel.ONE).column;
         css_.out.printf("=> (column=%s, value=%s, timestamp=%d)\n", formatColumnName(tableName, columnFamily, column),
                         new String(column.value, "UTF-8"), column.timestamp);
@@ -423,7 +408,7 @@ else if (columnSpecCnt == 1)
         }
         
         // do the insert
-        thriftClient_.insert(tableName, key, createColumnPath(columnFamily, superColumnName, columnName),
+        thriftClient_.insert(tableName, key, new ColumnPath(columnFamily).setSuper_column(superColumnName).setColumn(columnName),
                              value.getBytes(), System.currentTimeMillis(), ConsistencyLevel.ONE);
         
         css_.out.println("Value inserted.");
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
index 4757e486..dc87e38e 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
@@ -40,13 +40,9 @@
 import org.apache.cassandra.dht.Token;
 import org.apache.cassandra.service.StorageProxy;
 import org.apache.cassandra.service.StorageService;
-import org.apache.cassandra.utils.Pair;
 import org.apache.thrift.TException;
 import org.json.simple.JSONValue;
 
-import static org.apache.cassandra.thrift.ThriftGlue.createColumnOrSuperColumn_Column;
-import static org.apache.cassandra.thrift.ThriftGlue.createColumnOrSuperColumn_SuperColumn;
-
 public class CassandraServer implements Cassandra.Iface
 {
     public static String TOKEN_MAP = "token map";
@@ -147,7 +143,7 @@ public CassandraServer()
                 continue;
             }
             Column thrift_column = new Column(column.name(), column.value(), column.timestamp());
-            thriftColumns.add(createColumnOrSuperColumn_Column(thrift_column));
+            thriftColumns.add(new ColumnOrSuperColumn().setColumn(thrift_column));
         }
 
         // we have to do the reversing here, since internally we pass results around in ColumnFamily
@@ -169,7 +165,7 @@ public CassandraServer()
                 continue;
             }
             SuperColumn superColumn = new SuperColumn(column.name(), subcolumns);
-            thriftSuperColumns.add(createColumnOrSuperColumn_SuperColumn(superColumn));
+            thriftSuperColumns.add(new ColumnOrSuperColumn().setSuper_column(superColumn));
         }
 
         if (reverseOrder)
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftGlue.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftGlue.java
index e8c834a6..e69de29b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftGlue.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftGlue.java
@@ -1,83 +0,0 @@
-package org.apache.cassandra.thrift;
-/*
- * 
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * 
- *   http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- * 
- */
-
-
-import java.util.List;
-
-
-public class ThriftGlue
-{
-    private static ColumnOrSuperColumn createColumnOrSuperColumn(Column col, SuperColumn scol)
-    {
-        ColumnOrSuperColumn ret = new ColumnOrSuperColumn();
-        ret.setColumn(col);
-        ret.setSuper_column(scol);
-        return ret;
-    }
-
-    public static ColumnOrSuperColumn createColumnOrSuperColumn_Column(Column col)
-    {
-        return createColumnOrSuperColumn(col, null);
-    }
-
-    public static ColumnOrSuperColumn createColumnOrSuperColumn_SuperColumn(SuperColumn scol)
-    {
-        return createColumnOrSuperColumn(null, scol);
-    }
-
-    public static ColumnParent createColumnParent(String columnFamily, byte[] super_column)
-    {
-        ColumnParent ret = new ColumnParent(columnFamily);
-        ret.setSuper_column(super_column);
-        return ret;
-    }
-
-    public static ColumnPath createColumnPath(String columnFamily, byte[] superColumnName, byte[] columnName)
-    {
-        ColumnPath ret = new ColumnPath(columnFamily);
-        ret.setSuper_column(superColumnName);
-        ret.setColumn(columnName);
-        return ret;
-    }
-
-    public static SlicePredicate createSlicePredicate(List<byte[]> columns, SliceRange range)
-    {
-        SlicePredicate ret = new SlicePredicate();
-        ret.setColumn_names(columns);
-        ret.setSlice_range(range);
-        return ret;
-    }
-
-    public static SliceRange createSliceRange(byte[] start, byte[] finish, boolean reversed, int count)
-    {
-        SliceRange range = new SliceRange(start, finish, reversed, count);
-        return range;
-    }
-
-    public static SliceRange createSliceRange(byte[] start, byte[] finish, List<byte[]> bitmasks, boolean reversed, int count)
-    {
-        SliceRange range = new SliceRange(start, finish, reversed, count);
-        range.setBitmasks(bitmasks);
-        return range;
-    }
-
-}
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java
index 6f81563b..fb29dc60 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java
@@ -29,8 +29,6 @@
 import org.apache.cassandra.db.marshal.AbstractType;
 import org.apache.cassandra.db.marshal.MarshalException;
 
-import static org.apache.cassandra.thrift.ThriftGlue.*;
-
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.dht.IPartitioner;
 import org.apache.cassandra.dht.RandomPartitioner;
@@ -218,14 +216,14 @@ public static void validateColumnOrSuperColumn(String keyspace, String cfName, C
     {
         if (cosc.column != null)
         {
-            ThriftValidation.validateColumnPath(keyspace, createColumnPath(cfName, null, cosc.column.name));
+            ThriftValidation.validateColumnPath(keyspace, new ColumnPath(cfName).setSuper_column(null).setColumn(cosc.column.name));
         }
 
         if (cosc.super_column != null)
         {
             for (Column c : cosc.super_column.columns)
             {
-                ThriftValidation.validateColumnPath(keyspace, createColumnPath(cfName, cosc.super_column.name, c.name));
+                ThriftValidation.validateColumnPath(keyspace, new ColumnPath(cfName).setSuper_column(cosc.super_column.name).setColumn(c.name));
             }
         }
 
@@ -277,7 +275,7 @@ public static void validateSlicePredicate(String keyspace, String cfName, byte[]
             throw new InvalidRequestException("A SlicePredicate must be given a list of Columns, a SliceRange, or both");
 
         if (predicate.slice_range != null)
-            validateRange(keyspace, createColumnParent(cfName, scName), predicate.slice_range);
+            validateRange(keyspace, new ColumnParent(cfName).setSuper_column(scName), predicate.slice_range);
 
         if (predicate.column_names != null)
             validateColumns(keyspace, cfName, scName, predicate.column_names);
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/client/TestRingCache.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/client/TestRingCache.java
index 54f55f5a..16b5b8f7 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/client/TestRingCache.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/client/TestRingCache.java
@@ -25,8 +25,6 @@
 import org.apache.cassandra.thrift.ColumnPath;
 import org.apache.cassandra.thrift.ConsistencyLevel;
 
-import static org.apache.cassandra.thrift.ThriftGlue.createColumnPath;
-
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.thrift.protocol.TBinaryProtocol;
 import org.apache.thrift.transport.TSocket;
@@ -89,7 +87,7 @@ public static void main(String[] args) throws Throwable
         for (int nRows = minRow; nRows < maxRow; nRows++)
         {
             String row = rowPrefix + nRows;
-            ColumnPath col = createColumnPath("Standard1", null, "col1".getBytes());
+            ColumnPath col = new ColumnPath("Standard1").setSuper_column(null).setColumn("col1".getBytes());
 
             List<InetAddress> endPoints = ringCache.getEndPoint(table, row);
             String hosts="";
