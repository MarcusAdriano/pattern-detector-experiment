diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java
index 9d65e9d6..72fe17ee 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java
@@ -411,9 +411,7 @@ public void bindStatement() throws StandardException
 			}
 		}
 
-		enhanceAndCheckForAutoincrement(resultSet, inOrder,
-				numTableColumns, colMap, dataDictionary,
-                targetTableDescriptor, targetVTI );
+		resultSet = enhanceAndCheckForAutoincrement(resultSet, inOrder, colMap);
 
 		resultColumnList.checkStorableExpressions(resultSet.getResultColumns());
 		/* Insert a NormalizeResultSetNode above the source if the source
@@ -529,19 +527,13 @@ public void bindStatement() throws StandardException
 	 *
 	 * @param resultSet			current node in the result set tree
 	 * @param inOrder			FALSE if the column list needs reordering
-	 * @param numTableColumns   # of columns in target RCL
 	 * @param colMap            correspondence between RCLs
-	 * @param dataDictionary    DataDictionary to use
-	 * @param targetTableDescriptor    Table Descriptor for target
-	 * @param targetVTI         Target description if it is a VTI
+	 * @return a node representing the source for the insert
 	 *
 	 * @exception StandardException Thrown on error
 	 */
-	private void enhanceAndCheckForAutoincrement(ResultSetNode resultSet, 
-			boolean inOrder, int numTableColumns, int []colMap, 
-			DataDictionary dataDictionary,
-			TableDescriptor targetTableDescriptor,
-            FromVTI targetVTI)
+	ResultSetNode enhanceAndCheckForAutoincrement(
+			ResultSetNode resultSet, boolean inOrder, int[] colMap)
 		throws StandardException
 	{
 		/*
@@ -565,40 +557,24 @@ private void enhanceAndCheckForAutoincrement(ResultSetNode resultSet,
 		 * value expressions.
 		 */
 
-		if (resultSet instanceof SingleChildResultSetNode)
-		{
-			enhanceAndCheckForAutoincrement(
-				((SingleChildResultSetNode)resultSet).getChildResult(),
-				inOrder, numTableColumns, colMap, dataDictionary,
-				targetTableDescriptor, targetVTI);
-			if (! inOrder || resultSet.resultColumns.size() < numTableColumns)
-				resultSet.enhanceRCLForInsert(
-						numTableColumns, colMap, dataDictionary,
-						targetTableDescriptor, targetVTI);
-		}
-		else if (resultSet instanceof UnionNode)
-		{
-			enhanceAndCheckForAutoincrement(
-				((TableOperatorNode)resultSet).getLeftResultSet(),
-				inOrder, numTableColumns, colMap, dataDictionary,
-				targetTableDescriptor, targetVTI);
-			enhanceAndCheckForAutoincrement(
-				((TableOperatorNode)resultSet).getRightResultSet(),
-				inOrder, numTableColumns, colMap, dataDictionary,
-				targetTableDescriptor, targetVTI);
-			if (! inOrder || resultSet.resultColumns.size() < numTableColumns)
-				resultSet.enhanceRCLForInsert(
-						numTableColumns, colMap, dataDictionary,
-						targetTableDescriptor,targetVTI);
-		}
-		else
-		{
-			if (! inOrder || resultSet.resultColumns.size() < numTableColumns)
-				resultSet.enhanceRCLForInsert(
-						numTableColumns, colMap, dataDictionary,
-						targetTableDescriptor, targetVTI);
+		resultSet = resultSet.enhanceRCLForInsert(this, inOrder, colMap);
+
+		// Forbid overrides for generated columns and identity columns that
+		// are defined as GENERATED ALWAYS.
+		if ((resultSet instanceof UnionNode) &&
+				((UnionNode) resultSet).tableConstructor()) {
+			// If this is a multi-row table constructor, we are not really
+			// interested in the result column list of the top-level UnionNode.
+			// The interesting RCLs are those of the RowResultSetNode children
+			// of the UnionNode, and they have already been checked from
+			// UnionNode.enhanceRCLForInsert(). Since the RCL of the UnionNode
+			// doesn't tell whether or not DEFAULT is specified at the leaf
+			// level, we need to skip it here to avoid false positives.
+		} else {
 			resultColumnList.forbidOverrides(resultSet.getResultColumns());
 		}
+
+		return resultSet;
 	}
 
 	int getPrivType()
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
index b29456c0..e0697f04 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
@@ -916,24 +916,42 @@ public void markStatementResultSet()
 	/**
 	 * This ResultSet is the source for an Insert.  The target RCL
 	 * is in a different order and/or a superset of this RCL.  In most cases
-	 * we will reorder and/or add defaults to the current RCL so that is
+	 * we will add a ProjectRestrictNode on top of the source with an RCL that
 	 * matches the target RCL.
 	 * NOTE - The new or enhanced RCL will be fully bound.
 	 *
-	 * @param numTargetColumns	# of columns in target RCL
+	 * @param target            the target node for the insert
+	 * @param inOrder           are source cols in same order as target cols?
 	 * @param colMap			int array representation of correspondence between
 	 *							RCLs - colmap[i] = -1 -> missing in current RCL
 	 *								   colmap[i] = j -> targetRCL(i) <-> thisRCL(j+1)
-	 * @param dataDictionary	DataDictionary to use
-	 * @param targetTD			TableDescriptor for target if the target is not a VTI, null if a VTI
-     * @param targetVTI         Target description if it is a VTI, null if not a VTI
+	 * @return a node that replaces this node and whose RCL matches the target
+	 * RCL. May return this node if no changes to the RCL are needed, or if the
+	 * RCL is modified in-place.
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
-	public void enhanceRCLForInsert(int numTargetColumns, int[] colMap, 
-											 DataDictionary dataDictionary,
-											 TableDescriptor targetTD,
-                                             FromVTI targetVTI)
+	ResultSetNode enhanceRCLForInsert(
+			InsertNode target, boolean inOrder, int[] colMap)
+		throws StandardException
+	{
+		if (!inOrder || resultColumns.size() < target.resultColumnList.size()) {
+			return generateProjectRestrictForInsert(target, colMap);
+		}
+		return this;
+	}
+
+	/**
+	 * Generate an RCL that can replace the original RCL of this node to
+	 * match the RCL of the target for the insert.
+	 *
+	 * @param target the target node for the insert
+	 * @param colMap int array representation of correspondence between
+	 *        RCLs - colmap[i] = -1 -&gt; missing in current RCL
+	 *               colmap[i] = j -&gt; targetRCL(i) &lt;-&gt; thisRCL(j+1)
+	 * @return an RCL that matches the target RCL
+	 */
+	ResultColumnList getRCLForInsert(InsertNode target, int[] colMap)
 			throws StandardException
 	{
 		// our newResultCols are put into the bound form straight away.
@@ -946,10 +964,10 @@ public void enhanceRCLForInsert(int numTargetColumns, int[] colMap,
 		 * (Much simpler to build new list and then assign to source,
 		 * rather than massage the source list in place.)
 		 */
+		int numTargetColumns = target.resultColumnList.size();
 		for (int index = 0; index < numTargetColumns; index++)
 		{
 			ResultColumn	newResultColumn = null;
-			ColumnReference newColumnReference;
 
 			if (colMap[index] != -1)
 			{
@@ -958,14 +976,17 @@ public void enhanceRCLForInsert(int numTargetColumns, int[] colMap,
 			}
 			else
 			{
-				newResultColumn = genNewRCForInsert(targetTD, targetVTI, index + 1, dataDictionary);
+				newResultColumn = genNewRCForInsert(
+						target.targetTableDescriptor,
+						target.targetVTI,
+						index + 1,
+						target.getDataDictionary());
 			}
 
 			newResultCols.addResultColumn(newResultColumn);
 		}
 
-		/* Set the source RCL to the massaged version */
-		resultColumns = newResultCols;
+		return newResultCols;
 	}
 
 	/**
@@ -1071,6 +1092,103 @@ else if (colDesc.isAutoincrement())
 		return newResultColumn;
 	}
 
+	/**
+	 * Generate a ProjectRestrictNode to put on top of this node if it's the
+	 * source for an insert, and the RCL needs reordering and/or addition of
+	 * columns in order to match the target RCL.
+	 *
+	 * @param target the target node for the insert
+	 * @param colMap int array representation of correspondence between
+	 *        RCLs - colmap[i] = -1 -&gt; missing in current RCL
+	 *               colmap[i] = j -&gt; targetRCL(i) &lt;-&gt; thisRCL(j+1)
+	 * @return a ProjectRestrictNode whos RCL matches the target RCL
+	 */
+	private ResultSetNode generateProjectRestrictForInsert(
+			InsertNode target, int[] colMap)
+		throws StandardException
+	{
+		// our newResultCols are put into the bound form straight away.
+		ResultColumnList newResultCols =
+								(ResultColumnList) getNodeFactory().getNode(
+												C_NodeTypes.RESULT_COLUMN_LIST,
+												getContextManager());
+
+		int numTargetColumns = target.resultColumnList.size();
+
+		/* Create a massaged version of the source RCL.
+		 * (Much simpler to build new list and then assign to source,
+		 * rather than massage the source list in place.)
+		 */
+		for (int index = 0; index < numTargetColumns; index++)
+		{
+			ResultColumn	newResultColumn;
+			ResultColumn	oldResultColumn;
+			ColumnReference newColumnReference;
+
+			if (colMap[index] != -1)
+			{
+				// getResultColumn uses 1-based positioning, so offset the
+				// colMap entry appropriately
+				oldResultColumn =
+						resultColumns.getResultColumn(colMap[index] + 1);
+
+				newColumnReference = (ColumnReference) getNodeFactory().getNode(
+												C_NodeTypes.COLUMN_REFERENCE,
+												oldResultColumn.getName(),
+												null,
+												getContextManager());
+				/* The ColumnReference points to the source of the value */
+				newColumnReference.setSource(oldResultColumn);
+				// colMap entry is 0-based, columnId is 1-based.
+				newColumnReference.setType(oldResultColumn.getType());
+
+				// Source of an insert, so nesting levels must be 0
+				newColumnReference.setNestingLevel(0);
+				newColumnReference.setSourceLevel(0);
+
+				// because the insert already copied the target table's
+				// column descriptors into the result, we grab it from there.
+				// alternatively, we could do what the else clause does,
+				// and look it up in the DD again.
+				newResultColumn = (ResultColumn) getNodeFactory().getNode(
+						C_NodeTypes.RESULT_COLUMN,
+						oldResultColumn.getType(),
+						newColumnReference,
+						getContextManager());
+			}
+			else
+			{
+				newResultColumn = genNewRCForInsert(
+						target.targetTableDescriptor,
+						target.targetVTI,
+						index + 1,
+						target.getDataDictionary());
+			}
+
+			newResultCols.addResultColumn(newResultColumn);
+		}
+
+		/* The generated ProjectRestrictNode now has the ResultColumnList
+		 * in the order that the InsertNode expects.
+		 * NOTE: This code here is an exception to several "rules":
+		 *		o  This is the only ProjectRestrictNode that is currently
+		 *		   generated outside of preprocess().
+		 *	    o  The UnionNode is the only node which is not at the
+		 *		   top of the query tree which has ColumnReferences under
+		 *		   its ResultColumnList prior to expression push down.
+		 */
+		return (ResultSetNode) getNodeFactory().getNode(
+									C_NodeTypes.PROJECT_RESTRICT_NODE,
+									this,
+									newResultCols,
+									null,
+									null,
+									null,
+									null,
+									null,
+									getContextManager());
+	}
+
 	/**
 	  * Create a ResultColumn for a column with a generation clause.
 	  */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java
index e788ef39..f1a4021a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java
@@ -123,6 +123,18 @@ public void printSubNodes(int depth)
 		}
 	}
 
+	/**
+	 * Modify the RCL of this node to match the target of the insert.
+	 */
+	ResultSetNode enhanceRCLForInsert(
+			InsertNode target, boolean inOrder, int[] colMap)
+		throws StandardException
+	{
+		if (!inOrder || resultColumns.size() < target.resultColumnList.size()) {
+			resultColumns = getRCLForInsert(target, colMap);
+		}
+		return this;
+	}
 
 	/*
 	 *  Optimizable interface
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnionNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnionNode.java
index fe197a71..33e49288 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnionNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnionNode.java
@@ -184,6 +184,40 @@ void setTableConstructorTypes(ResultColumnList typeColumns)
 		}
 	}
 
+	/**
+	 * Make the RCL of this node match the target node for the insert. If this
+	 * node represents a table constructor (a VALUES clause), we replace the
+	 * RCL with an enhanced one if necessary, and recursively enhance the RCL
+	 * of each child node. For table constructors, we also need to check that
+	 * we don't attempt to override auto-increment columns in each child node
+	 * (checking the top-level RCL isn't sufficient since a table constructor
+	 * may contain the DEFAULT keyword, which makes it possible to specify a
+	 * column without overriding its value).
+	 *
+	 * If this node represents a regular UNION, put a ProjectRestrictNode on
+	 * top of this node and enhance the RCL in that node.
+	 */
+	ResultSetNode enhanceRCLForInsert(
+			InsertNode target, boolean inOrder, int[] colMap)
+		throws StandardException
+	{
+		if (tableConstructor()) {
+			leftResultSet = target.enhanceAndCheckForAutoincrement(
+					leftResultSet, inOrder, colMap);
+			rightResultSet = target.enhanceAndCheckForAutoincrement(
+					rightResultSet, inOrder, colMap);
+			if (!inOrder ||
+					resultColumns.size() < target.resultColumnList.size()) {
+				resultColumns = getRCLForInsert(target, colMap);
+			}
+			return this;
+		} else {
+			// This is a regular UNION, so fall back to the default
+			// implementation that adds a ProjectRestrictNode on top.
+			return super.enhanceRCLForInsert(target, inOrder, colMap);
+		}
+	}
+
 	/*
 	 *  Optimizable interface
 	 */
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DistinctTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DistinctTest.java
index 75a10a01..18d34acf 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DistinctTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DistinctTest.java
@@ -434,10 +434,8 @@ public void testDistinctInInsert() throws SQLException {
 	
 	/**
 	 * This test demonstrates that using distinct in a query for insert
-	 * generates gaps in numbering in autoincremented columns.
-	 * 
-	 * See DERBY-3. If that bug is fixed, the first query after the comment
-	 * below will fail.
+	 * does not cause gaps in numbering in autoincremented columns. Before
+	 * DERBY-3 was fixed, there could be gaps.
 	 * 
 	 * @throws SQLException
 	 */
@@ -458,9 +456,9 @@ public void testDistinctInsertWithGeneratedColumn() throws SQLException {
 		assertRowCount(2, s.executeQuery("select distinct(c31) from source"));
 		assertEquals(2, s.executeUpdate("insert into destWithAI(c12) select distinct(c31) from source"));
 		
-		//we will see gaps in the autoincrement column for all the duplicate rows from source
+		// we should not see gaps in the autoincrement column
 		String [][] expected = { {"1", "1"}, 
-				                 {"3", "2"} };
+				                 {"2", "2"} };
 		JDBC.assertFullResultSet(s.executeQuery("select * from destWithAI"), expected);
 		
 		assertEquals(2, s.executeUpdate("insert into destWithNoAI(c22) select distinct(c31) from source"));
