diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
index 456eca55..6b6e1bff 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
@@ -104,6 +104,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	/** Derby 10.2 System Catalog version */
 	public static final int DD_VERSION_DERBY_10_2		= 140;
 
+	/** Derby 10.3 System Catalog version */
+	public static final int DD_VERSION_DERBY_10_3		= 150;
+
 	// general info
 	public	static	final	String	DATABASE_ID = "derby.databaseID";
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java
index 62abfa07..dbc0b152 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java
@@ -148,6 +148,8 @@ private static String majorToString(int majorVersionNumber) {
 			return "10.1";
 		case DataDictionary.DD_VERSION_DERBY_10_2:
 			return "10.2";
+		case DataDictionary.DD_VERSION_DERBY_10_3:
+			return "10.3";
 		default:
 			return null;
 		}
@@ -282,6 +284,21 @@ private	void	applySafeChanges(TransactionController tc, int fromMajorVersionNumb
 		}
 		*/
 
+		/*
+		 * Derby soft upgrade code
+		 */
+		if (lastSoftUpgradeVersion <= DataDictionary.DD_VERSION_DERBY_10_2)
+		{
+			if (fromMajorVersionNumber <= DataDictionary.DD_VERSION_DERBY_10_2)
+			{
+				modifySysTableNullability(tc,
+					DataDictionaryImpl.SYSSTATEMENTS_CATALOG_NUM);
+			
+				modifySysTableNullability(tc,
+					DataDictionaryImpl.SYSVIEWS_CATALOG_NUM);
+			}
+		}
+		
 		tc.setProperty(DataDictionary.SOFT_DATA_DICTIONARY_VERSION, this, true);
 	}
 
@@ -689,27 +706,50 @@ private int getJBMSMinorVersionNumber()
 	 * 
 	 * Modifies the nullability of the system table corresponding
 	 * to the received catalog number.
-	 * OLD Cloudscape 5.1 upgrade code
+	 * 
 	 * @param tc			TransactionController.
 	 * @param catalogNum	The catalog number corresponding
 	 *  to the table for which we will modify the nullability.
+	 *  
+	 *  OLD Cloudscape 5.1 upgrade code
 	 *  If this corresponds to SYSALIASES, then the nullability of
 	 *  the SYSALIASES.ALIASINFO column will be changed to true
 	 *  (Beetle 4430).  If this corresponds to SYSSTATEMENTS,
 	 *  the nullability of the SYSSTATEMENTS.LASTCOMPILED
 	 *  column will be changed to true.
 	 *
-	 * @exception StandardException
+	 *  Derby upgrade code
+	 *  If this corresponds to SYSSTATEMENTS, then the nullability of
+	 *  the SYSSTATEMENTS.COMPILATION_SCHEMAID column will 
+	 *  be changed to true.  If this corresponds to SYSVIEWS, the nullability
+	 *  of the SYSVIEWS.COMPILATION_SCHEMAID column will be changed to true.
+	 *  
+	 * @exception StandardException   Thrown on error
 	 */
-
-	/* OLD Cloudscape 5.1 upgrade code. See applySafeChanges().
-
 	private void modifySysTableNullability(TransactionController tc, int catalogNum)
 	throws StandardException
 	{
-
-		TabInfo ti = bootingDictionary.getNonCoreTIByNumber(catalogNum);
+		TabInfoImpl ti = bootingDictionary.getNonCoreTIByNumber(catalogNum);
 		CatalogRowFactory rowFactory = ti.getCatalogRowFactory();
+		
+		if (catalogNum == DataDictionaryImpl.SYSSTATEMENTS_CATALOG_NUM)
+		{
+			// SYSSTATEMENTS table ==> SYSSTATEMENTS_COMPILATION_SCHEMAID needs 
+			// to be modified.
+			bootingDictionary.upgrade_setNullability(rowFactory,
+				SYSSTATEMENTSRowFactory.SYSSTATEMENTS_COMPILATION_SCHEMAID, 
+				true, tc);
+		}
+		else if (catalogNum == DataDictionaryImpl.SYSVIEWS_CATALOG_NUM)
+		{
+			// SYSVIEWS table ==> SYSVIEWS_COMPILATION_SCHEMAID needs 
+			// to be modified.
+			bootingDictionary.upgrade_setNullability(rowFactory,
+				SYSVIEWSRowFactory.SYSVIEWS_COMPILATION_SCHEMAID, 
+				true, tc);
+		}
+		
+		/* OLD Cloudscape 5.1 upgrade code. See applySafeChanges(). 
 		if (catalogNum == DataDictionaryImpl.SYSALIASES_CATALOG_NUM) {
 		// SYSALIASES table ==> ALIASINFO needs to be modified.
 			bootingDictionary.upgrade_setNullability(rowFactory,
@@ -720,8 +760,10 @@ else if (catalogNum == DataDictionaryImpl.SYSSTATEMENTS_CATALOG_NUM) {
 			bootingDictionary.upgrade_setNullability(rowFactory,
 				SYSSTATEMENTSRowFactory.SYSSTATEMENTS_LASTCOMPILED, true, tc);
 		}
+		*/		
+		
 	}
-*/
+
 	/**
 		Check to see if a database has been upgraded to the required
 		level in order to use a language feature.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
index 0e31222f..7ac4dec6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
@@ -460,7 +460,7 @@ public boolean canSupport(Properties startParams)
 	public void boot(boolean create, Properties startParams) 
 			throws StandardException
 	{
-		softwareVersion = new DD_Version(this, DataDictionary.DD_VERSION_DERBY_10_2);
+		softwareVersion = new DD_Version(this, DataDictionary.DD_VERSION_DERBY_10_3);
 
 		/* There is a bootstrapping problem here. We would like to use
          * a language connection context to find the name of the system and default
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SYSSTATEMENTSRowFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SYSSTATEMENTSRowFactory.java
index f6b4b876..6ef7547f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SYSSTATEMENTSRowFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SYSSTATEMENTSRowFactory.java
@@ -187,7 +187,8 @@ public ExecRow makeSYSSTATEMENTSrow(
 			typeStr = spsDescriptor.getTypeAsString();
 			initiallyCompilable = spsDescriptor.initiallyCompilable();
 			preparedStatement = spsDescriptor.getPreparedStatement(compileMe);
-			compUuidStr = spsDescriptor.getCompSchemaId().toString();
+			compUuidStr = (spsDescriptor.getCompSchemaId() != null)?
+					spsDescriptor.getCompSchemaId().toString():null;
 			usingText = spsDescriptor.getUsingText();
 		}
 
@@ -263,7 +264,7 @@ public TupleDescriptor buildDescriptor(
 		String						text;
 		String						usingText;
 		UUID						uuid;
-		UUID						compUuid;
+		UUID						compUuid = null;
 		String						uuidStr;
 		UUID						suuid;		// schema
 		String						suuidStr;	// schema
@@ -328,6 +329,7 @@ public TupleDescriptor buildDescriptor(
 		// 8th column is COMPILATIONSCHEMAID (UUID - char(36))
 		col = row.getColumn(8);
 		uuidStr = col.getString();
+		if (uuidStr != null)
 		compUuid = getUUIDFactory().recreateUUID(uuidStr);
 
 		// 9th column is TEXT (LONG VARCHAR)
@@ -472,7 +474,7 @@ public ExecRow makeEmptyRow()
 							SYSSTATEMENTS_COMPILATION_SCHEMAID,	// column number
 							0,					// precision
 							0,					// scale
-							false,				// nullability
+							true,				// nullability
 							"CHAR",				// dataType
 							true,				// built-in type
 							36					// maxLength
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SYSVIEWSRowFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SYSVIEWSRowFactory.java
index 061a4f68..5a13ddce 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SYSVIEWSRowFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/SYSVIEWSRowFactory.java
@@ -319,7 +319,7 @@ public TupleDescriptor buildDescriptor(
 							SYSVIEWS_COMPILATION_SCHEMAID,	// column number
 							0,					// precision
 							0,					// scale
-							false,				// nullability
+							true,				// nullability
 							"CHAR",				// dataType
 							true,				// built-in type
 							36					// maxLength
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java
index 8b371741..3534deb5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/CreateTriggerConstantAction.java
@@ -199,12 +199,36 @@ public void	executeConstantAction(Activation activation)
 				def = dd.getSchemaDescriptor(def.getDescriptorName(), tc, 
 											 false);
 			}
+			
+			/* 
+			** It is possible for spsCompSchemaId to be null.  For instance, 
+			** the current schema may not have been physically created yet but 
+			** it exists "virtually".  In this case, its UUID will have the 
+			** value of null meaning that it is not persistent.  e.g.:   
+			**
+			** CONNECT 'db;create=true' user 'ernie';
+			** CREATE TABLE bert.t1 (i INT);
+			** CREATE TRIGGER bert.tr1 AFTER INSERT ON bert.t1 
+			**    FOR EACH STATEMENT MODE DB2SQL 
+			**    SELECT * FROM SYS.SYSTABLES;
+			**
+			** Note that in the above case, the trigger action statement have a 
+			** null compilation schema.  A compilation schema with null value 
+			** indicates that the trigger action statement text does not have 
+			** any dependencies with the CURRENT SCHEMA.  This means:
+			**
+			** o  It is safe to compile this statement in any schema since 
+			**    there is no dependency with the CURRENT SCHEMA. i.e.: All 
+			**    relevent identifiers are qualified with a specific schema.
+			**
+			** o  The statement cache mechanism can utilize this piece of 
+			**    information to enable better statement plan sharing across 
+			**    connections in different schemas; thus, avoiding unnecessary 
+			**    statement compilation.
+			*/ 
+			if (def != null)
 			spsCompSchemaId = def.getUUID();
 		}
-		if (SanityManager.DEBUG) { 
-			SanityManager.ASSERT(spsCompSchemaId != null,
-								 "spsCompSchemaId is null"); 
-		}
 
 		String tabName;
 		if (triggerTable != null)
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTester.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTester.java
index ccfb5dc1..4f18076e 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTester.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeTester.java
@@ -28,6 +28,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.File;
 
 import java.sql.Connection;
+import java.sql.DatabaseMetaData;
 import java.sql.ResultSet;
 import java.sql.Statement;
 import java.sql.PreparedStatement;
@@ -365,6 +366,7 @@ private void runPhase(int version, int phase)
 									oldMinorVersion) && passed;
             passed = caseTriggerVTI(conn, phase, oldMajorVersion, 
                     oldMinorVersion) && passed;
+			passed = caseCompilationSchema(phase, conn) && passed;
             passed = caseGrantRevoke(conn, phase, classLoader, false) && passed;
             // Test grant/revoke feature with sql authorization
             if(phase == PH_HARD_UPGRADE) {
@@ -503,6 +505,57 @@ private boolean caseVersionCheck(int version, Connection conn)
 		return passed;
 	}
 	
+	/**
+	 * Verify the compilation schema is nullable after upgrade
+	 * @param phase upgrade test phase
+	 * @param conn Connection
+	 * @throws SQLException
+	 */
+	private boolean caseCompilationSchema(int phase, Connection conn) 
+														throws SQLException
+	{
+		boolean passed = false;
+		DatabaseMetaData dmd;
+		ResultSet rs;
+		String isNullable;
+
+		if (conn == null)
+			return false;
+
+		dmd = conn.getMetaData();
+		
+		switch (phase)
+		{
+			case PH_CREATE:
+			case PH_POST_SOFT_UPGRADE:
+			case PH_POST_HARD_UPGRADE:
+				passed = true;
+				break;
+
+			case PH_SOFT_UPGRADE:
+			case PH_HARD_UPGRADE:
+				rs = dmd.getColumns(null, "SYS", "SYSSTATEMENTS", "COMPILATIONSCHEMAID");
+				rs.next();
+				isNullable = rs.getString("IS_NULLABLE");
+				System.out.println ("SYS.SYSSTATEMENTS.COMPILATIONSCHEMAID IS_NULLABLE=" + isNullable);
+				passed = ("YES".equals(isNullable));
+
+				rs = dmd.getColumns(null, "SYS", "SYSVIEWS", "COMPILATIONSCHEMAID");
+				rs.next();
+				isNullable = rs.getString("IS_NULLABLE");
+				System.out.println("SYS.SYSVIEWS.COMPILATIONSCHEMAID IS_NULLABLE=" + isNullable);
+				passed = ("YES".equals(isNullable)) && passed;
+				break;
+			
+			default:
+				passed = false;
+				break;
+		}
+
+		System.out.println("complete caseCompilationSchema - passed " + passed);
+		return passed;
+	}
+
 	/**
 	 * In 10.2: We will write a ReusableRecordIdSequenceNumber in the 
 	 * header of a FileContaienr.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Upgrade_10_1_10_3.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Upgrade_10_1_10_3.java
index 3f24d583..de3521c1 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Upgrade_10_1_10_3.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Upgrade_10_1_10_3.java
@@ -1 +1,57 @@
   + native
+/*
+
+Derby - org.apache.derbyTesting.functionTests.tests.upgradeTests.Upgrade_10_1_10_3
+
+Licensed to the Apache Software Foundation (ASF) under one or more
+contributor license agreements.  See the NOTICE file distributed with
+this work for additional information regarding copyright ownership.
+The ASF licenses this file to You under the Apache License, Version 2.0
+(the "License"); you may not use this file except in compliance with
+the License.  You may obtain a copy of the License at
+
+   http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+*/
+package org.apache.derbyTesting.functionTests.tests.upgradeTests;
+
+import java.net.MalformedURLException;
+import java.sql.SQLException;
+
+/**
+ * Test upgrade from 10.1 to 10.3 
+ */
+public class Upgrade_10_1_10_3 {
+
+	public static void main(String[] args) {
+		
+		int oldMajorVersion = 10;
+		int oldMinorVersion = 1;
+		int newMajorVersion = 10;
+		int newMinorVersion = 3;
+		boolean allowPreReleaseUpgrade = true;
+		
+		try {
+			UpgradeTester upgradeTester = new UpgradeTester(
+											oldMajorVersion, oldMinorVersion,
+											newMajorVersion, newMinorVersion,
+											allowPreReleaseUpgrade);
+			upgradeTester.runUpgradeTests();
+		} catch(MalformedURLException mue) {
+			System.out.println("MalformedURLException: " + mue.getMessage());
+			mue.printStackTrace();
+		} catch (SQLException sqle) {
+			System.out.println("SQLException:");
+			UpgradeTester.dumpSQLExceptions(sqle);
+		} catch (Exception e) {
+			System.out.println("Exception: " + e.getMessage());
+			e.printStackTrace();
+		}
+	}
+}
