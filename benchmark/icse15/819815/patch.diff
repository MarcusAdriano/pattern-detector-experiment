diff --git a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 9ad68ce9..05ce4b7a 100644
--- a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -145,6 +145,8 @@ public static ColumnFamilyStore getColumnFamilyStore(String table, String column
 
     void onStart() throws IOException
     {
+        if (logger_.isDebugEnabled())
+            logger_.debug("Starting CFS " + columnFamily_);
         // scan for data files corresponding to this CF
         List<File> sstableFiles = new ArrayList<File>();
         String[] dataFileDirectories = DatabaseDescriptor.getAllDataFileLocationsForTable(table_);
diff --git a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/CommitLog.java b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/CommitLog.java
index a59f0821..c0317878 100644
--- a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/CommitLog.java
+++ b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/CommitLog.java
@@ -97,6 +97,15 @@ boolean isValidContext()
         {
             return (position != -1L);
         }
+
+        @Override
+        public String toString()
+        {
+            return "CommitLogContext(" +
+                   "file='" + file + '\'' +
+                   ", position=" + position +
+                   ')';
+        }
     }
 
     public static class CommitLogFileComparator implements Comparator<String>
@@ -455,19 +464,24 @@ public Object call() throws IOException
     */
     private void discardCompletedSegments(CommitLog.CommitLogContext cLogCtx, int id) throws IOException
     {
+        if (logger_.isDebugEnabled())
+            logger_.debug("discard completed log segments for " + cLogCtx + ", column family " + id + ". CFIDs are " + Table.TableMetadata.getColumnFamilyIDString());
         /* retrieve the commit log header associated with the file in the context */
         CommitLogHeader commitLogHeader = clHeaders_.get(cLogCtx.file);
-        if(commitLogHeader == null )
+        if (commitLogHeader == null)
         {
-            if( logFile_.equals(cLogCtx.file) )
+            if (logFile_.equals(cLogCtx.file))
             {
                 /* this means we are dealing with the current commit log. */
                 commitLogHeader = clHeader_;
                 clHeaders_.put(cLogCtx.file, clHeader_);
             }
             else
+            {
+                logger_.error("Unknown commitlog file " + cLogCtx.file);
                 return;
         }
+        }
 
         /*
          * log replay assumes that we only have to look at entries past the last
@@ -499,6 +513,8 @@ private void discardCompletedSegments(CommitLog.CommitLogContext cLogCtx, int id
                  * commit log needs to be read. When a flush occurs we turn off
                  * perform & operation and then turn on with the new position.
                 */
+                if (logger_.isDebugEnabled())
+                    logger_.debug("Marking replay position on current commit log " + oldFile);
                 commitLogHeader.turnOn(id, cLogCtx.position);
                 seekAndWriteCommitLogHeader(commitLogHeader.toByteArray());
                 break;
@@ -516,6 +532,8 @@ private void discardCompletedSegments(CommitLog.CommitLogContext cLogCtx, int id
                 }
                 else
                 {
+                    if (logger_.isDebugEnabled())
+                        logger_.debug("Not safe to delete commit log " + oldFile + "; dirty is " + oldCommitLogHeader.dirtyString());
                     RandomAccessFile logWriter = CommitLog.createWriter(oldFile);
                     writeCommitLogHeader(logWriter, oldCommitLogHeader.toByteArray());
                     logWriter.close();
diff --git a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/CommitLogHeader.java b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/CommitLogHeader.java
index 1b1cba65..35773178 100644
--- a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/CommitLogHeader.java
+++ b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/CommitLogHeader.java
@@ -154,6 +154,19 @@ public String toString()
         return sb.toString();
     }
 
+    public String dirtyString()
+    {
+        StringBuilder sb = new StringBuilder();
+        for (int i = 0; i < dirty.length(); i++)
+        {
+            if (dirty.get(i))
+            {
+                sb.append(i).append(", ");
+            }
+        }
+        return sb.toString();
+    }
+
     static class CommitLogHeaderSerializer implements ICompactSerializer<CommitLogHeader>
     {
         public void serialize(CommitLogHeader clHeader, DataOutputStream dos) throws IOException
diff --git a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/Table.java b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/Table.java
index 04b28fb2..8a3fb933 100644
--- a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/Table.java
+++ b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/db/Table.java
@@ -142,24 +142,18 @@ boolean isValidColumnFamily(String cfName)
 
         public String toString()
         {
-            StringBuilder sb = new StringBuilder("");
-            Set<String> cfNames = cfIdMap_.keySet();
-            
-            for ( String cfName : cfNames )
-            {
-                sb.append(cfName);
-                sb.append("---->");
-                sb.append(cfIdMap_.get(cfName));
-                sb.append(System.getProperty("line.separator"));
-            }
-            
-            return sb.toString();
+            return "TableMetadata(" + FBUtilities.mapToString(cfIdMap_) + ")";
         }
 
         public static int getColumnFamilyCount()
         {
             return idCfMap_.size();
         }
+
+        public static String getColumnFamilyIDString()
+        {
+            return FBUtilities.mapToString(tableMetadataMap_);
+        }
     }
 
     /**
diff --git a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/utils/FBUtilities.java b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/utils/FBUtilities.java
index 0d6b40d2..b85f57ac 100644
--- a/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/utils/FBUtilities.java
+++ b/incubator/cassandra/branches/cassandra-0.4/src/java/org/apache/cassandra/utils/FBUtilities.java
@@ -25,11 +25,7 @@
 import java.security.MessageDigest;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Date;
-import java.util.List;
-import java.util.StringTokenizer;
+import java.util.*;
 import java.util.zip.DataFormatException;
 import java.util.zip.Deflater;
 import java.util.zip.Inflater;
@@ -412,4 +408,16 @@ public static String bytesToHex(byte[] buf)
         }
         return new String(chars);
     }
+
+    public static String mapToString(Map<?,?> map)
+    {
+        StringBuilder sb = new StringBuilder("");
+
+        for (Map.Entry entry : map.entrySet())
+        {
+            sb.append(entry.getKey()).append(": ").append(entry.getValue()).append(", ");
+        }
+
+        return sb.append("}").toString();
+    }
 }
