diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/CachingWrapperFilter.java b/lucene/java/trunk/src/java/org/apache/lucene/search/CachingWrapperFilter.java
index 92fe7cd1..f44d3a08 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/CachingWrapperFilter.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/CachingWrapperFilter.java
@@ -18,6 +18,7 @@
  */
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.util.DocIdBitSet;
 import java.util.BitSet;
 import java.util.WeakHashMap;
 import java.util.Map;
@@ -51,11 +52,17 @@ public BitSet bits(IndexReader reader) throws IOException {
       cache = new WeakHashMap();
     }
 
+    Object cached = null;
     synchronized (cache) {  // check cache
-      BitSet cached = (BitSet) cache.get(reader);
-      if (cached != null) {
-        return cached;
+      cached = cache.get(reader);
       }
+	
+    if (cached != null) {
+      if (cached instanceof BitSet) {
+        return (BitSet) cached;
+      } else if (cached instanceof DocIdBitSet)
+        return ((DocIdBitSet) cached).getBitSet();
+      // It would be nice to handle the DocIdSet case, but that's not really possible
     }
 
     final BitSet bits = filter.bits(reader);
@@ -72,11 +79,16 @@ public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
       cache = new WeakHashMap();
     }
 
+    Object cached = null;
     synchronized (cache) {  // check cache
-      DocIdSet cached = (DocIdSet) cache.get(reader);
-      if (cached != null) {
-        return cached;
+      cached = cache.get(reader);
       }
+
+    if (cached != null) {
+      if (cached instanceof DocIdSet)
+        return (DocIdSet) cached;
+      else
+        return new DocIdBitSet((BitSet) cached);
     }
 
     final DocIdSet docIdSet = filter.getDocIdSet(reader);
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java b/lucene/java/trunk/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java
index c40495d5..ea136ec7 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/search/TestCachingWrapperFilter.java
@@ -39,6 +39,10 @@ public void testCachingWorks() throws Exception {
     cacher.getDocIdSet(reader);
     assertTrue("first time", filter.wasCalled());
 
+    // make sure no exception if cache is holding the wrong bitset
+    cacher.bits(reader);
+    cacher.getDocIdSet(reader);
+
     // second time, nested filter should not be called
     filter.clear();
     cacher.getDocIdSet(reader);
