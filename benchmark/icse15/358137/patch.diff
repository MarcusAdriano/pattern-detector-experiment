diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/load/ControlInfo.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/load/ControlInfo.java
index 828b11fd..ae1d5a90 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/load/ControlInfo.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/load/ControlInfo.java
@@ -118,10 +118,6 @@ private void loadDefaultValues() {
     currentProperties.put(FIELD_START_DELIMITER, DEFAULT_FIELD_START_DELIMITER);
     currentProperties.put(FIELD_END_DELIMITER, DEFAULT_FIELD_END_DELIMITER);
     currentProperties.put(VERSION, DEFAULT_VERSION);
-    // set the default code set to the platform default encoding value
-    String default_data_codeset =
-                          (new InputStreamReader(System.in)).getEncoding();
-    currentProperties.put(DATA_CODESET, default_data_codeset);
     currentProperties.put(HAS_DELIMETER_AT_END, INTERNAL_FALSE);
   }
 
@@ -254,6 +250,11 @@ private String mapFromUserFriendlyRecordDelimiters(String aDelimiter) {
     return aDelimiter;
   }
 
+  /**
+   * 
+   * @return Code set, can return null for use the default code set.
+   * @throws Exception
+   */
   String getDataCodeset() throws Exception {
     return(getCurrentProperties().getProperty(DATA_CODESET));
   }
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/load/ExportWriteData.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/load/ExportWriteData.java
index cd8fab9d..18fca53d 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/load/ExportWriteData.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/load/ExportWriteData.java
@@ -67,7 +67,11 @@ private void openFile() throws Exception {
       outputFileName = url.getFile();
     } catch (MalformedURLException ex) {}
     FileOutputStream anOutputStream = new FileOutputStream(outputFileName);
-    aStream = new OutputStreamWriter(new BufferedOutputStream(anOutputStream), dataCodeset);
+    BufferedOutputStream buffered = new BufferedOutputStream(anOutputStream);
+    
+    aStream = dataCodeset == null ?
+    		new OutputStreamWriter(buffered) :
+    		new OutputStreamWriter(buffered, dataCodeset);    	        
   }
 
   /**if control file says true for column definition, write it as first line of the
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/load/ImportReadData.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/load/ImportReadData.java
index b7c07afe..492575b1 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/load/ImportReadData.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/load/ImportReadData.java
@@ -215,6 +215,7 @@ public final Object run() throws Exception {
 
   //open the input data file for reading
   private void realOpenFile() throws Exception {
+	  InputStream inputStream;
     try {
       try {
         URL url = new URL(inputFileName);
@@ -222,11 +223,10 @@ private void realOpenFile() throws Exception {
            inputFileName = url.getFile(); //seems like you can't do openstream on file
            throw new MalformedURLException(); //so, get the filename from url and do it ususal way
         }
-        InputStream inputStream =  url.openStream();
-        bufferedReader = new BufferedReader(new InputStreamReader(inputStream, dataCodeset));
+        inputStream =  url.openStream();
       } catch (MalformedURLException ex) {
-        InputStreamReader inputFileStreamReader = new InputStreamReader(new FileInputStream(inputFileName), dataCodeset);
-        bufferedReader = new BufferedReader(inputFileStreamReader, 32*1024);
+        inputStream = new FileInputStream(inputFileName);
+        
       }
     } catch (FileNotFoundException ex) {
       throw LoadError.dataFileNotFound(inputFileName);
@@ -237,6 +237,9 @@ private void realOpenFile() throws Exception {
 
 		throw sqle;
 	}
+    java.io.Reader rd = dataCodeset == null ?
+    		new InputStreamReader(inputStream) : new InputStreamReader(inputStream, dataCodeset);    
+    bufferedReader = new BufferedReader(rd, 32*1024);
     streamOpenForReading = true;
   }
 
diff --git a/db/derby/code/branches/10.1/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedInput.java b/db/derby/code/branches/10.1/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedInput.java
index a5cc758a..fb0eb8b3 100644
--- a/db/derby/code/branches/10.1/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedInput.java
+++ b/db/derby/code/branches/10.1/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedInput.java
@@ -30,7 +30,8 @@ public LocalizedInput(InputStream i){
 		super(i);
 		this.in = i;
 	}
-	public LocalizedInput(InputStream i, String encode) throws UnsupportedEncodingException{
+
+	LocalizedInput(InputStream i, String encode) throws UnsupportedEncodingException{
 		super(i,encode);
 		this.in = i;
 	}
diff --git a/db/derby/code/branches/10.1/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedOutput.java b/db/derby/code/branches/10.1/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedOutput.java
index 4fb698a9..2ffcedf1 100644
--- a/db/derby/code/branches/10.1/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedOutput.java
+++ b/db/derby/code/branches/10.1/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedOutput.java
@@ -30,7 +30,7 @@ public LocalizedOutput(OutputStream o){
 		super(new OutputStreamWriter(o), true);
 		out = o;
 	}
-	public LocalizedOutput(OutputStream o, String enc) throws UnsupportedEncodingException {
+	LocalizedOutput(OutputStream o, String enc) throws UnsupportedEncodingException {
 		super(new OutputStreamWriter(o, enc), true);
 		out = o;
 	}
diff --git a/db/derby/code/branches/10.1/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java b/db/derby/code/branches/10.1/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java
index 1a68c617..f7aafdef 100644
--- a/db/derby/code/branches/10.1/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java
+++ b/db/derby/code/branches/10.1/java/tools/org/apache/derby/iapi/tools/i18n/LocalizedResource.java
@@ -104,10 +104,10 @@ public void init (String encStr, String locStr, String msgF){
 				encode = eEncode;
 			}
 		}
-		//last chance: get default encoding
-		if (encode == null ){
-		 	encode = new java.io.InputStreamReader(System.in).getEncoding();
-		}
+		
+		// If null at this point then the default encoding
+		// will be always used.
+
 		//get locale string from the caller first
 		locale = getNewLocale(locStr);
 
@@ -127,18 +127,8 @@ public void init (String encStr, String locStr, String msgF){
 			messageFileName = MESSAGE_FILE;
 		}
 		//create default in/out
-		try {
-			out = new LocalizedOutput(System.out,encode);
-		}
-		catch(UnsupportedEncodingException e){
-			out = new LocalizedOutput(System.out);
-		}
-		try {
-			in = new LocalizedInput(System.in, encode);
-		}
-		catch(UnsupportedEncodingException e){
-			in = new LocalizedInput(System.in);
-		}
+		out = getNewOutput(System.out);
+		in = getNewInput(System.in);
 
 		//for faster code: get the format objs
 		if (enableLocalized && locale != null){
@@ -224,20 +214,23 @@ private void initMaxSizes2(){
 	}
 	public LocalizedInput getNewInput(InputStream i) {
 		try {
+			if (encode != null)
 			return new LocalizedInput(i,encode);
 		}
 		catch (UnsupportedEncodingException e){
-			return new LocalizedInput(i);
+			
 		}
+		return new LocalizedInput(i);
 	}
 
 	public LocalizedOutput getNewOutput(OutputStream o){
 		try {
+			if (encode != null)
 			return new LocalizedOutput(o,encode);
 		}
 		catch(UnsupportedEncodingException e){
-			return new LocalizedOutput(o);
 		}
+		return new LocalizedOutput(o);
 	}
 	public String getTextMessage(String key ) {
 		if ( res == null){
@@ -430,9 +423,6 @@ public String getStringFromTimestamp(String timestampStr)
 	public Locale getLocale(){
 			return locale;
 	}
-	public String getEncode(){
-		return encode;
-	}
 
 	private final synchronized String getEnvProperty(String key) {
 		String s;
