diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/cql/compiler/sem/SemanticPhase.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/cql/compiler/sem/SemanticPhase.java
index f85f8c70..b4187d8c 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/cql/compiler/sem/SemanticPhase.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/cql/compiler/sem/SemanticPhase.java
@@ -64,6 +64,7 @@ public static Plan doSemanticAnalysis(CommonTree ast) throws SemanticException
     {
         Plan plan = null;
 
+        if (logger_.isDebugEnabled())
         logger_.debug("AST: " + ast.toStringTree());
 
         switch (ast.getType())
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/cql/driver/CqlDriver.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/cql/driver/CqlDriver.java
index 8ec2a8c8..d994347f 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/cql/driver/CqlDriver.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/cql/driver/CqlDriver.java
@@ -37,10 +37,12 @@ public static CqlResult executeQuery(String query)
 
         try
         {
+            if (logger_.isDebugEnabled())
             logger_.debug("Compiling CQL query ...");
             Plan plan = compiler.compileQuery(query);
             if (plan != null)
             {
+                if (logger_.isDebugEnabled())
                 logger_.debug("Executing CQL query ...");            
                 return plan.execute();
             }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java
index 840e03f5..13f93236 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/BinaryVerbHandler.java
@@ -58,6 +58,7 @@ public void doVerb(Message message)
 	    }        
 	    catch ( Exception e )
 	    {
+	        if (logger_.isDebugEnabled())
 	        logger_.debug(LogUtil.throwableToString(e));            
 	    }        
     }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/LoadVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/LoadVerbHandler.java
index 1abaacb0..e3bcf52a 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/LoadVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/LoadVerbHandler.java
@@ -58,10 +58,12 @@ public void doVerb(Message message)
                 sb.append(endPoint);
 				MessagingService.getMessagingInstance().sendOneWay(messageInternal, endPoint);
 			}
+            if (logger_.isDebugEnabled())
             logger_.debug("Sent data to " + sb.toString());            
         }        
         catch ( Exception e )
         {
+            if (logger_.isDebugEnabled())
             logger_.debug(LogUtil.throwableToString(e));            
         }        
     }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadRepairVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadRepairVerbHandler.java
index a0ba8c4c..2b8e9386 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadRepairVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ReadRepairVerbHandler.java
@@ -52,6 +52,7 @@ public void doVerb(Message message)
         }
         catch ( IOException e )
         {
+            if (logger_.isDebugEnabled())
             logger_.debug(LogUtil.throwableToString(e));            
         }        
     }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
index 592c6157..34a3bbbe 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/BootStrapper.java
@@ -65,6 +65,7 @@ public void run()
     {
         try
         {
+            if (logger_.isDebugEnabled())
             logger_.debug("Beginning bootstrap process for " + targets_ + " ...");                                                               
             /* copy the token to endpoint map */
             Map<Token, EndPoint> tokenToEndPointMap = tokenMetadata_.cloneTokenEndPointMap();
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/LeaveJoinProtocolImpl.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/LeaveJoinProtocolImpl.java
index 1b3874cf..6fc4d07b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/LeaveJoinProtocolImpl.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/LeaveJoinProtocolImpl.java
@@ -62,6 +62,7 @@ public void run()
     {  
         try
         {
+            if (logger_.isDebugEnabled())
             logger_.debug("Beginning leave/join process for ...");                                                               
             /* copy the token to endpoint map */
             Map<Token, EndPoint> tokenToEndPointMap = tokenMetadata_.cloneTokenEndPointMap();
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/SSTableReader.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/SSTableReader.java
index ba2dad52..dc8faea8 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/SSTableReader.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/SSTableReader.java
@@ -55,6 +55,7 @@ public static int getApproximateKeyCount(List<String> dataFiles)
             assert sstable != null;
             int indexKeyCount = sstable.getIndexPositions().size();
             count = count + (indexKeyCount + 1) * INDEX_INTERVAL;
+            if (logger.isDebugEnabled())
             logger.debug("index size for bloom filter calc for file  : " + dataFileName + "   : " + count);
         }
 
@@ -100,6 +101,7 @@ public static synchronized SSTableReader open(String dataFileName, IPartitioner
             {
                 sstable.keyCache = createKeyCache((int)((sstable.getIndexPositions().size() + 1) * INDEX_INTERVAL * cacheFraction));
             }
+            if (logger.isDebugEnabled())
             logger.debug("INDEX LOAD TIME for "  + dataFileName + ": " + (System.currentTimeMillis() - start) + " ms.");
 
             openedFiles.put(dataFileName, sstable);
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
index ed8a4ade..96777777 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
@@ -226,7 +226,8 @@ protected MessagingService()
         }
         catch(Exception e)
         {
-            LogUtil.getLogger(MessagingService.class.getName()).debug(LogUtil.throwableToString(e));
+            if (logger_.isDebugEnabled())
+                logger_.debug(LogUtil.throwableToString(e));
         }
         return result;
     }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/TcpConnection.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/TcpConnection.java
index 7990f399..f6bce008 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/TcpConnection.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/TcpConnection.java
@@ -236,6 +236,7 @@ public void stream(File file, long startPosition, long endPosition) throws IOExc
                 
                 /* returns the number of bytes transferred from file to the socket */
                 long bytesTransferred = fc.transferTo(startPosition, limit, socketChannel_);
+                if (logger_.isDebugEnabled())
                 logger_.debug("Bytes transferred " + bytesTransferred);                
                 bytesWritten += bytesTransferred;
                 startPosition += bytesTransferred; 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ContentStreamState.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ContentStreamState.java
index d959b26e..37fcc82f 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ContentStreamState.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ContentStreamState.java
@@ -90,6 +90,7 @@ private void createFileChannel() throws IOException
             }
             if ( bytesRead_ == streamContext_.getExpectedBytes() )
             {       
+                if (logger_.isDebugEnabled())
                 logger_.debug("Removing stream context " + streamContext_);                 
                 handleStreamCompletion(remoteHost);                              
                 bytesRead_ = 0L;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraDaemon.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraDaemon.java
index 215dd155..683191cd 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraDaemon.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraDaemon.java
@@ -84,6 +84,7 @@ public void uncaughtException(Thread t, Throwable e)
         Set<String> tables = DatabaseDescriptor.getTableToColumnFamilyMap().keySet();
         for (String table : tables)
         {
+            if (logger.isDebugEnabled())
             logger.debug("opening table " + table);
             Table tbl = Table.open(table);
             tbl.onStart();
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
index 9c90dac9..2041db26 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
@@ -161,6 +161,7 @@ protected ColumnFamily readColumnFamily(ReadCommand command, int consistency_lev
     public List<Column> get_slice_by_names(String table, String key, ColumnParent column_parent, List<byte[]> column_names, int consistency_level)
     throws InvalidRequestException, NotFoundException
     {
+        if (logger.isDebugEnabled())
         logger.debug("get_slice_by_names");
         ThriftValidation.validateColumnParent(table, column_parent);
         return getSlice(new SliceByNamesReadCommand(table, key, column_parent, column_names), consistency_level);
@@ -169,6 +170,7 @@ protected ColumnFamily readColumnFamily(ReadCommand command, int consistency_lev
     public List<Column> get_slice(String table, String key, ColumnParent column_parent, byte[] start, byte[] finish, boolean is_ascending, int count, int consistency_level)
     throws InvalidRequestException, NotFoundException
     {
+        if (logger.isDebugEnabled())
         logger.debug("get_slice_from");
         ThriftValidation.validateColumnParent(table, column_parent);
         // TODO support get_slice on super CFs
@@ -181,6 +183,7 @@ protected ColumnFamily readColumnFamily(ReadCommand command, int consistency_lev
     public Column get_column(String table, String key, ColumnPath column_path, int consistency_level)
     throws InvalidRequestException, NotFoundException
     {
+        if (logger.isDebugEnabled())
         logger.debug("get_column");
         ThriftValidation.validateColumnPath(table, column_path);
 
@@ -222,6 +225,7 @@ public Column get_column(String table, String key, ColumnPath column_path, int c
     public int get_column_count(String table, String key, ColumnParent column_parent, int consistency_level)
     throws InvalidRequestException
     {
+        if (logger.isDebugEnabled())
         logger.debug("get_column_count");
         // validateColumnParent assumes we require simple columns; g_c_c is the only
         // one of the columnParent-taking apis that can also work at the SC level.
@@ -261,6 +265,7 @@ public int get_column_count(String table, String key, ColumnParent column_parent
     public void insert(String table, String key, ColumnPath column_path, byte[] value, long timestamp, int consistency_level)
     throws InvalidRequestException, UnavailableException
     {
+        if (logger.isDebugEnabled())
         logger.debug("insert");
         ThriftValidation.validateKey(key);
         ThriftValidation.validateColumnPath(table, column_path);
@@ -280,6 +285,7 @@ public void insert(String table, String key, ColumnPath column_path, byte[] valu
     public void batch_insert(String table, BatchMutation batch_mutation, int consistency_level)
     throws InvalidRequestException, UnavailableException
     {
+        if (logger.isDebugEnabled())
         logger.debug("batch_insert");
         RowMutation rm = RowMutation.getRowMutation(table, batch_mutation);
         Set<String> cfNames = rm.columnFamilyNames();
@@ -291,6 +297,7 @@ public void batch_insert(String table, BatchMutation batch_mutation, int consist
     public void remove(String table, String key, ColumnPathOrParent column_path_or_parent, long timestamp, int consistency_level)
     throws InvalidRequestException, UnavailableException
     {
+        if (logger.isDebugEnabled())
         logger.debug("remove");
         ThriftValidation.validateColumnPathOrParent(table, column_path_or_parent);
         
@@ -315,6 +322,7 @@ private void doInsert(int consistency_level, RowMutation rm) throws UnavailableE
     public List<SuperColumn> get_slice_super_by_names(String table, String key, String column_family, List<byte[]> super_column_names, int consistency_level)
     throws InvalidRequestException
     {
+        if (logger.isDebugEnabled())
         logger.debug("get_slice_super_by_names");
         ThriftValidation.validateColumnFamily(table, column_family);
 
@@ -358,6 +366,7 @@ private void doInsert(int consistency_level, RowMutation rm) throws UnavailableE
     public List<SuperColumn> get_slice_super(String table, String key, String column_family, byte[] start, byte[] finish, boolean is_ascending, int count, int consistency_level)
     throws InvalidRequestException
     {
+        if (logger.isDebugEnabled())
         logger.debug("get_slice_super");
         if (!DatabaseDescriptor.getColumnFamilyType(table, column_family).equals("Super"))
             throw new InvalidRequestException("get_slice_super requires a super CF name");
@@ -377,6 +386,7 @@ private void doInsert(int consistency_level, RowMutation rm) throws UnavailableE
     public SuperColumn get_super_column(String table, String key, SuperColumnPath super_column_path, int consistency_level)
     throws InvalidRequestException, NotFoundException
     {
+        if (logger.isDebugEnabled())
         logger.debug("get_superColumn");
         ThriftValidation.validateSuperColumnPath(table, super_column_path);
 
@@ -404,6 +414,7 @@ public SuperColumn get_super_column(String table, String key, SuperColumnPath su
     public void batch_insert_super_column(String table, BatchMutationSuper batch_mutation_super, int consistency_level)
     throws InvalidRequestException, UnavailableException
     {
+        if (logger.isDebugEnabled())
         logger.debug("batch_insert_SuperColumn");
         RowMutation rm = RowMutation.getRowMutation(table, batch_mutation_super);
         Set<String> cfNames = rm.columnFamilyNames();
@@ -519,6 +530,7 @@ else if (propertyName.equals("version"))
 
     public List<String> get_key_range(String tablename, String columnFamily, String startWith, String stopAt, int maxResults) throws InvalidRequestException, TException
     {
+        if (logger.isDebugEnabled())
         logger.debug("get_key_range");
         ThriftValidation.validateCommand(tablename, columnFamily);
         if (!(StorageService.getPartitioner() instanceof OrderPreservingPartitioner))
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
index 6b67c178..aa5a817c 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -187,6 +187,7 @@ else if (consistency_level == ConsistencyLevel.ALL)
                 throw new UnsupportedOperationException("invalid consistency level " + consistency_level);
             }
             QuorumResponseHandler<Boolean> quorumResponseHandler = new QuorumResponseHandler<Boolean>(blockFor, new WriteResponseResolver());
+            if (logger.isDebugEnabled())
             logger.debug("insertBlocking writing key " + rm.key() + " to " + message.getMessageId() + "@[" + StringUtils.join(endpoints, ", ") + "]");
 
             MessagingService.getMessagingInstance().sendRR(message, endpoints, quorumResponseHandler);
@@ -281,6 +282,7 @@ private static Row weakReadRemote(ReadCommand command) throws IOException
         EndPoint endPoint = StorageService.instance().findSuitableEndPoint(command.key);
         assert endPoint != null;
         Message message = command.makeReadMessage();
+        if (logger.isDebugEnabled())
         logger.debug("weakreadremote reading " + command + " from " + message.getMessageId() + "@" + endPoint);
         message.addHeader(ReadCommand.DO_REPAIR, ReadCommand.DO_REPAIR.getBytes());
         IAsyncResult iar = MessagingService.getMessagingInstance().sendRR(message, endPoint);
@@ -424,12 +426,14 @@ private static Row strongRead(ReadCommand command) throws IOException, TimeoutEx
         */
         endPoints[0] = dataPoint;
         messages[0] = message;
+        if (logger.isDebugEnabled())
         logger.debug("strongread reading data for " + command + " from " + message.getMessageId() + "@" + dataPoint);
         for (int i = 1; i < endPoints.length; i++)
         {
             EndPoint digestPoint = endpointList.get(i - 1);
             endPoints[i] = digestPoint;
             messages[i] = messageDigestOnly;
+            if (logger.isDebugEnabled())
             logger.debug("strongread reading digest for " + command + " from " + messageDigestOnly.getMessageId() + "@" + digestPoint);
         }
 
@@ -439,6 +443,7 @@ private static Row strongRead(ReadCommand command) throws IOException, TimeoutEx
 
             long startTime2 = System.currentTimeMillis();
             row = quorumResponseHandler.get();
+            if (logger.isDebugEnabled())
             logger.debug("quorumResponseHandler: " + (System.currentTimeMillis() - startTime2) + " ms.");
         }
         catch (DigestMismatchException ex)
@@ -607,6 +612,7 @@ private static MultiQuorumResponseHandler dispatchMessages(Map<String, ReadComma
     */
     private static Row weakReadLocal(ReadCommand command) throws IOException
     {
+        if (logger.isDebugEnabled())
         logger.debug("weakreadlocal reading " + command);
         List<EndPoint> endpoints = StorageService.instance().getNLiveStorageEndPoint(command.key);
         /* Remove the local storage endpoint from the list. */
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index ac34d72d..758ad6b3 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -735,7 +735,7 @@ public void forceHandoff(List<String> dataDirectories, String host) throws IOExc
     /**
      * Takes the snapshot for a given table.
      * 
-     * @param table the name of the table.
+     * @param tableName the name of the table.
      * @param tag   the tag given to the snapshot (null is permissible)
      */
     public void takeSnapshot(String tableName, String tag) throws IOException
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/WriteResponseResolver.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/WriteResponseResolver.java
index 746fb264..db7393bd 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/WriteResponseResolver.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/WriteResponseResolver.java
@@ -60,6 +60,7 @@ public Boolean resolve(List<Message> responses) throws DigestMismatchException
             }
             boolean result = writeResponseMessage.isSuccess();
             if (!result) {
+				if (logger_.isDebugEnabled())
 				logger_.debug("Write at " + response.getFrom()
 						+ " may have failed for the key " + writeResponseMessage.key());
 			}
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
index a36d9db2..b70b8b1b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
@@ -253,7 +253,8 @@ public static BigInteger hash(String data)
     	}
     	catch (Exception e)
         {
-    		LogUtil.getLogger(FBUtilities.class.getName()).debug(LogUtil.throwableToString(e));
+    		if (logger_.isDebugEnabled())
+                logger_.debug(LogUtil.throwableToString(e));
     	}
     	return result;
 	}
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/GuidGenerator.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/GuidGenerator.java
index bf626d50..18251b45 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/GuidGenerator.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/utils/GuidGenerator.java
@@ -18,6 +18,8 @@
 
 package org.apache.cassandra.utils;
 
+import org.apache.log4j.Logger;
+
 import java.util.*;
 import java.net.*;
 import java.security.*;
@@ -26,6 +28,7 @@
  */
 
 public class GuidGenerator {
+    private static Logger logger_ = Logger.getLogger(GuidGenerator.class);
     private static Random myRand;
     private static SecureRandom mySecureRand;
     private static String s_id;
@@ -42,7 +45,8 @@
             s_id = InetAddress.getLocalHost().toString();
         }
         catch (UnknownHostException e) {
-            LogUtil.getLogger(GuidGenerator.class.getName()).debug(LogUtil.throwableToString(e));
+            if (logger_.isDebugEnabled())
+                logger_.debug(LogUtil.throwableToString(e));
         }
 
         try {
@@ -50,7 +54,8 @@
             md5 = new SafeMessageDigest(myMd5);
         }
         catch (NoSuchAlgorithmException e) {
-            LogUtil.getLogger(GuidGenerator.class.getName()).debug(LogUtil.throwableToString(e));
+            if (logger_.isDebugEnabled())
+                logger_.debug(LogUtil.throwableToString(e));
         }
     }
 
