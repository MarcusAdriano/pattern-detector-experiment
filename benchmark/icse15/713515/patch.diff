diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/raw/RawStore.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/raw/RawStore.java
index c048bbc4..6fc95945 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/raw/RawStore.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/raw/RawStore.java
@@ -1135,7 +1135,10 @@ private void restoreRemainingFromBackup(String backupPath)
 		// if this is a roll-forward recovery, backup history file 
 		// will already there in the database and will be the latest 
 		// copy; if it exists, do not copy from backup.
-		if (!privExists(dbHistoryFile))
+		// Backup history may not exist at all if we did an offline
+		// backup with os copy commands. In that case, don't try to 
+		// copy the history file. (DERBY-3035)
+		if (privExists(backupHistoryFile) && !privExists(dbHistoryFile))
 			if (!privCopyFile(backupHistoryFile, dbHistoryFile))
 				throw StandardException. 
 					newException(SQLState.RAWSTORE_ERROR_COPYING_FILE,
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/OfflineBackupTest.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/OfflineBackupTest.java
index e69de29b..69f5406d 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/OfflineBackupTest.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/OfflineBackupTest.java
@@ -0,0 +1,85 @@
+/*
+
+Derby - Class org.apache.derbyTesting.functionTests.store.OfflineBackupTest
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to You under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derbyTesting.functionTests.tests.store;
+
+import java.io.File;
+import java.io.IOException;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.SQLException;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.JDBC;
+import org.apache.derbyTesting.junit.TestConfiguration;
+
+
+public class OfflineBackupTest extends BaseJDBCTestCase {
+
+
+    public OfflineBackupTest(String name) {
+        super(name);
+    }
+
+    public void testCreateFromRestoreFrom() throws SQLException, IOException {
+        getConnection();
+        TestConfiguration.getCurrent().shutdownDatabase();
+        File origdbloc = new File("system","wombat");
+        File backupdbloc = new File("system","wombatbackup");
+        PrivilegedFileOpsForTests.copy(origdbloc, backupdbloc);
+        Connection connCreateFrom = DriverManager.getConnection(
+            "jdbc:derby:wombatCreateFrom;createFrom=system/wombatbackup");
+        checkAllConsistency(connCreateFrom);
+        try {
+            DriverManager.getConnection("jdbc:derby:wombatCreateFrom;shutdown=true");
+        } catch (SQLException se) {
+            assertSQLState("Database shutdown", "08006", se);
+        }
+        Connection connRestoreFrom = DriverManager.getConnection(
+            "jdbc:derby:wombatRestoreFrom;restoreFrom=system/wombatbackup");
+        checkAllConsistency(connRestoreFrom);
+        try {
+            DriverManager.getConnection("jdbc:derby:wombatRestoreFrom;shutdown=true");
+        } catch (SQLException se) {
+            assertSQLState("Database shutdown", "08006", se);
+        }
+
+        removeDirectory(backupdbloc);
+        removeDirectory(new File("system","wombatCreateFrom"));
+        removeDirectory(new File("system","wombatRestoreFrom"));
+        
+    }
+    
+  
+
+    public static Test suite() {
+        
+        if (JDBC.vmSupportsJSR169())
+            return new TestSuite("Empty OfflineBackupTest (uses DriverManager)");
+        return TestConfiguration.embeddedSuite(OfflineBackupTest.class);        
+    }
+
+
+}
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java
index 652154b2..5d063f8b 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java
@@ -56,6 +56,7 @@ public static Test suite() {
         suite.addTest(Derby3625Test.suite());
         suite.addTest(PositionedStoreStreamTest.suite());
         suite.addTest(BackupRestoreTest.suite());
+        suite.addTest(OfflineBackupTest.suite());
         // Encryption only supported for Derby in J2SE/J2EE environments.
         // J2ME (JSR169) does not support encryption.
         if (JDBC.vmSupportsJDBC3()) {
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java
index b0789b76..250619e0 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/util/PrivilegedFileOpsForTests.java
@@ -25,6 +25,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.FileReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
 import java.security.AccessController;
 import java.security.PrivilegedActionException;
 import java.security.PrivilegedExceptionAction;
@@ -158,4 +161,97 @@ public Object run()
             throw (FileNotFoundException)pae.getCause();
         }
     }
+
+    /**
+     * In a priv block, do a recursive copy from source to target.  
+     * If target exists it will be overwritten. Parent directory for 
+     * target will be created if it does not exist. 
+     * If source does not exist this will be a noop.
+     * 
+     * @param source  Source file or directory to copy
+     * @param target  Target file or directory to copy
+     * @throws IOException
+     * @throws SecurityException
+     */    
+    public static void copy(final File source, final File target) throws IOException {
+        try {
+            AccessController.doPrivileged(new PrivilegedExceptionAction() {
+                public Object run() throws IOException {
+                    recursiveCopy(source,target);
+                    return null;
+                }
+                });
+        } catch (PrivilegedActionException pae) {
+            throw (IOException) pae.getException();
+        
+        }
+        
+    }
+    /**
+     * Do a recursive copy from source to target.  If target exists it will 
+     * be overwritten. Parent directory for target will be created if it does
+     * not exist. If source does not exist this will be a noop.
+     * 
+     * @param source  Source file or directory to copy
+     * @param target  Target file or directory to copy
+     * @throws IOException
+     * @throws FileNotFoundException
+     */
+    private static void  recursiveCopy(File source, File target) throws IOException, FileNotFoundException{
+    
+        if (source.isFile()) {
+            copySingleFile(source,target);
+            return;
+        }
+            
+        String[] list = source.list();
+
+        // Some JVMs return null for File.list() when the
+        // directory is empty.
+        if (list != null) {
+            for (int i = 0; i < list.length; i++) {
+                File entry = new File(source, list[i]);
+                File targetEntry = new File(target, list[i]);
+                if (entry.isDirectory()) {
+                    copy(entry,targetEntry);
+                } else {
+                    copySingleFile(entry, targetEntry);
+                }
+            }
+
+        }
+    }
+
+    /**
+     * Copy a single file from source to target.  If target exists it will be 
+     * overwritten.  If source does not exist, this will be a noop.
+     * 
+     * @param source  Source file to copy
+     * @param target  Destination file for copy
+     * @throws IOException
+     * @throws FileNotFoundException
+     */
+    private static void copySingleFile (File source, File target) throws IOException, FileNotFoundException {
+
+        File targetParent = target.getParentFile();
+        if (targetParent != null && ! targetParent.exists())
+            target.getParentFile().mkdirs();
+        
+                
+        InputStream in = new FileInputStream(source);
+        OutputStream out = new FileOutputStream(target);
+        byte[] buf = new byte[32 * 1024];
+        
+        for (;;) {
+            int read = in.read(buf);
+            if (read == -1)
+                break;
+            out.write(buf, 0, read);
+        }
+        in.close();
+        out.close();
+    }
+    
+
+
 }
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java
index cbdfe45e..82864cb1 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java
@@ -1289,6 +1289,46 @@ public static void assertEquivalentDataType(int expectedType, int type)
      
     }
     
+
+    /**
+     * Check consistency of all tables
+     * 
+     * @param conn
+     * @throws SQLException
+     */
+    protected void  checkAllConsistency(
+            Connection  conn)
+    throws SQLException
+    {
+        Statement s = createStatement();
+
+        ResultSet rs = 
+            s.executeQuery(
+                    "select schemaname, tablename, SYSCS_UTIL.SYSCS_CHECK_TABLE(schemaname, tablename) " + 
+            "from sys.systables a,  sys.sysschemas b where a.schemaid = b.schemaid");
+
+        int table_count = 0;
+
+        while (rs.next())
+        {
+            table_count++;
+
+            if (rs.getInt(3) != 1)
+            {
+                assertEquals("Bad return from consistency check of " +
+                        rs.getString(1) + "." + rs.getString(2),1,rs.getInt(3));
+
+            }
+        }
+        assertTrue("Something wrong with consistency check query, found only " +
+                table_count + " tables.",table_count >= 5);
+
+        rs.close();
+        s.close();
+
+        conn.commit();
+    }
+    
 } // End class BaseJDBCTestCase
 
 
