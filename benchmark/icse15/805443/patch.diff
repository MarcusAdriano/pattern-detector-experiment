diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java
index 42fe7b98..13000f3f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/JavaToSQLValueNode.java
@@ -21,6 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package	org.apache.derby.impl.sql.compile;
 
+import org.apache.derby.catalog.TypeDescriptor;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 import org.apache.derby.iapi.types.DataTypeDescriptor;
 import org.apache.derby.iapi.types.StringDataValue;
@@ -252,6 +253,13 @@ public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
 				javaNode.getJavaTypeName());
 		}
         
+        TypeDescriptor catalogType = dts.getCatalogType();
+
+        if ( catalogType.getTypeName().equals( "java.sql.ResultSet" ) )
+        {
+			throw StandardException.newException(SQLState.LANG_TABLE_FUNCTION_NOT_ALLOWED);
+        }
+        
         setType(dts);
 		
         // For functions returning string types we should set the collation to match the 
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index 5d45e722..cf8eb699 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -1092,6 +1092,7 @@ The message identifier (ie. the value that matches a field in this class)
     String LANG_XML_NOT_ALLOWED_DJRS                                = "42ZB3";
     String LANG_NOT_TABLE_FUNCTION                                  = "42ZB4";
     String LANG_NO_COSTING_CONSTRUCTOR                              = "42ZB5";
+    String LANG_TABLE_FUNCTION_NOT_ALLOWED                   = "42ZB6";
 
 	//following 3 matches the DB2 sql states
 	String LANG_DECLARED_GLOBAL_TEMP_TABLE_ONLY_IN_SESSION_SCHEMA = "428EK";
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
index 77bcc2f7..659c7143 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
@@ -925,6 +925,8 @@ public void tableFunctionTest()
         subqueryTest();
 
         coercionTest();
+
+        miscBugs();
     }
     
     /**
@@ -1619,6 +1621,51 @@ private void  coercionTest()
              );
     }
     
+    /**
+     * <p>
+     * Miscellaneous bugs.
+     * </p>
+     */
+    private void  miscBugs()
+        throws Exception
+    {
+        derby_4092();
+    }
+    
+    /**
+     * <p>
+     * Don't allow table functions to appear where scalar functions are expected.
+     * </p>
+     */
+    private void  derby_4092()
+        throws Exception
+    {
+        goodStatement
+            (
+             "create function derby_4092()\n" +
+             "returns TABLE\n" +
+             "  (\n" +
+             "     column0 varchar( 10 ),\n" +
+             "     column1 varchar( 10 )\n" +
+             "  )\n" +
+             "language java\n" +
+             "parameter style DERBY_JDBC_RESULT_SET\n" +
+             "no sql\n" +
+             "external name '" + getClass().getName() + ".returnsACoupleRows'\n"
+             );
+
+        expectError
+            (
+             "42ZB6",
+             "values( derby_4092() )"
+             );
+        expectError
+            (
+             "42ZB6",
+             "select derby_4092(), tablename from sys.systables"
+             );
+    }
+    
     /**
      * <p>
      * Make the input rows for the coercion function.
