diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java
index 7f4d0b12..d9747dd4 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/jdbc/TransactionResourceImpl.java
@@ -336,7 +336,12 @@ final SQLException handleException(Throwable thrownException,
 			// it was already removed.  all that's left to cleanup is
 			// JDBC objects.
 			if (cm!=null) {
-				boolean isShutdown = cleanupOnError(thrownException, database != null ? database.isActive() : false);
+			    //diagActive should be passed to cleanupOnError
+			    //only if a session is active, Login errors are a special case where
+			    // the database is active but the session is not.
+				boolean sessionActive = (database != null) && database.isActive() && 
+					!isLoginException(thrownException);
+				boolean isShutdown = cleanupOnError(thrownException, sessionActive);
 				if (checkForShutdown && isShutdown) {
 					// Change the error message to be a known shutdown.
 					thrownException = shutdownDatabaseException();
@@ -367,6 +372,25 @@ final SQLException handleException(Throwable thrownException,
 
 	}
 
+    /**
+     * Determine if the exception thrown is a login exception.
+     * Needed for DERBY-5427 fix to prevent inappropriate thread dumps
+     * and javacores. This exception is special because it is 
+     * SESSION_SEVERITY and database.isActive() is true, but the 
+     * session hasn't started yet,so it is not an actual crash and 
+     * should not report extended diagnostics.
+     * 
+     * @param thrownException
+     * @return true if this is a login failure exception
+     */
+    private boolean isLoginException(Throwable thrownException) {
+       if (thrownException instanceof StandardException) {
+           ((StandardException) thrownException).getSQLState().equals(SQLState.LOGIN_FAILED);
+           return true;
+       }
+       return false;
+    }
+    
     /**
      * Wrap a <code>Throwable</code> in an <code>SQLException</code>.
      *
diff --git a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java
index a35b5e29..17a9596f 100644
--- a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java
+++ b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/AuthenticationTest.java
@@ -172,8 +172,6 @@ private static void setBaseProps(
         Properties sysprops = new Properties();
         sysprops.put("derby.user.system", "admin");
         sysprops.put("derby.user.mickey", "mouse");
-        //Derby-4856,set the property to avoid thread dump and diagnostic info
-        sysprops.put("derby.stream.error.extendedDiagSeverityLevel","50000");
         test = DatabasePropertyTestSetup.builtinAuthentication(test,
             USERS, PASSWORD_SUFFIX);
         test = new DatabasePropertyTestSetup (test, props, true);
