diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 40e5256e..4031d496 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -880,14 +880,9 @@ public double getRecentWriteLatencyMicros()
         return writeStats.getRecentLatencyHistogramMicros();
     }
 
-    public ColumnFamily getColumnFamily(DecoratedKey key, QueryPath path, byte[] start, byte[] finish, List<byte[]> bitmasks, boolean reversed, int limit)
-    {
-        return getColumnFamily(QueryFilter.getSliceFilter(key, path, start, finish, bitmasks, reversed, limit));
-    }
-
     public ColumnFamily getColumnFamily(DecoratedKey key, QueryPath path, byte[] start, byte[] finish, boolean reversed, int limit)
     {
-        return getColumnFamily(QueryFilter.getSliceFilter(key, path, start, finish, null, reversed, limit));
+        return getColumnFamily(QueryFilter.getSliceFilter(key, path, start, finish, reversed, limit));
     }
 
     /**
@@ -1214,7 +1209,6 @@ private ColumnFamily getTopLevelColumns(QueryFilter filter, int gcBefore)
                                                                  new QueryPath(indexCFS.getColumnFamilyName()),
                                                                  startKey,
                                                                  ArrayUtils.EMPTY_BYTE_ARRAY,
-                                                                 null,
                                                                  false,
                                                                  clause.count);
             ColumnFamily indexRow = indexCFS.getColumnFamily(indexFilter);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnSerializer.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnSerializer.java
index c27a6dbc..24f9777a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnSerializer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnSerializer.java
@@ -65,7 +65,7 @@ public Column deserialize(DataInput dis) throws IOException
     {
         byte[] name = FBUtilities.readShortByteArray(dis);
         int b = dis.readUnsignedByte();
-        if (FBUtilities.testBitUsingBitMask(b, EXPIRATION_MASK))
+        if ((b & EXPIRATION_MASK) != 0)
         {
             int ttl = dis.readInt();
             int expiration = dis.readInt();
@@ -86,10 +86,10 @@ public Column deserialize(DataInput dis) throws IOException
         }
         else
         {
-            boolean delete = FBUtilities.testBitUsingBitMask(b, DELETION_MASK);
+            boolean delete = (b & DELETION_MASK) != 0;
             IClock clock = clockType.serializer().deserialize(dis);
             byte[] value = FBUtilities.readByteArray(dis);
-            if (FBUtilities.testBitUsingBitMask(b, DELETION_MASK)) {
+            if ((b & DELETION_MASK) != 0) {
                 return new DeletedColumn(name, value, clock);
             } else {
                 return new Column(name, value, clock);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/HintedHandOffManager.java b/cassandra/trunk/src/java/org/apache/cassandra/db/HintedHandOffManager.java
index 66eb89fb..726f0975 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/HintedHandOffManager.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/HintedHandOffManager.java
@@ -25,7 +25,6 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.TimeoutException;
 
-import org.apache.cassandra.db.IClock;
 import org.apache.commons.lang.ArrayUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -115,7 +114,7 @@ private static boolean sendMessage(InetAddress endpoint, String tableName, Strin
         byte[] startColumn = ArrayUtils.EMPTY_BYTE_ARRAY;
         while (true)
         {
-            QueryFilter filter = QueryFilter.getSliceFilter(dkey, new QueryPath(cfs.getColumnFamilyName()), startColumn, ArrayUtils.EMPTY_BYTE_ARRAY, null, false, PAGE_SIZE);
+            QueryFilter filter = QueryFilter.getSliceFilter(dkey, new QueryPath(cfs.getColumnFamilyName()), startColumn, ArrayUtils.EMPTY_BYTE_ARRAY, false, PAGE_SIZE);
             ColumnFamily cf = cfs.getColumnFamily(filter);
             if (pagingFinished(cf, startColumn))
                 break;
@@ -204,7 +203,7 @@ private void deliverHintsToEndpoint(InetAddress endpoint) throws IOException, Di
         delivery:
             while (true)
             {
-                QueryFilter filter = QueryFilter.getSliceFilter(epkey, new QueryPath(HINTS_CF), startColumn, ArrayUtils.EMPTY_BYTE_ARRAY, null, false, PAGE_SIZE);
+                QueryFilter filter = QueryFilter.getSliceFilter(epkey, new QueryPath(HINTS_CF), startColumn, ArrayUtils.EMPTY_BYTE_ARRAY, false, PAGE_SIZE);
                 ColumnFamily hintColumnFamily = ColumnFamilyStore.removeDeleted(hintStore.getColumnFamily(filter), Integer.MAX_VALUE);
                 if (pagingFinished(hintColumnFamily, startColumn))
                     break;
@@ -260,7 +259,7 @@ public static void renameHints(String oldTable, String newTable) throws IOExcept
         long now = System.currentTimeMillis();
         while (true)
         {
-            QueryFilter filter = QueryFilter.getSliceFilter(oldTableKey, new QueryPath(HINTS_CF), startCol, ArrayUtils.EMPTY_BYTE_ARRAY, null, false, PAGE_SIZE);
+            QueryFilter filter = QueryFilter.getSliceFilter(oldTableKey, new QueryPath(HINTS_CF), startCol, ArrayUtils.EMPTY_BYTE_ARRAY, false, PAGE_SIZE);
             ColumnFamily cf = ColumnFamilyStore.removeDeleted(hintStore.getColumnFamily(filter), Integer.MAX_VALUE);
             if (pagingFinished(cf, startCol))
                 break;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/SliceFromReadCommand.java b/cassandra/trunk/src/java/org/apache/cassandra/db/SliceFromReadCommand.java
index 62a229f5..6ac01430 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/SliceFromReadCommand.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/SliceFromReadCommand.java
@@ -26,7 +26,6 @@
 import org.apache.cassandra.db.filter.QueryPath;
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.thrift.ColumnParent;
-import org.apache.cassandra.utils.ByteArrayListSerializer;
 import org.apache.cassandra.utils.FBUtilities;
 
 public class SliceFromReadCommand extends ReadCommand
@@ -34,32 +33,25 @@
     public final byte[] start, finish;
     public final boolean reversed;
     public final int count;
-    public final List<byte[]> bitmasks;
 
     public SliceFromReadCommand(String table, byte[] key, ColumnParent column_parent, byte[] start, byte[] finish, boolean reversed, int count)
     {
-        this(table, key, new QueryPath(column_parent), start, finish, null, reversed, count);
+        this(table, key, new QueryPath(column_parent), start, finish, reversed, count);
     }
 
     public SliceFromReadCommand(String table, byte[] key, QueryPath path, byte[] start, byte[] finish, boolean reversed, int count)
-    {
-        this(table, key, path, start, finish, null, reversed, count);
-    }
-
-    public SliceFromReadCommand(String table, byte[] key, QueryPath path, byte[] start, byte[] finish, List<byte[]> bitmasks, boolean reversed, int count)
     {
         super(table, key, path, CMD_TYPE_GET_SLICE);
         this.start = start;
         this.finish = finish;
         this.reversed = reversed;
         this.count = count;
-        this.bitmasks = bitmasks;
     }
 
     @Override
     public ReadCommand copy()
     {
-        ReadCommand readCommand = new SliceFromReadCommand(table, key, queryPath, start, finish, bitmasks, reversed, count);
+        ReadCommand readCommand = new SliceFromReadCommand(table, key, queryPath, start, finish, reversed, count);
         readCommand.setDigestQuery(isDigestQuery());
         return readCommand;
     }
@@ -68,45 +60,22 @@ public ReadCommand copy()
     public Row getRow(Table table) throws IOException
     {
         DecoratedKey dk = StorageService.getPartitioner().decorateKey(key);
-        return table.getRow(QueryFilter.getSliceFilter(dk, queryPath, start, finish, bitmasks, reversed, count));
+        return table.getRow(QueryFilter.getSliceFilter(dk, queryPath, start, finish, reversed, count));
     }
 
     @Override
     public String toString()
     {
-        String bitmaskString = getBitmaskDescription(bitmasks);
-
         return "SliceFromReadCommand(" +
                "table='" + table + '\'' +
                ", key='" + FBUtilities.bytesToHex(key) + '\'' +
                ", column_parent='" + queryPath + '\'' +
                ", start='" + getComparator().getString(start) + '\'' +
                ", finish='" + getComparator().getString(finish) + '\'' +
-               ", bitmasks=" + bitmaskString +
                ", reversed=" + reversed +
                ", count=" + count +
                ')';
     }
-
-    public static String getBitmaskDescription(List<byte[]> masks)
-    {
-        StringBuffer bitmaskBuf = new StringBuffer("[");
-
-        if (masks != null)
-        {
-            bitmaskBuf.append(masks.size()).append(" bitmasks: ");
-            for (byte[] bitmask: masks)
-            {
-                for (byte b: bitmask)
-                {
-                    bitmaskBuf.append(String.format("0x%02x ", b));
-                }
-                bitmaskBuf.append("; ");
-            }
-        }
-        bitmaskBuf.append("]");
-        return bitmaskBuf.toString();
-    }
 }
 
 class SliceFromReadCommandSerializer extends ReadCommandSerializer
@@ -121,7 +90,6 @@ public void serialize(ReadCommand rm, DataOutputStream dos) throws IOException
         realRM.queryPath.serialize(dos);
         FBUtilities.writeShortByteArray(realRM.start, dos);
         FBUtilities.writeShortByteArray(realRM.finish, dos);
-        ByteArrayListSerializer.serialize(realRM.bitmasks, dos);
         dos.writeBoolean(realRM.reversed);
         dos.writeInt(realRM.count);
     }
@@ -135,7 +103,6 @@ public ReadCommand deserialize(DataInputStream dis) throws IOException
                                                            QueryPath.deserialize(dis),
                                                            FBUtilities.readShortByteArray(dis),
                                                            FBUtilities.readShortByteArray(dis),
-                                                           ByteArrayListSerializer.deserialize(dis),
                                                            dis.readBoolean(), 
                                                            dis.readInt());
         rm.setDigestQuery(isDigest);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java b/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java
index 3d8c40e4..d6b08409 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/SystemTable.java
@@ -340,7 +340,7 @@ public static void setBootstrapped(boolean isBootstrapped)
     public static ColumnFamily getDroppedCFs() throws IOException
     {
         ColumnFamilyStore cfs = Table.open(Table.SYSTEM_TABLE).getColumnFamilyStore(SystemTable.STATUS_CF);
-        return cfs.getColumnFamily(QueryFilter.getSliceFilter(decorate(GRAVEYARD_KEY), new QueryPath(STATUS_CF), "".getBytes(), "".getBytes(), null, false, 100));
+        return cfs.getColumnFamily(QueryFilter.getSliceFilter(decorate(GRAVEYARD_KEY), new QueryPath(STATUS_CF), "".getBytes(), "".getBytes(), false, 100));
     }
     
     public static void deleteDroppedCfMarkers(Collection<IColumn> cols) throws IOException
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java
index 7a6fda83..5bee7613 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/QueryFilter.java
@@ -152,16 +152,14 @@ public static boolean isRelevant(IColumn column, IColumnContainer container, int
     }
 
     /**
-     * @return a QueryFilter object to satisfy the given slice criteria:
-     * @param key the row to slice
+     * @return a QueryFilter object to satisfy the given slice criteria:  @param key the row to slice
      * @param path path to the level to slice at (CF or SuperColumn)
      * @param start column to start slice at, inclusive; empty for "the first column"
      * @param finish column to stop slice at, inclusive; empty for "the last column"
-     * @param bitmasks we should probably remove this
      * @param reversed true to start with the largest column (as determined by configured sort order) instead of smallest
      * @param limit maximum number of non-deleted columns to return
      */
-    public static QueryFilter getSliceFilter(DecoratedKey key, QueryPath path, byte[] start, byte[] finish, List<byte[]> bitmasks, boolean reversed, int limit)
+    public static QueryFilter getSliceFilter(DecoratedKey key, QueryPath path, byte[] start, byte[] finish, boolean reversed, int limit)
     {
         return new QueryFilter(key, path, new SliceQueryFilter(start, finish, reversed, limit));
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java
index dcfb7168..b1225bf6 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/Migration.java
@@ -318,7 +318,7 @@ public static Migration deserialize(byte[] bytes) throws IOException
         DecoratedKey dkey = StorageService.getPartitioner().decorateKey(MIGRATIONS_KEY);
         Table defs = Table.open(Table.SYSTEM_TABLE);
         ColumnFamilyStore cfStore = defs.getColumnFamilyStore(Migration.MIGRATIONS_CF);
-        QueryFilter filter = QueryFilter.getSliceFilter(dkey, new QueryPath(MIGRATIONS_CF), UUIDGen.decompose(start), UUIDGen.decompose(end), null, false, 1000);
+        QueryFilter filter = QueryFilter.getSliceFilter(dkey, new QueryPath(MIGRATIONS_CF), UUIDGen.decompose(start), UUIDGen.decompose(end), false, 1000);
         ColumnFamily cf = cfStore.getColumnFamily(filter);
         return cf.getSortedColumns();
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/utils/ByteArrayListSerializer.java b/cassandra/trunk/src/java/org/apache/cassandra/utils/ByteArrayListSerializer.java
index 59b45d28..e69de29b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/utils/ByteArrayListSerializer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/utils/ByteArrayListSerializer.java
@@ -1,86 +0,0 @@
-package org.apache.cassandra.utils;
-/*
- * 
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * 
- *   http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- * 
- */
-
-
-import java.io.DataInput;
-import java.io.DataOutput;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Serialize a list of byte[] objects.
- * This may be more appropriate inside FBUtilities.
- * @author tzlatanov
- *
- */
-public class ByteArrayListSerializer
-{
-    public static void serialize(List<byte[]> bitmasks, DataOutput dos)
-    {
-        try
-        {
-            if (bitmasks == null)
-            {
-                dos.writeInt(-1);
-            }
-            else
-            {
-                dos.writeInt(bitmasks.size());
-                for (byte[] bitmask: bitmasks)
-                {
-                    FBUtilities.writeByteArray(bitmask, dos);
-                }
-            }
-        }
-        catch (IOException e)
-        {
-            throw new RuntimeException(e);
-        }
-    }
-
-    public static List<byte[]> deserialize(DataInput dis) throws IOException
-    {
-        int size = dis.readInt();
-
-        if (-1 == size) return null;
-
-        List<byte[]> bitmasks = new ArrayList<byte[]>(size);
-
-        for (int i=0; i < size; i++)
-        {
-            int length = dis.readInt();
-            if (length < 0)
-            {
-                throw new IOException("Corrupt (negative) value length encountered");
-            }
-            byte[] value = new byte[length];
-            if (length > 0)
-            {
-                dis.readFully(value);
-            }
-            bitmasks.add(value);
-        }
-
-        return bitmasks;
-    }
-}
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java b/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
index 366b8884..a9409a2e 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/utils/FBUtilities.java
@@ -482,19 +482,6 @@ public static String decodeToUTF8(byte[] bytes) throws CharacterCodingException
         return Charsets.UTF_8.newDecoder().decode(ByteBuffer.wrap(bytes)).toString();
     }
 
-    /**
-     * Test if a particular bit is set using a bit mask.
-     *
-     * @param v the value in which a bit must be tested
-     * @param mask the bit mask use to select a bit of <code>v</code>
-     * @return true if the bit of <code>v</code> selected by <code>mask<code>
-     * is set, false otherwise.
-     */
-    public static boolean testBitUsingBitMask(int v, int mask)
-    {
-        return (v & mask) != 0;
-    }
-
     public static byte[] toByteArray(long n)
     {
         byte[] bytes = new byte[8];
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
index 8289acc7..5c45b5fa 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
@@ -33,7 +33,6 @@
 import org.apache.cassandra.Util;
 import org.apache.cassandra.db.columniterator.IdentityQueryFilter;
 import org.apache.cassandra.db.filter.*;
-import org.apache.cassandra.dht.AbstractBounds;
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.thrift.IndexClause;
 import org.apache.cassandra.thrift.IndexExpression;
@@ -94,7 +93,7 @@ public void testEmptyRow() throws Exception
         {
             public void runMayThrow() throws IOException
             {
-                QueryFilter sliceFilter = QueryFilter.getSliceFilter(Util.dk("key1"), new QueryPath("Standard2", null, null), ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, null, false, 1);
+                QueryFilter sliceFilter = QueryFilter.getSliceFilter(Util.dk("key1"), new QueryPath("Standard2", null, null), ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, false, 1);
                 ColumnFamily cf = store.getColumnFamily(sliceFilter);
                 assert cf.isMarkedForDelete();
                 assert cf.getColumnsMap().isEmpty();
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
index 4ef67b73..c5dc31d5 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
@@ -253,7 +253,7 @@ public void renameCf() throws ConfigurationException, IOException, ExecutionExce
         // do some reads.
         store = Table.open(oldCfm.tableName).getColumnFamilyStore(cfName);
         assert store != null;
-        ColumnFamily cfam = store.getColumnFamily(QueryFilter.getSliceFilter(dk, new QueryPath(cfName), "".getBytes(), "".getBytes(), null, false, 1000));
+        ColumnFamily cfam = store.getColumnFamily(QueryFilter.getSliceFilter(dk, new QueryPath(cfName), "".getBytes(), "".getBytes(), false, 1000));
         assert cfam.getSortedColumns().size() == 100; // should be good enough?
         
         // do some writes
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/ReadMessageTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/ReadMessageTest.java
index ac8905c1..0128a809 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/ReadMessageTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/ReadMessageTest.java
@@ -51,38 +51,21 @@ public void testMakeReadMessage() throws IOException
         rm2 = serializeAndDeserializeReadMessage(rm);
         assert rm2.toString().equals(rm.toString());
 
-        rm = new SliceFromReadCommand("Keyspace1", dk.key, new QueryPath("Standard1"), ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, new ArrayList<byte[]>(0), true, 2);
+        rm = new SliceFromReadCommand("Keyspace1", dk.key, new QueryPath("Standard1"), ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, true, 2);
         rm2 = serializeAndDeserializeReadMessage(rm);
         assert rm2.toString().equals(rm.toString());
         
-        rm = new SliceFromReadCommand("Keyspace1", dk.key, new QueryPath("Standard1"), "a".getBytes(), "z".getBytes(), new ArrayList<byte[]>(0), true, 5);
+        rm = new SliceFromReadCommand("Keyspace1", dk.key, new QueryPath("Standard1"), "a".getBytes(), "z".getBytes(), true, 5);
         rm2 = serializeAndDeserializeReadMessage(rm);
         assertEquals(rm2.toString(), rm.toString());
 
-        rm = new SliceFromReadCommand("Keyspace1", dk.key, new QueryPath("Standard1"), ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, null, true, 2);
+        rm = new SliceFromReadCommand("Keyspace1", dk.key, new QueryPath("Standard1"), ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, true, 2);
         rm2 = serializeAndDeserializeReadMessage(rm);
         assert rm2.toString().equals(rm.toString());
 
-        rm = new SliceFromReadCommand("Keyspace1", dk.key, new QueryPath("Standard1"), "a".getBytes(), "z".getBytes(), null, true, 5);
+        rm = new SliceFromReadCommand("Keyspace1", dk.key, new QueryPath("Standard1"), "a".getBytes(), "z".getBytes(), true, 5);
         rm2 = serializeAndDeserializeReadMessage(rm);
         assertEquals(rm2.toString(), rm.toString());
-
-        for (String[] bitmaskTests: new String[][] { {}, {"test one", "test two" }, { new String(new byte[] { 0, 1, 0x20, (byte) 0xff }) } })
-        {
-            ArrayList<byte[]> bitmasks = new ArrayList<byte[]>(bitmaskTests.length);
-            for (String bitmaskTest : bitmaskTests)
-            {
-                bitmasks.add(bitmaskTest.getBytes("UTF-8"));
-            }
-
-            rm = new SliceFromReadCommand("Keyspace1", dk.key, new QueryPath("Standard1"), ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, bitmasks, true, 2);
-            rm2 = serializeAndDeserializeReadMessage(rm);
-            assert rm2.toString().equals(rm.toString());
-
-            rm = new SliceFromReadCommand("Keyspace1", dk.key, new QueryPath("Standard1"), "a".getBytes(), "z".getBytes(), bitmasks, true, 5);
-            rm2 = serializeAndDeserializeReadMessage(rm);
-            assertEquals(rm2.toString(), rm.toString());
-        }
     }
 
     private ReadCommand serializeAndDeserializeReadMessage(ReadCommand rm) throws IOException
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java
index 212cdc32..7fbbf715 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java
@@ -22,12 +22,9 @@
 import java.text.NumberFormat;
 import java.util.*;
 import java.io.IOException;
-import java.io.UnsupportedEncodingException;
 
 import org.apache.cassandra.config.DatabaseDescriptor;
-import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.collections.Predicate;
-import org.apache.commons.collections.PredicateUtils;
+
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.lang.ArrayUtils;
 import org.junit.Test;
@@ -40,7 +37,6 @@
 import static org.apache.cassandra.Util.getBytes;
 import org.apache.cassandra.Util;
 import org.apache.cassandra.db.filter.QueryPath;
-import org.apache.cassandra.db.filter.SliceQueryFilter;
 import org.apache.cassandra.db.marshal.LongType;
 import org.apache.cassandra.io.sstable.IndexHelper;
 import org.apache.cassandra.io.sstable.SSTableReader;
@@ -81,7 +77,7 @@ public void runMayThrow() throws Exception
                 cf = cfStore.getColumnFamily(QueryFilter.getNamesFilter(TEST_KEY, new QueryPath("Standard3"), new TreeSet<byte[]>()));
                 assertColumns(cf);
 
-                cf = cfStore.getColumnFamily(QueryFilter.getSliceFilter(TEST_KEY, new QueryPath("Standard3"), ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, null, false, 0));
+                cf = cfStore.getColumnFamily(QueryFilter.getSliceFilter(TEST_KEY, new QueryPath("Standard3"), ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, false, 0));
                 assertColumns(cf);
 
                 cf = cfStore.getColumnFamily(QueryFilter.getNamesFilter(TEST_KEY, new QueryPath("Standard3"), "col99".getBytes()));
@@ -473,12 +469,10 @@ public static void assertColumns(ColumnFamily cf, String... columnNames)
         }
 
         assert Arrays.equals(la, columnNames1)
-                : String.format("Columns [%s(as string: %s)])] is not expected [%s] (bitmasks %s)",
+                : String.format("Columns [%s(as string: %s)])] is not expected [%s]",
                                 ((cf == null) ? "" : cf.getComparator().getColumnsString(columns)),
                                 lasb.toString(),
-                                StringUtils.join(columnNames1, ","),
-                                SliceFromReadCommand.getBitmaskDescription(null));
-
+                                StringUtils.join(columnNames1, ","));
     }
 
 }
