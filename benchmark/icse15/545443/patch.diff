diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java
index 9656a0d2..53bb6cf4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ConcatenationOperatorNode.java
@@ -125,9 +125,11 @@ public ValueNode bindExpression(FromList fromList,
 
 			leftOperand.setType(new DataTypeDescriptor(leftType, true));
 			if (rightOperand.getTypeId().isStringTypeId()) {
-				//collation of ? operand should be same as the compilation schema
-				leftOperand.setCollationUsingCompilationSchema(
-						StringDataValue.COLLATION_DERIVATION_IMPLICIT);
+				//collation of ? operand should be picked from the context
+				leftOperand.getTypeServices().setCollationDerivation(
+						rightOperand.getTypeServices().getCollationDerivation());
+				leftOperand.getTypeServices().setCollationType(
+						rightOperand.getTypeServices().getCollationType());
 			}
 		}
 
@@ -166,9 +168,11 @@ public ValueNode bindExpression(FromList fromList,
 			}
 			rightOperand.setType(new DataTypeDescriptor(rightType, true));
 			if (leftOperand.getTypeId().isStringTypeId()) {
-				//collation of ? operand should be same as the compilation schema
-				rightOperand.setCollationUsingCompilationSchema(
-						StringDataValue.COLLATION_DERIVATION_IMPLICIT);
+				//collation of ? operand should be picked from the context
+				rightOperand.getTypeServices().setCollationDerivation(
+						leftOperand.getTypeServices().getCollationDerivation());
+				rightOperand.getTypeServices().setCollationType(
+						leftOperand.getTypeServices().getCollationType());
 			}
 		}
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
index bf2a271f..867ac7df 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
@@ -716,6 +716,28 @@ private void commonTestingForTerritoryBasedDB(Statement s) throws SQLException{
     rs = ps.executeQuery();
     JDBC.assertFullResultSet(rs,new String[][] {{"SYSCOLUMNS"}});      
 
+    //Do parameter testing with CONCATENATION operator
+    //Following will fail because the result of concatenation will have 
+    //collation type of UCS_BASIC whereas the right hand side of = operator
+    //will have collation type current schema which is territory based.
+    //The reason CONCAT will have collation type of UCS_BASIC is because ? will
+    //take collation from context which here will be TABLENAME and hence the
+    //result of concatenation will have collation type of it's 2 operands,
+    //namely UCS_BASIC
+    checkPreparedStatementError(conn, "SELECT TABLENAME FROM SYS.SYSTABLES " +
+    		" WHERE TABLENAME || ? = 'SYSCOLUMNS '", "42818");   
+    //The query above can be made to work if we are in SYS schema or if we use
+    //CAST while we are trying to run the query is user schema
+    //Let's try CAST first
+    ps = conn.prepareStatement("SELECT TABLENAME FROM SYS.SYSTABLES WHERE " +
+    		" CAST(TABLENAME || ? AS CHAR(10)) = 'SYSCOLUMNS '");   
+    //try switching to SYS schema and then run the original query without CAST
+    s.executeUpdate("set schema SYS");
+    checkPreparedStatementError(conn, "SELECT TABLENAME FROM SYS.SYSTABLES " +
+    		" WHERE TABLENAME || ? = 'SYSCOLUMNS '", "42818");   
+    s.executeUpdate("set schema APP");
+
+    
     //Do parameter testing with COALESCE
     //following will pass because the ? inside the COALESCE will take the 
     //collation type of the other operand which is TABLENAME. The result of
