diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/math/ssvd/SequentialOutOfCoreSvdTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/math/ssvd/SequentialOutOfCoreSvdTest.java
index d4586a09..df37aea0 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/math/ssvd/SequentialOutOfCoreSvdTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/math/ssvd/SequentialOutOfCoreSvdTest.java
@@ -26,7 +26,6 @@
 import org.apache.mahout.math.RandomTrinaryMatrix;
 import org.apache.mahout.math.Vector;
 import org.apache.mahout.math.function.Functions;
-import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -49,19 +48,7 @@
   @Before
   public void setUp() throws Exception {
     super.setUp();
-    tmpDir = File.createTempFile("matrix", "");
-    assertTrue(tmpDir.delete());
-    assertTrue(tmpDir.mkdir());
-  }
-
-  @Override
-  @After
-  public void tearDown() throws Exception {
-    for (File f : tmpDir.listFiles()) {
-      assertTrue(f.delete());
-    }
-    assertTrue(tmpDir.delete());
-    super.tearDown();
+    tmpDir = getTestTempDir("matrix");
   }
 
   @Test
@@ -70,8 +57,8 @@ public void testSingularValues() throws IOException {
 
     List<File> partsOfA = Arrays.asList(tmpDir.listFiles(new FilenameFilter() {
       @Override
-      public boolean accept(File file, String s) {
-        return s.matches("A-.*");
+      public boolean accept(File file, String fileName) {
+        return fileName.matches("A-.*");
       }
     }));
     SequentialOutOfCoreSvd s = new SequentialOutOfCoreSvd(partsOfA, "U", "V", tmpDir, 100, 210);
@@ -79,21 +66,21 @@ public boolean accept(File file, String s) {
 
     Vector reference = new DenseVector(svd.getSingularValues()).viewPart(0, 6);
     Vector actual = s.getSingularValues().viewPart(0, 6);
-    assertEquals(0, reference.minus(actual).maxValue(), 1e-9);
+    assertEquals(0, reference.minus(actual).maxValue(), 1.0e-9);
 
     s.computeU(partsOfA, "U-", tmpDir);
     Matrix u = readBlockMatrix(Arrays.asList(tmpDir.listFiles(new FilenameFilter() {
       @Override
-      public boolean accept(File file, String s) {
-        return s.matches("U-.*");
+      public boolean accept(File file, String fileName) {
+        return fileName.matches("U-.*");
       }
     })));
 
     s.computeV(tmpDir, "V-", A.columnSize());
     Matrix v = readBlockMatrix(Arrays.asList(tmpDir.listFiles(new FilenameFilter() {
       @Override
-      public boolean accept(File file, String s) {
-        return s.matches("V-.*");
+      public boolean accept(File file, String fileName) {
+        return fileName.matches("V-.*");
       }
     })));
 
