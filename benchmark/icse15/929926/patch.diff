diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java
index a57a2a1b..4aa800a0 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/fpm/pfpgrowth/fpgrowth/FPGrowth.java
@@ -137,7 +137,7 @@ public int compare(Pair<A,Long> o1, Pair<A,Long> o2) {
    *          Number of top frequent patterns to keep
    * @param returnableFeatures
    *          set of features for which the frequent patterns are mined. If the
-   *          set is null, then top K patterns for every frequent item (an item
+   *          set is empty or null, then top K patterns for every frequent item (an item
    *          whose support> minSupport) is generated
    * @param output
    *          The output collector to which the the generated patterns are
@@ -179,7 +179,7 @@ public final void generateTopKFrequentPatterns(Iterator<Pair<List<A>,Long>> tran
     log.info("Number of unique items {}", frequencyList.size());
     
     Set<Integer> returnFeatures = new HashSet<Integer>();
-    if (returnableFeatures.isEmpty() == false) {
+    if (returnableFeatures != null && !returnableFeatures.isEmpty()) {
       for (A attrib : returnableFeatures) {
         if (attributeIdMapping.containsKey(attrib)) {
           returnFeatures.add(attributeIdMapping.get(attrib));
diff --git a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthTest.java b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthTest.java
index 1fc76e83..28b21603 100644
--- a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthTest.java
+++ b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/fpm/pfpgrowth/FPGrowthTest.java
@@ -30,6 +30,7 @@
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.io.SequenceFile;
 import org.apache.hadoop.io.Text;
+import org.apache.hadoop.mapred.OutputCollector;
 import org.apache.mahout.common.MahoutTestCase;
 import org.apache.mahout.common.Pair;
 import org.apache.mahout.fpm.pfpgrowth.convertors.ContextStatusUpdater;
@@ -84,4 +85,30 @@ public void testMaxHeapFPGrowth() throws IOException {
       frequentPatterns.toString());
 
   }
+
+  /**
+   * Trivial test for MAHOUT-355
+   */
+  public void testNoNullPointerExceptionWhenReturnableFeaturesIsNull() throws IOException {
+
+    FPGrowth<String> fp = new FPGrowth<String>();
+
+    Collection<Pair<List<String>,Long>> transactions = new ArrayList<Pair<List<String>,Long>>();
+    transactions.add(new Pair<List<String>,Long>(Arrays.asList("E", "A", "D", "B"), 1L));
+
+    OutputCollector<String, List<Pair<List<String>, Long>>> noOutput = new OutputCollector<String,List<Pair<List<String>,Long>>>() {
+      @Override
+      public void collect(String arg0, List<Pair<List<String>, Long>> arg1) { 
+      }
+    };
+
+    fp.generateTopKFrequentPatterns(
+        transactions.iterator(),
+        fp.generateFList(transactions.iterator(), 3),
+        3,
+        100,
+        null,
+        noOutput,
+        new ContextStatusUpdater(null));
+  }
 }
