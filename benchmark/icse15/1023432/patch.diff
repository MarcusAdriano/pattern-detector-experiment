diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/JsonMatrixAdapter.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/JsonMatrixAdapter.java
index d8f82af4..422c2115 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/JsonMatrixAdapter.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/JsonMatrixAdapter.java
@@ -17,7 +17,6 @@
 package org.apache.mahout.math;
 
 import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
 import com.google.gson.JsonDeserializationContext;
 import com.google.gson.JsonDeserializer;
 import com.google.gson.JsonElement;
@@ -36,33 +35,31 @@
 
   public JsonElement serialize(Matrix src, Type typeOfSrc,
                                JsonSerializationContext context) {
-    GsonBuilder builder = new GsonBuilder();
-    builder.registerTypeAdapter(Vector.class, new JsonVectorAdapter());
-    builder.registerTypeAdapter(Matrix.class, new JsonMatrixAdapter());
-    Gson gson = builder.create();
     JsonObject obj = new JsonObject();
     obj.add(CLASS, new JsonPrimitive(src.getClass().getName()));
-    obj.add(MATRIX, new JsonPrimitive(gson.toJson(src)));
+    obj.add(MATRIX, context.serialize(src));
     return obj;
   }
 
   public Matrix deserialize(JsonElement json, Type typeOfT,
                             JsonDeserializationContext context) {
-    GsonBuilder builder = new GsonBuilder();
-    builder.registerTypeAdapter(Vector.class, new JsonVectorAdapter());
-    builder.registerTypeAdapter(Matrix.class, new JsonMatrixAdapter());
-    Gson gson = builder.create();
     JsonObject obj = json.getAsJsonObject();
     String klass = obj.get(CLASS).getAsString();
-    String matrix = obj.get(MATRIX).getAsString();
     ClassLoader ccl = Thread.currentThread().getContextClassLoader();
-    Class<?> cl;
+    Class<? extends Matrix> cl;
     try {
-      cl = ccl.loadClass(klass);
+      cl = (Class<? extends Matrix>) ccl.loadClass(klass);
     } catch (ClassNotFoundException e) {
       throw new JsonParseException(e);
     }
-    return (Matrix) gson.fromJson(matrix, cl);
+
+    if (obj.get(MATRIX).isJsonPrimitive()) {
+      String matrix = obj.get(MATRIX).getAsString();
+      Gson gson = AbstractMatrix.gson();
+      return gson.fromJson(matrix, cl);
+    } else {
+      return context.deserialize(obj.get(MATRIX), cl);
+    }
   }
 
 }
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/MatrixView.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/MatrixView.java
index 84573c61..2073b9cb 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/MatrixView.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/MatrixView.java
@@ -33,12 +33,31 @@ private MatrixView() {
    *
    * @param matrix      an underlying Matrix
    * @param offset      the int[2] offset into the underlying matrix
-   * @param cardinality the int[2] cardinality of the view
+   * @param size        the int[2] size of the view
    */
-  public MatrixView(Matrix matrix, int[] offset, int[] cardinality) {
+  public MatrixView(Matrix matrix, int[] offset, int[] size) {
+    int rowOffset = offset[ROW];
+    if (rowOffset < 0) {
+      throw new IndexException(rowOffset, rowSize());
+    }
+
+    int rowsRequested = size[ROW];
+    if (rowOffset + rowsRequested > matrix.rowSize()) {
+      throw new IndexException(rowOffset + rowsRequested, matrix.rowSize());
+    }
+
+    int columnOffset = offset[COL];
+    if (columnOffset < 0) {
+      throw new IndexException(columnOffset, columnSize());
+    }
+
+    int columnsRequested = size[COL];
+    if (columnOffset + columnsRequested > matrix.columnSize()) {
+      throw new IndexException(columnOffset + columnsRequested, matrix.columnSize());
+    }
     this.matrix = matrix;
     this.offset = offset;
-    this.cardinality = Arrays.copyOf(cardinality, 2);
+    this.cardinality = Arrays.copyOf(size, 2);
   }
 
   @Override
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/MatrixTest.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/MatrixTest.java
index 2b84151a..f4517d6b 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/MatrixTest.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/MatrixTest.java
@@ -134,6 +134,8 @@ public void testViewPart() {
     int[] offset = {1, 1};
     int[] size = {2, 1};
     Matrix view = test.viewPart(offset, size);
+    assertEquals(2, view.rowSize());
+    assertEquals(1, view.columnSize());
     int[] c = view.size();
     for (int row = 0; row < c[ROW]; row++) {
       for (int col = 0; col < c[COL]; col++) {
