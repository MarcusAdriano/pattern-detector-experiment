diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/MessagingService.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/MessagingService.java
index 30b84714..497e7ca4 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/MessagingService.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/MessagingService.java
@@ -29,6 +29,7 @@
 import java.nio.channels.ServerSocketChannel;
 import java.security.MessageDigest;
 import java.util.*;
+import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -53,6 +54,7 @@
 import org.apache.cassandra.utils.GuidGenerator;
 import org.apache.cassandra.utils.SimpleCondition;
 import org.cliffc.high_scale_lib.NonBlockingHashMap;
+import org.cliffc.high_scale_lib.NonBlockingHashSet;
 
 public class MessagingService implements ILatencyPublisher
 {
@@ -65,7 +67,7 @@
 
     /* This records all the results mapped by message Id */
     private static ExpiringMap<String, IMessageCallback> callbacks;
-    private static Multimap<String, InetAddress> targets;
+    private static ConcurrentMap<String, Collection<InetAddress>> targets = new NonBlockingHashMap<String, Collection<InetAddress>>();
 
     /* Lookup table for registering message handlers based on the verb. */
     private static Map<StorageService.Verb, IVerbHandler> verbHandlers_;
@@ -109,7 +111,7 @@ protected MessagingService()
         {
             public Object apply(String messageId)
             {
-                Collection<InetAddress> addresses = targets.removeAll(messageId);
+                Collection<InetAddress> addresses = targets.remove(messageId);
                 if (addresses == null)
                     return null;
 
@@ -122,7 +124,6 @@ public Object apply(String messageId)
                 return null;
             }
         };
-        targets = ArrayListMultimap.create();
         callbacks = new ExpiringMap<String, IMessageCallback>((long) (1.1 * DatabaseDescriptor.getRpcTimeout()), timeoutReporter);
 
         defaultExecutor_ = new JMXEnabledThreadPoolExecutor("MISCELLANEOUS-POOL");
@@ -240,12 +241,33 @@ public String sendRR(Message message, InetAddress[] to, IAsyncCallback cb)
         addCallback(cb, messageId);
         for (InetAddress endpoint : to)
         {
-            targets.put(messageId, endpoint);
+            putTarget(messageId, endpoint);
             sendOneWay(message, endpoint);
         }
         return messageId;
     }
 
+    private static void putTarget(String messageId, InetAddress endpoint)
+    {
+        Collection<InetAddress> addresses = targets.get(messageId);
+        if (addresses == null)
+        {
+            addresses = new NonBlockingHashSet<InetAddress>();
+            Collection<InetAddress> oldAddresses = targets.putIfAbsent(messageId, addresses);
+            if (oldAddresses != null)
+                addresses = oldAddresses;
+        }
+        addresses.add(endpoint);
+    }
+
+    private static void removeTarget(String messageId, InetAddress from)
+    {
+        Collection<InetAddress> addresses = targets.get(messageId);
+        // null is expected if we removed the callback or we got a reply after its timeout expired
+        if (addresses != null)
+            addresses.remove(from);
+    }
+
     public void addCallback(IAsyncCallback cb, String messageId)
     {
         callbacks.put(messageId, cb);
@@ -265,7 +287,7 @@ public String sendRR(Message message, InetAddress to, IAsyncCallback cb)
     {        
         String messageId = message.getMessageId();
         addCallback(cb, messageId);
-        targets.put(messageId, to);
+        putTarget(messageId, to);
         sendOneWay(message, to);
         return messageId;
     }
@@ -294,7 +316,7 @@ public String sendRR(Message[] messages, InetAddress[] to, IAsyncCallback cb)
         for ( int i = 0; i < messages.length; ++i )
         {
             messages[i].setMessageId(groupId);
-            targets.put(groupId, to[i]);
+            putTarget(groupId, to[i]);
             sendOneWay(messages[i], to[i]);
         }
         return groupId;
@@ -348,7 +370,7 @@ public IAsyncResult sendRR(Message message, InetAddress to)
     {
         IAsyncResult iar = new AsyncResult();
         callbacks.put(message.getMessageId(), iar);
-        targets.put(message.getMessageId(), to);
+        putTarget(message.getMessageId(), to);
         sendOneWay(message, to);
         return iar;
     }
@@ -429,7 +451,7 @@ public static IMessageCallback getRegisteredCallback(String messageId)
     
     public static IMessageCallback removeRegisteredCallback(String messageId)
     {
-        targets.removeAll(messageId); // TODO fix this when we clean up quorum reads to do proper RR
+        targets.remove(messageId); // TODO fix this when we clean up quorum reads to do proper RR
         return callbacks.remove(messageId);
     }
 
@@ -440,7 +462,7 @@ public static long getRegisteredCallbackAge(String messageId)
 
     public static void responseReceivedFrom(String messageId, InetAddress from)
     {
-        targets.remove(messageId, from);
+        removeTarget(messageId, from);
     }
 
     public static void validateMagic(int magic) throws IOException
