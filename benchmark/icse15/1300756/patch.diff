diff --git a/lucene/dev/branches/branch_3x/lucene/core/src/java/org/apache/lucene/util/PagedBytes.java b/lucene/dev/branches/branch_3x/lucene/core/src/java/org/apache/lucene/util/PagedBytes.java
index cc1ff3f8..e8d70c35 100644
--- a/lucene/dev/branches/branch_3x/lucene/core/src/java/org/apache/lucene/util/PagedBytes.java
+++ b/lucene/dev/branches/branch_3x/lucene/core/src/java/org/apache/lucene/util/PagedBytes.java
@@ -207,12 +207,22 @@ public BytesRef fillSliceWithPrefix(BytesRef b, long start) {
       }
       assert length >= 0: "length=" + length;
       b.length = length;
-      // We always alloc a new block when writing w/ prefix;
-      // we could some day relax that and span two blocks:
-      assert blockSize - offset >= length;
+
+      // NOTE: even though copyUsingLengthPrefix always
+      // allocs a new block if the byte[] to be added won't
+      // fit in current block, callers can write their own
+      // prefix that may span two blocks:
+      if (blockSize - offset >= length) {
       // Within block
       b.offset = offset;
       b.bytes = blocks[index];
+      } else {
+        // Split
+        b.bytes = new byte[length];
+        b.offset = 0;
+        System.arraycopy(blocks[index], offset, b.bytes, 0, blockSize-offset);
+        System.arraycopy(blocks[1+index], 0, b.bytes, blockSize-offset, length-(blockSize-offset));
+      }
       return b;
     }
 
diff --git a/lucene/dev/branches/branch_3x/lucene/core/src/test/org/apache/lucene/util/TestPagedBytes.java b/lucene/dev/branches/branch_3x/lucene/core/src/test/org/apache/lucene/util/TestPagedBytes.java
index df8fa2f8..01d065e6 100644
--- a/lucene/dev/branches/branch_3x/lucene/core/src/test/org/apache/lucene/util/TestPagedBytes.java
+++ b/lucene/dev/branches/branch_3x/lucene/core/src/test/org/apache/lucene/util/TestPagedBytes.java
@@ -107,4 +107,27 @@ public void testLengthPrefix() throws Exception {
       }
     }
   }
+
+  // LUCENE-3841: even though
+  // copyUsingLengthPrefix will never span two blocks, make
+  // sure if caller writes their own prefix followed by the
+  // bytes, it still works:
+  public void testLengthPrefixAcrossTwoBlocks() throws Exception {
+    final PagedBytes p = new PagedBytes(10);
+    final DataOutput out = p.getDataOutput();
+    final byte[] bytes1 = new byte[1000];
+    random.nextBytes(bytes1);
+    out.writeBytes(bytes1, 0, bytes1.length);
+    out.writeByte((byte) 40);
+    final byte[] bytes2 = new byte[40];
+    random.nextBytes(bytes2);
+    out.writeBytes(bytes2, 0, bytes2.length);
+
+    final PagedBytes.Reader reader = p.freeze(random.nextBoolean());
+    BytesRef answer = reader.fillSliceWithPrefix(new BytesRef(), 1000);
+    assertEquals(40, answer.length);
+    for(int i=0;i<40;i++) {
+      assertEquals(bytes2[i], answer.bytes[answer.offset + i]);
+    }
+  }
 }
