diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/PrivilegedThreadOps.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/PrivilegedThreadOps.java
index e69de29b..6b88e504 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/PrivilegedThreadOps.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/util/PrivilegedThreadOps.java
@@ -0,0 +1,97 @@
+/*
+
+   Derby - Class org.apache.derby.iapi.util.PrivilegedThreadOps
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to you under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derby.iapi.util;
+
+import java.security.AccessController;
+import java.security.PrivilegedAction;
+import java.security.PrivilegedActionException;
+import java.security.PrivilegedExceptionAction;
+
+/**
+ * A collection of operations on {@link java.lang.Thread} that wraps the
+ * operations in privileged block of code.
+ * <p>
+ * Derby needs to use privileged blocks in some places to avoid
+ * {@link SecurityException}s being thrown, as the required privileges are
+ * often granted to Derby itself, but not the higher level application code.
+ * <p>
+ * Feel free to add new operations as they are needed. This class is not
+ * intended to implement the full set of operations defined by
+ * {@link java.lang.Thread}.
+ */
+
+public class PrivilegedThreadOps {
+
+    /**
+     * Sets the context ClassLoader for this Thread. The context ClassLoader 
+     * can be set when a thread is created, and allows the creator of the 
+     * thread to provide the appropriate class loader to code running in 
+     * the thread when loading classes 
+     * and resources.
+     * 
+     * First, if there is a security manager, its <code> checkPermission </code>
+     * method is called with a 
+     * <code> RuntimePermission("setContextClassLoader") </code> permission 
+     * to see if it's ok to set the context ClassLoader.. 
+     * @param t  Thread for which we are setting the context class loader
+     * @param cl the context class loader for t
+     */
+    public static void setContextClassLoader(final Thread t, final ClassLoader cl) {
+            AccessController.doPrivileged(
+                        new PrivilegedAction() {
+                            public Object run()  {
+                                t.setContextClassLoader(cl);
+                                return null;
+                            }
+                        });
+    }
+    
+    /**
+     * Set the thread's context class loader if privileged.  If not ignore 
+     * security exception and continue. 
+     * @param t  Thread for which we are setting the context class loader
+     * @param cl the context class loader for t
+     */
+    public static void setContextClassLoaderIfPrivileged(Thread t, ClassLoader cl) {
+        try {
+            setContextClassLoader(t,cl);
+        } catch (SecurityException se) {
+            // ignore security exception.  Earlier versions of Derby, before the 
+            // DERBY-3745 fix did not require setContextClassloader permissions.
+            // We may leak class loaders if we are not able to set this, but 
+            // cannot just fail.
+        }
+    }
+    
+    public static ClassLoader getContextClassLoader(final Thread t) {
+            return (ClassLoader)AccessController.doPrivileged(
+                        new PrivilegedAction() {
+                            public Object run()  {
+                                return t.getContextClassLoader();
+                            }
+                        });
+        
+    }
+    
+   
+       
+}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java
index 9aba9005..effad2c8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/jmx/JMXManagementService.java
@@ -41,6 +41,7 @@
 import org.apache.derby.iapi.services.monitor.ModuleControl;
 import org.apache.derby.iapi.services.monitor.Monitor;
 import org.apache.derby.iapi.services.property.PropertyUtil;
+import org.apache.derby.iapi.util.PrivilegedThreadOps;
 import org.apache.derby.mbeans.ManagementMBean;
 import org.apache.derby.mbeans.VersionMBean;
 import org.apache.derby.security.SystemPermission;
@@ -163,7 +164,24 @@ public synchronized void stop() {
      * can be enabled on the fly.
      */
     private synchronized void findServer() {
-        
+        //DERBY-3745 We want to avoid the timer leaking class loaders, so we make
+        // sure the context class loader is null before we start the MBean
+        // server which will create threads that we want to have a null context
+        // class loader
+        ClassLoader savecl = null;
+        boolean hasGetClassLoaderPerms=false;
+        try {
+            savecl = PrivilegedThreadOps.getContextClassLoader(Thread.currentThread());
+            hasGetClassLoaderPerms = true;
+        } catch (SecurityException se) {
+           // ignore security exception.  Earlier versions of Derby, before the 
+           // DERBY-3745 fix did not require getClassloader permissions.
+           // We may leak class loaders if we are not able to get this, but 
+           // cannot just fail.        
+        }
+        if (hasGetClassLoaderPerms)
+            PrivilegedThreadOps.setContextClassLoaderIfPrivileged(Thread.
+                          currentThread(), null);
         try {
             mbeanServer = AccessController
                     .doPrivileged(new PrivilegedAction<MBeanServer>() {
@@ -180,6 +198,9 @@ public MBeanServer run() {
             // them registered with JMX if someone else
             // starts the MBean server.
         }
+        if (hasGetClassLoaderPerms)
+            PrivilegedThreadOps.setContextClassLoaderIfPrivileged(Thread.currentThread(),
+                    savecl);
     }
 
     /**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
index c079155f..d67d772b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/BaseMonitor.java
@@ -56,6 +56,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.loader.InstanceGetter;
 import org.apache.derby.iapi.services.io.FormatableInstanceGetter;
 import org.apache.derby.iapi.error.ExceptionSeverity;
+import org.apache.derby.iapi.util.PrivilegedThreadOps;
 
 import  org.apache.derby.io.StorageFactory;
 
@@ -2078,8 +2079,30 @@ public ResourceBundle getBundle(String messageId) {
 	}
 
 	public Thread getDaemonThread(Runnable task, String name, boolean setMinPriority) {
+		// DERBY-3745 We want to avoid the thread leaking class loaders,
+		// so we make the context class loader null before we create the
+		// thread.
+		ClassLoader savecl = null;
+		boolean hasGetClassLoaderPerms = false;
+		try {
+			savecl = PrivilegedThreadOps.getContextClassLoader(Thread.currentThread());
+			hasGetClassLoaderPerms = true;
+		}  catch (SecurityException se) {
+			// ignore security exception. Earlier versions of Derby, before
+			// the DERBY-3745 fix did not require getClassLoader permissions.
+			// We may leak class loaders if we are not able to get the 
+			// class loader, but we cannot just fail.
+		}
+		if (hasGetClassLoaderPerms)
+			PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
+								 Thread.currentThread(), null);
 		Thread t =  new Thread(daemonGroup, task, "derby.".concat(name));
+		if (hasGetClassLoaderPerms)
+			PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
+							  Thread.currentThread(), savecl);
+
 		t.setDaemon(true);
+
 		if (setMinPriority) {
 			t.setPriority(Thread.MIN_PRIORITY);
 		}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java
index ff0ac8a6..c2b7cff5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/timer/SingletonTimerFactory.java
@@ -23,7 +23,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.services.timer.TimerFactory;
 import org.apache.derby.iapi.services.monitor.ModuleControl;
-
+import org.apache.derby.iapi.util.PrivilegedThreadOps;
 import org.apache.derby.iapi.error.StandardException;
 
 import java.util.Timer;
@@ -61,7 +61,28 @@ public SingletonTimerFactory()
          * a) We avoid synchronizing access to singletonTimer later
          * b) We don't need any properties
          */
+         // DERBY-3745 We want to avoid leaking class loaders, so 
+         // we make sure the context class loader is null before
+         // creating the thread
+        ClassLoader savecl = null;
+        boolean hasGetClassLoaderPerms = false;
+        try {
+            savecl = PrivilegedThreadOps.getContextClassLoader(
+                    Thread.currentThread());
+            hasGetClassLoaderPerms = true;
+        } catch (SecurityException se) {
+            // Ignore security exception. Versions of Derby before
+            // the DERBY-3745 fix did not require getClassLoader 
+            // privs.  We may leak class loaders if we are not
+            // able to do this but we can't just fail.
+        }
+        if (hasGetClassLoaderPerms)
+            PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
+                    Thread.currentThread(), null);
         singletonTimer = new Timer(true); // Run as daemon
+        if (hasGetClassLoaderPerms)
+            PrivilegedThreadOps.setContextClassLoaderIfPrivileged(
+                    Thread.currentThread(), savecl);
     }
 
     /**
