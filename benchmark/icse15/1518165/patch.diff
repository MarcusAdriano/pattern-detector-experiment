diff --git a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor.java b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor.java
index 0f7824a3..9dd7070e 100644
--- a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor.java
+++ b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor.java
@@ -72,8 +72,6 @@
   private String requestHandler;// 'qt' param
   private int timeout = TIMEOUT_SECS;
   
-  private boolean initDone = false;
-
   /**
    * Factory method that returns a {@link HttpClient} instance used for interfacing with a source Solr service.
    * One can override this method to return a differently configured {@link HttpClient} instance.
@@ -122,19 +120,7 @@ protected void firstInit(Context context) {
    * external synchronization. 
    */
   private void buildIterator() {
-    if (rowIterator == null) {
-      // We could use an AtomicBoolean but there's no need since this method
-      // would require anyway external synchronization
-      if (!initDone) {
-        initDone = true;
-        SolrDocumentList solrDocumentList = doQuery(0);
-        if (solrDocumentList != null) {
-          rowIterator = new SolrDocumentListIterator(solrDocumentList);
-        }
-      }
-      return;
-    }
-    
+    if (rowIterator != null)  {
     SolrDocumentListIterator documentListIterator = (SolrDocumentListIterator) rowIterator;
     if (!documentListIterator.hasNext() && documentListIterator.hasMoreRows()) {
       SolrDocumentList solrDocumentList = doQuery(documentListIterator
@@ -143,7 +129,13 @@ private void buildIterator() {
         rowIterator = new SolrDocumentListIterator(solrDocumentList);
       }
     }
-    
+    } else  {
+      SolrDocumentList solrDocumentList = doQuery(0);
+      if (solrDocumentList != null) {
+        rowIterator = new SolrDocumentListIterator(solrDocumentList);
+      }
+      return;
+    }
   }
   
   protected SolrDocumentList doQuery(int start) {
diff --git a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java
index c13cca2e..df8b2e1f 100644
--- a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java
+++ b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java
@@ -202,8 +202,19 @@ public void testFullImportInnerEntity() {
     assertQ(req("*:*"), "//result[@numFound='0']");
     
     try {
-      MockDataSource.setIterator("select * from x", DB_DOCS.iterator());
-      addDocumentsToSolr(SOLR_DOCS);
+      List<Map<String,Object>> DOCS = new ArrayList<Map<String,Object>>(DB_DOCS);
+      Map<String, Object> doc = new HashMap<String, Object>();
+      doc.put("dbid_s", "2");
+      doc.put("dbdesc_s", "DbDescription2");
+      DOCS.add(doc);
+      MockDataSource.setIterator("select * from x", DOCS.iterator());
+
+      DOCS = new ArrayList<Map<String,Object>>(SOLR_DOCS);
+      Map<String,Object> solrDoc = new HashMap<String,Object>();
+      solrDoc.put("id", "2");
+      solrDoc.put("desc", "SolrDescription2");
+      DOCS.add(solrDoc);
+      addDocumentsToSolr(DOCS);
       runFullImport(getDihConfigTagsInnerEntity());
     } catch (Exception e) {
       LOG.error(e.getMessage(), e);
@@ -212,12 +223,15 @@ public void testFullImportInnerEntity() {
       MockDataSource.clearCache();
     }
     
-    assertQ(req("*:*"), "//result[@numFound='1']");
+    assertQ(req("*:*"), "//result[@numFound='2']");
     assertQ(req("id:1"), "//result/doc/str[@name='id'][.='1']",
         "//result/doc/str[@name='dbdesc_s'][.='DbDescription']",
         "//result/doc/str[@name='dbid_s'][.='1']",
         "//result/doc/arr[@name='desc'][.='SolrDescription']");
-    
+    assertQ(req("id:2"), "//result/doc/str[@name='id'][.='2']",
+        "//result/doc/str[@name='dbdesc_s'][.='DbDescription2']",
+        "//result/doc/str[@name='dbid_s'][.='2']",
+        "//result/doc/arr[@name='desc'][.='SolrDescription2']");
   }
   
   public void testFullImportWrongSolrUrl() {
