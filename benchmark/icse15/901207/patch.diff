diff --git a/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/Cassandra.java b/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/Cassandra.java
index 3a4a0659..023eac57 100644
--- a/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/Cassandra.java
+++ b/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/Cassandra.java
@@ -85,18 +85,6 @@
      */
     public int get_count(String keyspace, String key, ColumnParent column_parent, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException;
 
-    /**
-     * @deprecated; use get_range_slice instead
-     * 
-     * @param keyspace
-     * @param column_family
-     * @param start
-     * @param finish
-     * @param count
-     * @param consistency_level
-     */
-    public List<String> get_key_range(String keyspace, String column_family, String start, String finish, int count, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException;
-
     /**
      * returns a subset of columns for a range of keys.
      * 
@@ -468,53 +456,6 @@ public int recv_get_count() throws InvalidRequestException, UnavailableException
       throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_count failed: unknown result");
     }
 
-    public List<String> get_key_range(String keyspace, String column_family, String start, String finish, int count, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
-    {
-      send_get_key_range(keyspace, column_family, start, finish, count, consistency_level);
-      return recv_get_key_range();
-    }
-
-    public void send_get_key_range(String keyspace, String column_family, String start, String finish, int count, ConsistencyLevel consistency_level) throws TException
-    {
-      oprot_.writeMessageBegin(new TMessage("get_key_range", TMessageType.CALL, seqid_));
-      get_key_range_args args = new get_key_range_args();
-      args.keyspace = keyspace;
-      args.column_family = column_family;
-      args.start = start;
-      args.finish = finish;
-      args.count = count;
-      args.consistency_level = consistency_level;
-      args.write(oprot_);
-      oprot_.writeMessageEnd();
-      oprot_.getTransport().flush();
-    }
-
-    public List<String> recv_get_key_range() throws InvalidRequestException, UnavailableException, TimedOutException, TException
-    {
-      TMessage msg = iprot_.readMessageBegin();
-      if (msg.type == TMessageType.EXCEPTION) {
-        TApplicationException x = TApplicationException.read(iprot_);
-        iprot_.readMessageEnd();
-        throw x;
-      }
-      get_key_range_result result = new get_key_range_result();
-      result.read(iprot_);
-      iprot_.readMessageEnd();
-      if (result.isSetSuccess()) {
-        return result.success;
-      }
-      if (result.ire != null) {
-        throw result.ire;
-      }
-      if (result.ue != null) {
-        throw result.ue;
-      }
-      if (result.te != null) {
-        throw result.te;
-      }
-      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_key_range failed: unknown result");
-    }
-
     public List<KeySlice> get_range_slice(String keyspace, ColumnParent column_parent, SlicePredicate predicate, String start_key, String finish_key, int row_count, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
     {
       send_get_range_slice(keyspace, column_parent, predicate, start_key, finish_key, row_count, consistency_level);
@@ -847,7 +788,6 @@ public Processor(Iface iface)
       processMap_.put("multiget", new multiget());
       processMap_.put("multiget_slice", new multiget_slice());
       processMap_.put("get_count", new get_count());
-      processMap_.put("get_key_range", new get_key_range());
       processMap_.put("get_range_slice", new get_range_slice());
       processMap_.put("insert", new insert());
       processMap_.put("batch_insert", new batch_insert());
@@ -1076,38 +1016,6 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
 
     }
 
-    private class get_key_range implements ProcessFunction {
-      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
-      {
-        get_key_range_args args = new get_key_range_args();
-        args.read(iprot);
-        iprot.readMessageEnd();
-        get_key_range_result result = new get_key_range_result();
-        try {
-          result.success = iface_.get_key_range(args.keyspace, args.column_family, args.start, args.finish, args.count, args.consistency_level);
-        } catch (InvalidRequestException ire) {
-          result.ire = ire;
-        } catch (UnavailableException ue) {
-          result.ue = ue;
-        } catch (TimedOutException te) {
-          result.te = te;
-        } catch (Throwable th) {
-          LOGGER.error("Internal error processing get_key_range", th);
-          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing get_key_range");
-          oprot.writeMessageBegin(new TMessage("get_key_range", TMessageType.EXCEPTION, seqid));
-          x.write(oprot);
-          oprot.writeMessageEnd();
-          oprot.getTransport().flush();
-          return;
-        }
-        oprot.writeMessageBegin(new TMessage("get_key_range", TMessageType.REPLY, seqid));
-        result.write(oprot);
-        oprot.writeMessageEnd();
-        oprot.getTransport().flush();
-      }
-
-    }
-
     private class get_range_slice implements ProcessFunction {
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
@@ -6986,1250 +6894,75 @@ public get_count_args clone() {
     }
 
     public String getKeyspace() {
-      return this.keyspace;
-    }
-
-    public get_count_args setKeyspace(String keyspace) {
-      this.keyspace = keyspace;
-      return this;
-    }
-
-    public void unsetKeyspace() {
-      this.keyspace = null;
-    }
-
-    /** Returns true if field keyspace is set (has been asigned a value) and false otherwise */
-    public boolean isSetKeyspace() {
-      return this.keyspace != null;
-    }
-
-    public void setKeyspaceIsSet(boolean value) {
-      if (!value) {
-        this.keyspace = null;
-      }
-    }
-
-    public String getKey() {
-      return this.key;
-    }
-
-    public get_count_args setKey(String key) {
-      this.key = key;
-      return this;
-    }
-
-    public void unsetKey() {
-      this.key = null;
-    }
-
-    /** Returns true if field key is set (has been asigned a value) and false otherwise */
-    public boolean isSetKey() {
-      return this.key != null;
-    }
-
-    public void setKeyIsSet(boolean value) {
-      if (!value) {
-        this.key = null;
-      }
-    }
-
-    public ColumnParent getColumn_parent() {
-      return this.column_parent;
-    }
-
-    public get_count_args setColumn_parent(ColumnParent column_parent) {
-      this.column_parent = column_parent;
-      return this;
-    }
-
-    public void unsetColumn_parent() {
-      this.column_parent = null;
-    }
-
-    /** Returns true if field column_parent is set (has been asigned a value) and false otherwise */
-    public boolean isSetColumn_parent() {
-      return this.column_parent != null;
-    }
-
-    public void setColumn_parentIsSet(boolean value) {
-      if (!value) {
-        this.column_parent = null;
-      }
-    }
-
-    /**
-     * 
-     * @see ConsistencyLevel
-     */
-    public ConsistencyLevel getConsistency_level() {
-      return this.consistency_level;
-    }
-
-    /**
-     * 
-     * @see ConsistencyLevel
-     */
-    public get_count_args setConsistency_level(ConsistencyLevel consistency_level) {
-      this.consistency_level = consistency_level;
-      return this;
-    }
-
-    public void unsetConsistency_level() {
-      this.consistency_level = null;
-    }
-
-    /** Returns true if field consistency_level is set (has been asigned a value) and false otherwise */
-    public boolean isSetConsistency_level() {
-      return this.consistency_level != null;
-    }
-
-    public void setConsistency_levelIsSet(boolean value) {
-      if (!value) {
-        this.consistency_level = null;
-      }
-    }
-
-    public void setFieldValue(_Fields field, Object value) {
-      switch (field) {
-      case KEYSPACE:
-        if (value == null) {
-          unsetKeyspace();
-        } else {
-          setKeyspace((String)value);
-        }
-        break;
-
-      case KEY:
-        if (value == null) {
-          unsetKey();
-        } else {
-          setKey((String)value);
-        }
-        break;
-
-      case COLUMN_PARENT:
-        if (value == null) {
-          unsetColumn_parent();
-        } else {
-          setColumn_parent((ColumnParent)value);
-        }
-        break;
-
-      case CONSISTENCY_LEVEL:
-        if (value == null) {
-          unsetConsistency_level();
-        } else {
-          setConsistency_level((ConsistencyLevel)value);
-        }
-        break;
-
-      }
-    }
-
-    public void setFieldValue(int fieldID, Object value) {
-      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
-    }
-
-    public Object getFieldValue(_Fields field) {
-      switch (field) {
-      case KEYSPACE:
-        return getKeyspace();
-
-      case KEY:
-        return getKey();
-
-      case COLUMN_PARENT:
-        return getColumn_parent();
-
-      case CONSISTENCY_LEVEL:
-        return getConsistency_level();
-
-      }
-      throw new IllegalStateException();
-    }
-
-    public Object getFieldValue(int fieldId) {
-      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
-    }
-
-    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
-    public boolean isSet(_Fields field) {
-      switch (field) {
-      case KEYSPACE:
-        return isSetKeyspace();
-      case KEY:
-        return isSetKey();
-      case COLUMN_PARENT:
-        return isSetColumn_parent();
-      case CONSISTENCY_LEVEL:
-        return isSetConsistency_level();
-      }
-      throw new IllegalStateException();
-    }
-
-    public boolean isSet(int fieldID) {
-      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
-    }
-
-    @Override
-    public boolean equals(Object that) {
-      if (that == null)
-        return false;
-      if (that instanceof get_count_args)
-        return this.equals((get_count_args)that);
-      return false;
-    }
-
-    public boolean equals(get_count_args that) {
-      if (that == null)
-        return false;
-
-      boolean this_present_keyspace = true && this.isSetKeyspace();
-      boolean that_present_keyspace = true && that.isSetKeyspace();
-      if (this_present_keyspace || that_present_keyspace) {
-        if (!(this_present_keyspace && that_present_keyspace))
-          return false;
-        if (!this.keyspace.equals(that.keyspace))
-          return false;
-      }
-
-      boolean this_present_key = true && this.isSetKey();
-      boolean that_present_key = true && that.isSetKey();
-      if (this_present_key || that_present_key) {
-        if (!(this_present_key && that_present_key))
-          return false;
-        if (!this.key.equals(that.key))
-          return false;
-      }
-
-      boolean this_present_column_parent = true && this.isSetColumn_parent();
-      boolean that_present_column_parent = true && that.isSetColumn_parent();
-      if (this_present_column_parent || that_present_column_parent) {
-        if (!(this_present_column_parent && that_present_column_parent))
-          return false;
-        if (!this.column_parent.equals(that.column_parent))
-          return false;
-      }
-
-      boolean this_present_consistency_level = true && this.isSetConsistency_level();
-      boolean that_present_consistency_level = true && that.isSetConsistency_level();
-      if (this_present_consistency_level || that_present_consistency_level) {
-        if (!(this_present_consistency_level && that_present_consistency_level))
-          return false;
-        if (!this.consistency_level.equals(that.consistency_level))
-          return false;
-      }
-
-      return true;
-    }
-
-    @Override
-    public int hashCode() {
-      return 0;
-    }
-
-    public int compareTo(get_count_args other) {
-      if (!getClass().equals(other.getClass())) {
-        return getClass().getName().compareTo(other.getClass().getName());
-      }
-
-      int lastComparison = 0;
-      get_count_args typedOther = (get_count_args)other;
-
-      lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(isSetKeyspace());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      lastComparison = TBaseHelper.compareTo(keyspace, typedOther.keyspace);
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      lastComparison = Boolean.valueOf(isSetKey()).compareTo(isSetKey());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      lastComparison = TBaseHelper.compareTo(key, typedOther.key);
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      lastComparison = Boolean.valueOf(isSetColumn_parent()).compareTo(isSetColumn_parent());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      lastComparison = TBaseHelper.compareTo(column_parent, typedOther.column_parent);
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(isSetConsistency_level());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      lastComparison = TBaseHelper.compareTo(consistency_level, typedOther.consistency_level);
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      return 0;
-    }
-
-    public void read(TProtocol iprot) throws TException {
-      TField field;
-      iprot.readStructBegin();
-      while (true)
-      {
-        field = iprot.readFieldBegin();
-        if (field.type == TType.STOP) { 
-          break;
-        }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case KEYSPACE:
-              if (field.type == TType.STRING) {
-                this.keyspace = iprot.readString();
-              } else { 
-                TProtocolUtil.skip(iprot, field.type);
-              }
-              break;
-            case KEY:
-              if (field.type == TType.STRING) {
-                this.key = iprot.readString();
-              } else { 
-                TProtocolUtil.skip(iprot, field.type);
-              }
-              break;
-            case COLUMN_PARENT:
-              if (field.type == TType.STRUCT) {
-                this.column_parent = new ColumnParent();
-                this.column_parent.read(iprot);
-              } else { 
-                TProtocolUtil.skip(iprot, field.type);
-              }
-              break;
-            case CONSISTENCY_LEVEL:
-              if (field.type == TType.I32) {
-                this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
-              } else { 
-                TProtocolUtil.skip(iprot, field.type);
-              }
-              break;
-          }
-          iprot.readFieldEnd();
-        }
-      }
-      iprot.readStructEnd();
-
-      // check for required fields of primitive type, which can't be checked in the validate method
-      validate();
-    }
-
-    public void write(TProtocol oprot) throws TException {
-      validate();
-
-      oprot.writeStructBegin(STRUCT_DESC);
-      if (this.keyspace != null) {
-        oprot.writeFieldBegin(KEYSPACE_FIELD_DESC);
-        oprot.writeString(this.keyspace);
-        oprot.writeFieldEnd();
-      }
-      if (this.key != null) {
-        oprot.writeFieldBegin(KEY_FIELD_DESC);
-        oprot.writeString(this.key);
-        oprot.writeFieldEnd();
-      }
-      if (this.column_parent != null) {
-        oprot.writeFieldBegin(COLUMN_PARENT_FIELD_DESC);
-        this.column_parent.write(oprot);
-        oprot.writeFieldEnd();
-      }
-      if (this.consistency_level != null) {
-        oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
-        oprot.writeI32(this.consistency_level.getValue());
-        oprot.writeFieldEnd();
-      }
-      oprot.writeFieldStop();
-      oprot.writeStructEnd();
-    }
-
-    @Override
-    public String toString() {
-      StringBuilder sb = new StringBuilder("get_count_args(");
-      boolean first = true;
-
-      sb.append("keyspace:");
-      if (this.keyspace == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.keyspace);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("key:");
-      if (this.key == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.key);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("column_parent:");
-      if (this.column_parent == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.column_parent);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("consistency_level:");
-      if (this.consistency_level == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.consistency_level);
-      }
-      first = false;
-      sb.append(")");
-      return sb.toString();
-    }
-
-    public void validate() throws TException {
-      // check for required fields
-      if (keyspace == null) {
-        throw new TProtocolException("Required field 'keyspace' was not present! Struct: " + toString());
-      }
-      if (key == null) {
-        throw new TProtocolException("Required field 'key' was not present! Struct: " + toString());
-      }
-      if (column_parent == null) {
-        throw new TProtocolException("Required field 'column_parent' was not present! Struct: " + toString());
-      }
-      if (consistency_level == null) {
-        throw new TProtocolException("Required field 'consistency_level' was not present! Struct: " + toString());
-      }
-    }
-
-  }
-
-  public static class get_count_result implements TBase<get_count_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_count_result>   {
-    private static final TStruct STRUCT_DESC = new TStruct("get_count_result");
-
-    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
-    private static final TField IRE_FIELD_DESC = new TField("ire", TType.STRUCT, (short)1);
-    private static final TField UE_FIELD_DESC = new TField("ue", TType.STRUCT, (short)2);
-    private static final TField TE_FIELD_DESC = new TField("te", TType.STRUCT, (short)3);
-
-    public int success;
-    public InvalidRequestException ire;
-    public UnavailableException ue;
-    public TimedOutException te;
-
-    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
-    public enum _Fields implements TFieldIdEnum {
-      SUCCESS((short)0, "success"),
-      IRE((short)1, "ire"),
-      UE((short)2, "ue"),
-      TE((short)3, "te");
-
-      private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
-      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
-
-      static {
-        for (_Fields field : EnumSet.allOf(_Fields.class)) {
-          byId.put((int)field._thriftId, field);
-          byName.put(field.getFieldName(), field);
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, or null if its not found.
-       */
-      public static _Fields findByThriftId(int fieldId) {
-        return byId.get(fieldId);
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, throwing an exception
-       * if it is not found.
-       */
-      public static _Fields findByThriftIdOrThrow(int fieldId) {
-        _Fields fields = findByThriftId(fieldId);
-        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
-        return fields;
-      }
-
-      /**
-       * Find the _Fields constant that matches name, or null if its not found.
-       */
-      public static _Fields findByName(String name) {
-        return byName.get(name);
-      }
-
-      private final short _thriftId;
-      private final String _fieldName;
-
-      _Fields(short thriftId, String fieldName) {
-        _thriftId = thriftId;
-        _fieldName = fieldName;
-      }
-
-      public short getThriftFieldId() {
-        return _thriftId;
-      }
-
-      public String getFieldName() {
-        return _fieldName;
-      }
-    }
-
-    // isset id assignments
-    private static final int __SUCCESS_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
-
-    public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
-      put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.I32)));
-      put(_Fields.IRE, new FieldMetaData("ire", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.STRUCT)));
-      put(_Fields.UE, new FieldMetaData("ue", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.STRUCT)));
-      put(_Fields.TE, new FieldMetaData("te", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.STRUCT)));
-    }});
-
-    static {
-      FieldMetaData.addStructMetaDataMap(get_count_result.class, metaDataMap);
-    }
-
-    public get_count_result() {
-    }
-
-    public get_count_result(
-      int success,
-      InvalidRequestException ire,
-      UnavailableException ue,
-      TimedOutException te)
-    {
-      this();
-      this.success = success;
-      setSuccessIsSet(true);
-      this.ire = ire;
-      this.ue = ue;
-      this.te = te;
-    }
-
-    /**
-     * Performs a deep copy on <i>other</i>.
-     */
-    public get_count_result(get_count_result other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
-      this.success = other.success;
-      if (other.isSetIre()) {
-        this.ire = new InvalidRequestException(other.ire);
-      }
-      if (other.isSetUe()) {
-        this.ue = new UnavailableException(other.ue);
-      }
-      if (other.isSetTe()) {
-        this.te = new TimedOutException(other.te);
-      }
-    }
-
-    public get_count_result deepCopy() {
-      return new get_count_result(this);
-    }
-
-    @Deprecated
-    public get_count_result clone() {
-      return new get_count_result(this);
-    }
-
-    public int getSuccess() {
-      return this.success;
-    }
-
-    public get_count_result setSuccess(int success) {
-      this.success = success;
-      setSuccessIsSet(true);
-      return this;
-    }
-
-    public void unsetSuccess() {
-      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
-    }
-
-    /** Returns true if field success is set (has been asigned a value) and false otherwise */
-    public boolean isSetSuccess() {
-      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
-    }
-
-    public void setSuccessIsSet(boolean value) {
-      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
-    }
-
-    public InvalidRequestException getIre() {
-      return this.ire;
-    }
-
-    public get_count_result setIre(InvalidRequestException ire) {
-      this.ire = ire;
-      return this;
-    }
-
-    public void unsetIre() {
-      this.ire = null;
-    }
-
-    /** Returns true if field ire is set (has been asigned a value) and false otherwise */
-    public boolean isSetIre() {
-      return this.ire != null;
-    }
-
-    public void setIreIsSet(boolean value) {
-      if (!value) {
-        this.ire = null;
-      }
-    }
-
-    public UnavailableException getUe() {
-      return this.ue;
-    }
-
-    public get_count_result setUe(UnavailableException ue) {
-      this.ue = ue;
-      return this;
-    }
-
-    public void unsetUe() {
-      this.ue = null;
-    }
-
-    /** Returns true if field ue is set (has been asigned a value) and false otherwise */
-    public boolean isSetUe() {
-      return this.ue != null;
-    }
-
-    public void setUeIsSet(boolean value) {
-      if (!value) {
-        this.ue = null;
-      }
-    }
-
-    public TimedOutException getTe() {
-      return this.te;
-    }
-
-    public get_count_result setTe(TimedOutException te) {
-      this.te = te;
-      return this;
-    }
-
-    public void unsetTe() {
-      this.te = null;
-    }
-
-    /** Returns true if field te is set (has been asigned a value) and false otherwise */
-    public boolean isSetTe() {
-      return this.te != null;
-    }
-
-    public void setTeIsSet(boolean value) {
-      if (!value) {
-        this.te = null;
-      }
-    }
-
-    public void setFieldValue(_Fields field, Object value) {
-      switch (field) {
-      case SUCCESS:
-        if (value == null) {
-          unsetSuccess();
-        } else {
-          setSuccess((Integer)value);
-        }
-        break;
-
-      case IRE:
-        if (value == null) {
-          unsetIre();
-        } else {
-          setIre((InvalidRequestException)value);
-        }
-        break;
-
-      case UE:
-        if (value == null) {
-          unsetUe();
-        } else {
-          setUe((UnavailableException)value);
-        }
-        break;
-
-      case TE:
-        if (value == null) {
-          unsetTe();
-        } else {
-          setTe((TimedOutException)value);
-        }
-        break;
-
-      }
-    }
-
-    public void setFieldValue(int fieldID, Object value) {
-      setFieldValue(_Fields.findByThriftIdOrThrow(fieldID), value);
-    }
-
-    public Object getFieldValue(_Fields field) {
-      switch (field) {
-      case SUCCESS:
-        return new Integer(getSuccess());
-
-      case IRE:
-        return getIre();
-
-      case UE:
-        return getUe();
-
-      case TE:
-        return getTe();
-
-      }
-      throw new IllegalStateException();
-    }
-
-    public Object getFieldValue(int fieldId) {
-      return getFieldValue(_Fields.findByThriftIdOrThrow(fieldId));
-    }
-
-    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
-    public boolean isSet(_Fields field) {
-      switch (field) {
-      case SUCCESS:
-        return isSetSuccess();
-      case IRE:
-        return isSetIre();
-      case UE:
-        return isSetUe();
-      case TE:
-        return isSetTe();
-      }
-      throw new IllegalStateException();
-    }
-
-    public boolean isSet(int fieldID) {
-      return isSet(_Fields.findByThriftIdOrThrow(fieldID));
-    }
-
-    @Override
-    public boolean equals(Object that) {
-      if (that == null)
-        return false;
-      if (that instanceof get_count_result)
-        return this.equals((get_count_result)that);
-      return false;
-    }
-
-    public boolean equals(get_count_result that) {
-      if (that == null)
-        return false;
-
-      boolean this_present_success = true;
-      boolean that_present_success = true;
-      if (this_present_success || that_present_success) {
-        if (!(this_present_success && that_present_success))
-          return false;
-        if (this.success != that.success)
-          return false;
-      }
-
-      boolean this_present_ire = true && this.isSetIre();
-      boolean that_present_ire = true && that.isSetIre();
-      if (this_present_ire || that_present_ire) {
-        if (!(this_present_ire && that_present_ire))
-          return false;
-        if (!this.ire.equals(that.ire))
-          return false;
-      }
-
-      boolean this_present_ue = true && this.isSetUe();
-      boolean that_present_ue = true && that.isSetUe();
-      if (this_present_ue || that_present_ue) {
-        if (!(this_present_ue && that_present_ue))
-          return false;
-        if (!this.ue.equals(that.ue))
-          return false;
-      }
-
-      boolean this_present_te = true && this.isSetTe();
-      boolean that_present_te = true && that.isSetTe();
-      if (this_present_te || that_present_te) {
-        if (!(this_present_te && that_present_te))
-          return false;
-        if (!this.te.equals(that.te))
-          return false;
-      }
-
-      return true;
-    }
-
-    @Override
-    public int hashCode() {
-      return 0;
-    }
-
-    public int compareTo(get_count_result other) {
-      if (!getClass().equals(other.getClass())) {
-        return getClass().getName().compareTo(other.getClass().getName());
-      }
-
-      int lastComparison = 0;
-      get_count_result typedOther = (get_count_result)other;
-
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(isSetSuccess());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      lastComparison = TBaseHelper.compareTo(success, typedOther.success);
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      lastComparison = Boolean.valueOf(isSetIre()).compareTo(isSetIre());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      lastComparison = TBaseHelper.compareTo(ire, typedOther.ire);
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      lastComparison = Boolean.valueOf(isSetUe()).compareTo(isSetUe());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      lastComparison = TBaseHelper.compareTo(ue, typedOther.ue);
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      lastComparison = Boolean.valueOf(isSetTe()).compareTo(isSetTe());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      lastComparison = TBaseHelper.compareTo(te, typedOther.te);
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      return 0;
-    }
-
-    public void read(TProtocol iprot) throws TException {
-      TField field;
-      iprot.readStructBegin();
-      while (true)
-      {
-        field = iprot.readFieldBegin();
-        if (field.type == TType.STOP) { 
-          break;
-        }
-        _Fields fieldId = _Fields.findByThriftId(field.id);
-        if (fieldId == null) {
-          TProtocolUtil.skip(iprot, field.type);
-        } else {
-          switch (fieldId) {
-            case SUCCESS:
-              if (field.type == TType.I32) {
-                this.success = iprot.readI32();
-                setSuccessIsSet(true);
-              } else { 
-                TProtocolUtil.skip(iprot, field.type);
-              }
-              break;
-            case IRE:
-              if (field.type == TType.STRUCT) {
-                this.ire = new InvalidRequestException();
-                this.ire.read(iprot);
-              } else { 
-                TProtocolUtil.skip(iprot, field.type);
-              }
-              break;
-            case UE:
-              if (field.type == TType.STRUCT) {
-                this.ue = new UnavailableException();
-                this.ue.read(iprot);
-              } else { 
-                TProtocolUtil.skip(iprot, field.type);
-              }
-              break;
-            case TE:
-              if (field.type == TType.STRUCT) {
-                this.te = new TimedOutException();
-                this.te.read(iprot);
-              } else { 
-                TProtocolUtil.skip(iprot, field.type);
-              }
-              break;
-          }
-          iprot.readFieldEnd();
-        }
-      }
-      iprot.readStructEnd();
-
-      // check for required fields of primitive type, which can't be checked in the validate method
-      validate();
-    }
-
-    public void write(TProtocol oprot) throws TException {
-      oprot.writeStructBegin(STRUCT_DESC);
-
-      if (this.isSetSuccess()) {
-        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeI32(this.success);
-        oprot.writeFieldEnd();
-      } else if (this.isSetIre()) {
-        oprot.writeFieldBegin(IRE_FIELD_DESC);
-        this.ire.write(oprot);
-        oprot.writeFieldEnd();
-      } else if (this.isSetUe()) {
-        oprot.writeFieldBegin(UE_FIELD_DESC);
-        this.ue.write(oprot);
-        oprot.writeFieldEnd();
-      } else if (this.isSetTe()) {
-        oprot.writeFieldBegin(TE_FIELD_DESC);
-        this.te.write(oprot);
-        oprot.writeFieldEnd();
-      }
-      oprot.writeFieldStop();
-      oprot.writeStructEnd();
-    }
-
-    @Override
-    public String toString() {
-      StringBuilder sb = new StringBuilder("get_count_result(");
-      boolean first = true;
-
-      sb.append("success:");
-      sb.append(this.success);
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("ire:");
-      if (this.ire == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ire);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("ue:");
-      if (this.ue == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ue);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("te:");
-      if (this.te == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.te);
-      }
-      first = false;
-      sb.append(")");
-      return sb.toString();
-    }
-
-    public void validate() throws TException {
-      // check for required fields
-    }
-
-  }
-
-  public static class get_key_range_args implements TBase<get_key_range_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_key_range_args>   {
-    private static final TStruct STRUCT_DESC = new TStruct("get_key_range_args");
-
-    private static final TField KEYSPACE_FIELD_DESC = new TField("keyspace", TType.STRING, (short)1);
-    private static final TField COLUMN_FAMILY_FIELD_DESC = new TField("column_family", TType.STRING, (short)2);
-    private static final TField START_FIELD_DESC = new TField("start", TType.STRING, (short)3);
-    private static final TField FINISH_FIELD_DESC = new TField("finish", TType.STRING, (short)4);
-    private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)5);
-    private static final TField CONSISTENCY_LEVEL_FIELD_DESC = new TField("consistency_level", TType.I32, (short)6);
-
-    public String keyspace;
-    public String column_family;
-    public String start;
-    public String finish;
-    public int count;
-    /**
-     * 
-     * @see ConsistencyLevel
-     */
-    public ConsistencyLevel consistency_level;
-
-    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
-    public enum _Fields implements TFieldIdEnum {
-      KEYSPACE((short)1, "keyspace"),
-      COLUMN_FAMILY((short)2, "column_family"),
-      START((short)3, "start"),
-      FINISH((short)4, "finish"),
-      COUNT((short)5, "count"),
-      /**
-       * 
-       * @see ConsistencyLevel
-       */
-      CONSISTENCY_LEVEL((short)6, "consistency_level");
-
-      private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
-      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
-
-      static {
-        for (_Fields field : EnumSet.allOf(_Fields.class)) {
-          byId.put((int)field._thriftId, field);
-          byName.put(field.getFieldName(), field);
-        }
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, or null if its not found.
-       */
-      public static _Fields findByThriftId(int fieldId) {
-        return byId.get(fieldId);
-      }
-
-      /**
-       * Find the _Fields constant that matches fieldId, throwing an exception
-       * if it is not found.
-       */
-      public static _Fields findByThriftIdOrThrow(int fieldId) {
-        _Fields fields = findByThriftId(fieldId);
-        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
-        return fields;
-      }
-
-      /**
-       * Find the _Fields constant that matches name, or null if its not found.
-       */
-      public static _Fields findByName(String name) {
-        return byName.get(name);
-      }
-
-      private final short _thriftId;
-      private final String _fieldName;
-
-      _Fields(short thriftId, String fieldName) {
-        _thriftId = thriftId;
-        _fieldName = fieldName;
-      }
-
-      public short getThriftFieldId() {
-        return _thriftId;
-      }
-
-      public String getFieldName() {
-        return _fieldName;
-      }
-    }
-
-    // isset id assignments
-    private static final int __COUNT_ISSET_ID = 0;
-    private BitSet __isset_bit_vector = new BitSet(1);
-
-    public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
-      put(_Fields.KEYSPACE, new FieldMetaData("keyspace", TFieldRequirementType.REQUIRED, 
-          new FieldValueMetaData(TType.STRING)));
-      put(_Fields.COLUMN_FAMILY, new FieldMetaData("column_family", TFieldRequirementType.REQUIRED, 
-          new FieldValueMetaData(TType.STRING)));
-      put(_Fields.START, new FieldMetaData("start", TFieldRequirementType.REQUIRED, 
-          new FieldValueMetaData(TType.STRING)));
-      put(_Fields.FINISH, new FieldMetaData("finish", TFieldRequirementType.REQUIRED, 
-          new FieldValueMetaData(TType.STRING)));
-      put(_Fields.COUNT, new FieldMetaData("count", TFieldRequirementType.REQUIRED, 
-          new FieldValueMetaData(TType.I32)));
-      put(_Fields.CONSISTENCY_LEVEL, new FieldMetaData("consistency_level", TFieldRequirementType.REQUIRED, 
-          new EnumMetaData(TType.ENUM, ConsistencyLevel.class)));
-    }});
-
-    static {
-      FieldMetaData.addStructMetaDataMap(get_key_range_args.class, metaDataMap);
-    }
-
-    public get_key_range_args() {
-      this.start = "";
-
-      this.finish = "";
-
-      this.count = 100;
-
-      this.consistency_level = ConsistencyLevel.ONE;
-
-    }
-
-    public get_key_range_args(
-      String keyspace,
-      String column_family,
-      String start,
-      String finish,
-      int count,
-      ConsistencyLevel consistency_level)
-    {
-      this();
-      this.keyspace = keyspace;
-      this.column_family = column_family;
-      this.start = start;
-      this.finish = finish;
-      this.count = count;
-      setCountIsSet(true);
-      this.consistency_level = consistency_level;
-    }
-
-    /**
-     * Performs a deep copy on <i>other</i>.
-     */
-    public get_key_range_args(get_key_range_args other) {
-      __isset_bit_vector.clear();
-      __isset_bit_vector.or(other.__isset_bit_vector);
-      if (other.isSetKeyspace()) {
-        this.keyspace = other.keyspace;
-      }
-      if (other.isSetColumn_family()) {
-        this.column_family = other.column_family;
-      }
-      if (other.isSetStart()) {
-        this.start = other.start;
-      }
-      if (other.isSetFinish()) {
-        this.finish = other.finish;
-      }
-      this.count = other.count;
-      if (other.isSetConsistency_level()) {
-        this.consistency_level = other.consistency_level;
-      }
-    }
-
-    public get_key_range_args deepCopy() {
-      return new get_key_range_args(this);
-    }
-
-    @Deprecated
-    public get_key_range_args clone() {
-      return new get_key_range_args(this);
-    }
-
-    public String getKeyspace() {
-      return this.keyspace;
-    }
-
-    public get_key_range_args setKeyspace(String keyspace) {
-      this.keyspace = keyspace;
-      return this;
-    }
-
-    public void unsetKeyspace() {
-      this.keyspace = null;
-    }
-
-    /** Returns true if field keyspace is set (has been asigned a value) and false otherwise */
-    public boolean isSetKeyspace() {
-      return this.keyspace != null;
-    }
-
-    public void setKeyspaceIsSet(boolean value) {
-      if (!value) {
-        this.keyspace = null;
-      }
-    }
-
-    public String getColumn_family() {
-      return this.column_family;
-    }
-
-    public get_key_range_args setColumn_family(String column_family) {
-      this.column_family = column_family;
-      return this;
-    }
-
-    public void unsetColumn_family() {
-      this.column_family = null;
-    }
-
-    /** Returns true if field column_family is set (has been asigned a value) and false otherwise */
-    public boolean isSetColumn_family() {
-      return this.column_family != null;
-    }
-
-    public void setColumn_familyIsSet(boolean value) {
-      if (!value) {
-        this.column_family = null;
-      }
-    }
-
-    public String getStart() {
-      return this.start;
+      return this.keyspace;
     }
 
-    public get_key_range_args setStart(String start) {
-      this.start = start;
+    public get_count_args setKeyspace(String keyspace) {
+      this.keyspace = keyspace;
       return this;
     }
 
-    public void unsetStart() {
-      this.start = null;
+    public void unsetKeyspace() {
+      this.keyspace = null;
     }
 
-    /** Returns true if field start is set (has been asigned a value) and false otherwise */
-    public boolean isSetStart() {
-      return this.start != null;
+    /** Returns true if field keyspace is set (has been asigned a value) and false otherwise */
+    public boolean isSetKeyspace() {
+      return this.keyspace != null;
     }
 
-    public void setStartIsSet(boolean value) {
+    public void setKeyspaceIsSet(boolean value) {
       if (!value) {
-        this.start = null;
+        this.keyspace = null;
       }
     }
 
-    public String getFinish() {
-      return this.finish;
+    public String getKey() {
+      return this.key;
     }
 
-    public get_key_range_args setFinish(String finish) {
-      this.finish = finish;
+    public get_count_args setKey(String key) {
+      this.key = key;
       return this;
     }
 
-    public void unsetFinish() {
-      this.finish = null;
+    public void unsetKey() {
+      this.key = null;
     }
 
-    /** Returns true if field finish is set (has been asigned a value) and false otherwise */
-    public boolean isSetFinish() {
-      return this.finish != null;
+    /** Returns true if field key is set (has been asigned a value) and false otherwise */
+    public boolean isSetKey() {
+      return this.key != null;
     }
 
-    public void setFinishIsSet(boolean value) {
+    public void setKeyIsSet(boolean value) {
       if (!value) {
-        this.finish = null;
+        this.key = null;
       }
     }
 
-    public int getCount() {
-      return this.count;
+    public ColumnParent getColumn_parent() {
+      return this.column_parent;
     }
 
-    public get_key_range_args setCount(int count) {
-      this.count = count;
-      setCountIsSet(true);
+    public get_count_args setColumn_parent(ColumnParent column_parent) {
+      this.column_parent = column_parent;
       return this;
     }
 
-    public void unsetCount() {
-      __isset_bit_vector.clear(__COUNT_ISSET_ID);
+    public void unsetColumn_parent() {
+      this.column_parent = null;
     }
 
-    /** Returns true if field count is set (has been asigned a value) and false otherwise */
-    public boolean isSetCount() {
-      return __isset_bit_vector.get(__COUNT_ISSET_ID);
+    /** Returns true if field column_parent is set (has been asigned a value) and false otherwise */
+    public boolean isSetColumn_parent() {
+      return this.column_parent != null;
     }
 
-    public void setCountIsSet(boolean value) {
-      __isset_bit_vector.set(__COUNT_ISSET_ID, value);
+    public void setColumn_parentIsSet(boolean value) {
+      if (!value) {
+        this.column_parent = null;
+      }
     }
 
     /**
@@ -8244,7 +6977,7 @@ public ConsistencyLevel getConsistency_level() {
      * 
      * @see ConsistencyLevel
      */
-    public get_key_range_args setConsistency_level(ConsistencyLevel consistency_level) {
+    public get_count_args setConsistency_level(ConsistencyLevel consistency_level) {
       this.consistency_level = consistency_level;
       return this;
     }
@@ -8274,35 +7007,19 @@ public void setFieldValue(_Fields field, Object value) {
         }
         break;
 
-      case COLUMN_FAMILY:
-        if (value == null) {
-          unsetColumn_family();
-        } else {
-          setColumn_family((String)value);
-        }
-        break;
-
-      case START:
-        if (value == null) {
-          unsetStart();
-        } else {
-          setStart((String)value);
-        }
-        break;
-
-      case FINISH:
+      case KEY:
         if (value == null) {
-          unsetFinish();
+          unsetKey();
         } else {
-          setFinish((String)value);
+          setKey((String)value);
         }
         break;
 
-      case COUNT:
+      case COLUMN_PARENT:
         if (value == null) {
-          unsetCount();
+          unsetColumn_parent();
         } else {
-          setCount((Integer)value);
+          setColumn_parent((ColumnParent)value);
         }
         break;
 
@@ -8326,17 +7043,11 @@ public Object getFieldValue(_Fields field) {
       case KEYSPACE:
         return getKeyspace();
 
-      case COLUMN_FAMILY:
-        return getColumn_family();
-
-      case START:
-        return getStart();
-
-      case FINISH:
-        return getFinish();
+      case KEY:
+        return getKey();
 
-      case COUNT:
-        return new Integer(getCount());
+      case COLUMN_PARENT:
+        return getColumn_parent();
 
       case CONSISTENCY_LEVEL:
         return getConsistency_level();
@@ -8354,14 +7065,10 @@ public boolean isSet(_Fields field) {
       switch (field) {
       case KEYSPACE:
         return isSetKeyspace();
-      case COLUMN_FAMILY:
-        return isSetColumn_family();
-      case START:
-        return isSetStart();
-      case FINISH:
-        return isSetFinish();
-      case COUNT:
-        return isSetCount();
+      case KEY:
+        return isSetKey();
+      case COLUMN_PARENT:
+        return isSetColumn_parent();
       case CONSISTENCY_LEVEL:
         return isSetConsistency_level();
       }
@@ -8376,12 +7083,12 @@ public boolean isSet(int fieldID) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof get_key_range_args)
-        return this.equals((get_key_range_args)that);
+      if (that instanceof get_count_args)
+        return this.equals((get_count_args)that);
       return false;
     }
 
-    public boolean equals(get_key_range_args that) {
+    public boolean equals(get_count_args that) {
       if (that == null)
         return false;
 
@@ -8394,39 +7101,21 @@ public boolean equals(get_key_range_args that) {
           return false;
       }
 
-      boolean this_present_column_family = true && this.isSetColumn_family();
-      boolean that_present_column_family = true && that.isSetColumn_family();
-      if (this_present_column_family || that_present_column_family) {
-        if (!(this_present_column_family && that_present_column_family))
-          return false;
-        if (!this.column_family.equals(that.column_family))
-          return false;
-      }
-
-      boolean this_present_start = true && this.isSetStart();
-      boolean that_present_start = true && that.isSetStart();
-      if (this_present_start || that_present_start) {
-        if (!(this_present_start && that_present_start))
-          return false;
-        if (!this.start.equals(that.start))
-          return false;
-      }
-
-      boolean this_present_finish = true && this.isSetFinish();
-      boolean that_present_finish = true && that.isSetFinish();
-      if (this_present_finish || that_present_finish) {
-        if (!(this_present_finish && that_present_finish))
+      boolean this_present_key = true && this.isSetKey();
+      boolean that_present_key = true && that.isSetKey();
+      if (this_present_key || that_present_key) {
+        if (!(this_present_key && that_present_key))
           return false;
-        if (!this.finish.equals(that.finish))
+        if (!this.key.equals(that.key))
           return false;
       }
 
-      boolean this_present_count = true;
-      boolean that_present_count = true;
-      if (this_present_count || that_present_count) {
-        if (!(this_present_count && that_present_count))
+      boolean this_present_column_parent = true && this.isSetColumn_parent();
+      boolean that_present_column_parent = true && that.isSetColumn_parent();
+      if (this_present_column_parent || that_present_column_parent) {
+        if (!(this_present_column_parent && that_present_column_parent))
           return false;
-        if (this.count != that.count)
+        if (!this.column_parent.equals(that.column_parent))
           return false;
       }
 
@@ -8447,13 +7136,13 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(get_key_range_args other) {
+    public int compareTo(get_count_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      get_key_range_args typedOther = (get_key_range_args)other;
+      get_count_args typedOther = (get_count_args)other;
 
       lastComparison = Boolean.valueOf(isSetKeyspace()).compareTo(isSetKeyspace());
       if (lastComparison != 0) {
@@ -8463,35 +7152,19 @@ public int compareTo(get_key_range_args other) {
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetColumn_family()).compareTo(isSetColumn_family());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      lastComparison = TBaseHelper.compareTo(column_family, typedOther.column_family);
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      lastComparison = Boolean.valueOf(isSetStart()).compareTo(isSetStart());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      lastComparison = TBaseHelper.compareTo(start, typedOther.start);
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      lastComparison = Boolean.valueOf(isSetFinish()).compareTo(isSetFinish());
+      lastComparison = Boolean.valueOf(isSetKey()).compareTo(isSetKey());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(finish, typedOther.finish);
+      lastComparison = TBaseHelper.compareTo(key, typedOther.key);
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = Boolean.valueOf(isSetCount()).compareTo(isSetCount());
+      lastComparison = Boolean.valueOf(isSetColumn_parent()).compareTo(isSetColumn_parent());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      lastComparison = TBaseHelper.compareTo(count, typedOther.count);
+      lastComparison = TBaseHelper.compareTo(column_parent, typedOther.column_parent);
       if (lastComparison != 0) {
         return lastComparison;
       }
@@ -8527,31 +7200,17 @@ public void read(TProtocol iprot) throws TException {
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case COLUMN_FAMILY:
-              if (field.type == TType.STRING) {
-                this.column_family = iprot.readString();
-              } else { 
-                TProtocolUtil.skip(iprot, field.type);
-              }
-              break;
-            case START:
-              if (field.type == TType.STRING) {
-                this.start = iprot.readString();
-              } else { 
-                TProtocolUtil.skip(iprot, field.type);
-              }
-              break;
-            case FINISH:
+            case KEY:
               if (field.type == TType.STRING) {
-                this.finish = iprot.readString();
+                this.key = iprot.readString();
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
               break;
-            case COUNT:
-              if (field.type == TType.I32) {
-                this.count = iprot.readI32();
-                setCountIsSet(true);
+            case COLUMN_PARENT:
+              if (field.type == TType.STRUCT) {
+                this.column_parent = new ColumnParent();
+                this.column_parent.read(iprot);
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
@@ -8570,9 +7229,6 @@ public void read(TProtocol iprot) throws TException {
       iprot.readStructEnd();
 
       // check for required fields of primitive type, which can't be checked in the validate method
-      if (!isSetCount()) {
-        throw new TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
-      }
       validate();
     }
 
@@ -8585,24 +7241,16 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeString(this.keyspace);
         oprot.writeFieldEnd();
       }
-      if (this.column_family != null) {
-        oprot.writeFieldBegin(COLUMN_FAMILY_FIELD_DESC);
-        oprot.writeString(this.column_family);
-        oprot.writeFieldEnd();
-      }
-      if (this.start != null) {
-        oprot.writeFieldBegin(START_FIELD_DESC);
-        oprot.writeString(this.start);
+      if (this.key != null) {
+        oprot.writeFieldBegin(KEY_FIELD_DESC);
+        oprot.writeString(this.key);
         oprot.writeFieldEnd();
       }
-      if (this.finish != null) {
-        oprot.writeFieldBegin(FINISH_FIELD_DESC);
-        oprot.writeString(this.finish);
+      if (this.column_parent != null) {
+        oprot.writeFieldBegin(COLUMN_PARENT_FIELD_DESC);
+        this.column_parent.write(oprot);
         oprot.writeFieldEnd();
       }
-      oprot.writeFieldBegin(COUNT_FIELD_DESC);
-      oprot.writeI32(this.count);
-      oprot.writeFieldEnd();
       if (this.consistency_level != null) {
         oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
         oprot.writeI32(this.consistency_level.getValue());
@@ -8614,7 +7262,7 @@ public void write(TProtocol oprot) throws TException {
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("get_key_range_args(");
+      StringBuilder sb = new StringBuilder("get_count_args(");
       boolean first = true;
 
       sb.append("keyspace:");
@@ -8625,34 +7273,22 @@ public String toString() {
       }
       first = false;
       if (!first) sb.append(", ");
-      sb.append("column_family:");
-      if (this.column_family == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.column_family);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("start:");
-      if (this.start == null) {
+      sb.append("key:");
+      if (this.key == null) {
         sb.append("null");
       } else {
-        sb.append(this.start);
+        sb.append(this.key);
       }
       first = false;
       if (!first) sb.append(", ");
-      sb.append("finish:");
-      if (this.finish == null) {
+      sb.append("column_parent:");
+      if (this.column_parent == null) {
         sb.append("null");
       } else {
-        sb.append(this.finish);
+        sb.append(this.column_parent);
       }
       first = false;
       if (!first) sb.append(", ");
-      sb.append("count:");
-      sb.append(this.count);
-      first = false;
-      if (!first) sb.append(", ");
       sb.append("consistency_level:");
       if (this.consistency_level == null) {
         sb.append("null");
@@ -8669,16 +7305,12 @@ public void validate() throws TException {
       if (keyspace == null) {
         throw new TProtocolException("Required field 'keyspace' was not present! Struct: " + toString());
       }
-      if (column_family == null) {
-        throw new TProtocolException("Required field 'column_family' was not present! Struct: " + toString());
-      }
-      if (start == null) {
-        throw new TProtocolException("Required field 'start' was not present! Struct: " + toString());
+      if (key == null) {
+        throw new TProtocolException("Required field 'key' was not present! Struct: " + toString());
       }
-      if (finish == null) {
-        throw new TProtocolException("Required field 'finish' was not present! Struct: " + toString());
+      if (column_parent == null) {
+        throw new TProtocolException("Required field 'column_parent' was not present! Struct: " + toString());
       }
-      // alas, we cannot check 'count' because it's a primitive and you chose the non-beans generator.
       if (consistency_level == null) {
         throw new TProtocolException("Required field 'consistency_level' was not present! Struct: " + toString());
       }
@@ -8686,15 +7318,15 @@ public void validate() throws TException {
 
   }
 
-  public static class get_key_range_result implements TBase<get_key_range_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_key_range_result>   {
-    private static final TStruct STRUCT_DESC = new TStruct("get_key_range_result");
+  public static class get_count_result implements TBase<get_count_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_count_result>   {
+    private static final TStruct STRUCT_DESC = new TStruct("get_count_result");
 
-    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
+    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
     private static final TField IRE_FIELD_DESC = new TField("ire", TType.STRUCT, (short)1);
     private static final TField UE_FIELD_DESC = new TField("ue", TType.STRUCT, (short)2);
     private static final TField TE_FIELD_DESC = new TField("te", TType.STRUCT, (short)3);
 
-    public List<String> success;
+    public int success;
     public InvalidRequestException ire;
     public UnavailableException ue;
     public TimedOutException te;
@@ -8758,11 +7390,12 @@ public String getFieldName() {
     }
 
     // isset id assignments
+    private static final int __SUCCESS_ISSET_ID = 0;
+    private BitSet __isset_bit_vector = new BitSet(1);
 
     public static final Map<_Fields, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new EnumMap<_Fields, FieldMetaData>(_Fields.class) {{
       put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
-          new ListMetaData(TType.LIST, 
-              new FieldValueMetaData(TType.STRING))));
+          new FieldValueMetaData(TType.I32)));
       put(_Fields.IRE, new FieldMetaData("ire", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       put(_Fields.UE, new FieldMetaData("ue", TFieldRequirementType.DEFAULT, 
@@ -8772,20 +7405,21 @@ public String getFieldName() {
     }});
 
     static {
-      FieldMetaData.addStructMetaDataMap(get_key_range_result.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(get_count_result.class, metaDataMap);
     }
 
-    public get_key_range_result() {
+    public get_count_result() {
     }
 
-    public get_key_range_result(
-      List<String> success,
+    public get_count_result(
+      int success,
       InvalidRequestException ire,
       UnavailableException ue,
       TimedOutException te)
     {
       this();
       this.success = success;
+      setSuccessIsSet(true);
       this.ire = ire;
       this.ue = ue;
       this.te = te;
@@ -8794,14 +7428,10 @@ public get_key_range_result(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public get_key_range_result(get_key_range_result other) {
-      if (other.isSetSuccess()) {
-        List<String> __this__success = new ArrayList<String>();
-        for (String other_element : other.success) {
-          __this__success.add(other_element);
-        }
-        this.success = __this__success;
-      }
+    public get_count_result(get_count_result other) {
+      __isset_bit_vector.clear();
+      __isset_bit_vector.or(other.__isset_bit_vector);
+      this.success = other.success;
       if (other.isSetIre()) {
         this.ire = new InvalidRequestException(other.ire);
       }
@@ -8813,59 +7443,43 @@ public get_key_range_result(get_key_range_result other) {
       }
     }
 
-    public get_key_range_result deepCopy() {
-      return new get_key_range_result(this);
+    public get_count_result deepCopy() {
+      return new get_count_result(this);
     }
 
     @Deprecated
-    public get_key_range_result clone() {
-      return new get_key_range_result(this);
-    }
-
-    public int getSuccessSize() {
-      return (this.success == null) ? 0 : this.success.size();
-    }
-
-    public java.util.Iterator<String> getSuccessIterator() {
-      return (this.success == null) ? null : this.success.iterator();
-    }
-
-    public void addToSuccess(String elem) {
-      if (this.success == null) {
-        this.success = new ArrayList<String>();
-      }
-      this.success.add(elem);
+    public get_count_result clone() {
+      return new get_count_result(this);
     }
 
-    public List<String> getSuccess() {
+    public int getSuccess() {
       return this.success;
     }
 
-    public get_key_range_result setSuccess(List<String> success) {
+    public get_count_result setSuccess(int success) {
       this.success = success;
+      setSuccessIsSet(true);
       return this;
     }
 
     public void unsetSuccess() {
-      this.success = null;
+      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
     }
 
     /** Returns true if field success is set (has been asigned a value) and false otherwise */
     public boolean isSetSuccess() {
-      return this.success != null;
+      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
     }
 
     public void setSuccessIsSet(boolean value) {
-      if (!value) {
-        this.success = null;
-      }
+      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
     }
 
     public InvalidRequestException getIre() {
       return this.ire;
     }
 
-    public get_key_range_result setIre(InvalidRequestException ire) {
+    public get_count_result setIre(InvalidRequestException ire) {
       this.ire = ire;
       return this;
     }
@@ -8889,7 +7503,7 @@ public UnavailableException getUe() {
       return this.ue;
     }
 
-    public get_key_range_result setUe(UnavailableException ue) {
+    public get_count_result setUe(UnavailableException ue) {
       this.ue = ue;
       return this;
     }
@@ -8913,7 +7527,7 @@ public TimedOutException getTe() {
       return this.te;
     }
 
-    public get_key_range_result setTe(TimedOutException te) {
+    public get_count_result setTe(TimedOutException te) {
       this.te = te;
       return this;
     }
@@ -8939,7 +7553,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((List<String>)value);
+          setSuccess((Integer)value);
         }
         break;
 
@@ -8977,7 +7591,7 @@ public void setFieldValue(int fieldID, Object value) {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SUCCESS:
-        return getSuccess();
+        return new Integer(getSuccess());
 
       case IRE:
         return getIre();
@@ -9019,21 +7633,21 @@ public boolean isSet(int fieldID) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof get_key_range_result)
-        return this.equals((get_key_range_result)that);
+      if (that instanceof get_count_result)
+        return this.equals((get_count_result)that);
       return false;
     }
 
-    public boolean equals(get_key_range_result that) {
+    public boolean equals(get_count_result that) {
       if (that == null)
         return false;
 
-      boolean this_present_success = true && this.isSetSuccess();
-      boolean that_present_success = true && that.isSetSuccess();
+      boolean this_present_success = true;
+      boolean that_present_success = true;
       if (this_present_success || that_present_success) {
         if (!(this_present_success && that_present_success))
           return false;
-        if (!this.success.equals(that.success))
+        if (this.success != that.success)
           return false;
       }
 
@@ -9072,13 +7686,13 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(get_key_range_result other) {
+    public int compareTo(get_count_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      get_key_range_result typedOther = (get_key_range_result)other;
+      get_count_result typedOther = (get_count_result)other;
 
       lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(isSetSuccess());
       if (lastComparison != 0) {
@@ -9130,18 +7744,9 @@ public void read(TProtocol iprot) throws TException {
         } else {
           switch (fieldId) {
             case SUCCESS:
-              if (field.type == TType.LIST) {
-                {
-                  TList _list43 = iprot.readListBegin();
-                  this.success = new ArrayList<String>(_list43.size);
-                  for (int _i44 = 0; _i44 < _list43.size; ++_i44)
-                  {
-                    String _elem45;
-                    _elem45 = iprot.readString();
-                    this.success.add(_elem45);
-                  }
-                  iprot.readListEnd();
-                }
+              if (field.type == TType.I32) {
+                this.success = iprot.readI32();
+                setSuccessIsSet(true);
               } else { 
                 TProtocolUtil.skip(iprot, field.type);
               }
@@ -9185,14 +7790,7 @@ public void write(TProtocol oprot) throws TException {
 
       if (this.isSetSuccess()) {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        {
-          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
-          for (String _iter46 : this.success)
-          {
-            oprot.writeString(_iter46);
-          }
-          oprot.writeListEnd();
-        }
+        oprot.writeI32(this.success);
         oprot.writeFieldEnd();
       } else if (this.isSetIre()) {
         oprot.writeFieldBegin(IRE_FIELD_DESC);
@@ -9213,15 +7811,11 @@ public void write(TProtocol oprot) throws TException {
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("get_key_range_result(");
+      StringBuilder sb = new StringBuilder("get_count_result(");
       boolean first = true;
 
       sb.append("success:");
-      if (this.success == null) {
-        sb.append("null");
-      } else {
         sb.append(this.success);
-      }
       first = false;
       if (!first) sb.append(", ");
       sb.append("ire:");
@@ -10535,14 +9129,14 @@ public void read(TProtocol iprot) throws TException {
             case SUCCESS:
               if (field.type == TType.LIST) {
                 {
-                  TList _list47 = iprot.readListBegin();
-                  this.success = new ArrayList<KeySlice>(_list47.size);
-                  for (int _i48 = 0; _i48 < _list47.size; ++_i48)
+                  TList _list43 = iprot.readListBegin();
+                  this.success = new ArrayList<KeySlice>(_list43.size);
+                  for (int _i44 = 0; _i44 < _list43.size; ++_i44)
                   {
-                    KeySlice _elem49;
-                    _elem49 = new KeySlice();
-                    _elem49.read(iprot);
-                    this.success.add(_elem49);
+                    KeySlice _elem45;
+                    _elem45 = new KeySlice();
+                    _elem45.read(iprot);
+                    this.success.add(_elem45);
                   }
                   iprot.readListEnd();
                 }
@@ -10591,9 +9185,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
-          for (KeySlice _iter50 : this.success)
+          for (KeySlice _iter46 : this.success)
           {
-            _iter50.write(oprot);
+            _iter46.write(oprot);
           }
           oprot.writeListEnd();
         }
@@ -12300,26 +10894,26 @@ public void read(TProtocol iprot) throws TException {
             case CFMAP:
               if (field.type == TType.MAP) {
                 {
-                  TMap _map51 = iprot.readMapBegin();
-                  this.cfmap = new HashMap<String,List<ColumnOrSuperColumn>>(2*_map51.size);
-                  for (int _i52 = 0; _i52 < _map51.size; ++_i52)
+                  TMap _map47 = iprot.readMapBegin();
+                  this.cfmap = new HashMap<String,List<ColumnOrSuperColumn>>(2*_map47.size);
+                  for (int _i48 = 0; _i48 < _map47.size; ++_i48)
                   {
-                    String _key53;
-                    List<ColumnOrSuperColumn> _val54;
-                    _key53 = iprot.readString();
+                    String _key49;
+                    List<ColumnOrSuperColumn> _val50;
+                    _key49 = iprot.readString();
                     {
-                      TList _list55 = iprot.readListBegin();
-                      _val54 = new ArrayList<ColumnOrSuperColumn>(_list55.size);
-                      for (int _i56 = 0; _i56 < _list55.size; ++_i56)
+                      TList _list51 = iprot.readListBegin();
+                      _val50 = new ArrayList<ColumnOrSuperColumn>(_list51.size);
+                      for (int _i52 = 0; _i52 < _list51.size; ++_i52)
                       {
-                        ColumnOrSuperColumn _elem57;
-                        _elem57 = new ColumnOrSuperColumn();
-                        _elem57.read(iprot);
-                        _val54.add(_elem57);
+                        ColumnOrSuperColumn _elem53;
+                        _elem53 = new ColumnOrSuperColumn();
+                        _elem53.read(iprot);
+                        _val50.add(_elem53);
                       }
                       iprot.readListEnd();
                     }
-                    this.cfmap.put(_key53, _val54);
+                    this.cfmap.put(_key49, _val50);
                   }
                   iprot.readMapEnd();
                 }
@@ -12362,14 +10956,14 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(CFMAP_FIELD_DESC);
         {
           oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, this.cfmap.size()));
-          for (Map.Entry<String, List<ColumnOrSuperColumn>> _iter58 : this.cfmap.entrySet())
+          for (Map.Entry<String, List<ColumnOrSuperColumn>> _iter54 : this.cfmap.entrySet())
           {
-            oprot.writeString(_iter58.getKey());
+            oprot.writeString(_iter54.getKey());
             {
-              oprot.writeListBegin(new TList(TType.STRUCT, _iter58.getValue().size()));
-              for (ColumnOrSuperColumn _iter59 : _iter58.getValue())
+              oprot.writeListBegin(new TList(TType.STRUCT, _iter54.getValue().size()));
+              for (ColumnOrSuperColumn _iter55 : _iter54.getValue())
               {
-                _iter59.write(oprot);
+                _iter55.write(oprot);
               }
               oprot.writeListEnd();
             }
@@ -14389,38 +12983,38 @@ public void read(TProtocol iprot) throws TException {
             case MUTATION_MAP:
               if (field.type == TType.MAP) {
                 {
+                  TMap _map56 = iprot.readMapBegin();
+                  this.mutation_map = new HashMap<String,Map<String,List<Mutation>>>(2*_map56.size);
+                  for (int _i57 = 0; _i57 < _map56.size; ++_i57)
+                  {
+                    String _key58;
+                    Map<String,List<Mutation>> _val59;
+                    _key58 = iprot.readString();
+                    {
                   TMap _map60 = iprot.readMapBegin();
-                  this.mutation_map = new HashMap<String,Map<String,List<Mutation>>>(2*_map60.size);
+                      _val59 = new HashMap<String,List<Mutation>>(2*_map60.size);
                   for (int _i61 = 0; _i61 < _map60.size; ++_i61)
                   {
                     String _key62;
-                    Map<String,List<Mutation>> _val63;
+                        List<Mutation> _val63;
                     _key62 = iprot.readString();
                     {
-                      TMap _map64 = iprot.readMapBegin();
-                      _val63 = new HashMap<String,List<Mutation>>(2*_map64.size);
-                      for (int _i65 = 0; _i65 < _map64.size; ++_i65)
-                      {
-                        String _key66;
-                        List<Mutation> _val67;
-                        _key66 = iprot.readString();
-                        {
-                          TList _list68 = iprot.readListBegin();
-                          _val67 = new ArrayList<Mutation>(_list68.size);
-                          for (int _i69 = 0; _i69 < _list68.size; ++_i69)
+                          TList _list64 = iprot.readListBegin();
+                          _val63 = new ArrayList<Mutation>(_list64.size);
+                          for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                           {
-                            Mutation _elem70;
-                            _elem70 = new Mutation();
-                            _elem70.read(iprot);
-                            _val67.add(_elem70);
+                            Mutation _elem66;
+                            _elem66 = new Mutation();
+                            _elem66.read(iprot);
+                            _val63.add(_elem66);
                           }
                           iprot.readListEnd();
                         }
-                        _val63.put(_key66, _val67);
+                        _val59.put(_key62, _val63);
                       }
                       iprot.readMapEnd();
                     }
-                    this.mutation_map.put(_key62, _val63);
+                    this.mutation_map.put(_key58, _val59);
                   }
                   iprot.readMapEnd();
                 }
@@ -14458,19 +13052,19 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(MUTATION_MAP_FIELD_DESC);
         {
           oprot.writeMapBegin(new TMap(TType.STRING, TType.MAP, this.mutation_map.size()));
-          for (Map.Entry<String, Map<String,List<Mutation>>> _iter71 : this.mutation_map.entrySet())
+          for (Map.Entry<String, Map<String,List<Mutation>>> _iter67 : this.mutation_map.entrySet())
           {
-            oprot.writeString(_iter71.getKey());
+            oprot.writeString(_iter67.getKey());
             {
-              oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, _iter71.getValue().size()));
-              for (Map.Entry<String, List<Mutation>> _iter72 : _iter71.getValue().entrySet())
+              oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, _iter67.getValue().size()));
+              for (Map.Entry<String, List<Mutation>> _iter68 : _iter67.getValue().entrySet())
               {
-                oprot.writeString(_iter72.getKey());
+                oprot.writeString(_iter68.getKey());
                 {
-                  oprot.writeListBegin(new TList(TType.STRUCT, _iter72.getValue().size()));
-                  for (Mutation _iter73 : _iter72.getValue())
+                  oprot.writeListBegin(new TList(TType.STRUCT, _iter68.getValue().size()));
+                  for (Mutation _iter69 : _iter68.getValue())
                   {
-                    _iter73.write(oprot);
+                    _iter69.write(oprot);
                   }
                   oprot.writeListEnd();
                 }
@@ -16097,13 +14691,13 @@ public void read(TProtocol iprot) throws TException {
             case SUCCESS:
               if (field.type == TType.LIST) {
                 {
-                  TList _list74 = iprot.readListBegin();
-                  this.success = new ArrayList<String>(_list74.size);
-                  for (int _i75 = 0; _i75 < _list74.size; ++_i75)
+                  TList _list70 = iprot.readListBegin();
+                  this.success = new ArrayList<String>(_list70.size);
+                  for (int _i71 = 0; _i71 < _list70.size; ++_i71)
                   {
-                    String _elem76;
-                    _elem76 = iprot.readString();
-                    this.success.add(_elem76);
+                    String _elem72;
+                    _elem72 = iprot.readString();
+                    this.success.add(_elem72);
                   }
                   iprot.readListEnd();
                 }
@@ -16128,9 +14722,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
-          for (String _iter77 : this.success)
+          for (String _iter73 : this.success)
           {
-            oprot.writeString(_iter77);
+            oprot.writeString(_iter73);
           }
           oprot.writeListEnd();
         }
@@ -16757,27 +15351,27 @@ public void read(TProtocol iprot) throws TException {
             case SUCCESS:
               if (field.type == TType.MAP) {
                 {
+                  TMap _map74 = iprot.readMapBegin();
+                  this.success = new HashMap<String,Map<String,String>>(2*_map74.size);
+                  for (int _i75 = 0; _i75 < _map74.size; ++_i75)
+                  {
+                    String _key76;
+                    Map<String,String> _val77;
+                    _key76 = iprot.readString();
+                    {
                   TMap _map78 = iprot.readMapBegin();
-                  this.success = new HashMap<String,Map<String,String>>(2*_map78.size);
+                      _val77 = new HashMap<String,String>(2*_map78.size);
                   for (int _i79 = 0; _i79 < _map78.size; ++_i79)
                   {
                     String _key80;
-                    Map<String,String> _val81;
+                        String _val81;
                     _key80 = iprot.readString();
-                    {
-                      TMap _map82 = iprot.readMapBegin();
-                      _val81 = new HashMap<String,String>(2*_map82.size);
-                      for (int _i83 = 0; _i83 < _map82.size; ++_i83)
-                      {
-                        String _key84;
-                        String _val85;
-                        _key84 = iprot.readString();
-                        _val85 = iprot.readString();
-                        _val81.put(_key84, _val85);
+                        _val81 = iprot.readString();
+                        _val77.put(_key80, _val81);
                       }
                       iprot.readMapEnd();
                     }
-                    this.success.put(_key80, _val81);
+                    this.success.put(_key76, _val77);
                   }
                   iprot.readMapEnd();
                 }
@@ -16810,15 +15404,15 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeMapBegin(new TMap(TType.STRING, TType.MAP, this.success.size()));
-          for (Map.Entry<String, Map<String,String>> _iter86 : this.success.entrySet())
+          for (Map.Entry<String, Map<String,String>> _iter82 : this.success.entrySet())
           {
-            oprot.writeString(_iter86.getKey());
+            oprot.writeString(_iter82.getKey());
             {
-              oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _iter86.getValue().size()));
-              for (Map.Entry<String, String> _iter87 : _iter86.getValue().entrySet())
+              oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _iter82.getValue().size()));
+              for (Map.Entry<String, String> _iter83 : _iter82.getValue().entrySet())
               {
-                oprot.writeString(_iter87.getKey());
-                oprot.writeString(_iter87.getValue());
+                oprot.writeString(_iter83.getKey());
+                oprot.writeString(_iter83.getValue());
               }
               oprot.writeMapEnd();
             }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 74297126..5beb4104 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -916,124 +916,6 @@ private ColumnFamily getTopLevelColumns(QueryFilter filter, int gcBefore) throws
         }
     }
 
-    /**
-     * @param startWith key to start with, inclusive.  empty string = start at beginning.
-     * @param stopAt key to stop at, inclusive.  empty string = stop only when keys are exhausted.
-     * @param maxResults
-     * @return list of keys between startWith and stopAt
-     */
-    public RangeReply getKeyRange(final String startWith, final String stopAt, int maxResults)
-    throws IOException, ExecutionException, InterruptedException
-    {
-        final DecoratedKey startWithDK = partitioner.decorateKey(startWith);
-        final DecoratedKey stopAtDK = partitioner.decorateKey(stopAt);
-
-        // create a CollatedIterator that will return unique keys from different sources
-        // (current memtable, historical memtables, and SSTables) in the correct order.
-        List<Iterator<DecoratedKey>> iterators = new ArrayList<Iterator<DecoratedKey>>();
-
-        // we iterate through memtables with a priority queue to avoid more sorting than necessary.
-        // this predicate throws out the keys before the start of our range.
-        Predicate<DecoratedKey> p = new Predicate<DecoratedKey>()
-        {
-            public boolean apply(DecoratedKey key)
-            {
-                return startWithDK.compareTo(key) <= 0
-                       && (stopAt.isEmpty() || key.compareTo(stopAtDK) <= 0);
-            }
-        };
-
-        // current memtable keys.  have to go through the CFS api for locking.
-        iterators.add(Iterators.filter(memtableKeyIterator(), p));
-        // historical memtables
-        for (Memtable memtable : ColumnFamilyStore.getUnflushedMemtables(columnFamily_))
-        {
-            iterators.add(Iterators.filter(memtable.getKeyIterator(), p));
-        }
-
-        // sstables
-        for (SSTableReader sstable : ssTables_)
-        {
-            final SSTableScanner scanner = sstable.getScanner(KEY_RANGE_FILE_BUFFER_SIZE);
-            scanner.seekTo(startWithDK);
-            Iterator<DecoratedKey> iter = new CloseableIterator<DecoratedKey>()
-            {
-                public boolean hasNext()
-                {
-                    return scanner.hasNext();
-                }
-                public DecoratedKey next()
-                {
-                    return scanner.next().getKey();
-                }
-                public void remove()
-                {
-                    throw new UnsupportedOperationException();
-                }
-                public void close() throws IOException
-                {
-                    scanner.close();
-                }
-            };
-            assert iter instanceof Closeable; // otherwise we leak FDs
-            iterators.add(iter);
-        }
-
-        Iterator<DecoratedKey> collated = IteratorUtils.collatedIterator(DecoratedKey.comparator, iterators);
-        Iterable<DecoratedKey> reduced = new ReducingIterator<DecoratedKey, DecoratedKey>(collated) {
-            DecoratedKey current;
-
-            public void reduce(DecoratedKey current)
-            {
-                 this.current = current;
-            }
-
-            protected DecoratedKey getReduced()
-            {
-                return current;
-            }
-        };
-
-        try
-        {
-            // pull keys out of the CollatedIterator.  checking tombstone status is expensive,
-            // so we set an arbitrary limit on how many we'll do at once.
-            List<String> keys = new ArrayList<String>();
-            boolean rangeCompletedLocally = false;
-            for (DecoratedKey current : reduced)
-            {
-                if (!stopAt.isEmpty() && stopAtDK.compareTo(current) < 0)
-                {
-                    rangeCompletedLocally = true;
-                    break;
-                }
-                // make sure there is actually non-tombstone content associated w/ this key
-                // TODO record the key source(s) somehow and only check that source (e.g., memtable or sstable)
-                QueryFilter filter = new SliceQueryFilter(current.key, new QueryPath(columnFamily_), ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, false, 1);
-                if (getColumnFamily(filter, Integer.MAX_VALUE) != null)
-                {
-                    keys.add(current.key);
-                }
-                if (keys.size() >= maxResults)
-                {
-                    rangeCompletedLocally = true;
-                    break;
-                }
-            }
-            return new RangeReply(keys, rangeCompletedLocally);
-        }
-        finally
-        {
-            for (Iterator iter : iterators)
-            {
-                if (iter instanceof Closeable)
-                {
-                    ((Closeable)iter).close();
-                }
-            }
-        }
-    }
-
     /**
      * @param startWith key to start with, inclusive.  empty string = start at beginning.
      * @param stopAt key to stop at, inclusive.  empty string = stop only when keys are exhausted.
@@ -1044,7 +926,7 @@ protected DecoratedKey getReduced()
        range_slice.  still opens one randomaccessfile per key, which sucks.  something like compactioniterator
        would be better.
      */
-    public RangeReply getKeyRangeRaw(final DecoratedKey startWith, final DecoratedKey stopAt, int maxResults)
+    public RangeReply getKeyRange(final DecoratedKey startWith, final DecoratedKey stopAt, int maxResults)
     throws IOException, ExecutionException, InterruptedException
     {
         // create a CollatedIterator that will return unique keys from different sources
@@ -1161,7 +1043,7 @@ protected DecoratedKey getReduced()
     public RangeSliceReply getRangeSlice(byte[] super_column, final DecoratedKey startKey, final DecoratedKey finishKey, int keyMax, SliceRange sliceRange, List<byte[]> columnNames)
     throws IOException, ExecutionException, InterruptedException
     {
-        RangeReply rr = getKeyRangeRaw(startKey, finishKey, keyMax);
+        RangeReply rr = getKeyRange(startKey, finishKey, keyMax);
         List<Row> rows = new ArrayList<Row>(rr.keys.size());
         final QueryPath queryPath =  new QueryPath(columnFamily_, super_column, null);
         final SortedSet<byte[]> columnNameSet = new TreeSet<byte[]>(getComparator());
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeCommand.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeCommand.java
index c4ff65c1..e69de29b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeCommand.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeCommand.java
@@ -1,97 +0,0 @@
-/*
-* Licensed to the Apache Software Foundation (ASF) under one
-* or more contributor license agreements.  See the NOTICE file
-* distributed with this work for additional information
-* regarding copyright ownership.  The ASF licenses this file
-* to you under the Apache License, Version 2.0 (the
-* "License"); you may not use this file except in compliance
-* with the License.  You may obtain a copy of the License at
-*
-*    http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing,
-* software distributed under the License is distributed on an
-* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-* KIND, either express or implied.  See the License for the
-* specific language governing permissions and limitations
-* under the License.
-*/
-package org.apache.cassandra.db;
-
-import java.io.ByteArrayInputStream;
-import java.io.DataOutputStream;
-import java.io.IOException;
-import java.io.DataInputStream;
-import java.util.Arrays;
-
-import org.apache.cassandra.io.ICompactSerializer;
-import org.apache.cassandra.io.util.DataOutputBuffer;
-import org.apache.cassandra.net.Message;
-import org.apache.cassandra.service.StorageService;
-import org.apache.cassandra.utils.FBUtilities;
-import org.apache.cassandra.concurrent.StageManager;
-
-public class RangeCommand
-{
-    private static RangeCommandSerializer serializer = new RangeCommandSerializer();
-
-    public final String table;
-    public final String columnFamily;
-    public final String startWith;
-    public final String stopAt;
-    public final int maxResults;
-
-    public RangeCommand(String table, String columnFamily, String startWith, String stopAt, int maxResults)
-    {
-        this.table = table;
-        this.columnFamily = columnFamily;
-        this.startWith = startWith;
-        this.stopAt = stopAt;
-        this.maxResults = maxResults;
-    }
-
-    public Message getMessage() throws IOException
-    {
-        DataOutputBuffer dob = new DataOutputBuffer();
-        serializer.serialize(this, dob);
-        return new Message(FBUtilities.getLocalAddress(),
-                           StageManager.READ_STAGE,
-                           StorageService.rangeVerbHandler_,
-                           Arrays.copyOf(dob.getData(), dob.getLength()));
-    }
-
-    public static RangeCommand read(Message message) throws IOException
-    {
-        byte[] bytes = message.getMessageBody();
-        ByteArrayInputStream bis = new ByteArrayInputStream(bytes);
-        return serializer.deserialize(new DataInputStream(bis));
-    }
-
-    public String toString()
-    {
-        return "RangeCommand(" +
-               "table='" + table + '\'' +
-               ", columnFamily=" + columnFamily +
-               ", startWith='" + startWith + '\'' +
-               ", stopAt='" + stopAt + '\'' +
-               ", maxResults=" + maxResults +
-               ')';
-    }
-}
-
-class RangeCommandSerializer implements ICompactSerializer<RangeCommand>
-{
-    public void serialize(RangeCommand command, DataOutputStream dos) throws IOException
-    {
-        dos.writeUTF(command.table);
-        dos.writeUTF(command.columnFamily);
-        dos.writeUTF(command.startWith);
-        dos.writeUTF(command.stopAt);
-        dos.writeInt(command.maxResults);
-    }
-
-    public RangeCommand deserialize(DataInputStream dis) throws IOException
-    {
-        return new RangeCommand(dis.readUTF(), dis.readUTF(), dis.readUTF(), dis.readUTF(), dis.readInt());
-    }
-}
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
index 427b6620..1708b755 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
@@ -625,6 +625,7 @@ else if (propertyName.equals("version"))
 
         checkLoginDone();
 
+        ThriftValidation.validateColumnParent(keyspace, column_parent);
         ThriftValidation.validatePredicate(keyspace, column_parent, predicate);
         if (!StorageService.getPartitioner().preservesOrder())
         {
@@ -663,38 +664,6 @@ else if (propertyName.equals("version"))
         return keySlices;
     }
 
-    public List<String> get_key_range(String tablename, String columnFamily, String startWith, String stopAt, int maxResults, ConsistencyLevel consistency_level)
-            throws InvalidRequestException, TException, UnavailableException, TimedOutException
-    {
-        if (logger.isDebugEnabled())
-            logger.debug("get_key_range");
-
-        checkLoginDone();
-
-        ThriftValidation.validateCommand(tablename, columnFamily);
-        if (!StorageService.getPartitioner().preservesOrder())
-        {
-            throw new InvalidRequestException("range queries may only be performed against an order-preserving partitioner");
-        }
-        if (maxResults <= 0)
-        {
-            throw new InvalidRequestException("maxResults must be positive");
-        }
-
-        try
-        {
-            return StorageProxy.getKeyRange(new RangeCommand(tablename, columnFamily, startWith, stopAt, maxResults));
-        }
-        catch (TimeoutException e)
-        {
-        	throw new TimedOutException();
-        }
-        catch (IOException e)
-        {
-            throw new RuntimeException(e);
-        }
-    }
-
     @Override
     public void login(String keyspace, AuthenticationRequest auth_request) throws AuthenticationException, AuthorizationException, TException
     {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/RangeVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/RangeVerbHandler.java
index 7303718a..e69de29b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/RangeVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/RangeVerbHandler.java
@@ -1,52 +0,0 @@
-/*
-* Licensed to the Apache Software Foundation (ASF) under one
-* or more contributor license agreements.  See the NOTICE file
-* distributed with this work for additional information
-* regarding copyright ownership.  The ASF licenses this file
-* to you under the Apache License, Version 2.0 (the
-* "License"); you may not use this file except in compliance
-* with the License.  You may obtain a copy of the License at
-*
-*    http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing,
-* software distributed under the License is distributed on an
-* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-* KIND, either express or implied.  See the License for the
-* specific language governing permissions and limitations
-* under the License.
-*/
-package org.apache.cassandra.service;
-
-import org.apache.log4j.Logger;
-
-import org.apache.cassandra.db.RangeCommand;
-import org.apache.cassandra.db.RangeReply;
-import org.apache.cassandra.db.Table;
-import org.apache.cassandra.net.IVerbHandler;
-import org.apache.cassandra.net.Message;
-import org.apache.cassandra.net.MessagingService;
-
-public class RangeVerbHandler implements IVerbHandler
-{
-    private static final Logger logger = Logger.getLogger(RangeVerbHandler.class);
-
-    public void doVerb(Message message)
-    {
-        try
-        {
-            RangeCommand command = RangeCommand.read(message);
-            Table table = Table.open(command.table);
-
-            RangeReply rangeReply = table.getColumnFamilyStore(command.columnFamily).getKeyRange(command.startWith, command.stopAt, command.maxResults);
-            Message response = rangeReply.getReply(message);
-            if (logger.isDebugEnabled())
-                logger.debug("Sending " + rangeReply + " to " + message.getMessageId() + "@" + message.getFrom());
-            MessagingService.instance().sendOneWay(response, message.getFrom());
-        }
-        catch (Exception e)
-        {
-            throw new RuntimeException(e);
-        }
-    }
-}
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
index 48214d47..b0a09366 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -592,53 +592,6 @@ public int compare(Pair<String, ColumnFamily> o1, Pair<String, ColumnFamily> o2)
         return results;
     }
 
-    static List<String> getKeyRange(RangeCommand command) throws IOException, UnavailableException, TimeoutException
-    {
-        long startTime = System.currentTimeMillis();
-        TokenMetadata tokenMetadata = StorageService.instance.getTokenMetadata();
-        Set<String> uniqueKeys = new HashSet<String>(command.maxResults);
-
-        InetAddress endPoint = StorageService.instance.findSuitableEndPoint(command.startWith);
-        InetAddress startEndpoint = endPoint;
-
-        do
-        {
-            Message message = command.getMessage();
-            if (logger.isDebugEnabled())
-                logger.debug("reading " + command + " from " + message.getMessageId() + "@" + endPoint);
-            IAsyncResult iar = MessagingService.instance().sendRR(message, endPoint);
-
-            // read response
-            byte[] responseBody;
-            responseBody = iar.get(DatabaseDescriptor.getRpcTimeout(), TimeUnit.MILLISECONDS);
-           
-            RangeReply rangeReply = RangeReply.read(responseBody);
-            uniqueKeys.addAll(rangeReply.keys);
-
-            if (uniqueKeys.size() >= command.maxResults || rangeReply.rangeCompletedLocally)
-            {
-                break;
-            }
-
-            // set up the next query --
-            // it's tempting to try to optimize this by starting with the last key seen for the next node,
-            // but that won't work when you have a replication factor of more than one--any node, not just
-            // the one holding the keys where the range wraps, could include both the smallest keys, and the largest,
-            // so starting with the largest in our scan of the next node means we'd never see keys from the middle.
-            do
-            {
-                endPoint = tokenMetadata.getSuccessor(endPoint);
-            } while (!FailureDetector.instance.isAlive(endPoint));
-        } while (!endPoint.equals(startEndpoint));
-
-        rangeStats.add(System.currentTimeMillis() - startTime);
-        List<String> allKeys = new ArrayList<String>(uniqueKeys);
-        Collections.sort(allKeys, keyComparator);
-        return (allKeys.size() > command.maxResults)
-               ? allKeys.subList(0, command.maxResults)
-               : allKeys;
-    }
-
     public double getReadLatency()
     {
         return readStats.mean();
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index ded195dd..5e04f053 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -83,7 +83,6 @@
     public final static String streamInitiateDoneVerbHandler_ = "BOOTSTRAP-INITIATE-DONE-VERB-HANDLER";
     public final static String streamFinishedVerbHandler_ = "BOOTSTRAP-TERMINATE-VERB-HANDLER";
     public final static String streamRequestVerbHandler_ = "BS-METADATA-VERB-HANDLER";
-    public final static String rangeVerbHandler_ = "RANGE-VERB-HANDLER";
     public final static String rangeSliceVerbHandler_ = "RANGE-SLICE-VERB-HANDLER";
     public final static String bootstrapTokenVerbHandler_ = "SPLITS-VERB-HANDLER";
 
@@ -193,7 +192,6 @@ public StorageService()
         MessagingService.instance().registerVerbHandlers(mutationVerbHandler_, new RowMutationVerbHandler());
         MessagingService.instance().registerVerbHandlers(readRepairVerbHandler_, new ReadRepairVerbHandler());
         MessagingService.instance().registerVerbHandlers(readVerbHandler_, new ReadVerbHandler());
-        MessagingService.instance().registerVerbHandlers(rangeVerbHandler_, new RangeVerbHandler());
         MessagingService.instance().registerVerbHandlers(rangeSliceVerbHandler_, new RangeSliceVerbHandler());
         // see BootStrapper for a summary of how the bootstrap verbs interact
         MessagingService.instance().registerVerbHandlers(bootstrapTokenVerbHandler_, new BootStrapper.BootstrapTokenVerbHandler());
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ThriftValidation.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ThriftValidation.java
index ddda241c..34049975 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ThriftValidation.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/ThriftValidation.java
@@ -44,18 +44,6 @@ static void validateKey(String key) throws InvalidRequestException
         }
     }
 
-    static void validateCommand(String tablename, String... columnFamilyNames) throws KeyspaceNotDefinedException, ColumnFamilyNotDefinedException
-    {
-        validateTable(tablename);
-        for (String cfName : columnFamilyNames)
-        {
-            if (DatabaseDescriptor.getColumnType(tablename, cfName) == null)
-            {
-                throw new ColumnFamilyNotDefinedException("Column Family " + cfName + " is invalid.");
-            }
-        }
-    }
-
     private static void validateTable(String tablename) throws KeyspaceNotDefinedException
     {
         if (!DatabaseDescriptor.getTables().contains(tablename))
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/CompactionsTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/CompactionsTest.java
index 7bc58f95..93d3722a 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/CompactionsTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/CompactionsTest.java
@@ -27,6 +27,7 @@
 import java.util.HashSet;
 import java.util.Collection;
 
+import org.apache.cassandra.service.StorageService;
 import org.junit.Test;
 
 import org.apache.cassandra.io.SSTableReader;
@@ -50,6 +51,7 @@ public void testCompactions() throws IOException, ExecutionException, Interrupte
         // this test does enough rows to force multiple block indexes to be used
         Table table = Table.open(TABLE1);
         ColumnFamilyStore store = table.getColumnFamilyStore("Standard1");
+        DecoratedKey emptyKey = StorageService.getPartitioner().decorateKey("");
 
         final int ROWS_PER_SSTABLE = 10;
         Set<String> inserted = new HashSet<String>();
@@ -62,7 +64,7 @@ public void testCompactions() throws IOException, ExecutionException, Interrupte
                 inserted.add(key);
             }
             store.forceBlockingFlush();
-            assertEquals(inserted.size(), table.getColumnFamilyStore("Standard1").getKeyRange("", "", 10000).keys.size());
+            assertEquals(inserted.size(), table.getColumnFamilyStore("Standard1").getKeyRange(emptyKey, emptyKey, 10000).keys.size());
         }
         while (true)
         {
@@ -74,7 +76,7 @@ public void testCompactions() throws IOException, ExecutionException, Interrupte
         {
             CompactionManager.instance.submitMajor(store).get();
         }
-        assertEquals(inserted.size(), table.getColumnFamilyStore("Standard1").getKeyRange("", "", 10000).keys.size());
+        assertEquals(inserted.size(), table.getColumnFamilyStore("Standard1").getKeyRange(emptyKey, emptyKey, 10000).keys.size());
     }
 
     @Test
@@ -84,6 +86,7 @@ public void testCompactionReadonly() throws IOException, ExecutionException, Int
 
         Table table = Table.open(TABLE2);
         ColumnFamilyStore store = table.getColumnFamilyStore("Standard1");
+        DecoratedKey emptyKey = StorageService.getPartitioner().decorateKey("");
 
         final int ROWS_PER_SSTABLE = 10;
         Set<String> inserted = new HashSet<String>();
@@ -96,13 +99,13 @@ public void testCompactionReadonly() throws IOException, ExecutionException, Int
                 inserted.add(key);
             }
             store.forceBlockingFlush();
-            assertEquals(inserted.size(), table.getColumnFamilyStore("Standard1").getKeyRange("", "", 10000).keys.size());
+            assertEquals(inserted.size(), table.getColumnFamilyStore("Standard1").getKeyRange(emptyKey, emptyKey, 10000).keys.size());
         }
 
         // perform readonly compaction and confirm that no sstables changed
         ArrayList<SSTableReader> oldsstables = new ArrayList<SSTableReader>(store.getSSTables());
         CompactionManager.instance.submitReadonly(store, LOCAL).get();
         assertEquals(oldsstables, new ArrayList<SSTableReader>(store.getSSTables()));
-        assertEquals(inserted.size(), table.getColumnFamilyStore("Standard1").getKeyRange("", "", 10000).keys.size());
+        assertEquals(inserted.size(), table.getColumnFamilyStore("Standard1").getKeyRange(emptyKey, emptyKey, 10000).keys.size());
     }
 }
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/OneCompactionTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/OneCompactionTest.java
index 1b310442..2c0f04df 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/OneCompactionTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/OneCompactionTest.java
@@ -20,10 +20,10 @@
 
 import java.io.IOException;
 import java.util.concurrent.ExecutionException;
-import java.util.concurrent.Future;
 import java.util.Set;
 import java.util.HashSet;
 
+import org.apache.cassandra.service.StorageService;
 import org.junit.Test;
 
 import static junit.framework.Assert.assertEquals;
@@ -38,6 +38,7 @@ private void testCompaction(String columnFamilyName, int insertsPerTable) throws
 
         Table table = Table.open("Keyspace1");
         ColumnFamilyStore store = table.getColumnFamilyStore(columnFamilyName);
+        DecoratedKey emptyKey = StorageService.getPartitioner().decorateKey("");
 
         Set<String> inserted = new HashSet<String>();
         for (int j = 0; j < insertsPerTable; j++) {
@@ -47,11 +48,10 @@ private void testCompaction(String columnFamilyName, int insertsPerTable) throws
             rm.apply();
             inserted.add(key);
             store.forceBlockingFlush();
-            assertEquals(inserted.size(), table.getColumnFamilyStore(columnFamilyName).getKeyRange("", "", 10000).keys.size());
+            assertEquals(inserted.size(), table.getColumnFamilyStore(columnFamilyName).getKeyRange(emptyKey, emptyKey, 10000).keys.size());
         }
         CompactionManager.instance.submitMajor(store).get();
         assertEquals(1, store.getSSTables().size());
-        assertEquals(table.getColumnFamilyStore(columnFamilyName).getKeyRange("", "", 10000).keys.size(), inserted.size());
     }
 
     @Test
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/RecoveryManager2Test.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/RecoveryManager2Test.java
index 57677cd7..d5bc1921 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/RecoveryManager2Test.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/RecoveryManager2Test.java
@@ -27,6 +27,7 @@
 import java.util.HashSet;
 import java.util.Collections;
 
+import org.apache.cassandra.service.StorageService;
 import org.junit.Test;
 
 import org.apache.cassandra.CleanupHelper;
@@ -38,6 +39,7 @@
     public void testWithFlush() throws IOException, ExecutionException, InterruptedException
     {
         CompactionManager.instance.disableAutoCompaction();
+        DecoratedKey emptyKey = StorageService.getPartitioner().decorateKey("");
 
         for (int i = 0; i < 100; i++)
         {
@@ -52,7 +54,7 @@ public void testWithFlush() throws IOException, ExecutionException, InterruptedE
         cfs.clearUnsafe();
         RecoveryManager.doRecovery(); // this is a no-op. is testing this useful?
 
-        Set<String> foundKeys = new HashSet<String>(cfs.getKeyRange("", "", 1000).keys);
+        Set<String> foundKeys = new HashSet<String>(cfs.getKeyRange(emptyKey, emptyKey, 1000).keys);
         assert foundKeys.equals(Collections.emptySet());
     }
 
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/io/StreamingTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/io/StreamingTest.java
index 815b5fe8..93fa9790 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/io/StreamingTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/io/StreamingTest.java
@@ -19,14 +19,13 @@
 package org.apache.cassandra.io;
 
 import static junit.framework.Assert.assertEquals;
-import static org.junit.Assert.*;
 
 import java.net.InetAddress;
-import java.io.IOException;
 import java.util.*;
 
 import org.apache.cassandra.CleanupHelper;
 import org.apache.cassandra.db.ColumnFamilyStore;
+import org.apache.cassandra.db.DecoratedKey;
 import org.apache.cassandra.db.RangeReply;
 import org.apache.cassandra.db.Table;
 import org.apache.cassandra.io.SSTableUtils;
@@ -44,6 +43,7 @@
     public void testTransferTable() throws Exception
     {
         StorageService.instance.initServer();
+        DecoratedKey emptyKey = StorageService.getPartitioner().decorateKey("");
 
         // write a temporary SSTable, but don't register it
         Set<String> content = new HashSet<String>();
@@ -57,7 +57,7 @@ public void testTransferTable() throws Exception
 
         // confirm that the SSTable was transferred and registered
         ColumnFamilyStore cfstore = Table.open(tablename).getColumnFamilyStore(cfname);
-        RangeReply rr = cfstore.getKeyRange("", "", 2);
+        RangeReply rr = cfstore.getKeyRange(emptyKey, emptyKey, 2);
         assert rr.keys.size() == 1;
         assert rr.keys.contains("key");
     }
