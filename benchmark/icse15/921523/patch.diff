diff --git a/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/framework/ServiceStateMBean.java b/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/framework/ServiceStateMBean.java
index 29401d8a..803f061f 100644
--- a/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/framework/ServiceStateMBean.java
+++ b/incubator/aries/trunk/jmx/jmx-api/src/main/java/org/osgi/jmx/framework/ServiceStateMBean.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) OSGi Alliance (2009). All Rights Reserved.
+ * Copyright (c) OSGi Alliance (2009, 2010). All Rights Reserved.
  * 
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -31,7 +31,8 @@
  * emits events that clients can use to get notified of the changes in the
  * service state of the framework.
  * 
- * @version $Rev$
+ * @version $Revision$
+ * @ThreadSafe
  */
 public interface ServiceStateMBean {
 	/**
@@ -93,31 +94,18 @@
 			"The bundles using the service", JmxConstants.LONG_ARRAY_TYPE);
 
 	/**
-	 * The key PROPERTIES, used in {@link #PROPERTIES_ITEM}.
-	 */
-	String PROPERTIES = "Properties";
-
-	/**
-	 * The item containing service properties. The key is {@link #PROPERTIES}
-	 * and the type is {@link JmxConstants#PROPERTIES_TYPE}.
-	 */
-	Item PROPERTIES_ITEM = new Item(PROPERTIES, "The service properties",
-			JmxConstants.PROPERTIES_TYPE);
-
-	/**
-	 * The item names in the CompositeData representing the service. This type
+	 * The Composite Type for a CompositeData representing a service. This type
 	 * consists of:
 	 * <ul>
 	 * <li>{@link #BUNDLE_IDENTIFIER}</li>
 	 * <li>{@link #IDENTIFIER}</li>
 	 * <li>{@link #OBJECT_CLASS}</li>
-	 * <li>{@link #PROPERTIES}</li>
 	 * <li>{@link #USING_BUNDLES}</li>
 	 * </ul>
 	 */
 	CompositeType SERVICE_TYPE = Item.compositeType("SERVICE",
 			"This type encapsulates an OSGi service", BUNDLE_IDENTIFIER_ITEM,
-			IDENTIFIER_ITEM, OBJECT_CLASS_ITEM, PROPERTIES_ITEM,
+			IDENTIFIER_ITEM, OBJECT_CLASS_ITEM,
 			USING_BUNDLES_ITEM);
 
 	/**
diff --git a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/ServiceData.java b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/ServiceData.java
index b16b6f14..036f5f3d 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/ServiceData.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/codec/ServiceData.java
@@ -19,25 +19,18 @@
 import static org.apache.aries.jmx.util.FrameworkUtils.getBundleIds;
 import static org.apache.aries.jmx.util.TypeUtils.toLong;
 import static org.apache.aries.jmx.util.TypeUtils.toPrimitive;
-import static org.osgi.jmx.JmxConstants.PROPERTIES_TYPE;
 import static org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_IDENTIFIER;
 import static org.osgi.jmx.framework.ServiceStateMBean.IDENTIFIER;
 import static org.osgi.jmx.framework.ServiceStateMBean.OBJECT_CLASS;
-import static org.osgi.jmx.framework.ServiceStateMBean.PROPERTIES;
 import static org.osgi.jmx.framework.ServiceStateMBean.SERVICE_TYPE;
 import static org.osgi.jmx.framework.ServiceStateMBean.USING_BUNDLES;
 
-import java.util.ArrayList;
-import java.util.Collection;
 import java.util.HashMap;
-import java.util.List;
 import java.util.Map;
 
 import javax.management.openmbean.CompositeData;
 import javax.management.openmbean.CompositeDataSupport;
 import javax.management.openmbean.OpenDataException;
-import javax.management.openmbean.TabularData;
-import javax.management.openmbean.TabularDataSupport;
 
 import org.osgi.framework.Constants;
 import org.osgi.framework.ServiceReference;
@@ -68,10 +61,11 @@
      */
     private String[] serviceInterfaces;
     
-    /**
-     * @see ServiceStateMBean#PROPERTIES_ITEM
-     */
-    private List<PropertyData<? extends Object>> properties = new ArrayList<PropertyData<? extends Object>>();
+    // keep properties for next version of the spec
+    ///**
+    // * @see ServiceStateMBean#PROPERTIES_ITEM
+    // */
+    //private List<PropertyData<? extends Object>> properties = new ArrayList<PropertyData<? extends Object>>();
     
     /**
      * @see ServiceStateMBean#USING_BUNDLES_ITEM
@@ -90,9 +84,9 @@ public ServiceData(ServiceReference serviceReference) throws IllegalArgumentExce
         this.bundleId = serviceReference.getBundle().getBundleId();
         this.serviceInterfaces = (String[]) serviceReference.getProperty(Constants.OBJECTCLASS);
         this.usingBundles = getBundleIds(serviceReference.getUsingBundles());
-        for (String propertyKey: serviceReference.getPropertyKeys()) {
-            this.properties.add(PropertyData.newInstance(propertyKey, serviceReference.getProperty(propertyKey)));
-        }
+        //for (String propertyKey: serviceReference.getPropertyKeys()) {
+        //    this.properties.add(PropertyData.newInstance(propertyKey, serviceReference.getProperty(propertyKey)));
+        //}
     }
 
     /**
@@ -105,11 +99,11 @@ public CompositeData toCompositeData() {
         items.put(IDENTIFIER, this.serviceId);
         items.put(BUNDLE_IDENTIFIER, this.bundleId);
         items.put(OBJECT_CLASS, this.serviceInterfaces);
-        TabularData propertiesTable = new TabularDataSupport(PROPERTIES_TYPE);
-        for (PropertyData<? extends Object> propertyData : this.properties) {
-            propertiesTable.put(propertyData.toCompositeData());
-        }
-        items.put(PROPERTIES, propertiesTable);
+        //TabularData propertiesTable = new TabularDataSupport(PROPERTIES_TYPE);
+        //for (PropertyData<? extends Object> propertyData : this.properties) {
+        //    propertiesTable.put(propertyData.toCompositeData());
+        //}
+        // items.put(PROPERTIES, propertiesTable);
         items.put(USING_BUNDLES, toLong(this.usingBundles));
         try {
             result = new CompositeDataSupport(SERVICE_TYPE, items);
@@ -128,7 +122,6 @@ public CompositeData toCompositeData() {
      * @throws IlleglArugmentException
      *             if compositeData is null or not of type {@link ServiceStateMBean#SERVICE_TYPE}.
      */
-    @SuppressWarnings("unchecked")
     public static ServiceData from(CompositeData compositeData) {
         if (compositeData == null) {
             throw new IllegalArgumentException("Argument compositeData cannot be null");
@@ -141,11 +134,11 @@ public static ServiceData from(CompositeData compositeData) {
         serviceData.bundleId = (Long) compositeData.get(BUNDLE_IDENTIFIER);
         serviceData.serviceInterfaces = (String[]) compositeData.get(OBJECT_CLASS);
         serviceData.usingBundles = toPrimitive((Long[]) compositeData.get(USING_BUNDLES));
-        TabularData propertiesTable = (TabularData) compositeData.get(PROPERTIES);
-        Collection<CompositeData> propertyData = (Collection<CompositeData>) propertiesTable.values();
-        for (CompositeData propertyRow: propertyData) {
-            serviceData.properties.add(PropertyData.from(propertyRow));
-        }
+        // TabularData propertiesTable = (TabularData) compositeData.get(PROPERTIES);
+        // Collection<CompositeData> propertyData = (Collection<CompositeData>) propertiesTable.values();
+        // for (CompositeData propertyRow: propertyData) {
+        //     serviceData.properties.add(PropertyData.from(propertyRow));
+        // }
         return serviceData;
     }
 
@@ -161,9 +154,9 @@ public long getBundleId() {
         return serviceInterfaces;
     }
 
-    public List<PropertyData<? extends Object>> getProperties() {
-        return properties;
-    }
+    //public List<PropertyData<? extends Object>> getProperties() {
+    //    return properties;
+    //}
 
     public long[] getUsingBundles() {
         return usingBundles;
diff --git a/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/codec/ServiceDataTest.java b/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/codec/ServiceDataTest.java
index f9cb215f..4c04b54d 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/codec/ServiceDataTest.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/test/java/org/apache/aries/jmx/codec/ServiceDataTest.java
@@ -18,34 +18,19 @@
 
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
-import static org.osgi.jmx.JmxConstants.BOOLEAN;
-import static org.osgi.jmx.JmxConstants.KEY;
-import static org.osgi.jmx.JmxConstants.LONG;
-import static org.osgi.jmx.JmxConstants.PROPERTIES_TYPE;
-import static org.osgi.jmx.JmxConstants.P_BOOLEAN;
-import static org.osgi.jmx.JmxConstants.STRING;
-import static org.osgi.jmx.JmxConstants.TYPE;
-import static org.osgi.jmx.JmxConstants.VALUE;
 import static org.osgi.jmx.framework.BundleStateMBean.IDENTIFIER;
 import static org.osgi.jmx.framework.ServiceStateMBean.BUNDLE_IDENTIFIER;
 import static org.osgi.jmx.framework.ServiceStateMBean.OBJECT_CLASS;
-import static org.osgi.jmx.framework.ServiceStateMBean.PROPERTIES;
 import static org.osgi.jmx.framework.ServiceStateMBean.SERVICE_TYPE;
 import static org.osgi.jmx.framework.ServiceStateMBean.USING_BUNDLES;
 
-import java.util.Collection;
 import java.util.HashMap;
-import java.util.List;
 import java.util.Map;
 
 import javax.management.openmbean.CompositeData;
 import javax.management.openmbean.CompositeDataSupport;
-import javax.management.openmbean.TabularData;
-import javax.management.openmbean.TabularDataSupport;
 
 import org.junit.Test;
 import org.osgi.framework.Bundle;
@@ -61,7 +46,6 @@
 
    
     @Test
-    @SuppressWarnings("unchecked")
     public void testToCompositeData() throws Exception {
 
         ServiceReference reference = mock(ServiceReference.class);
@@ -93,27 +77,28 @@ public void testToCompositeData() throws Exception {
         assertEquals(new Long(34), compositeData.get(BUNDLE_IDENTIFIER));
         assertArrayEquals( new Long[] {new Long(6), new Long(9)}, (Long[]) compositeData.get(USING_BUNDLES));
         assertArrayEquals(interfaces, (String[]) compositeData.get(OBJECT_CLASS));
-        TabularData propertiesTable = (TabularData) compositeData.get(PROPERTIES);
-        Collection<CompositeData> propertyData = (Collection<CompositeData>) propertiesTable.values();
-        assertEquals(4, propertyData.size());
-        for (CompositeData propertyRow: propertyData) {
-            String key = (String) propertyRow.get(KEY);
-            if (key.equals("x.vendor")) {
-                assertEquals("aries", propertyRow.get(VALUE));
-                assertEquals(STRING, propertyRow.get(TYPE));
-            } else if (key.equals("x.domain")) {
-                assertEquals("test", propertyRow.get(VALUE));
-                assertEquals(STRING, propertyRow.get(TYPE));
-            } else if (key.equals("x.index")) {
-                assertEquals("67", propertyRow.get(VALUE));
-                assertEquals(LONG, propertyRow.get(TYPE));
-            } else if (key.equals("x.optimized")) {
-                assertEquals("true", propertyRow.get(VALUE));
-                assertEquals(BOOLEAN, propertyRow.get(TYPE));
-            } else {
-                fail("unknown key parsed from properties");
-            }
-        }
+        // keep Properties for next version
+        //TabularData propertiesTable = (TabularData) compositeData.get(PROPERTIES);
+        //Collection<CompositeData> propertyData = (Collection<CompositeData>) propertiesTable.values();
+        //assertEquals(4, propertyData.size());
+        //for (CompositeData propertyRow: propertyData) {
+        //    String key = (String) propertyRow.get(KEY);
+        //    if (key.equals("x.vendor")) {
+        //        assertEquals("aries", propertyRow.get(VALUE));
+        //        assertEquals(STRING, propertyRow.get(TYPE));
+        //    } else if (key.equals("x.domain")) {
+        //        assertEquals("test", propertyRow.get(VALUE));
+        //        assertEquals(STRING, propertyRow.get(TYPE));
+        //    } else if (key.equals("x.index")) {
+        //        assertEquals("67", propertyRow.get(VALUE));
+        //        assertEquals(LONG, propertyRow.get(TYPE));
+        //    } else if (key.equals("x.optimized")) {
+        //        assertEquals("true", propertyRow.get(VALUE));
+        //        assertEquals(BOOLEAN, propertyRow.get(TYPE));
+        //    } else {
+        //        fail("unknown key parsed from properties");
+        //    }
+        //}
     }
 
    
@@ -125,12 +110,12 @@ public void testFromCompositeData() throws Exception {
         items.put(BUNDLE_IDENTIFIER, new Long(5));
         items.put(USING_BUNDLES, new Long[] { new Long(10), new Long(11) });
         items.put(OBJECT_CLASS, new String[] { "org.apache.aries.jmx.Test", "org.apache.aries.jmx.Mock" });
-        TabularData propertyTable = new TabularDataSupport(PROPERTIES_TYPE);
-        propertyTable.put(PropertyData.newInstance("a", true).toCompositeData());
-        propertyTable.put(PropertyData.newInstance("b", "value").toCompositeData());
-        propertyTable.put(PropertyData.newInstance("c", new int[] {1, 2}).toCompositeData());
-        propertyTable.put(PropertyData.newInstance("d", new Long[] {new Long(3), new Long(4)}).toCompositeData());
-        items.put(PROPERTIES, propertyTable);
+        //TabularData propertyTable = new TabularDataSupport(PROPERTIES_TYPE);
+        //propertyTable.put(PropertyData.newInstance("a", true).toCompositeData());
+        //propertyTable.put(PropertyData.newInstance("b", "value").toCompositeData());
+        //propertyTable.put(PropertyData.newInstance("c", new int[] {1, 2}).toCompositeData());
+        //propertyTable.put(PropertyData.newInstance("d", new Long[] {new Long(3), new Long(4)}).toCompositeData());
+        //items.put(PROPERTIES, propertyTable);
         CompositeData compositeData = new CompositeDataSupport(SERVICE_TYPE, items);
         
         ServiceData data = ServiceData.from(compositeData);
@@ -139,29 +124,28 @@ public void testFromCompositeData() throws Exception {
         assertArrayEquals(new long[] {10, 11}, data.getUsingBundles());
         assertArrayEquals(new String[] { "org.apache.aries.jmx.Test", "org.apache.aries.jmx.Mock" }, data.getServiceInterfaces());
         
-        List<PropertyData<? extends Object>> properties = data.getProperties();
-        assertEquals(4, properties.size());
-        
-        for (PropertyData<? extends Object> property: properties) {
-            if (property.getKey().equals("a")) {
-                assertTrue((Boolean) property.getValue());
-                assertEquals(P_BOOLEAN, property.getEncodedType());
-            } else if (property.getKey().equals("b")) {
-                assertEquals("value", property.getValue());
-                assertEquals(STRING, property.getEncodedType());
-            } else if (property.getKey().equals("c")) {
-                assertArrayEquals(new int[] { 1, 2 }, (int[]) property.getValue());
-                assertEquals("Array of int", property.getEncodedType());
-                assertEquals("1,2", property.getEncodedValue());
-            } else if (property.getKey().equals("d")) {
-                assertArrayEquals(new Long[] {new Long(3), new Long(4) }, (Long[]) property.getValue());
-                assertEquals("Array of Long", property.getEncodedType());
-                assertEquals("3,4", property.getEncodedValue());
-            } else {
-                fail("unknown key parsed from properties");
-            }
-        }
+        //List<PropertyData<? extends Object>> properties = data.getProperties();
+        //assertEquals(4, properties.size());
         
+        //for (PropertyData<? extends Object> property: properties) {
+        //    if (property.getKey().equals("a")) {
+        //        assertTrue((Boolean) property.getValue());
+        //        assertEquals(P_BOOLEAN, property.getEncodedType());
+        //    } else if (property.getKey().equals("b")) {
+        //        assertEquals("value", property.getValue());
+        //        assertEquals(STRING, property.getEncodedType());
+        //    } else if (property.getKey().equals("c")) {
+        //        assertArrayEquals(new int[] { 1, 2 }, (int[]) property.getValue());
+        //        assertEquals("Array of int", property.getEncodedType());
+        //        assertEquals("1,2", property.getEncodedValue());
+        //    } else if (property.getKey().equals("d")) {
+        //        assertArrayEquals(new Long[] {new Long(3), new Long(4) }, (Long[]) property.getValue());
+        //        assertEquals("Array of Long", property.getEncodedType());
+        //        assertEquals("3,4", property.getEncodedValue());
+        //    } else {
+        //        fail("unknown key parsed from properties");
+        //    }
+        //}       
     }
 
 }
