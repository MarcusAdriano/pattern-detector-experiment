diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
index 6bc800ec..103dea60 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
@@ -117,6 +117,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private String[] projectedColumnNames; // for RestrictedVTIs
     private Restriction vtiRestriction; // for RestrictedVTIs
 
+    // for remapping column references in VTI args at code generation time
+    private HashMap argSources = new HashMap();
+
     /**
 	 * @param invocation		The constructor or static method for the VTI
 	 * @param correlationName	The correlation name
@@ -892,6 +895,10 @@ public void bindExpressions(FromList fromListParam)
 
                 if ( referencedTableNumber == fromTable.getTableNumber() )
                 {
+                    // remember this FromTable so that we can code generate the arg
+                    // from actual result columns later on.
+                    argSources.put( new Integer( fromTable.getTableNumber() ), fromTable );
+                    
                     if ( isDerbyStyleTableFunction || (fromTable instanceof FromVTI) )
                     {
                         throw StandardException.newException
@@ -1503,6 +1510,7 @@ public void generate(ActivationClassBuilder acb,
 		 */
 		RemapCRsVisitor rcrv = new RemapCRsVisitor(true);
 		methodCall.accept(rcrv);
+        remapBaseTableColumns();
 
 		/* Get the next ResultSet #, so that we can number this ResultSetNode, its
 		 * ResultColumnList and ResultSet.
@@ -1514,6 +1522,36 @@ public void generate(ActivationClassBuilder acb,
 		mb.callMethod(VMOpcode.INVOKEINTERFACE, (String) null, "getVTIResultSet",ClassName.NoPutResultSet, nargs);
 	}
 
+    /**
+     * <p>
+     * Remap the column references in vti arguments.
+     * Point those column references at the result columns for the base table. This
+     * prevents us from code-generating the args from references to unfilled columns in
+     * higher join nodes. See DERBY-5554.
+     * </p>
+     */
+    private void remapBaseTableColumns() throws StandardException
+    {
+		Vector colRefs = getNodesFromParameters(ColumnReference.class);
+		for (Enumeration e = colRefs.elements(); e.hasMoreElements(); )
+		{
+			ColumnReference ref = (ColumnReference)e.nextElement();
+            FromTable   fromTable = (FromTable) argSources.get( new Integer( ref.getTableNumber() ) );
+
+            if ( fromTable != null )
+            {
+                ResultColumnList    rcl = fromTable.getResultColumns();
+
+                if ( rcl != null )
+                {
+                    ResultColumn    newRC = rcl.getResultColumn( ref.getColumnName() );
+
+                    if ( newRC != null ) { ref.setSource( newRC ); }
+                }
+            }
+        }
+    }
+
 	private int getScanArguments(ActivationClassBuilder acb,
 										  MethodBuilder mb)
 		throws StandardException
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java
index 754a58a0..325b3289 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/SysDiagVTIMappingTest.java
@@ -370,6 +370,34 @@ public void testSpaceTable() throws Exception
         JDBC.assertColumnNames(rs, ALL_SPACE_TABLE_COLUMNS);
         JDBC.assertFullResultSet(rs, expRS, true);
         
+        // verify the fix to DERBY-5554: joins to VTIs in the FROM list still
+        // work when there are more than 1 base tables in the FROM list and
+        // they join in the WHERE clause
+        
+        rs = st.executeQuery
+            (
+             "select t2.*\n" +
+             "    from\n" +
+             "        sys.systables systabs,\n" +
+             "        table (syscs_diag.space_table(systabs.tablename)) as t2,\n" +
+             "        sys.sysconglomerates syscgs\n" +
+             "    where systabs.tabletype = 'T' and systabs.tableid = syscgs.tableid\n"
+             );        
+        JDBC.assertColumnNames(rs, ALL_SPACE_TABLE_COLUMNS);
+        JDBC.assertFullResultSet(rs, expRS, true);
+
+        rs = st.executeQuery
+            (
+             "select t2.*\n" +
+             "    from\n" +
+             "        sys.sysconglomerates syscgs,\n" +
+             "        table (syscs_diag.space_table(systabs.tablename)) as t2,\n" +
+             "        sys.systables systabs\n" +
+             "    where systabs.tabletype = 'T' and systabs.tableid = syscgs.tableid\n"
+             );        
+        JDBC.assertColumnNames(rs, ALL_SPACE_TABLE_COLUMNS);
+        JDBC.assertFullResultSet(rs, expRS, true);
+
         // Now do some sanity checking to make sure SPACE_TABLE cannot be
         // used in any illegal ways.        
 
