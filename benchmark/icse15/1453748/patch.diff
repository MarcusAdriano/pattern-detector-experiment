diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/VersionCombinationConfigurator.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/VersionCombinationConfigurator.java
index ffdb170f..5e8de98f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/VersionCombinationConfigurator.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/compatibility/VersionCombinationConfigurator.java
@@ -37,6 +37,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derbyTesting.junit.BaseTestCase;
 import org.apache.derbyTesting.junit.DerbyDistribution;
 import org.apache.derbyTesting.junit.DerbyVersion;
+import org.apache.derbyTesting.junit.JDBC;
 import org.apache.derbyTesting.junit.TestConfiguration;
 
 /**
@@ -171,6 +172,12 @@ public int addTests(TestSuite suite) {
         // Generate a list of all the combinations.
         for (DerbyDistribution server : dists) {
             DerbyVersion serverVersion = server.getVersion();
+
+            // Check if testing of this server version should be skipped.
+            if (skipServerVersion(serverVersion)) {
+                continue;
+            }
+
             TestSuite clientSuites = new TestSuite(
                     "Client runs against server " + serverVersion.toString());
             for (DerbyDistribution client : dists) {
@@ -202,6 +209,29 @@ public void setExcludes(List<DerbyVersion> toExclude) {
         }
     }
 
+    /**
+     * Check if a certain server version should be skipped due to bugs that
+     * prevent it from working in the current environment.
+     *
+     * @param version the server version to check
+     * @return {@code true} if the specified version should be skipped, or
+     * {@code false} otherwise
+     */
+    private boolean skipServerVersion(DerbyVersion version) {
+
+        // DERBY-6098: Skip testing of server versions less than 10.10 if
+        // the JVM doesn't support JNDI. Earlier versions of the server don't
+        // accept connections if JNDI is not present.
+        if (!JDBC.vmSupportsJNDI() && version.lessThan(DerbyVersion._10_10)) {
+            println("Server version " + version + " was skipped because " +
+                    "it requires JNDI to run.");
+            return true;
+        }
+
+        // Default: don't skip
+        return false;
+    }
+
     /**
      * Filters Derby distributions available in the distribution repository.
      *
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DerbyVersion.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DerbyVersion.java
index 965d6856..10802221 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DerbyVersion.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/DerbyVersion.java
@@ -41,6 +41,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     public static final DerbyVersion _10_7     = new DerbyVersion(10,7,0,0);
     public static final DerbyVersion _10_8     = new DerbyVersion(10,8,0,0);
     public static final DerbyVersion _10_9     = new DerbyVersion(10,9,0,0);
+    public static final DerbyVersion _10_10    = new DerbyVersion(10,10,0,0);
 
     // A list of all known official Derby releases.
 
