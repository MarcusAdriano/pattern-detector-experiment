diff --git a/cassandra/trunk/contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java b/cassandra/trunk/contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java
index 371ca18a..47a8a7ce 100644
--- a/cassandra/trunk/contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java
+++ b/cassandra/trunk/contrib/pig/src/java/org/apache/cassandra/hadoop/pig/CassandraStorage.java
@@ -60,7 +60,7 @@ public Tuple getNext() throws IOException
             // load the next pair
             if (!reader.nextKeyValue())
                 return null;
-            String key = (String)reader.getCurrentKey();
+            byte[] key = (byte[])reader.getCurrentKey();
             SortedMap<byte[],IColumn> cf = (SortedMap<byte[],IColumn>)reader.getCurrentValue();
             assert key != null && cf != null;
             
diff --git a/cassandra/trunk/contrib/word_count/src/WordCount.java b/cassandra/trunk/contrib/word_count/src/WordCount.java
index b7ae3669..c850e04d 100644
--- a/cassandra/trunk/contrib/word_count/src/WordCount.java
+++ b/cassandra/trunk/contrib/word_count/src/WordCount.java
@@ -63,13 +63,13 @@ public static void main(String[] args) throws Exception
         System.exit(0);
     }
 
-    public static class TokenizerMapper extends Mapper<String, SortedMap<byte[], IColumn>, Text, IntWritable>
+    public static class TokenizerMapper extends Mapper<byte[], SortedMap<byte[], IColumn>, Text, IntWritable>
     {
         private final static IntWritable one = new IntWritable(1);
         private Text word = new Text();
         private String columnName;
 
-        public void map(String key, SortedMap<byte[], IColumn> columns, Context context) throws IOException, InterruptedException
+        public void map(byte[] key, SortedMap<byte[], IColumn> columns, Context context) throws IOException, InterruptedException
         {
             IColumn column = columns.get(columnName.getBytes());
             if (column == null)
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java
index b3bc9aea..50b2e59c 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java
@@ -59,7 +59,7 @@
      * @param column_path
      * @param consistency_level
      */
-    public ColumnOrSuperColumn get(String keyspace, String key, ColumnPath column_path, ConsistencyLevel consistency_level) throws InvalidRequestException, NotFoundException, UnavailableException, TimedOutException, TException;
+    public ColumnOrSuperColumn get(String keyspace, byte[] key, ColumnPath column_path, ConsistencyLevel consistency_level) throws InvalidRequestException, NotFoundException, UnavailableException, TimedOutException, TException;
 
     /**
      * Get the group of columns contained by column_parent (either a ColumnFamily name or a ColumnFamily/SuperColumn name
@@ -71,10 +71,10 @@
      * @param predicate
      * @param consistency_level
      */
-    public List<ColumnOrSuperColumn> get_slice(String keyspace, String key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException;
+    public List<ColumnOrSuperColumn> get_slice(String keyspace, byte[] key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException;
 
     /**
-     * Perform a get for column_path in parallel on the given list<string> keys. The return value maps keys to the
+     * Perform a get for column_path in parallel on the given list<binary> keys. The return value maps keys to the
      * ColumnOrSuperColumn found. If no value corresponding to a key is present, the key will still be in the map, but both
      * the column and super_column references of the ColumnOrSuperColumn object it maps to will be null.
      * @deprecated; use multiget_slice
@@ -84,7 +84,7 @@
      * @param column_path
      * @param consistency_level
      */
-    public Map<String,ColumnOrSuperColumn> multiget(String keyspace, List<String> keys, ColumnPath column_path, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException;
+    public Map<byte[],ColumnOrSuperColumn> multiget(String keyspace, List<byte[]> keys, ColumnPath column_path, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException;
 
     /**
      * Performs a get_slice for column_parent and predicate for the given keys in parallel.
@@ -95,7 +95,7 @@
      * @param predicate
      * @param consistency_level
      */
-    public Map<String,List<ColumnOrSuperColumn>> multiget_slice(String keyspace, List<String> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException;
+    public Map<byte[],List<ColumnOrSuperColumn>> multiget_slice(String keyspace, List<byte[]> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException;
 
     /**
      * returns the number of columns for a particular <code>key</code> and <code>ColumnFamily</code> or <code>SuperColumn</code>.
@@ -105,7 +105,7 @@
      * @param column_parent
      * @param consistency_level
      */
-    public int get_count(String keyspace, String key, ColumnParent column_parent, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException;
+    public int get_count(String keyspace, byte[] key, ColumnParent column_parent, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException;
 
     /**
      * returns a subset of columns for a range of keys.
@@ -119,7 +119,7 @@
      * @param row_count
      * @param consistency_level
      */
-    public List<KeySlice> get_range_slice(String keyspace, ColumnParent column_parent, SlicePredicate predicate, String start_key, String finish_key, int row_count, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException;
+    public List<KeySlice> get_range_slice(String keyspace, ColumnParent column_parent, SlicePredicate predicate, byte[] start_key, byte[] finish_key, int row_count, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException;
 
     /**
      * returns a subset of columns for a range of keys.
@@ -144,7 +144,7 @@
      * @param timestamp
      * @param consistency_level
      */
-    public void insert(String keyspace, String key, ColumnPath column_path, byte[] value, long timestamp, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException;
+    public void insert(String keyspace, byte[] key, ColumnPath column_path, byte[] value, long timestamp, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException;
 
     /**
      * Insert Columns or SuperColumns across different Column Families for the same row key. batch_mutation is a
@@ -157,7 +157,7 @@
      * @param cfmap
      * @param consistency_level
      */
-    public void batch_insert(String keyspace, String key, Map<String,List<ColumnOrSuperColumn>> cfmap, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException;
+    public void batch_insert(String keyspace, byte[] key, Map<String,List<ColumnOrSuperColumn>> cfmap, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException;
 
     /**
      * Remove data from the row specified by key at the granularity specified by column_path, and the given timestamp. Note
@@ -170,7 +170,7 @@
      * @param timestamp
      * @param consistency_level
      */
-    public void remove(String keyspace, String key, ColumnPath column_path, long timestamp, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException;
+    public void remove(String keyspace, byte[] key, ColumnPath column_path, long timestamp, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException;
 
     /**
      *   Mutate many columns or super columns for many row keys. See also: Mutation.
@@ -182,7 +182,7 @@
      * @param mutation_map
      * @param consistency_level
      */
-    public void batch_mutate(String keyspace, Map<String,Map<String,List<Mutation>>> mutation_map, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException;
+    public void batch_mutate(String keyspace, Map<byte[],Map<String,List<Mutation>>> mutation_map, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException;
 
     /**
      * list the defined keyspaces in this cluster
@@ -314,13 +314,13 @@ public AccessLevel recv_login() throws AuthenticationException, AuthorizationExc
       throw new TApplicationException(TApplicationException.MISSING_RESULT, "login failed: unknown result");
     }
 
-    public ColumnOrSuperColumn get(String keyspace, String key, ColumnPath column_path, ConsistencyLevel consistency_level) throws InvalidRequestException, NotFoundException, UnavailableException, TimedOutException, TException
+    public ColumnOrSuperColumn get(String keyspace, byte[] key, ColumnPath column_path, ConsistencyLevel consistency_level) throws InvalidRequestException, NotFoundException, UnavailableException, TimedOutException, TException
     {
       send_get(keyspace, key, column_path, consistency_level);
       return recv_get();
     }
 
-    public void send_get(String keyspace, String key, ColumnPath column_path, ConsistencyLevel consistency_level) throws TException
+    public void send_get(String keyspace, byte[] key, ColumnPath column_path, ConsistencyLevel consistency_level) throws TException
     {
       oprot_.writeMessageBegin(new TMessage("get", TMessageType.CALL, seqid_));
       get_args args = new get_args();
@@ -362,13 +362,13 @@ public ColumnOrSuperColumn recv_get() throws InvalidRequestException, NotFoundEx
       throw new TApplicationException(TApplicationException.MISSING_RESULT, "get failed: unknown result");
     }
 
-    public List<ColumnOrSuperColumn> get_slice(String keyspace, String key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
+    public List<ColumnOrSuperColumn> get_slice(String keyspace, byte[] key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
     {
       send_get_slice(keyspace, key, column_parent, predicate, consistency_level);
       return recv_get_slice();
     }
 
-    public void send_get_slice(String keyspace, String key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws TException
+    public void send_get_slice(String keyspace, byte[] key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws TException
     {
       oprot_.writeMessageBegin(new TMessage("get_slice", TMessageType.CALL, seqid_));
       get_slice_args args = new get_slice_args();
@@ -408,13 +408,13 @@ public void send_get_slice(String keyspace, String key, ColumnParent column_pare
       throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_slice failed: unknown result");
     }
 
-    public Map<String,ColumnOrSuperColumn> multiget(String keyspace, List<String> keys, ColumnPath column_path, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
+    public Map<byte[],ColumnOrSuperColumn> multiget(String keyspace, List<byte[]> keys, ColumnPath column_path, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
     {
       send_multiget(keyspace, keys, column_path, consistency_level);
       return recv_multiget();
     }
 
-    public void send_multiget(String keyspace, List<String> keys, ColumnPath column_path, ConsistencyLevel consistency_level) throws TException
+    public void send_multiget(String keyspace, List<byte[]> keys, ColumnPath column_path, ConsistencyLevel consistency_level) throws TException
     {
       oprot_.writeMessageBegin(new TMessage("multiget", TMessageType.CALL, seqid_));
       multiget_args args = new multiget_args();
@@ -427,7 +427,7 @@ public void send_multiget(String keyspace, List<String> keys, ColumnPath column_
       oprot_.getTransport().flush();
     }
 
-    public Map<String,ColumnOrSuperColumn> recv_multiget() throws InvalidRequestException, UnavailableException, TimedOutException, TException
+    public Map<byte[],ColumnOrSuperColumn> recv_multiget() throws InvalidRequestException, UnavailableException, TimedOutException, TException
     {
       TMessage msg = iprot_.readMessageBegin();
       if (msg.type == TMessageType.EXCEPTION) {
@@ -453,13 +453,13 @@ public void send_multiget(String keyspace, List<String> keys, ColumnPath column_
       throw new TApplicationException(TApplicationException.MISSING_RESULT, "multiget failed: unknown result");
     }
 
-    public Map<String,List<ColumnOrSuperColumn>> multiget_slice(String keyspace, List<String> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
+    public Map<byte[],List<ColumnOrSuperColumn>> multiget_slice(String keyspace, List<byte[]> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
     {
       send_multiget_slice(keyspace, keys, column_parent, predicate, consistency_level);
       return recv_multiget_slice();
     }
 
-    public void send_multiget_slice(String keyspace, List<String> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws TException
+    public void send_multiget_slice(String keyspace, List<byte[]> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws TException
     {
       oprot_.writeMessageBegin(new TMessage("multiget_slice", TMessageType.CALL, seqid_));
       multiget_slice_args args = new multiget_slice_args();
@@ -473,7 +473,7 @@ public void send_multiget_slice(String keyspace, List<String> keys, ColumnParent
       oprot_.getTransport().flush();
     }
 
-    public Map<String,List<ColumnOrSuperColumn>> recv_multiget_slice() throws InvalidRequestException, UnavailableException, TimedOutException, TException
+    public Map<byte[],List<ColumnOrSuperColumn>> recv_multiget_slice() throws InvalidRequestException, UnavailableException, TimedOutException, TException
     {
       TMessage msg = iprot_.readMessageBegin();
       if (msg.type == TMessageType.EXCEPTION) {
@@ -499,13 +499,13 @@ public void send_multiget_slice(String keyspace, List<String> keys, ColumnParent
       throw new TApplicationException(TApplicationException.MISSING_RESULT, "multiget_slice failed: unknown result");
     }
 
-    public int get_count(String keyspace, String key, ColumnParent column_parent, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
+    public int get_count(String keyspace, byte[] key, ColumnParent column_parent, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
     {
       send_get_count(keyspace, key, column_parent, consistency_level);
       return recv_get_count();
     }
 
-    public void send_get_count(String keyspace, String key, ColumnParent column_parent, ConsistencyLevel consistency_level) throws TException
+    public void send_get_count(String keyspace, byte[] key, ColumnParent column_parent, ConsistencyLevel consistency_level) throws TException
     {
       oprot_.writeMessageBegin(new TMessage("get_count", TMessageType.CALL, seqid_));
       get_count_args args = new get_count_args();
@@ -544,13 +544,13 @@ public int recv_get_count() throws InvalidRequestException, UnavailableException
       throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_count failed: unknown result");
     }
 
-    public List<KeySlice> get_range_slice(String keyspace, ColumnParent column_parent, SlicePredicate predicate, String start_key, String finish_key, int row_count, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
+    public List<KeySlice> get_range_slice(String keyspace, ColumnParent column_parent, SlicePredicate predicate, byte[] start_key, byte[] finish_key, int row_count, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
     {
       send_get_range_slice(keyspace, column_parent, predicate, start_key, finish_key, row_count, consistency_level);
       return recv_get_range_slice();
     }
 
-    public void send_get_range_slice(String keyspace, ColumnParent column_parent, SlicePredicate predicate, String start_key, String finish_key, int row_count, ConsistencyLevel consistency_level) throws TException
+    public void send_get_range_slice(String keyspace, ColumnParent column_parent, SlicePredicate predicate, byte[] start_key, byte[] finish_key, int row_count, ConsistencyLevel consistency_level) throws TException
     {
       oprot_.writeMessageBegin(new TMessage("get_range_slice", TMessageType.CALL, seqid_));
       get_range_slice_args args = new get_range_slice_args();
@@ -638,13 +638,13 @@ public void send_get_range_slices(String keyspace, ColumnParent column_parent, S
       throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_range_slices failed: unknown result");
     }
 
-    public void insert(String keyspace, String key, ColumnPath column_path, byte[] value, long timestamp, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
+    public void insert(String keyspace, byte[] key, ColumnPath column_path, byte[] value, long timestamp, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
     {
       send_insert(keyspace, key, column_path, value, timestamp, consistency_level);
       recv_insert();
     }
 
-    public void send_insert(String keyspace, String key, ColumnPath column_path, byte[] value, long timestamp, ConsistencyLevel consistency_level) throws TException
+    public void send_insert(String keyspace, byte[] key, ColumnPath column_path, byte[] value, long timestamp, ConsistencyLevel consistency_level) throws TException
     {
       oprot_.writeMessageBegin(new TMessage("insert", TMessageType.CALL, seqid_));
       insert_args args = new insert_args();
@@ -682,13 +682,13 @@ public void recv_insert() throws InvalidRequestException, UnavailableException,
       return;
     }
 
-    public void batch_insert(String keyspace, String key, Map<String,List<ColumnOrSuperColumn>> cfmap, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
+    public void batch_insert(String keyspace, byte[] key, Map<String,List<ColumnOrSuperColumn>> cfmap, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
     {
       send_batch_insert(keyspace, key, cfmap, consistency_level);
       recv_batch_insert();
     }
 
-    public void send_batch_insert(String keyspace, String key, Map<String,List<ColumnOrSuperColumn>> cfmap, ConsistencyLevel consistency_level) throws TException
+    public void send_batch_insert(String keyspace, byte[] key, Map<String,List<ColumnOrSuperColumn>> cfmap, ConsistencyLevel consistency_level) throws TException
     {
       oprot_.writeMessageBegin(new TMessage("batch_insert", TMessageType.CALL, seqid_));
       batch_insert_args args = new batch_insert_args();
@@ -724,13 +724,13 @@ public void recv_batch_insert() throws InvalidRequestException, UnavailableExcep
       return;
     }
 
-    public void remove(String keyspace, String key, ColumnPath column_path, long timestamp, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
+    public void remove(String keyspace, byte[] key, ColumnPath column_path, long timestamp, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
     {
       send_remove(keyspace, key, column_path, timestamp, consistency_level);
       recv_remove();
     }
 
-    public void send_remove(String keyspace, String key, ColumnPath column_path, long timestamp, ConsistencyLevel consistency_level) throws TException
+    public void send_remove(String keyspace, byte[] key, ColumnPath column_path, long timestamp, ConsistencyLevel consistency_level) throws TException
     {
       oprot_.writeMessageBegin(new TMessage("remove", TMessageType.CALL, seqid_));
       remove_args args = new remove_args();
@@ -767,13 +767,13 @@ public void recv_remove() throws InvalidRequestException, UnavailableException,
       return;
     }
 
-    public void batch_mutate(String keyspace, Map<String,Map<String,List<Mutation>>> mutation_map, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
+    public void batch_mutate(String keyspace, Map<byte[],Map<String,List<Mutation>>> mutation_map, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, TException
     {
       send_batch_mutate(keyspace, mutation_map, consistency_level);
       recv_batch_mutate();
     }
 
-    public void send_batch_mutate(String keyspace, Map<String,Map<String,List<Mutation>>> mutation_map, ConsistencyLevel consistency_level) throws TException
+    public void send_batch_mutate(String keyspace, Map<byte[],Map<String,List<Mutation>>> mutation_map, ConsistencyLevel consistency_level) throws TException
     {
       oprot_.writeMessageBegin(new TMessage("batch_mutate", TMessageType.CALL, seqid_));
       batch_mutate_args args = new batch_mutate_args();
@@ -2989,7 +2989,7 @@ public void validate() throws TException {
     private static final TField CONSISTENCY_LEVEL_FIELD_DESC = new TField("consistency_level", TType.I32, (short)4);
 
     public String keyspace;
-    public String key;
+    public byte[] key;
     public ColumnPath column_path;
     /**
      * 
@@ -3083,7 +3083,7 @@ public get_args() {
 
     public get_args(
       String keyspace,
-      String key,
+      byte[] key,
       ColumnPath column_path,
       ConsistencyLevel consistency_level)
     {
@@ -3102,7 +3102,8 @@ public get_args(get_args other) {
         this.keyspace = other.keyspace;
       }
       if (other.isSetKey()) {
-        this.key = other.key;
+        this.key = new byte[other.key.length];
+        System.arraycopy(other.key, 0, key, 0, other.key.length);
       }
       if (other.isSetColumn_path()) {
         this.column_path = new ColumnPath(other.column_path);
@@ -3145,11 +3146,11 @@ public void setKeyspaceIsSet(boolean value) {
       }
     }
 
-    public String getKey() {
+    public byte[] getKey() {
       return this.key;
     }
 
-    public get_args setKey(String key) {
+    public get_args setKey(byte[] key) {
       this.key = key;
       return this;
     }
@@ -3239,7 +3240,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetKey();
         } else {
-          setKey((String)value);
+          setKey((byte[])value);
         }
         break;
 
@@ -3334,7 +3335,7 @@ public boolean equals(get_args that) {
       if (this_present_key || that_present_key) {
         if (!(this_present_key && that_present_key))
           return false;
-        if (!this.key.equals(that.key))
+        if (!java.util.Arrays.equals(this.key, that.key))
           return false;
       }
 
@@ -3430,7 +3431,7 @@ public void read(TProtocol iprot) throws TException {
             break;
           case 2: // KEY
             if (field.type == TType.STRING) {
-              this.key = iprot.readString();
+              this.key = iprot.readBinary();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -3472,7 +3473,7 @@ public void write(TProtocol oprot) throws TException {
       }
       if (this.key != null) {
         oprot.writeFieldBegin(KEY_FIELD_DESC);
-        oprot.writeString(this.key);
+        oprot.writeBinary(this.key);
         oprot.writeFieldEnd();
       }
       if (this.column_path != null) {
@@ -3506,7 +3507,12 @@ public String toString() {
       if (this.key == null) {
         sb.append("null");
       } else {
-        sb.append(this.key);
+          int __key_size = Math.min(this.key.length, 128);
+          for (int i = 0; i < __key_size; i++) {
+            if (i != 0) sb.append(" ");
+            sb.append(Integer.toHexString(this.key[i]).length() > 1 ? Integer.toHexString(this.key[i]).substring(Integer.toHexString(this.key[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.key[i]).toUpperCase());
+          }
+          if (this.key.length > 128) sb.append(" ...");
       }
       first = false;
       if (!first) sb.append(", ");
@@ -4178,7 +4184,7 @@ public void validate() throws TException {
     private static final TField CONSISTENCY_LEVEL_FIELD_DESC = new TField("consistency_level", TType.I32, (short)5);
 
     public String keyspace;
-    public String key;
+    public byte[] key;
     public ColumnParent column_parent;
     public SlicePredicate predicate;
     /**
@@ -4276,7 +4282,7 @@ public get_slice_args() {
 
     public get_slice_args(
       String keyspace,
-      String key,
+      byte[] key,
       ColumnParent column_parent,
       SlicePredicate predicate,
       ConsistencyLevel consistency_level)
@@ -4297,7 +4303,8 @@ public get_slice_args(get_slice_args other) {
         this.keyspace = other.keyspace;
       }
       if (other.isSetKey()) {
-        this.key = other.key;
+        this.key = new byte[other.key.length];
+        System.arraycopy(other.key, 0, key, 0, other.key.length);
       }
       if (other.isSetColumn_parent()) {
         this.column_parent = new ColumnParent(other.column_parent);
@@ -4343,11 +4350,11 @@ public void setKeyspaceIsSet(boolean value) {
       }
     }
 
-    public String getKey() {
+    public byte[] getKey() {
       return this.key;
     }
 
-    public get_slice_args setKey(String key) {
+    public get_slice_args setKey(byte[] key) {
       this.key = key;
       return this;
     }
@@ -4461,7 +4468,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetKey();
         } else {
-          setKey((String)value);
+          setKey((byte[])value);
         }
         break;
 
@@ -4569,7 +4576,7 @@ public boolean equals(get_slice_args that) {
       if (this_present_key || that_present_key) {
         if (!(this_present_key && that_present_key))
           return false;
-        if (!this.key.equals(that.key))
+        if (!java.util.Arrays.equals(this.key, that.key))
           return false;
       }
 
@@ -4683,7 +4690,7 @@ public void read(TProtocol iprot) throws TException {
             break;
           case 2: // KEY
             if (field.type == TType.STRING) {
-              this.key = iprot.readString();
+              this.key = iprot.readBinary();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -4733,7 +4740,7 @@ public void write(TProtocol oprot) throws TException {
       }
       if (this.key != null) {
         oprot.writeFieldBegin(KEY_FIELD_DESC);
-        oprot.writeString(this.key);
+        oprot.writeBinary(this.key);
         oprot.writeFieldEnd();
       }
       if (this.column_parent != null) {
@@ -4772,7 +4779,12 @@ public String toString() {
       if (this.key == null) {
         sb.append("null");
       } else {
-        sb.append(this.key);
+          int __key_size = Math.min(this.key.length, 128);
+          for (int i = 0; i < __key_size; i++) {
+            if (i != 0) sb.append(" ");
+            sb.append(Integer.toHexString(this.key[i]).length() > 1 ? Integer.toHexString(this.key[i]).substring(Integer.toHexString(this.key[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.key[i]).toUpperCase());
+          }
+          if (this.key.length > 128) sb.append(" ...");
       }
       first = false;
       if (!first) sb.append(", ");
@@ -5406,7 +5418,7 @@ public void validate() throws TException {
     private static final TField CONSISTENCY_LEVEL_FIELD_DESC = new TField("consistency_level", TType.I32, (short)4);
 
     public String keyspace;
-    public List<String> keys;
+    public List<byte[]> keys;
     public ColumnPath column_path;
     /**
      * 
@@ -5501,7 +5513,7 @@ public multiget_args() {
 
     public multiget_args(
       String keyspace,
-      List<String> keys,
+      List<byte[]> keys,
       ColumnPath column_path,
       ConsistencyLevel consistency_level)
     {
@@ -5520,9 +5532,11 @@ public multiget_args(multiget_args other) {
         this.keyspace = other.keyspace;
       }
       if (other.isSetKeys()) {
-        List<String> __this__keys = new ArrayList<String>();
-        for (String other_element : other.keys) {
-          __this__keys.add(other_element);
+        List<byte[]> __this__keys = new ArrayList<byte[]>();
+        for (byte[] other_element : other.keys) {
+          byte[] temp_binary_element = new byte[other_element.length];
+          System.arraycopy(other_element, 0, temp_binary_element, 0, other_element.length);
+          __this__keys.add(temp_binary_element);
         }
         this.keys = __this__keys;
       }
@@ -5571,22 +5585,22 @@ public int getKeysSize() {
       return (this.keys == null) ? 0 : this.keys.size();
     }
 
-    public java.util.Iterator<String> getKeysIterator() {
+    public java.util.Iterator<byte[]> getKeysIterator() {
       return (this.keys == null) ? null : this.keys.iterator();
     }
 
-    public void addToKeys(String elem) {
+    public void addToKeys(byte[] elem) {
       if (this.keys == null) {
-        this.keys = new ArrayList<String>();
+        this.keys = new ArrayList<byte[]>();
       }
       this.keys.add(elem);
     }
 
-    public List<String> getKeys() {
+    public List<byte[]> getKeys() {
       return this.keys;
     }
 
-    public multiget_args setKeys(List<String> keys) {
+    public multiget_args setKeys(List<byte[]> keys) {
       this.keys = keys;
       return this;
     }
@@ -5676,7 +5690,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetKeys();
         } else {
-          setKeys((List<String>)value);
+          setKeys((List<byte[]>)value);
         }
         break;
 
@@ -5869,11 +5883,11 @@ public void read(TProtocol iprot) throws TException {
             if (field.type == TType.LIST) {
               {
                 TList _list33 = iprot.readListBegin();
-                this.keys = new ArrayList<String>(_list33.size);
+                this.keys = new ArrayList<byte[]>(_list33.size);
                 for (int _i34 = 0; _i34 < _list33.size; ++_i34)
                 {
-                  String _elem35;
-                  _elem35 = iprot.readString();
+                  byte[] _elem35;
+                  _elem35 = iprot.readBinary();
                   this.keys.add(_elem35);
                 }
                 iprot.readListEnd();
@@ -5921,9 +5935,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(KEYS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRING, this.keys.size()));
-          for (String _iter36 : this.keys)
+          for (byte[] _iter36 : this.keys)
           {
-            oprot.writeString(_iter36);
+            oprot.writeBinary(_iter36);
           }
           oprot.writeListEnd();
         }
@@ -6009,7 +6023,7 @@ public void validate() throws TException {
     private static final TField UE_FIELD_DESC = new TField("ue", TType.STRUCT, (short)2);
     private static final TField TE_FIELD_DESC = new TField("te", TType.STRUCT, (short)3);
 
-    public Map<String,ColumnOrSuperColumn> success;
+    public Map<byte[],ColumnOrSuperColumn> success;
     public InvalidRequestException ire;
     public UnavailableException ue;
     public TimedOutException te;
@@ -6095,7 +6109,7 @@ public multiget_result() {
     }
 
     public multiget_result(
-      Map<String,ColumnOrSuperColumn> success,
+      Map<byte[],ColumnOrSuperColumn> success,
       InvalidRequestException ire,
       UnavailableException ue,
       TimedOutException te)
@@ -6112,13 +6126,14 @@ public multiget_result(
      */
     public multiget_result(multiget_result other) {
       if (other.isSetSuccess()) {
-        Map<String,ColumnOrSuperColumn> __this__success = new HashMap<String,ColumnOrSuperColumn>();
-        for (Map.Entry<String, ColumnOrSuperColumn> other_element : other.success.entrySet()) {
+        Map<byte[],ColumnOrSuperColumn> __this__success = new HashMap<byte[],ColumnOrSuperColumn>();
+        for (Map.Entry<byte[], ColumnOrSuperColumn> other_element : other.success.entrySet()) {
 
-          String other_element_key = other_element.getKey();
+          byte[] other_element_key = other_element.getKey();
           ColumnOrSuperColumn other_element_value = other_element.getValue();
 
-          String __this__success_copy_key = other_element_key;
+          byte[] __this__success_copy_key = new byte[other_element_key.length];
+          System.arraycopy(other_element_key, 0, __this__success_copy_key, 0, other_element_key.length);
 
           ColumnOrSuperColumn __this__success_copy_value = new ColumnOrSuperColumn(other_element_value);
 
@@ -6150,18 +6165,18 @@ public int getSuccessSize() {
       return (this.success == null) ? 0 : this.success.size();
     }
 
-    public void putToSuccess(String key, ColumnOrSuperColumn val) {
+    public void putToSuccess(byte[] key, ColumnOrSuperColumn val) {
       if (this.success == null) {
-        this.success = new HashMap<String,ColumnOrSuperColumn>();
+        this.success = new HashMap<byte[],ColumnOrSuperColumn>();
       }
       this.success.put(key, val);
     }
 
-    public Map<String,ColumnOrSuperColumn> getSuccess() {
+    public Map<byte[],ColumnOrSuperColumn> getSuccess() {
       return this.success;
     }
 
-    public multiget_result setSuccess(Map<String,ColumnOrSuperColumn> success) {
+    public multiget_result setSuccess(Map<byte[],ColumnOrSuperColumn> success) {
       this.success = success;
       return this;
     }
@@ -6259,7 +6274,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((Map<String,ColumnOrSuperColumn>)value);
+          setSuccess((Map<byte[],ColumnOrSuperColumn>)value);
         }
         break;
 
@@ -6406,12 +6421,12 @@ public void read(TProtocol iprot) throws TException {
             if (field.type == TType.MAP) {
               {
                 TMap _map37 = iprot.readMapBegin();
-                this.success = new HashMap<String,ColumnOrSuperColumn>(2*_map37.size);
+                this.success = new HashMap<byte[],ColumnOrSuperColumn>(2*_map37.size);
                 for (int _i38 = 0; _i38 < _map37.size; ++_i38)
                 {
-                  String _key39;
+                  byte[] _key39;
                   ColumnOrSuperColumn _val40;
-                  _key39 = iprot.readString();
+                  _key39 = iprot.readBinary();
                   _val40 = new ColumnOrSuperColumn();
                   _val40.read(iprot);
                   this.success.put(_key39, _val40);
@@ -6464,9 +6479,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.success.size()));
-          for (Map.Entry<String, ColumnOrSuperColumn> _iter41 : this.success.entrySet())
+          for (Map.Entry<byte[], ColumnOrSuperColumn> _iter41 : this.success.entrySet())
           {
-            oprot.writeString(_iter41.getKey());
+            oprot.writeBinary(_iter41.getKey());
             _iter41.getValue().write(oprot);
           }
           oprot.writeMapEnd();
@@ -6545,7 +6560,7 @@ public void validate() throws TException {
     private static final TField CONSISTENCY_LEVEL_FIELD_DESC = new TField("consistency_level", TType.I32, (short)5);
 
     public String keyspace;
-    public List<String> keys;
+    public List<byte[]> keys;
     public ColumnParent column_parent;
     public SlicePredicate predicate;
     /**
@@ -6644,7 +6659,7 @@ public multiget_slice_args() {
 
     public multiget_slice_args(
       String keyspace,
-      List<String> keys,
+      List<byte[]> keys,
       ColumnParent column_parent,
       SlicePredicate predicate,
       ConsistencyLevel consistency_level)
@@ -6665,9 +6680,11 @@ public multiget_slice_args(multiget_slice_args other) {
         this.keyspace = other.keyspace;
       }
       if (other.isSetKeys()) {
-        List<String> __this__keys = new ArrayList<String>();
-        for (String other_element : other.keys) {
-          __this__keys.add(other_element);
+        List<byte[]> __this__keys = new ArrayList<byte[]>();
+        for (byte[] other_element : other.keys) {
+          byte[] temp_binary_element = new byte[other_element.length];
+          System.arraycopy(other_element, 0, temp_binary_element, 0, other_element.length);
+          __this__keys.add(temp_binary_element);
         }
         this.keys = __this__keys;
       }
@@ -6719,22 +6736,22 @@ public int getKeysSize() {
       return (this.keys == null) ? 0 : this.keys.size();
     }
 
-    public java.util.Iterator<String> getKeysIterator() {
+    public java.util.Iterator<byte[]> getKeysIterator() {
       return (this.keys == null) ? null : this.keys.iterator();
     }
 
-    public void addToKeys(String elem) {
+    public void addToKeys(byte[] elem) {
       if (this.keys == null) {
-        this.keys = new ArrayList<String>();
+        this.keys = new ArrayList<byte[]>();
       }
       this.keys.add(elem);
     }
 
-    public List<String> getKeys() {
+    public List<byte[]> getKeys() {
       return this.keys;
     }
 
-    public multiget_slice_args setKeys(List<String> keys) {
+    public multiget_slice_args setKeys(List<byte[]> keys) {
       this.keys = keys;
       return this;
     }
@@ -6848,7 +6865,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetKeys();
         } else {
-          setKeys((List<String>)value);
+          setKeys((List<byte[]>)value);
         }
         break;
 
@@ -7072,11 +7089,11 @@ public void read(TProtocol iprot) throws TException {
             if (field.type == TType.LIST) {
               {
                 TList _list42 = iprot.readListBegin();
-                this.keys = new ArrayList<String>(_list42.size);
+                this.keys = new ArrayList<byte[]>(_list42.size);
                 for (int _i43 = 0; _i43 < _list42.size; ++_i43)
                 {
-                  String _elem44;
-                  _elem44 = iprot.readString();
+                  byte[] _elem44;
+                  _elem44 = iprot.readBinary();
                   this.keys.add(_elem44);
                 }
                 iprot.readListEnd();
@@ -7132,9 +7149,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(KEYS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRING, this.keys.size()));
-          for (String _iter45 : this.keys)
+          for (byte[] _iter45 : this.keys)
           {
-            oprot.writeString(_iter45);
+            oprot.writeBinary(_iter45);
           }
           oprot.writeListEnd();
         }
@@ -7236,7 +7253,7 @@ public void validate() throws TException {
     private static final TField UE_FIELD_DESC = new TField("ue", TType.STRUCT, (short)2);
     private static final TField TE_FIELD_DESC = new TField("te", TType.STRUCT, (short)3);
 
-    public Map<String,List<ColumnOrSuperColumn>> success;
+    public Map<byte[],List<ColumnOrSuperColumn>> success;
     public InvalidRequestException ire;
     public UnavailableException ue;
     public TimedOutException te;
@@ -7323,7 +7340,7 @@ public multiget_slice_result() {
     }
 
     public multiget_slice_result(
-      Map<String,List<ColumnOrSuperColumn>> success,
+      Map<byte[],List<ColumnOrSuperColumn>> success,
       InvalidRequestException ire,
       UnavailableException ue,
       TimedOutException te)
@@ -7340,13 +7357,14 @@ public multiget_slice_result(
      */
     public multiget_slice_result(multiget_slice_result other) {
       if (other.isSetSuccess()) {
-        Map<String,List<ColumnOrSuperColumn>> __this__success = new HashMap<String,List<ColumnOrSuperColumn>>();
-        for (Map.Entry<String, List<ColumnOrSuperColumn>> other_element : other.success.entrySet()) {
+        Map<byte[],List<ColumnOrSuperColumn>> __this__success = new HashMap<byte[],List<ColumnOrSuperColumn>>();
+        for (Map.Entry<byte[], List<ColumnOrSuperColumn>> other_element : other.success.entrySet()) {
 
-          String other_element_key = other_element.getKey();
+          byte[] other_element_key = other_element.getKey();
           List<ColumnOrSuperColumn> other_element_value = other_element.getValue();
 
-          String __this__success_copy_key = other_element_key;
+          byte[] __this__success_copy_key = new byte[other_element_key.length];
+          System.arraycopy(other_element_key, 0, __this__success_copy_key, 0, other_element_key.length);
 
           List<ColumnOrSuperColumn> __this__success_copy_value = new ArrayList<ColumnOrSuperColumn>();
           for (ColumnOrSuperColumn other_element_value_element : other_element_value) {
@@ -7381,18 +7399,18 @@ public int getSuccessSize() {
       return (this.success == null) ? 0 : this.success.size();
     }
 
-    public void putToSuccess(String key, List<ColumnOrSuperColumn> val) {
+    public void putToSuccess(byte[] key, List<ColumnOrSuperColumn> val) {
       if (this.success == null) {
-        this.success = new HashMap<String,List<ColumnOrSuperColumn>>();
+        this.success = new HashMap<byte[],List<ColumnOrSuperColumn>>();
       }
       this.success.put(key, val);
     }
 
-    public Map<String,List<ColumnOrSuperColumn>> getSuccess() {
+    public Map<byte[],List<ColumnOrSuperColumn>> getSuccess() {
       return this.success;
     }
 
-    public multiget_slice_result setSuccess(Map<String,List<ColumnOrSuperColumn>> success) {
+    public multiget_slice_result setSuccess(Map<byte[],List<ColumnOrSuperColumn>> success) {
       this.success = success;
       return this;
     }
@@ -7490,7 +7508,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((Map<String,List<ColumnOrSuperColumn>>)value);
+          setSuccess((Map<byte[],List<ColumnOrSuperColumn>>)value);
         }
         break;
 
@@ -7637,12 +7655,12 @@ public void read(TProtocol iprot) throws TException {
             if (field.type == TType.MAP) {
               {
                 TMap _map46 = iprot.readMapBegin();
-                this.success = new HashMap<String,List<ColumnOrSuperColumn>>(2*_map46.size);
+                this.success = new HashMap<byte[],List<ColumnOrSuperColumn>>(2*_map46.size);
                 for (int _i47 = 0; _i47 < _map46.size; ++_i47)
                 {
-                  String _key48;
+                  byte[] _key48;
                   List<ColumnOrSuperColumn> _val49;
-                  _key48 = iprot.readString();
+                  _key48 = iprot.readBinary();
                   {
                     TList _list50 = iprot.readListBegin();
                     _val49 = new ArrayList<ColumnOrSuperColumn>(_list50.size);
@@ -7705,9 +7723,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, this.success.size()));
-          for (Map.Entry<String, List<ColumnOrSuperColumn>> _iter53 : this.success.entrySet())
+          for (Map.Entry<byte[], List<ColumnOrSuperColumn>> _iter53 : this.success.entrySet())
           {
-            oprot.writeString(_iter53.getKey());
+            oprot.writeBinary(_iter53.getKey());
             {
               oprot.writeListBegin(new TList(TType.STRUCT, _iter53.getValue().size()));
               for (ColumnOrSuperColumn _iter54 : _iter53.getValue())
@@ -7792,7 +7810,7 @@ public void validate() throws TException {
     private static final TField CONSISTENCY_LEVEL_FIELD_DESC = new TField("consistency_level", TType.I32, (short)4);
 
     public String keyspace;
-    public String key;
+    public byte[] key;
     public ColumnParent column_parent;
     /**
      * 
@@ -7886,7 +7904,7 @@ public get_count_args() {
 
     public get_count_args(
       String keyspace,
-      String key,
+      byte[] key,
       ColumnParent column_parent,
       ConsistencyLevel consistency_level)
     {
@@ -7905,7 +7923,8 @@ public get_count_args(get_count_args other) {
         this.keyspace = other.keyspace;
       }
       if (other.isSetKey()) {
-        this.key = other.key;
+        this.key = new byte[other.key.length];
+        System.arraycopy(other.key, 0, key, 0, other.key.length);
       }
       if (other.isSetColumn_parent()) {
         this.column_parent = new ColumnParent(other.column_parent);
@@ -7948,11 +7967,11 @@ public void setKeyspaceIsSet(boolean value) {
       }
     }
 
-    public String getKey() {
+    public byte[] getKey() {
       return this.key;
     }
 
-    public get_count_args setKey(String key) {
+    public get_count_args setKey(byte[] key) {
       this.key = key;
       return this;
     }
@@ -8042,7 +8061,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetKey();
         } else {
-          setKey((String)value);
+          setKey((byte[])value);
         }
         break;
 
@@ -8137,7 +8156,7 @@ public boolean equals(get_count_args that) {
       if (this_present_key || that_present_key) {
         if (!(this_present_key && that_present_key))
           return false;
-        if (!this.key.equals(that.key))
+        if (!java.util.Arrays.equals(this.key, that.key))
           return false;
       }
 
@@ -8233,7 +8252,7 @@ public void read(TProtocol iprot) throws TException {
             break;
           case 2: // KEY
             if (field.type == TType.STRING) {
-              this.key = iprot.readString();
+              this.key = iprot.readBinary();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -8275,7 +8294,7 @@ public void write(TProtocol oprot) throws TException {
       }
       if (this.key != null) {
         oprot.writeFieldBegin(KEY_FIELD_DESC);
-        oprot.writeString(this.key);
+        oprot.writeBinary(this.key);
         oprot.writeFieldEnd();
       }
       if (this.column_parent != null) {
@@ -8309,7 +8328,12 @@ public String toString() {
       if (this.key == null) {
         sb.append("null");
       } else {
-        sb.append(this.key);
+          int __key_size = Math.min(this.key.length, 128);
+          for (int i = 0; i < __key_size; i++) {
+            if (i != 0) sb.append(" ");
+            sb.append(Integer.toHexString(this.key[i]).length() > 1 ? Integer.toHexString(this.key[i]).substring(Integer.toHexString(this.key[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.key[i]).toUpperCase());
+          }
+          if (this.key.length > 128) sb.append(" ...");
       }
       first = false;
       if (!first) sb.append(", ");
@@ -8898,8 +8922,8 @@ public void validate() throws TException {
     public String keyspace;
     public ColumnParent column_parent;
     public SlicePredicate predicate;
-    public String start_key;
-    public String finish_key;
+    public byte[] start_key;
+    public byte[] finish_key;
     public int row_count;
     /**
      * 
@@ -8998,10 +9022,6 @@ public String getFieldName() {
     }
 
     public get_range_slice_args() {
-      this.start_key = "";
-
-      this.finish_key = "";
-
       this.row_count = 100;
 
       this.consistency_level = ConsistencyLevel.ONE;
@@ -9012,8 +9032,8 @@ public get_range_slice_args(
       String keyspace,
       ColumnParent column_parent,
       SlicePredicate predicate,
-      String start_key,
-      String finish_key,
+      byte[] start_key,
+      byte[] finish_key,
       int row_count,
       ConsistencyLevel consistency_level)
     {
@@ -9044,10 +9064,12 @@ public get_range_slice_args(get_range_slice_args other) {
         this.predicate = new SlicePredicate(other.predicate);
       }
       if (other.isSetStart_key()) {
-        this.start_key = other.start_key;
+        this.start_key = new byte[other.start_key.length];
+        System.arraycopy(other.start_key, 0, start_key, 0, other.start_key.length);
       }
       if (other.isSetFinish_key()) {
-        this.finish_key = other.finish_key;
+        this.finish_key = new byte[other.finish_key.length];
+        System.arraycopy(other.finish_key, 0, finish_key, 0, other.finish_key.length);
       }
       this.row_count = other.row_count;
       if (other.isSetConsistency_level()) {
@@ -9136,11 +9158,11 @@ public void setPredicateIsSet(boolean value) {
       }
     }
 
-    public String getStart_key() {
+    public byte[] getStart_key() {
       return this.start_key;
     }
 
-    public get_range_slice_args setStart_key(String start_key) {
+    public get_range_slice_args setStart_key(byte[] start_key) {
       this.start_key = start_key;
       return this;
     }
@@ -9160,11 +9182,11 @@ public void setStart_keyIsSet(boolean value) {
       }
     }
 
-    public String getFinish_key() {
+    public byte[] getFinish_key() {
       return this.finish_key;
     }
 
-    public get_range_slice_args setFinish_key(String finish_key) {
+    public get_range_slice_args setFinish_key(byte[] finish_key) {
       this.finish_key = finish_key;
       return this;
     }
@@ -9269,7 +9291,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetStart_key();
         } else {
-          setStart_key((String)value);
+          setStart_key((byte[])value);
         }
         break;
 
@@ -9277,7 +9299,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetFinish_key();
         } else {
-          setFinish_key((String)value);
+          setFinish_key((byte[])value);
         }
         break;
 
@@ -9405,7 +9427,7 @@ public boolean equals(get_range_slice_args that) {
       if (this_present_start_key || that_present_start_key) {
         if (!(this_present_start_key && that_present_start_key))
           return false;
-        if (!this.start_key.equals(that.start_key))
+        if (!java.util.Arrays.equals(this.start_key, that.start_key))
           return false;
       }
 
@@ -9414,7 +9436,7 @@ public boolean equals(get_range_slice_args that) {
       if (this_present_finish_key || that_present_finish_key) {
         if (!(this_present_finish_key && that_present_finish_key))
           return false;
-        if (!this.finish_key.equals(that.finish_key))
+        if (!java.util.Arrays.equals(this.finish_key, that.finish_key))
           return false;
       }
 
@@ -9553,14 +9575,14 @@ public void read(TProtocol iprot) throws TException {
             break;
           case 4: // START_KEY
             if (field.type == TType.STRING) {
-              this.start_key = iprot.readString();
+              this.start_key = iprot.readBinary();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
           case 5: // FINISH_KEY
             if (field.type == TType.STRING) {
-              this.finish_key = iprot.readString();
+              this.finish_key = iprot.readBinary();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -9615,12 +9637,12 @@ public void write(TProtocol oprot) throws TException {
       }
       if (this.start_key != null) {
         oprot.writeFieldBegin(START_KEY_FIELD_DESC);
-        oprot.writeString(this.start_key);
+        oprot.writeBinary(this.start_key);
         oprot.writeFieldEnd();
       }
       if (this.finish_key != null) {
         oprot.writeFieldBegin(FINISH_KEY_FIELD_DESC);
-        oprot.writeString(this.finish_key);
+        oprot.writeBinary(this.finish_key);
         oprot.writeFieldEnd();
       }
       oprot.writeFieldBegin(ROW_COUNT_FIELD_DESC);
@@ -9668,7 +9690,12 @@ public String toString() {
       if (this.start_key == null) {
         sb.append("null");
       } else {
-        sb.append(this.start_key);
+          int __start_key_size = Math.min(this.start_key.length, 128);
+          for (int i = 0; i < __start_key_size; i++) {
+            if (i != 0) sb.append(" ");
+            sb.append(Integer.toHexString(this.start_key[i]).length() > 1 ? Integer.toHexString(this.start_key[i]).substring(Integer.toHexString(this.start_key[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.start_key[i]).toUpperCase());
+          }
+          if (this.start_key.length > 128) sb.append(" ...");
       }
       first = false;
       if (!first) sb.append(", ");
@@ -9676,7 +9703,12 @@ public String toString() {
       if (this.finish_key == null) {
         sb.append("null");
       } else {
-        sb.append(this.finish_key);
+          int __finish_key_size = Math.min(this.finish_key.length, 128);
+          for (int i = 0; i < __finish_key_size; i++) {
+            if (i != 0) sb.append(" ");
+            sb.append(Integer.toHexString(this.finish_key[i]).length() > 1 ? Integer.toHexString(this.finish_key[i]).substring(Integer.toHexString(this.finish_key[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.finish_key[i]).toUpperCase());
+          }
+          if (this.finish_key.length > 128) sb.append(" ...");
       }
       first = false;
       if (!first) sb.append(", ");
@@ -11534,7 +11566,7 @@ public void validate() throws TException {
     private static final TField CONSISTENCY_LEVEL_FIELD_DESC = new TField("consistency_level", TType.I32, (short)6);
 
     public String keyspace;
-    public String key;
+    public byte[] key;
     public ColumnPath column_path;
     public byte[] value;
     public long timestamp;
@@ -11638,7 +11670,7 @@ public insert_args() {
 
     public insert_args(
       String keyspace,
-      String key,
+      byte[] key,
       ColumnPath column_path,
       byte[] value,
       long timestamp,
@@ -11664,7 +11696,8 @@ public insert_args(insert_args other) {
         this.keyspace = other.keyspace;
       }
       if (other.isSetKey()) {
-        this.key = other.key;
+        this.key = new byte[other.key.length];
+        System.arraycopy(other.key, 0, key, 0, other.key.length);
       }
       if (other.isSetColumn_path()) {
         this.column_path = new ColumnPath(other.column_path);
@@ -11712,11 +11745,11 @@ public void setKeyspaceIsSet(boolean value) {
       }
     }
 
-    public String getKey() {
+    public byte[] getKey() {
       return this.key;
     }
 
-    public insert_args setKey(String key) {
+    public insert_args setKey(byte[] key) {
       this.key = key;
       return this;
     }
@@ -11853,7 +11886,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetKey();
         } else {
-          setKey((String)value);
+          setKey((byte[])value);
         }
         break;
 
@@ -11974,7 +12007,7 @@ public boolean equals(insert_args that) {
       if (this_present_key || that_present_key) {
         if (!(this_present_key && that_present_key))
           return false;
-        if (!this.key.equals(that.key))
+        if (!java.util.Arrays.equals(this.key, that.key))
           return false;
       }
 
@@ -12106,7 +12139,7 @@ public void read(TProtocol iprot) throws TException {
             break;
           case 2: // KEY
             if (field.type == TType.STRING) {
-              this.key = iprot.readString();
+              this.key = iprot.readBinary();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -12166,7 +12199,7 @@ public void write(TProtocol oprot) throws TException {
       }
       if (this.key != null) {
         oprot.writeFieldBegin(KEY_FIELD_DESC);
-        oprot.writeString(this.key);
+        oprot.writeBinary(this.key);
         oprot.writeFieldEnd();
       }
       if (this.column_path != null) {
@@ -12208,7 +12241,12 @@ public String toString() {
       if (this.key == null) {
         sb.append("null");
       } else {
-        sb.append(this.key);
+          int __key_size = Math.min(this.key.length, 128);
+          for (int i = 0; i < __key_size; i++) {
+            if (i != 0) sb.append(" ");
+            sb.append(Integer.toHexString(this.key[i]).length() > 1 ? Integer.toHexString(this.key[i]).substring(Integer.toHexString(this.key[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.key[i]).toUpperCase());
+          }
+          if (this.key.length > 128) sb.append(" ...");
       }
       first = false;
       if (!first) sb.append(", ");
@@ -12730,7 +12768,7 @@ public void validate() throws TException {
     private static final TField CONSISTENCY_LEVEL_FIELD_DESC = new TField("consistency_level", TType.I32, (short)4);
 
     public String keyspace;
-    public String key;
+    public byte[] key;
     public Map<String,List<ColumnOrSuperColumn>> cfmap;
     /**
      * 
@@ -12827,7 +12865,7 @@ public batch_insert_args() {
 
     public batch_insert_args(
       String keyspace,
-      String key,
+      byte[] key,
       Map<String,List<ColumnOrSuperColumn>> cfmap,
       ConsistencyLevel consistency_level)
     {
@@ -12846,7 +12884,8 @@ public batch_insert_args(batch_insert_args other) {
         this.keyspace = other.keyspace;
       }
       if (other.isSetKey()) {
-        this.key = other.key;
+        this.key = new byte[other.key.length];
+        System.arraycopy(other.key, 0, key, 0, other.key.length);
       }
       if (other.isSetCfmap()) {
         Map<String,List<ColumnOrSuperColumn>> __this__cfmap = new HashMap<String,List<ColumnOrSuperColumn>>();
@@ -12904,11 +12943,11 @@ public void setKeyspaceIsSet(boolean value) {
       }
     }
 
-    public String getKey() {
+    public byte[] getKey() {
       return this.key;
     }
 
-    public batch_insert_args setKey(String key) {
+    public batch_insert_args setKey(byte[] key) {
       this.key = key;
       return this;
     }
@@ -13009,7 +13048,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetKey();
         } else {
-          setKey((String)value);
+          setKey((byte[])value);
         }
         break;
 
@@ -13104,7 +13143,7 @@ public boolean equals(batch_insert_args that) {
       if (this_present_key || that_present_key) {
         if (!(this_present_key && that_present_key))
           return false;
-        if (!this.key.equals(that.key))
+        if (!java.util.Arrays.equals(this.key, that.key))
           return false;
       }
 
@@ -13153,7 +13192,7 @@ public void read(TProtocol iprot) throws TException {
             break;
           case 2: // KEY
             if (field.type == TType.STRING) {
-              this.key = iprot.readString();
+              this.key = iprot.readBinary();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -13217,7 +13256,7 @@ public void write(TProtocol oprot) throws TException {
       }
       if (this.key != null) {
         oprot.writeFieldBegin(KEY_FIELD_DESC);
-        oprot.writeString(this.key);
+        oprot.writeBinary(this.key);
         oprot.writeFieldEnd();
       }
       if (this.cfmap != null) {
@@ -13266,7 +13305,12 @@ public String toString() {
       if (this.key == null) {
         sb.append("null");
       } else {
-        sb.append(this.key);
+          int __key_size = Math.min(this.key.length, 128);
+          for (int i = 0; i < __key_size; i++) {
+            if (i != 0) sb.append(" ");
+            sb.append(Integer.toHexString(this.key[i]).length() > 1 ? Integer.toHexString(this.key[i]).substring(Integer.toHexString(this.key[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.key[i]).toUpperCase());
+          }
+          if (this.key.length > 128) sb.append(" ...");
       }
       first = false;
       if (!first) sb.append(", ");
@@ -13768,7 +13812,7 @@ public void validate() throws TException {
     private static final TField CONSISTENCY_LEVEL_FIELD_DESC = new TField("consistency_level", TType.I32, (short)5);
 
     public String keyspace;
-    public String key;
+    public byte[] key;
     public ColumnPath column_path;
     public long timestamp;
     /**
@@ -13868,7 +13912,7 @@ public remove_args() {
 
     public remove_args(
       String keyspace,
-      String key,
+      byte[] key,
       ColumnPath column_path,
       long timestamp,
       ConsistencyLevel consistency_level)
@@ -13892,7 +13936,8 @@ public remove_args(remove_args other) {
         this.keyspace = other.keyspace;
       }
       if (other.isSetKey()) {
-        this.key = other.key;
+        this.key = new byte[other.key.length];
+        System.arraycopy(other.key, 0, key, 0, other.key.length);
       }
       if (other.isSetColumn_path()) {
         this.column_path = new ColumnPath(other.column_path);
@@ -13936,11 +13981,11 @@ public void setKeyspaceIsSet(boolean value) {
       }
     }
 
-    public String getKey() {
+    public byte[] getKey() {
       return this.key;
     }
 
-    public remove_args setKey(String key) {
+    public remove_args setKey(byte[] key) {
       this.key = key;
       return this;
     }
@@ -14053,7 +14098,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetKey();
         } else {
-          setKey((String)value);
+          setKey((byte[])value);
         }
         break;
 
@@ -14161,7 +14206,7 @@ public boolean equals(remove_args that) {
       if (this_present_key || that_present_key) {
         if (!(this_present_key && that_present_key))
           return false;
-        if (!this.key.equals(that.key))
+        if (!java.util.Arrays.equals(this.key, that.key))
           return false;
       }
 
@@ -14275,7 +14320,7 @@ public void read(TProtocol iprot) throws TException {
             break;
           case 2: // KEY
             if (field.type == TType.STRING) {
-              this.key = iprot.readString();
+              this.key = iprot.readBinary();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -14328,7 +14373,7 @@ public void write(TProtocol oprot) throws TException {
       }
       if (this.key != null) {
         oprot.writeFieldBegin(KEY_FIELD_DESC);
-        oprot.writeString(this.key);
+        oprot.writeBinary(this.key);
         oprot.writeFieldEnd();
       }
       if (this.column_path != null) {
@@ -14365,7 +14410,12 @@ public String toString() {
       if (this.key == null) {
         sb.append("null");
       } else {
-        sb.append(this.key);
+          int __key_size = Math.min(this.key.length, 128);
+          for (int i = 0; i < __key_size; i++) {
+            if (i != 0) sb.append(" ");
+            sb.append(Integer.toHexString(this.key[i]).length() > 1 ? Integer.toHexString(this.key[i]).substring(Integer.toHexString(this.key[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.key[i]).toUpperCase());
+          }
+          if (this.key.length > 128) sb.append(" ...");
       }
       first = false;
       if (!first) sb.append(", ");
@@ -14867,7 +14917,7 @@ public void validate() throws TException {
     private static final TField CONSISTENCY_LEVEL_FIELD_DESC = new TField("consistency_level", TType.I32, (short)3);
 
     public String keyspace;
-    public Map<String,Map<String,List<Mutation>>> mutation_map;
+    public Map<byte[],Map<String,List<Mutation>>> mutation_map;
     /**
      * 
      * @see ConsistencyLevel
@@ -14962,7 +15012,7 @@ public batch_mutate_args() {
 
     public batch_mutate_args(
       String keyspace,
-      Map<String,Map<String,List<Mutation>>> mutation_map,
+      Map<byte[],Map<String,List<Mutation>>> mutation_map,
       ConsistencyLevel consistency_level)
     {
       this();
@@ -14979,13 +15029,14 @@ public batch_mutate_args(batch_mutate_args other) {
         this.keyspace = other.keyspace;
       }
       if (other.isSetMutation_map()) {
-        Map<String,Map<String,List<Mutation>>> __this__mutation_map = new HashMap<String,Map<String,List<Mutation>>>();
-        for (Map.Entry<String, Map<String,List<Mutation>>> other_element : other.mutation_map.entrySet()) {
+        Map<byte[],Map<String,List<Mutation>>> __this__mutation_map = new HashMap<byte[],Map<String,List<Mutation>>>();
+        for (Map.Entry<byte[], Map<String,List<Mutation>>> other_element : other.mutation_map.entrySet()) {
 
-          String other_element_key = other_element.getKey();
+          byte[] other_element_key = other_element.getKey();
           Map<String,List<Mutation>> other_element_value = other_element.getValue();
 
-          String __this__mutation_map_copy_key = other_element_key;
+          byte[] __this__mutation_map_copy_key = new byte[other_element_key.length];
+          System.arraycopy(other_element_key, 0, __this__mutation_map_copy_key, 0, other_element_key.length);
 
           Map<String,List<Mutation>> __this__mutation_map_copy_value = new HashMap<String,List<Mutation>>();
           for (Map.Entry<String, List<Mutation>> other_element_value_element : other_element_value.entrySet()) {
@@ -15049,18 +15100,18 @@ public int getMutation_mapSize() {
       return (this.mutation_map == null) ? 0 : this.mutation_map.size();
     }
 
-    public void putToMutation_map(String key, Map<String,List<Mutation>> val) {
+    public void putToMutation_map(byte[] key, Map<String,List<Mutation>> val) {
       if (this.mutation_map == null) {
-        this.mutation_map = new HashMap<String,Map<String,List<Mutation>>>();
+        this.mutation_map = new HashMap<byte[],Map<String,List<Mutation>>>();
       }
       this.mutation_map.put(key, val);
     }
 
-    public Map<String,Map<String,List<Mutation>>> getMutation_map() {
+    public Map<byte[],Map<String,List<Mutation>>> getMutation_map() {
       return this.mutation_map;
     }
 
-    public batch_mutate_args setMutation_map(Map<String,Map<String,List<Mutation>>> mutation_map) {
+    public batch_mutate_args setMutation_map(Map<byte[],Map<String,List<Mutation>>> mutation_map) {
       this.mutation_map = mutation_map;
       return this;
     }
@@ -15126,7 +15177,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetMutation_map();
         } else {
-          setMutation_map((Map<String,Map<String,List<Mutation>>>)value);
+          setMutation_map((Map<byte[],Map<String,List<Mutation>>>)value);
         }
         break;
 
@@ -15250,12 +15301,12 @@ public void read(TProtocol iprot) throws TException {
             if (field.type == TType.MAP) {
               {
                 TMap _map72 = iprot.readMapBegin();
-                this.mutation_map = new HashMap<String,Map<String,List<Mutation>>>(2*_map72.size);
+                this.mutation_map = new HashMap<byte[],Map<String,List<Mutation>>>(2*_map72.size);
                 for (int _i73 = 0; _i73 < _map72.size; ++_i73)
                 {
-                  String _key74;
+                  byte[] _key74;
                   Map<String,List<Mutation>> _val75;
-                  _key74 = iprot.readString();
+                  _key74 = iprot.readBinary();
                   {
                     TMap _map76 = iprot.readMapBegin();
                     _val75 = new HashMap<String,List<Mutation>>(2*_map76.size);
@@ -15319,9 +15370,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(MUTATION_MAP_FIELD_DESC);
         {
           oprot.writeMapBegin(new TMap(TType.STRING, TType.MAP, this.mutation_map.size()));
-          for (Map.Entry<String, Map<String,List<Mutation>>> _iter83 : this.mutation_map.entrySet())
+          for (Map.Entry<byte[], Map<String,List<Mutation>>> _iter83 : this.mutation_map.entrySet())
           {
-            oprot.writeString(_iter83.getKey());
+            oprot.writeBinary(_iter83.getKey());
             {
               oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, _iter83.getValue().size()));
               for (Map.Entry<String, List<Mutation>> _iter84 : _iter83.getValue().entrySet())
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java
index fe11fb50..90f129d1 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java
@@ -42,6 +42,6 @@
 
 public class Constants {
 
-  public static final String VERSION = "3.0.0";
+  public static final String VERSION = "4.0.0";
 
 }
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeyRange.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeyRange.java
index b125991f..6d514e23 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeyRange.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeyRange.java
@@ -61,8 +61,8 @@
   private static final TField END_TOKEN_FIELD_DESC = new TField("end_token", TType.STRING, (short)4);
   private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)5);
 
-  public String start_key;
-  public String end_key;
+  public byte[] start_key;
+  public byte[] end_key;
   public String start_token;
   public String end_token;
   public int count;
@@ -167,10 +167,12 @@ public KeyRange(KeyRange other) {
     __isset_bit_vector.clear();
     __isset_bit_vector.or(other.__isset_bit_vector);
     if (other.isSetStart_key()) {
-      this.start_key = other.start_key;
+      this.start_key = new byte[other.start_key.length];
+      System.arraycopy(other.start_key, 0, start_key, 0, other.start_key.length);
     }
     if (other.isSetEnd_key()) {
-      this.end_key = other.end_key;
+      this.end_key = new byte[other.end_key.length];
+      System.arraycopy(other.end_key, 0, end_key, 0, other.end_key.length);
     }
     if (other.isSetStart_token()) {
       this.start_token = other.start_token;
@@ -190,11 +192,11 @@ public KeyRange clone() {
     return new KeyRange(this);
   }
 
-  public String getStart_key() {
+  public byte[] getStart_key() {
     return this.start_key;
   }
 
-  public KeyRange setStart_key(String start_key) {
+  public KeyRange setStart_key(byte[] start_key) {
     this.start_key = start_key;
     return this;
   }
@@ -214,11 +216,11 @@ public void setStart_keyIsSet(boolean value) {
     }
   }
 
-  public String getEnd_key() {
+  public byte[] getEnd_key() {
     return this.end_key;
   }
 
-  public KeyRange setEnd_key(String end_key) {
+  public KeyRange setEnd_key(byte[] end_key) {
     this.end_key = end_key;
     return this;
   }
@@ -315,7 +317,7 @@ public void setFieldValue(_Fields field, Object value) {
       if (value == null) {
         unsetStart_key();
       } else {
-        setStart_key((String)value);
+        setStart_key((byte[])value);
       }
       break;
 
@@ -323,7 +325,7 @@ public void setFieldValue(_Fields field, Object value) {
       if (value == null) {
         unsetEnd_key();
       } else {
-        setEnd_key((String)value);
+        setEnd_key((byte[])value);
       }
       break;
 
@@ -422,7 +424,7 @@ public boolean equals(KeyRange that) {
     if (this_present_start_key || that_present_start_key) {
       if (!(this_present_start_key && that_present_start_key))
         return false;
-      if (!this.start_key.equals(that.start_key))
+      if (!java.util.Arrays.equals(this.start_key, that.start_key))
         return false;
     }
 
@@ -431,7 +433,7 @@ public boolean equals(KeyRange that) {
     if (this_present_end_key || that_present_end_key) {
       if (!(this_present_end_key && that_present_end_key))
         return false;
-      if (!this.end_key.equals(that.end_key))
+      if (!java.util.Arrays.equals(this.end_key, that.end_key))
         return false;
     }
 
@@ -538,14 +540,14 @@ public void read(TProtocol iprot) throws TException {
       switch (field.id) {
         case 1: // START_KEY
           if (field.type == TType.STRING) {
-            this.start_key = iprot.readString();
+            this.start_key = iprot.readBinary();
           } else { 
             TProtocolUtil.skip(iprot, field.type);
           }
           break;
         case 2: // END_KEY
           if (field.type == TType.STRING) {
-            this.end_key = iprot.readString();
+            this.end_key = iprot.readBinary();
           } else { 
             TProtocolUtil.skip(iprot, field.type);
           }
@@ -593,14 +595,14 @@ public void write(TProtocol oprot) throws TException {
     if (this.start_key != null) {
       if (isSetStart_key()) {
         oprot.writeFieldBegin(START_KEY_FIELD_DESC);
-        oprot.writeString(this.start_key);
+        oprot.writeBinary(this.start_key);
         oprot.writeFieldEnd();
       }
     }
     if (this.end_key != null) {
       if (isSetEnd_key()) {
         oprot.writeFieldBegin(END_KEY_FIELD_DESC);
-        oprot.writeString(this.end_key);
+        oprot.writeBinary(this.end_key);
         oprot.writeFieldEnd();
       }
     }
@@ -635,7 +637,12 @@ public String toString() {
       if (this.start_key == null) {
         sb.append("null");
       } else {
-        sb.append(this.start_key);
+          int __start_key_size = Math.min(this.start_key.length, 128);
+          for (int i = 0; i < __start_key_size; i++) {
+            if (i != 0) sb.append(" ");
+            sb.append(Integer.toHexString(this.start_key[i]).length() > 1 ? Integer.toHexString(this.start_key[i]).substring(Integer.toHexString(this.start_key[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.start_key[i]).toUpperCase());
+          }
+          if (this.start_key.length > 128) sb.append(" ...");
       }
       first = false;
     }
@@ -645,7 +652,12 @@ public String toString() {
       if (this.end_key == null) {
         sb.append("null");
       } else {
-        sb.append(this.end_key);
+          int __end_key_size = Math.min(this.end_key.length, 128);
+          for (int i = 0; i < __end_key_size; i++) {
+            if (i != 0) sb.append(" ");
+            sb.append(Integer.toHexString(this.end_key[i]).length() > 1 ? Integer.toHexString(this.end_key[i]).substring(Integer.toHexString(this.end_key[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.end_key[i]).toUpperCase());
+          }
+          if (this.end_key.length > 128) sb.append(" ...");
       }
       first = false;
     }
diff --git a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeySlice.java b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeySlice.java
index 7b671ce1..774c2213 100644
--- a/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeySlice.java
+++ b/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeySlice.java
@@ -57,7 +57,7 @@
   private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)1);
   private static final TField COLUMNS_FIELD_DESC = new TField("columns", TType.LIST, (short)2);
 
-  public String key;
+  public byte[] key;
   public List<ColumnOrSuperColumn> columns;
 
   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
@@ -134,7 +134,7 @@ public KeySlice() {
   }
 
   public KeySlice(
-    String key,
+    byte[] key,
     List<ColumnOrSuperColumn> columns)
   {
     this();
@@ -147,7 +147,8 @@ public KeySlice(
    */
   public KeySlice(KeySlice other) {
     if (other.isSetKey()) {
-      this.key = other.key;
+      this.key = new byte[other.key.length];
+      System.arraycopy(other.key, 0, key, 0, other.key.length);
     }
     if (other.isSetColumns()) {
       List<ColumnOrSuperColumn> __this__columns = new ArrayList<ColumnOrSuperColumn>();
@@ -167,11 +168,11 @@ public KeySlice clone() {
     return new KeySlice(this);
   }
 
-  public String getKey() {
+  public byte[] getKey() {
     return this.key;
   }
 
-  public KeySlice setKey(String key) {
+  public KeySlice setKey(byte[] key) {
     this.key = key;
     return this;
   }
@@ -236,7 +237,7 @@ public void setFieldValue(_Fields field, Object value) {
       if (value == null) {
         unsetKey();
       } else {
-        setKey((String)value);
+        setKey((byte[])value);
       }
       break;
 
@@ -304,7 +305,7 @@ public boolean equals(KeySlice that) {
     if (this_present_key || that_present_key) {
       if (!(this_present_key && that_present_key))
         return false;
-      if (!this.key.equals(that.key))
+      if (!java.util.Arrays.equals(this.key, that.key))
         return false;
     }
 
@@ -366,7 +367,7 @@ public void read(TProtocol iprot) throws TException {
       switch (field.id) {
         case 1: // KEY
           if (field.type == TType.STRING) {
-            this.key = iprot.readString();
+            this.key = iprot.readBinary();
           } else { 
             TProtocolUtil.skip(iprot, field.type);
           }
@@ -406,7 +407,7 @@ public void write(TProtocol oprot) throws TException {
     oprot.writeStructBegin(STRUCT_DESC);
     if (this.key != null) {
       oprot.writeFieldBegin(KEY_FIELD_DESC);
-      oprot.writeString(this.key);
+      oprot.writeBinary(this.key);
       oprot.writeFieldEnd();
     }
     if (this.columns != null) {
@@ -434,7 +435,12 @@ public String toString() {
     if (this.key == null) {
       sb.append("null");
     } else {
-      sb.append(this.key);
+        int __key_size = Math.min(this.key.length, 128);
+        for (int i = 0; i < __key_size; i++) {
+          if (i != 0) sb.append(" ");
+          sb.append(Integer.toHexString(this.key[i]).length() > 1 ? Integer.toHexString(this.key[i]).substring(Integer.toHexString(this.key[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.key[i]).toUpperCase());
+        }
+        if (this.key.length > 128) sb.append(" ...");
     }
     first = false;
     if (!first) sb.append(", ");
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
index 1f1f9fb0..15b9f6a9 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
@@ -166,7 +166,7 @@ private void executeCount(CommonTree ast) throws TException, InvalidRequestExcep
            colParent = new ColumnParent(columnFamily).setSuper_column(CliCompiler.getColumn(columnFamilySpec, 0).getBytes("UTF-8"));
        }
        
-       int count = thriftClient_.get_count(tableName, key, colParent, ConsistencyLevel.ONE);
+       int count = thriftClient_.get_count(tableName, key.getBytes(), colParent, ConsistencyLevel.ONE);
        css_.out.printf("%d columns\n", count);
     }
     
@@ -227,7 +227,7 @@ else if (columnSpecCnt == 2)
             columnName = CliCompiler.getColumn(columnFamilySpec, 1).getBytes("UTF-8");
         }
 
-        thriftClient_.remove(tableName, key, new ColumnPath(columnFamily).setSuper_column(superColumnName).setColumn(columnName),
+        thriftClient_.remove(tableName, key.getBytes(), new ColumnPath(columnFamily).setSuper_column(superColumnName).setColumn(columnName),
                              timestampMicros(), ConsistencyLevel.ONE);
         css_.out.println(String.format("%s removed.", (columnSpecCnt == 0) ? "row" : "column"));
     }
@@ -243,7 +243,7 @@ private void doSlice(String keyspace, String key, String columnFamily, byte[] su
             throws InvalidRequestException, UnavailableException, TimedOutException, TException, UnsupportedEncodingException, IllegalAccessException, NotFoundException, InstantiationException, ClassNotFoundException
     {
         SliceRange range = new SliceRange(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, true, 1000000);
-        List<ColumnOrSuperColumn> columns = thriftClient_.get_slice(keyspace, key,
+        List<ColumnOrSuperColumn> columns = thriftClient_.get_slice(keyspace, key.getBytes(),
                                                                     new ColumnParent(columnFamily).setSuper_column(superColumnName),
                                                                     new SlicePredicate().setColumn_names(null).setSlice_range(range), ConsistencyLevel.ONE);
         int size = columns.size();
@@ -363,7 +363,7 @@ else if (columnSpecCnt == 2)
         
         // Perform a get(), print out the results.
         ColumnPath path = new ColumnPath(columnFamily).setSuper_column(superColumnName).setColumn(columnName);
-        Column column = thriftClient_.get(tableName, key, path, ConsistencyLevel.ONE).column;
+        Column column = thriftClient_.get(tableName, key.getBytes(), path, ConsistencyLevel.ONE).column;
         css_.out.printf("=> (column=%s, value=%s, timestamp=%d)\n", formatColumnName(tableName, columnFamily, column),
                         new String(column.value, "UTF-8"), column.timestamp);
     }
@@ -411,7 +411,7 @@ else if (columnSpecCnt == 1)
         }
         
         // do the insert
-        thriftClient_.insert(tableName, key, new ColumnPath(columnFamily).setSuper_column(superColumnName).setColumn(columnName),
+        thriftClient_.insert(tableName, key.getBytes(), new ColumnPath(columnFamily).setSuper_column(superColumnName).setColumn(columnName),
                              value.getBytes(), timestampMicros(), ConsistencyLevel.ONE);
         
         css_.out.println("Value inserted.");
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java b/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java
index f9eb561f..db4e0101 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyInputFormat.java
@@ -60,7 +60,7 @@
  *
  * The default split size is 64k rows.
  */
-public class ColumnFamilyInputFormat extends InputFormat<String, SortedMap<byte[], IColumn>>
+public class ColumnFamilyInputFormat extends InputFormat<byte[], SortedMap<byte[], IColumn>>
 {
 
     private static final Logger logger = LoggerFactory.getLogger(StorageService.class);
@@ -218,7 +218,7 @@ public SplitCallable(TokenRange tr, int splitsize)
     }
 
     @Override
-    public RecordReader<String, SortedMap<byte[], IColumn>> createRecordReader(InputSplit inputSplit, TaskAttemptContext taskAttemptContext) throws IOException, InterruptedException
+    public RecordReader<byte[], SortedMap<byte[], IColumn>> createRecordReader(InputSplit inputSplit, TaskAttemptContext taskAttemptContext) throws IOException, InterruptedException
     {
         return new ColumnFamilyRecordReader();
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java b/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java
index c1b33e50..6e82216a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/hadoop/ColumnFamilyRecordReader.java
@@ -46,11 +46,11 @@
 import org.apache.thrift.transport.TSocket;
 import org.apache.thrift.transport.TTransportException;
 
-public class ColumnFamilyRecordReader extends RecordReader<String, SortedMap<byte[], IColumn>>
+public class ColumnFamilyRecordReader extends RecordReader<byte[], SortedMap<byte[], IColumn>>
 {
     private ColumnFamilySplit split;
     private RowIterator iter;
-    private Pair<String, SortedMap<byte[], IColumn>> currentRow;
+    private Pair<byte[], SortedMap<byte[], IColumn>> currentRow;
     private SlicePredicate predicate;
     private int totalRowCount; // total number of rows to fetch
     private int batchRowCount; // fetch this many per batch
@@ -59,7 +59,7 @@
 
     public void close() {}
     
-    public String getCurrentKey()
+    public byte[] getCurrentKey()
     {
         return currentRow.left;
     }
@@ -95,7 +95,7 @@ public boolean nextKeyValue() throws IOException
         return true;
     }
 
-    private class RowIterator extends AbstractIterator<Pair<String, SortedMap<byte[], IColumn>>>
+    private class RowIterator extends AbstractIterator<Pair<byte[], SortedMap<byte[], IColumn>>>
     {
 
         private List<KeySlice> rows;
@@ -159,8 +159,7 @@ else if (startToken.equals(split.getEndToken()))
                 // prepare for the next slice to be read
                 KeySlice lastRow = rows.get(rows.size() - 1);
                 IPartitioner p = DatabaseDescriptor.getPartitioner();
-                // FIXME: thrift strings
-                byte[] rowkey = lastRow.getKey().getBytes(UTF8);
+                byte[] rowkey = lastRow.getKey();
                 startToken = p.getTokenFactory().toString(p.getToken(rowkey));
             }
             catch (Exception e)
@@ -213,7 +212,7 @@ public int rowsRead()
         }
 
         @Override
-        protected Pair<String, SortedMap<byte[], IColumn>> computeNext()
+        protected Pair<byte[], SortedMap<byte[], IColumn>> computeNext()
         {
             maybeInit();
             if (rows == null)
@@ -227,7 +226,7 @@ public int rowsRead()
                 IColumn column = unthriftify(cosc);
                 map.put(column.name(), column);
             }
-            return new Pair<String, SortedMap<byte[], IColumn>>(ks.key, map);
+            return new Pair<byte[], SortedMap<byte[], IColumn>>(ks.key, map);
         }
     }
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
index b3b37bcc..585730f9 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraServer.java
@@ -186,18 +186,17 @@ public CassandraServer()
         return thriftSuperColumns;
     }
 
-    private Map<String, List<ColumnOrSuperColumn>> getSlice(List<ReadCommand> commands, ConsistencyLevel consistency_level)
+    private Map<byte[], List<ColumnOrSuperColumn>> getSlice(List<ReadCommand> commands, ConsistencyLevel consistency_level)
     throws InvalidRequestException, UnavailableException, TimedOutException
     {
         Map<byte[], ColumnFamily> columnFamilies = readColumnFamily(commands, consistency_level);
-        Map<String, List<ColumnOrSuperColumn>> columnFamiliesMap = new HashMap<String, List<ColumnOrSuperColumn>>();
+        Map<byte[], List<ColumnOrSuperColumn>> columnFamiliesMap = new HashMap<byte[], List<ColumnOrSuperColumn>>();
         for (ReadCommand command: commands)
         {
             ColumnFamily cf = columnFamilies.get(command.key);
             boolean reverseOrder = command instanceof SliceFromReadCommand && ((SliceFromReadCommand)command).reversed;
             List<ColumnOrSuperColumn> thriftifiedColumns = thriftifyColumnFamily(cf, command.queryPath.superColumnName != null, reverseOrder);
-            // FIXME: string keys
-            columnFamiliesMap.put(new String(command.key, UTF8), thriftifiedColumns);
+            columnFamiliesMap.put(command.key, thriftifiedColumns);
         }
 
         return columnFamiliesMap;
@@ -222,7 +221,7 @@ public CassandraServer()
             return thriftifyColumns(cf.getSortedColumns(), reverseOrder);
     }
 
-    public List<ColumnOrSuperColumn> get_slice(String keyspace, String key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level)
+    public List<ColumnOrSuperColumn> get_slice(String keyspace, byte[] key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level)
     throws InvalidRequestException, UnavailableException, TimedOutException
     {
         if (logger.isDebugEnabled())
@@ -232,7 +231,7 @@ public CassandraServer()
         return multigetSliceInternal(keyspace, Arrays.asList(key), column_parent, predicate, consistency_level).get(key);
     }
     
-    public Map<String, List<ColumnOrSuperColumn>> multiget_slice(String keyspace, List<String> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level)
+    public Map<byte[], List<ColumnOrSuperColumn>> multiget_slice(String keyspace, List<byte[]> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level)
     throws InvalidRequestException, UnavailableException, TimedOutException
     {
         if (logger.isDebugEnabled())
@@ -243,7 +242,7 @@ public CassandraServer()
         return multigetSliceInternal(keyspace, keys, column_parent, predicate, consistency_level);
     }
 
-    private Map<String, List<ColumnOrSuperColumn>> multigetSliceInternal(String keyspace, List<String> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level)
+    private Map<byte[], List<ColumnOrSuperColumn>> multigetSliceInternal(String keyspace, List<byte[]> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level)
     throws InvalidRequestException, UnavailableException, TimedOutException
     {
         ThriftValidation.validateColumnParent(keyspace, column_parent);
@@ -252,28 +251,26 @@ public CassandraServer()
         List<ReadCommand> commands = new ArrayList<ReadCommand>();
         if (predicate.column_names != null)
         {
-            for (String key: keys)
+            for (byte[] key: keys)
             {
                 ThriftValidation.validateKey(key);
-                // FIXME: string keys
-                commands.add(new SliceByNamesReadCommand(keyspace, key.getBytes(UTF8), column_parent, predicate.column_names));
+                commands.add(new SliceByNamesReadCommand(keyspace, key, column_parent, predicate.column_names));
             }
         }
         else
         {
             SliceRange range = predicate.slice_range;
-            for (String key: keys)
+            for (byte[] key: keys)
             {
                 ThriftValidation.validateKey(key);
-                // FIXME: string keys
-                commands.add(new SliceFromReadCommand(keyspace, key.getBytes(UTF8), column_parent, range.start, range.finish, range.reversed, range.count));
+                commands.add(new SliceFromReadCommand(keyspace, key, column_parent, range.start, range.finish, range.reversed, range.count));
             }
         }
 
         return getSlice(commands, consistency_level);
     }
 
-    public ColumnOrSuperColumn get(String table, String key, ColumnPath column_path, ConsistencyLevel consistency_level)
+    public ColumnOrSuperColumn get(String table, byte[] key, ColumnPath column_path, ConsistencyLevel consistency_level)
     throws InvalidRequestException, NotFoundException, UnavailableException, TimedOutException
     {
         if (logger.isDebugEnabled())
@@ -290,7 +287,7 @@ public ColumnOrSuperColumn get(String table, String key, ColumnPath column_path,
     }
 
     /** always returns a ColumnOrSuperColumn for each key, even if there is no data for it */
-    public Map<String, ColumnOrSuperColumn> multiget(String table, List<String> keys, ColumnPath column_path, ConsistencyLevel consistency_level)
+    public Map<byte[], ColumnOrSuperColumn> multiget(String table, List<byte[]> keys, ColumnPath column_path, ConsistencyLevel consistency_level)
     throws InvalidRequestException, UnavailableException, TimedOutException
     {
         if (logger.isDebugEnabled())
@@ -301,7 +298,7 @@ public ColumnOrSuperColumn get(String table, String key, ColumnPath column_path,
         return multigetInternal(table, keys, column_path, consistency_level);
     }
 
-    private Map<String, ColumnOrSuperColumn> multigetInternal(String table, List<String> keys, ColumnPath column_path, ConsistencyLevel consistency_level)
+    private Map<byte[], ColumnOrSuperColumn> multigetInternal(String table, List<byte[]> keys, ColumnPath column_path, ConsistencyLevel consistency_level)
     throws InvalidRequestException, UnavailableException, TimedOutException
     {
         ThriftValidation.validateColumnPath(table, column_path);
@@ -309,37 +306,34 @@ public ColumnOrSuperColumn get(String table, String key, ColumnPath column_path,
         QueryPath path = new QueryPath(column_path.column_family, column_path.column == null ? null : column_path.super_column);
         List<byte[]> nameAsList = Arrays.asList(column_path.column == null ? column_path.super_column : column_path.column);
         List<ReadCommand> commands = new ArrayList<ReadCommand>();
-        for (String key: keys)
+        for (byte[] key: keys)
         {
             ThriftValidation.validateKey(key);
-            // FIXME: string keys
-            commands.add(new SliceByNamesReadCommand(table, key.getBytes(UTF8), path, nameAsList));
+            commands.add(new SliceByNamesReadCommand(table, key, path, nameAsList));
         }
 
-        Map<String, ColumnOrSuperColumn> columnFamiliesMap = new HashMap<String, ColumnOrSuperColumn>();
+        Map<byte[], ColumnOrSuperColumn> columnFamiliesMap = new HashMap<byte[], ColumnOrSuperColumn>();
         Map<byte[], ColumnFamily> cfamilies = readColumnFamily(commands, consistency_level);
 
 
         for (ReadCommand command: commands)
         {
             ColumnFamily cf = cfamilies.get(command.key);
-            // FIXME: string keys
-            String skey = new String(command.key, UTF8);
             if (cf == null)
             {
-                columnFamiliesMap.put(skey, new ColumnOrSuperColumn());
+                columnFamiliesMap.put(command.key, new ColumnOrSuperColumn());
             }
             else
             {
                 List<ColumnOrSuperColumn> tcolumns = thriftifyColumnFamily(cf, command.queryPath.superColumnName != null, false);
-                columnFamiliesMap.put(skey, tcolumns.size() > 0 ? tcolumns.iterator().next() : new ColumnOrSuperColumn());
+                columnFamiliesMap.put(command.key, tcolumns.size() > 0 ? tcolumns.iterator().next() : new ColumnOrSuperColumn());
             }
         }
 
         return columnFamiliesMap;
     }
 
-    public int get_count(String table, String key, ColumnParent column_parent, ConsistencyLevel consistency_level)
+    public int get_count(String table, byte[] key, ColumnParent column_parent, ConsistencyLevel consistency_level)
     throws InvalidRequestException, UnavailableException, TimedOutException
     {
         if (logger.isDebugEnabled())
@@ -352,7 +346,7 @@ public int get_count(String table, String key, ColumnParent column_parent, Consi
         return get_slice(table, key, column_parent, predicate, consistency_level).size();
     }
 
-    public void insert(String table, String key, ColumnPath column_path, byte[] value, long timestamp, ConsistencyLevel consistency_level)
+    public void insert(String table, byte[] key, ColumnPath column_path, byte[] value, long timestamp, ConsistencyLevel consistency_level)
     throws InvalidRequestException, UnavailableException, TimedOutException
     {
         if (logger.isDebugEnabled())
@@ -363,8 +357,7 @@ public void insert(String table, String key, ColumnPath column_path, byte[] valu
         ThriftValidation.validateKey(key);
         ThriftValidation.validateColumnPath(table, column_path);
 
-        // FIXME: string keys
-        RowMutation rm = new RowMutation(table, key.getBytes(UTF8));
+        RowMutation rm = new RowMutation(table, key);
         try
         {
             rm.add(new QueryPath(column_path), value, timestamp);
@@ -376,7 +369,7 @@ public void insert(String table, String key, ColumnPath column_path, byte[] valu
         doInsert(consistency_level, rm);
     }
     
-    public void batch_insert(String keyspace, String key, Map<String, List<ColumnOrSuperColumn>> cfmap, ConsistencyLevel consistency_level)
+    public void batch_insert(String keyspace, byte[] key, Map<String, List<ColumnOrSuperColumn>> cfmap, ConsistencyLevel consistency_level)
     throws InvalidRequestException, UnavailableException, TimedOutException
     {
         if (logger.isDebugEnabled())
@@ -394,11 +387,10 @@ public void batch_insert(String keyspace, String key, Map<String, List<ColumnOrS
             }
         }
 
-        // FIXME: string keys
-        doInsert(consistency_level, RowMutation.getRowMutation(keyspace, key.getBytes(UTF8), cfmap));
+        doInsert(consistency_level, RowMutation.getRowMutation(keyspace, key, cfmap));
     }
 
-    public void batch_mutate(String keyspace, Map<String,Map<String,List<Mutation>>> mutation_map, ConsistencyLevel consistency_level)
+    public void batch_mutate(String keyspace, Map<byte[],Map<String,List<Mutation>>> mutation_map, ConsistencyLevel consistency_level)
     throws InvalidRequestException, UnavailableException, TimedOutException
     {
         if (logger.isDebugEnabled())
@@ -425,9 +417,9 @@ public void batch_mutate(String keyspace, Map<String,Map<String,List<Mutation>>>
         checkLoginAuthorized(needed);
 
         List<RowMutation> rowMutations = new ArrayList<RowMutation>();
-        for (Map.Entry<String, Map<String, List<Mutation>>> mutationEntry: mutation_map.entrySet())
+        for (Map.Entry<byte[], Map<String, List<Mutation>>> mutationEntry: mutation_map.entrySet())
         {
-            String key = mutationEntry.getKey();
+            byte[] key = mutationEntry.getKey();
 
             ThriftValidation.validateKey(key);
             Map<String, List<Mutation>> columnFamilyToMutations = mutationEntry.getValue();
@@ -440,8 +432,7 @@ public void batch_mutate(String keyspace, Map<String,Map<String,List<Mutation>>>
                     ThriftValidation.validateMutation(keyspace, cfName, mutation);
                 }
             }
-            // FIXME: string keys
-            rowMutations.add(RowMutation.getRowMutationFromMutations(keyspace, key.getBytes(UTF8), columnFamilyToMutations));
+            rowMutations.add(RowMutation.getRowMutationFromMutations(keyspace, key, columnFamilyToMutations));
         }
         if (consistency_level == ConsistencyLevel.ZERO)
         {
@@ -460,7 +451,7 @@ public void batch_mutate(String keyspace, Map<String,Map<String,List<Mutation>>>
         }
     }
 
-    public void remove(String table, String key, ColumnPath column_path, long timestamp, ConsistencyLevel consistency_level)
+    public void remove(String table, byte[] key, ColumnPath column_path, long timestamp, ConsistencyLevel consistency_level)
     throws InvalidRequestException, UnavailableException, TimedOutException
     {
         if (logger.isDebugEnabled())
@@ -471,8 +462,7 @@ public void remove(String table, String key, ColumnPath column_path, long timest
         ThriftValidation.validateKey(key);
         ThriftValidation.validateColumnPathOrParent(table, column_path);
         
-        // FIXME: string keys
-        RowMutation rm = new RowMutation(table, key.getBytes(UTF8));
+        RowMutation rm = new RowMutation(table, key);
         rm.delete(new QueryPath(column_path), timestamp);
 
         doInsert(consistency_level, rm);
@@ -523,7 +513,7 @@ private void doInsert(ConsistencyLevel consistency_level, RowMutation rm) throws
         return columnFamiliesMap;
     }
 
-    public List<KeySlice> get_range_slice(String keyspace, ColumnParent column_parent, SlicePredicate predicate, String start_key, String finish_key, int maxRows, ConsistencyLevel consistency_level)
+    public List<KeySlice> get_range_slice(String keyspace, ColumnParent column_parent, SlicePredicate predicate, byte[] start_key, byte[] finish_key, int maxRows, ConsistencyLevel consistency_level)
     throws InvalidRequestException, UnavailableException, TException, TimedOutException
     {
         if (logger.isDebugEnabled())
@@ -565,8 +555,7 @@ private void doInsert(ConsistencyLevel consistency_level, RowMutation rm) throws
             }
             else
             {
-                // FIXME: string keys
-                bounds = new Bounds(p.getToken(range.start_key.getBytes(UTF8)), p.getToken(range.end_key.getBytes(UTF8)));
+                bounds = new Bounds(p.getToken(range.start_key), p.getToken(range.end_key));
             }
             rows = StorageProxy.getRangeSlice(new RangeSliceCommand(keyspace, column_parent, predicate, bounds, range.count), consistency_level);
             assert rows != null;
@@ -585,8 +574,7 @@ private void doInsert(ConsistencyLevel consistency_level, RowMutation rm) throws
         for (Row row : rows)
         {
             List<ColumnOrSuperColumn> thriftifiedColumns = thriftifyColumnFamily(row.cf, column_parent.super_column != null, reversed);
-            // FIXME: string keys
-            keySlices.add(new KeySlice(new String(row.key.key, UTF8), thriftifiedColumns));
+            keySlices.add(new KeySlice(row.key.key, thriftifiedColumns));
         }
 
         return keySlices;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java b/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java
index 6ac961d2..80e610a8 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftValidation.java
@@ -38,16 +38,18 @@
 
 public class ThriftValidation
 {
-    static void validateKey(String key) throws InvalidRequestException
+    static void validateKey(byte[] key) throws InvalidRequestException
     {
-        if (key.isEmpty())
+        if (key == null || key.length == 0)
         {
             throw new InvalidRequestException("Key may not be empty");
         }
-        // check that writeUTF will be able to handle it -- encoded length must fit in 2 bytes
-        int utflen = FBUtilities.encodedUTF8Length(key);
-        if (utflen > 65535)
-            throw new InvalidRequestException("Encoded key length of " + utflen + " is longer than maximum of 65535");
+        // check that key can be handled by FBUtilities.writeShortByteArray
+        if (key.length > FBUtilities.MAX_UNSIGNED_SHORT)
+        {
+            throw new InvalidRequestException("Key length of " + key.length +
+                    " is longer than maximum of " + FBUtilities.MAX_UNSIGNED_SHORT);
+        }
     }
 
     private static void validateTable(String tablename) throws KeyspaceNotDefinedException
@@ -303,9 +305,8 @@ public static void validateKeyRange(KeyRange range) throws InvalidRequestExcepti
         if (range.start_key != null)
         {
             IPartitioner p = StorageService.getPartitioner();
-            // FIXME: string keys
-            Token startToken = p.getToken(range.start_key.getBytes(FBUtilities.UTF8));
-            Token endToken = p.getToken(range.end_key.getBytes(FBUtilities.UTF8));
+            Token startToken = p.getToken(range.start_key);
+            Token endToken = p.getToken(range.end_key);
             if (startToken.compareTo(endToken) > 0 && !endToken.equals(p.getMinimumToken()))
             {
                 if (p instanceof RandomPartitioner)
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/client/TestRingCache.java b/cassandra/trunk/test/unit/org/apache/cassandra/client/TestRingCache.java
index e338dea5..e9953c5f 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/client/TestRingCache.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/client/TestRingCache.java
@@ -87,20 +87,20 @@ public static void main(String[] args) throws Throwable
 
         for (int nRows = minRow; nRows < maxRow; nRows++)
         {
-            String row = rowPrefix + nRows;
+            byte[] row = (rowPrefix + nRows).getBytes();
             ColumnPath col = new ColumnPath("Standard1").setSuper_column(null).setColumn("col1".getBytes());
 
-            List<InetAddress> endPoints = tester.ringCache.getEndPoint(row.getBytes());
+            List<InetAddress> endPoints = tester.ringCache.getEndPoint(row);
             String hosts="";
             for (int i = 0; i < endPoints.size(); i++)
                 hosts = hosts + ((i > 0) ? "," : "") + endPoints.get(i);
-            System.out.println("hosts with key " + row + " : " + hosts + "; choose " + endPoints.get(0));
+            System.out.println("hosts with key " + new String(row) + " : " + hosts + "; choose " + endPoints.get(0));
 
             // now, read the row back directly from the host owning the row locally
             tester.setup(endPoints.get(0).getHostAddress(), DatabaseDescriptor.getRpcPort());
             tester.thriftClient.insert(keyspace, row, col, "val1".getBytes(), 1, ConsistencyLevel.ONE);
             Column column = tester.thriftClient.get(keyspace, row, col, ConsistencyLevel.ONE).column;
-            System.out.println("read row " + row + " " + new String(column.name) + ":" + new String(column.value) + ":" + column.timestamp);
+            System.out.println("read row " + new String(row) + " " + new String(column.name) + ":" + new String(column.value) + ":" + column.timestamp);
         }
 
         System.exit(1);
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/service/EmbeddedCassandraServiceTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/service/EmbeddedCassandraServiceTest.java
index a3b63005..3afc8b68 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/service/EmbeddedCassandraServiceTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/service/EmbeddedCassandraServiceTest.java
@@ -89,7 +89,7 @@ public void testEmbeddedCassandraService() throws UnsupportedEncodingException,
     {
         Cassandra.Client client = getClient();
 
-        String key_user_id = "1";
+        byte[] key_user_id = "1".getBytes();
 
         long timestamp = System.currentTimeMillis();
         ColumnPath cp = new ColumnPath("Standard1");
