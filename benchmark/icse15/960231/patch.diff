diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
index 595c7a58..8d173007 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
@@ -142,8 +142,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	
 	//all the temporary tables declared for this connection
 	private ArrayList allDeclaredGlobalTempTables;
-	//The currentSavepointLevel is used to provide the rollback behavior of temporary tables.
-	//At any point, this variable has the total number of savepoints defined for the transaction.
+
+    //The currentSavepointLevel is used to provide the rollback behavior of 
+    //temporary tables.  At any point, this variable has the total number of 
+    //savepoints defined for the transaction.
 	private int currentSavepointLevel = 0;
 
 	protected long	nextCursorId;
@@ -538,12 +540,13 @@ public boolean checkIfAnyDeclaredGlobalTempTablesForThisConnection() {
 	 * @see LanguageConnectionContext#addDeclaredGlobalTempTable
 	 */
 	public void addDeclaredGlobalTempTable(TableDescriptor td)
-		throws StandardException {
+        throws StandardException 
+    {
 
-		if (findDeclaredGlobalTempTable(td.getName()) != null) //if table already declared, throw an exception
+        if (findDeclaredGlobalTempTable(td.getName()) != null) 
 		{
-			throw
-				StandardException.newException(
+            //if table already declared, throw an exception
+            throw StandardException.newException(
 											   SQLState.LANG_OBJECT_ALREADY_EXISTS_IN_OBJECT,
 											   "Declared global temporary table",
 											   td.getName(),
@@ -552,7 +555,11 @@ public void addDeclaredGlobalTempTable(TableDescriptor td)
 		}
 
 		//save all the information about temp table in this special class
-		TempTableInfo tempTableInfo = new TempTableInfo(td, currentSavepointLevel);
+        TempTableInfo tempTableInfo = 
+            new TempTableInfo(td, currentSavepointLevel);
+
+        // Rather than exist in a catalog, a simple array is kept of the 
+        // tables currently active in the transaction.
 
 		if (allDeclaredGlobalTempTables == null)
 			allDeclaredGlobalTempTables = new ArrayList();
@@ -563,70 +570,126 @@ public void addDeclaredGlobalTempTable(TableDescriptor td)
 	/**
 	 * @see LanguageConnectionContext#dropDeclaredGlobalTempTable
 	 */
-	public boolean dropDeclaredGlobalTempTable(String tableName) {
+    public boolean dropDeclaredGlobalTempTable(String tableName) 
+    {
     TempTableInfo tempTableInfo = findDeclaredGlobalTempTable(tableName);
+
 		if (tempTableInfo != null)
 		{
 			if (SanityManager.DEBUG)
-				if (tempTableInfo.getDeclaredInSavepointLevel() > currentSavepointLevel)
-					SanityManager.THROWASSERT("declared in savepoint level can not be higher than the current savepoint level");
-
-			//following checks if the table was declared in the current unit of work.
-			if (tempTableInfo.getDeclaredInSavepointLevel() == currentSavepointLevel)
 			{
-				//since the table was declared in this unit of work,
-				//the drop table method should remove it from the valid list of temp table for this unit of work
-				allDeclaredGlobalTempTables.remove(allDeclaredGlobalTempTables.indexOf(tempTableInfo));
+                if (tempTableInfo.getDeclaredInSavepointLevel() > 
+                        currentSavepointLevel)
+                {
+                    SanityManager.THROWASSERT(
+                        "declared in savepoint level (" + 
+                            tempTableInfo.getDeclaredInSavepointLevel() + 
+                        ") can not be higher than current savepoint level (" +
+                            currentSavepointLevel +
+                        ").");
+                }
+            }
+
+            // check if the table was declared in the current unit of work.
+            if (tempTableInfo.getDeclaredInSavepointLevel() == 
+                    currentSavepointLevel)
+            {
+                // since the table was declared in this unit of work, the drop 
+                // table method should remove it from the valid list of temp 
+                // table for this unit of work
+                allDeclaredGlobalTempTables.remove(
+                        allDeclaredGlobalTempTables.indexOf(tempTableInfo));
+
 				if (allDeclaredGlobalTempTables.size() == 0)
 					allDeclaredGlobalTempTables = null;
 			}
 			else
 			{
-				//since the table was not declared in this unit of work, the drop table method will just mark the table as dropped
-				//in the current unit of work. This information will be used at rollback time.
+                // since the table was not declared in this unit of work, the
+                // drop table method will just mark the table as dropped
+                // in the current unit of work. This information will be used 
+                // at rollback time.
+
 				tempTableInfo.setDroppedInSavepointLevel(currentSavepointLevel);
 			}
+
 			return true;
-		} else
+        } 
+        else
+        {
 			return false;
 	}
+    }
 
 	/**
-	 * After a release of a savepoint, we need to go through our temp tables list. If there are tables with their declare or drop
-	 * or modified in savepoint levels set to savepoint levels higher than the current savepoint level, then we should change them
-	 * to the current savepoint level
-	 */
-	private void tempTablesReleaseSavepointLevels() {
-    //unlike rollback, here we check for dropped in / declared in / modified in savepoint levels > current savepoint level only.
-    //This is because the temp tables with their savepoint levels same as currentSavepointLevel have correct value assigned to them and
-    //do not need to be changed and hence no need to check for >=
-		for (int i = 0; i < allDeclaredGlobalTempTables.size(); i++) {
-			TempTableInfo tempTableInfo = (TempTableInfo)allDeclaredGlobalTempTables.get(i);
-			if (tempTableInfo.getDroppedInSavepointLevel() > currentSavepointLevel)
+     * After a release of a savepoint, we need to go through our temp tables 
+     * list. If there are tables with their declare or drop or modified in 
+     * savepoint levels set to savepoint levels higher than the current 
+     * savepoint level, then we should change them to the current savepoint
+     * level
+     */
+    private void tempTablesReleaseSavepointLevels() 
+    {
+        // unlike rollback, here we check for dropped in / declared in / 
+        // modified in savepoint levels > current savepoint level only.
+        // This is because the temp tables with their savepoint levels same as 
+        // currentSavepointLevel have correct value assigned to them and
+        // do not need to be changed and hence no need to check for >=
+
+        for (int i = 0; i < allDeclaredGlobalTempTables.size(); i++) 
+        {
+            TempTableInfo tempTableInfo = 
+                (TempTableInfo)allDeclaredGlobalTempTables.get(i);
+
+            if (tempTableInfo.getDroppedInSavepointLevel() > 
+                    currentSavepointLevel)
+            {
 				tempTableInfo.setDroppedInSavepointLevel(currentSavepointLevel);
+            }
 
-			if (tempTableInfo.getDeclaredInSavepointLevel() > currentSavepointLevel)
-				tempTableInfo.setDeclaredInSavepointLevel(currentSavepointLevel);
+            if (tempTableInfo.getDeclaredInSavepointLevel() > 
+                    currentSavepointLevel)
+            {
+                tempTableInfo.setDeclaredInSavepointLevel(
+                    currentSavepointLevel);
+            }
 
-			if (tempTableInfo.getModifiedInSavepointLevel() > currentSavepointLevel)
-				tempTableInfo.setModifiedInSavepointLevel(currentSavepointLevel);
+            if (tempTableInfo.getModifiedInSavepointLevel() > 
+                    currentSavepointLevel)
+            {
+                tempTableInfo.setModifiedInSavepointLevel(
+                    currentSavepointLevel);
+            }
 		}
 	}
 
 	/**
 	 * do the necessary work at commit time for temporary tables
-	 * 1)If a temporary table was marked as dropped in this transaction, then remove it from the list of temp tables for this connection
-	 * 2)If a temporary table was not dropped in this transaction, then mark it's declared savepoint level and modified savepoint level as -1
+     * 1)If a temporary table was marked as dropped in this transaction, then 
+     *   remove it from the list of temp tables for this connection
+     * 2)If a temporary table was not dropped in this transaction, then mark 
+     *   it's declared savepoint level and modified savepoint level as -1
 	 */
-	private void tempTablesAndCommit() {
-		for (int i = allDeclaredGlobalTempTables.size()-1; i >= 0; i--) {
-			TempTableInfo tempTableInfo = (TempTableInfo)allDeclaredGlobalTempTables.get(i);
+    private void tempTablesAndCommit() 
+    {
+        for (int i = allDeclaredGlobalTempTables.size()-1; i >= 0; i--) 
+        {
+            TempTableInfo tempTableInfo = 
+                (TempTableInfo)allDeclaredGlobalTempTables.get(i);
+
 			if (tempTableInfo.getDroppedInSavepointLevel() != -1)
 			{
-				//this means table was dropped in this unit of work and hence should be removed from valid list of temp tables
+                // this means table was dropped in this unit of work and hence 
+                // should be removed from valid list of temp tables
+
 				allDeclaredGlobalTempTables.remove(i);
-			} else //this table was not dropped in this unit of work, hence set its declaredInSavepointLevel as -1 and also mark it as not modified 
+            } 
+            else 
 			{
+                //this table was not dropped in this unit of work, hence set 
+                //its declaredInSavepointLevel as -1 and also mark it as not 
+                //modified 
+
 				tempTableInfo.setDeclaredInSavepointLevel(-1);
 				tempTableInfo.setModifiedInSavepointLevel(-1);
 			}
@@ -661,39 +724,58 @@ public void resetFromPool()
     public  Object    getLastQueryTree() { return lastQueryTree; }
 
 	/**
-	 * Drop all the declared global temporary tables associated with this connection. This gets called
-	 * when a getConnection() is done on a PooledConnection. This will ensure all the temporary tables
-	 * declared on earlier connection handle associated with this physical database connection are dropped
-	 * before a new connection handle is issued on that same physical database connection.
+     * Drop all the declared global temporary tables associated with this 
+     * connection. This gets called when a getConnection() is done on a 
+     * PooledConnection. This will ensure all the temporary tables declared on
+     * earlier connection handle associated with this physical database 
+     * connection are dropped before a new connection handle is issued on that 
+     * same physical database connection.
 	 */
-	private void dropAllDeclaredGlobalTempTables() throws StandardException {
+    private void dropAllDeclaredGlobalTempTables() throws StandardException 
+    {
 		if (allDeclaredGlobalTempTables == null)
 			return;
     
 		DependencyManager dm = getDataDictionary().getDependencyManager();
 		StandardException topLevelStandardException = null;
 
-		//collect all the exceptions we might receive while dropping the temporary tables and throw them as one chained exception at the end.
-		for (int i = 0; i < allDeclaredGlobalTempTables.size(); i++) {
-			try {
-				TempTableInfo tempTableInfo = (TempTableInfo)allDeclaredGlobalTempTables.get(i);
+        // collect all the exceptions we might receive while dropping the 
+        // temporary tables and throw them as one chained exception at the end.
+        for (int i = 0; i < allDeclaredGlobalTempTables.size(); i++) 
+        {
+            try 
+            {
+                TempTableInfo tempTableInfo = 
+                    (TempTableInfo)allDeclaredGlobalTempTables.get(i);
+
 				TableDescriptor td = tempTableInfo.getTableDescriptor();
-				//the following 2 lines of code has been copied from DropTableConstantAction. If there are any changes made there in future,
-				//we should check if they need to be made here too.
+
+                // the following 2 lines of code has been copied from 
+                // DropTableConstantAction. If there are any changes made there
+                // in future, we should check if they need to be made here too.
 				dm.invalidateFor(td, DependencyManager.DROP_TABLE, this);
 				tran.dropConglomerate(td.getHeapConglomerateId());
-			} catch (StandardException e) {
-				if (topLevelStandardException == null) {
+
+            } 
+            catch (StandardException e) 
+            {
+                if (topLevelStandardException == null) 
+                {
 					// always keep the first exception unchanged
 					topLevelStandardException = e;
-				} else {
-					try {
+                } 
+                else 
+                {
+                    try 
+                    {
 						// Try to create a chain of exceptions. If successful,
 						// the current exception is the top-level exception,
 						// and the previous exception the cause of it.
 						e.initCause(topLevelStandardException);
 						topLevelStandardException = e;
-					} catch (IllegalStateException ise) {
+                    } 
+                    catch (IllegalStateException ise) 
+                    {
 						// initCause() has already been called on e. We don't
 						// expect this to happen, but if it happens, just skip
 						// the current exception from the chain. This is safe
@@ -704,68 +786,126 @@ private void dropAllDeclaredGlobalTempTables() throws StandardException {
 		}
     
 		allDeclaredGlobalTempTables = null;
-		try {
+        try 
+        {
 			internalCommit(true);
-		} catch (StandardException e) {
+        } 
+        catch (StandardException e) 
+        {
 			// do the same chaining as above
-			if (topLevelStandardException == null) {
+            if (topLevelStandardException == null) 
+            {
 				topLevelStandardException = e;
-			} else {
-				try {
+            } 
+            else 
+            {
+                try 
+                {
 					e.initCause(topLevelStandardException);
 					topLevelStandardException = e;
-				} catch (IllegalStateException ise) { /* ignore */ }
+                } 
+                catch (IllegalStateException ise) 
+                { 
+                    /* ignore */ 
 			}
 		}
-		if (topLevelStandardException != null) throw topLevelStandardException;
 	}
 
-	//do the necessary work at rollback time for temporary tables
+        if (topLevelStandardException != null) 
+            throw topLevelStandardException;
+    }
+
 	/**
 	 * do the necessary work at rollback time for temporary tables
-	 * 1)If a temp table was declared in the UOW, then drop it and remove it from list of temporary tables.
-	 * 2)If a temp table was declared and dropped in the UOW, then remove it from list of temporary tables.
-	 * 3)If an existing temp table was dropped in the UOW, then recreate it with no data.
-	 * 4)If an existing temp table was modified in the UOW, then get rid of all the rows from the table.
+     * 1)If a temp table was declared in the UOW, then drop it and remove it 
+     *   from list of temporary tables.
+     * 2)If a temp table was declared and dropped in the UOW, then remove it 
+     *   from list of temporary tables.
+     * 3)If an existing temp table was dropped in the UOW, then recreate it 
+     *   with no data.
+     * 4)If an existing temp table was modified in the UOW, then get rid of 
+     *   all the rows from the table.
 	 */
 	private void tempTablesAndRollback()
-		throws StandardException {
-		for (int i = allDeclaredGlobalTempTables.size()-1; i >= 0; i--) {
-			TempTableInfo tempTableInfo = (TempTableInfo)allDeclaredGlobalTempTables.get(i);
-			if (tempTableInfo.getDeclaredInSavepointLevel() >= currentSavepointLevel)
+        throws StandardException 
+    {
+        for (int i = allDeclaredGlobalTempTables.size()-1; i >= 0; i--) 
+        {
+            TempTableInfo tempTableInfo = 
+                (TempTableInfo)allDeclaredGlobalTempTables.get(i);
+
+            if (tempTableInfo.getDeclaredInSavepointLevel() >= 
+                    currentSavepointLevel)
 			{
 				if (tempTableInfo.getDroppedInSavepointLevel() == -1)
 				{
-					//the table was declared but not dropped in the unit of work getting rolled back and hence we will remove
-					//it from valid list of temporary tables and drop the conglomerate associated with it
+                    // the table was declared but not dropped in the unit of 
+                    // work getting rolled back and hence we will remove it 
+                    // from valid list of temporary tables and drop the 
+                    // conglomerate associated with it
+
 					TableDescriptor td = tempTableInfo.getTableDescriptor();
-					tran.dropConglomerate(td.getHeapConglomerateId()); //remove the conglomerate created for this temp table
-					allDeclaredGlobalTempTables.remove(i); //remove it from the list of temp tables
-				} else if (tempTableInfo.getDroppedInSavepointLevel() >= currentSavepointLevel)
+
+                    //remove the conglomerate created for this temp table
+                    tran.dropConglomerate(td.getHeapConglomerateId()); 
+
+                    //remove it from the list of temp tables
+                    allDeclaredGlobalTempTables.remove(i); 
+
+                } 
+                else if (tempTableInfo.getDroppedInSavepointLevel() >= 
+                            currentSavepointLevel)
 				{
-					//the table was declared and dropped in the unit of work getting rolled back
+                    // the table was declared and dropped in the unit of work 
+                    // getting rolled back
 					allDeclaredGlobalTempTables.remove(i);
 				}
-			} else if (tempTableInfo.getDroppedInSavepointLevel() >= currentSavepointLevel) //this means the table was declared in an earlier savepoint unit / transaction and then dropped in current UOW 
+            } 
+            else if (tempTableInfo.getDroppedInSavepointLevel() >= 
+                        currentSavepointLevel) 
 			{
-				//restore the old definition of temp table because drop is being rolledback
+                // this means the table was declared in an earlier savepoint 
+                // unit / transaction and then dropped in current UOW 
+
+                // restore the old definition of temp table because drop is 
+                // being rolledback
 				TableDescriptor td = tempTableInfo.getTableDescriptor();
 				td = cleanupTempTableOnCommitOrRollback(td, false);
-				//In order to store the old conglomerate information for the temp table, we need to replace the
-				//existing table descriptor with the old table descriptor which has the old conglomerate information
+
+                // In order to store the old conglomerate information for the 
+                // temp table, we need to replace the existing table descriptor
+                // with the old table descriptor which has the old conglomerate 
+                // information
 				tempTableInfo.setTableDescriptor(td);
 				tempTableInfo.setDroppedInSavepointLevel(-1);
-				//following will mark the table as not modified. This is because the table data has been deleted as part of the current rollback
+
+                // following will mark the table as not modified. This is 
+                // because the table data has been deleted as part of the 
+                // current rollback
 				tempTableInfo.setModifiedInSavepointLevel(-1);
 				allDeclaredGlobalTempTables.set(i, tempTableInfo);
-			} else if (tempTableInfo.getModifiedInSavepointLevel() >= currentSavepointLevel) //this means the table was declared in an earlier savepoint unit / transaction and modified in current UOW
+                
+            } 
+            else if (tempTableInfo.getModifiedInSavepointLevel() >= 
+                    currentSavepointLevel) 
 			{
-				//following will mark the table as not modified. This is because the table data will be deleted as part of the current rollback
+                // this means the table was declared in an earlier savepoint 
+                // unit / transaction and modified in current UOW
+
+                // following will mark the table as not modified. This is 
+                // because the table data will be deleted as part of the 
+                // current rollback
 				tempTableInfo.setModifiedInSavepointLevel(-1);
 				TableDescriptor td = tempTableInfo.getTableDescriptor();
-				getDataDictionary().getDependencyManager().invalidateFor(td, DependencyManager.DROP_TABLE, this);
+
+                getDataDictionary().getDependencyManager().invalidateFor(
+                        td, DependencyManager.DROP_TABLE, this);
+
 				cleanupTempTableOnCommitOrRollback(td, true);
-			} // there is no else here because there is no special processing required for temp tables declares in earlier work of unit/transaction and not modified
+            } 
+            // there is no else here because there is no special processing 
+            // required for temp tables declares in earlier work of 
+            // unit/transaction and not modified
 		}
     
 		if (allDeclaredGlobalTempTables.size() == 0)
@@ -773,20 +913,32 @@ private void tempTablesAndRollback()
 	}
 
 	/**
-	 * This is called at the commit time for temporary tables with ON COMMIT DELETE ROWS
-	 * If a temp table with ON COMMIT DELETE ROWS doesn't have any held cursor open on them, we delete the data from
-	 * them by dropping the conglomerate and recreating the conglomerate. In order to store the new conglomerate
-	 * information for the temp table, we need to replace the existing table descriptor with the new table descriptor
-	 * which has the new conglomerate information
-	 * @param tableName Temporary table name whose table descriptor is getting changed
+     * This is called at the commit time for temporary tables with 
+     * ON COMMIT DELETE ROWS
+     *
+     * If a temp table with ON COMMIT DELETE ROWS doesn't have any held cursor 
+     * open on them, we delete the data from them by dropping the conglomerate 
+     * and recreating the conglomerate. In order to store the new conglomerate
+     * information for the temp table, we need to replace the existing table 
+     * descriptor with the new table descriptor which has the new conglomerate
+     * information
+     *
+     * @param tableName Temporary table name whose table descriptor is 
+     *                  getting changed
 	 * @param td New table descriptor for the temporary table
 	 */
-	private void replaceDeclaredGlobalTempTable(String tableName, TableDescriptor td) {
+    private void replaceDeclaredGlobalTempTable(
+    String          tableName, 
+    TableDescriptor td) 
+    {
     TempTableInfo tempTableInfo = findDeclaredGlobalTempTable(tableName);
+        
 		tempTableInfo.setDroppedInSavepointLevel(-1);
 		tempTableInfo.setDeclaredInSavepointLevel(-1);
 		tempTableInfo.setTableDescriptor(td);
-		allDeclaredGlobalTempTables.set(allDeclaredGlobalTempTables.indexOf(tempTableInfo), tempTableInfo);
+
+        allDeclaredGlobalTempTables.set(
+            allDeclaredGlobalTempTables.indexOf(tempTableInfo), tempTableInfo);
   }
 
 	/**
@@ -1101,10 +1253,7 @@ private String getNameString(String prefix, long number)
 	 */
 	public void internalCommit(boolean commitStore) throws StandardException
 	{
-		doCommit(commitStore,
-								  true,
-								  NON_XA,
-								  false);
+        doCommit(commitStore, true, NON_XA, false);
 	}
 
 	/**
@@ -1117,10 +1266,7 @@ public void internalCommit(boolean commitStore) throws StandardException
 	 */
 	public void userCommit() throws StandardException
 	{
-		doCommit(true,
-								  true,
-								  NON_XA,
-								  true);
+        doCommit(true, true, NON_XA, true);
 	}
 
 
@@ -1139,7 +1285,8 @@ Commit the language transaction by doing a commitNoSync()
 
 		@exception StandardException thrown on failure
 	 */
-	public final void internalCommitNoSync(int commitflag) throws StandardException
+    public final void internalCommitNoSync(int commitflag) 
+        throws StandardException
 	{
 		doCommit(true, false, commitflag, false);
 	}
@@ -1226,7 +1373,8 @@ protected void doCommit(boolean commitStore,
 				istream = Monitor.getStream();
 			}
 			String xactId = tran.getTransactionIdString();
-			istream.printlnWithHeader(LanguageConnectionContext.xidStr + 
+            istream.printlnWithHeader(
+                LanguageConnectionContext.xidStr + 
 									  xactId + 
 									  "), " +
 									  LanguageConnectionContext.lccStr +
@@ -1241,25 +1389,43 @@ protected void doCommit(boolean commitStore,
 
 		endTransactionActivationHandling(false);
 
-		//do the clean up work required for temporary tables at the commit time. This cleanup work
-		//can possibly remove entries from allDeclaredGlobalTempTables and that's why we need to check
-		//again later to see if we there are still any entries in allDeclaredGlobalTempTables
+        // do the clean up work required for temporary tables at the commit 
+        // time.  This cleanup work can possibly remove entries from 
+        // allDeclaredGlobalTempTables and that's why we need to check
+        // again later to see if we there are still any entries in 
+        // allDeclaredGlobalTempTables
 		if (allDeclaredGlobalTempTables != null)
 		{
 			tempTablesAndCommit();
-			//at commit time, for all the temp tables declared with ON COMMIT DELETE ROWS, make sure there are no held cursor open on them.
-			//If there are no held cursors open on ON COMMIT DELETE ROWS, drop those temp tables and redeclare them to get rid of all the data in them
-			if (allDeclaredGlobalTempTables != null) {
+
+            // at commit time, for all the temp tables declared with 
+            // ON COMMIT DELETE ROWS, make sure there are no held cursor open
+            // on them.
+            // If there are no held cursors open on ON COMMIT DELETE ROWS, 
+            // drop those temp tables and redeclare them to get rid of all the 
+            // data in them
+
+            if (allDeclaredGlobalTempTables != null) 
+            {
 				for (int i=0; i<allDeclaredGlobalTempTables.size(); i++)
 				{
-					TableDescriptor td = ((TempTableInfo)(allDeclaredGlobalTempTables.get(i))).getTableDescriptor();
-					if (td.isOnCommitDeleteRows() == false) //do nothing for temp table with ON COMMIT PRESERVE ROWS
+                    TableDescriptor td = 
+                        ((TempTableInfo)
+                         (allDeclaredGlobalTempTables.get(i))).getTableDescriptor();
+                    if (td.isOnCommitDeleteRows() == false) 
 					{
+                        //do nothing for temp table with ON COMMIT PRESERVE ROWS
 						continue;
 					}
-					if (checkIfAnyActivationHasHoldCursor(td.getName()) == false)//temp tables with ON COMMIT DELETE ROWS and no open held cursors
+
+                    if (checkIfAnyActivationHasHoldCursor(td.getName()) == 
+                            false)
 					{
-						getDataDictionary().getDependencyManager().invalidateFor(td, DependencyManager.DROP_TABLE, this);
+                        // temp tables with ON COMMIT DELETE ROWS and 
+                        // no open held cursors
+                        getDataDictionary().getDependencyManager().invalidateFor(
+                            td, DependencyManager.DROP_TABLE, this);
+
 						cleanupTempTableOnCommitOrRollback(td, true);
 					}
 				}
@@ -1267,7 +1433,9 @@ protected void doCommit(boolean commitStore,
 		}
 
 
-		currentSavepointLevel = 0; //reset the current savepoint level for the connection to 0 at the end of commit work for temp tables
+        //reset the current savepoint level for the connection to 0 at the end 
+        //of commit work for temp tables
+        currentSavepointLevel = 0; 
 
 		// Do *NOT* tell the DataDictionary to start using its cache again
 		// if this is an unsynchronized commit. The reason is that it
@@ -1308,7 +1476,8 @@ protected void doCommit(boolean commitStore,
 											 commitflag == XA_TWO_PHASE,
 											   "invalid commit flag");
 
-					((XATransactionController)tc).xa_commit(commitflag == XA_ONE_PHASE);
+                    ((XATransactionController)tc).xa_commit(
+                            commitflag == XA_ONE_PHASE);
 
 				}
 			}
@@ -1356,19 +1525,25 @@ private TableDescriptor cleanupTempTableOnCommitOrRollback(
 
 		//remove the old conglomerate descriptor from the table descriptor
 		ConglomerateDescriptor cgd = td.getConglomerateDescriptor(cid);
-		td.getConglomerateDescriptorList().dropConglomerateDescriptorByUUID(cgd.getUUID());
+        td.getConglomerateDescriptorList().dropConglomerateDescriptorByUUID(
+            cgd.getUUID());
+
 		//add the new conglomerate descriptor to the table descriptor
 		cgd = getDataDictionary().getDataDescriptorGenerator().newConglomerateDescriptor(conglomId, null, false, null, false, null, td.getUUID(),
 		td.getSchemaDescriptor().getUUID());
-		ConglomerateDescriptorList conglomList = td.getConglomerateDescriptorList();
+        ConglomerateDescriptorList conglomList = 
+            td.getConglomerateDescriptorList();
 		conglomList.add(cgd);
 
-		//reset the heap conglomerate number in table descriptor to -1 so it will be refetched next time with the new value
+        //reset the heap conglomerate number in table descriptor to -1 so it 
+        //will be refetched next time with the new value
 		td.resetHeapConglomNumber();
 
 		if(dropAndRedeclare)
 		{
-			tran.dropConglomerate(cid); //remove the old conglomerate from the system
+            //remove the old conglomerate from the system
+            tran.dropConglomerate(cid); 
+
 			replaceDeclaredGlobalTempTable(td.getName(), td);
 		}
 
