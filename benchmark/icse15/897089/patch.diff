diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/SelectionKeyHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/SelectionKeyHandler.java
index d65b53a2..678c100c 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/SelectionKeyHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/SelectionKeyHandler.java
@@ -65,17 +65,11 @@ public void write(SelectionKey key)
     
     protected static void turnOnInterestOps(SelectionKey key, int ops)
     {
-        synchronized(key)
-        {
-            key.interestOps(key.interestOps() | ops);
-        }
+        SelectorManager.getSelectorManager().turnOnInterestOps(key, ops);
     }
     
     protected static void turnOffInterestOps(SelectionKey key, int ops)
     {
-        synchronized(key)
-        {
-            key.interestOps(key.interestOps() & (~ops) );
-        }
+        SelectorManager.getSelectorManager().turnOffInterestOps(key, ops);
     }
 }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/SelectorManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/SelectorManager.java
index 16511ee4..026ffc9f 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/SelectorManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/SelectorManager.java
@@ -103,7 +103,7 @@ public void run()
         {
             try
             {
-                selector.select(1);
+                selector.select();
                 doProcess();
                 synchronized(gate) {}
             }
@@ -202,4 +202,22 @@ public static SelectorManager getUdpSelectorManager()
         }
         return udpManager;
     }
+
+    protected void turnOnInterestOps(SelectionKey key, int ops)
+    {
+        synchronized(gate)
+        {
+            selector.wakeup();
+            key.interestOps(key.interestOps() | ops);
+        }
+    }
+    
+    protected void turnOffInterestOps(SelectionKey key, int ops)
+    {
+        synchronized(gate)
+        {
+            selector.wakeup();
+            key.interestOps(key.interestOps() & (~ops) );
+        }
+    }
 }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ContentLengthState.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ContentLengthState.java
index 25a96510..ed2ca153 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ContentLengthState.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ContentLengthState.java
@@ -35,7 +35,7 @@
         buffer_ = ByteBuffer.allocate(4);
     }
 
-    public byte[] read() throws IOException, ReadNotCompleteException
+    public byte[] read() throws IOException
     {        
         return doRead(buffer_);
     }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ContentState.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ContentState.java
index e3ef4dd1..3fa8511d 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ContentState.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ContentState.java
@@ -34,7 +34,7 @@
         buffer_ = ByteBuffer.allocate(length_);
     }
 
-    public byte[] read() throws IOException, ReadNotCompleteException
+    public byte[] read() throws IOException
     {          
         return doRead(buffer_);
     }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ContentStreamState.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ContentStreamState.java
index eebb987d..dd59ad3c 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ContentStreamState.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ContentStreamState.java
@@ -59,7 +59,7 @@ private void createFileChannel() throws IOException
         }
     }
 
-    public byte[] read() throws IOException, ReadNotCompleteException
+    public byte[] read() throws IOException
     {        
         SocketChannel socketChannel = stream_.getStream();
         InetSocketAddress remoteAddress = (InetSocketAddress)socketChannel.socket().getRemoteSocketAddress();
@@ -70,7 +70,7 @@ private void createFileChannel() throws IOException
             {
                 bytesRead_ += fc_.transferFrom(socketChannel, bytesRead_, ContentStreamState.count_);
                 if ( bytesRead_ != streamContext_.getExpectedBytes() )
-                    throw new ReadNotCompleteException("Specified number of bytes have not been read from the Socket Channel");
+                    return null;
             }
             catch ( IOException ex )
             {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/DoneState.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/DoneState.java
index 2a38a085..380e85c0 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/DoneState.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/DoneState.java
@@ -31,7 +31,7 @@
         bytes_ = bytes;
     }
 
-    public byte[] read() throws IOException, ReadNotCompleteException
+    public byte[] read() throws IOException
     {        
         morphState();
         return bytes_;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ProtocolHeaderState.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ProtocolHeaderState.java
index e3e5efd0..fcd8f1d5 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ProtocolHeaderState.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ProtocolHeaderState.java
@@ -34,7 +34,7 @@ public ProtocolHeaderState(TcpReader stream)
         buffer_ = ByteBuffer.allocate(4);
     }
 
-    public byte[] read() throws IOException, ReadNotCompleteException
+    public byte[] read() throws IOException
     {        
         return doRead(buffer_);
     }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ProtocolState.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ProtocolState.java
index ce322496..c9eabb87 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ProtocolState.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ProtocolState.java
@@ -34,7 +34,7 @@ public ProtocolState(TcpReader stream)
         buffer_ = ByteBuffer.allocate(16);
     }
 
-    public byte[] read() throws IOException, ReadNotCompleteException
+    public byte[] read() throws IOException
     {        
         return doRead(buffer_);
     }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ReadNotCompleteException.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ReadNotCompleteException.java
index 865a6361..e69de29b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ReadNotCompleteException.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/ReadNotCompleteException.java
@@ -1,34 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.cassandra.net.io;
-
-/**
- * Created by IntelliJ IDEA.
- * User: lakshman
- * Date: Aug 22, 2005
- * Time: 11:37:31 AM
- * To change this template use File | Settings | File Templates.
- */
-public class ReadNotCompleteException extends Exception
-{
-    ReadNotCompleteException(String message)
-    {
-        super(message);
-    }
-}
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/StartState.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/StartState.java
index 2b4cbca9..96f06d33 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/StartState.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/StartState.java
@@ -31,11 +31,11 @@ public StartState(TcpReader stream)
         stream_ = stream;
     }
 
-    public abstract byte[] read() throws IOException, ReadNotCompleteException;
+    public abstract byte[] read() throws IOException;
     public abstract void morphState() throws IOException;
     public abstract void setContextData(Object data);
 
-    protected byte[] doRead(ByteBuffer buffer) throws IOException, ReadNotCompleteException
+    protected byte[] doRead(ByteBuffer buffer) throws IOException
     {        
         SocketChannel socketChannel = stream_.getStream();
         int bytesRead = socketChannel.read(buffer);     
@@ -49,7 +49,7 @@ public StartState(TcpReader stream)
         }
         else
         {            
-            throw new ReadNotCompleteException("Specified number of bytes have not been read from the Socket Channel");
+            return null;
         }
         return new byte[0];
     }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/TcpReader.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/TcpReader.java
index eebb6e9f..2eb35dc8 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/TcpReader.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/net/io/TcpReader.java
@@ -24,6 +24,7 @@
 
 import org.apache.cassandra.net.ProtocolHeader;
 import org.apache.cassandra.net.TcpConnection;
+import org.apache.commons.lang.ArrayUtils;
 
 public class TcpReader
 {
@@ -88,15 +89,13 @@ public SocketChannel getStream()
     
     public byte[] read() throws IOException
     {
-        byte[] bytes = new byte[0];      
+        byte[] bytes = ArrayUtils.EMPTY_BYTE_ARRAY;      
         while ( socketState_ != null )
         {
-            try
-            {                                                                      
                 bytes = socketState_.read();
-            }
-            catch ( ReadNotCompleteException e )
+            if (bytes == null)
             {                
+                bytes = ArrayUtils.EMPTY_BYTE_ARRAY;
                 break;
             }
         }
