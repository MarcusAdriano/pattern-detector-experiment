diff --git a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java
index 4a9d4718..3ef54d47 100644
--- a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java
+++ b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/startup/Activator.java
@@ -20,8 +20,6 @@
 
 import java.lang.reflect.Field;
 import java.util.Arrays;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 
 import javax.naming.NamingException;
 import javax.naming.spi.InitialContextFactory;
@@ -46,6 +44,8 @@
 import org.osgi.service.jndi.JNDIProviderAdmin;
 import org.osgi.util.tracker.ServiceTracker;
 import org.osgi.util.tracker.ServiceTrackerCustomizer;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * The activator for this bundle makes sure the static classes in it are
@@ -53,7 +53,7 @@
  */
 public class Activator implements BundleActivator {
 
-    private static final Logger LOGGER = Logger.getLogger(Activator.class.getName());
+    private static final Logger LOGGER = LoggerFactory.getLogger(Activator.class.getName());
 
     private OSGiInitialContextFactoryBuilder icfBuilder;
     private OSGiObjectFactoryBuilder ofBuilder;
@@ -76,9 +76,9 @@ public void start(BundleContext context) {
             NamingManager.setInitialContextFactoryBuilder(builder);
             icfBuilder = builder;
         } catch (NamingException e) {
-            LOGGER.log(Level.INFO, "Cannot set the InitialContextFactoryBuilder.", e);
+            LOGGER.info("Cannot set the InitialContextFactoryBuilder.", e);
         } catch (IllegalStateException e) {
-            LOGGER.log(Level.INFO, "Cannot set the InitialContextFactoryBuilder. Another builder " + getClassName(InitialContextFactoryBuilder.class) + " is already installed", e);
+            LOGGER.info("Cannot set the InitialContextFactoryBuilder. Another builder " + getClassName(InitialContextFactoryBuilder.class) + " is already installed", e);
         }
     
         try {
@@ -86,9 +86,9 @@ public void start(BundleContext context) {
             NamingManager.setObjectFactoryBuilder(builder);
             ofBuilder = builder;
         } catch (NamingException e) {
-            LOGGER.log(Level.INFO, "Cannot set the ObjectFactoryBuilder.", e);
+            LOGGER.info("Cannot set the ObjectFactoryBuilder.", e);
         } catch (IllegalStateException e) {
-            LOGGER.log(Level.INFO, "Cannot set the ObjectFactoryBuilder. Another builder " + getClassName(InitialContextFactoryBuilder.class) + " is already installed", e);
+            LOGGER.info("Cannot set the ObjectFactoryBuilder. Another builder " + getClassName(InitialContextFactoryBuilder.class) + " is already installed", e);
         }
         
         context.registerService(JNDIProviderAdmin.class.getName(), 
@@ -161,7 +161,7 @@ private static void unsetField(Class<?> expectedType) {
             }
         } catch (Throwable t) {
             // Ignore
-            LOGGER.log(Level.FINE, "Error setting field.", t);
+            LOGGER.debug("Error setting field.", t);
         }
     }
 
diff --git a/aries/trunk/jndi/jndi-rmi/src/main/java/org/apache/aries/jndi/rmi/Activator.java b/aries/trunk/jndi/jndi-rmi/src/main/java/org/apache/aries/jndi/rmi/Activator.java
index ada7a18b..2f50b829 100644
--- a/aries/trunk/jndi/jndi-rmi/src/main/java/org/apache/aries/jndi/rmi/Activator.java
+++ b/aries/trunk/jndi/jndi-rmi/src/main/java/org/apache/aries/jndi/rmi/Activator.java
@@ -19,8 +19,6 @@
 package org.apache.aries.jndi.rmi;
 
 import java.util.Hashtable;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 
 import javax.naming.spi.ObjectFactory;
 
@@ -29,16 +27,18 @@
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.ServiceRegistration;
 import org.osgi.service.jndi.JNDIConstants;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class Activator implements BundleActivator {
 
     private ServiceRegistration reg;
 
-    private static final Logger LOGGER = Logger.getLogger(Activator.class.getName());
+    private static final Logger LOGGER = LoggerFactory.getLogger(Activator.class.getName());
 
     public void start(BundleContext context) {
 
-        LOGGER.fine("Registering RMI url handler");
+        LOGGER.debug("Registering RMI url handler");
 
         try {
             Hashtable<Object, Object> props = new Hashtable<Object, Object>();
@@ -50,7 +50,7 @@ public void start(BundleContext context) {
         }
         catch (Exception e)
         {
-            LOGGER.log(Level.INFO, "Could not create the jndi rmi url factory.", e);
+            LOGGER.info("Could not create the jndi rmi url factory.", e);
         }
     }
 
