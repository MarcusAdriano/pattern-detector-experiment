diff --git a/lucene/dev/trunk/lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader.java b/lucene/dev/trunk/lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader.java
index dbccd699..38be6355 100644
--- a/lucene/dev/trunk/lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader.java
+++ b/lucene/dev/trunk/lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader.java
@@ -86,7 +86,7 @@ public void testUpdateDocument() throws Exception {
 
     // get a reader
     IndexReader r1 = writer.getReader();
-    //assertTrue(r1.isCurrent());
+    assertTrue(r1.isCurrent());
 
     String id10 = r1.document(10).getField("id").stringValue();
     
@@ -94,7 +94,7 @@ public void testUpdateDocument() throws Exception {
     newDoc.removeField("id");
     newDoc.add(new Field("id", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));
     writer.updateDocument(new Term("id", id10), newDoc);
-    //assertFalse(r1.isCurrent());
+    assertFalse(r1.isCurrent());
 
     IndexReader r2 = writer.getReader();
     assertTrue(r2.isCurrent());
@@ -157,7 +157,7 @@ public void testAddIndexes() throws Exception {
     IndexReader r0 = writer.getReader();
     assertTrue(r0.isCurrent());
     writer.addIndexesNoOptimize(new Directory[] { dir2 });
-    //assertFalse(r0.isCurrent());
+    assertFalse(r0.isCurrent());
     r0.close();
 
     IndexReader r1 = writer.getReader();
diff --git a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/DirectoryReader.java b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/DirectoryReader.java
index 62c6e309..204bc1f6 100644
--- a/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/DirectoryReader.java
+++ b/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/DirectoryReader.java
@@ -56,6 +56,7 @@
   private IndexDeletionPolicy deletionPolicy;
   private Lock writeLock;
   private SegmentInfos segmentInfos;
+  private SegmentInfos segmentInfosStart;
   private boolean stale;
   private final int termInfosIndexDivisor;
 
@@ -148,6 +149,7 @@ protected Object doBody(String segmentFileName) throws CorruptIndexException, IO
     this.directory = writer.getDirectory();
     this.readOnly = true;
     segmentInfos = infos;
+    segmentInfosStart = (SegmentInfos) infos.clone();
     this.termInfosIndexDivisor = termInfosIndexDivisor;
     if (codecs == null) {
       this.codecs = CodecProvider.getDefault();
@@ -930,7 +932,12 @@ public long getUniqueTermCount() throws IOException {
   @Override
   public boolean isCurrent() throws CorruptIndexException, IOException {
     ensureOpen();
+    if (writer == null || writer.isClosed()) {
+      // we loaded SegmentInfos from the directory
     return SegmentInfos.readCurrentVersion(directory, codecs) == segmentInfos.getVersion();
+    } else {
+      return writer.nrtIsCurrent(segmentInfosStart);
+    }
   }
 
   @Override
diff --git a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.java b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.java
index 5ec3fe32..511fdbe5 100644
--- a/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.java
+++ b/lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.java
@@ -84,6 +84,7 @@ public void testUpdateDocument() throws Exception {
 
     // get a reader
     IndexReader r1 = writer.getReader();
+    assertTrue(r1.isCurrent());
 
     String id10 = r1.document(10).getField("id").stringValue();
     
@@ -91,15 +92,20 @@ public void testUpdateDocument() throws Exception {
     newDoc.removeField("id");
     newDoc.add(new Field("id", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));
     writer.updateDocument(new Term("id", id10), newDoc);
+    assertFalse(r1.isCurrent());
 
     IndexReader r2 = writer.getReader();
+    assertTrue(r2.isCurrent());
     assertEquals(0, count(new Term("id", id10), r2));
     assertEquals(1, count(new Term("id", Integer.toString(8000)), r2));
     
     r1.close();
     writer.close();
+    assertTrue(r2.isCurrent());
     
     IndexReader r3 = IndexReader.open(dir1, true);
+    assertTrue(r3.isCurrent());
+    assertTrue(r2.isCurrent());
     assertEquals(0, count(new Term("id", id10), r3));
     assertEquals(1, count(new Term("id", Integer.toString(8000)), r3));
 
@@ -143,9 +149,18 @@ public void testAddIndexes() throws Exception {
     createIndexNoClose(!optimize, "index2", writer2);
     writer2.close();
 
+    IndexReader r0 = writer.getReader();
+    assertTrue(r0.isCurrent());
     writer.addIndexesNoOptimize(new Directory[] { dir2 });
+    assertFalse(r0.isCurrent());
+    r0.close();
 
     IndexReader r1 = writer.getReader();
+    assertTrue(r1.isCurrent());
+
+    writer.commit();
+    assertTrue(r1.isCurrent());
+
     assertEquals(200, r1.maxDoc());
 
     int index2df = r1.docFreq(new Term("indexname", "index2"));
