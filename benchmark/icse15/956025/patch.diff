diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java
index 2ec0a769..1e7f3751 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java
@@ -415,9 +415,18 @@ else if (!(castOperand instanceof UntypedNullConstantNode))
 			}
 		}	
 		
+        //
 		// Preserve the nullability of the operand since a CAST
-		// of a non-NULL value is also non-NULL.
-		setNullability(castOperand.getTypeServices().isNullable());
+		// of a non-NULL value is also non-NULL. However, if the source type is
+        // a non-nullable string type and the target type is a boolean, then the result
+        // still must be nullable because the string "unknown" casts to boolean NULL.
+        //
+        if (
+            castOperand.getTypeServices().getTypeId().isStringTypeId() &&
+            getTypeId().isBooleanTypeId()
+            )
+        { setNullability( true ); }
+		else { setNullability(castOperand.getTypeServices().isNullable()); }
 	}
 
 	/**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java
index 51164771..cb54ab87 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java
@@ -323,6 +323,24 @@ protected void    setUp()
                  );
         }
 
+        if ( !tableExists( conn, "T_4704" ) )
+        {
+            //
+            // create table
+            //
+            goodStatement( conn, "create table t_4704( keyCol int, stringCol varchar( 20 ) not null )" );
+
+            //
+            // populate it
+            //
+            goodStatement
+                (
+                 conn,
+                 "insert into t_4704( keyCol, stringCol )\n" +
+                 "values ( 0, 'false' ), ( 1, 'true' ), ( 2, 'unknown' )\n"
+                 );
+        }
+
         if ( !tableExists( conn, "STRING_TYPES" ) )
         {
             //
@@ -764,6 +782,8 @@ public void test_09_explicitCasts() throws Exception
         vetBadStringCast( conn, "clob_col" );
         vetBadStringCast( conn, "long_varchar_col" );
         vetBadStringCast( conn, "varchar_col" );
+
+        vet4704();
     }
     private void vetBadStringCast( Connection conn, String columnName ) throws Exception
     {
@@ -793,22 +813,27 @@ private void vetBadExplicitCastFromBoolean( Connection conn, String dataType ) t
      * columns to BOOLEAN, the result column was marked as non-nullable, even
      * though the VARCHAR could contain the value 'UNKNOWN', in which case
      * the cast should return NULL.
-     *
-     * The test case is disabled for now. Enable it when the bug is fixed.
      */
-    public void disabled_testNullabilityOfCastFromNonNullableVARCHAR()
-            throws SQLException {
-        setAutoCommit(false); // for automatic rollback when test has completed
+    public void vet4704()
+            throws SQLException
+    {
         Statement s = createStatement();
-        s.execute("create table nonnullablestrings(x varchar(10) not null)");
-        s.execute("insert into nonnullablestrings " +
-                  "values 'true', 'false', 'unknown'");
 
-        ResultSet rs = s.executeQuery(
-                "select cast(x as boolean) from nonnullablestrings");
-        JDBC.assertNullability(rs, new boolean[] { true });
-        JDBC.assertFullResultSet(
-                rs, new String[][] { {"true"}, {"false"}, {null} });
+        ResultSet rs = s.executeQuery( "select keyCol, stringCol from t_4704 order by keyCol" );
+        JDBC.assertNullability(rs, new boolean[] { true, false });
+
+        rs = s.executeQuery( "select keyCol, cast(stringCol as boolean) from t_4704 order by keyCol" );
+        JDBC.assertNullability(rs, new boolean[] { true, true });
+        JDBC.assertFullResultSet
+            (
+             rs,
+             new String[][]
+             {
+                 { "0", "false" },
+                 { "1", "true" },
+                 { "2", null },
+             }
+             );
     }
 
     public void test_10_nullabilityOfCastFromLiteral() throws SQLException {
