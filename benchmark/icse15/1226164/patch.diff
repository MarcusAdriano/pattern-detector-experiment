diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java
index 4494d0f1..fd225b14 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/SolrCmdDistributor.java
@@ -39,6 +39,7 @@
 import org.apache.solr.client.solrj.request.AbstractUpdateRequest;
 import org.apache.solr.client.solrj.request.UpdateRequestExt;
 import org.apache.solr.common.SolrException;
+import org.apache.solr.common.cloud.ZkCoreNodeProps;
 import org.apache.solr.common.params.ModifiableSolrParams;
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.core.SolrCore;
@@ -80,7 +81,7 @@
     ModifiableSolrParams params;
   }
   
-  public void finish(List<Url> urls) {
+  public void finish(List<Node> urls) {
 
     // piggyback on any outstanding adds or deletes if possible.
     flushAdds(1, null, null, urls);
@@ -89,7 +90,7 @@ public void finish(List<Url> urls) {
     checkResponses(true);
   }
   
-  public void distribDelete(DeleteUpdateCommand cmd, List<Url> urls, ModifiableSolrParams params) throws IOException {
+  public void distribDelete(DeleteUpdateCommand cmd, List<Node> urls, ModifiableSolrParams params) throws IOException {
     checkResponses(false);
     
     if (cmd.isDeleteById()) {
@@ -100,7 +101,7 @@ public void distribDelete(DeleteUpdateCommand cmd, List<Url> urls, ModifiableSol
     }
   }
   
-  public void distribAdd(AddUpdateCommand cmd, List<Url> urls, ModifiableSolrParams params) throws IOException {
+  public void distribAdd(AddUpdateCommand cmd, List<Node> urls, ModifiableSolrParams params) throws IOException {
     
     checkResponses(false);
     
@@ -121,7 +122,7 @@ public void distribAdd(AddUpdateCommand cmd, List<Url> urls, ModifiableSolrParam
     // nocommit: review as far as SOLR-2685
     // clone.indexedId = cmd.indexedId;
     // clone.doc = cmd.doc;
-    for (Url url : urls) {
+    for (Node url : urls) {
       List<AddRequest> alist = adds.get(url.getUrl());
       if (alist == null) {
         alist = new ArrayList<AddRequest>(2);
@@ -134,7 +135,7 @@ public void distribAdd(AddUpdateCommand cmd, List<Url> urls, ModifiableSolrParam
     flushAdds(maxBufferedAddsPerServer, null, null, urls);
   }
   
-  public void distribCommit(CommitUpdateCommand cmd, List<Url> urls, ModifiableSolrParams params)
+  public void distribCommit(CommitUpdateCommand cmd, List<Node> urls, ModifiableSolrParams params)
       throws IOException {
     
     // Wait for all outstanding repsonses to make sure that a commit
@@ -157,7 +158,7 @@ public void distribCommit(CommitUpdateCommand cmd, List<Url> urls, ModifiableSol
       
       addCommit(ureq, cmd);
       
-      for (Url url : urls) {
+      for (Node url : urls) {
         submit(ureq, url);
       }
     }
@@ -170,7 +171,7 @@ public void distribCommit(CommitUpdateCommand cmd, List<Url> urls, ModifiableSol
     }
   }
   
-  private void doDelete(DeleteUpdateCommand cmd, List<Url> urls,
+  private void doDelete(DeleteUpdateCommand cmd, List<Node> urls,
       ModifiableSolrParams params) throws IOException {
     
     flushAdds(1, null, null, urls);
@@ -179,7 +180,7 @@ private void doDelete(DeleteUpdateCommand cmd, List<Url> urls,
     DeleteRequest deleteRequest = new DeleteRequest();
     deleteRequest.cmd = clonedCmd;
     deleteRequest.params = params;
-    for (Url url : urls) {
+    for (Node url : urls) {
       List<DeleteRequest> dlist = deletes.get(url.getUrl());
       
       if (dlist == null) {
@@ -198,10 +199,10 @@ void addCommit(UpdateRequestExt ureq, CommitUpdateCommand cmd) {
         : AbstractUpdateRequest.ACTION.COMMIT, false, cmd.waitSearcher);
   }
   
-  boolean flushAdds(int limit, CommitUpdateCommand ccmd, ModifiableSolrParams params, List<Url> urls) {
+  boolean flushAdds(int limit, CommitUpdateCommand ccmd, ModifiableSolrParams params, List<Node> urls) {
     // check for pending deletes
     UpdateRequestExt ureq = null;
-    for (Url url : urls) {
+    for (Node url : urls) {
       List<AddRequest> alist = adds.get(url.getUrl());
       if (alist == null || alist.size() < limit) return false;
       if (ureq == null) {
@@ -229,11 +230,11 @@ boolean flushAdds(int limit, CommitUpdateCommand ccmd, ModifiableSolrParams para
     return true;
   }
   
-  boolean flushDeletes(int limit, CommitUpdateCommand ccmd, ModifiableSolrParams params, List<Url> urls) {
+  boolean flushDeletes(int limit, CommitUpdateCommand ccmd, ModifiableSolrParams params, List<Node> urls) {
     // check for pending deletes
     //System.out.println("flush deletes to " + urls);
     UpdateRequestExt ureq = null;
-    for (Url url : urls) {
+    for (Node url : urls) {
       List<DeleteRequest> dlist = deletes.get(url.getUrl());
       if (dlist == null || dlist.size() < limit) return false;
       if (ureq == null) {
@@ -273,19 +274,17 @@ private DeleteUpdateCommand clone(DeleteUpdateCommand cmd) {
   }
   
   public static class Request {
-    public Url url;
+    public Node node;
     UpdateRequestExt ureq;
     NamedList<Object> ursp;
     int rspCode;
     public Exception exception;
-    String errorUrl;
     int retries;
   }
   
-  void submit(UpdateRequestExt ureq, Url url) {
+  void submit(UpdateRequestExt ureq, Node node) {
     Request sreq = new Request();
-    sreq.errorUrl = url.getUrl();
-    sreq.url = url;
+    sreq.node = node;
     sreq.ureq = ureq;
     submit(sreq);
   }
@@ -295,18 +294,15 @@ public void submit(final Request sreq) {
       completionService = new ExecutorCompletionService<Request>(commExecutor);
       pending = new HashSet<Future<Request>>();
     }
-    final String url = sreq.url.getUrl();
+    final String url = sreq.node.getUrl();
 
     Callable<Request> task = new Callable<Request>() {
       @Override
       public Request call() throws Exception {
         Request clonedRequest = new Request();
-        clonedRequest.url = sreq.url;
+        clonedRequest.node = sreq.node;
         clonedRequest.ureq = sreq.ureq;
         
-        // TODO: yeah, this is a little odd...
-        clonedRequest.errorUrl = url;
-        
         try {
           String fullUrl;
           if (!url.startsWith("http://") && !url.startsWith("https://")) {
@@ -353,7 +349,7 @@ void checkResponses(boolean block) {
             
             // if there is a retry url, we want to retry...
             // TODO: but we really should only retry on connection errors...
-            if (sreq.retries < 5 && sreq.url.checkRetry()) {
+            if (sreq.retries < 5 && sreq.node.checkRetry()) {
               sreq.retries++;
               sreq.rspCode = 0;
               sreq.exception = null;
@@ -361,15 +357,14 @@ void checkResponses(boolean block) {
               submit(sreq);
               checkResponses(block);
             } else {
-              System.out.println("legit error:" + sreq.retries);
               Exception e = sreq.exception;
               Error error = new Error();
               error.e = e;
-              error.url = sreq.errorUrl;
+              error.node = sreq.node;
               response.errors.add(error);
               response.sreq = sreq;
               SolrException.logOnce(SolrCore.log, "shard update error "
-                  + sreq.url + " (" + sreq.url + ")", sreq.exception);
+                  + sreq.node + " (" + sreq.node + ")", sreq.exception);
             }
           }
           
@@ -392,7 +387,7 @@ void checkResponses(boolean block) {
   }
   
   public static class Error {
-    public String url;
+    public Node node;
     public Exception e;
   }
 
@@ -400,16 +395,22 @@ public Response getResponse() {
     return response;
   }
   
-  public static abstract class Url {
+  public static abstract class Node {
     public abstract String getUrl();
     public abstract boolean checkRetry();
+    public abstract String getCoreName();
+    public abstract String getBaseUrl();
   }
 
-  public static class StdUrl extends Url {
-    String url;
-    
-    public StdUrl(String url) {
-      this.url = url;
+  public static class StdNode extends Node {
+    protected String url;
+    protected String baseUrl;
+    protected String coreName;
+
+    public StdNode(ZkCoreNodeProps nodeProps) {
+      this.url = nodeProps.getCoreUrl();
+      this.baseUrl = nodeProps.getBaseUrl();
+      this.coreName = nodeProps.getCoreName();
     }
     
     @Override
@@ -426,5 +427,15 @@ public String toString() {
     public boolean checkRetry() {
       return false;
     }
+
+    @Override
+    public String getBaseUrl() {
+      return baseUrl;
+    }
+
+    @Override
+    public String getCoreName() {
+      return coreName;
+    }
   }
 }
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java
index 67ebf1c6..22b33a61 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java
@@ -54,8 +54,8 @@
 import org.apache.solr.update.DeleteUpdateCommand;
 import org.apache.solr.update.SolrCmdDistributor;
 import org.apache.solr.update.SolrCmdDistributor.Response;
-import org.apache.solr.update.SolrCmdDistributor.Url;
-import org.apache.solr.update.SolrCmdDistributor.StdUrl;
+import org.apache.solr.update.SolrCmdDistributor.Node;
+import org.apache.solr.update.SolrCmdDistributor.StdNode;
 import org.apache.solr.update.UpdateCommand;
 import org.apache.solr.update.UpdateHandler;
 import org.apache.solr.update.UpdateLog;
@@ -97,7 +97,7 @@
   // method in this update processor
   private boolean isLeader = true;
   private boolean forwardToLeader = false;
-  private List<Url> urls;
+  private List<Node> urls;
   private String shardId;
 
   
@@ -137,9 +137,9 @@ public DistributedUpdateProcessor(SolrQueryRequest req,
     cmdDistrib = new SolrCmdDistributor();
   }
 
-  private List<Url> setupRequest(int hash) {
+  private List<Node> setupRequest(int hash) {
     
-    List<Url> urls = null;
+    List<Node> urls = null;
 
     // if we are in zk mode...
     if (zkEnabled) {
@@ -156,11 +156,6 @@ public DistributedUpdateProcessor(SolrQueryRequest req,
         ZkCoreNodeProps leaderProps = new ZkCoreNodeProps(zkController.getZkStateReader().getLeaderProps(
             collection, shardId));
         
-        String leaderUrl = leaderProps.getCoreUrl();
-        if (leaderUrl == null) {
-          throw new SolrException(ErrorCode.SERVER_ERROR, "Cound could not leader url in:" + leaderUrl);
-        }
-        
         String leaderNodeName = leaderProps.getNodeName();
         
         String nodeName = zkController.getNodeName();
@@ -172,11 +167,11 @@ public DistributedUpdateProcessor(SolrQueryRequest req,
         } else if (isLeader) {
           // that means I want to forward onto my replicas...
           // so get the replicas...
-          urls = getReplicaUrls(req, collection, shardId, nodeName);
+          urls = getReplicaNodes(req, collection, shardId, nodeName);
         } else {
           // I need to forward onto the leader...
-          urls = new ArrayList<Url>(1);
-          urls.add(new RetryUrl(leaderUrl, zkController.getZkStateReader(), collection, shardId));
+          urls = new ArrayList<Node>(1);
+          urls.add(new RetryNode(leaderProps, zkController.getZkStateReader(), collection, shardId));
           forwardToLeader = true;
         }
         
@@ -278,21 +273,19 @@ private void doFinish() {
       for (SolrCmdDistributor.Error error : response.errors) {
         
         // nocommit:
-        System.out.println("try and tell " + error.url + " to recover");
+        System.out.println("try and tell " + error.node.getUrl() + " to recover");
         // TODO: we should force their state to recovering ??
         
         // TODO: do retries??
         // TODO: what if its is already recovering? Right now they line up - should they?
         CommonsHttpSolrServer server;
         try {
-          server = new CommonsHttpSolrServer(error.url);
+          server = new CommonsHttpSolrServer(error.node.getBaseUrl());
           
           System.out.println("send recover cmd");
           RequestRecovery recoverRequestCmd = new RequestRecovery();
           recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);
-          // nocommit: the replica core name may not matcher the leader core
-          // name!
-          recoverRequestCmd.setCoreName(req.getCore().getName());
+          recoverRequestCmd.setCoreName(error.node.getCoreName());
           
           server.request(recoverRequestCmd);
           System.out.println("send recover request worked");
@@ -649,8 +642,8 @@ public void finish() throws IOException {
     }
     if (next != null && urls == null) next.finish();
   }
-  // nocommit: TODO: make map of url to props as well - order to recover code needs core name
-  private List<Url> getReplicaUrls(SolrQueryRequest req, String collection,
+ 
+  private List<Node> getReplicaNodes(SolrQueryRequest req, String collection,
       String shardId, String thisNodeName) {
     CloudState cloudState = req.getCore().getCoreDescriptor()
         .getCoreContainer().getZkController().getCloudState();
@@ -666,26 +659,25 @@ public void finish() throws IOException {
     }
     
     Map<String,ZkNodeProps> shardMap = replicas.getShards();
-    List<Url> urls = new ArrayList<Url>(shardMap.size());
+    List<Node> nodes = new ArrayList<Node>(shardMap.size());
 
     for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {
       ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());
       String nodeName = nodeProps.getNodeName();
       if (cloudState.liveNodesContain(nodeName) && !nodeName.equals(thisNodeName)) {
-        String replicaUrl = nodeProps.getCoreUrl();
-        urls.add(new StdUrl(replicaUrl));
+        nodes.add(new StdNode(nodeProps));
       }
     }
-    if (urls.size() == 0) {
+    if (nodes.size() == 0) {
       return null;
     }
-    return urls;
+    return nodes;
   }
   
-  private List<Url> getReplicaUrls(SolrQueryRequest req, String collection, String shardZkNodeName) {
+  private List<Node> getReplicaUrls(SolrQueryRequest req, String collection, String shardZkNodeName) {
     CloudState cloudState = req.getCore().getCoreDescriptor()
         .getCoreContainer().getZkController().getCloudState();
-    List<Url> urls = new ArrayList<Url>();
+    List<Node> urls = new ArrayList<Node>();
     Map<String,Slice> slices = cloudState.getSlices(collection);
     if (slices == null) {
       throw new ZooKeeperException(ErrorCode.BAD_REQUEST,
@@ -699,8 +691,7 @@ public void finish() throws IOException {
       for (Entry<String,ZkNodeProps> entry : shardMap.entrySet()) {
         ZkCoreNodeProps nodeProps = new ZkCoreNodeProps(entry.getValue());
         if (cloudState.liveNodesContain(nodeProps.getNodeName()) && !entry.getKey().equals(shardZkNodeName)) {
-          String replicaUrl = nodeProps.getCoreUrl();
-          urls.add(new StdUrl(replicaUrl));
+          urls.add(new StdNode(nodeProps));
         }
       }
     }
@@ -723,24 +714,19 @@ private int hash(DeleteUpdateCommand cmd) {
     return Hash.murmurhash3_x86_32(br.bytes, br.offset, br.length, 0);
   }
   
-  public static class RetryUrl extends Url {
-    String url;
+  public static class RetryNode extends StdNode {
+    
     private ZkStateReader zkStateReader;
     private String collection;
     private String shardId;
     
-    public RetryUrl(String url, ZkStateReader zkStateReader, String collection, String shardId) {
-      this.url = url;
+    public RetryNode(ZkCoreNodeProps nodeProps, ZkStateReader zkStateReader, String collection, String shardId) {
+      super(nodeProps);
       this.zkStateReader = zkStateReader;
       this.collection = collection;
       this.shardId = shardId;
     }
     
-    @Override
-    public String getUrl() {
-      return url;
-    }
-    
     @Override
     public String toString() {
       return url;
diff --git a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest.java b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest.java
index 6ff6d216..f9b15a94 100644
--- a/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest.java
+++ b/lucene/dev/branches/solrcloud/solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest.java
@@ -27,10 +27,13 @@
 import org.apache.solr.client.solrj.impl.CommonsHttpSolrServer;
 import org.apache.solr.common.SolrDocumentList;
 import org.apache.solr.common.SolrInputDocument;
+import org.apache.solr.common.cloud.ZkCoreNodeProps;
+import org.apache.solr.common.cloud.ZkNodeProps;
+import org.apache.solr.common.cloud.ZkStateReader;
 import org.apache.solr.common.params.ModifiableSolrParams;
 import org.apache.solr.update.SolrCmdDistributor.Response;
-import org.apache.solr.update.SolrCmdDistributor.Url;
-import org.apache.solr.update.SolrCmdDistributor.StdUrl;
+import org.apache.solr.update.SolrCmdDistributor.Node;
+import org.apache.solr.update.SolrCmdDistributor.StdNode;
 
 public class SolrCmdDistributorTest extends BaseDistributedSearchTestCase {
   
@@ -82,19 +85,22 @@ public void doTest() throws Exception {
     SolrCmdDistributor cmdDistrib = new SolrCmdDistributor();
     
     ModifiableSolrParams params = new ModifiableSolrParams();
-    List<Url> urls = new ArrayList<Url>();
+    List<Node> nodes = new ArrayList<Node>();
 
-    urls.add(new StdUrl(((CommonsHttpSolrServer) controlClient).getBaseURL()));
+    ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,
+        ((CommonsHttpSolrServer) controlClient).getBaseURL(),
+        ZkStateReader.CORE_PROP, "");
+    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));
     
     // add one doc to controlClient
     
     AddUpdateCommand cmd = new AddUpdateCommand(null);
     cmd.solrDoc = getSolrDoc("id", 1);
-    cmdDistrib.distribAdd(cmd, urls, params);
+    cmdDistrib.distribAdd(cmd, nodes, params);
     
     CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);
-    cmdDistrib.distribCommit(ccmd, urls, params);
-    cmdDistrib.finish(urls);
+    cmdDistrib.distribCommit(ccmd, nodes, params);
+    cmdDistrib.finish(nodes);
     Response response = cmdDistrib.getResponse();
     
     assertEquals(response.errors.toString(), 0, response.errors.size());
@@ -104,25 +110,27 @@ public void doTest() throws Exception {
     assertEquals(1, numFound);
     
     CommonsHttpSolrServer client2 = (CommonsHttpSolrServer) clients.get(0);
-    urls.add(new StdUrl(client2.getBaseURL()));
+    nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,
+        client2.getBaseURL(), ZkStateReader.CORE_PROP, "");
+    nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));
     
     // add another 3 docs to both control and client1
     
     cmd.solrDoc = getSolrDoc("id", 2);
-    cmdDistrib.distribAdd(cmd, urls, params);
+    cmdDistrib.distribAdd(cmd, nodes, params);
     
     AddUpdateCommand cmd2 = new AddUpdateCommand(null);
     cmd2.solrDoc = getSolrDoc("id", 3);
 
-    cmdDistrib.distribAdd(cmd2, urls, params);
+    cmdDistrib.distribAdd(cmd2, nodes, params);
     
     AddUpdateCommand cmd3 = new AddUpdateCommand(null);
     cmd3.solrDoc = getSolrDoc("id", 4);
     
-    cmdDistrib.distribAdd(cmd3, Collections.singletonList(urls.get(0)), params);
+    cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(0)), params);
     
-    cmdDistrib.distribCommit(ccmd, urls, params);
-    cmdDistrib.finish(urls);
+    cmdDistrib.distribCommit(ccmd, nodes, params);
+    cmdDistrib.finish(nodes);
     response = cmdDistrib.getResponse();
     
     assertEquals(response.errors.toString(), 0, response.errors.size());
@@ -140,10 +148,10 @@ public void doTest() throws Exception {
     DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);
     dcmd.id = "2";
     
-    cmdDistrib.distribDelete(dcmd, urls, params);
+    cmdDistrib.distribDelete(dcmd, nodes, params);
     
-    cmdDistrib.distribCommit(ccmd, urls, params);
-    cmdDistrib.finish(urls);
+    cmdDistrib.distribCommit(ccmd, nodes, params);
+    cmdDistrib.finish(nodes);
     response = cmdDistrib.getResponse();
     
     assertEquals(response.errors.toString(), 0, response.errors.size());
