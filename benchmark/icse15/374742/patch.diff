diff --git a/db/derby/code/branches/10.1/java/drda/org/apache/derby/impl/drda/XADatabase.java b/db/derby/code/branches/10.1/java/drda/org/apache/derby/impl/drda/XADatabase.java
index efdfd3af..8793dde9 100644
--- a/db/derby/code/branches/10.1/java/drda/org/apache/derby/impl/drda/XADatabase.java
+++ b/db/derby/code/branches/10.1/java/drda/org/apache/derby/impl/drda/XADatabase.java
@@ -89,6 +89,9 @@ protected synchronized Connection makeConnection(Properties p) throws
 		
 		// Get a new logical connection.
 		conn = xaConnection.getConnection();
+		// Client will always drive the commits so connection should
+		// always be autocommit false on the server. DERBY-898/DERBY-899
+		conn.setAutoCommit(false);
 		setConnection(conn);
 		return conn;
 		
diff --git a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/savepointJdbc30.java b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/savepointJdbc30.java
index 72e4cd5b..96c0b37e 100644
--- a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/savepointJdbc30.java
+++ b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/savepointJdbc30.java
@@ -27,6 +27,9 @@
 import java.sql.Statement;
 import java.sql.SQLException;
 import java.sql.Types;
+import java.util.Properties;
+
+import javax.sql.XADataSource;
 
 import org.apache.derby.tools.ij;
 import org.apache.derby.tools.JDBCDisplayUtil;
@@ -45,21 +48,50 @@
 	static private boolean isDerbyNet = false;
 
 	public static void main(String[] args) {
+	    // Check savepoints for both regular connections and XA
+	    
 		Connection con = null, con2 = null;
-		Statement  s;
-		System.out.println("Test savepointJdbc30 starting");
+	    isDerbyNet = TestUtil.isNetFramework();
 
-		try
-		{
+	    try {
 			// use the ij utility to read the property file and
 			// make the initial connection.
 			ij.getPropertyArg(args);
 			con = ij.startJBMS();
-			isDerbyNet = TestUtil.isNetFramework();
+		con2 = ij.startJBMS();
+		runTests("regular connections", con,con2);
+		con.close();
+		con2.close();
+		if (TestUtil.isJCCFramework())  // no xa for jcc
+		    return;
+		
+		// Test connections obtained via XADataSource DERBY-899
+		Properties dsprops = new Properties();
+		dsprops.setProperty("databaseName","wombat");
+		XADataSource ds  = TestUtil.getXADataSource(dsprops);
+		con = ds.getXAConnection().getConnection();
+		con2 = ds.getXAConnection().getConnection();
+		runTests("connections from XADataSource (local tranasaction)", 
+				 con, con2);
+		con.close();
+		con2.close();
+	    }
+		catch (SQLException e) {
+		    dumpSQLExceptions(e);
+				}
+		catch (Throwable e) {
+			System.out.println("FAIL -- unexpected exception:");
+			e.printStackTrace(System.out);
+		}
+
+	}
+	public static void runTests(String tag, Connection con, Connection con2) 
+	throws SQLException {
+		Statement  s;
+		System.out.println("Test savepointJdbc30 starting for "  + tag);
 
 			con.setAutoCommit(true); // make sure it is true
 			s = con.createStatement();
-			con2 = ij.startJBMS();
 			con2.setAutoCommit(false);
 			/* Create the table and do any other set-up */
 			setUpTest(s);
@@ -78,18 +110,9 @@ public static void main(String[] args) {
 				nonDRDATests(con, s);
 
 			s.close();
-			con.close();
-			con2.close();
-		}
-		catch (SQLException e) {
-			dumpSQLExceptions(e);
-		}
-		catch (Throwable e) {
-			System.out.println("FAIL -- unexpected exception:");
-			e.printStackTrace(System.out);
-		}
 
-		System.out.println("Test savepointJdbc30 finished");
+	
+		System.out.println("Test savepointJdbc30 finished for " + tag);
 	}
 
 	//The following tests have nested savepoints through JDBC calls. When coming through JCC,
@@ -873,7 +896,15 @@ static void genericTests(Connection con, Connection con2, Statement s)
 	//Set up the test by creating the table used by the rest of the test.
 	static void setUpTest(Statement s)
 					throws SQLException {
-		/* Create a table */
+		/* drop and create tables */
+	    try {
+	        s.execute("drop table t1");
+	    }catch (SQLException e){};
+	    
+	    try {
+	        s.execute("drop table t2");
+	    }catch (SQLException e){};
+	    
 		s.execute("create table t1 (c11 int, c12 smallint)");
 		s.execute("create table t2 (c11 int)");
 
