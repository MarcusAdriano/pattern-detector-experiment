diff --git a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/ijMultipleResultSetResult.java b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/ijMultipleResultSetResult.java
index e69de29b..045a12a2 100644
--- a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/ijMultipleResultSetResult.java
+++ b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/ijMultipleResultSetResult.java
@@ -0,0 +1,123 @@
+/*
+
+Derby - Class org.apache.derby.impl.tools.ij.ijResultSetResult
+
+Licensed to the Apache Software Foundation (ASF) under one
+or more contributor license agreements.  See the NOTICE file
+distributed with this work for additional information
+regarding copyright ownership.  The ASF licenses this file
+to you under the Apache License, Version 2.0 (the
+"License"); you may not use this file except in compliance
+with the License.  You may obtain a copy of the License at
+
+http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+*/
+
+package org.apache.derby.impl.tools.ij;
+
+import java.sql.Connection;
+import java.sql.ResultSet;
+import java.sql.Statement;
+import java.sql.SQLException;
+import java.sql.SQLWarning;
+
+import java.util.List;
+import java.util.ArrayList;
+
+/**
+ * This impl is intended to be used with multiple resultsets, where
+ * the execution of the statement is already complete.
+ */
+public class ijMultipleResultSetResult extends ijResultImpl {
+
+    List resultSets = null;
+
+    int[] displayColumns = null;
+    int[] columnWidths = null;
+
+    /**
+     * Create a ijResultImpl that represents multiple result set.
+     */
+    public ijMultipleResultSetResult(List resultSets) throws SQLException {
+        resultSets = new ArrayList();
+        resultSets.addAll(resultSets);
+    }
+
+    /**
+     * Create a ijResultImpl that represents multiple result sets, only
+     * displaying a subset of the columns, using specified column widths.
+     * 
+     * @param resultSets The result sets to display
+     * @param display Which column numbers to display, or null to display
+     *                all columns.
+     * @param widths  The widths of the columns specified in 'display', or
+     *                null to display using default column sizes.
+     */
+    public ijMultipleResultSetResult(List resultSets, int[] display,
+                                     int[] widths) throws SQLException {
+        this.resultSets = new ArrayList();
+        this.resultSets.addAll(resultSets);
+
+        displayColumns = display;
+        columnWidths   = widths;
+    }
+
+
+    public void addResultSet(ResultSet rs){
+        resultSets.add(rs);
+    }
+
+    public boolean isMultipleResultSetResult(){
+        return true;
+    }
+
+    public List getMultipleResultSets() {
+        return resultSets;
+    }
+
+    public void closeStatement() throws SQLException {
+        if (resultSets != null) {
+            ResultSet rs = null;
+            for (int i = 0; i<resultSets.size(); i++){
+                rs = (ResultSet)resultSets.get(i);
+                if(rs.getStatement() != null) rs.getStatement().close();
+                else rs.close(); 
+            }
+        }
+    }
+
+    public int[] getColumnDisplayList() { return displayColumns; }
+    public int[] getColumnWidthList() { return columnWidths; }
+
+    /**
+     * @return the warnings from all resultsets as one SQLWarning chain
+     */
+    public SQLWarning getSQLWarnings() throws SQLException { 
+        SQLWarning warning = null;
+        ResultSet rs = null;
+        for (int i=0; i<resultSets.size(); i++){
+            rs = (ResultSet)resultSets.get(i);
+            if (rs.getWarnings() != null) {
+                if (warning == null) warning = rs.getWarnings();
+                else                 warning.setNextWarning(rs.getWarnings());
+            }
+        }
+        return warning;
+    }
+    
+    /**
+     * Clears the warnings in all resultsets
+     */
+    public void clearSQLWarnings() throws SQLException {
+        for (int i=0; i<resultSets.size(); i++){
+            ((ResultSet)resultSets.get(i)).clearWarnings();
+        }
+    }
+}
diff --git a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/ijResult.java b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/ijResult.java
index 0af5de80..2f06813a 100644
--- a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/ijResult.java
+++ b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/ijResult.java
@@ -28,6 +28,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.SQLException;
 import java.sql.SQLWarning;
 import java.util.Vector;
+import java.util.List;
 
 /**
  * This is a wrapper for results coming out of the
@@ -44,12 +45,14 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	boolean isVector();
 	boolean isMulti();
 	boolean isException();
+	boolean isMultipleResultSetResult();
 	boolean hasWarnings() throws SQLException ;
 
 	Connection getConnection();
 	Statement getStatement();
 	int getUpdateCount() throws SQLException;
 	ResultSet getResultSet() throws SQLException;
+	List getMultipleResultSets();
 	ResultSet getNextRowOfResultSet();
 	Vector getVector();
 	SQLException getException();
diff --git a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/ijResultImpl.java b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/ijResultImpl.java
index d1517f7e..9362b443 100644
--- a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/ijResultImpl.java
+++ b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/ijResultImpl.java
@@ -29,6 +29,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.SQLException;
 import java.sql.SQLWarning;
 import java.util.Vector;
+import java.util.List;
 
 /**
  * This is an empty impl for reuse of code.
@@ -43,12 +44,14 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	public boolean isVector() { return false; }
 	public boolean isMulti() { return false; }
 	public boolean isException() { return false; }
+	public boolean isMultipleResultSetResult(){ return false; }
 	public boolean hasWarnings() throws SQLException { return getSQLWarnings()!=null; }
 
 	public Connection getConnection() { return null; }
 	public Statement getStatement() { return null; }
 	public int getUpdateCount() throws SQLException { return -1; }
 	public ResultSet getResultSet() throws SQLException { return null; }
+	public List getMultipleResultSets() { return null; }
 	public ResultSet getNextRowOfResultSet() { return null; }
 	public Vector getVector() { return null; }
 	public SQLException getException() { return null; }
@@ -69,6 +72,9 @@ public String toString() {
 		if (isVector()) return LocalizedResource.getMessage("IJ_Vec0",getVector().toString());
 		if (isMulti()) return LocalizedResource.getMessage("IJ_Mul0",getVector().toString());
 		if (isException()) return LocalizedResource.getMessage("IJ_Exc0",getException().toString());
+		if (isMultipleResultSetResult())
+			return LocalizedResource.getMessage("IJ_MRS0",
+									    getMultipleResultSets().toString());
 		try {
 			if (isResultSet()) return LocalizedResource.getMessage("IJ_Rse0",getStatement().toString());
 		} catch(SQLException se) {
diff --git a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/utilMain.java b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/utilMain.java
index 7ec9434d..0196a037 100644
--- a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/utilMain.java
+++ b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/ij/utilMain.java
@@ -33,6 +33,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.error.PublicAPI;
 import org.apache.derby.iapi.error.StandardException;
 
+import java.util.List;
 import java.util.Stack;
 import java.util.Hashtable;
 import java.util.Properties;
@@ -490,6 +491,17 @@ private void displayResult(LocalizedOutput out, ijResult result, Connection conn
 					throw se;
 				}
 				result.closeStatement();
+            } else if (result.isMultipleResultSetResult()) {
+              List resultSets = result.getMultipleResultSets();
+              try {
+                JDBCDisplayUtil.DisplayMultipleResults(out,resultSets,
+                                     connEnv[currCE].getConnection(),
+                                     result.getColumnDisplayList(),
+                                     result.getColumnWidthList());
+              } catch (SQLException se) {
+                result.closeStatement();
+                throw se;
+              }
 			} else if (result.isException()) {
 				JDBCDisplayUtil.ShowException(out,result.getException());
 			}
diff --git a/db/derby/code/trunk/java/tools/org/apache/derby/tools/JDBCDisplayUtil.java b/db/derby/code/trunk/java/tools/org/apache/derby/tools/JDBCDisplayUtil.java
index c8b8a439..21bfb9a0 100644
--- a/db/derby/code/trunk/java/tools/org/apache/derby/tools/JDBCDisplayUtil.java
+++ b/db/derby/code/trunk/java/tools/org/apache/derby/tools/JDBCDisplayUtil.java
@@ -39,6 +39,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import java.util.Properties;
 import java.util.Enumeration;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Vector;
 
 import org.apache.derby.iapi.tools.i18n.LocalizedResource;
@@ -289,6 +291,25 @@ else if (count >= 0) {
 
 	/**
 		@param out the place to write to
+       @param resultSets List of ResultSet to display
+       @param conn the Connection against which the ResultSet was retrieved
+       @param displayColumns Column numbers to display, or null if all
+       @param displayColumnWidths Column widths, in characters, if displayColumns is specified.
+
+       @exception SQLException on JDBC access failure
+    */
+    static public void DisplayMultipleResults(PrintWriter out, List resultSets,
+                                              Connection conn,
+                                              int[] displayColumns,
+                                              int[] displayColumnWidths)
+        throws SQLException
+    {
+        indent_DisplayResults( out, resultSets, conn, 0, displayColumns, 
+                               displayColumnWidths);
+    }
+
+    /**
+       @param out the place to write to
 		@param rs the ResultSet to display
 		@param conn the Connection against which the ResultSet was retrieved
 	    @param displayColumns Column numbers to display, or null if all
@@ -308,7 +329,23 @@ static public void DisplayResults(PrintWriter out, ResultSet rs, Connection conn
 	(PrintWriter out, ResultSet rs, Connection conn, int indentLevel, 
 	 int[] displayColumns, int[] displayColumnWidths)
 		throws SQLException {
-		ResultSetMetaData rsmd = rs.getMetaData();
+        List resultSets = new ArrayList();
+        resultSets.add(rs);
+        indent_DisplayResults( out, resultSets, conn, 0, displayColumns, 
+                               displayColumnWidths);
+    }
+
+    static private void indent_DisplayResults
+        (PrintWriter out, List resultSets, Connection conn, int indentLevel, 
+         int[] displayColumns, int[] displayColumnWidths)
+        throws SQLException {
+
+        ResultSetMetaData rsmd = null;
+
+        //get metadata from the first ResultSet
+        if (resultSets != null && resultSets.size() > 0)
+			rsmd = ((ResultSet)resultSets.get(0)).getMetaData();
+    
 		checkNotNull(rsmd, "ResultSetMetaData");
 		Vector nestedResults;
     int numberOfRowsSelected = 0;
@@ -321,16 +358,22 @@ static public void DisplayResults(PrintWriter out, ResultSet rs, Connection conn
 			nestedResults = null;
 
 		if(displayColumnWidths == null)
-			displayColumnWidths = getColumnDisplayWidths(rsmd, displayColumns,true);
+            displayColumnWidths = getColumnDisplayWidths(rsmd,
+														 displayColumns,true);
 		
 		int len = indent_DisplayBanner(out,rsmd, indentLevel, displayColumns,
 									   displayColumnWidths);
 
 		// When displaying rows, keep going past errors
 		// unless/until the maximum # of errors is reached.
-		boolean doNext = true;
 		int retry = 0;
-		while (doNext) {
+
+        ResultSet rs = null;
+        boolean doNext = true;
+        for (int i = 0; i< resultSets.size(); i++) {
+            rs = (ResultSet)resultSets.get(i);
+            doNext = true;
+            while (doNext){
 			try {
 				doNext = rs.next();
 				if (doNext) {
@@ -350,6 +393,7 @@ static public void DisplayResults(PrintWriter out, ResultSet rs, Connection conn
 					ShowSQLException(out, e);
 			}
 		}
+        }
 		if (showSelectCount == true) {
 		   if (numberOfRowsSelected == 1) {
 			   out.println();
@@ -365,6 +409,7 @@ static public void DisplayResults(PrintWriter out, ResultSet rs, Connection conn
 		nestedResults = null;
 	}
 
+
 	/**
 		@param out the place to write to
 		@param nr the vector of results
