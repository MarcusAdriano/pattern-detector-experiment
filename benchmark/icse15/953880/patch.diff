diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
index 19770613..ed975d88 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/BeanRecipe.java
@@ -46,7 +46,6 @@
 import org.osgi.service.blueprint.container.ComponentDefinitionException;
 import org.osgi.service.blueprint.container.ReifiedType;
 import org.osgi.service.blueprint.reflect.BeanMetadata;
-import org.osgi.service.blueprint.reflect.ComponentMetadata;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -73,6 +72,7 @@
     private List<String> argTypes;
     private boolean reorderArguments;
     private final boolean allowsFieldInjection;
+    private BeanMetadata interceptorLookupKey;
 
 
     public BeanRecipe(String name, ExtendedBlueprintContainer blueprintContainer, Object type, boolean allowsFieldInjection) {
@@ -138,6 +138,10 @@ public void setExplicitDependencies(List<Recipe> explicitDependencies) {
         this.explicitDependencies = explicitDependencies;
     }
 
+    public void setInterceptorLookupKey(BeanMetadata metadata) {
+    	interceptorLookupKey = metadata;
+    }
+    
     @Override
     public List<Recipe> getConstructorDependencies() {
         List<Recipe> recipes = new ArrayList<Recipe>();
@@ -668,11 +672,9 @@ private Object addInterceptors(Object original)
             throws ComponentDefinitionException {
 
         Object intercepted = null;
-        String beanName = getName();
         ComponentDefinitionRegistry reg = blueprintContainer
                 .getComponentDefinitionRegistry();
-        ComponentMetadata metaData = reg.getComponentDefinition(beanName);
-        List<Interceptor> interceptors = reg.getInterceptors(metaData);
+        List<Interceptor> interceptors = reg.getInterceptors(interceptorLookupKey);
         if (interceptors != null && interceptors.size() > 0) {
             boolean asmAvailable = false;
             try {
@@ -698,14 +700,14 @@ private Object addInterceptors(Object original)
                 // if asm is available we can proxy the original object with the
                 // AsmInterceptorWrapper
                 intercepted = AsmInterceptorWrapper.createProxyObject(original
-                        .getClass().getClassLoader(), metaData, interceptors,
+                        .getClass().getClassLoader(), interceptorLookupKey, interceptors,
                         original, original.getClass());
             } else {
                 LOGGER.debug("cglib available for interceptors");
                 // otherwise we're using cglib and need to use the interfaces
                 // with the CgLibInterceptorWrapper
                 intercepted = CgLibInterceptorWrapper.createProxyObject(
-                        original.getClass().getClassLoader(), metaData,
+                        original.getClass().getClassLoader(), interceptorLookupKey,
                         interceptors, original, original.getClass()
                                 .getInterfaces());
             }
diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java
index ef69ed2c..86913b90 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/RecipeBuilder.java
@@ -230,6 +230,7 @@ private BeanRecipe createBeanRecipe(BeanMetadata beanMetadata) {
         recipe.setPrototype(MetadataUtil.isPrototypeScope(beanMetadata));
         recipe.setInitMethod(beanMetadata.getInitMethod());
         recipe.setDestroyMethod(beanMetadata.getDestroyMethod());
+        recipe.setInterceptorLookupKey(beanMetadata);
         List<BeanArgument> beanArguments = beanMetadata.getArguments();
         if (beanArguments != null && !beanArguments.isEmpty()) {
             boolean hasIndex = (beanArguments.get(0).getIndex() >= 0);
