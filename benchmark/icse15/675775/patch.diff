diff --git a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetIjTest.java b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetIjTest.java
index b9800df1..4d2f0e7a 100644
--- a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetIjTest.java
+++ b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/NetIjTest.java
@@ -23,26 +23,84 @@
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
-import org.apache.derbyTesting.functionTests.util.IjTestCase;
-import org.apache.derbyTesting.junit.SupportFilesSetup;
+import org.apache.derbyTesting.functionTests.util.ScriptTestCase;
+import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
 import org.apache.derbyTesting.junit.TestConfiguration;
 
 /**
  * Network client .sql tests to run via ij.
  */
-public class NetIjTest extends IjTestCase {
+/**
+ * NetScripts runs ij scripts (.sql files) in the derbynet package
+ * and compares the output to a canon file in the standard master package.
+ * <BR>
+ * Its suite() method returns a set of tests where each test is an instance of
+ * this class for an individual script wrapped in a clean database decorator.
+ * <BR>
+ * It can also be used as a command line program to run one or more
+ * ij scripts as tests.
+ *
+ */
+public final class NetIjTest extends ScriptTestCase {
 	
-	private NetIjTest(String name) {
-		super(name);
+    /**
+     * scripts (.sql files) - only run in client.
+     */
+    private static final String[] CLIENT_TESTS = {
+        "testclientij",
+    };
+
+    /**
+     * Run a set of scripts (.sql files) passed in on the
+     * command line. Note the .sql suffix must not be provided as
+     * part of the script name.
+     * <code>
+     * example
+     * java org.apache.derbyTesting.functionTests.tests.derbynet.NetIjTest case union
+     * </code>
+     */
+    public static void main(String[] args)
+        {
+            junit.textui.TestRunner.run(getSuite(args));
 	}
 	
+    /**
+     * Return the suite that runs all the derbynet scripts.
+     */
 	public static Test suite() {
         
-        TestSuite suite = new TestSuite("NetIjTests");
-        suite.addTest(new SupportFilesSetup(
-        		TestConfiguration.clientServerDecorator(
-        		new NetIjTest("testclientij"))));
+        TestSuite suite = new TestSuite("NetScripts");
+
+        // Set up the scripts run with the network client
+        TestSuite clientTests = new TestSuite("NetScripts:client");
+        clientTests.addTest(getSuite(CLIENT_TESTS));
+        Test client = TestConfiguration.clientServerDecorator(clientTests);
+
+        // add those client tests into the top-level suite.
+        suite.addTest(client);
         
         return suite;
     }
+
+    /*
+     * A single JUnit test that runs a single derbynet script.
+     */
+    private NetIjTest(String netTest){
+        super(netTest);
+    }
+
+    /**
+     * Return a suite of derbynet tests from the list of
+     * script names. Each test is surrounded in a decorator
+     * that cleans the database.
+     */
+    private static Test getSuite(String[] list) {
+        TestSuite suite = new TestSuite("Net scripts");
+        for (int i = 0; i < list.length; i++)
+            suite.addTest(
+                new CleanDatabaseTestSetup(
+                    new NetIjTest(list[i])));
+
+        return getIJConfig(suite);
+    }
 }
diff --git a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/util/IjTestCase.java b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/util/IjTestCase.java
index 418c43c3..b953c9ff 100644
--- a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/util/IjTestCase.java
+++ b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/util/IjTestCase.java
@@ -70,8 +70,11 @@ public void tearDown() throws Exception {
 	
 	/**
 	 * Run a .sql test, calling ij's main method.
-	 * Then, take the output filre and read it into our OutputStream
+	 * Then, take the output file and read it into our OutputStream
 	 * so that it can be compared via compareCanon().
+	 * TODO:
+	 * Note that the output will include a version number;
+	 * this should get filtered/ignored in compareCanon
 	 */
 	public void runTest() throws Throwable {
 		String [] args = { "-fr", scriptName };
