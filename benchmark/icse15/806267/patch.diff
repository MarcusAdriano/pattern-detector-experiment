diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index 91e35ef1..90166761 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -113,8 +113,6 @@
      * high throughput on reads but at the cost of consistency.
     */
     private static boolean doConsistencyCheck_ = true;
-    /* Callout directories */
-    private static String calloutLocation_;
     /* Job Jar Location */
     private static String jobJarFileLocation_;
     /* Address where to run the job tracker */
@@ -222,9 +220,6 @@ else if (commitLogSync_ == CommitLogSync.batch)
                 throw new ConfigurationException("Invalid endpointsnitch class " + endPointSnitchClassName);
             }
             
-            /* Callout location */
-            calloutLocation_ = xmlUtils.getNodeValue("/Storage/CalloutLocation");
-
             /* JobTracker address */
             jobTrackerHost_ = xmlUtils.getNodeValue("/Storage/JobTrackerHost");
 
@@ -673,11 +668,6 @@ public static Class getReplicaPlacementStrategyClass()
         return replicaPlacementStrategyClass_;
     }
     
-    public static String getCalloutLocation()
-    {
-        return calloutLocation_;
-    }
-    
     public static String getJobTrackerAddress()
     {
         return jobTrackerHost_;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutDeployMessage.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutDeployMessage.java
index 8b15492c..e69de29b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutDeployMessage.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutDeployMessage.java
@@ -1,89 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.cassandra.db;
-
-import java.io.ByteArrayOutputStream;
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.IOException;
-
-import org.apache.cassandra.io.ICompactSerializer;
-import org.apache.cassandra.net.Message;
-import org.apache.cassandra.service.StorageService;
-
-
-public class CalloutDeployMessage
-{
-    private static ICompactSerializer<CalloutDeployMessage> serializer_;
-    
-    static
-    {
-        serializer_ = new CalloutDeployMessageSerializer();
-    }
-    
-    public static ICompactSerializer<CalloutDeployMessage> serializer()
-    {
-        return serializer_;
-    }
-    
-    public static Message getCalloutDeployMessage(CalloutDeployMessage cdMessage) throws IOException
-    {
-        ByteArrayOutputStream bos = new ByteArrayOutputStream();
-        DataOutputStream dos = new DataOutputStream(bos);
-        serializer_.serialize(cdMessage, dos);
-        Message message = new Message(StorageService.getLocalStorageEndPoint(), "", StorageService.calloutDeployVerbHandler_, bos.toByteArray());
-        return message;
-    }
-    
-    /* Name of the callout */
-    private String callout_;
-    /* The actual procedure */
-    private String script_;
-    
-    public CalloutDeployMessage(String callout, String script)
-    {
-        callout_ = callout;
-        script_ = script;
-    }
-    
-    String getCallout()
-    {
-        return callout_;
-    }
-    
-    String getScript()
-    {
-        return script_;
-    }
-}
-
-class CalloutDeployMessageSerializer implements ICompactSerializer<CalloutDeployMessage>
-{
-    public void serialize(CalloutDeployMessage cdMessage, DataOutputStream dos) throws IOException
-    {
-        dos.writeUTF(cdMessage.getCallout());
-        dos.writeUTF(cdMessage.getScript());
-    }
-    
-    public CalloutDeployMessage deserialize(DataInputStream dis) throws IOException
-    {
-        String callout = dis.readUTF();
-        String script = dis.readUTF();
-        return new CalloutDeployMessage(callout, script);
-    }
-}
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutDeployVerbHandler.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutDeployVerbHandler.java
index 3c50b720..e69de29b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutDeployVerbHandler.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutDeployVerbHandler.java
@@ -1,49 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.cassandra.db;
-
-import java.io.IOException;
-
-import org.apache.cassandra.io.DataInputBuffer;
-import org.apache.cassandra.net.IVerbHandler;
-import org.apache.cassandra.net.Message;
-import org.apache.cassandra.utils.LogUtil;
-import org.apache.log4j.Logger;
-
-
-public class CalloutDeployVerbHandler implements IVerbHandler
-{
-    private static Logger logger_ = Logger.getLogger(CalloutDeployVerbHandler.class);
-    
-    public void doVerb(Message message)
-    {
-        byte[] bytes = message.getMessageBody();
-        DataInputBuffer bufIn = new DataInputBuffer();
-        bufIn.reset(bytes, bytes.length);
-        try
-        {
-            CalloutDeployMessage cdMessage = CalloutDeployMessage.serializer().deserialize(bufIn);
-            /* save the callout to callout cache and to disk. */
-            CalloutManager.instance().addCallout( cdMessage.getCallout(), cdMessage.getScript() );
-        }
-        catch ( IOException ex )
-        {
-            logger_.warn(LogUtil.throwableToString(ex));
-        }        
-    }
-}
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutManager.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutManager.java
index a7e6a9b1..e69de29b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutManager.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/CalloutManager.java
@@ -1,211 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.cassandra.db;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.util.List;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.concurrent.locks.Lock;
-import java.util.concurrent.locks.ReentrantLock;
-
-import javax.script.Bindings;
-import javax.script.Invocable;
-import javax.script.ScriptEngine;
-import javax.script.ScriptEngineManager;
-import javax.script.Compilable;
-import javax.script.CompiledScript;
-import javax.script.ScriptException;
-import javax.script.SimpleBindings;
-
-import org.apache.cassandra.config.DatabaseDescriptor;
-import org.apache.cassandra.procedures.GroovyScriptRunner;
-import org.apache.cassandra.utils.LogUtil;
-import org.apache.cassandra.utils.FileUtils;
-
-import org.apache.log4j.Logger;
-
-public class CalloutManager
-{
-    private final static Logger logger_ = Logger.getLogger(CalloutManager.class); 
-    private static final String extn_ = ".groovy";
-    /* Used to lock the factory for creation of CalloutManager instance */
-    private static Lock createLock_ = new ReentrantLock();
-    /* An instance of the CalloutManager  */
-    private static CalloutManager instance_;
-    
-    public static CalloutManager instance()
-    {
-        if ( instance_ == null )
-        {
-            CalloutManager.createLock_.lock();
-            try
-            {
-                if ( instance_ == null )
-                {
-                    instance_ = new CalloutManager();
-                }
-            }
-            finally
-            {
-                CalloutManager.createLock_.unlock();
-            }
-        }
-        return instance_;
-    }
-    
-    /* Map containing the name of callout as key and the callout script as value */
-    private Map<String, CompiledScript> calloutCache_ = new HashMap<String, CompiledScript>();    
-    /* The Groovy Script compiler instance */
-    private Compilable compiler_;
-    /* The Groovy script invokable instance */
-    private Invocable invokable_;
-    
-    private CalloutManager()
-    {
-        ScriptEngineManager scriptManager = new ScriptEngineManager();
-        ScriptEngine groovyEngine = scriptManager.getEngineByName("groovy");
-        compiler_ = (Compilable)groovyEngine;
-        invokable_ = (Invocable)groovyEngine;
-    }
-    
-    /**
-     * Compile the script and cache the compiled script.
-     * @param script to be compiled
-     * @throws ScriptException
-     */
-    private void compileAndCache(String scriptId, String script) throws ScriptException
-    {
-        if ( compiler_ != null )
-        {
-            CompiledScript compiledScript = compiler_.compile(script);
-            calloutCache_.put(scriptId, compiledScript);
-        }
-    }
-    
-    /**
-     * Invoked on start up to load all the stored callouts, compile
-     * and cache them.
-     * 
-     * @throws IOException
-     */
-    public void onStart() throws IOException
-    {
-    	String location = DatabaseDescriptor.getCalloutLocation();
-    	if ( location == null )
-    		return;
-    	
-        FileUtils.createDirectory(location);
-        
-        File[] files = new File(location).listFiles();
-        
-        for ( File file : files )
-        {
-            String f = file.getName();
-            /* Get the callout name from the file */
-            String callout = f.split(extn_)[0];
-            FileInputStream fis = new FileInputStream(file);
-            byte[] bytes = new byte[fis.available()];
-            fis.read(bytes);
-            fis.close();
-            /* cache the callout after compiling it */
-            try
-            {
-                compileAndCache(callout, new String(bytes));                    
-            }
-            catch ( ScriptException ex )
-            {
-                logger_.warn(LogUtil.throwableToString(ex));
-            }
-        }
-    }
-    
-    /**
-     * Store the callout in cache and write it out
-     * to disk.
-     * @param callout the name of the callout
-     * @param script actual implementation of the callout
-    */
-    public void addCallout(String callout, String script) throws IOException
-    {
-        /* cache the script */
-        /* cache the callout after compiling it */
-        try
-        {
-            compileAndCache(callout, script);                    
-        }
-        catch ( ScriptException ex )
-        {
-            logger_.warn(LogUtil.throwableToString(ex));
-        }
-        /* save the script to disk */
-        String scriptFile = DatabaseDescriptor.getCalloutLocation() + File.separator + callout + extn_;
-        File file = new File(scriptFile);
-        if ( file.exists() )
-        {
-            if (logger_.isDebugEnabled())
-              logger_.debug("Deleting the old script file ...");
-            file.delete();
-        }
-        FileOutputStream fos = new FileOutputStream(scriptFile);
-        fos.write(script.getBytes());
-        fos.close();
-    }
-    
-    /**
-     * Remove the registered callout and delete the
-     * script on the disk.
-     * @param callout to be removed
-     */
-    public void removeCallout(String callout)
-    {
-        /* remove the script from cache */
-        calloutCache_.remove(callout);
-        String scriptFile = DatabaseDescriptor.getCalloutLocation() + File.separator + callout + ".grv";
-        File file = new File(scriptFile);
-        file.delete();
-    }
-    
-    /**
-     * Execute the specified callout.
-     * @param callout to be executed.
-     * @param args arguments to be passed to the callouts.
-     */
-    public Object executeCallout(String callout, Object ... args)
-    {
-        Object result = null;
-        CompiledScript script = calloutCache_.get(callout);
-        if ( script != null )
-        {
-            try
-            {
-                Bindings binding = new SimpleBindings();
-                binding.put("args", args);
-                result = script.eval(binding);
-            }
-            catch(ScriptException ex)
-            {
-                logger_.warn(LogUtil.throwableToString(ex));
-            }
-        }
-        return result;
-    }
-}
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/procedures/GroovyScriptRunner.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/procedures/GroovyScriptRunner.java
index 6df394d2..e69de29b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/procedures/GroovyScriptRunner.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/procedures/GroovyScriptRunner.java
@@ -1,31 +0,0 @@
-/*
-* Licensed to the Apache Software Foundation (ASF) under one
-* or more contributor license agreements.  See the NOTICE file
-* distributed with this work for additional information
-* regarding copyright ownership.  The ASF licenses this file
-* to you under the Apache License, Version 2.0 (the
-* "License"); you may not use this file except in compliance
-* with the License.  You may obtain a copy of the License at
-*
-*    http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing,
-* software distributed under the License is distributed on an
-* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-* KIND, either express or implied.  See the License for the
-* specific language governing permissions and limitations
-* under the License.
-*/
-package org.apache.cassandra.procedures;
-
-import groovy.lang.GroovyShell;
-
-public class GroovyScriptRunner
-{
-	private static GroovyShell groovyShell_ = new GroovyShell();
-
-	public static String evaluateString(String script)
-	{        
-		 return groovyShell_.evaluate(script).toString();
-	}
-}
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraDaemon.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraDaemon.java
index a3111b63..97bc5ac6 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraDaemon.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraDaemon.java
@@ -36,7 +36,6 @@
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.db.Table;
 import org.apache.cassandra.db.RecoveryManager;
-import org.apache.cassandra.db.CalloutManager;
 
 /**
  * This class supports two methods for creating a Cassandra node daemon, 
@@ -77,8 +76,6 @@ public void uncaughtException(Thread t, Throwable e)
         });
 
         // initialize stuff
-        CalloutManager.instance().onStart();
-
         Set<String> tables = DatabaseDescriptor.getTableToColumnFamilyMap().keySet();
         for (String table : tables)
         {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index 5d6c3ef1..03b6bba6 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -76,7 +76,6 @@
     public final static String dataFileVerbHandler_ = "DATA-FILE-VERB-HANDLER";
     public final static String mbrshipCleanerVerbHandler_ = "MBRSHIP-CLEANER-VERB-HANDLER";
     public final static String bsMetadataVerbHandler_ = "BS-METADATA-VERB-HANDLER";
-    public final static String calloutDeployVerbHandler_ = "CALLOUT-DEPLOY-VERB-HANDLER";
     public final static String rangeVerbHandler_ = "RANGE-VERB-HANDLER";
 
     public static enum ConsistencyLevel
@@ -252,7 +251,6 @@ public StorageService(boolean isBootstrapMode)
         MessagingService.getMessagingInstance().registerVerbHandlers(StorageService.dataFileVerbHandler_, new DataFileVerbHandler() );
         MessagingService.getMessagingInstance().registerVerbHandlers(StorageService.mbrshipCleanerVerbHandler_, new MembershipCleanerVerbHandler() );
         MessagingService.getMessagingInstance().registerVerbHandlers(StorageService.bsMetadataVerbHandler_, new BootstrapMetadataVerbHandler() );        
-        MessagingService.getMessagingInstance().registerVerbHandlers(StorageService.calloutDeployVerbHandler_, new CalloutDeployVerbHandler() );
         MessagingService.getMessagingInstance().registerVerbHandlers(StorageService.rangeVerbHandler_, new RangeVerbHandler());
         
         /* register the stage for the mutations */
