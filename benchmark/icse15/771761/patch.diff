diff --git a/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/Cassandra.java b/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/Cassandra.java
index b57ba159..4f3d9163 100644
--- a/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/Cassandra.java
+++ b/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/Cassandra.java
@@ -30,15 +30,11 @@
 
     public int get_column_count(String tablename, String key, String columnFamily_column) throws InvalidRequestException, TException;
 
-    public void insert(String tablename, String key, String columnFamily_column, byte[] cellData, long timestamp) throws TException;
+    public void insert(String tablename, String key, String columnFamily_column, byte[] cellData, long timestamp, boolean block) throws InvalidRequestException, UnavailableException, TException;
 
-    public void batch_insert(batch_mutation_t batchMutation) throws TException;
+    public void batch_insert(batch_mutation_t batchMutation, boolean block) throws InvalidRequestException, UnavailableException, TException;
 
-    public boolean insert_blocking(String tablename, String key, String columnFamily_column, byte[] cellData, long timestamp) throws InvalidRequestException, TException;
-
-    public boolean batch_insert_blocking(batch_mutation_t batchMutation) throws InvalidRequestException, TException;
-
-    public boolean remove(String tablename, String key, String columnFamily_column, long timestamp, boolean block) throws InvalidRequestException, TException;
+    public void remove(String tablename, String key, String columnFamily_column, long timestamp, boolean block) throws InvalidRequestException, UnavailableException, TException;
 
     public List<column_t> get_columns_since(String tablename, String key, String columnFamily_column, long timeStamp) throws InvalidRequestException, NotFoundException, TException;
 
@@ -48,9 +44,7 @@
 
     public superColumn_t get_superColumn(String tablename, String key, String columnFamily) throws InvalidRequestException, NotFoundException, TException;
 
-    public void batch_insert_superColumn(batch_mutation_super_t batchMutationSuper) throws TException;
-
-    public boolean batch_insert_superColumn_blocking(batch_mutation_super_t batchMutationSuper) throws InvalidRequestException, TException;
+    public void batch_insert_superColumn(batch_mutation_super_t batchMutationSuper, boolean block) throws InvalidRequestException, UnavailableException, TException;
 
     public void touch(String key, boolean fData) throws TException;
 
@@ -257,12 +251,13 @@ public int recv_get_column_count() throws InvalidRequestException, TException
       throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_column_count failed: unknown result");
     }
 
-    public void insert(String tablename, String key, String columnFamily_column, byte[] cellData, long timestamp) throws TException
+    public void insert(String tablename, String key, String columnFamily_column, byte[] cellData, long timestamp, boolean block) throws InvalidRequestException, UnavailableException, TException
     {
-      send_insert(tablename, key, columnFamily_column, cellData, timestamp);
+      send_insert(tablename, key, columnFamily_column, cellData, timestamp, block);
+      recv_insert();
     }
 
-    public void send_insert(String tablename, String key, String columnFamily_column, byte[] cellData, long timestamp) throws TException
+    public void send_insert(String tablename, String key, String columnFamily_column, byte[] cellData, long timestamp, boolean block) throws TException
     {
       oprot_.writeMessageBegin(new TMessage("insert", TMessageType.CALL, seqid_));
       insert_args args = new insert_args();
@@ -271,47 +266,13 @@ public void send_insert(String tablename, String key, String columnFamily_column
       args.columnFamily_column = columnFamily_column;
       args.cellData = cellData;
       args.timestamp = timestamp;
+      args.block = block;
       args.write(oprot_);
       oprot_.writeMessageEnd();
       oprot_.getTransport().flush();
     }
 
-    public void batch_insert(batch_mutation_t batchMutation) throws TException
-    {
-      send_batch_insert(batchMutation);
-    }
-
-    public void send_batch_insert(batch_mutation_t batchMutation) throws TException
-    {
-      oprot_.writeMessageBegin(new TMessage("batch_insert", TMessageType.CALL, seqid_));
-      batch_insert_args args = new batch_insert_args();
-      args.batchMutation = batchMutation;
-      args.write(oprot_);
-      oprot_.writeMessageEnd();
-      oprot_.getTransport().flush();
-    }
-
-    public boolean insert_blocking(String tablename, String key, String columnFamily_column, byte[] cellData, long timestamp) throws InvalidRequestException, TException
-    {
-      send_insert_blocking(tablename, key, columnFamily_column, cellData, timestamp);
-      return recv_insert_blocking();
-    }
-
-    public void send_insert_blocking(String tablename, String key, String columnFamily_column, byte[] cellData, long timestamp) throws TException
-    {
-      oprot_.writeMessageBegin(new TMessage("insert_blocking", TMessageType.CALL, seqid_));
-      insert_blocking_args args = new insert_blocking_args();
-      args.tablename = tablename;
-      args.key = key;
-      args.columnFamily_column = columnFamily_column;
-      args.cellData = cellData;
-      args.timestamp = timestamp;
-      args.write(oprot_);
-      oprot_.writeMessageEnd();
-      oprot_.getTransport().flush();
-    }
-
-    public boolean recv_insert_blocking() throws InvalidRequestException, TException
+    public void recv_insert() throws InvalidRequestException, UnavailableException, TException
     {
       TMessage msg = iprot_.readMessageBegin();
       if (msg.type == TMessageType.EXCEPTION) {
@@ -319,35 +280,36 @@ public boolean recv_insert_blocking() throws InvalidRequestException, TException
         iprot_.readMessageEnd();
         throw x;
       }
-      insert_blocking_result result = new insert_blocking_result();
+      insert_result result = new insert_result();
       result.read(iprot_);
       iprot_.readMessageEnd();
-      if (result.isSetSuccess()) {
-        return result.success;
-      }
       if (result.ire != null) {
         throw result.ire;
       }
-      throw new TApplicationException(TApplicationException.MISSING_RESULT, "insert_blocking failed: unknown result");
+      if (result.ue != null) {
+        throw result.ue;
+      }
+      return;
     }
 
-    public boolean batch_insert_blocking(batch_mutation_t batchMutation) throws InvalidRequestException, TException
+    public void batch_insert(batch_mutation_t batchMutation, boolean block) throws InvalidRequestException, UnavailableException, TException
     {
-      send_batch_insert_blocking(batchMutation);
-      return recv_batch_insert_blocking();
+      send_batch_insert(batchMutation, block);
+      recv_batch_insert();
     }
 
-    public void send_batch_insert_blocking(batch_mutation_t batchMutation) throws TException
+    public void send_batch_insert(batch_mutation_t batchMutation, boolean block) throws TException
     {
-      oprot_.writeMessageBegin(new TMessage("batch_insert_blocking", TMessageType.CALL, seqid_));
-      batch_insert_blocking_args args = new batch_insert_blocking_args();
+      oprot_.writeMessageBegin(new TMessage("batch_insert", TMessageType.CALL, seqid_));
+      batch_insert_args args = new batch_insert_args();
       args.batchMutation = batchMutation;
+      args.block = block;
       args.write(oprot_);
       oprot_.writeMessageEnd();
       oprot_.getTransport().flush();
     }
 
-    public boolean recv_batch_insert_blocking() throws InvalidRequestException, TException
+    public void recv_batch_insert() throws InvalidRequestException, UnavailableException, TException
     {
       TMessage msg = iprot_.readMessageBegin();
       if (msg.type == TMessageType.EXCEPTION) {
@@ -355,22 +317,22 @@ public boolean recv_batch_insert_blocking() throws InvalidRequestException, TExc
         iprot_.readMessageEnd();
         throw x;
       }
-      batch_insert_blocking_result result = new batch_insert_blocking_result();
+      batch_insert_result result = new batch_insert_result();
       result.read(iprot_);
       iprot_.readMessageEnd();
-      if (result.isSetSuccess()) {
-        return result.success;
-      }
       if (result.ire != null) {
         throw result.ire;
       }
-      throw new TApplicationException(TApplicationException.MISSING_RESULT, "batch_insert_blocking failed: unknown result");
+      if (result.ue != null) {
+        throw result.ue;
+      }
+      return;
     }
 
-    public boolean remove(String tablename, String key, String columnFamily_column, long timestamp, boolean block) throws InvalidRequestException, TException
+    public void remove(String tablename, String key, String columnFamily_column, long timestamp, boolean block) throws InvalidRequestException, UnavailableException, TException
     {
       send_remove(tablename, key, columnFamily_column, timestamp, block);
-      return recv_remove();
+      recv_remove();
     }
 
     public void send_remove(String tablename, String key, String columnFamily_column, long timestamp, boolean block) throws TException
@@ -387,7 +349,7 @@ public void send_remove(String tablename, String key, String columnFamily_column
       oprot_.getTransport().flush();
     }
 
-    public boolean recv_remove() throws InvalidRequestException, TException
+    public void recv_remove() throws InvalidRequestException, UnavailableException, TException
     {
       TMessage msg = iprot_.readMessageBegin();
       if (msg.type == TMessageType.EXCEPTION) {
@@ -398,13 +360,13 @@ public boolean recv_remove() throws InvalidRequestException, TException
       remove_result result = new remove_result();
       result.read(iprot_);
       iprot_.readMessageEnd();
-      if (result.isSetSuccess()) {
-        return result.success;
-      }
       if (result.ire != null) {
         throw result.ire;
       }
-      throw new TApplicationException(TApplicationException.MISSING_RESULT, "remove failed: unknown result");
+      if (result.ue != null) {
+        throw result.ue;
+      }
+      return;
     }
 
     public List<column_t> get_columns_since(String tablename, String key, String columnFamily_column, long timeStamp) throws InvalidRequestException, NotFoundException, TException
@@ -569,38 +531,24 @@ public superColumn_t recv_get_superColumn() throws InvalidRequestException, NotF
       throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_superColumn failed: unknown result");
     }
 
-    public void batch_insert_superColumn(batch_mutation_super_t batchMutationSuper) throws TException
+    public void batch_insert_superColumn(batch_mutation_super_t batchMutationSuper, boolean block) throws InvalidRequestException, UnavailableException, TException
     {
-      send_batch_insert_superColumn(batchMutationSuper);
+      send_batch_insert_superColumn(batchMutationSuper, block);
+      recv_batch_insert_superColumn();
     }
 
-    public void send_batch_insert_superColumn(batch_mutation_super_t batchMutationSuper) throws TException
+    public void send_batch_insert_superColumn(batch_mutation_super_t batchMutationSuper, boolean block) throws TException
     {
       oprot_.writeMessageBegin(new TMessage("batch_insert_superColumn", TMessageType.CALL, seqid_));
       batch_insert_superColumn_args args = new batch_insert_superColumn_args();
       args.batchMutationSuper = batchMutationSuper;
+      args.block = block;
       args.write(oprot_);
       oprot_.writeMessageEnd();
       oprot_.getTransport().flush();
     }
 
-    public boolean batch_insert_superColumn_blocking(batch_mutation_super_t batchMutationSuper) throws InvalidRequestException, TException
-    {
-      send_batch_insert_superColumn_blocking(batchMutationSuper);
-      return recv_batch_insert_superColumn_blocking();
-    }
-
-    public void send_batch_insert_superColumn_blocking(batch_mutation_super_t batchMutationSuper) throws TException
-    {
-      oprot_.writeMessageBegin(new TMessage("batch_insert_superColumn_blocking", TMessageType.CALL, seqid_));
-      batch_insert_superColumn_blocking_args args = new batch_insert_superColumn_blocking_args();
-      args.batchMutationSuper = batchMutationSuper;
-      args.write(oprot_);
-      oprot_.writeMessageEnd();
-      oprot_.getTransport().flush();
-    }
-
-    public boolean recv_batch_insert_superColumn_blocking() throws InvalidRequestException, TException
+    public void recv_batch_insert_superColumn() throws InvalidRequestException, UnavailableException, TException
     {
       TMessage msg = iprot_.readMessageBegin();
       if (msg.type == TMessageType.EXCEPTION) {
@@ -608,16 +556,16 @@ public boolean recv_batch_insert_superColumn_blocking() throws InvalidRequestExc
         iprot_.readMessageEnd();
         throw x;
       }
-      batch_insert_superColumn_blocking_result result = new batch_insert_superColumn_blocking_result();
+      batch_insert_superColumn_result result = new batch_insert_superColumn_result();
       result.read(iprot_);
       iprot_.readMessageEnd();
-      if (result.isSetSuccess()) {
-        return result.success;
-      }
       if (result.ire != null) {
         throw result.ire;
       }
-      throw new TApplicationException(TApplicationException.MISSING_RESULT, "batch_insert_superColumn_blocking failed: unknown result");
+      if (result.ue != null) {
+        throw result.ue;
+      }
+      return;
     }
 
     public void touch(String key, boolean fData) throws TException
@@ -819,15 +767,12 @@ public Processor(Iface iface)
       processMap_.put("get_column_count", new get_column_count());
       processMap_.put("insert", new insert());
       processMap_.put("batch_insert", new batch_insert());
-      processMap_.put("insert_blocking", new insert_blocking());
-      processMap_.put("batch_insert_blocking", new batch_insert_blocking());
       processMap_.put("remove", new remove());
       processMap_.put("get_columns_since", new get_columns_since());
       processMap_.put("get_slice_super", new get_slice_super());
       processMap_.put("get_slice_super_by_names", new get_slice_super_by_names());
       processMap_.put("get_superColumn", new get_superColumn());
       processMap_.put("batch_insert_superColumn", new batch_insert_superColumn());
-      processMap_.put("batch_insert_superColumn_blocking", new batch_insert_superColumn_blocking());
       processMap_.put("touch", new touch());
       processMap_.put("get_key_range", new get_key_range());
       processMap_.put("getStringProperty", new getStringProperty());
@@ -986,44 +931,23 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
         insert_args args = new insert_args();
         args.read(iprot);
         iprot.readMessageEnd();
-        iface_.insert(args.tablename, args.key, args.columnFamily_column, args.cellData, args.timestamp);
-        return;
-      }
-    }
-
-    private class batch_insert implements ProcessFunction {
-      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
-      {
-        batch_insert_args args = new batch_insert_args();
-        args.read(iprot);
-        iprot.readMessageEnd();
-        iface_.batch_insert(args.batchMutation);
-        return;
-      }
-    }
-
-    private class insert_blocking implements ProcessFunction {
-      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
-      {
-        insert_blocking_args args = new insert_blocking_args();
-        args.read(iprot);
-        iprot.readMessageEnd();
-        insert_blocking_result result = new insert_blocking_result();
+        insert_result result = new insert_result();
         try {
-          result.success = iface_.insert_blocking(args.tablename, args.key, args.columnFamily_column, args.cellData, args.timestamp);
-          result.__isset.success = true;
+          iface_.insert(args.tablename, args.key, args.columnFamily_column, args.cellData, args.timestamp, args.block);
         } catch (InvalidRequestException ire) {
           result.ire = ire;
+        } catch (UnavailableException ue) {
+          result.ue = ue;
         } catch (Throwable th) {
-          LOGGER.error("Internal error processing insert_blocking", th);
-          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing insert_blocking");
-          oprot.writeMessageBegin(new TMessage("insert_blocking", TMessageType.EXCEPTION, seqid));
+          LOGGER.error("Internal error processing insert", th);
+          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing insert");
+          oprot.writeMessageBegin(new TMessage("insert", TMessageType.EXCEPTION, seqid));
           x.write(oprot);
           oprot.writeMessageEnd();
           oprot.getTransport().flush();
           return;
         }
-        oprot.writeMessageBegin(new TMessage("insert_blocking", TMessageType.REPLY, seqid));
+        oprot.writeMessageBegin(new TMessage("insert", TMessageType.REPLY, seqid));
         result.write(oprot);
         oprot.writeMessageEnd();
         oprot.getTransport().flush();
@@ -1031,28 +955,29 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
 
     }
 
-    private class batch_insert_blocking implements ProcessFunction {
+    private class batch_insert implements ProcessFunction {
       public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
       {
-        batch_insert_blocking_args args = new batch_insert_blocking_args();
+        batch_insert_args args = new batch_insert_args();
         args.read(iprot);
         iprot.readMessageEnd();
-        batch_insert_blocking_result result = new batch_insert_blocking_result();
+        batch_insert_result result = new batch_insert_result();
         try {
-          result.success = iface_.batch_insert_blocking(args.batchMutation);
-          result.__isset.success = true;
+          iface_.batch_insert(args.batchMutation, args.block);
         } catch (InvalidRequestException ire) {
           result.ire = ire;
+        } catch (UnavailableException ue) {
+          result.ue = ue;
         } catch (Throwable th) {
-          LOGGER.error("Internal error processing batch_insert_blocking", th);
-          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing batch_insert_blocking");
-          oprot.writeMessageBegin(new TMessage("batch_insert_blocking", TMessageType.EXCEPTION, seqid));
+          LOGGER.error("Internal error processing batch_insert", th);
+          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing batch_insert");
+          oprot.writeMessageBegin(new TMessage("batch_insert", TMessageType.EXCEPTION, seqid));
           x.write(oprot);
           oprot.writeMessageEnd();
           oprot.getTransport().flush();
           return;
         }
-        oprot.writeMessageBegin(new TMessage("batch_insert_blocking", TMessageType.REPLY, seqid));
+        oprot.writeMessageBegin(new TMessage("batch_insert", TMessageType.REPLY, seqid));
         result.write(oprot);
         oprot.writeMessageEnd();
         oprot.getTransport().flush();
@@ -1068,10 +993,11 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
         iprot.readMessageEnd();
         remove_result result = new remove_result();
         try {
-          result.success = iface_.remove(args.tablename, args.key, args.columnFamily_column, args.timestamp, args.block);
-          result.__isset.success = true;
+          iface_.remove(args.tablename, args.key, args.columnFamily_column, args.timestamp, args.block);
         } catch (InvalidRequestException ire) {
           result.ire = ire;
+        } catch (UnavailableException ue) {
+          result.ue = ue;
         } catch (Throwable th) {
           LOGGER.error("Internal error processing remove", th);
           TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing remove");
@@ -1211,33 +1137,23 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
         batch_insert_superColumn_args args = new batch_insert_superColumn_args();
         args.read(iprot);
         iprot.readMessageEnd();
-        iface_.batch_insert_superColumn(args.batchMutationSuper);
-        return;
-      }
-    }
-
-    private class batch_insert_superColumn_blocking implements ProcessFunction {
-      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
-      {
-        batch_insert_superColumn_blocking_args args = new batch_insert_superColumn_blocking_args();
-        args.read(iprot);
-        iprot.readMessageEnd();
-        batch_insert_superColumn_blocking_result result = new batch_insert_superColumn_blocking_result();
+        batch_insert_superColumn_result result = new batch_insert_superColumn_result();
         try {
-          result.success = iface_.batch_insert_superColumn_blocking(args.batchMutationSuper);
-          result.__isset.success = true;
+          iface_.batch_insert_superColumn(args.batchMutationSuper, args.block);
         } catch (InvalidRequestException ire) {
           result.ire = ire;
+        } catch (UnavailableException ue) {
+          result.ue = ue;
         } catch (Throwable th) {
-          LOGGER.error("Internal error processing batch_insert_superColumn_blocking", th);
-          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing batch_insert_superColumn_blocking");
-          oprot.writeMessageBegin(new TMessage("batch_insert_superColumn_blocking", TMessageType.EXCEPTION, seqid));
+          LOGGER.error("Internal error processing batch_insert_superColumn", th);
+          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing batch_insert_superColumn");
+          oprot.writeMessageBegin(new TMessage("batch_insert_superColumn", TMessageType.EXCEPTION, seqid));
           x.write(oprot);
           oprot.writeMessageEnd();
           oprot.getTransport().flush();
           return;
         }
-        oprot.writeMessageBegin(new TMessage("batch_insert_superColumn_blocking", TMessageType.REPLY, seqid));
+        oprot.writeMessageBegin(new TMessage("batch_insert_superColumn", TMessageType.REPLY, seqid));
         result.write(oprot);
         oprot.writeMessageEnd();
         oprot.getTransport().flush();
@@ -4397,6 +4313,7 @@ public void validate() throws TException {
     private static final TField COLUMN_FAMILY_COLUMN_FIELD_DESC = new TField("columnFamily_column", TType.STRING, (short)3);
     private static final TField CELL_DATA_FIELD_DESC = new TField("cellData", TType.STRING, (short)4);
     private static final TField TIMESTAMP_FIELD_DESC = new TField("timestamp", TType.I64, (short)5);
+    private static final TField BLOCK_FIELD_DESC = new TField("block", TType.BOOL, (short)6);
 
     public String tablename;
     public static final int TABLENAME = 1;
@@ -4408,10 +4325,13 @@ public void validate() throws TException {
     public static final int CELLDATA = 4;
     public long timestamp;
     public static final int TIMESTAMP = 5;
+    public boolean block;
+    public static final int BLOCK = 6;
 
     private final Isset __isset = new Isset();
     private static final class Isset implements java.io.Serializable {
       public boolean timestamp = false;
+      public boolean block = false;
     }
 
     public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
@@ -4425,6 +4345,8 @@ public void validate() throws TException {
           new FieldValueMetaData(TType.STRING)));
       put(TIMESTAMP, new FieldMetaData("timestamp", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.I64)));
+      put(BLOCK, new FieldMetaData("block", TFieldRequirementType.DEFAULT, 
+          new FieldValueMetaData(TType.BOOL)));
     }});
 
     static {
@@ -4432,6 +4354,8 @@ public void validate() throws TException {
     }
 
     public insert_args() {
+      this.block = false;
+
     }
 
     public insert_args(
@@ -4439,7 +4363,8 @@ public insert_args(
       String key,
       String columnFamily_column,
       byte[] cellData,
-      long timestamp)
+      long timestamp,
+      boolean block)
     {
       this();
       this.tablename = tablename;
@@ -4448,6 +4373,8 @@ public insert_args(
       this.cellData = cellData;
       this.timestamp = timestamp;
       this.__isset.timestamp = true;
+      this.block = block;
+      this.__isset.block = true;
     }
 
     /**
@@ -4469,6 +4396,8 @@ public insert_args(insert_args other) {
       }
       __isset.timestamp = other.__isset.timestamp;
       this.timestamp = other.timestamp;
+      __isset.block = other.__isset.block;
+      this.block = other.block;
     }
 
     @Override
@@ -4590,6 +4519,28 @@ public void setTimestampIsSet(boolean value) {
       this.__isset.timestamp = value;
     }
 
+    public boolean isBlock() {
+      return this.block;
+    }
+
+    public void setBlock(boolean block) {
+      this.block = block;
+      this.__isset.block = true;
+    }
+
+    public void unsetBlock() {
+      this.__isset.block = false;
+    }
+
+    // Returns true if field block is set (has been asigned a value) and false otherwise
+    public boolean isSetBlock() {
+      return this.__isset.block;
+    }
+
+    public void setBlockIsSet(boolean value) {
+      this.__isset.block = value;
+    }
+
     public void setFieldValue(int fieldID, Object value) {
       switch (fieldID) {
       case TABLENAME:
@@ -4632,6 +4583,14 @@ public void setFieldValue(int fieldID, Object value) {
         }
         break;
 
+      case BLOCK:
+        if (value == null) {
+          unsetBlock();
+        } else {
+          setBlock((Boolean)value);
+        }
+        break;
+
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
       }
@@ -4654,6 +4613,9 @@ public Object getFieldValue(int fieldID) {
       case TIMESTAMP:
         return new Long(getTimestamp());
 
+      case BLOCK:
+        return new Boolean(isBlock());
+
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
       }
@@ -4672,6 +4634,8 @@ public boolean isSet(int fieldID) {
         return isSetCellData();
       case TIMESTAMP:
         return isSetTimestamp();
+      case BLOCK:
+        return isSetBlock();
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
       }
@@ -4735,6 +4699,15 @@ public boolean equals(insert_args that) {
           return false;
       }
 
+      boolean this_present_block = true;
+      boolean that_present_block = true;
+      if (this_present_block || that_present_block) {
+        if (!(this_present_block && that_present_block))
+          return false;
+        if (this.block != that.block)
+          return false;
+      }
+
       return true;
     }
 
@@ -4790,6 +4763,14 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+          case BLOCK:
+            if (field.type == TType.BOOL) {
+              this.block = iprot.readBool();
+              this.__isset.block = true;
+            } else { 
+              TProtocolUtil.skip(iprot, field.type);
+            }
+            break;
           default:
             TProtocolUtil.skip(iprot, field.type);
             break;
@@ -4830,6 +4811,9 @@ public void write(TProtocol oprot) throws TException {
       oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
       oprot.writeI64(this.timestamp);
       oprot.writeFieldEnd();
+      oprot.writeFieldBegin(BLOCK_FIELD_DESC);
+      oprot.writeBool(this.block);
+      oprot.writeFieldEnd();
       oprot.writeFieldStop();
       oprot.writeStructEnd();
     }
@@ -4879,6 +4863,10 @@ public String toString() {
       sb.append("timestamp:");
       sb.append(this.timestamp);
       first = false;
+      if (!first) sb.append(", ");
+      sb.append("block:");
+      sb.append(this.block);
+      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -4890,80 +4878,121 @@ public void validate() throws TException {
 
   }
 
-  public static class batch_insert_args implements TBase, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("batch_insert_args");
-    private static final TField BATCH_MUTATION_FIELD_DESC = new TField("batchMutation", TType.STRUCT, (short)-1);
+  public static class insert_result implements TBase, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("insert_result");
+    private static final TField IRE_FIELD_DESC = new TField("ire", TType.STRUCT, (short)1);
+    private static final TField UE_FIELD_DESC = new TField("ue", TType.STRUCT, (short)2);
 
-    public batch_mutation_t batchMutation;
-    public static final int BATCHMUTATION = -1;
+    public InvalidRequestException ire;
+    public static final int IRE = 1;
+    public UnavailableException ue;
+    public static final int UE = 2;
 
     private final Isset __isset = new Isset();
     private static final class Isset implements java.io.Serializable {
     }
 
     public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
-      put(BATCHMUTATION, new FieldMetaData("batchMutation", TFieldRequirementType.DEFAULT, 
-          new StructMetaData(TType.STRUCT, batch_mutation_t.class)));
+      put(IRE, new FieldMetaData("ire", TFieldRequirementType.DEFAULT, 
+          new FieldValueMetaData(TType.STRUCT)));
+      put(UE, new FieldMetaData("ue", TFieldRequirementType.DEFAULT, 
+          new FieldValueMetaData(TType.STRUCT)));
     }});
 
     static {
-      FieldMetaData.addStructMetaDataMap(batch_insert_args.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(insert_result.class, metaDataMap);
     }
 
-    public batch_insert_args() {
+    public insert_result() {
     }
 
-    public batch_insert_args(
-      batch_mutation_t batchMutation)
+    public insert_result(
+      InvalidRequestException ire,
+      UnavailableException ue)
     {
       this();
-      this.batchMutation = batchMutation;
+      this.ire = ire;
+      this.ue = ue;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public batch_insert_args(batch_insert_args other) {
-      if (other.isSetBatchMutation()) {
-        this.batchMutation = new batch_mutation_t(other.batchMutation);
+    public insert_result(insert_result other) {
+      if (other.isSetIre()) {
+        this.ire = new InvalidRequestException(other.ire);
+      }
+      if (other.isSetUe()) {
+        this.ue = new UnavailableException(other.ue);
       }
     }
 
     @Override
-    public batch_insert_args clone() {
-      return new batch_insert_args(this);
+    public insert_result clone() {
+      return new insert_result(this);
     }
 
-    public batch_mutation_t getBatchMutation() {
-      return this.batchMutation;
+    public InvalidRequestException getIre() {
+      return this.ire;
     }
 
-    public void setBatchMutation(batch_mutation_t batchMutation) {
-      this.batchMutation = batchMutation;
+    public void setIre(InvalidRequestException ire) {
+      this.ire = ire;
     }
 
-    public void unsetBatchMutation() {
-      this.batchMutation = null;
+    public void unsetIre() {
+      this.ire = null;
     }
 
-    // Returns true if field batchMutation is set (has been asigned a value) and false otherwise
-    public boolean isSetBatchMutation() {
-      return this.batchMutation != null;
+    // Returns true if field ire is set (has been asigned a value) and false otherwise
+    public boolean isSetIre() {
+      return this.ire != null;
     }
 
-    public void setBatchMutationIsSet(boolean value) {
+    public void setIreIsSet(boolean value) {
       if (!value) {
-        this.batchMutation = null;
+        this.ire = null;
+      }
+    }
+
+    public UnavailableException getUe() {
+      return this.ue;
+    }
+
+    public void setUe(UnavailableException ue) {
+      this.ue = ue;
+    }
+
+    public void unsetUe() {
+      this.ue = null;
+    }
+
+    // Returns true if field ue is set (has been asigned a value) and false otherwise
+    public boolean isSetUe() {
+      return this.ue != null;
+    }
+
+    public void setUeIsSet(boolean value) {
+      if (!value) {
+        this.ue = null;
       }
     }
 
     public void setFieldValue(int fieldID, Object value) {
       switch (fieldID) {
-      case BATCHMUTATION:
+      case IRE:
         if (value == null) {
-          unsetBatchMutation();
+          unsetIre();
         } else {
-          setBatchMutation((batch_mutation_t)value);
+          setIre((InvalidRequestException)value);
+        }
+        break;
+
+      case UE:
+        if (value == null) {
+          unsetUe();
+        } else {
+          setUe((UnavailableException)value);
         }
         break;
 
@@ -4974,8 +5003,11 @@ public void setFieldValue(int fieldID, Object value) {
 
     public Object getFieldValue(int fieldID) {
       switch (fieldID) {
-      case BATCHMUTATION:
-        return getBatchMutation();
+      case IRE:
+        return getIre();
+
+      case UE:
+        return getUe();
 
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
@@ -4985,8 +5017,10 @@ public Object getFieldValue(int fieldID) {
     // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
     public boolean isSet(int fieldID) {
       switch (fieldID) {
-      case BATCHMUTATION:
-        return isSetBatchMutation();
+      case IRE:
+        return isSetIre();
+      case UE:
+        return isSetUe();
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
       }
@@ -4996,776 +5030,30 @@ public boolean isSet(int fieldID) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof batch_insert_args)
-        return this.equals((batch_insert_args)that);
+      if (that instanceof insert_result)
+        return this.equals((insert_result)that);
       return false;
     }
 
-    public boolean equals(batch_insert_args that) {
+    public boolean equals(insert_result that) {
       if (that == null)
         return false;
 
-      boolean this_present_batchMutation = true && this.isSetBatchMutation();
-      boolean that_present_batchMutation = true && that.isSetBatchMutation();
-      if (this_present_batchMutation || that_present_batchMutation) {
-        if (!(this_present_batchMutation && that_present_batchMutation))
+      boolean this_present_ire = true && this.isSetIre();
+      boolean that_present_ire = true && that.isSetIre();
+      if (this_present_ire || that_present_ire) {
+        if (!(this_present_ire && that_present_ire))
           return false;
-        if (!this.batchMutation.equals(that.batchMutation))
+        if (!this.ire.equals(that.ire))
           return false;
       }
 
-      return true;
-    }
-
-    @Override
-    public int hashCode() {
-      return 0;
-    }
-
-    public void read(TProtocol iprot) throws TException {
-      TField field;
-      iprot.readStructBegin();
-      while (true)
-      {
-        field = iprot.readFieldBegin();
-        if (field.type == TType.STOP) { 
-          break;
-        }
-        switch (field.id)
-        {
-          case BATCHMUTATION:
-            if (field.type == TType.STRUCT) {
-              this.batchMutation = new batch_mutation_t();
-              this.batchMutation.read(iprot);
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
-          default:
-            TProtocolUtil.skip(iprot, field.type);
-            break;
-        }
-        iprot.readFieldEnd();
-      }
-      iprot.readStructEnd();
-
-
-      // check for required fields of primitive type, which can't be checked in the validate method
-      validate();
-    }
-
-    public void write(TProtocol oprot) throws TException {
-      validate();
-
-      oprot.writeStructBegin(STRUCT_DESC);
-      if (this.batchMutation != null) {
-        oprot.writeFieldBegin(BATCH_MUTATION_FIELD_DESC);
-        this.batchMutation.write(oprot);
-        oprot.writeFieldEnd();
-      }
-      oprot.writeFieldStop();
-      oprot.writeStructEnd();
-    }
-
-    @Override
-    public String toString() {
-      StringBuilder sb = new StringBuilder("batch_insert_args(");
-      boolean first = true;
-
-      sb.append("batchMutation:");
-      if (this.batchMutation == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.batchMutation);
-      }
-      first = false;
-      sb.append(")");
-      return sb.toString();
-    }
-
-    public void validate() throws TException {
-      // check for required fields
-      // check that fields of type enum have valid values
-    }
-
-  }
-
-  public static class insert_blocking_args implements TBase, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("insert_blocking_args");
-    private static final TField TABLENAME_FIELD_DESC = new TField("tablename", TType.STRING, (short)1);
-    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)2);
-    private static final TField COLUMN_FAMILY_COLUMN_FIELD_DESC = new TField("columnFamily_column", TType.STRING, (short)3);
-    private static final TField CELL_DATA_FIELD_DESC = new TField("cellData", TType.STRING, (short)4);
-    private static final TField TIMESTAMP_FIELD_DESC = new TField("timestamp", TType.I64, (short)5);
-
-    public String tablename;
-    public static final int TABLENAME = 1;
-    public String key;
-    public static final int KEY = 2;
-    public String columnFamily_column;
-    public static final int COLUMNFAMILY_COLUMN = 3;
-    public byte[] cellData;
-    public static final int CELLDATA = 4;
-    public long timestamp;
-    public static final int TIMESTAMP = 5;
-
-    private final Isset __isset = new Isset();
-    private static final class Isset implements java.io.Serializable {
-      public boolean timestamp = false;
-    }
-
-    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
-      put(TABLENAME, new FieldMetaData("tablename", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.STRING)));
-      put(KEY, new FieldMetaData("key", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.STRING)));
-      put(COLUMNFAMILY_COLUMN, new FieldMetaData("columnFamily_column", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.STRING)));
-      put(CELLDATA, new FieldMetaData("cellData", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.STRING)));
-      put(TIMESTAMP, new FieldMetaData("timestamp", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.I64)));
-    }});
-
-    static {
-      FieldMetaData.addStructMetaDataMap(insert_blocking_args.class, metaDataMap);
-    }
-
-    public insert_blocking_args() {
-    }
-
-    public insert_blocking_args(
-      String tablename,
-      String key,
-      String columnFamily_column,
-      byte[] cellData,
-      long timestamp)
-    {
-      this();
-      this.tablename = tablename;
-      this.key = key;
-      this.columnFamily_column = columnFamily_column;
-      this.cellData = cellData;
-      this.timestamp = timestamp;
-      this.__isset.timestamp = true;
-    }
-
-    /**
-     * Performs a deep copy on <i>other</i>.
-     */
-    public insert_blocking_args(insert_blocking_args other) {
-      if (other.isSetTablename()) {
-        this.tablename = other.tablename;
-      }
-      if (other.isSetKey()) {
-        this.key = other.key;
-      }
-      if (other.isSetColumnFamily_column()) {
-        this.columnFamily_column = other.columnFamily_column;
-      }
-      if (other.isSetCellData()) {
-        this.cellData = new byte[other.cellData.length];
-        System.arraycopy(other.cellData, 0, cellData, 0, other.cellData.length);
-      }
-      __isset.timestamp = other.__isset.timestamp;
-      this.timestamp = other.timestamp;
-    }
-
-    @Override
-    public insert_blocking_args clone() {
-      return new insert_blocking_args(this);
-    }
-
-    public String getTablename() {
-      return this.tablename;
-    }
-
-    public void setTablename(String tablename) {
-      this.tablename = tablename;
-    }
-
-    public void unsetTablename() {
-      this.tablename = null;
-    }
-
-    // Returns true if field tablename is set (has been asigned a value) and false otherwise
-    public boolean isSetTablename() {
-      return this.tablename != null;
-    }
-
-    public void setTablenameIsSet(boolean value) {
-      if (!value) {
-        this.tablename = null;
-      }
-    }
-
-    public String getKey() {
-      return this.key;
-    }
-
-    public void setKey(String key) {
-      this.key = key;
-    }
-
-    public void unsetKey() {
-      this.key = null;
-    }
-
-    // Returns true if field key is set (has been asigned a value) and false otherwise
-    public boolean isSetKey() {
-      return this.key != null;
-    }
-
-    public void setKeyIsSet(boolean value) {
-      if (!value) {
-        this.key = null;
-      }
-    }
-
-    public String getColumnFamily_column() {
-      return this.columnFamily_column;
-    }
-
-    public void setColumnFamily_column(String columnFamily_column) {
-      this.columnFamily_column = columnFamily_column;
-    }
-
-    public void unsetColumnFamily_column() {
-      this.columnFamily_column = null;
-    }
-
-    // Returns true if field columnFamily_column is set (has been asigned a value) and false otherwise
-    public boolean isSetColumnFamily_column() {
-      return this.columnFamily_column != null;
-    }
-
-    public void setColumnFamily_columnIsSet(boolean value) {
-      if (!value) {
-        this.columnFamily_column = null;
-      }
-    }
-
-    public byte[] getCellData() {
-      return this.cellData;
-    }
-
-    public void setCellData(byte[] cellData) {
-      this.cellData = cellData;
-    }
-
-    public void unsetCellData() {
-      this.cellData = null;
-    }
-
-    // Returns true if field cellData is set (has been asigned a value) and false otherwise
-    public boolean isSetCellData() {
-      return this.cellData != null;
-    }
-
-    public void setCellDataIsSet(boolean value) {
-      if (!value) {
-        this.cellData = null;
-      }
-    }
-
-    public long getTimestamp() {
-      return this.timestamp;
-    }
-
-    public void setTimestamp(long timestamp) {
-      this.timestamp = timestamp;
-      this.__isset.timestamp = true;
-    }
-
-    public void unsetTimestamp() {
-      this.__isset.timestamp = false;
-    }
-
-    // Returns true if field timestamp is set (has been asigned a value) and false otherwise
-    public boolean isSetTimestamp() {
-      return this.__isset.timestamp;
-    }
-
-    public void setTimestampIsSet(boolean value) {
-      this.__isset.timestamp = value;
-    }
-
-    public void setFieldValue(int fieldID, Object value) {
-      switch (fieldID) {
-      case TABLENAME:
-        if (value == null) {
-          unsetTablename();
-        } else {
-          setTablename((String)value);
-        }
-        break;
-
-      case KEY:
-        if (value == null) {
-          unsetKey();
-        } else {
-          setKey((String)value);
-        }
-        break;
-
-      case COLUMNFAMILY_COLUMN:
-        if (value == null) {
-          unsetColumnFamily_column();
-        } else {
-          setColumnFamily_column((String)value);
-        }
-        break;
-
-      case CELLDATA:
-        if (value == null) {
-          unsetCellData();
-        } else {
-          setCellData((byte[])value);
-        }
-        break;
-
-      case TIMESTAMP:
-        if (value == null) {
-          unsetTimestamp();
-        } else {
-          setTimestamp((Long)value);
-        }
-        break;
-
-      default:
-        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
-      }
-    }
-
-    public Object getFieldValue(int fieldID) {
-      switch (fieldID) {
-      case TABLENAME:
-        return getTablename();
-
-      case KEY:
-        return getKey();
-
-      case COLUMNFAMILY_COLUMN:
-        return getColumnFamily_column();
-
-      case CELLDATA:
-        return getCellData();
-
-      case TIMESTAMP:
-        return new Long(getTimestamp());
-
-      default:
-        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
-      }
-    }
-
-    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
-    public boolean isSet(int fieldID) {
-      switch (fieldID) {
-      case TABLENAME:
-        return isSetTablename();
-      case KEY:
-        return isSetKey();
-      case COLUMNFAMILY_COLUMN:
-        return isSetColumnFamily_column();
-      case CELLDATA:
-        return isSetCellData();
-      case TIMESTAMP:
-        return isSetTimestamp();
-      default:
-        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
-      }
-    }
-
-    @Override
-    public boolean equals(Object that) {
-      if (that == null)
-        return false;
-      if (that instanceof insert_blocking_args)
-        return this.equals((insert_blocking_args)that);
-      return false;
-    }
-
-    public boolean equals(insert_blocking_args that) {
-      if (that == null)
-        return false;
-
-      boolean this_present_tablename = true && this.isSetTablename();
-      boolean that_present_tablename = true && that.isSetTablename();
-      if (this_present_tablename || that_present_tablename) {
-        if (!(this_present_tablename && that_present_tablename))
-          return false;
-        if (!this.tablename.equals(that.tablename))
-          return false;
-      }
-
-      boolean this_present_key = true && this.isSetKey();
-      boolean that_present_key = true && that.isSetKey();
-      if (this_present_key || that_present_key) {
-        if (!(this_present_key && that_present_key))
-          return false;
-        if (!this.key.equals(that.key))
-          return false;
-      }
-
-      boolean this_present_columnFamily_column = true && this.isSetColumnFamily_column();
-      boolean that_present_columnFamily_column = true && that.isSetColumnFamily_column();
-      if (this_present_columnFamily_column || that_present_columnFamily_column) {
-        if (!(this_present_columnFamily_column && that_present_columnFamily_column))
-          return false;
-        if (!this.columnFamily_column.equals(that.columnFamily_column))
-          return false;
-      }
-
-      boolean this_present_cellData = true && this.isSetCellData();
-      boolean that_present_cellData = true && that.isSetCellData();
-      if (this_present_cellData || that_present_cellData) {
-        if (!(this_present_cellData && that_present_cellData))
-          return false;
-        if (!java.util.Arrays.equals(this.cellData, that.cellData))
-          return false;
-      }
-
-      boolean this_present_timestamp = true;
-      boolean that_present_timestamp = true;
-      if (this_present_timestamp || that_present_timestamp) {
-        if (!(this_present_timestamp && that_present_timestamp))
-          return false;
-        if (this.timestamp != that.timestamp)
-          return false;
-      }
-
-      return true;
-    }
-
-    @Override
-    public int hashCode() {
-      return 0;
-    }
-
-    public void read(TProtocol iprot) throws TException {
-      TField field;
-      iprot.readStructBegin();
-      while (true)
-      {
-        field = iprot.readFieldBegin();
-        if (field.type == TType.STOP) { 
-          break;
-        }
-        switch (field.id)
-        {
-          case TABLENAME:
-            if (field.type == TType.STRING) {
-              this.tablename = iprot.readString();
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
-          case KEY:
-            if (field.type == TType.STRING) {
-              this.key = iprot.readString();
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
-          case COLUMNFAMILY_COLUMN:
-            if (field.type == TType.STRING) {
-              this.columnFamily_column = iprot.readString();
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
-          case CELLDATA:
-            if (field.type == TType.STRING) {
-              this.cellData = iprot.readBinary();
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
-          case TIMESTAMP:
-            if (field.type == TType.I64) {
-              this.timestamp = iprot.readI64();
-              this.__isset.timestamp = true;
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
-          default:
-            TProtocolUtil.skip(iprot, field.type);
-            break;
-        }
-        iprot.readFieldEnd();
-      }
-      iprot.readStructEnd();
-
-
-      // check for required fields of primitive type, which can't be checked in the validate method
-      validate();
-    }
-
-    public void write(TProtocol oprot) throws TException {
-      validate();
-
-      oprot.writeStructBegin(STRUCT_DESC);
-      if (this.tablename != null) {
-        oprot.writeFieldBegin(TABLENAME_FIELD_DESC);
-        oprot.writeString(this.tablename);
-        oprot.writeFieldEnd();
-      }
-      if (this.key != null) {
-        oprot.writeFieldBegin(KEY_FIELD_DESC);
-        oprot.writeString(this.key);
-        oprot.writeFieldEnd();
-      }
-      if (this.columnFamily_column != null) {
-        oprot.writeFieldBegin(COLUMN_FAMILY_COLUMN_FIELD_DESC);
-        oprot.writeString(this.columnFamily_column);
-        oprot.writeFieldEnd();
-      }
-      if (this.cellData != null) {
-        oprot.writeFieldBegin(CELL_DATA_FIELD_DESC);
-        oprot.writeBinary(this.cellData);
-        oprot.writeFieldEnd();
-      }
-      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
-      oprot.writeI64(this.timestamp);
-      oprot.writeFieldEnd();
-      oprot.writeFieldStop();
-      oprot.writeStructEnd();
-    }
-
-    @Override
-    public String toString() {
-      StringBuilder sb = new StringBuilder("insert_blocking_args(");
-      boolean first = true;
-
-      sb.append("tablename:");
-      if (this.tablename == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.tablename);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("key:");
-      if (this.key == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.key);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("columnFamily_column:");
-      if (this.columnFamily_column == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.columnFamily_column);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("cellData:");
-      if (this.cellData == null) {
-        sb.append("null");
-      } else {
-          int __cellData_size = Math.min(this.cellData.length, 128);
-          for (int i = 0; i < __cellData_size; i++) {
-            if (i != 0) sb.append(" ");
-            sb.append(Integer.toHexString(this.cellData[i]).length() > 1 ? Integer.toHexString(this.cellData[i]).substring(Integer.toHexString(this.cellData[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.cellData[i]).toUpperCase());
-          }
-          if (this.cellData.length > 128) sb.append(" ...");
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("timestamp:");
-      sb.append(this.timestamp);
-      first = false;
-      sb.append(")");
-      return sb.toString();
-    }
-
-    public void validate() throws TException {
-      // check for required fields
-      // check that fields of type enum have valid values
-    }
-
-  }
-
-  public static class insert_blocking_result implements TBase, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("insert_blocking_result");
-    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
-    private static final TField IRE_FIELD_DESC = new TField("ire", TType.STRUCT, (short)1);
-
-    public boolean success;
-    public static final int SUCCESS = 0;
-    public InvalidRequestException ire;
-    public static final int IRE = 1;
-
-    private final Isset __isset = new Isset();
-    private static final class Isset implements java.io.Serializable {
-      public boolean success = false;
-    }
-
-    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
-      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.BOOL)));
-      put(IRE, new FieldMetaData("ire", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.STRUCT)));
-    }});
-
-    static {
-      FieldMetaData.addStructMetaDataMap(insert_blocking_result.class, metaDataMap);
-    }
-
-    public insert_blocking_result() {
-    }
-
-    public insert_blocking_result(
-      boolean success,
-      InvalidRequestException ire)
-    {
-      this();
-      this.success = success;
-      this.__isset.success = true;
-      this.ire = ire;
-    }
-
-    /**
-     * Performs a deep copy on <i>other</i>.
-     */
-    public insert_blocking_result(insert_blocking_result other) {
-      __isset.success = other.__isset.success;
-      this.success = other.success;
-      if (other.isSetIre()) {
-        this.ire = new InvalidRequestException(other.ire);
-      }
-    }
-
-    @Override
-    public insert_blocking_result clone() {
-      return new insert_blocking_result(this);
-    }
-
-    public boolean isSuccess() {
-      return this.success;
-    }
-
-    public void setSuccess(boolean success) {
-      this.success = success;
-      this.__isset.success = true;
-    }
-
-    public void unsetSuccess() {
-      this.__isset.success = false;
-    }
-
-    // Returns true if field success is set (has been asigned a value) and false otherwise
-    public boolean isSetSuccess() {
-      return this.__isset.success;
-    }
-
-    public void setSuccessIsSet(boolean value) {
-      this.__isset.success = value;
-    }
-
-    public InvalidRequestException getIre() {
-      return this.ire;
-    }
-
-    public void setIre(InvalidRequestException ire) {
-      this.ire = ire;
-    }
-
-    public void unsetIre() {
-      this.ire = null;
-    }
-
-    // Returns true if field ire is set (has been asigned a value) and false otherwise
-    public boolean isSetIre() {
-      return this.ire != null;
-    }
-
-    public void setIreIsSet(boolean value) {
-      if (!value) {
-        this.ire = null;
-      }
-    }
-
-    public void setFieldValue(int fieldID, Object value) {
-      switch (fieldID) {
-      case SUCCESS:
-        if (value == null) {
-          unsetSuccess();
-        } else {
-          setSuccess((Boolean)value);
-        }
-        break;
-
-      case IRE:
-        if (value == null) {
-          unsetIre();
-        } else {
-          setIre((InvalidRequestException)value);
-        }
-        break;
-
-      default:
-        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
-      }
-    }
-
-    public Object getFieldValue(int fieldID) {
-      switch (fieldID) {
-      case SUCCESS:
-        return new Boolean(isSuccess());
-
-      case IRE:
-        return getIre();
-
-      default:
-        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
-      }
-    }
-
-    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
-    public boolean isSet(int fieldID) {
-      switch (fieldID) {
-      case SUCCESS:
-        return isSetSuccess();
-      case IRE:
-        return isSetIre();
-      default:
-        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
-      }
-    }
-
-    @Override
-    public boolean equals(Object that) {
-      if (that == null)
-        return false;
-      if (that instanceof insert_blocking_result)
-        return this.equals((insert_blocking_result)that);
-      return false;
-    }
-
-    public boolean equals(insert_blocking_result that) {
-      if (that == null)
-        return false;
-
-      boolean this_present_success = true;
-      boolean that_present_success = true;
-      if (this_present_success || that_present_success) {
-        if (!(this_present_success && that_present_success))
-          return false;
-        if (this.success != that.success)
-          return false;
-      }
-
-      boolean this_present_ire = true && this.isSetIre();
-      boolean that_present_ire = true && that.isSetIre();
-      if (this_present_ire || that_present_ire) {
-        if (!(this_present_ire && that_present_ire))
+      boolean this_present_ue = true && this.isSetUe();
+      boolean that_present_ue = true && that.isSetUe();
+      if (this_present_ue || that_present_ue) {
+        if (!(this_present_ue && that_present_ue))
           return false;
-        if (!this.ire.equals(that.ire))
+        if (!this.ue.equals(that.ue))
           return false;
       }
 
@@ -5788,18 +5076,18 @@ public void read(TProtocol iprot) throws TException {
         }
         switch (field.id)
         {
-          case SUCCESS:
-            if (field.type == TType.BOOL) {
-              this.success = iprot.readBool();
-              this.__isset.success = true;
+          case IRE:
+            if (field.type == TType.STRUCT) {
+              this.ire = new InvalidRequestException();
+              this.ire.read(iprot);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case IRE:
+          case UE:
             if (field.type == TType.STRUCT) {
-              this.ire = new InvalidRequestException();
-              this.ire.read(iprot);
+              this.ue = new UnavailableException();
+              this.ue.read(iprot);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -5820,14 +5108,14 @@ public void read(TProtocol iprot) throws TException {
     public void write(TProtocol oprot) throws TException {
       oprot.writeStructBegin(STRUCT_DESC);
 
-      if (this.isSetSuccess()) {
-        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeBool(this.success);
-        oprot.writeFieldEnd();
-      } else if (this.isSetIre()) {
+      if (this.isSetIre()) {
         oprot.writeFieldBegin(IRE_FIELD_DESC);
         this.ire.write(oprot);
         oprot.writeFieldEnd();
+      } else if (this.isSetUe()) {
+        oprot.writeFieldBegin(UE_FIELD_DESC);
+        this.ue.write(oprot);
+        oprot.writeFieldEnd();
       }
       oprot.writeFieldStop();
       oprot.writeStructEnd();
@@ -5835,13 +5123,9 @@ public void write(TProtocol oprot) throws TException {
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("insert_blocking_result(");
+      StringBuilder sb = new StringBuilder("insert_result(");
       boolean first = true;
 
-      sb.append("success:");
-      sb.append(this.success);
-      first = false;
-      if (!first) sb.append(", ");
       sb.append("ire:");
       if (this.ire == null) {
         sb.append("null");
@@ -5849,6 +5133,14 @@ public String toString() {
         sb.append(this.ire);
       }
       first = false;
+      if (!first) sb.append(", ");
+      sb.append("ue:");
+      if (this.ue == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.ue);
+      }
+      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -5860,48 +5152,61 @@ public void validate() throws TException {
 
   }
 
-  public static class batch_insert_blocking_args implements TBase, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("batch_insert_blocking_args");
-    private static final TField BATCH_MUTATION_FIELD_DESC = new TField("batchMutation", TType.STRUCT, (short)-1);
+  public static class batch_insert_args implements TBase, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("batch_insert_args");
+    private static final TField BATCH_MUTATION_FIELD_DESC = new TField("batchMutation", TType.STRUCT, (short)1);
+    private static final TField BLOCK_FIELD_DESC = new TField("block", TType.BOOL, (short)2);
 
     public batch_mutation_t batchMutation;
-    public static final int BATCHMUTATION = -1;
+    public static final int BATCHMUTATION = 1;
+    public boolean block;
+    public static final int BLOCK = 2;
 
     private final Isset __isset = new Isset();
     private static final class Isset implements java.io.Serializable {
+      public boolean block = false;
     }
 
     public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
       put(BATCHMUTATION, new FieldMetaData("batchMutation", TFieldRequirementType.DEFAULT, 
           new StructMetaData(TType.STRUCT, batch_mutation_t.class)));
+      put(BLOCK, new FieldMetaData("block", TFieldRequirementType.DEFAULT, 
+          new FieldValueMetaData(TType.BOOL)));
     }});
 
     static {
-      FieldMetaData.addStructMetaDataMap(batch_insert_blocking_args.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(batch_insert_args.class, metaDataMap);
     }
 
-    public batch_insert_blocking_args() {
+    public batch_insert_args() {
+      this.block = false;
+
     }
 
-    public batch_insert_blocking_args(
-      batch_mutation_t batchMutation)
+    public batch_insert_args(
+      batch_mutation_t batchMutation,
+      boolean block)
     {
       this();
       this.batchMutation = batchMutation;
+      this.block = block;
+      this.__isset.block = true;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public batch_insert_blocking_args(batch_insert_blocking_args other) {
+    public batch_insert_args(batch_insert_args other) {
       if (other.isSetBatchMutation()) {
         this.batchMutation = new batch_mutation_t(other.batchMutation);
       }
+      __isset.block = other.__isset.block;
+      this.block = other.block;
     }
 
     @Override
-    public batch_insert_blocking_args clone() {
-      return new batch_insert_blocking_args(this);
+    public batch_insert_args clone() {
+      return new batch_insert_args(this);
     }
 
     public batch_mutation_t getBatchMutation() {
@@ -5927,6 +5232,28 @@ public void setBatchMutationIsSet(boolean value) {
       }
     }
 
+    public boolean isBlock() {
+      return this.block;
+    }
+
+    public void setBlock(boolean block) {
+      this.block = block;
+      this.__isset.block = true;
+    }
+
+    public void unsetBlock() {
+      this.__isset.block = false;
+    }
+
+    // Returns true if field block is set (has been asigned a value) and false otherwise
+    public boolean isSetBlock() {
+      return this.__isset.block;
+    }
+
+    public void setBlockIsSet(boolean value) {
+      this.__isset.block = value;
+    }
+
     public void setFieldValue(int fieldID, Object value) {
       switch (fieldID) {
       case BATCHMUTATION:
@@ -5937,6 +5264,14 @@ public void setFieldValue(int fieldID, Object value) {
         }
         break;
 
+      case BLOCK:
+        if (value == null) {
+          unsetBlock();
+        } else {
+          setBlock((Boolean)value);
+        }
+        break;
+
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
       }
@@ -5947,6 +5282,9 @@ public Object getFieldValue(int fieldID) {
       case BATCHMUTATION:
         return getBatchMutation();
 
+      case BLOCK:
+        return new Boolean(isBlock());
+
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
       }
@@ -5957,6 +5295,8 @@ public boolean isSet(int fieldID) {
       switch (fieldID) {
       case BATCHMUTATION:
         return isSetBatchMutation();
+      case BLOCK:
+        return isSetBlock();
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
       }
@@ -5966,12 +5306,12 @@ public boolean isSet(int fieldID) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof batch_insert_blocking_args)
-        return this.equals((batch_insert_blocking_args)that);
+      if (that instanceof batch_insert_args)
+        return this.equals((batch_insert_args)that);
       return false;
     }
 
-    public boolean equals(batch_insert_blocking_args that) {
+    public boolean equals(batch_insert_args that) {
       if (that == null)
         return false;
 
@@ -5984,6 +5324,15 @@ public boolean equals(batch_insert_blocking_args that) {
           return false;
       }
 
+      boolean this_present_block = true;
+      boolean that_present_block = true;
+      if (this_present_block || that_present_block) {
+        if (!(this_present_block && that_present_block))
+          return false;
+        if (this.block != that.block)
+          return false;
+      }
+
       return true;
     }
 
@@ -6011,6 +5360,14 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+          case BLOCK:
+            if (field.type == TType.BOOL) {
+              this.block = iprot.readBool();
+              this.__isset.block = true;
+            } else { 
+              TProtocolUtil.skip(iprot, field.type);
+            }
+            break;
           default:
             TProtocolUtil.skip(iprot, field.type);
             break;
@@ -6033,13 +5390,16 @@ public void write(TProtocol oprot) throws TException {
         this.batchMutation.write(oprot);
         oprot.writeFieldEnd();
       }
+      oprot.writeFieldBegin(BLOCK_FIELD_DESC);
+      oprot.writeBool(this.block);
+      oprot.writeFieldEnd();
       oprot.writeFieldStop();
       oprot.writeStructEnd();
     }
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("batch_insert_blocking_args(");
+      StringBuilder sb = new StringBuilder("batch_insert_args(");
       boolean first = true;
 
       sb.append("batchMutation:");
@@ -6049,6 +5409,10 @@ public String toString() {
         sb.append(this.batchMutation);
       }
       first = false;
+      if (!first) sb.append(", ");
+      sb.append("block:");
+      sb.append(this.block);
+      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -6060,81 +5424,58 @@ public void validate() throws TException {
 
   }
 
-  public static class batch_insert_blocking_result implements TBase, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("batch_insert_blocking_result");
-    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
+  public static class batch_insert_result implements TBase, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("batch_insert_result");
     private static final TField IRE_FIELD_DESC = new TField("ire", TType.STRUCT, (short)1);
+    private static final TField UE_FIELD_DESC = new TField("ue", TType.STRUCT, (short)2);
 
-    public boolean success;
-    public static final int SUCCESS = 0;
     public InvalidRequestException ire;
     public static final int IRE = 1;
+    public UnavailableException ue;
+    public static final int UE = 2;
 
     private final Isset __isset = new Isset();
     private static final class Isset implements java.io.Serializable {
-      public boolean success = false;
     }
 
     public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
-      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.BOOL)));
       put(IRE, new FieldMetaData("ire", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
+      put(UE, new FieldMetaData("ue", TFieldRequirementType.DEFAULT, 
+          new FieldValueMetaData(TType.STRUCT)));
     }});
 
     static {
-      FieldMetaData.addStructMetaDataMap(batch_insert_blocking_result.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(batch_insert_result.class, metaDataMap);
     }
 
-    public batch_insert_blocking_result() {
+    public batch_insert_result() {
     }
 
-    public batch_insert_blocking_result(
-      boolean success,
-      InvalidRequestException ire)
+    public batch_insert_result(
+      InvalidRequestException ire,
+      UnavailableException ue)
     {
       this();
-      this.success = success;
-      this.__isset.success = true;
       this.ire = ire;
+      this.ue = ue;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public batch_insert_blocking_result(batch_insert_blocking_result other) {
-      __isset.success = other.__isset.success;
-      this.success = other.success;
+    public batch_insert_result(batch_insert_result other) {
       if (other.isSetIre()) {
         this.ire = new InvalidRequestException(other.ire);
       }
+      if (other.isSetUe()) {
+        this.ue = new UnavailableException(other.ue);
     }
-
-    @Override
-    public batch_insert_blocking_result clone() {
-      return new batch_insert_blocking_result(this);
-    }
-
-    public boolean isSuccess() {
-      return this.success;
-    }
-
-    public void setSuccess(boolean success) {
-      this.success = success;
-      this.__isset.success = true;
-    }
-
-    public void unsetSuccess() {
-      this.__isset.success = false;
-    }
-
-    // Returns true if field success is set (has been asigned a value) and false otherwise
-    public boolean isSetSuccess() {
-      return this.__isset.success;
     }
 
-    public void setSuccessIsSet(boolean value) {
-      this.__isset.success = value;
+    @Override
+    public batch_insert_result clone() {
+      return new batch_insert_result(this);
     }
 
     public InvalidRequestException getIre() {
@@ -6160,21 +5501,44 @@ public void setIreIsSet(boolean value) {
       }
     }
 
+    public UnavailableException getUe() {
+      return this.ue;
+    }
+
+    public void setUe(UnavailableException ue) {
+      this.ue = ue;
+    }
+
+    public void unsetUe() {
+      this.ue = null;
+    }
+
+    // Returns true if field ue is set (has been asigned a value) and false otherwise
+    public boolean isSetUe() {
+      return this.ue != null;
+    }
+
+    public void setUeIsSet(boolean value) {
+      if (!value) {
+        this.ue = null;
+      }
+    }
+
     public void setFieldValue(int fieldID, Object value) {
       switch (fieldID) {
-      case SUCCESS:
+      case IRE:
         if (value == null) {
-          unsetSuccess();
+          unsetIre();
         } else {
-          setSuccess((Boolean)value);
+          setIre((InvalidRequestException)value);
         }
         break;
 
-      case IRE:
+      case UE:
         if (value == null) {
-          unsetIre();
+          unsetUe();
         } else {
-          setIre((InvalidRequestException)value);
+          setUe((UnavailableException)value);
         }
         break;
 
@@ -6185,12 +5549,12 @@ public void setFieldValue(int fieldID, Object value) {
 
     public Object getFieldValue(int fieldID) {
       switch (fieldID) {
-      case SUCCESS:
-        return new Boolean(isSuccess());
-
       case IRE:
         return getIre();
 
+      case UE:
+        return getUe();
+
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
       }
@@ -6199,10 +5563,10 @@ public Object getFieldValue(int fieldID) {
     // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
     public boolean isSet(int fieldID) {
       switch (fieldID) {
-      case SUCCESS:
-        return isSetSuccess();
       case IRE:
         return isSetIre();
+      case UE:
+        return isSetUe();
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
       }
@@ -6212,24 +5576,15 @@ public boolean isSet(int fieldID) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof batch_insert_blocking_result)
-        return this.equals((batch_insert_blocking_result)that);
+      if (that instanceof batch_insert_result)
+        return this.equals((batch_insert_result)that);
       return false;
     }
 
-    public boolean equals(batch_insert_blocking_result that) {
+    public boolean equals(batch_insert_result that) {
       if (that == null)
         return false;
 
-      boolean this_present_success = true;
-      boolean that_present_success = true;
-      if (this_present_success || that_present_success) {
-        if (!(this_present_success && that_present_success))
-          return false;
-        if (this.success != that.success)
-          return false;
-      }
-
       boolean this_present_ire = true && this.isSetIre();
       boolean that_present_ire = true && that.isSetIre();
       if (this_present_ire || that_present_ire) {
@@ -6239,6 +5594,15 @@ public boolean equals(batch_insert_blocking_result that) {
           return false;
       }
 
+      boolean this_present_ue = true && this.isSetUe();
+      boolean that_present_ue = true && that.isSetUe();
+      if (this_present_ue || that_present_ue) {
+        if (!(this_present_ue && that_present_ue))
+          return false;
+        if (!this.ue.equals(that.ue))
+          return false;
+      }
+
       return true;
     }
 
@@ -6258,18 +5622,18 @@ public void read(TProtocol iprot) throws TException {
         }
         switch (field.id)
         {
-          case SUCCESS:
-            if (field.type == TType.BOOL) {
-              this.success = iprot.readBool();
-              this.__isset.success = true;
+          case IRE:
+            if (field.type == TType.STRUCT) {
+              this.ire = new InvalidRequestException();
+              this.ire.read(iprot);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case IRE:
+          case UE:
             if (field.type == TType.STRUCT) {
-              this.ire = new InvalidRequestException();
-              this.ire.read(iprot);
+              this.ue = new UnavailableException();
+              this.ue.read(iprot);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -6290,14 +5654,14 @@ public void read(TProtocol iprot) throws TException {
     public void write(TProtocol oprot) throws TException {
       oprot.writeStructBegin(STRUCT_DESC);
 
-      if (this.isSetSuccess()) {
-        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeBool(this.success);
-        oprot.writeFieldEnd();
-      } else if (this.isSetIre()) {
+      if (this.isSetIre()) {
         oprot.writeFieldBegin(IRE_FIELD_DESC);
         this.ire.write(oprot);
         oprot.writeFieldEnd();
+      } else if (this.isSetUe()) {
+        oprot.writeFieldBegin(UE_FIELD_DESC);
+        this.ue.write(oprot);
+        oprot.writeFieldEnd();
       }
       oprot.writeFieldStop();
       oprot.writeStructEnd();
@@ -6305,13 +5669,9 @@ public void write(TProtocol oprot) throws TException {
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("batch_insert_blocking_result(");
+      StringBuilder sb = new StringBuilder("batch_insert_result(");
       boolean first = true;
 
-      sb.append("success:");
-      sb.append(this.success);
-      first = false;
-      if (!first) sb.append(", ");
       sb.append("ire:");
       if (this.ire == null) {
         sb.append("null");
@@ -6319,6 +5679,14 @@ public String toString() {
         sb.append(this.ire);
       }
       first = false;
+      if (!first) sb.append(", ");
+      sb.append("ue:");
+      if (this.ue == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.ue);
+      }
+      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -6373,6 +5741,8 @@ public void validate() throws TException {
     }
 
     public remove_args() {
+      this.block = false;
+
     }
 
     public remove_args(
@@ -6821,24 +6191,23 @@ public void validate() throws TException {
 
   public static class remove_result implements TBase, java.io.Serializable, Cloneable   {
     private static final TStruct STRUCT_DESC = new TStruct("remove_result");
-    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
     private static final TField IRE_FIELD_DESC = new TField("ire", TType.STRUCT, (short)1);
+    private static final TField UE_FIELD_DESC = new TField("ue", TType.STRUCT, (short)2);
 
-    public boolean success;
-    public static final int SUCCESS = 0;
     public InvalidRequestException ire;
     public static final int IRE = 1;
+    public UnavailableException ue;
+    public static final int UE = 2;
 
     private final Isset __isset = new Isset();
     private static final class Isset implements java.io.Serializable {
-      public boolean success = false;
     }
 
     public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
-      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.BOOL)));
       put(IRE, new FieldMetaData("ire", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
+      put(UE, new FieldMetaData("ue", TFieldRequirementType.DEFAULT, 
+          new FieldValueMetaData(TType.STRUCT)));
     }});
 
     static {
@@ -6849,24 +6218,24 @@ public remove_result() {
     }
 
     public remove_result(
-      boolean success,
-      InvalidRequestException ire)
+      InvalidRequestException ire,
+      UnavailableException ue)
     {
       this();
-      this.success = success;
-      this.__isset.success = true;
       this.ire = ire;
+      this.ue = ue;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
     public remove_result(remove_result other) {
-      __isset.success = other.__isset.success;
-      this.success = other.success;
       if (other.isSetIre()) {
         this.ire = new InvalidRequestException(other.ire);
       }
+      if (other.isSetUe()) {
+        this.ue = new UnavailableException(other.ue);
+      }
     }
 
     @Override
@@ -6874,28 +6243,6 @@ public remove_result clone() {
       return new remove_result(this);
     }
 
-    public boolean isSuccess() {
-      return this.success;
-    }
-
-    public void setSuccess(boolean success) {
-      this.success = success;
-      this.__isset.success = true;
-    }
-
-    public void unsetSuccess() {
-      this.__isset.success = false;
-    }
-
-    // Returns true if field success is set (has been asigned a value) and false otherwise
-    public boolean isSetSuccess() {
-      return this.__isset.success;
-    }
-
-    public void setSuccessIsSet(boolean value) {
-      this.__isset.success = value;
-    }
-
     public InvalidRequestException getIre() {
       return this.ire;
     }
@@ -6919,21 +6266,44 @@ public void setIreIsSet(boolean value) {
       }
     }
 
+    public UnavailableException getUe() {
+      return this.ue;
+    }
+
+    public void setUe(UnavailableException ue) {
+      this.ue = ue;
+    }
+
+    public void unsetUe() {
+      this.ue = null;
+    }
+
+    // Returns true if field ue is set (has been asigned a value) and false otherwise
+    public boolean isSetUe() {
+      return this.ue != null;
+    }
+
+    public void setUeIsSet(boolean value) {
+      if (!value) {
+        this.ue = null;
+      }
+    }
+
     public void setFieldValue(int fieldID, Object value) {
       switch (fieldID) {
-      case SUCCESS:
+      case IRE:
         if (value == null) {
-          unsetSuccess();
+          unsetIre();
         } else {
-          setSuccess((Boolean)value);
+          setIre((InvalidRequestException)value);
         }
         break;
 
-      case IRE:
+      case UE:
         if (value == null) {
-          unsetIre();
+          unsetUe();
         } else {
-          setIre((InvalidRequestException)value);
+          setUe((UnavailableException)value);
         }
         break;
 
@@ -6944,12 +6314,12 @@ public void setFieldValue(int fieldID, Object value) {
 
     public Object getFieldValue(int fieldID) {
       switch (fieldID) {
-      case SUCCESS:
-        return new Boolean(isSuccess());
-
       case IRE:
         return getIre();
 
+      case UE:
+        return getUe();
+
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
       }
@@ -6958,10 +6328,10 @@ public Object getFieldValue(int fieldID) {
     // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
     public boolean isSet(int fieldID) {
       switch (fieldID) {
-      case SUCCESS:
-        return isSetSuccess();
       case IRE:
         return isSetIre();
+      case UE:
+        return isSetUe();
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
       }
@@ -6980,15 +6350,6 @@ public boolean equals(remove_result that) {
       if (that == null)
         return false;
 
-      boolean this_present_success = true;
-      boolean that_present_success = true;
-      if (this_present_success || that_present_success) {
-        if (!(this_present_success && that_present_success))
-          return false;
-        if (this.success != that.success)
-          return false;
-      }
-
       boolean this_present_ire = true && this.isSetIre();
       boolean that_present_ire = true && that.isSetIre();
       if (this_present_ire || that_present_ire) {
@@ -6998,6 +6359,15 @@ public boolean equals(remove_result that) {
           return false;
       }
 
+      boolean this_present_ue = true && this.isSetUe();
+      boolean that_present_ue = true && that.isSetUe();
+      if (this_present_ue || that_present_ue) {
+        if (!(this_present_ue && that_present_ue))
+          return false;
+        if (!this.ue.equals(that.ue))
+          return false;
+      }
+
       return true;
     }
 
@@ -7017,18 +6387,18 @@ public void read(TProtocol iprot) throws TException {
         }
         switch (field.id)
         {
-          case SUCCESS:
-            if (field.type == TType.BOOL) {
-              this.success = iprot.readBool();
-              this.__isset.success = true;
+          case IRE:
+            if (field.type == TType.STRUCT) {
+              this.ire = new InvalidRequestException();
+              this.ire.read(iprot);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case IRE:
+          case UE:
             if (field.type == TType.STRUCT) {
-              this.ire = new InvalidRequestException();
-              this.ire.read(iprot);
+              this.ue = new UnavailableException();
+              this.ue.read(iprot);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -7049,14 +6419,14 @@ public void read(TProtocol iprot) throws TException {
     public void write(TProtocol oprot) throws TException {
       oprot.writeStructBegin(STRUCT_DESC);
 
-      if (this.isSetSuccess()) {
-        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeBool(this.success);
-        oprot.writeFieldEnd();
-      } else if (this.isSetIre()) {
+      if (this.isSetIre()) {
         oprot.writeFieldBegin(IRE_FIELD_DESC);
         this.ire.write(oprot);
         oprot.writeFieldEnd();
+      } else if (this.isSetUe()) {
+        oprot.writeFieldBegin(UE_FIELD_DESC);
+        this.ue.write(oprot);
+        oprot.writeFieldEnd();
       }
       oprot.writeFieldStop();
       oprot.writeStructEnd();
@@ -7067,10 +6437,6 @@ public String toString() {
       StringBuilder sb = new StringBuilder("remove_result(");
       boolean first = true;
 
-      sb.append("success:");
-      sb.append(this.success);
-      first = false;
-      if (!first) sb.append(", ");
       sb.append("ire:");
       if (this.ire == null) {
         sb.append("null");
@@ -7078,6 +6444,14 @@ public String toString() {
         sb.append(this.ire);
       }
       first = false;
+      if (!first) sb.append(", ");
+      sb.append("ue:");
+      if (this.ue == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.ue);
+      }
+      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -10034,257 +9408,18 @@ public boolean equals(get_superColumn_result that) {
       boolean this_present_ire = true && this.isSetIre();
       boolean that_present_ire = true && that.isSetIre();
       if (this_present_ire || that_present_ire) {
-        if (!(this_present_ire && that_present_ire))
-          return false;
-        if (!this.ire.equals(that.ire))
-          return false;
-      }
-
-      boolean this_present_nfe = true && this.isSetNfe();
-      boolean that_present_nfe = true && that.isSetNfe();
-      if (this_present_nfe || that_present_nfe) {
-        if (!(this_present_nfe && that_present_nfe))
-          return false;
-        if (!this.nfe.equals(that.nfe))
-          return false;
-      }
-
-      return true;
-    }
-
-    @Override
-    public int hashCode() {
-      return 0;
-    }
-
-    public void read(TProtocol iprot) throws TException {
-      TField field;
-      iprot.readStructBegin();
-      while (true)
-      {
-        field = iprot.readFieldBegin();
-        if (field.type == TType.STOP) { 
-          break;
-        }
-        switch (field.id)
-        {
-          case SUCCESS:
-            if (field.type == TType.STRUCT) {
-              this.success = new superColumn_t();
-              this.success.read(iprot);
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
-          case IRE:
-            if (field.type == TType.STRUCT) {
-              this.ire = new InvalidRequestException();
-              this.ire.read(iprot);
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
-          case NFE:
-            if (field.type == TType.STRUCT) {
-              this.nfe = new NotFoundException();
-              this.nfe.read(iprot);
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
-          default:
-            TProtocolUtil.skip(iprot, field.type);
-            break;
-        }
-        iprot.readFieldEnd();
-      }
-      iprot.readStructEnd();
-
-
-      // check for required fields of primitive type, which can't be checked in the validate method
-      validate();
-    }
-
-    public void write(TProtocol oprot) throws TException {
-      oprot.writeStructBegin(STRUCT_DESC);
-
-      if (this.isSetSuccess()) {
-        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        this.success.write(oprot);
-        oprot.writeFieldEnd();
-      } else if (this.isSetIre()) {
-        oprot.writeFieldBegin(IRE_FIELD_DESC);
-        this.ire.write(oprot);
-        oprot.writeFieldEnd();
-      } else if (this.isSetNfe()) {
-        oprot.writeFieldBegin(NFE_FIELD_DESC);
-        this.nfe.write(oprot);
-        oprot.writeFieldEnd();
-      }
-      oprot.writeFieldStop();
-      oprot.writeStructEnd();
-    }
-
-    @Override
-    public String toString() {
-      StringBuilder sb = new StringBuilder("get_superColumn_result(");
-      boolean first = true;
-
-      sb.append("success:");
-      if (this.success == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.success);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("ire:");
-      if (this.ire == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.ire);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("nfe:");
-      if (this.nfe == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.nfe);
-      }
-      first = false;
-      sb.append(")");
-      return sb.toString();
-    }
-
-    public void validate() throws TException {
-      // check for required fields
-      // check that fields of type enum have valid values
-    }
-
-  }
-
-  public static class batch_insert_superColumn_args implements TBase, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("batch_insert_superColumn_args");
-    private static final TField BATCH_MUTATION_SUPER_FIELD_DESC = new TField("batchMutationSuper", TType.STRUCT, (short)-1);
-
-    public batch_mutation_super_t batchMutationSuper;
-    public static final int BATCHMUTATIONSUPER = -1;
-
-    private final Isset __isset = new Isset();
-    private static final class Isset implements java.io.Serializable {
-    }
-
-    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
-      put(BATCHMUTATIONSUPER, new FieldMetaData("batchMutationSuper", TFieldRequirementType.DEFAULT, 
-          new StructMetaData(TType.STRUCT, batch_mutation_super_t.class)));
-    }});
-
-    static {
-      FieldMetaData.addStructMetaDataMap(batch_insert_superColumn_args.class, metaDataMap);
-    }
-
-    public batch_insert_superColumn_args() {
-    }
-
-    public batch_insert_superColumn_args(
-      batch_mutation_super_t batchMutationSuper)
-    {
-      this();
-      this.batchMutationSuper = batchMutationSuper;
-    }
-
-    /**
-     * Performs a deep copy on <i>other</i>.
-     */
-    public batch_insert_superColumn_args(batch_insert_superColumn_args other) {
-      if (other.isSetBatchMutationSuper()) {
-        this.batchMutationSuper = new batch_mutation_super_t(other.batchMutationSuper);
-      }
-    }
-
-    @Override
-    public batch_insert_superColumn_args clone() {
-      return new batch_insert_superColumn_args(this);
-    }
-
-    public batch_mutation_super_t getBatchMutationSuper() {
-      return this.batchMutationSuper;
-    }
-
-    public void setBatchMutationSuper(batch_mutation_super_t batchMutationSuper) {
-      this.batchMutationSuper = batchMutationSuper;
-    }
-
-    public void unsetBatchMutationSuper() {
-      this.batchMutationSuper = null;
-    }
-
-    // Returns true if field batchMutationSuper is set (has been asigned a value) and false otherwise
-    public boolean isSetBatchMutationSuper() {
-      return this.batchMutationSuper != null;
-    }
-
-    public void setBatchMutationSuperIsSet(boolean value) {
-      if (!value) {
-        this.batchMutationSuper = null;
-      }
-    }
-
-    public void setFieldValue(int fieldID, Object value) {
-      switch (fieldID) {
-      case BATCHMUTATIONSUPER:
-        if (value == null) {
-          unsetBatchMutationSuper();
-        } else {
-          setBatchMutationSuper((batch_mutation_super_t)value);
-        }
-        break;
-
-      default:
-        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
-      }
-    }
-
-    public Object getFieldValue(int fieldID) {
-      switch (fieldID) {
-      case BATCHMUTATIONSUPER:
-        return getBatchMutationSuper();
-
-      default:
-        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
-      }
-    }
-
-    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
-    public boolean isSet(int fieldID) {
-      switch (fieldID) {
-      case BATCHMUTATIONSUPER:
-        return isSetBatchMutationSuper();
-      default:
-        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
-      }
-    }
-
-    @Override
-    public boolean equals(Object that) {
-      if (that == null)
+        if (!(this_present_ire && that_present_ire))
         return false;
-      if (that instanceof batch_insert_superColumn_args)
-        return this.equals((batch_insert_superColumn_args)that);
+        if (!this.ire.equals(that.ire))
       return false;
     }
 
-    public boolean equals(batch_insert_superColumn_args that) {
-      if (that == null)
-        return false;
-
-      boolean this_present_batchMutationSuper = true && this.isSetBatchMutationSuper();
-      boolean that_present_batchMutationSuper = true && that.isSetBatchMutationSuper();
-      if (this_present_batchMutationSuper || that_present_batchMutationSuper) {
-        if (!(this_present_batchMutationSuper && that_present_batchMutationSuper))
+      boolean this_present_nfe = true && this.isSetNfe();
+      boolean that_present_nfe = true && that.isSetNfe();
+      if (this_present_nfe || that_present_nfe) {
+        if (!(this_present_nfe && that_present_nfe))
           return false;
-        if (!this.batchMutationSuper.equals(that.batchMutationSuper))
+        if (!this.nfe.equals(that.nfe))
           return false;
       }
 
@@ -10307,10 +9442,26 @@ public void read(TProtocol iprot) throws TException {
         }
         switch (field.id)
         {
-          case BATCHMUTATIONSUPER:
+          case SUCCESS:
             if (field.type == TType.STRUCT) {
-              this.batchMutationSuper = new batch_mutation_super_t();
-              this.batchMutationSuper.read(iprot);
+              this.success = new superColumn_t();
+              this.success.read(iprot);
+            } else { 
+              TProtocolUtil.skip(iprot, field.type);
+            }
+            break;
+          case IRE:
+            if (field.type == TType.STRUCT) {
+              this.ire = new InvalidRequestException();
+              this.ire.read(iprot);
+            } else { 
+              TProtocolUtil.skip(iprot, field.type);
+            }
+            break;
+          case NFE:
+            if (field.type == TType.STRUCT) {
+              this.nfe = new NotFoundException();
+              this.nfe.read(iprot);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -10329,12 +9480,19 @@ public void read(TProtocol iprot) throws TException {
     }
 
     public void write(TProtocol oprot) throws TException {
-      validate();
-
       oprot.writeStructBegin(STRUCT_DESC);
-      if (this.batchMutationSuper != null) {
-        oprot.writeFieldBegin(BATCH_MUTATION_SUPER_FIELD_DESC);
-        this.batchMutationSuper.write(oprot);
+
+      if (this.isSetSuccess()) {
+        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+        this.success.write(oprot);
+        oprot.writeFieldEnd();
+      } else if (this.isSetIre()) {
+        oprot.writeFieldBegin(IRE_FIELD_DESC);
+        this.ire.write(oprot);
+        oprot.writeFieldEnd();
+      } else if (this.isSetNfe()) {
+        oprot.writeFieldBegin(NFE_FIELD_DESC);
+        this.nfe.write(oprot);
         oprot.writeFieldEnd();
       }
       oprot.writeFieldStop();
@@ -10343,14 +9501,30 @@ public void write(TProtocol oprot) throws TException {
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("batch_insert_superColumn_args(");
+      StringBuilder sb = new StringBuilder("get_superColumn_result(");
       boolean first = true;
 
-      sb.append("batchMutationSuper:");
-      if (this.batchMutationSuper == null) {
+      sb.append("success:");
+      if (this.success == null) {
         sb.append("null");
       } else {
-        sb.append(this.batchMutationSuper);
+        sb.append(this.success);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("ire:");
+      if (this.ire == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.ire);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("nfe:");
+      if (this.nfe == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.nfe);
       }
       first = false;
       sb.append(")");
@@ -10364,48 +9538,61 @@ public void validate() throws TException {
 
   }
 
-  public static class batch_insert_superColumn_blocking_args implements TBase, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("batch_insert_superColumn_blocking_args");
-    private static final TField BATCH_MUTATION_SUPER_FIELD_DESC = new TField("batchMutationSuper", TType.STRUCT, (short)-1);
+  public static class batch_insert_superColumn_args implements TBase, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("batch_insert_superColumn_args");
+    private static final TField BATCH_MUTATION_SUPER_FIELD_DESC = new TField("batchMutationSuper", TType.STRUCT, (short)1);
+    private static final TField BLOCK_FIELD_DESC = new TField("block", TType.BOOL, (short)2);
 
     public batch_mutation_super_t batchMutationSuper;
-    public static final int BATCHMUTATIONSUPER = -1;
+    public static final int BATCHMUTATIONSUPER = 1;
+    public boolean block;
+    public static final int BLOCK = 2;
 
     private final Isset __isset = new Isset();
     private static final class Isset implements java.io.Serializable {
+      public boolean block = false;
     }
 
     public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
       put(BATCHMUTATIONSUPER, new FieldMetaData("batchMutationSuper", TFieldRequirementType.DEFAULT, 
           new StructMetaData(TType.STRUCT, batch_mutation_super_t.class)));
+      put(BLOCK, new FieldMetaData("block", TFieldRequirementType.DEFAULT, 
+          new FieldValueMetaData(TType.BOOL)));
     }});
 
     static {
-      FieldMetaData.addStructMetaDataMap(batch_insert_superColumn_blocking_args.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(batch_insert_superColumn_args.class, metaDataMap);
     }
 
-    public batch_insert_superColumn_blocking_args() {
+    public batch_insert_superColumn_args() {
+      this.block = false;
+
     }
 
-    public batch_insert_superColumn_blocking_args(
-      batch_mutation_super_t batchMutationSuper)
+    public batch_insert_superColumn_args(
+      batch_mutation_super_t batchMutationSuper,
+      boolean block)
     {
       this();
       this.batchMutationSuper = batchMutationSuper;
+      this.block = block;
+      this.__isset.block = true;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public batch_insert_superColumn_blocking_args(batch_insert_superColumn_blocking_args other) {
+    public batch_insert_superColumn_args(batch_insert_superColumn_args other) {
       if (other.isSetBatchMutationSuper()) {
         this.batchMutationSuper = new batch_mutation_super_t(other.batchMutationSuper);
       }
+      __isset.block = other.__isset.block;
+      this.block = other.block;
     }
 
     @Override
-    public batch_insert_superColumn_blocking_args clone() {
-      return new batch_insert_superColumn_blocking_args(this);
+    public batch_insert_superColumn_args clone() {
+      return new batch_insert_superColumn_args(this);
     }
 
     public batch_mutation_super_t getBatchMutationSuper() {
@@ -10431,6 +9618,28 @@ public void setBatchMutationSuperIsSet(boolean value) {
       }
     }
 
+    public boolean isBlock() {
+      return this.block;
+    }
+
+    public void setBlock(boolean block) {
+      this.block = block;
+      this.__isset.block = true;
+    }
+
+    public void unsetBlock() {
+      this.__isset.block = false;
+    }
+
+    // Returns true if field block is set (has been asigned a value) and false otherwise
+    public boolean isSetBlock() {
+      return this.__isset.block;
+    }
+
+    public void setBlockIsSet(boolean value) {
+      this.__isset.block = value;
+    }
+
     public void setFieldValue(int fieldID, Object value) {
       switch (fieldID) {
       case BATCHMUTATIONSUPER:
@@ -10441,6 +9650,14 @@ public void setFieldValue(int fieldID, Object value) {
         }
         break;
 
+      case BLOCK:
+        if (value == null) {
+          unsetBlock();
+        } else {
+          setBlock((Boolean)value);
+        }
+        break;
+
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
       }
@@ -10451,6 +9668,9 @@ public Object getFieldValue(int fieldID) {
       case BATCHMUTATIONSUPER:
         return getBatchMutationSuper();
 
+      case BLOCK:
+        return new Boolean(isBlock());
+
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
       }
@@ -10461,6 +9681,8 @@ public boolean isSet(int fieldID) {
       switch (fieldID) {
       case BATCHMUTATIONSUPER:
         return isSetBatchMutationSuper();
+      case BLOCK:
+        return isSetBlock();
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
       }
@@ -10470,12 +9692,12 @@ public boolean isSet(int fieldID) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof batch_insert_superColumn_blocking_args)
-        return this.equals((batch_insert_superColumn_blocking_args)that);
+      if (that instanceof batch_insert_superColumn_args)
+        return this.equals((batch_insert_superColumn_args)that);
       return false;
     }
 
-    public boolean equals(batch_insert_superColumn_blocking_args that) {
+    public boolean equals(batch_insert_superColumn_args that) {
       if (that == null)
         return false;
 
@@ -10488,6 +9710,15 @@ public boolean equals(batch_insert_superColumn_blocking_args that) {
           return false;
       }
 
+      boolean this_present_block = true;
+      boolean that_present_block = true;
+      if (this_present_block || that_present_block) {
+        if (!(this_present_block && that_present_block))
+          return false;
+        if (this.block != that.block)
+          return false;
+      }
+
       return true;
     }
 
@@ -10515,6 +9746,14 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+          case BLOCK:
+            if (field.type == TType.BOOL) {
+              this.block = iprot.readBool();
+              this.__isset.block = true;
+            } else { 
+              TProtocolUtil.skip(iprot, field.type);
+            }
+            break;
           default:
             TProtocolUtil.skip(iprot, field.type);
             break;
@@ -10537,13 +9776,16 @@ public void write(TProtocol oprot) throws TException {
         this.batchMutationSuper.write(oprot);
         oprot.writeFieldEnd();
       }
+      oprot.writeFieldBegin(BLOCK_FIELD_DESC);
+      oprot.writeBool(this.block);
+      oprot.writeFieldEnd();
       oprot.writeFieldStop();
       oprot.writeStructEnd();
     }
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("batch_insert_superColumn_blocking_args(");
+      StringBuilder sb = new StringBuilder("batch_insert_superColumn_args(");
       boolean first = true;
 
       sb.append("batchMutationSuper:");
@@ -10553,6 +9795,10 @@ public String toString() {
         sb.append(this.batchMutationSuper);
       }
       first = false;
+      if (!first) sb.append(", ");
+      sb.append("block:");
+      sb.append(this.block);
+      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -10564,81 +9810,58 @@ public void validate() throws TException {
 
   }
 
-  public static class batch_insert_superColumn_blocking_result implements TBase, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("batch_insert_superColumn_blocking_result");
-    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
+  public static class batch_insert_superColumn_result implements TBase, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("batch_insert_superColumn_result");
     private static final TField IRE_FIELD_DESC = new TField("ire", TType.STRUCT, (short)1);
+    private static final TField UE_FIELD_DESC = new TField("ue", TType.STRUCT, (short)2);
 
-    public boolean success;
-    public static final int SUCCESS = 0;
     public InvalidRequestException ire;
     public static final int IRE = 1;
+    public UnavailableException ue;
+    public static final int UE = 2;
 
     private final Isset __isset = new Isset();
     private static final class Isset implements java.io.Serializable {
-      public boolean success = false;
     }
 
     public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
-      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.BOOL)));
       put(IRE, new FieldMetaData("ire", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
+      put(UE, new FieldMetaData("ue", TFieldRequirementType.DEFAULT, 
+          new FieldValueMetaData(TType.STRUCT)));
     }});
 
     static {
-      FieldMetaData.addStructMetaDataMap(batch_insert_superColumn_blocking_result.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(batch_insert_superColumn_result.class, metaDataMap);
     }
 
-    public batch_insert_superColumn_blocking_result() {
+    public batch_insert_superColumn_result() {
     }
 
-    public batch_insert_superColumn_blocking_result(
-      boolean success,
-      InvalidRequestException ire)
+    public batch_insert_superColumn_result(
+      InvalidRequestException ire,
+      UnavailableException ue)
     {
       this();
-      this.success = success;
-      this.__isset.success = true;
       this.ire = ire;
+      this.ue = ue;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public batch_insert_superColumn_blocking_result(batch_insert_superColumn_blocking_result other) {
-      __isset.success = other.__isset.success;
-      this.success = other.success;
+    public batch_insert_superColumn_result(batch_insert_superColumn_result other) {
       if (other.isSetIre()) {
         this.ire = new InvalidRequestException(other.ire);
       }
+      if (other.isSetUe()) {
+        this.ue = new UnavailableException(other.ue);
     }
-
-    @Override
-    public batch_insert_superColumn_blocking_result clone() {
-      return new batch_insert_superColumn_blocking_result(this);
-    }
-
-    public boolean isSuccess() {
-      return this.success;
-    }
-
-    public void setSuccess(boolean success) {
-      this.success = success;
-      this.__isset.success = true;
-    }
-
-    public void unsetSuccess() {
-      this.__isset.success = false;
-    }
-
-    // Returns true if field success is set (has been asigned a value) and false otherwise
-    public boolean isSetSuccess() {
-      return this.__isset.success;
     }
 
-    public void setSuccessIsSet(boolean value) {
-      this.__isset.success = value;
+    @Override
+    public batch_insert_superColumn_result clone() {
+      return new batch_insert_superColumn_result(this);
     }
 
     public InvalidRequestException getIre() {
@@ -10664,21 +9887,44 @@ public void setIreIsSet(boolean value) {
       }
     }
 
+    public UnavailableException getUe() {
+      return this.ue;
+    }
+
+    public void setUe(UnavailableException ue) {
+      this.ue = ue;
+    }
+
+    public void unsetUe() {
+      this.ue = null;
+    }
+
+    // Returns true if field ue is set (has been asigned a value) and false otherwise
+    public boolean isSetUe() {
+      return this.ue != null;
+    }
+
+    public void setUeIsSet(boolean value) {
+      if (!value) {
+        this.ue = null;
+      }
+    }
+
     public void setFieldValue(int fieldID, Object value) {
       switch (fieldID) {
-      case SUCCESS:
+      case IRE:
         if (value == null) {
-          unsetSuccess();
+          unsetIre();
         } else {
-          setSuccess((Boolean)value);
+          setIre((InvalidRequestException)value);
         }
         break;
 
-      case IRE:
+      case UE:
         if (value == null) {
-          unsetIre();
+          unsetUe();
         } else {
-          setIre((InvalidRequestException)value);
+          setUe((UnavailableException)value);
         }
         break;
 
@@ -10689,12 +9935,12 @@ public void setFieldValue(int fieldID, Object value) {
 
     public Object getFieldValue(int fieldID) {
       switch (fieldID) {
-      case SUCCESS:
-        return new Boolean(isSuccess());
-
       case IRE:
         return getIre();
 
+      case UE:
+        return getUe();
+
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
       }
@@ -10703,10 +9949,10 @@ public Object getFieldValue(int fieldID) {
     // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
     public boolean isSet(int fieldID) {
       switch (fieldID) {
-      case SUCCESS:
-        return isSetSuccess();
       case IRE:
         return isSetIre();
+      case UE:
+        return isSetUe();
       default:
         throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
       }
@@ -10716,24 +9962,15 @@ public boolean isSet(int fieldID) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof batch_insert_superColumn_blocking_result)
-        return this.equals((batch_insert_superColumn_blocking_result)that);
+      if (that instanceof batch_insert_superColumn_result)
+        return this.equals((batch_insert_superColumn_result)that);
       return false;
     }
 
-    public boolean equals(batch_insert_superColumn_blocking_result that) {
+    public boolean equals(batch_insert_superColumn_result that) {
       if (that == null)
         return false;
 
-      boolean this_present_success = true;
-      boolean that_present_success = true;
-      if (this_present_success || that_present_success) {
-        if (!(this_present_success && that_present_success))
-          return false;
-        if (this.success != that.success)
-          return false;
-      }
-
       boolean this_present_ire = true && this.isSetIre();
       boolean that_present_ire = true && that.isSetIre();
       if (this_present_ire || that_present_ire) {
@@ -10743,6 +9980,15 @@ public boolean equals(batch_insert_superColumn_blocking_result that) {
           return false;
       }
 
+      boolean this_present_ue = true && this.isSetUe();
+      boolean that_present_ue = true && that.isSetUe();
+      if (this_present_ue || that_present_ue) {
+        if (!(this_present_ue && that_present_ue))
+          return false;
+        if (!this.ue.equals(that.ue))
+          return false;
+      }
+
       return true;
     }
 
@@ -10762,18 +10008,18 @@ public void read(TProtocol iprot) throws TException {
         }
         switch (field.id)
         {
-          case SUCCESS:
-            if (field.type == TType.BOOL) {
-              this.success = iprot.readBool();
-              this.__isset.success = true;
+          case IRE:
+            if (field.type == TType.STRUCT) {
+              this.ire = new InvalidRequestException();
+              this.ire.read(iprot);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case IRE:
+          case UE:
             if (field.type == TType.STRUCT) {
-              this.ire = new InvalidRequestException();
-              this.ire.read(iprot);
+              this.ue = new UnavailableException();
+              this.ue.read(iprot);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -10794,14 +10040,14 @@ public void read(TProtocol iprot) throws TException {
     public void write(TProtocol oprot) throws TException {
       oprot.writeStructBegin(STRUCT_DESC);
 
-      if (this.isSetSuccess()) {
-        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeBool(this.success);
-        oprot.writeFieldEnd();
-      } else if (this.isSetIre()) {
+      if (this.isSetIre()) {
         oprot.writeFieldBegin(IRE_FIELD_DESC);
         this.ire.write(oprot);
         oprot.writeFieldEnd();
+      } else if (this.isSetUe()) {
+        oprot.writeFieldBegin(UE_FIELD_DESC);
+        this.ue.write(oprot);
+        oprot.writeFieldEnd();
       }
       oprot.writeFieldStop();
       oprot.writeStructEnd();
@@ -10809,13 +10055,9 @@ public void write(TProtocol oprot) throws TException {
 
     @Override
     public String toString() {
-      StringBuilder sb = new StringBuilder("batch_insert_superColumn_blocking_result(");
+      StringBuilder sb = new StringBuilder("batch_insert_superColumn_result(");
       boolean first = true;
 
-      sb.append("success:");
-      sb.append(this.success);
-      first = false;
-      if (!first) sb.append(", ");
       sb.append("ire:");
       if (this.ire == null) {
         sb.append("null");
@@ -10823,6 +10065,14 @@ public String toString() {
         sb.append(this.ire);
       }
       first = false;
+      if (!first) sb.append(", ");
+      sb.append("ue:");
+      if (this.ue == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.ue);
+      }
+      first = false;
       sb.append(")");
       return sb.toString();
     }
diff --git a/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/UnavailableException.java b/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/UnavailableException.java
index e69de29b..22bad0be 100644
--- a/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/UnavailableException.java
+++ b/incubator/cassandra/trunk/interface/gen-java/org/apache/cassandra/service/UnavailableException.java
@@ -0,0 +1,135 @@
+/**
+ * Autogenerated by Thrift
+ *
+ * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
+ */
+package org.apache.cassandra.service;
+
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.Set;
+import java.util.HashSet;
+import java.util.Collections;
+import org.apache.log4j.Logger;
+
+import org.apache.thrift.*;
+import org.apache.thrift.meta_data.*;
+import org.apache.thrift.protocol.*;
+
+public class UnavailableException extends Exception implements TBase, java.io.Serializable, Cloneable {
+  private static final TStruct STRUCT_DESC = new TStruct("UnavailableException");
+
+  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
+  }});
+
+  static {
+    FieldMetaData.addStructMetaDataMap(UnavailableException.class, metaDataMap);
+  }
+
+  public UnavailableException() {
+  }
+
+  /**
+   * Performs a deep copy on <i>other</i>.
+   */
+  public UnavailableException(UnavailableException other) {
+  }
+
+  @Override
+  public UnavailableException clone() {
+    return new UnavailableException(this);
+  }
+
+  public void setFieldValue(int fieldID, Object value) {
+    switch (fieldID) {
+    default:
+      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
+    }
+  }
+
+  public Object getFieldValue(int fieldID) {
+    switch (fieldID) {
+    default:
+      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
+    }
+  }
+
+  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
+  public boolean isSet(int fieldID) {
+    switch (fieldID) {
+    default:
+      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
+    }
+  }
+
+  @Override
+  public boolean equals(Object that) {
+    if (that == null)
+      return false;
+    if (that instanceof UnavailableException)
+      return this.equals((UnavailableException)that);
+    return false;
+  }
+
+  public boolean equals(UnavailableException that) {
+    if (that == null)
+      return false;
+
+    return true;
+  }
+
+  @Override
+  public int hashCode() {
+    return 0;
+  }
+
+  public void read(TProtocol iprot) throws TException {
+    TField field;
+    iprot.readStructBegin();
+    while (true)
+    {
+      field = iprot.readFieldBegin();
+      if (field.type == TType.STOP) { 
+        break;
+      }
+      switch (field.id)
+      {
+        default:
+          TProtocolUtil.skip(iprot, field.type);
+          break;
+      }
+      iprot.readFieldEnd();
+    }
+    iprot.readStructEnd();
+
+
+    // check for required fields of primitive type, which can't be checked in the validate method
+    validate();
+  }
+
+  public void write(TProtocol oprot) throws TException {
+    validate();
+
+    oprot.writeStructBegin(STRUCT_DESC);
+    oprot.writeFieldStop();
+    oprot.writeStructEnd();
+  }
+
+  @Override
+  public String toString() {
+    StringBuilder sb = new StringBuilder("UnavailableException(");
+    boolean first = true;
+
+    sb.append(")");
+    return sb.toString();
+  }
+
+  public void validate() throws TException {
+    // check for required fields
+    // check that fields of type enum have valid values
+  }
+
+}
+
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
index 0d10ba33..3729b69f 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
@@ -21,11 +21,7 @@
 
 import org.antlr.runtime.tree.*;
 import org.apache.cassandra.cql.common.Utils;
-import org.apache.cassandra.service.Cassandra;
-import org.apache.cassandra.service.CqlResult_t;
-import org.apache.cassandra.service.column_t;
-import org.apache.cassandra.service.NotFoundException;
-import org.apache.cassandra.service.InvalidRequestException;
+import org.apache.cassandra.service.*;
 import org.apache.cassandra.utils.LogUtil;
 
 import java.util.*;
@@ -43,7 +39,7 @@ public CliClient(CliSessionState css, Cassandra.Client thriftClient)
     }
 
     // Execute a CLI Statement 
-    public void executeCLIStmt(String stmt) throws TException, NotFoundException, InvalidRequestException
+    public void executeCLIStmt(String stmt) throws TException, NotFoundException, InvalidRequestException, UnavailableException
     {
         CommonTree ast = null;
 
@@ -165,7 +161,7 @@ else if (columnSpecCnt == 1)
     }
 
     // Execute SET statement
-    private void executeSet(CommonTree ast) throws TException
+    private void executeSet(CommonTree ast) throws TException, InvalidRequestException, UnavailableException
     {
         if (!CliMain.isConnected())
             return;
@@ -192,7 +188,7 @@ private void executeSet(CommonTree ast) throws TException
 
             // do the insert
             thriftClient_.insert(tableName, key, columnFamily + ":" + columnName,
-                                 value.getBytes(), System.currentTimeMillis());
+                                 value.getBytes(), System.currentTimeMillis(), true);
 
             css_.out.println("Value inserted.");
         }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
index 46588b2c..36f20520 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/CassandraServer.java
@@ -21,12 +21,7 @@
 import java.io.BufferedInputStream;
 import java.io.FileInputStream;
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Arrays;
+import java.util.*;
 import java.util.concurrent.TimeoutException;
 
 import org.apache.log4j.Logger;
@@ -282,66 +277,57 @@ public int get_column_count(String tablename, String key, String columnFamily_co
         return columns.size();
 	}
 
-    public void insert(String tablename, String key, String columnFamily_column, byte[] cellData, long timestamp)
+    public void insert(String tablename, String key, String columnFamily_column, byte[] cellData, long timestamp, boolean block)
+    throws InvalidRequestException, UnavailableException
 	{
         logger.debug("insert");
         RowMutation rm = new RowMutation(tablename, key.trim());
         rm.add(columnFamily_column, cellData, timestamp);
-        try
+        Set<String> cfNames = rm.columnFamilyNames();
+        validateCommand(rm.key(), rm.table(), cfNames.toArray(new String[cfNames.size()]));
+
+        if (block)
         {
-            validateCommand(rm.key(), rm.table(), rm.columnFamilyNames().toArray(new String[0]));
+            StorageProxy.insertBlocking(rm);
         }
-        catch (InvalidRequestException e)
+        else
         {
-            throw new RuntimeException(e);
-        }
         StorageProxy.insert(rm);
 	}
-    
-    public boolean insert_blocking(String tablename, String key, String columnFamily_column, byte[] cellData, long timestamp) throws InvalidRequestException
-    {
-        logger.debug("insert_blocking");
-        RowMutation rm = new RowMutation(tablename, key.trim());
-        rm.add(columnFamily_column, cellData, timestamp);
-        validateCommand(rm.key(), rm.table(), rm.columnFamilyNames().toArray(new String[0]));
-        return StorageProxy.insertBlocking(rm);
-    }
-
-    public boolean batch_insert_blocking(batch_mutation_t batchMutation) throws InvalidRequestException
-    {
-        logger.debug("batch_insert_blocking");
-        RowMutation rm = RowMutation.getRowMutation(batchMutation);
-        validateCommand(rm.key(), rm.table(), rm.columnFamilyNames().toArray(new String[0]));
-        return StorageProxy.insertBlocking(rm);
     }
 
-	public void batch_insert(batch_mutation_t batchMutation)
+    public void batch_insert(batch_mutation_t batchMutation, boolean block) throws InvalidRequestException, UnavailableException
     {
         logger.debug("batch_insert");
         RowMutation rm = RowMutation.getRowMutation(batchMutation);
-        try
+        Set<String> cfNames = rm.columnFamilyNames();
+        validateCommand(rm.key(), rm.table(), cfNames.toArray(new String[cfNames.size()]));
+
+        if (block)
         {
-            validateCommand(rm.key(), rm.table(), rm.columnFamilyNames().toArray(new String[0]));
+            StorageProxy.insertBlocking(rm);
         }
-        catch (InvalidRequestException e)
+        else
         {
-            // it would be confusing to declare an exception in thrift that can't be returned to the client
-            throw new RuntimeException(e);
-        }
         StorageProxy.insert(rm);
 	}
+    }
 
-    public boolean remove(String tablename, String key, String columnFamily_column, long timestamp, boolean block) throws InvalidRequestException
+    public void remove(String tablename, String key, String columnFamily_column, long timestamp, boolean block)
+    throws InvalidRequestException, UnavailableException
     {
         logger.debug("remove");
         RowMutation rm = new RowMutation(tablename, key.trim());
         rm.delete(columnFamily_column, timestamp);
-        validateCommand(rm.key(), rm.table(), rm.columnFamilyNames().toArray(new String[0]));
-        if (block) {
-            return StorageProxy.insertBlocking(rm);
-        } else {
+        Set<String> cfNames = rm.columnFamilyNames();
+        validateCommand(rm.key(), rm.table(), cfNames.toArray(new String[cfNames.size()]));
+        if (block)
+        {
+            StorageProxy.insertBlocking(rm);
+        }
+        else
+        {
             StorageProxy.insert(rm);
-            return true;
         }
 	}
 
@@ -413,29 +399,21 @@ public superColumn_t get_superColumn(String tablename, String key, String column
         return new superColumn_t(column.name(), thriftifyColumns(column.getSubColumns()));
     }
     
-    public boolean batch_insert_superColumn_blocking(batch_mutation_super_t batchMutationSuper) throws InvalidRequestException
-    {
-        logger.debug("batch_insert_SuperColumn_blocking");
-        RowMutation rm = RowMutation.getRowMutation(batchMutationSuper);
-        validateCommand(rm.key(), rm.table(), rm.columnFamilyNames().toArray(new String[0]));
-        return StorageProxy.insertBlocking(rm);
-    }
-
-    public void batch_insert_superColumn(batch_mutation_super_t batchMutationSuper)
+    public void batch_insert_superColumn(batch_mutation_super_t batchMutationSuper, boolean block) throws InvalidRequestException, UnavailableException
     {
         logger.debug("batch_insert_SuperColumn");
         RowMutation rm = RowMutation.getRowMutation(batchMutationSuper);
-        try
+        Set<String> cfNames = rm.columnFamilyNames();
+        validateCommand(rm.key(), rm.table(), cfNames.toArray(new String[cfNames.size()]));
+        if (block)
         {
-            validateCommand(rm.key(), rm.table(), rm.columnFamilyNames().toArray(new String[0]));
+            StorageProxy.insertBlocking(rm);
         }
-        catch (InvalidRequestException e)
+        else
         {
-            // it would be confusing to declare an exception in thrift that can't be returned to the client
-            throw new RuntimeException(e);
-        }
         StorageProxy.insert(rm);
     }
+    }
 
     public String getStringProperty(String propertyName)
     {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
index 28f2eeba..260e19e6 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -140,13 +140,20 @@ public static void insert(RowMutation rm)
         }
     }
 
-    public static boolean insertBlocking(RowMutation rm)
+    public static void insertBlocking(RowMutation rm) throws UnavailableException
     {
         long startTime = System.currentTimeMillis();
+        Message message = null;
+        try
+        {
+            message = rm.makeRowMutationMessage();
+        }
+        catch (IOException e)
+        {
+            throw new RuntimeException(e);
+        }
         try
         {
-            Message message = rm.makeRowMutationMessage();
-
             IResponseResolver<Boolean> writeResponseResolver = new WriteResponseResolver();
             QuorumResponseHandler<Boolean> quorumResponseHandler = new QuorumResponseHandler<Boolean>(
                     DatabaseDescriptor.getReplicationFactor(),
@@ -156,15 +163,13 @@ public static boolean insertBlocking(RowMutation rm)
             // TODO: throw a thrift exception if we do not have N nodes
 
             MessagingService.getMessagingInstance().sendRR(message, endpoints, quorumResponseHandler);
-            return quorumResponseHandler.get();
-
-            // TODO: if the result is false that means the writes to all the
-            // servers failed hence we need to throw an exception or return an
-            // error back to the client so that it can take appropriate action.
+            if (!quorumResponseHandler.get())
+                throw new UnavailableException();
         }
         catch (Exception e)
         {
-            throw new RuntimeException(e);
+            logger.error(e);
+            throw new UnavailableException();
         }
         finally
         {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/test/StressTest.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/test/StressTest.java
index 68c5e365..aa61a922 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/test/StressTest.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/test/StressTest.java
@@ -410,11 +410,11 @@ public void applyThrift(String table, String key, String columnFamily, byte[] by
 				Thread.sleep(0, 1000000000/requestsPerSecond_);
 			else
 				Thread.sleep(1000/requestsPerSecond_);
-			peerstorageClient_.insert(table, key, columnFamily, bytes, ts);
+			peerstorageClient_.insert(table, key, columnFamily, bytes, ts, false);
 		} catch (Exception e) {
 			try {
 				peerstorageClient_ = connect();
-				peerstorageClient_.insert(table, key, columnFamily, bytes, ts);
+				peerstorageClient_.insert(table, key, columnFamily, bytes, ts, false);
 			} catch (Exception e1) {
 				e1.printStackTrace();
 			}
@@ -429,11 +429,11 @@ public void apply(batch_mutation_t batchMutation) {
 				Thread.sleep(0, 1000000000/requestsPerSecond_);
 			else
 				Thread.sleep(1000/requestsPerSecond_);
-			peerstorageClient_.batch_insert(batchMutation);
+			peerstorageClient_.batch_insert(batchMutation, false);
 		} catch (Exception e) {
 			try {
 				peerstorageClient_ = connect();
-				peerstorageClient_.batch_insert(batchMutation);
+				peerstorageClient_.batch_insert(batchMutation, false);
 			} catch (Exception e1) {
 				e1.printStackTrace();
 			}
@@ -448,13 +448,13 @@ public void apply(batch_mutation_super_t batchMutation) {
 			else
 				Thread.sleep(1000/requestsPerSecond_);
 			long t = System.currentTimeMillis();
-			peerstorageClient_.batch_insert_superColumn(batchMutation);
+			peerstorageClient_.batch_insert_superColumn(batchMutation, false);
 			logger_.debug("Time taken for thrift..."
 					+ (System.currentTimeMillis() - t));
 		} catch (Exception e) {
 			try {
 				peerstorageClient_ = connect();
-				peerstorageClient_.batch_insert_superColumn(batchMutation);
+				peerstorageClient_.batch_insert_superColumn(batchMutation, false);
 			} catch (Exception e1) {
 				e1.printStackTrace();
 			}
@@ -651,26 +651,6 @@ public void bulkWriteSuperColumnThrift(int keys, int supercolumns, int columns,
 		System.out.println(System.currentTimeMillis() - time);
 	}
 	
-	public void testCommitLog() throws Throwable
-	{
-        Random random = new Random(System.currentTimeMillis());
-    	byte[] bytes = new byte[4096];
-    	random.nextBytes(bytes);
-    	byte[] bytes1 = new byte[64];
-    	random.nextBytes(bytes1);
-    	peerstorageClient_ = connect();
-    	int t = 0 ;
-    	while( true )
-    	{
-	    	int key = random.nextInt();
-	    	int threadId = random.nextInt();
-	    	int word = random.nextInt();
-			peerstorageClient_.insert("Mailbox", Integer.toString(key), "MailboxMailList0:" + Integer.toString(threadId), bytes1, t++);
-			peerstorageClient_.insert("Mailbox", Integer.toString(key), "MailboxThreadList0:" + Integer.toString(word) + ":" + Integer.toString(threadId), bytes, t++);
-			peerstorageClient_.insert("Mailbox", Integer.toString(key), "MailboxUserList0:"+ Integer.toString(word) + ":" + Integer.toString(threadId), bytes, t++);
-    	}
-	}
-
 	JSAPResult ParseArguments(String[] args)
 	{
         JSAPResult config = null;    
@@ -755,11 +735,6 @@ void run( JSAPResult config ) throws Throwable
 //			stressMailboxWrites();
 			return;
 		}
-		if(config.getInt("commitLogTest") == 1)
-		{
-			testCommitLog();
-			return;
-		}
 		if(config.getInt("thrift") == 0)
 		{
 			if(config.getInt("supercolumns") == 0)
