diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyAdapter.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyAdapter.java
index 03624917..3fc8e9da 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyAdapter.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/common/AbstractWovenProxyAdapter.java
@@ -19,9 +19,11 @@
 package org.apache.aries.proxy.impl.common;
 
 import java.io.IOException;
+import java.io.Serializable;
 import java.lang.reflect.Modifier;
 import java.math.BigDecimal;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -159,6 +161,11 @@
    * to a super no-args
    */
   private boolean hasNoArgsConstructor = false;
+  /**
+   * If we have a no-args constructor then we can delegate there rather than 
+   * to a super no-args
+   */
+  protected boolean isSerializable = false;
   /**
    * The default static initialization method where we will write the proxy init
    * code. If there is an existing <clinit> then we will change this and write a
@@ -214,6 +221,9 @@ public final void visit(int version, int access, String name, String signature,
       Class<?> superClass = Class.forName(superName.replace('/', '.'), false,
           loader);
 
+      isSerializable = Serializable.class.isAssignableFrom(superClass) || 
+                       Arrays.asList(interfaces).contains(Type.getInternalName(Serializable.class));
+      
       if (!!!WovenProxy.class.isAssignableFrom(superClass)) {
 
         // We have found a type we need to add WovenProxy information to
diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyAdapter.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyAdapter.java
index e0c06705..453ee39b 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyAdapter.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyAdapter.java
@@ -61,9 +61,17 @@ protected final Type getDeclaringTypeForCurrentMethod() {
   @Override
   public FieldVisitor visitField(int access, String name, String arg2,
       String arg3, Object arg4) {
+    
     //If this sVUID is generated then make it synthetic
-    if(sVUIDGenerated && "serialVersionUID".equals(name)) 
+    if(sVUIDGenerated && "serialVersionUID".equals(name)) {
+      
+      //If we aren't a serializable class then don't add a generated sVUID
+      if(!!!isSerializable) {
+        return null;
+      }
+      
       access |= ACC_SYNTHETIC;
+    }
     return super.visitField(access, name, arg2, arg3, arg4);
   }
 
diff --git a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/WovenProxyGeneratorTest.java b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/WovenProxyGeneratorTest.java
index 88f1829c..5d504a90 100644
--- a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/WovenProxyGeneratorTest.java
+++ b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/WovenProxyGeneratorTest.java
@@ -313,6 +313,12 @@ public void testInnerWithNoParentNoArgs() throws Exception {
     }
   }
   
+  @Test(expected=NoSuchFieldException.class)
+  public void testNonSerializableClassHasNoGeneratedSerialVersionUID() throws Exception {
+    Class<?> woven = getProxyClass(TEST_CLASS);
+    woven.getDeclaredField("serialVersionUID");
+  }
+  
   @Test
   public void testSerialization() throws Exception {
     
