diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/BinaryDecimal.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/BinaryDecimal.java
index 3a351e65..e0abf240 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/BinaryDecimal.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/BinaryDecimal.java
@@ -36,7 +36,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 /**
  * SQL DECIMAL using raw data. Provides the basis for the
- * CDCDecimal implementation.
+ * BigIntegerDecimal implementation.
  * <P>
  * The on-disk format must match the SQLDecimal format so that
  * databases are portable across J2ME and J2SE environments.
@@ -372,7 +372,7 @@ public final short getShort() throws StandardException
 	 * @param result	The result of a previous call to this method, null
 	 *					if not called yet
 	 *
-	 * @return	A SQLDecimal containing the result of the addition
+	 * @return	A BinaryDecimal containing the result of the addition
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
@@ -686,9 +686,9 @@ public DataValueDescriptor getClone() {
 	 * @see org.apache.derby.iapi.types.DataValueDescriptor#setValueFromResultSet(java.sql.ResultSet, int, boolean)
 	 */
 	public void setValueFromResultSet(ResultSet resultSet, int colNumber, boolean isNullable) throws StandardException, SQLException {
-		// TODO Auto-generated method stub
-		throw StandardException.newException(SQLState.NOT_IMPLEMENTED);
-		
+		// using DataType.setValue(String), which should be implemented
+		// by the implementing class.
+		setValue(resultSet.getString(colNumber));
 	}
 
 	/* (non-Javadoc)
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
index 68e5d5b4..22da220f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
@@ -1404,10 +1404,17 @@ private void assertResults( int[] expectedJdbcTypes, String[] columnNames, Resul
 
                 case Types.DECIMAL:
                 case Types.NUMERIC:
+                    // with JSR169, we cannot execute resultSet.getBigDecimal...
+                    if (JDBC.vmSupportsJDBC3()) {
                     actualValue = squeezeString(  rs.getBigDecimal( column ) );
                     actualValueByName = squeezeString(  rs.getBigDecimal( columnName ) );
                     break;
-
+                    }
+                    else {
+                        actualValue = squeezeString(  rs.getString( column ) );
+                        actualValueByName = squeezeString(  rs.getString( columnName ) );
+                        break;
+                    }
                 case Types.DATE:
                     actualValue = squeezeString(  rs.getDate( column ) );
                     actualValueByName = squeezeString(  rs.getDate( columnName ) );
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBC.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBC.java
index 13cb8d8f..5dec78b8 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBC.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBC.java
@@ -46,8 +46,34 @@
      */
     public static class GeneratedId {
         public boolean equals(Object o) {
+            // unless JSR169, use String.matches...
+            if (JDBC.vmSupportsJDBC3()) 
+            {
             return o instanceof String &&
                 ((String) o).matches("SQL[0-9]{15}");
+        }
+            else
+            {
+                String tmpstr = (String)o;
+                boolean b = true;
+                if (!(o instanceof String))
+                    b = false;
+                if (!(tmpstr.startsWith("SQL")))
+                    b = false;
+                if (tmpstr.length() != 18)
+                    b = false;
+                for (int i=3 ; i<18 ; i++)
+                {
+                    if (Character.isDigit(tmpstr.charAt(i)))
+                        continue;
+                    else
+                    {
+                        b = false;
+                        break;
+                    }
+                }
+            return b;
+            }
         }
         public String toString() {
             return "xxxxGENERATED-IDxxxx";
