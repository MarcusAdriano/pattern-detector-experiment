diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLClob.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLClob.java
index 8d97a1eb..6138702b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLClob.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLClob.java
@@ -236,11 +236,11 @@ public int getLength() throws StandardException {
         long charLength = 0;
         try {
             if (repositionStream) {
-                rewindStream(csd.getDataOffset());
+                rewindStream(stream, csd.getDataOffset());
             }
             charLength = UTF8Util.skipUntilEOF(stream);
             // We just drained the whole stream. Reset it.
-            rewindStream(0);
+            rewindStream(stream, 0);
         } catch (IOException ioe) {
             throwStreamingIOException(ioe);
         }
@@ -342,7 +342,7 @@ public CharacterStreamDescriptor getStreamWithDescriptor()
                 if (read > hdrInfo.headerLength()) {
                     // We have read too much. Reset the stream.
                     read = hdrInfo.headerLength();
-                    rewindStream(read);
+                    rewindStream(stream, read);
                 }
                 csd = new CharacterStreamDescriptor.Builder().stream(stream).
                     bufferable(false).positionAware(false).
@@ -686,11 +686,12 @@ public void readExternal(ObjectInput in)
                                             : (int)csd.getByteLength();
             hdrInfo = new HeaderInfo(hdrLen, valueLength);
             // Make sure the stream is correctly positioned.
-            rewindStream(hdrLen);
+            rewindStream((InputStream)in, hdrLen);
         } else {
-            final boolean markSet = stream.markSupported();
+            final InputStream srcIn = (InputStream)in;
+            final boolean markSet = srcIn.markSupported();
             if (markSet) {
-                stream.mark(MAX_STREAM_HEADER_LENGTH);
+                srcIn.mark(MAX_STREAM_HEADER_LENGTH);
             }
             byte[] header = new byte[MAX_STREAM_HEADER_LENGTH];
             int read = in.read(header);
@@ -707,11 +708,11 @@ public void readExternal(ObjectInput in)
                 if (markSet) {
                     // Stream is not a store Resetable one, use mark/reset
                     // functionality instead.
-                    stream.reset();
-                    InputStreamUtil.skipFully(stream, hdrInfo.headerLength());
-                } else if (stream instanceof Resetable) {
+                    srcIn.reset();
+                    InputStreamUtil.skipFully(srcIn, hdrInfo.headerLength());
+                } else if (in instanceof Resetable) {
                     // We have a store stream.
-                    rewindStream(hdrInfo.headerLength());
+                    rewindStream(srcIn, hdrInfo.headerLength());
                 }
             }
         }
@@ -763,14 +764,15 @@ public void readExternalFromArray(ArrayInputStream in)
      * Rewinds the stream to the beginning and then skips the specified number
      * of bytes.
      *
-     * @param pos number of bytes to skip
+     * @param in input stream to rewind
+     * @param offset number of bytes to skip
      * @throws IOException if resetting or reading from the stream fails
      */
-    private void rewindStream(long pos)
+    private void rewindStream(InputStream in, long offset)
             throws IOException {
         try {
-            ((Resetable)stream).resetStream();
-            InputStreamUtil.skipFully(stream, pos);
+            ((Resetable)in).resetStream();
+            InputStreamUtil.skipFully(in, offset);
         } catch (StandardException se) {
             IOException ioe = new IOException(se.getMessage());
             ioe.initCause(se);
