diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java b/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java
index 67b7f120..2017beb2 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java
@@ -195,15 +195,41 @@ public Explanation explain(IndexReader reader, int doc)
   }
 
   protected Weight createWeight(Searcher searcher) {
+    return new BooleanWeight(searcher);
+  }
+
+  public Query rewrite(IndexReader reader) throws IOException {
     if (clauses.size() == 1) {                    // optimize 1-clause queries
       BooleanClause c = (BooleanClause)clauses.elementAt(0);
-      if (!c.prohibited) {			  // just return clause weight
-        Query clone = (Query)c.query.clone();
+      if (!c.prohibited) {			  // just return clause
+        Query clone = (Query)c.query.clone();     // have to clone to boost
         clone.setBoost(getBoost() * clone.getBoost());
-        return clone.createWeight(searcher);
+        return clone;
       }
     }
-    return new BooleanWeight(searcher);
+
+    BooleanQuery clone = (BooleanQuery)this.clone(); // recursively clone
+    boolean changed = false;
+    for (int i = 0 ; i < clauses.size(); i++) {
+      BooleanClause c = (BooleanClause)clauses.elementAt(i);
+      Query q = c.query.rewrite(reader);
+      if (q != c.query) {                         // rewrote
+        changed = true;                           // replace in clone
+        clone.clauses.setElementAt
+          (new BooleanClause(q, c.required, c.prohibited), i);
+      }
+    }
+    if (changed)
+      return clone;                               // clauses rewrote
+    else
+      return this;                                // no clauses rewrote
+  }
+
+
+  public Object clone() {
+    BooleanQuery clone = (BooleanQuery)super.clone();
+    clone.clauses = (Vector)this.clauses.clone();
+    return clone;
   }
 
   /** Prints a user-readable version of this query. */
diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/Query.java b/lucene/java/trunk/src/java/org/apache/lucene/search/Query.java
index c89505fc..055b4822 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/Query.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/Query.java
@@ -127,11 +127,7 @@ public Weight weight(Searcher searcher)
     return weight;
   }
 
-  /** Expert: called to re-write queries into primitive queries.
-   *
-   * <p>Only implemented by derived queries, with no {@link
-   * #createWeight(Searcher)} implementatation..
-   */
+  /** Expert: called to re-write queries into primitive queries. */
   public Query rewrite(IndexReader reader) throws IOException {
     return this;
   }
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/search/TestWildcard.java b/lucene/java/trunk/src/test/org/apache/lucene/search/TestWildcard.java
index 2a2c9fdb..39fa9780 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/search/TestWildcard.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/search/TestWildcard.java
@@ -103,6 +103,14 @@ public void testAsterisk()
         Query query2 = new WildcardQuery(new Term("body", "metal*"));
         Query query3 = new WildcardQuery(new Term("body", "m*tal"));
         Query query4 = new WildcardQuery(new Term("body", "m*tal*"));
+        Query query5 = new WildcardQuery(new Term("body", "m*tals"));
+
+        BooleanQuery query6 = new BooleanQuery();
+        query6.add(query5, false, false);
+
+        BooleanQuery query7 = new BooleanQuery();
+        query7.add(query3, false, false);
+        query7.add(query5, false, false);
 
 	Hits result;
 
@@ -117,6 +125,15 @@ public void testAsterisk()
 
 	result = searcher.search(query4);
 	assertEquals(2, result.length());
+
+        result = searcher.search(query5);
+	assertEquals(1, result.length());
+
+        result = searcher.search(query6);
+	assertEquals(1, result.length());
+
+        result = searcher.search(query7);
+	assertEquals(2, result.length());
     }
 
     public void testQuestionmark()
