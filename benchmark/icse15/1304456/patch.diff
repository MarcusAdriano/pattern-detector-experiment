diff --git a/lucene/dev/branches/branch_3x/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/AbstractEmbeddedSolrServerTestCase.java b/lucene/dev/branches/branch_3x/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/AbstractEmbeddedSolrServerTestCase.java
index 4c79e73b..4920e921 100644
--- a/lucene/dev/branches/branch_3x/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/AbstractEmbeddedSolrServerTestCase.java
+++ b/lucene/dev/branches/branch_3x/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/AbstractEmbeddedSolrServerTestCase.java
@@ -1 +1,101 @@
   Merged /lucene/dev/trunk/solr/core:r1304441
+package org.apache.solr.client.solrj.embedded;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.util.LuceneTestCase;
+import org.apache.solr.SolrTestCaseJ4;
+import org.apache.solr.client.solrj.SolrServer;
+import org.apache.solr.core.CoreContainer;
+import org.apache.solr.util.AbstractSolrTestCase;
+import org.junit.After;
+import org.junit.Before;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.File;
+
+public abstract class AbstractEmbeddedSolrServerTestCase extends LuceneTestCase {
+
+  protected static Logger log = LoggerFactory.getLogger(AbstractEmbeddedSolrServerTestCase.class);
+
+  protected static final File SOLR_HOME = SolrTestCaseJ4.getFile("solrj/solr/shared");
+
+  protected CoreContainer cores = null;
+  protected File tempDir;
+
+  private void createTempDir() {
+    tempDir = new File(TEMP_DIR, "solrtest-" + getTestClass().getSimpleName() + "-" + System.currentTimeMillis());
+    tempDir.mkdirs();
+  }
+
+  @Override
+  @Before
+  public void setUp() throws Exception {
+    super.setUp();
+
+    System.setProperty("solr.solr.home", SOLR_HOME.getAbsolutePath());
+
+    //The index is always stored within a temporary directory
+    createTempDir();
+    System.setProperty("tempDir", tempDir.getAbsolutePath());
+
+    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), getSolrXml());
+  }
+  
+  protected abstract File getSolrXml() throws Exception;
+
+  @Override
+  @After
+  public void tearDown() throws Exception {
+    if (cores != null)
+      cores.shutdown();
+
+    deleteAdditionalFiles();
+
+    File dataDir = new File(tempDir,"data");
+    String skip = System.getProperty("solr.test.leavedatadir");
+    if (null != skip && 0 != skip.trim().length()) {
+      log.info("NOTE: per solr.test.leavedatadir, dataDir will not be removed: " + dataDir.getAbsolutePath());
+    } else {
+      //Removing the temporary directory which contains the index (all other files should have been removed before)
+      if (!AbstractSolrTestCase.recurseDelete(tempDir)) {
+        log.warn("!!!! WARNING: best effort to remove " + dataDir.getAbsolutePath() + " FAILED !!!!!");
+      }
+    }
+
+    super.tearDown();
+  }
+
+  protected void deleteAdditionalFiles() {
+
+  }
+
+  protected SolrServer getSolrCore0() {
+    return getSolrCore("core0");
+  }
+
+  protected SolrServer getSolrCore1() {
+    return getSolrCore("core1");
+  }
+
+  protected SolrServer getSolrCore(String name) {
+    return new EmbeddedSolrServer(cores, name);
+  }
+
+}
diff --git a/lucene/dev/branches/branch_3x/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer.java b/lucene/dev/branches/branch_3x/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer.java
index c2ed7544..9aa19c09 100644
--- a/lucene/dev/branches/branch_3x/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer.java
+++ b/lucene/dev/branches/branch_3x/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer.java
@@ -18,28 +18,20 @@
  * limitations under the License.
  */
 
-import java.io.File;
-import java.util.ArrayList;
-import java.util.List;
-
 import junit.framework.Assert;
-
-import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.SystemPropertiesRestoreRule;
-import org.apache.solr.SolrTestCaseJ4;
-import org.apache.solr.common.util.FileUtils;
-import org.apache.solr.core.CoreContainer;
 import org.apache.solr.core.SolrCore;
-import org.apache.solr.util.AbstractSolrTestCase;
-import org.junit.After;
-import org.junit.Before;
 import org.junit.Rule;
 import org.junit.rules.RuleChain;
 import org.junit.rules.TestRule;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-public class TestEmbeddedSolrServer extends LuceneTestCase {
+import java.io.File;
+import java.util.ArrayList;
+import java.util.List;
+
+public class TestEmbeddedSolrServer extends AbstractEmbeddedSolrServerTestCase {
 
   @Rule
   public TestRule solrTestRules = 
@@ -47,66 +39,23 @@
 
   protected static Logger log = LoggerFactory.getLogger(TestEmbeddedSolrServer.class);
   
-  protected CoreContainer cores = null;
-  private File home;
-  
-  public String getSolrHome() {
-    return "solrj/solr/shared";
-  }
-
-  public String getOrigSolrXml() {
-    return "solr.xml";
-  }
-
-  public String getSolrXml() {
-    return "test-solr.xml";
-  }
-  
-  @Override
-  @Before
-  public void setUp() throws Exception {
-    super.setUp();
-    System.setProperty("solr.solr.home", getSolrHome());
-    
-    home = SolrTestCaseJ4.getFile(getSolrHome());
-    System.setProperty("solr.solr.home", home.getAbsolutePath());
-
-    log.info("pwd: " + (new File(".")).getAbsolutePath());
-    File origSolrXml = new File(home, getOrigSolrXml());
-    File solrXml = new File(home, getSolrXml());
-    FileUtils.copyFile(origSolrXml, solrXml);
-    cores = new CoreContainer(home.getAbsolutePath(), solrXml);
+  protected EmbeddedSolrServer getSolrCore1() {
+    return new EmbeddedSolrServer(cores, "core1");
   }
 
   @Override
-  @After
-  public void tearDown() throws Exception {
-    if (cores != null) {
-      cores.shutdown();
-    }
-    File dataDir = new File(home,"data");
-    if (!AbstractSolrTestCase.recurseDelete(dataDir)) {
-      log.warn("!!!! WARNING: best effort to remove " + dataDir.getAbsolutePath() + " FAILED !!!!!");
-    }
-    super.tearDown();
-  }
-  
-  protected EmbeddedSolrServer getSolrCore0() {
-    return new EmbeddedSolrServer(cores, "core0");
-  }
-
-  protected EmbeddedSolrServer getSolrCore1() {
-    return new EmbeddedSolrServer(cores, "core1");
+  protected File getSolrXml() throws Exception {
+    return new File(SOLR_HOME, "solr.xml");
   }
   
   public void testGetCoreContainer() {
-    Assert.assertEquals(cores, getSolrCore0().getCoreContainer());
-    Assert.assertEquals(cores, getSolrCore1().getCoreContainer());
+    Assert.assertEquals(cores, ((EmbeddedSolrServer)getSolrCore0()).getCoreContainer());
+    Assert.assertEquals(cores, ((EmbeddedSolrServer)getSolrCore1()).getCoreContainer());
   }
   
   public void testShutdown() {
     
-    EmbeddedSolrServer solrServer = getSolrCore0();
+    EmbeddedSolrServer solrServer = (EmbeddedSolrServer)getSolrCore0();
     
     Assert.assertEquals(2, cores.getCores().size());
     List<SolrCore> solrCores = new ArrayList<SolrCore>();
@@ -122,7 +71,6 @@ public void testShutdown() {
     for (SolrCore solrCore : solrCores) {
       Assert.assertEquals(true, solrCore.isClosed());
     }
-    
   }
 
 }
diff --git a/lucene/dev/branches/branch_3x/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties.java b/lucene/dev/branches/branch_3x/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties.java
index 95c30f86..98f83c87 100644
--- a/lucene/dev/branches/branch_3x/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties.java
+++ b/lucene/dev/branches/branch_3x/solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties.java
@@ -17,17 +17,6 @@
 
 package org.apache.solr.client.solrj.embedded;
 
-import java.io.File;
-import java.io.FileInputStream;
-
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.xpath.XPath;
-import javax.xml.xpath.XPathConstants;
-import javax.xml.xpath.XPathExpressionException;
-import javax.xml.xpath.XPathFactory;
-
-import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.SystemPropertiesRestoreRule;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.client.solrj.SolrQuery;
@@ -40,9 +29,6 @@
 import org.apache.solr.common.SolrInputDocument;
 import org.apache.solr.common.util.FileUtils;
 import org.apache.solr.core.CoreContainer;
-import org.apache.solr.util.AbstractSolrTestCase;
-import org.junit.After;
-import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.RuleChain;
@@ -52,15 +38,24 @@
 import org.w3c.dom.Document;
 import org.w3c.dom.Node;
 
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.xpath.XPath;
+import javax.xml.xpath.XPathConstants;
+import javax.xml.xpath.XPathExpressionException;
+import javax.xml.xpath.XPathFactory;
+import java.io.File;
+import java.io.FileInputStream;
+
 /**
  * @version $Id$
  * @since solr 1.3
  */
-public class TestSolrProperties extends LuceneTestCase {
+public class TestSolrProperties extends AbstractEmbeddedSolrServerTestCase {
   protected static Logger log = LoggerFactory.getLogger(TestSolrProperties.class);
-  protected CoreContainer cores = null;
-  private File home;
-  private File solrXml;
+
+  private static final String SOLR_XML = "solr.xml";
+  private static final String SOLR_PERSIST_XML = "solr-persist.xml";
   
   @Rule
   public TestRule solrTestRules = 
@@ -68,61 +63,25 @@
 
   private static final XPathFactory xpathFactory = XPathFactory.newInstance();
 
-  public String getSolrHome() {
-    return "solrj/solr/shared";
-  }
-
-  public String getOrigSolrXml() {
-    return "solr.xml";
-  }
-
-  public String getSolrXml() {
-    return "test-solr.xml";
-  }
-  
   @Override
-  @Before
-  public void setUp() throws Exception {
-    super.setUp();
-    System.setProperty("solr.solr.home", getSolrHome());
-    
-    home = SolrTestCaseJ4.getFile(getSolrHome());
-    System.setProperty("solr.solr.home", home.getAbsolutePath());
-
-    log.info("pwd: " + (new File(".")).getAbsolutePath());
-    File origSolrXml = new File(home, getOrigSolrXml());
-    solrXml = new File(home, getSolrXml());
+  protected File getSolrXml() throws Exception {
+    //This test writes on the directory where the solr.xml is located. Better to copy the solr.xml to
+    //the temporary directory where we store the index
+    File origSolrXml = new File(SOLR_HOME, SOLR_XML);
+    File solrXml = new File(tempDir, SOLR_XML);
     FileUtils.copyFile(origSolrXml, solrXml);
-    cores = new CoreContainer(home.getAbsolutePath(), solrXml);
+    return solrXml;
   }
 
   @Override
-  @After
-  public void tearDown() throws Exception {
-    if (cores != null)
-      cores.shutdown();
-    File dataDir = new File(home,"data");
-    String skip = System.getProperty("solr.test.leavedatadir");
-    if (null != skip && 0 != skip.trim().length()) {
-      log.info("NOTE: per solr.test.leavedatadir, dataDir will not be removed: " + dataDir.getAbsolutePath());
-    } else {
-      if (!AbstractSolrTestCase.recurseDelete(dataDir)) {
-        log.warn("!!!! WARNING: best effort to remove " + dataDir.getAbsolutePath() + " FAILED !!!!!");
-      }
-    }
-    File persistedFile = new File(home,"solr-persist.xml");
-    assertTrue("Failed to delete "+persistedFile, persistedFile.delete());
-    assertTrue("Failed to delete "+solrXml, solrXml.delete());
-    super.tearDown();
-  }
-
-  protected SolrServer getSolrCore0() {
-    return new EmbeddedSolrServer(cores, "core0");
-  }
+  protected void deleteAdditionalFiles() {
+    super.deleteAdditionalFiles();
 
-
-  protected SolrServer getSolrCore1() {
-    return new EmbeddedSolrServer(cores, "core1");
+    //Cleans the solr.xml persisted while testing and the solr.xml copied to the temporary directory
+    File persistedFile = new File(tempDir, SOLR_PERSIST_XML);
+    assertTrue("Failed to delete "+persistedFile, persistedFile.delete());
+    File solrXml = new File(tempDir, SOLR_XML);
+    assertTrue("Failed to delete "+ solrXml, solrXml.delete());
   }
 
   protected SolrServer getSolrAdmin() {
@@ -133,10 +92,6 @@ protected SolrServer getRenamedSolrAdmin() {
     return new EmbeddedSolrServer(cores, "renamed_core");
   }
 
-  protected SolrServer getSolrCore(String name) {
-    return new EmbeddedSolrServer(cores, name);
-  }
-
   @Test
   public void testProperties() throws Exception {
     UpdateRequest up = new UpdateRequest();
@@ -208,11 +163,11 @@ public void testProperties() throws Exception {
     long after = mcr.getStartTime(name).getTime();
     assertTrue("should have more recent time: " + after + "," + before, after > before);
 
-    mcr = CoreAdminRequest.persist("solr-persist.xml", coreadmin);
+    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);
     
     // System.out.println(IOUtils.toString(new FileInputStream(new File(solrXml.getParent(), "solr-persist.xml"))));
     DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
-    FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), "solr-persist.xml"));
+    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));
     try {
       Document document = builder.parse(fis);
       assertTrue(exists("/solr/cores[@defaultCoreName='core0']", document));
@@ -221,9 +176,9 @@ public void testProperties() throws Exception {
     }
     
     CoreAdminRequest.renameCore(name, "renamed_core", coreadmin);
-    mcr = CoreAdminRequest.persist("solr-persist.xml", getRenamedSolrAdmin());
+    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());
     
-    fis = new FileInputStream(new File(solrXml.getParent(), "solr-persist.xml"));
+    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));
     try {
       Document document = builder.parse(fis);
       assertTrue(exists("/solr/cores/core[@name='renamed_core']", document));
