diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
index 8543389d..14e5bec7 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -55,6 +55,7 @@
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.utils.LatencyTracker;
 import org.apache.cassandra.utils.WrappedRunnable;
+import org.apache.cassandra.db.filter.QueryFilter;
 
 public class StorageProxy implements StorageProxyMBean
 {
@@ -507,8 +508,31 @@ public void runMayThrow() throws IOException
         for (AbstractBounds range : getRangeIterator(ranges, command.range.left))
         {
             List<InetAddress> liveEndpoints = StorageService.instance.getLiveNaturalEndpoints(command.keyspace, range.right);
-            DatabaseDescriptor.getEndpointSnitch().sortByProximity(FBUtilities.getLocalAddress(), liveEndpoints);
 
+            if (consistency_level == ConsistencyLevel.ONE && liveEndpoints.contains(FBUtilities.getLocalAddress())) 
+            {
+                if (logger.isDebugEnabled())
+                    logger.debug("local range slice");
+                ColumnFamilyStore cfs = Table.open(command.keyspace).getColumnFamilyStore(command.column_family);
+                try 
+                {
+                    rows.addAll(cfs.getRangeSlice(command.super_column,
+                                                  range,
+                                                  command.max_keys,
+                                                  QueryFilter.getFilter(command.predicate, cfs.getComparator())));
+                } 
+                catch (ExecutionException e) 
+                {
+                    throw new RuntimeException(e.getCause());
+                } 
+                catch (InterruptedException e) 
+                {
+                    throw new AssertionError(e);
+                }           
+            }
+            else 
+            {
+                DatabaseDescriptor.getEndpointSnitch().sortByProximity(FBUtilities.getLocalAddress(), liveEndpoints);
             RangeSliceCommand c2 = new RangeSliceCommand(command.keyspace, command.column_family, command.super_column, command.predicate, range, command.max_keys);
             Message message = c2.getMessage();
 
@@ -516,7 +540,8 @@ public void runMayThrow() throws IOException
             RangeSliceResponseResolver resolver = new RangeSliceResponseResolver(command.keyspace, liveEndpoints);
             AbstractReplicationStrategy rs = StorageService.instance.getReplicationStrategy(table);
             QuorumResponseHandler<List<Row>> handler = rs.getQuorumResponseHandler(resolver, consistency_level, table);
-	    // TODO bail early if live endpoints can't satisfy requested consistency level
+                // TODO bail early if live endpoints can't satisfy requested
+                // consistency level
             for (InetAddress endpoint : liveEndpoints)
             {
                 MessagingService.instance.sendRR(message, endpoint, handler);
@@ -539,8 +564,11 @@ public void runMayThrow() throws IOException
             }
             catch (DigestMismatchException e)
             {
-                throw new AssertionError(e); // no digests in range slices yet
+                    throw new AssertionError(e); // no digests in range slices
+                                                 // yet
+            }
             }
+          
             if (rows.size() >= command.max_keys)
                 break;
         }
