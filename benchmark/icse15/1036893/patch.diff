diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java b/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
index 80a0e153..e7cf9a8b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
@@ -147,22 +147,22 @@ public static void fixMaxId()
     public final AbstractType subcolumnComparator;    // like comparator, for supercolumns
 
     //OPTIONAL
-    public final String comment;                      // default none, for humans only
-    public final double rowCacheSize;                 // default 0
-    public final double keyCacheSize;                 // default 0.01
-    public final double readRepairChance;             // default 1.0 (always), chance [0.0,1.0] of read repair
-    public final int gcGraceSeconds;                  // default 864000 (ten days)
-    public final AbstractType defaultValidator;       // default none, use comparator types
-    public final Integer minCompactionThreshold;      // default 4
-    public final Integer maxCompactionThreshold;      // default 32
-    public final int rowCacheSavePeriodInSeconds;     // default 0 (off)
-    public final int keyCacheSavePeriodInSeconds;     // default 3600 (1 hour)
-    public final int memtableFlushAfterMins;          // default 60 
-    public final int memtableThroughputInMb;          // default based on heap size
-    public final double memtableOperationsInMillions; // default based on throughput
+    private String comment;                           // default none, for humans only
+    private double rowCacheSize;                      // default 0
+    private double keyCacheSize;                      // default 0.01
+    private double readRepairChance;                  // default 1.0 (always), chance [0.0,1.0] of read repair
+    private int gcGraceSeconds;                       // default 864000 (ten days)
+    private AbstractType defaultValidator;            // default none, use comparator types
+    private Integer minCompactionThreshold;           // default 4
+    private Integer maxCompactionThreshold;           // default 32
+    private int rowCacheSavePeriodInSeconds;          // default 0 (off)
+    private int keyCacheSavePeriodInSeconds;          // default 3600 (1 hour)
+    private int memtableFlushAfterMins;               // default 60 
+    private int memtableThroughputInMb;               // default based on heap size
+    private double memtableOperationsInMillions;      // default based on throughput
     // NOTE: if you find yourself adding members to this class, make sure you keep the convert methods in lockstep.
 
-    public final Map<ByteBuffer, ColumnDefinition> column_metadata;
+    private final Map<ByteBuffer, ColumnDefinition> column_metadata;
 
     private CFMetaData(String tableName,
                        String cfName,
@@ -437,6 +437,76 @@ public static CFMetaData inflate(org.apache.cassandra.avro.CfDef cf)
                               column_metadata);
     }
 
+    public String getComment()
+    {
+        return comment;
+    }
+    
+    public double getRowCacheSize()
+    {
+        return rowCacheSize;
+    }
+    
+    public double getKeyCacheSize()
+    {
+        return keyCacheSize;
+    }
+    
+    public double getReadRepairChance()
+    {
+        return readRepairChance;
+    }
+    
+    public int getGcGraceSeconds()
+    {
+        return gcGraceSeconds;
+    }
+
+    public AbstractType getDefaultValidator()
+    {
+        return defaultValidator;
+    }
+
+    public Integer getMinCompactionThreshold()
+    {
+        return minCompactionThreshold;
+    }
+
+    public Integer getMaxCompactionThreshold()
+    {
+        return maxCompactionThreshold;
+    }
+
+    public int getRowCacheSavePeriodInSeconds()
+    {
+        return rowCacheSavePeriodInSeconds;
+    }
+
+    public int getKeyCacheSavePeriodInSeconds()
+    {
+        return keyCacheSavePeriodInSeconds;
+    }
+
+    public int getMemtableFlushAfterMins()
+    {
+        return memtableFlushAfterMins;
+    }
+
+    public int getMemtableThroughputInMb()
+    {
+        return memtableThroughputInMb;
+    }
+
+    public double getMemtableOperationsInMillions()
+    {
+        return memtableOperationsInMillions;
+    }
+
+    public Map<ByteBuffer, ColumnDefinition> getColumn_metadata()
+    {
+        return Collections.unmodifiableMap(column_metadata);
+    }
+    
     public boolean equals(Object obj) 
     {
         if (obj == this)
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index 8397ba05..d04e24c8 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -945,7 +945,7 @@ public static AbstractType getSubComparator(String tableName, String cfName)
     public static int getKeysCachedFor(String tableName, String columnFamilyName, long expectedKeys)
     {
         CFMetaData cfm = getCFMetaData(tableName, columnFamilyName);
-        double v = (cfm == null) ? CFMetaData.DEFAULT_KEY_CACHE_SIZE : cfm.keyCacheSize;
+        double v = (cfm == null) ? CFMetaData.DEFAULT_KEY_CACHE_SIZE : cfm.getKeyCacheSize();
         return (int)Math.min(FBUtilities.absoluteFromFraction(v, expectedKeys), Integer.MAX_VALUE);
     }
 
@@ -955,7 +955,7 @@ public static int getKeysCachedFor(String tableName, String columnFamilyName, lo
     public static int getRowsCachedFor(String tableName, String columnFamilyName, long expectedRows)
     {
         CFMetaData cfm = getCFMetaData(tableName, columnFamilyName);
-        double v = (cfm == null) ? CFMetaData.DEFAULT_ROW_CACHE_SIZE : cfm.rowCacheSize;
+        double v = (cfm == null) ? CFMetaData.DEFAULT_ROW_CACHE_SIZE : cfm.getRowCacheSize();
         return (int)Math.min(FBUtilities.absoluteFromFraction(v, expectedRows), Integer.MAX_VALUE);
     }
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 6de33cda..fad4da72 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -161,15 +161,15 @@ public void reload()
         
         // only update these runtime-modifiable settings if they have not been modified.
         if (!minCompactionThreshold.isModified())
-            minCompactionThreshold = new DefaultInteger(metadata.minCompactionThreshold);
+            minCompactionThreshold = new DefaultInteger(metadata.getMinCompactionThreshold());
         if (!maxCompactionThreshold.isModified())
-            maxCompactionThreshold = new DefaultInteger(metadata.maxCompactionThreshold);
+            maxCompactionThreshold = new DefaultInteger(metadata.getMaxCompactionThreshold());
         if (!memtime.isModified())
-            memtime = new DefaultInteger(metadata.memtableFlushAfterMins);
+            memtime = new DefaultInteger(metadata.getMemtableFlushAfterMins());
         if (!memsize.isModified())
-            memsize = new DefaultInteger(metadata.memtableThroughputInMb);
+            memsize = new DefaultInteger(metadata.getMemtableThroughputInMb());
         if (!memops.isModified())
-            memops = new DefaultDouble(metadata.memtableOperationsInMillions);
+            memops = new DefaultDouble(metadata.getMemtableOperationsInMillions());
         
         // reset the memtable with new settings.
         try
@@ -190,7 +190,7 @@ public void reload()
         // drop indexes no longer needed
         Set<ByteBuffer> indexesToDrop = new HashSet<ByteBuffer>();
         for (ByteBuffer indexName : indexedColumns.keySet())
-               if (!metadata.column_metadata.containsKey(indexName))
+               if (!metadata.getColumn_metadata().containsKey(indexName))
                    indexesToDrop.add(indexName);
         for (ByteBuffer indexName : indexesToDrop)
         {
@@ -204,7 +204,7 @@ public void reload()
         // so don't bother with them.
         
         // add indexes that are new
-        for (Map.Entry<ByteBuffer, ColumnDefinition> entry : metadata.column_metadata.entrySet())
+        for (Map.Entry<ByteBuffer, ColumnDefinition> entry : metadata.getColumn_metadata().entrySet())
             if (!indexedColumns.containsKey(entry.getKey()) && entry.getValue().index_type != null)
                 addIndex(entry.getValue());
     }
@@ -215,11 +215,11 @@ private ColumnFamilyStore(Table table, String columnFamilyName, IPartitioner par
         this.table = table;
         columnFamily = columnFamilyName; 
         this.metadata = metadata;
-        this.minCompactionThreshold = new DefaultInteger(metadata.minCompactionThreshold);
-        this.maxCompactionThreshold = new DefaultInteger(metadata.maxCompactionThreshold);
-        this.memtime = new DefaultInteger(metadata.memtableFlushAfterMins);
-        this.memsize = new DefaultInteger(metadata.memtableThroughputInMb);
-        this.memops = new DefaultDouble(metadata.memtableOperationsInMillions);
+        this.minCompactionThreshold = new DefaultInteger(metadata.getMinCompactionThreshold());
+        this.maxCompactionThreshold = new DefaultInteger(metadata.getMaxCompactionThreshold());
+        this.memtime = new DefaultInteger(metadata.getMemtableFlushAfterMins());
+        this.memsize = new DefaultInteger(metadata.getMemtableThroughputInMb());
+        this.memops = new DefaultDouble(metadata.getMemtableOperationsInMillions());
         this.partitioner = partitioner;
         fileIndexGenerator.set(generation);
         memtable = new Memtable(this);
@@ -256,7 +256,7 @@ private ColumnFamilyStore(Table table, String columnFamilyName, IPartitioner par
 
         // create the private ColumnFamilyStores for the secondary column indexes
         indexedColumns = new ConcurrentSkipListMap<ByteBuffer, ColumnFamilyStore>(getComparator());
-        for (ColumnDefinition info : metadata.column_metadata.values())
+        for (ColumnDefinition info : metadata.getColumn_metadata().values())
         {
             if (info.index_type != null)
                 addIndex(info);
@@ -319,7 +319,7 @@ public void addIndex(final ColumnDefinition info)
         final CFMetaData indexedCfMetadata = CFMetaData.newIndexMetadata(table.name, columnFamily, info, columnComparator);
         ColumnFamilyStore indexedCfs = ColumnFamilyStore.createColumnFamilyStore(table,
                                                                                  indexedCfMetadata.cfName,
-                                                                                 new LocalPartitioner(metadata.column_metadata.get(info.name).validator),
+                                                                                 new LocalPartitioner(metadata.getColumn_metadata().get(info.name).validator),
                                                                                  indexedCfMetadata);
         // record that the column is supposed to be indexed, before we start building it
         // (so we don't omit indexing writes that happen during build process)
@@ -503,8 +503,8 @@ public static void scrubDataDirectories(String table, String columnFamily)
     public void initRowCache()
     {
         String msgSuffix = String.format(" row cache for %s of %s", columnFamily, table.name);
-        int rowCacheSavePeriodInSeconds = DatabaseDescriptor.getTableMetaData(table.name).get(columnFamily).rowCacheSavePeriodInSeconds;
-        int keyCacheSavePeriodInSeconds = DatabaseDescriptor.getTableMetaData(table.name).get(columnFamily).keyCacheSavePeriodInSeconds;
+        int rowCacheSavePeriodInSeconds = DatabaseDescriptor.getTableMetaData(table.name).get(columnFamily).getRowCacheSavePeriodInSeconds();
+        int keyCacheSavePeriodInSeconds = DatabaseDescriptor.getTableMetaData(table.name).get(columnFamily).getKeyCacheSavePeriodInSeconds();
 
         long start = System.currentTimeMillis();
         logger.info(String.format("loading%s", msgSuffix));
@@ -1068,7 +1068,7 @@ public ColumnFamily getColumnFamily(QueryFilter filter)
 
     public int gcBefore()
     {
-        return (int) (System.currentTimeMillis() / 1000) - metadata.gcGraceSeconds;
+        return (int) (System.currentTimeMillis() / 1000) - metadata.getGcGraceSeconds();
     }
 
     private ColumnFamily cacheRow(DecoratedKey key)
@@ -1274,7 +1274,7 @@ private ColumnFamily getTopLevelColumns(QueryFilter filter, int gcBefore)
         Iterables.addAll(sstables, ssTables);
 
         RowIterator iterator = RowIteratorFactory.getIterator(memtables, sstables, startWith, stopAt, filter, getComparator(), this);
-        int gcBefore = (int)(System.currentTimeMillis() / 1000) - metadata.gcGraceSeconds;
+        int gcBefore = (int)(System.currentTimeMillis() / 1000) - metadata.getGcGraceSeconds();
 
         try
         {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java b/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java
index 56e3dc23..e391c837 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java
@@ -121,7 +121,7 @@ public Integer call() throws IOException
                             // if we have too many to compact all at once, compact older ones first -- this avoids
                             // re-compacting files we just created.
                             Collections.sort(sstables);
-                            return doCompaction(cfs, sstables.subList(0, Math.min(sstables.size(), maxThreshold)), (int) (System.currentTimeMillis() / 1000) - cfs.metadata.gcGraceSeconds);
+                            return doCompaction(cfs, sstables.subList(0, Math.min(sstables.size(), maxThreshold)), (int) (System.currentTimeMillis() / 1000) - cfs.metadata.getGcGraceSeconds());
                         }
                     }
                 }
@@ -182,7 +182,7 @@ public Object call() throws IOException
 
     public void performMajor(final ColumnFamilyStore cfStore) throws InterruptedException, ExecutionException
     {
-        submitMajor(cfStore, 0, (int) (System.currentTimeMillis() / 1000) - cfStore.metadata.gcGraceSeconds).get();
+        submitMajor(cfStore, 0, (int) (System.currentTimeMillis() / 1000) - cfStore.metadata.getGcGraceSeconds()).get();
     }
 
     public Future<Object> submitMajor(final ColumnFamilyStore cfStore, final long skip, final int gcBefore)
@@ -387,7 +387,7 @@ private static long getMaxDataAge(Collection<SSTableReader> sstables)
           logger.debug("Expected bloom filter size : " + expectedBloomFilterSize);
 
         SSTableWriter writer = null;
-        CompactionIterator ci = new AntiCompactionIterator(cfs, sstables, ranges, (int) (System.currentTimeMillis() / 1000) - cfs.metadata.gcGraceSeconds, cfs.isCompleteSSTables(sstables));
+        CompactionIterator ci = new AntiCompactionIterator(cfs, sstables, ranges, (int) (System.currentTimeMillis() / 1000) - cfs.metadata.getGcGraceSeconds(), cfs.isCompleteSSTables(sstables));
         Iterator<AbstractCompactedRow> nni = new FilterIterator(ci, PredicateUtils.notNullPredicate());
         executor.beginCompaction(cfs, ci);
 
@@ -596,7 +596,7 @@ public SSTableReader call() throws IOException
     {
         public ValidationCompactionIterator(ColumnFamilyStore cfs) throws IOException
         {
-            super(cfs, cfs.getSSTables(), (int) (System.currentTimeMillis() / 1000) - cfs.metadata.gcGraceSeconds, true);
+            super(cfs, cfs.getSSTables(), (int) (System.currentTimeMillis() / 1000) - cfs.metadata.getGcGraceSeconds(), true);
         }
 
         @Override
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/RowIteratorFactory.java b/cassandra/trunk/src/java/org/apache/cassandra/db/RowIteratorFactory.java
index f4c19e4b..9c4456af 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/RowIteratorFactory.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/RowIteratorFactory.java
@@ -107,7 +107,7 @@ public boolean apply(IColumnIterator row)
         // reduce rows from all sources into a single row
         ReducingIterator<IColumnIterator, Row> reduced = new ReducingIterator<IColumnIterator, Row>(collated)
         {
-            private final int gcBefore = (int) (System.currentTimeMillis() / 1000) - cfs.metadata.gcGraceSeconds;
+            private final int gcBefore = (int) (System.currentTimeMillis() / 1000) - cfs.metadata.getGcGraceSeconds();
             private final List<IColumnIterator> colIters = new ArrayList<IColumnIterator>();
             private DecoratedKey key;
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java b/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java
index 19146e6d..5217d83a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/RowMutation.java
@@ -41,7 +41,6 @@
 import org.apache.cassandra.thrift.Deletion;
 import org.apache.cassandra.thrift.Mutation;
 import org.apache.cassandra.utils.FBUtilities;
-import org.apache.commons.lang.ArrayUtils;
 import org.apache.commons.lang.StringUtils;
 
 public class RowMutation
@@ -105,7 +104,7 @@ void addHints(RowMutation rm) throws IOException
         {
             ByteBuffer combined = HintedHandOffManager.makeCombinedName(rm.getTable(), cf.metadata().cfName);
             QueryPath path = new QueryPath(HintedHandOffManager.HINTS_CF, rm.key(), combined);
-            add(path, FBUtilities.EMPTY_BYTE_BUFFER, System.currentTimeMillis(), cf.metadata().gcGraceSeconds);
+            add(path, FBUtilities.EMPTY_BYTE_BUFFER, System.currentTimeMillis(), cf.metadata().getGcGraceSeconds());
         }
     }
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/UpdateColumnFamily.java b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/UpdateColumnFamily.java
index 01fbdc3e..a739e348 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/migration/UpdateColumnFamily.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/migration/UpdateColumnFamily.java
@@ -12,7 +12,6 @@
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.config.KSMetaData;
 import org.apache.cassandra.db.ColumnFamilyStore;
-import org.apache.cassandra.db.CompactionManager;
 import org.apache.cassandra.db.SystemTable;
 import org.apache.cassandra.db.Table;
 import org.apache.cassandra.utils.FBUtilities;
@@ -93,12 +92,12 @@ void applyModels() throws IOException
                 table.reloadCf(newCfm.cfId);
     
                 // clean up obsolete index data files
-                for (Map.Entry<ByteBuffer, ColumnDefinition> entry : oldCfm.column_metadata.entrySet())
+                for (Map.Entry<ByteBuffer, ColumnDefinition> entry : oldCfm.getColumn_metadata().entrySet())
                 {
                     ByteBuffer column = entry.getKey();
                     ColumnDefinition def = entry.getValue();
                     if (def.index_type != null
-                        && (!newCfm.column_metadata.containsKey(column) || newCfm.column_metadata.get(column).index_type == null))
+                        && (!newCfm.getColumn_metadata().containsKey(column) || newCfm.getColumn_metadata().get(column).index_type == null))
                     {
                         ColumnFamilyStore indexCfs = oldCfs.getIndexedColumnFamilyStore(column);
                         SystemTable.setIndexRemoved(table.name, indexCfs.columnFamily);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
index ee7a3853..9794b2b6 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -597,7 +597,7 @@ public void response(Message msg)
     private static boolean randomlyReadRepair(ReadCommand command)
     {
         CFMetaData cfmd = DatabaseDescriptor.getTableMetaData(command.table).get(command.getColumnFamilyName());
-        return cfmd.readRepairChance > random.nextDouble();
+        return cfmd.getReadRepairChance() > random.nextDouble();
     }
 
     public long getReadOperations()
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index ed76ba94..ddef2a3b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -1982,17 +1982,17 @@ public String exportSchema() throws IOException
                 RawColumnFamily rcf = new RawColumnFamily();
                 rcf.name = cfm.cfName;
                 rcf.compare_with = cfm.comparator.getClass().getName();
-                rcf.default_validation_class = cfm.defaultValidator.getClass().getName();
+                rcf.default_validation_class = cfm.getDefaultValidator().getClass().getName();
                 rcf.compare_subcolumns_with = cfm.subcolumnComparator == null ? null : cfm.subcolumnComparator.getClass().getName();
                 rcf.column_type = cfm.cfType;
-                rcf.comment = cfm.comment;
-                rcf.keys_cached = cfm.keyCacheSize;
-                rcf.read_repair_chance = cfm.readRepairChance;
-                rcf.gc_grace_seconds = cfm.gcGraceSeconds;
-                rcf.rows_cached = cfm.rowCacheSize;
-                rcf.column_metadata = new RawColumnDefinition[cfm.column_metadata.size()];
+                rcf.comment = cfm.getComment();
+                rcf.keys_cached = cfm.getKeyCacheSize();
+                rcf.read_repair_chance = cfm.getReadRepairChance();
+                rcf.gc_grace_seconds = cfm.getGcGraceSeconds();
+                rcf.rows_cached = cfm.getRowCacheSize();
+                rcf.column_metadata = new RawColumnDefinition[cfm.getColumn_metadata().size()];
                 int j = 0;
-                for (ColumnDefinition cd : cfm.column_metadata.values())
+                for (ColumnDefinition cd : cfm.getColumn_metadata().values())
                 {
                     RawColumnDefinition rcd = new RawColumnDefinition();
                     rcd.index_name = cd.index_name;
diff --git a/cassandra/trunk/test/long/org/apache/cassandra/db/LongCompactionSpeedTest.java b/cassandra/trunk/test/long/org/apache/cassandra/db/LongCompactionSpeedTest.java
index 0855a51a..735349b6 100644
--- a/cassandra/trunk/test/long/org/apache/cassandra/db/LongCompactionSpeedTest.java
+++ b/cassandra/trunk/test/long/org/apache/cassandra/db/LongCompactionSpeedTest.java
@@ -95,7 +95,7 @@ protected void testCompaction(int sstableCount, int rowsPerSSTable, int colsPerR
         Thread.sleep(1000);
 
         long start = System.currentTimeMillis();
-        CompactionManager.instance.doCompaction(store, sstables, (int) (System.currentTimeMillis() / 1000) - DatabaseDescriptor.getCFMetaData(TABLE1, "Standard1").gcGraceSeconds);
+        CompactionManager.instance.doCompaction(store, sstables, (int) (System.currentTimeMillis() / 1000) - DatabaseDescriptor.getCFMetaData(TABLE1, "Standard1").getGcGraceSeconds());
         System.out.println(String.format("%s: sstables=%d rowsper=%d colsper=%d: %d ms",
                                          this.getClass().getName(),
                                          sstableCount,
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
index e422c519..212ded31 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
@@ -312,7 +312,7 @@ public void testIndexCreate() throws IOException, ConfigurationException, Interr
         rm.apply();
 
         ColumnFamilyStore cfs = table.getColumnFamilyStore("Indexed2");
-        ColumnDefinition old = cfs.metadata.column_metadata.get(ByteBufferUtil.bytes("birthdate"));
+        ColumnDefinition old = cfs.metadata.getColumn_metadata().get(ByteBufferUtil.bytes("birthdate"));
         ColumnDefinition cd = new ColumnDefinition(old.name, old.validator.getClass().getName(), IndexType.KEYS, "birthdate_index");
         cfs.addIndex(cd);
         while (!SystemTable.isIndexBuilt("Keyspace1", cfs.getIndexedColumnFamilyStore(ByteBufferUtil.bytes("birthdate")).columnFamily))
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
index b6206b0e..0f7d443a 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/DefsTest.java
@@ -552,12 +552,12 @@ public void testUpdateColumnFamilyNoIndexes() throws ConfigurationException, IOE
         cf_def.setKeyspace(cf.tableName);
         cf_def.setName(cf.cfName);
         cf_def.setColumn_type(cf.cfType.name());
-        cf_def.setComment(cf.comment);
+        cf_def.setComment(cf.getComment());
         cf_def.setComparator_type(cf.comparator.getClass().getName());
         cf_def.setSubcomparator_type(null);
-        cf_def.setGc_grace_seconds(cf.gcGraceSeconds);
-        cf_def.setKey_cache_size(cf.keyCacheSize);
-        cf_def.setRead_repair_chance(cf.readRepairChance);
+        cf_def.setGc_grace_seconds(cf.getGcGraceSeconds());
+        cf_def.setKey_cache_size(cf.getKeyCacheSize());
+        cf_def.setRead_repair_chance(cf.getReadRepairChance());
         cf_def.setRow_cache_size(43.3);
         cf_def.setColumn_metadata(new ArrayList<ColumnDef>());
         cf_def.setDefault_validation_class("BytesType");
@@ -608,12 +608,12 @@ public void testUpdateColumnFamilyNoIndexes() throws ConfigurationException, IOE
         // can't test changing the reconciler because there is only one impl.
         
         // check the cumulative affect.
-        assert DatabaseDescriptor.getCFMetaData(cf.tableName, cf.cfName).comment.equals(cf_def.comment);
-        assert DatabaseDescriptor.getCFMetaData(cf.tableName, cf.cfName).rowCacheSize == cf_def.row_cache_size;
-        assert DatabaseDescriptor.getCFMetaData(cf.tableName, cf.cfName).keyCacheSize == cf_def.key_cache_size;
-        assert DatabaseDescriptor.getCFMetaData(cf.tableName, cf.cfName).readRepairChance == cf_def.read_repair_chance;
-        assert DatabaseDescriptor.getCFMetaData(cf.tableName, cf.cfName).gcGraceSeconds == cf_def.gc_grace_seconds;
-        assert DatabaseDescriptor.getCFMetaData(cf.tableName, cf.cfName).defaultValidator == UTF8Type.instance;
+        assert DatabaseDescriptor.getCFMetaData(cf.tableName, cf.cfName).getComment().equals(cf_def.comment);
+        assert DatabaseDescriptor.getCFMetaData(cf.tableName, cf.cfName).getRowCacheSize() == cf_def.row_cache_size;
+        assert DatabaseDescriptor.getCFMetaData(cf.tableName, cf.cfName).getKeyCacheSize() == cf_def.key_cache_size;
+        assert DatabaseDescriptor.getCFMetaData(cf.tableName, cf.cfName).getReadRepairChance() == cf_def.read_repair_chance;
+        assert DatabaseDescriptor.getCFMetaData(cf.tableName, cf.cfName).getGcGraceSeconds() == cf_def.gc_grace_seconds;
+        assert DatabaseDescriptor.getCFMetaData(cf.tableName, cf.cfName).getDefaultValidator() == UTF8Type.instance;
         
         // make sure some invalid operations fail.
         int oldId = cf_def.id;
