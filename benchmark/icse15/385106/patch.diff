diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
index e973dc8a..46b838f0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/DataDictionary.java
@@ -179,7 +179,7 @@
 	 *
 	 * @param nested true iff this is a nested data dictionary context.
 	 */
-	DataDictionaryContext pushDataDictionaryContext(ContextManager cm, boolean nested);
+	DataDictionaryContext pushDataDictionaryContext(ContextManager cm);
 
 	/**
 	 * Clear all of the DataDictionary caches.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryContextImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryContextImpl.java
index d288f499..a4181b13 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryContextImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryContextImpl.java
@@ -42,11 +42,6 @@
 	extends ContextImpl
 	implements DataDictionaryContext
 {
-	//
-	// True means this is a nested data dictionary. We pop a nested data dictionary
-	// when we clean up an error.
-	private final boolean nested;
-
 	//
 	// DataDictionaryContext interface
 	//
@@ -61,18 +56,14 @@ public DataDictionary getDataDictionary()
 
 	public void cleanupOnError(Throwable error)
 	{
-		if (!nested) return;
 		if (error instanceof StandardException)
 		{
 			StandardException se = (StandardException)error;
-		 	if (se.getSeverity() >= ExceptionSeverity.STATEMENT_SEVERITY)
-				popMe();
+		 	if (se.getSeverity() < ExceptionSeverity.SESSION_SEVERITY)
+				return;
 		}
-		else
-		{
 			popMe();
 		}
-	}
 
 	//
 	// class interface
@@ -81,14 +72,12 @@ public void cleanupOnError(Throwable error)
 	// to be saved when the context
 	// is created
 	
-	DataDictionaryContextImpl(ContextManager cm, DataDictionary dataDictionary,
-									 boolean nested)
+	DataDictionaryContextImpl(ContextManager cm, DataDictionary dataDictionary)
 	{
 		super(cm, DataDictionaryContext.CONTEXT_ID);
 
 		this.dataDictionary = dataDictionary;
-		this.nested = nested;
 	}
 
-	DataDictionary			dataDictionary;
+	final DataDictionary			dataDictionary;
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
index 433f8e1d..a3469cb4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
@@ -617,7 +617,7 @@ public void boot(boolean create, Properties startParams)
 			SanityManager.ASSERT((cm != null), "Failed to get current ContextManager");
 
 		/* push a datadictionary context onto this stack */
-		pushDataDictionaryContext(cm, false);
+		pushDataDictionaryContext(cm);
 
 		// RESOLVE other non-StandardException errors.
 		bootingTC = null;
@@ -1157,11 +1157,10 @@ public ExecutionFactory	getExecutionFactory()
 	/**
 	 * @see DataDictionary#pushDataDictionaryContext
 	 */
-	public DataDictionaryContext pushDataDictionaryContext(ContextManager contextManager,
-														   boolean nested)
+	public DataDictionaryContext pushDataDictionaryContext(ContextManager contextManager)
 	{
 		DataDictionaryContextImpl dataDictionaryContextImpl =
-			new DataDictionaryContextImpl(contextManager, this, nested);
+			new DataDictionaryContextImpl(contextManager, this);
 
 		return dataDictionaryContextImpl;
 	}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionFactory.java
index 87a74034..730f576d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionFactory.java
@@ -273,7 +273,7 @@ public DataValueFactory		getDataValueFactory() {
 
 	protected void pushDataDictionaryContext(ContextManager cm) {
 		// we make sure there is a data dictionary context in place.
-		dd.pushDataDictionaryContext(cm, false);
+		dd.pushDataDictionaryContext(cm);
 	}
 
 	/*
