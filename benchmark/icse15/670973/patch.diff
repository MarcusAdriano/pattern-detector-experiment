diff --git a/lucene/solr/trunk/src/java/org/apache/solr/core/SolrResourceLoader.java b/lucene/solr/trunk/src/java/org/apache/solr/core/SolrResourceLoader.java
index 56353098..e4d1841b 100644
--- a/lucene/solr/trunk/src/java/org/apache/solr/core/SolrResourceLoader.java
+++ b/lucene/solr/trunk/src/java/org/apache/solr/core/SolrResourceLoader.java
@@ -64,6 +64,7 @@
 
   private final ClassLoader classLoader;
   private final String instanceDir;
+  private String dataDir;
   
   private final List<SolrCoreAware> waitingForCore = new ArrayList<SolrCoreAware>();
   private final List<ResourceLoaderAware> waitingForResources = new ArrayList<ResourceLoaderAware>();
@@ -123,6 +124,10 @@ public String getConfigDir() {
     return instanceDir + "conf/";
   }
 
+  public String getDataDir()    {
+    return dataDir;
+  }
+
   /** Opens a schema resource by its name.
    * Override this method to customize loading schema resources.
    *@return the stream for the named schema
@@ -283,6 +288,7 @@ public Object newInstance(String cname, String ... subpackages) {
    */
   public void inform(SolrCore core) 
   {
+    this.dataDir = core.getDataDir();
     for( SolrCoreAware aware : waitingForCore ) {
       aware.inform( core );
     }
diff --git a/lucene/solr/trunk/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java b/lucene/solr/trunk/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java
index 3469cc7c..fd384950 100644
--- a/lucene/solr/trunk/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java
+++ b/lucene/solr/trunk/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java
@@ -1,23 +1,24 @@
 package org.apache.solr.spelling;
 
+import java.io.File;
+import java.io.IOException;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+
 import org.apache.lucene.analysis.Token;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.spell.Dictionary;
+import org.apache.lucene.search.spell.LevensteinDistance;
 import org.apache.lucene.search.spell.SpellChecker;
 import org.apache.lucene.search.spell.StringDistance;
-import org.apache.lucene.search.spell.LevensteinDistance;
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.store.FSDirectory;
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.core.SolrResourceLoader;
 
-import java.io.IOException;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.List;
-
 
 /**
  * Abstract base class for all Lucene based spell checking implementations.
@@ -51,6 +52,12 @@
   public String init(NamedList config, SolrResourceLoader loader) {
     super.init(config, loader);
     indexDir = (String) config.get(INDEX_DIR);
+    //If indexDir is relative then create index inside core.getDataDir()
+    if (indexDir != null)   {
+      if (!new File(indexDir).isAbsolute()) {
+        indexDir = loader.getDataDir() + File.separator + indexDir;
+      }
+    }
     sourceLocation = (String) config.get(LOCATION);
     field = (String) config.get(FIELD);
     String strDistanceName = (String)config.get(STRING_DISTANCE);
diff --git a/lucene/solr/trunk/src/java/org/apache/solr/spelling/FileBasedSpellChecker.java b/lucene/solr/trunk/src/java/org/apache/solr/spelling/FileBasedSpellChecker.java
index 0ef145f4..5305be16 100644
--- a/lucene/solr/trunk/src/java/org/apache/solr/spelling/FileBasedSpellChecker.java
+++ b/lucene/solr/trunk/src/java/org/apache/solr/spelling/FileBasedSpellChecker.java
@@ -115,7 +115,7 @@ private void loadExternalFileDictionary(IndexSchema schema, SolrResourceLoader l
         analyzer = fieldType.getQueryAnalyzer();
       } else {
         log.warning("No fieldType: " + fieldTypeName
-                + " found for dictionary: " + name);
+                + " found for dictionary: " + name + ".  Using WhitespaceAnalzyer.");
         analyzer = new WhitespaceAnalyzer();
 
         // check if character encoding is defined
diff --git a/lucene/solr/trunk/src/test/org/apache/solr/handler/component/SpellCheckComponentTest.java b/lucene/solr/trunk/src/test/org/apache/solr/handler/component/SpellCheckComponentTest.java
index dda8e87d..9ce383cd 100644
--- a/lucene/solr/trunk/src/test/org/apache/solr/handler/component/SpellCheckComponentTest.java
+++ b/lucene/solr/trunk/src/test/org/apache/solr/handler/component/SpellCheckComponentTest.java
@@ -17,6 +17,11 @@
 
 package org.apache.solr.handler.component;
 
+import java.io.File;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+
 import org.apache.solr.common.params.CommonParams;
 import org.apache.solr.common.params.MapSolrParams;
 import org.apache.solr.common.params.ModifiableSolrParams;
@@ -27,12 +32,8 @@
 import org.apache.solr.request.SolrQueryRequest;
 import org.apache.solr.request.SolrQueryResponse;
 import org.apache.solr.request.SolrRequestHandler;
-import org.apache.solr.util.AbstractSolrTestCase;
 import org.apache.solr.spelling.IndexBasedSpellChecker;
-
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Map;
+import org.apache.solr.util.AbstractSolrTestCase;
 
 /**
  * @since solr 1.3
@@ -140,8 +141,6 @@ public void testExtendedResultsCount() throws Exception {
 
     idx = blue.indexOf("suggestion", idx + 1);
     assertTrue(idx + " does not equal: " + -1, idx == -1);
-
-
   }
 
   public void test() throws Exception {
@@ -282,6 +281,37 @@ public void testInit() throws Exception {
 
   }
 
+  @SuppressWarnings("unchecked")
+  public void testRelativeIndexDirLocation() throws Exception {
+    SolrCore core = h.getCore();
+    Map<String, String> args = new HashMap<String, String>();
+
+    args.put(CommonParams.Q, "test");
+    args.put(CommonParams.QT, "spellCheckCompRH");
+    args.put(SpellCheckComponent.SPELLCHECK_BUILD, "true");
+    args.put(SpellCheckComponent.COMPONENT_NAME, "true");
+    SolrQueryRequest req = new LocalSolrQueryRequest(core, new MapSolrParams(
+        args));
+
+    File indexDir = new File(core.getDataDir() + File.separator
+        + "spellchecker1");
+    assertTrue(
+        "spellcheckerIndexDir was not created inside the configured value for dataDir folder as configured in solrconfig.xml",
+        indexDir.exists());
+    
+    indexDir = new File(core.getDataDir() + File.separator
+        + "spellchecker2");
+    assertTrue(
+        "spellcheckerIndexDir was not created inside the configured value for dataDir folder as configured in solrconfig.xml",
+        indexDir.exists());
+    
+    indexDir = new File(core.getDataDir() + File.separator
+        + "spellchecker3");
+    assertTrue(
+        "spellcheckerIndexDir was not created inside the configured value for dataDir folder as configured in solrconfig.xml",
+        indexDir.exists());
+  }
+
   // TODO: add more tests for various spelling options
 
 }
