diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
index 4e37b1e7..aa5ae4a7 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassAdapter.java
@@ -131,57 +131,88 @@ public void visit(int version, int access, String name, String signature, String
     staticAdapter = new GeneratorAdapter(ACC_STATIC,
         new Method("<clinit>", Type.VOID_TYPE, NO_ARGS), null, null, cv);
 
-    // add a constructor method that takes an invocation handler as an
-    // argument
-    Method m = new Method("<init>", Type.VOID_TYPE, new Type[] { IH_TYPE });
+    // add a zero args constructor method
+    Method m = new Method("<init>", Type.VOID_TYPE, NO_ARGS);
     GeneratorAdapter methodAdapter = new GeneratorAdapter(ACC_PUBLIC, m, null, null, cv);
     // loadthis
     methodAdapter.loadThis();
-    // if we have java.* as a supertype call that zero args constructor
-    if (superclassBinaryName.startsWith("java.") || superclassBinaryName.startsWith("javax.")) {
-      methodAdapter.invokeConstructor(Type.getType(superclassClass), new Method("<init>",
-          Type.VOID_TYPE, NO_ARGS));
-    }
-    else {
-         try {
-            // if the superclass has a no-arg constructor that we can call,
-            // we need to call it
-            // otherwise invoke the java.lang.Object no args constructor.
-            // on the most recent versions of the JDK (1.6.0_u34 and
-            // 1.7.0_u5 and newer). For the
-            // newer JDK's, there is NOTHING we can do and the proxy will
-            // fail.
-            Constructor<?> cons = superclassClass.getDeclaredConstructor();
-            if (!Modifier.isPrivate(cons.getModifiers())) {
-               // This should work ...
+    // List the constructors in the superclass.
+    Constructor<?>[] constructors = superclassClass.getDeclaredConstructors();
+    // Check that we've got at least one constructor, and get the 1st one in the list.
+    if (constructors.length > 0) {
+      // We now need to construct the proxy class as though it is going to invoke the superclasses constructor.
+      // We do this because we can no longer call the java.lang.Object() zero arg constructor as the JVM now throws a VerifyError.
+      // So what we do is build up the calling of the superclasses constructor using nulls and default values. This means that the 
+      // class bytes can be verified by the JVM, and then in the ProxySubclassGenerator, we load the class without invoking the 
+      // constructor. 
+      Method constructor = Method.getMethod(constructors[0].toGenericString());
+      
+      Type[] argTypes = constructor.getArgumentTypes();
+      if (argTypes.length == 0) {
                methodAdapter.invokeConstructor(Type.getType(superclassClass), new Method("<init>", Type.VOID_TYPE, NO_ARGS));
             } else {
-               // We have a private constructor, so this may work, but not on
-               // recent HotSpot VMs
-               LOGGER.debug(NLS.MESSAGES.getMessage("no.nonprivate.constructor", superclassClass.getName()));
-               methodAdapter.invokeConstructor(OBJECT_TYPE, new Method("<init>", Type.VOID_TYPE, NO_ARGS));
-            }
-
-         } catch (NoSuchMethodException e) {
-            // There's no no-args constructor, so may work, but not on recent
-            // HotSpot VMs
-            LOGGER.debug(NLS.MESSAGES.getMessage("no.noargs.constructor", superclassClass.getName()));
-            methodAdapter.invokeConstructor(OBJECT_TYPE, new Method("<init>", Type.VOID_TYPE, NO_ARGS));
+        for (Type type : argTypes) {
+          switch (type.getSort())
+          {
+            case Type.ARRAY:
+              // We need to process any array or multidimentional arrays.
+              String elementDesc = type.getElementType().getDescriptor();
+              String typeDesc = type.getDescriptor();
+
+              // Iterate over the number of arrays and load 0 for each one. Keep a count of the number of 
+              // arrays as we will need to run different code fo multi dimentional arrays.
+              int index = 0;
+              while (! elementDesc.equals(typeDesc)) {
+                typeDesc = typeDesc.substring(1);
+                methodAdapter.visitInsn(Opcodes.ICONST_0);
+                index++;
+              }
+              // If we're just a single array, then call the newArray method, otherwise use the MultiANewArray instruction.
+              if (index == 1) {
+                methodAdapter.newArray(type.getElementType());
+              } else {
+                methodAdapter.visitMultiANewArrayInsn(type.getDescriptor(), index);
+              }
+              break;
+            case Type.BOOLEAN:
+              methodAdapter.push(true);
+              break;
+            case Type.BYTE:
+              methodAdapter.push(Type.VOID_TYPE);
+              break;
+            case Type.CHAR:
+              methodAdapter.push(Type.VOID_TYPE);
+              break;
+            case Type.DOUBLE:
+              methodAdapter.push(0.0);
+              break;
+            case Type.FLOAT:
+              methodAdapter.push(0.0f);
+              break;
+            case Type.INT:
+              methodAdapter.push(0);
+              break;
+            case Type.LONG:
+              methodAdapter.push(0l);
+              break;
+            case Type.SHORT:
+              methodAdapter.push(0);
+              break;
+            default:
+            case Type.OBJECT:
+              methodAdapter.visitInsn(Opcodes.ACONST_NULL);
+              break;
+          }
          }
        
+        methodAdapter.invokeConstructor(Type.getType(superclassClass), new Method("<init>", Type.VOID_TYPE, argTypes));
+      }
     }
-    // call from the constructor to setInvocationHandler
-    Method setter = new Method("setInvocationHandler", Type.VOID_TYPE, new Type[] { IH_TYPE });
-    // load this
-    methodAdapter.loadThis();
-    // load the supplied invocation handler arg
-    methodAdapter.loadArgs();
-    // invoke the setter method
-    methodAdapter.invokeVirtual(newClassType, setter);
     methodAdapter.returnValue();
     methodAdapter.endMethod();
 
     // add a method for getting the invocation handler
+    Method setter = new Method("setInvocationHandler", Type.VOID_TYPE, new Type[] { IH_TYPE });
     m = new Method("getInvocationHandler", IH_TYPE, NO_ARGS);
     methodAdapter = new GeneratorAdapter(ACC_PUBLIC | ACC_FINAL, m, null, null, cv);
     // load this to get the field
diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassGenerator.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassGenerator.java
index b95e70fc..cbb10943 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassGenerator.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/gen/ProxySubclassGenerator.java
@@ -44,6 +44,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import sun.reflect.ReflectionFactory;
+
 public class ProxySubclassGenerator
 {
 
@@ -158,10 +160,18 @@ public static Object newProxySubclassInstance(Class<?> classToProxy, InvocationH
     try {
       Class<?> generatedProxySubclass = getProxySubclass(classToProxy);
       LOGGER.debug("Getting the proxy subclass constructor");
-      Constructor<?> subclassConstructor = generatedProxySubclass
-          .getConstructor(new Class[] { InvocationHandler.class });
-      LOGGER.debug("Invoking the proxy subclass constructor");
-      proxySubclassInstance = subclassConstructor.newInstance(ih);
+      // Because the newer JVMs throw a VerifyError if a class attempts to in a constructor other than their superclasses constructor,
+      // and because we can't know what objects/values we need to pass into the class being proxied constructor, 
+      // we instantiate the proxy class using the ReflectionFactory.newConstructorForSerialization() method which allows us to instantiate the 
+      // proxy class without calling the proxy class' constructor. It is in fact using the java.lang.Object constructor so is in effect 
+      // doing what we were doing before.
+      ReflectionFactory factory = ReflectionFactory.getReflectionFactory();
+      Constructor<?> constr = Object.class.getConstructor();
+      Constructor<?> subclassConstructor = factory.newConstructorForSerialization(generatedProxySubclass, constr);
+      proxySubclassInstance = subclassConstructor.newInstance();
+      
+      Method setIHMethod = proxySubclassInstance.getClass().getMethod("setInvocationHandler", InvocationHandler.class);
+      setIHMethod.invoke(proxySubclassInstance, ih);
       LOGGER.debug("Invoked proxy subclass constructor");
     } catch (NoSuchMethodException nsme) {
       LOGGER.debug(Constants.LOG_EXCEPTION, nsme);
diff --git a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxySubclassGeneratorTest.java b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxySubclassGeneratorTest.java
index 43eb7dd3..8c9ef384 100644
--- a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxySubclassGeneratorTest.java
+++ b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxySubclassGeneratorTest.java
@@ -164,7 +164,6 @@ public void testFinalClass() throws Exception
    * Test a private constructor
    */
   @Test
-  @org.junit.Ignore("Fails on JDK's 1.6.0_u33 and newer as you cannot call a private constructor from subclass")
   public void testPrivateConstructor() throws Exception
   {
     Object o = ProxySubclassGenerator.newProxySubclassInstance(
@@ -280,7 +279,10 @@ private Object getProxyInstance(Class<?> proxyClass, InvocationHandler ih) {
       if(proxyClass.equals(ProxyTestClassChildOfAbstract.class))
         return proxyClass.newInstance();
       
-      return proxyClass.getConstructor(InvocationHandler.class).newInstance(ih);
+      Object proxyInstance = proxyClass.getConstructor().newInstance();
+      Method setIH = proxyInstance.getClass().getMethod("setInvocationHandler", InvocationHandler.class);
+      setIH.invoke(proxyInstance, ih);
+      return proxyInstance;
     } catch (Exception e) {
       return null;
     }
