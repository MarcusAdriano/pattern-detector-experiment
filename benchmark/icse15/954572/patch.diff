diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableNamesIterator.java b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableNamesIterator.java
index 5378884c..1d61ba66 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableNamesIterator.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableNamesIterator.java
@@ -20,11 +20,14 @@
  * 
  */
 
-
 import java.io.IOError;
 import java.io.IOException;
 import java.util.*;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.db.ColumnFamily;
 import org.apache.cassandra.db.DecoratedKey;
 import org.apache.cassandra.db.IColumn;
@@ -32,13 +35,9 @@
 import org.apache.cassandra.io.sstable.IndexHelper;
 import org.apache.cassandra.io.sstable.SSTableReader;
 import org.apache.cassandra.io.util.FileDataInput;
-import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.utils.BloomFilter;
 import org.apache.cassandra.utils.FBUtilities;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 public class SSTableNamesIterator extends SimpleAbstractColumnIterator implements IColumnIterator
 {
     private static Logger logger = LoggerFactory.getLogger(SSTableNamesIterator.class);
@@ -55,6 +54,10 @@ public SSTableNamesIterator(SSTableReader ssTable, DecoratedKey key, SortedSet<b
 
     public SSTableNamesIterator(SSTableReader ssTable, FileDataInput file, DecoratedKey key, SortedSet<byte[]> columnNames)
     {
+        boolean closeFileWhenDone = file == null;
+        
+        try
+        {
         assert columnNames != null;
 
         this.columns = columnNames;
@@ -63,8 +66,6 @@ public SSTableNamesIterator(SSTableReader ssTable, FileDataInput file, Decorated
         // open the sstable file, if we don't have one passed to use from range scan
         if (file == null)
         {
-            try
-            {
                 file = ssTable.getFileDataInput(decoratedKey, DatabaseDescriptor.getIndexedReadBufferSizeInKB() * 1024);
                 if (file == null)
                     return;
@@ -73,15 +74,8 @@ public SSTableNamesIterator(SSTableReader ssTable, FileDataInput file, Decorated
                        : String.format("%s != %s in %s", keyInDisk, decoratedKey, file.getPath());
                 file.readInt(); // data size
             }
-            catch (IOException e)
-            {
-               throw new IOError(e);
-            }
-        }
 
         // read the requested columns into `cf`
-        try
-        {
             /* Read the bloom filter summarizing the columns */
             BloomFilter bf = IndexHelper.defreezeBloomFilter(file);
             List<IndexHelper.IndexInfo> indexList = IndexHelper.deserializeIndex(file);
@@ -122,7 +116,7 @@ public SSTableNamesIterator(SSTableReader ssTable, FileDataInput file, Decorated
             for (IndexHelper.IndexInfo indexInfo : ranges)
             {
                 file.reset();
-                long curOffsert = file.skipBytes((int)indexInfo.offset);
+                long curOffsert = file.skipBytes((int) indexInfo.offset);
                 assert curOffsert == indexInfo.offset;
                 // TODO only completely deserialize columns we are interested in
                 while (file.bytesPastMark() < indexInfo.offset + indexInfo.width)
@@ -135,15 +129,29 @@ public SSTableNamesIterator(SSTableReader ssTable, FileDataInput file, Decorated
                     }
                 }
             }
-        }
-        catch (IOException e)
-        {
-           throw new IOError(e); 
-        }
 
         // create an iterator view of the columns we read
         iter = cf.getSortedColumns().iterator();
     }
+        catch (IOException ioe)
+        {
+            throw new IOError(ioe);
+        }
+        finally
+        {
+            if (closeFileWhenDone && file != null)
+            {
+                try
+                {
+                    file.close();
+                }
+                catch (IOException ioe)
+                {
+                    logger.warn("error closing " + file.getPath());
+                }
+            }
+        }
+    }
      
     public DecoratedKey getKey()
     {
