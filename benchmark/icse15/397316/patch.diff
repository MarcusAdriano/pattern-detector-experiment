diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/LimitReader.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/LimitReader.java
index b207e176..65ea474b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/LimitReader.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/LimitReader.java
@@ -27,10 +27,10 @@
 	A  Reader that provides methods to limit the range that
 	can be read from the reader.
 */
-public class LimitReader extends Reader implements Limit 
+public final class LimitReader extends Reader implements Limit 
 {
-	protected int remainingBytes;
-	protected boolean limitInPlace;
+	private int remainingCharacters;
+	private boolean limitInPlace;
 	private	Reader	reader;
 
 	/**
@@ -49,13 +49,13 @@ public int read() throws IOException
 		if (!limitInPlace)
 			return reader.read();
 		
-		if (remainingBytes == 0)
+		if (remainingCharacters == 0)
 			return -1; // end of file
 
 		
 		int value = reader.read();
 		if (value >= 0)
-			remainingBytes--;
+			remainingCharacters--;
 		return value;
 
 	}
@@ -65,17 +65,17 @@ public int read(char c[], int off, int len) throws IOException
 		if (!limitInPlace)
 			return reader.read(c, off, len);
 
-		if (remainingBytes == 0)
+		if (remainingCharacters == 0)
 			return -1;
 
-		if (remainingBytes < len) 
+		if (remainingCharacters < len) 
 		{
-			len = remainingBytes; // end of file
+			len = remainingCharacters; // end of file
 		}
 
 		len = reader.read(c, off, len);
 		if (len >= 0)
-			remainingBytes -= len;
+			remainingCharacters -= len;
 		return len;
 	}
 
@@ -85,14 +85,14 @@ public long skip(long count)
 		if (!limitInPlace)
 			return reader.skip(count);
 
-		if (remainingBytes == 0)
+		if (remainingCharacters == 0)
 			return 0; // end of file
 
-		if (remainingBytes < count)
-			count = remainingBytes;
+		if (remainingCharacters < count)
+			count = remainingCharacters;
 
 		count = reader.skip(count);
-		remainingBytes -= count;
+		remainingCharacters -= count;
 		return count;
 	}
 
@@ -104,8 +104,9 @@ public void close()
 
 	/**
 		Set the limit of the stream that can be read. After this
-		call up to and including length bytes can be read from or skipped in
-		the stream. Any attempt to read more than length bytes will
+		call up to and including length characters can be read from
+        or skipped in the stream.
+        Any attempt to read more than length characters will
 		result in an EOFException
 
 		@exception IOException IOException from some underlying stream
@@ -114,7 +115,7 @@ public void close()
 	*/
 	public void setLimit(int length) 
 	{
-		remainingBytes = length;
+		remainingCharacters = length;
 		limitInPlace = true;
 		return;
 	}
@@ -122,11 +123,11 @@ public void setLimit(int length)
     /**
      * return limit of the stream that can be read without throwing
      * EOFException
-     * @return the remaining bytes left to be read from the stream
+     * @return the remaining characters left to be read from the stream
      */
     public final int getLimit()
     {
-        return remainingBytes;
+        return remainingCharacters;
     }
 
 	/**
@@ -138,9 +139,9 @@ will be made on any read until a setLimit()) call is made.
 	*/
 	public int clearLimit() 
 	{
-		int leftOver = remainingBytes;
+		int leftOver = remainingCharacters;
 		limitInPlace = false;
-		remainingBytes = -1;
+		remainingCharacters = -1;
 		return leftOver;
 	}
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/ReaderToUTF8Stream.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/ReaderToUTF8Stream.java
index 864faa93..2ce7caee 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/ReaderToUTF8Stream.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/ReaderToUTF8Stream.java
@@ -36,7 +36,9 @@
 public final class ReaderToUTF8Stream
 	extends InputStream
 {
-
+    /**
+     * Application's reader wrapped in a LimitReader.
+     */
 	private LimitReader reader;
 
 	private byte[] buffer;
@@ -48,25 +50,34 @@
     // and converted to UTF8 format
     private final static int BUFSIZE = 32768;
     
-    // Number of characters to truncate from this stream
-    // The SQL standard allows for truncation of trailing spaces 
-    // for clobs,varchar,char.
+    /** Number of characters to truncate from this stream
+     The SQL standard allows for truncation of trailing spaces 
+     for clobs,varchar,char.
+     If zero, no characters are truncated.
+     */
     private int charsToTruncate;
-    private final char SPACE =' ';
+    private static final char SPACE =' ';
     
-    // this stream needs to fit into a column of colWidth
-    // if truncation error happens ,then the error message includes 
-    // information about the column width which is why this variable
-    // is needed.
-    private int colWidth;  
+    /**
+     * Length of the final value, after truncation if any,
+     * in characters.
+     this stream needs to fit into a column of colWidth
+     if truncation error happens ,then the error message includes 
+     information about the column width.
+    */
+    private final int valueLength; 
     
-	public ReaderToUTF8Stream(LimitReader reader,int length,int numCharsToTruncate)
+    /**
+     * Create a stream with truncation.
+     */
+ 	public ReaderToUTF8Stream(Reader appReader, int valueLength,int numCharsToTruncate)
 	{
-		this.reader = reader;
+        this.reader = new LimitReader(appReader);
+        reader.setLimit(valueLength);
 		buffer = new byte[BUFSIZE];
 		blen = -1;
         this.charsToTruncate = numCharsToTruncate;
-        this.colWidth = length;
+        this.valueLength = valueLength;
 	}
 
     /**
@@ -218,7 +229,7 @@ private void checkSufficientData() throws IOException
         {
             reader.setLimit(charsToTruncate);
             int c = 0;
-            do
+            for (;;)
             {
                 c = reader.read();
                 
@@ -237,10 +248,9 @@ else if (c != SPACE)
                             SQLState.LANG_STRING_TRUNCATION,
                             TypeId.CLOB_NAME, 
                             "XXXX", 
-                            String.valueOf(colWidth)));
+                            String.valueOf(valueLength)));
                 }
             }
-            while (c == SPACE);
         }
         
         int remainingBytes = reader.clearLimit();
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
index dbe1d113..9e562c5c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
@@ -682,10 +682,9 @@ private void setCharacterStreamInternal(int parameterIndex,
 
 	    try {
            
-            LimitReader limitIn = new LimitReader(reader);
 			ParameterValueSet pvs = getParms();
             int usableLength = intLength;
-            ReaderToUTF8Stream utfIn = null;
+            int truncationLength = 0;
 
             // Currently long varchar does not allow for truncation of trailing
             // blanks.  
@@ -711,26 +710,18 @@ private void setCharacterStreamInternal(int parameterIndex,
                 // length - colWidth has trailing blanks only
                 // we have used intLength into which the length variable had
                 // been cast to an int and stored  
-                if (colWidth < intLength)
+                if (intLength > colWidth) {                 
                     usableLength = colWidth;
-                
-                // keep information with the stream about how much data needs 
-                // to be truncated, and colWidth info to give proper truncation
-                // message
-                utfIn = new ReaderToUTF8Stream(
-                            limitIn, colWidth, intLength - usableLength);
+                    truncationLength = intLength - usableLength;
             }
-            else
-            {
-                utfIn = new ReaderToUTF8Stream(
-                            limitIn,usableLength,intLength - usableLength);
             }
 
-            limitIn.setLimit(usableLength);
+            ReaderToUTF8Stream utfIn = new ReaderToUTF8Stream(
+                    reader, usableLength, truncationLength);
 
             /* JDBC is one-based, DBMS is zero-based */
             pvs.getParameterForSet(
-                parameterIndex - 1).setValue(utfIn,usableLength);
+                parameterIndex - 1).setValue(utfIn, usableLength);
 
 		} catch (StandardException t) {
 			throw EmbedResultSet.noStateChangeException(t);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
index a7ff6f20..631cbe08 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
@@ -2754,12 +2754,10 @@ private void updateCharacterStreamInternal(int columnIndex,
                         getColumnSQLType(columnIndex));
             } 
 
-            LimitReader limitIn = new LimitReader(reader);
-            
             // length is +ve. at this point, all checks for negative
             // length has already been done
             int usableLength = (int) length;
-            ReaderToUTF8Stream utfIn = null;
+            int truncationLength = 0;
 
             // Currently long varchar does not allow for truncation of
             // trailing blanks.  For char and varchar types, current mechanism 
@@ -2781,20 +2779,15 @@ private void updateCharacterStreamInternal(int columnIndex,
                 // usableLength is the length of the data from stream
                 // that can be used which is min(colWidth,length) provided
                 // length - colWidth has trailing blanks only
-                if (colWidth < length)
+                if (usableLength > colWidth) {                   
+                    truncationLength = usableLength - colWidth;
                     usableLength = colWidth;
-
-                // keep information with the stream about how much data
-                // needs to be truncated, and colWidth info to give proper
-                // truncation message
-                utfIn = new ReaderToUTF8Stream(
-                            limitIn, colWidth,     ((int) length) - usableLength);
-            } else {
-                utfIn = new ReaderToUTF8Stream(
-                            limitIn, usableLength, ((int)length) - usableLength);
             }
+            }
+
+            ReaderToUTF8Stream utfIn = new ReaderToUTF8Stream(
+                    reader, usableLength, truncationLength);
 
-            limitIn.setLimit(usableLength);
             getDVDforColumnToBeUpdated(columnIndex, updateMethodName).setValue(
                     utfIn, (int) usableLength);
         } catch (StandardException t) {
