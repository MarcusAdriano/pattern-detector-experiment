diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/Import.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/Import.java
index 079ba63a..fb698454 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/Import.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/Import.java
@@ -31,6 +31,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.DatabaseMetaData;
 import java.util.*;
 
+import org.apache.derby.iapi.reference.SQLState;
+import org.apache.derby.iapi.error.StandardException;
+import org.apache.derby.iapi.error.PublicAPI;
+
 /**
  * This class implements import of data from a URL into a table.
  * Import functions provided here in this class shouble be called through
@@ -40,6 +44,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 public class Import extends ImportAbstract{
 
+    private static  int                _importCounter;
+    private static  Hashtable   _importers = new Hashtable();
+
 	private String inputFileName;
 
 	/**
@@ -50,7 +57,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	public Import(String inputFileName, String columnDelimiter,
                   String characterDelimiter,  String codeset, 
                   int noOfColumnsExpected,  String columnTypes, 
-                  boolean lobsInExtFile) throws SQLException 
+                  boolean lobsInExtFile,
+                  int importCounter ) throws SQLException 
 	{
 
 		try{
@@ -62,6 +70,8 @@ public Import(String inputFileName, String columnDelimiter,
 												   columnDelimiter, codeset);
             this.lobsInExtFile = lobsInExtFile;
 
+            _importers.put( new Integer( importCounter ), this );
+            
 			doImport();
 
 		}catch(Exception e)
@@ -159,7 +169,8 @@ public static void importData(Connection connection, String schemaName,
 	 * INTEGER)  from new org.apache.derby.impl.load.Import('extin/Tutor1.asc') as importvti;
 	 *
 	 */
-	private static void performImport(Connection connection, 
+    private static void performImport
+        (Connection connection, 
                                       String schemaName, 
                                       String insertColumnList, 
                                       String columnIndexes,
@@ -172,7 +183,9 @@ private static void performImport(Connection connection,
                                       boolean lobsInExtFile)
         throws SQLException 
 	{
+        Integer     importCounter = new Integer( bumpImportCounter() );
 
+        try {
 		if (connection == null)
 			throw LoadError.connectionNull();
 		
@@ -213,6 +226,8 @@ private static void performImport(Connection connection,
         sb.append( "'" + columnInfo.getExpectedVtiColumnTypesAsString() + "'");
         sb.append(", ");
         sb.append(lobsInExtFile);
+            sb.append(", ");
+            sb.append( importCounter.intValue() );
 		sb.append(" )") ;
 
 		String importvti = sb.toString();
@@ -258,12 +273,26 @@ private static void performImport(Connection connection,
 		statement.executeUpdate(lockSql);
 
 		//execute the import operaton.
+            try {
 		ips.executeUpdate();
+            }
+            catch (Throwable t)
+            {
+                throw formatImportError( (Import) _importers.get( importCounter ), inputFileName, t );
+            }
 		statement.close();
 		ips.close();
-
 	}
-
+        finally
+        {
+            //
+            // The importer was put into a hashtable so that we could look up
+            // line numbers for error messages. The Import constructor put
+            // the importer in the hashtable. Now garbage collect that entry.
+            //
+            _importers.remove( importCounter );
+        }
+    }
 
 	/** virtual method from the abstract class
 	 * @exception	Exception on error
@@ -271,23 +300,31 @@ private static void performImport(Connection connection,
 	ImportReadData getImportReadData() throws Exception {
 		return new ImportReadData(inputFileName, controlFileReader);
 	}
-}
-
-
-
-
-
-
-
-
-
-
-
-
-
 
+    /*
+     * Bump the import counter.
+     *
+     */
+    private static  synchronized    int bumpImportCounter()
+    {
+        return ++_importCounter;
+    }
 
+    /*
+     * Format a import error with line number
+     *
+     */
+    private static  SQLException    formatImportError( Import importer, String inputFile, Throwable t )
+    {
+        int     lineNumber = -1;
 
+        if ( importer != null ) { lineNumber = importer.getCurrentLineNumber(); }
 
+        StandardException se = StandardException.newException
+            ( SQLState.UNEXPECTED_IMPORT_ERROR, new Integer( lineNumber ), inputFile, t.getMessage() );
+        se.setNestedException( t );
 
+        return PublicAPI.wrapStandardException(se);
+    }
 
+}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/ImportAbstract.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/ImportAbstract.java
index d318237f..ebc51a36 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/ImportAbstract.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/load/ImportAbstract.java
@@ -45,6 +45,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
   int numberOfColumns;
   int[] columnWidths;
 
+  int lineNumber = 0;
   String[] nextRow;
 
   ResultSetMetaData importResultSetMetaData;
@@ -114,8 +115,12 @@ public int getRow() throws SQLException {
     return (importReadData.getCurrentRowNumber());
   }
   
+    /** gets the current line number */
+    public    int getCurrentLineNumber() { return lineNumber; }
+    
   public boolean next() throws SQLException {
     try {
+      lineNumber++;
       return (importReadData.readNextRow(nextRow));
     } catch (Exception ex) {
 		throw LoadError.unexpectedError(ex);
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index 8cbb4cf5..99c9bc3d 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -1712,6 +1712,7 @@ The message identifier (ie. the value that matches a field in this class)
 	String IMPORTFILE_HAS_INVALID_HEXSTRING                        ="XIE0N.S";
 	String LOB_DATA_FILE_NOT_FOUND                                 ="XIE0P.S";
 	String LOB_DATA_FILE_NULL                                      ="XIE0Q.S";
+	String UNEXPECTED_IMPORT_ERROR                       ="XIE0R.S";
 
 
 
