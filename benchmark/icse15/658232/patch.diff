diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java
index cc5e56b2..05e827e9 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/loader/ClassInspector.java
@@ -1041,21 +1041,15 @@ protected boolean classConvertableFromTo(Class fromClass, Class toClass, boolean
 				return true;
 		} else if ((fromClass == Integer.TYPE) || fromName.equals(nonPrimTypeNames[4]))
 		{
-			if ((toClass == Integer.TYPE) || toName.equals(nonPrimTypeNames[4]) ||
-				(toClass == Long.TYPE) ||
-				(toClass == Float.TYPE) ||
-				(toClass == Double.TYPE) )
+			if ((toClass == Integer.TYPE) || toName.equals(nonPrimTypeNames[4]) )
 				return true;
 		} else if ((fromClass == Long.TYPE) || fromName.equals(nonPrimTypeNames[5]))
 		{
-			if ((toClass == Long.TYPE) || toName.equals(nonPrimTypeNames[5]) ||
-				(toClass == Float.TYPE) ||
-				(toClass == Double.TYPE) )
+			if ((toClass == Long.TYPE) || toName.equals(nonPrimTypeNames[5]) )
 				return true;
 		} else if ((fromClass == Float.TYPE) || fromName.equals(nonPrimTypeNames[6]))
 		{
-			if ((toClass == Float.TYPE) || toName.equals(nonPrimTypeNames[6]) ||
-				(toClass == Double.TYPE) )
+			if ((toClass == Float.TYPE) || toName.equals(nonPrimTypeNames[6]) )
 				return true;
 		} else if ((fromClass == Double.TYPE) || fromName.equals(nonPrimTypeNames[7]))
 		{
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java
index 0f2612c2..116ec5b6 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/AnsiSignaturesTest.java
@@ -344,40 +344,40 @@ public  void    test_smallint_unres_Short()
     public  void    test_integer_unres_int()
         throws Exception
     {
-        //FIXME declareAndFailFunction
-        //FIXME ( "integer_unres_int", "int", new String[] { "int" }, "3", "3", MISSING_METHOD_SQLSTATE );
+        declareAndFailFunction
+            ( "integer_unres_int", "int", new String[] { "int" }, "3", "3", TRIED_ALL_COMBINATIONS );
     }
     public  void    test_integer_unres_Integer()
         throws Exception
     {
-        //FIXME declareAndFailFunction
-        //FIXME ( "integer_unres_Integer", "int", new String[] { "int" }, "3", "3", MISSING_METHOD_SQLSTATE );
+        declareAndFailFunction
+            ( "integer_unres_Integer", "int", new String[] { "int" }, "3", "3", TRIED_ALL_COMBINATIONS );
     }
     
     public  void    test_bigint_unres_long()
         throws Exception
     {
-        //FIXME declareAndFailFunction
-        //FIXME ( "bigint_unres_long", "bigint", new String[] { "bigint" }, "3", "3", MISSING_METHOD_SQLSTATE );
+        declareAndFailFunction
+            ( "bigint_unres_long", "bigint", new String[] { "bigint" }, "3", "3", TRIED_ALL_COMBINATIONS );
     }
     public  void    test_bigint_unres_Long()
         throws Exception
     {
-        //FIXME declareAndFailFunction
-        //FIXME ( "bigint_unres_Long", "bigint", new String[] { "bigint" }, "3", "3", MISSING_METHOD_SQLSTATE );
+        declareAndFailFunction
+            ( "bigint_unres_Long", "bigint", new String[] { "bigint" }, "3", "3", TRIED_ALL_COMBINATIONS );
     }
         
     public  void    test_real_unres_float()
         throws Exception
     {
-        //FIXME declareAndFailFunction
-        //FIXME ( "real_unres_float", "real", new String[] { "real" }, "3.0", "3.0", MISSING_METHOD_SQLSTATE );
+        declareAndFailFunction
+            ( "real_unres_float", "real", new String[] { "real" }, "3.0", "3.0", TRIED_ALL_COMBINATIONS );
     }
     public  void    test_real_unres_Float()
         throws Exception
     {
-        //FIXME declareAndFailFunction
-        //FIXME ( "real_unres_Float", "real", new String[] { "real" }, "3.0", "3.0", MISSING_METHOD_SQLSTATE );
+        declareAndFailFunction
+            ( "real_unres_Float", "real", new String[] { "real" }, "3.0", "3.0", TRIED_ALL_COMBINATIONS );
     }
         
     public  void    test_double_unres_double()
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/closed.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/closed.java
index e2550db0..1040ff41 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/closed.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/closed.java
@@ -121,7 +121,7 @@ static boolean shutdownTest(String databaseName, String shutdownString) throws S
 
 		c3a.createStatement().execute("CREATE TABLE CLOSED.LOCKME(i int)");
 		
-		c3a.createStatement().execute("create procedure sleep(t INTEGER) dynamic result sets 0 language java external name 'java.lang.Thread.sleep' parameter style java");
+		c3a.createStatement().execute("create procedure sleep(t BIGINT) dynamic result sets 0 language java external name 'java.lang.Thread.sleep' parameter style java");
 		c3a.setAutoCommit(false);
 		c3a.createStatement().execute("LOCK TABLE CLOSED.LOCKME IN SHARE MODE");
 		
