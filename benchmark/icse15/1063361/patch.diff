diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
index ea3a9e2e..ce950cb9 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
@@ -90,7 +90,7 @@ public void doVerb(Message message)
     private void forwardToLocalNodes(Message message, byte[] forwardBytes) throws UnknownHostException
     {
         // remove fwds from message to avoid infinite loop
-        message.setHeader(RowMutation.FORWARD_HEADER, null);
+        message.removeHeader(RowMutation.FORWARD_HEADER);
 
         int bytesPerInetAddress = FBUtilities.getLocalAddress().getAddress().length;
         assert forwardBytes.length >= bytesPerInetAddress;
@@ -110,7 +110,7 @@ private void forwardToLocalNodes(Message message, byte[] forwardBytes) throws Un
 
             // Send the original message to the address specified by the FORWARD_HINT
             // Let the response go back to the coordinator
-            MessagingService.instance().sendOneWay(message, message.getFrom());
+            MessagingService.instance().sendOneWay(message, address);
 
             offset += bytesPerInetAddress;
         }
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/net/Header.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/net/Header.java
index 9bff4324..30e01ef3 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/net/Header.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/net/Header.java
@@ -97,6 +97,11 @@ void setDetail(String key, byte[] value)
     {
         details_.put(key, value);
     }
+
+    void removeDetail(String key)
+    {
+        details_.remove(key);
+    }
 }
 
 class HeaderSerializer implements ICompactSerializer<Header>
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/net/Message.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/net/Message.java
index 16ccf673..18969fae 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/net/Message.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/net/Message.java
@@ -69,6 +69,11 @@ public void setHeader(String key, byte[] value)
         header_.setDetail(key, value);
     }
 
+    public void removeHeader(String key)
+    {
+        header_.removeDetail(key);
+    }
+
     public byte[] getMessageBody()
     {
         return body_;
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/DatacenterReadCallback.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/DatacenterReadCallback.java
index c334d2a6..4a31de8f 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/DatacenterReadCallback.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/DatacenterReadCallback.java
@@ -27,6 +27,7 @@
 
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.db.Table;
+import org.apache.cassandra.db.ReadResponse;
 import org.apache.cassandra.locator.IEndpointSnitch;
 import org.apache.cassandra.locator.NetworkTopologyStrategy;
 import org.apache.cassandra.net.Message;
@@ -54,8 +55,7 @@ public void response(Message message)
     {
         resolver.preprocess(message);
 
-        int n;
-        n = localdc.equals(snitch.getDatacenter(message.getFrom())) 
+        int n = localdc.equals(snitch.getDatacenter(message.getFrom()))
                 ? localResponses.decrementAndGet()
                 : localResponses.get();
 
@@ -65,6 +65,19 @@ public void response(Message message)
         }
     }
     
+    @Override
+    public void response(ReadResponse result)
+    {
+        ((ReadResponseResolver) resolver).injectPreProcessed(result);
+
+        int n = localResponses.decrementAndGet();
+
+        if (n == 0 && resolver.isDataPresent())
+        {
+            condition.signal();
+        }
+    }
+    
     @Override
     public int determineBlockFor(ConsistencyLevel consistency_level, String table)
 	{
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageProxy.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageProxy.java
index 6016b7fb..1b5e23bc 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -238,7 +238,6 @@ private static void sendMessages(String localDataCenter, Map<String, Multimap<Me
                 // First endpoint in list is the destination for this group
                 InetAddress target = iter.next();
             
-
                 // Add all the other destinations that are bound for the same dataCenter as a header in the primary message.
                 while (iter.hasNext())
                 {
@@ -382,7 +381,7 @@ public void runMayThrow() throws IOException
             {
                 Message message = command.makeReadMessage();
                 if (logger.isDebugEnabled())
-                    logger.debug("reading digest for " + command + " from " + message.getMessageId() + "@" + dataPoint);
+                    logger.debug("reading data for " + command + " from " + message.getMessageId() + "@" + dataPoint);
                 MessagingService.instance().sendRR(message, dataPoint, handler);
             }
 
