diff --git a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
index ee8740fc..16de38f8 100644
--- a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
+++ b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
@@ -21,12 +21,15 @@
 import java.io.*;
 
 import java.net.InetAddress;
+import java.nio.ByteBuffer;
+
 import org.apache.cassandra.net.IVerbHandler;
 import org.apache.cassandra.net.Message;
 
 import org.apache.log4j.Logger;
 
 import org.apache.cassandra.net.*;
+import org.apache.cassandra.utils.FBUtilities;
 
 public class RowMutationVerbHandler implements IVerbHandler
 {
@@ -45,16 +48,22 @@ public void doVerb(Message message)
 
             /* Check if there were any hints in this message */
             byte[] hintedBytes = message.getHeader(RowMutation.HINT);
-            if ( hintedBytes != null && hintedBytes.length > 0 )
+            if (hintedBytes != null)
+            {
+                assert hintedBytes.length > 0;
+                ByteBuffer bb = ByteBuffer.wrap(hintedBytes);
+                byte[] addressBytes = new byte[FBUtilities.getLocalAddress().getAddress().length];
+                while (bb.remaining() > 0)
             {
-            	InetAddress hint = InetAddress.getByAddress(hintedBytes);
+                    bb.get(addressBytes);
+                    InetAddress hint = InetAddress.getByAddress(addressBytes);
                 if (logger_.isDebugEnabled())
                   logger_.debug("Adding hint for " + hint);
-                /* add necessary hints to this mutation */
                 RowMutation hintedMutation = new RowMutation(Table.SYSTEM_TABLE, rm.getTable());
-                hintedMutation.addHints(rm.key(), hintedBytes);
+                    hintedMutation.addHints(rm.key(), addressBytes);
                 hintedMutation.apply();
             }
+            }
 
             Table.open(rm.getTable()).apply(rm, bytes, true);
 
diff --git a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/Header.java b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/Header.java
index 52438196..5ce0af00 100644
--- a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/Header.java
+++ b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/Header.java
@@ -99,35 +99,15 @@ void setMessageId(String id)
         messageId_ = id;
     }
     
-    void setMessageType(String type)
-    {
-        type_ = type;
-    }
-    
-    void setMessageVerb(StorageService.Verb verb)
-    {
-        verb_ = verb;
-    }
-    
     byte[] getDetail(Object key)
     {
         return details_.get(key);
     }
     
-    void removeDetail(Object key)
-    {
-        details_.remove(key);
-    }
-    
-    void addDetail(String key, byte[] value)
+    void setDetail(String key, byte[] value)
     {
         details_.put(key, value);
     }
-    
-    Map<String, byte[]> getDetails()
-    {
-        return details_;
-    }
 }
 
 class HeaderSerializer implements ICompactSerializer<Header>
diff --git a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/Message.java b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/Message.java
index 7ed57354..f72a633f 100644
--- a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/Message.java
+++ b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/net/Message.java
@@ -21,7 +21,6 @@
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
-import java.util.Map;
 import java.net.InetAddress;
 
 import org.apache.cassandra.concurrent.StageManager;
@@ -64,14 +63,9 @@ public Message(InetAddress from, String messageType, StorageService.Verb verb, b
         return header_.getDetail(key);
     }
     
-    public void addHeader(String key, byte[] value)
+    public void setHeader(String key, byte[] value)
     {
-        header_.addDetail(key, value);
-    }
-    
-    public Map<String, byte[]> getHeaders()
-    {
-        return header_.getDetails();
+        header_.setDetail(key, value);
     }
 
     public byte[] getMessageBody()
diff --git a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/StorageProxy.java b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/StorageProxy.java
index 953da4f3..0195ad9a 100644
--- a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -27,11 +27,10 @@
 import java.util.concurrent.Future;
 import java.lang.management.ManagementFactory;
 
+import org.apache.commons.lang.ArrayUtils;
 import org.apache.commons.lang.StringUtils;
 
 import com.google.common.collect.AbstractIterator;
-import com.google.common.collect.Iterables;
-import com.google.common.collect.Iterators;
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.db.*;
 import java.net.InetAddress;
@@ -145,7 +144,7 @@ public void runMayThrow() throws IOException
                         else
                         {
                             Message hintedMessage = rm.makeRowMutationMessage();
-                            hintedMessage.addHeader(RowMutation.HINT, target.getAddress());
+                            addHintHeader(hintedMessage, target);
                             if (logger.isDebugEnabled())
                                 logger.debug("insert writing key " + rm.key() + " to " + hintedMessage.getMessageId() + "@" + hintedTarget + " for " + target);
                             MessagingService.instance.sendOneWay(hintedMessage, hintedTarget);
@@ -164,6 +163,13 @@ public void runMayThrow() throws IOException
         }
     }
     
+    private static void addHintHeader(Message message, InetAddress target)
+    {
+        byte[] oldHint = message.getHeader(RowMutation.HINT);
+        byte[] hint = oldHint == null ? target.getAddress() : ArrayUtils.addAll(oldHint, target.getAddress());
+        message.setHeader(RowMutation.HINT, hint);
+    }
+
     public static void mutateBlocking(List<RowMutation> mutations, ConsistencyLevel consistency_level) throws UnavailableException, TimeoutException
     {
         long startTime = System.nanoTime();
@@ -214,7 +220,7 @@ public static void mutateBlocking(List<RowMutation> mutations, ConsistencyLevel
                     else
                     {
                         Message hintedMessage = rm.makeRowMutationMessage();
-                        hintedMessage.addHeader(RowMutation.HINT, naturalTarget.getAddress());
+                        addHintHeader(hintedMessage, naturalTarget);
                         // (hints are part of the callback and count towards consistency only under CL.ANY
                         if (consistency_level == ConsistencyLevel.ANY)
                             MessagingService.instance.addCallback(responseHandler, hintedMessage.getMessageId());
@@ -343,7 +349,7 @@ else if (consistency_level == ConsistencyLevel.ANY)
 
             if (logger.isDebugEnabled())
                 logger.debug("weakreadremote reading " + command + " from " + message.getMessageId() + "@" + endPoint);
-            message.addHeader(ReadCommand.DO_REPAIR, ReadCommand.DO_REPAIR.getBytes());
+            message.setHeader(ReadCommand.DO_REPAIR, ReadCommand.DO_REPAIR.getBytes());
             iars.add(MessagingService.instance.sendRR(message, endPoint));
         }
 
diff --git a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/streaming/StreamOut.java b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/streaming/StreamOut.java
index 57988ed5..68e11176 100644
--- a/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/streaming/StreamOut.java
+++ b/incubator/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/streaming/StreamOut.java
@@ -130,7 +130,7 @@ public static void transferSSTables(InetAddress target, List<SSTableReader> ssta
         StreamOutManager.get(target).addFilesToStream(pendingFiles);
         StreamInitiateMessage biMessage = new StreamInitiateMessage(pendingFiles);
         Message message = StreamInitiateMessage.makeStreamInitiateMessage(biMessage);
-        message.addHeader(StreamOut.TABLE_NAME, table.getBytes());
+        message.setHeader(StreamOut.TABLE_NAME, table.getBytes());
         if (logger.isDebugEnabled())
           logger.debug("Sending a stream initiate message to " + target + " ...");
         MessagingService.instance.sendOneWay(message, target);
