diff --git a/aries/trunk/blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedServiceFactory.java b/aries/trunk/blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedServiceFactory.java
index 5e141e36..aa2083b5 100644
--- a/aries/trunk/blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedServiceFactory.java
+++ b/aries/trunk/blueprint/blueprint-cm/src/main/java/org/apache/aries/blueprint/compendium/cm/CmManagedServiceFactory.java
@@ -76,8 +76,8 @@
     private final Object lock = new Object();
 
     private ServiceRegistration registration;
-    private Map<String, ServiceRegistration> pids = new ConcurrentHashMap<String, ServiceRegistration>();
-    private Map<ServiceRegistration, Object> services = new ConcurrentHashMap<ServiceRegistration, Object>();
+    private final Map<String, ServiceRegistration> pids = new ConcurrentHashMap<String, ServiceRegistration>();
+    private final Map<ServiceRegistration, Object> services = new ConcurrentHashMap<ServiceRegistration, Object>();
 
     public void init() throws Exception {
         LOGGER.debug("Initializing CmManagedServiceFactory for factoryPid={}", factoryPid);
@@ -171,15 +171,23 @@ public void setComponentDestroyMethod(String componentDestroyMethod) {
     
     protected void updated(String pid, Dictionary props) {
         LOGGER.debug("Updated configuration {} with props {}", pid, props);
-        ServiceRegistration reg = pids.get(pid);
-        if (reg == null) {      
+
+      Hashtable regProps = null;
+      Object component = null;
+
+      // This method might be multithreaded, so synchronize checking and
+      // creating the service
+      final ServiceRegistration existingReg;
+      synchronized (pids) {
+         existingReg = pids.get(pid);
+         if (existingReg == null) {
             updateComponentProperties(props);
 
-            Object component = blueprintContainer.getComponentInstance(managedComponentName);
+            component = blueprintContainer.getComponentInstance(managedComponentName);
             
             //  TODO: call listeners, etc...
                     
-            Hashtable regProps = getRegistrationProperties(pid);            
+            regProps = getRegistrationProperties(pid);
             CmProperties cm = findServiceProcessor();
             if (cm != null) {
                 if ("".equals(cm.getPersistentId())) {
@@ -190,13 +198,18 @@ protected void updated(String pid, Dictionary props) {
             
             Set<String> classes = getClasses(component);
             String[] classArray = classes.toArray(new String[classes.size()]);
-            reg = blueprintContainer.getBundleContext().registerService(classArray, component, regProps);
+            ServiceRegistration reg = blueprintContainer.getBundleContext().registerService(classArray, component, regProps);
 
-            LOGGER.debug("Service {} registered with interfaces {} and properties {}", new Object [] { component, classes, regProps });
+            LOGGER.debug("Service {} registered with interfaces {} and properties {}", new Object[] { component, classes, regProps });
             
             services.put(reg, component);
             pids.put(pid, reg);
+         }
+        } // end of synchronization
             
+        // If we just registered a service, do the slower stuff outside the synchronized block
+        if (existingReg == null)
+        {
             if (listeners != null) {
                 for (ServiceListener listener : listeners) {
                     listener.register(component, regProps);
@@ -207,7 +220,7 @@ protected void updated(String pid, Dictionary props) {
             
             CmProperties cm = findServiceProcessor();
             if (cm != null && "".equals(cm.getPersistentId())) {
-                Dictionary regProps = getRegistrationProperties(pid);    
+                regProps = getRegistrationProperties(pid);    
                 JavaUtils.copy(regProps, props);
                 cm.updated(regProps);
             }
diff --git a/aries/trunk/blueprint/blueprint-itests/src/test/java/org/apache/aries/blueprint/itests/TestConfigAdmin.java b/aries/trunk/blueprint/blueprint-itests/src/test/java/org/apache/aries/blueprint/itests/TestConfigAdmin.java
index d5eb71dc..46a9dbc3 100644
--- a/aries/trunk/blueprint/blueprint-itests/src/test/java/org/apache/aries/blueprint/itests/TestConfigAdmin.java
+++ b/aries/trunk/blueprint/blueprint-itests/src/test/java/org/apache/aries/blueprint/itests/TestConfigAdmin.java
@@ -31,6 +31,7 @@
 import org.ops4j.pax.exam.Option;
 import org.ops4j.pax.exam.junit.JUnit4TestRunner;
 import org.osgi.framework.Bundle;
+import org.osgi.framework.ServiceReference;
 import org.osgi.service.blueprint.container.BlueprintContainer;
 import org.osgi.service.cm.Configuration;
 import org.osgi.service.cm.ConfigurationAdmin;
@@ -145,6 +146,7 @@ public void testStrategyComponent() throws Exception {
 
     @Test
     public void testManagedServiceFactory() throws Exception {
+
         ConfigurationAdmin ca = context().getService(ConfigurationAdmin.class);
         Configuration cf = ca.createFactoryConfiguration("blueprint-sample-managed-service-factory", null);
         Hashtable<String,String> props = new Hashtable<String,String>();
@@ -159,7 +161,14 @@ public void testManagedServiceFactory() throws Exception {
         BlueprintContainer blueprintContainer = Helper.getBlueprintContainerForBundle(context(), "org.apache.aries.blueprint.sample");
         assertNotNull(blueprintContainer);
 
-        Thread.sleep(5000);
+        // Make sure only one service is registered
+        // Ask the service registry, not the container, since the container might have got it wrong :)
+        ServiceReference[] refs = context().getAllServiceReferences(Foo.class.getName(), "(service.pid=blueprint-sample-managed-service-factory.*)");
+        
+        assertNotNull("No services were registered for the managed service factory", refs);
+        assertEquals("Multiple services were registered for the same pid.", 1, refs.length);
+        
+
     }
 
     @org.ops4j.pax.exam.junit.Configuration
