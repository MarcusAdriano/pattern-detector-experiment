diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/drda/NetworkServerControl.java b/db/derby/code/trunk/java/drda/org/apache/derby/drda/NetworkServerControl.java
index a37e404d..ae1c6b08 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/drda/NetworkServerControl.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/drda/NetworkServerControl.java
@@ -598,7 +598,7 @@ public Properties getCurrentProperties() throws Exception
           
     protected void setClientLocale(String locale)
     {
-        serverImpl.clientLocale = locale;
+        serverImpl.setClientLocale( locale );
     }
 
     /**
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMReader.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMReader.java
index ef50864f..6817265e 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMReader.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DDMReader.java
@@ -1052,7 +1052,7 @@ ByteArrayInputStream readLOBContinuationStream (final long desiredLength)
         try {
             return readLOBChunk(true, desiredLength);
         } catch (DRDAProtocolException e) {
-            e.printStackTrace(agent.getServer().logWriter);
+            e.printStackTrace(agent.getServer().logWriter());
             throw new IOException(e.getMessage());
         }
     }
@@ -1405,7 +1405,7 @@ protected String readString (int length, String encoding)
         catch (java.io.UnsupportedEncodingException e) {
             agent.agentError("UnsupportedEncodingException in readString, encoding = " 
                     + encoding);
-            e.printStackTrace(agent.getServer().logWriter);
+            e.printStackTrace(agent.getServer().logWriter());
         }
         
         pos += length;
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
index 9b3a2a04..dd08f31e 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
@@ -181,6 +181,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     // as part of SECMEC_USRSSBPWD security mechanism
     private byte[] myTargetSeed;
 
+    // product id as bytes
+    private static  byte[]  prdIdBytes;
+
     // Some byte[] constants that are frequently written into messages. It is more efficient to 
     // use these constants than to convert from a String each time 
     // (This replaces the qryscraft_ and notQryscraft_ static exception objects.)
@@ -366,6 +369,13 @@ protected OutputStream getOutputStream()
         return sockos;
     }
 
+    /** Get product id as bytes */
+    private static  byte[]  getProductIDBytes()
+    {
+        if ( prdIdBytes == null ) { prdIdBytes = NetworkServerControlImpl.prdIdBytes(); }
+        return prdIdBytes;
+    }
+
     /**
      *  get DDMReader
      * @return DDMReader for this thread
@@ -1790,17 +1800,17 @@ private void writeEXCSATRD() throws DRDAProtocolException
         writer.createDssReply();
         writer.startDdm(CodePoint.EXCSATRD);
         writer.writeScalarString(CodePoint.EXTNAM,
-                                 NetworkServerControlImpl.att_extnam);
+                                 NetworkServerControlImpl.att_extnam());
         //only reply with manager levels if we got sent some
         if (knownManagers != null && knownManagers.size() > 0) {
             writeMGRLEVELS();
         }
         writer.writeScalarString(CodePoint.SRVCLSNM,
-                                 NetworkServerControlImpl.att_srvclsnm);
+                                 NetworkServerControlImpl.att_srvclsnm());
         writer.writeScalarString(CodePoint.SRVNAM,
                                  NetworkServerControlImpl.ATT_SRVNAM);
         writer.writeScalarString(CodePoint.SRVRLSLV,
-                                 NetworkServerControlImpl.att_srvrlslv);
+                                 NetworkServerControlImpl.att_srvrlslv());
         writer.endDdmAndDss();
     }
     /**
@@ -3669,7 +3679,7 @@ private void writeACCRDBRM(int svrcod) throws DRDAProtocolException
         writer.startDdm(CodePoint.ACCRDBRM);
         writer.writeScalar2Bytes(CodePoint.SVRCOD, svrcod);
         writer.writeScalarString(CodePoint.PRDID,
-                                 NetworkServerControlImpl.prdId);
+                                 NetworkServerControlImpl.prdId());
         //TYPDEFNAM -required - JCC doesn't support QTDSQLJVM so for now we
         // just use ASCII, though we should eventually be able to use QTDSQLJVM
         // at level 7
@@ -6304,7 +6314,7 @@ private void writeSQLCAGRP(SQLException e, long updateCount, long rowCount)
             return;
         }
             
-        if (SanityManager.DEBUG && server.debugOutput && sqlcode < 0) {
+        if (SanityManager.DEBUG && server.debugOutput() && sqlcode < 0) {
             trace("handle SQLException here");
             trace("reason is: "+e.getMessage());
             trace("SQLState is: "+e.getSQLState());
@@ -6325,7 +6335,7 @@ private void writeSQLCAGRP(SQLException e, long updateCount, long rowCount)
 
         // SQLERRPROC
         // Write the byte[] constant rather than the string, for efficiency
-        writer.writeBytes(NetworkServerControlImpl.prdIdBytes_);
+        writer.writeBytes( getProductIDBytes() );
 
         // SQLCAXGRP
         writeSQLCAXGRP(updateCount, rowCount, buildSqlerrmc(e), e.getNextException());
@@ -6378,7 +6388,7 @@ private void writeSQLCAGRP(byte[] sqlState, int sqlcode,
         writer.writeBytes(sqlState);
 
         // SQLERRPROC
-        writer.writeBytes(NetworkServerControlImpl.prdIdBytes_);
+        writer.writeBytes( getProductIDBytes() );
 
         // SQLCAXGRP (Uses null as sqlerrmc since there is no error)
         writeSQLCAXGRP(updateCount, rowCount, null, null);
@@ -8843,7 +8853,7 @@ private long getTimeSlice()
      */
     protected  void trace(String value)
     {
-        if (SanityManager.DEBUG && server.debugOutput == true) {
+        if (SanityManager.DEBUG && server.debugOutput() == true) {
             server.consoleMessage(value, true);
         }
     }
@@ -8863,7 +8873,7 @@ protected  void trace(String value)
     private void traceEXTDTARead(int drdaType, int index,
                                  EXTDTAReaderInputStream stream,
                                  boolean streamLOB, String encoding) {
-        if (SanityManager.DEBUG && server.debugOutput == true) {
+        if (SanityManager.DEBUG && server.debugOutput() == true) {
             StringBuilder sb = new StringBuilder("Reading/setting EXTDTA: ");
             // Data: t<type>/i<ob_index>/<streamLOB>/<encoding>/
             //       <statusByteExpected>/b<byteLength>
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
index 2ae7732f..ce64e513 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
@@ -111,7 +111,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     public final static int COMMAND_TIMESLICE = 9;
     public final static int COMMAND_PROPERTIES = 10;
     public final static int COMMAND_UNKNOWN = -1;
-    public final static String [] DASHARGS =
+    private final static String [] DASHARGS =
     {"p", "d", "user", "password", "ld", "ea", "ep", "b", "h", "s",
          "noSecurityManager", "ssl"};
     public final static int DASHARG_PORT = 0;
@@ -171,13 +171,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private final static int MAXREPLY = 32767;
 
     // Application Server Attributes.
-    protected static String att_srvclsnm;
+    private static String att_srvclsnm;
     protected final static String ATT_SRVNAM = "NetworkServerControl";
 
-    protected static String att_extnam;
-    protected static String att_srvrlslv; 
-    protected static String prdId;
-    protected static byte[] prdIdBytes_;
+    private static String att_extnam;
+    private static String att_srvrlslv; 
+    private static String prdId;
+    private static byte[] prdIdBytes_;
     
     private static String buildNumber;
     private static String versionString;
@@ -195,7 +195,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
     // Application Server manager levels - this needs to be in sync
     // with CodePoint.MGR_CODEPOINTS
-    protected final static int [] MGR_LEVELS = { 7, // AGENT
+    private final static int [] MGR_LEVELS = { 7, // AGENT
                                                  4, // CCSID Manager
                                                  0, // CNMAPPC not implemented
                                                  0, // CMNSYNCPT not implemented
@@ -212,8 +212,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
                                                 };
                                             
     
-    protected PrintWriter logWriter;                        // console
-    protected PrintWriter cloudscapeLogWriter;              // derby.log
+    private PrintWriter logWriter;                        // console
+    private PrintWriter cloudscapeLogWriter;              // derby.log
     private static Driver cloudscapeDriver;
 
     // error types
@@ -276,7 +276,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private int maxPoolSize;            //maximum pool size for pooled connections
     private Object poolSync = new Object(); // object to use for syning reading
 
-    protected boolean debugOutput = false;
+    private boolean debugOutput = false;
     private boolean cleanupOnStart = false; // Should we clean up when starting the server?
     private boolean restartFlag = false;
 
@@ -300,7 +300,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private ServerSocket serverSocket;
     private NetworkServerControlImpl serverInstance;
     private LocalizedResource langUtil;
-    public String clientLocale;
+    private String clientLocale;
     /** List of local addresses for checking admin commands. */
     ArrayList<InetAddress> localAddresses;
 
@@ -372,6 +372,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
         }
     }
 
+    /** Get the log writer we're using */
+    public  PrintWriter logWriter() { return logWriter; }
+
     /**
      * Get the host where we listen for connections.
      */
@@ -548,6 +551,24 @@ public void consoleError(String msg)
         throw new Exception(msg);
     }
 
+    /** Return the debug state */
+    public  boolean debugOutput()   { return debugOutput; }
+
+    /** Return the att_extnam server attribute */
+    public  static  String  att_extnam()    { return att_extnam; }
+    
+    /** Return the att_srvclsnm server attribute */
+    public  static  String  att_srvclsnm()    { return att_srvclsnm; }
+    
+    /** Return the att_srvrlslv server attribute */
+    public  static  String  att_srvrlslv()    { return att_srvrlslv; }
+    
+    /** Return the product id */
+    public  static  String  prdId()    { return prdId; }
+
+    /** Return the bytes of the product id */
+    public  static  byte[]  prdIdBytes() { return (byte[]) prdIdBytes_.clone(); }
+    
     /**
      * Write an exception to console output stream,
      * but only if debugOutput is true.
@@ -4091,7 +4112,7 @@ int getConnectionNumber() {
         return connNum;
     }
 
-    protected void setClientLocale(String locale)
+    public void setClientLocale(String locale)
     {
         clientLocale = locale;
     }
