diff --git a/db/derby/code/branches/10.1/java/client/org/apache/derby/client/am/Cursor.java b/db/derby/code/branches/10.1/java/client/org/apache/derby/client/am/Cursor.java
index 940fe326..3af9b598 100644
--- a/db/derby/code/branches/10.1/java/client/org/apache/derby/client/am/Cursor.java
+++ b/db/derby/code/branches/10.1/java/client/org/apache/derby/client/am/Cursor.java
@@ -20,6 +20,9 @@
 
 package org.apache.derby.client.am;
 
+import java.io.UnsupportedEncodingException;
+
+
 // When we calculate column offsets make sure we calculate the correct offsets for double byte charactr5er data
 // length from server is number of chars, not bytes
 // Direct byte-level converters are called directly by this class, cross converters are deferred to the CrossConverters class.
@@ -397,71 +400,111 @@ private final String getCHAR(int column) throws SqlException {
 
     // Build a JDBC Date object from the DERBY ISO DATE field.
     private final java.sql.Date getDATE(int column) throws SqlException {
+        try {
         return org.apache.derby.client.am.DateTime.dateBytesToDate(dataBuffer_,
                 columnDataPosition_[column - 1],
-                recyclableDate_);
+                recyclableDate_, 
+                charsetName_[column - 1]);
+        }catch (UnsupportedEncodingException e) {
+             throw new SqlException(agent_.logWriter_, e, 
+                    "Encoding is unsupported for conversion to DATE");
+        }
+
+        
     }
 
     // Build a JDBC Time object from the DERBY ISO TIME field.
     private final java.sql.Time getTIME(int column) throws SqlException {
+        try {
         return org.apache.derby.client.am.DateTime.timeBytesToTime(dataBuffer_,
                 columnDataPosition_[column - 1],
-                recyclableTime_);
+                    recyclableTime_,
+                    charsetName_[column - 1]);
+        } catch (UnsupportedEncodingException e) {
+            throw new SqlException(agent_.logWriter_, e, 
+                    "Encoding is unsupported for conversion to TIME");
+        }
     }
 
     // Build a JDBC Timestamp object from the DERBY ISO TIMESTAMP field.
     private final java.sql.Timestamp getTIMESTAMP(int column) throws SqlException {
-        return org.apache.derby.client.am.DateTime.timestampBytesToTimestamp(dataBuffer_,
+
+        try {
+        return org.apache.derby.client.am.DateTime.timestampBytesToTimestamp(
+                dataBuffer_,
                 columnDataPosition_[column - 1],
-                recyclableTimestamp_);
+                recyclableTimestamp_, 
+                charsetName_[column - 1]);
+    } catch (java.io.UnsupportedEncodingException e) {
+        throw new SqlException(agent_.logWriter_, e, 
+                "Encoding is unsupported for conversion to TIMESTAMP");
+    }
     }
 
     // Build a JDBC Timestamp object from the DERBY ISO DATE field.
     private final java.sql.Timestamp getTimestampFromDATE(int column) throws SqlException {
+        try {
         return org.apache.derby.client.am.DateTime.dateBytesToTimestamp(dataBuffer_,
                 columnDataPosition_[column - 1],
-                recyclableTimestamp_);
+                    recyclableTimestamp_, 
+                    charsetName_[column -1]);
+        } catch (UnsupportedEncodingException e) {
+              throw new SqlException(agent_.logWriter_, e, 
+                      "Encoding is unsupported for conversion to TIMESTAMP");            
+        }
     }
 
     // Build a JDBC Timestamp object from the DERBY ISO TIME field.
     private final java.sql.Timestamp getTimestampFromTIME(int column) throws SqlException {
+        try {
         return org.apache.derby.client.am.DateTime.timeBytesToTimestamp(dataBuffer_,
                 columnDataPosition_[column - 1],
-                recyclableTimestamp_);
+                    recyclableTimestamp_,
+                    charsetName_[column -1]);
+        } catch (UnsupportedEncodingException e) {
+            throw new SqlException(agent_.logWriter_, e, 
+                    "Encoding is unsupported for conversion to TIMESTAMP");
+        }
     }
 
     // Build a JDBC Date object from the DERBY ISO TIMESTAMP field.
     private final java.sql.Date getDateFromTIMESTAMP(int column) throws SqlException {
+        try {
         return org.apache.derby.client.am.DateTime.timestampBytesToDate(dataBuffer_,
                 columnDataPosition_[column - 1],
-                recyclableDate_);
+                    recyclableDate_,
+                    charsetName_[column -1]);
+        } catch (UnsupportedEncodingException e) {
+             throw new SqlException(agent_.logWriter_, e, 
+                     "Encoding is unsupported for conversion to DATE");
+        }
     }
 
     // Build a JDBC Time object from the DERBY ISO TIMESTAMP field.
     private final java.sql.Time getTimeFromTIMESTAMP(int column) throws SqlException {
+        try {
         return org.apache.derby.client.am.DateTime.timestampBytesToTime(dataBuffer_,
                 columnDataPosition_[column - 1],
-                recyclableTime_);
+                    recyclableTime_,
+                    charsetName_[column -1]);
+        } catch (UnsupportedEncodingException e) {
+             throw new SqlException(agent_.logWriter_, e, 
+                     "Encoding is unsupported for conversion to TIME");
+        }
     }
 
     private final String getStringFromDATE(int column) throws SqlException {
-        return org.apache.derby.client.am.DateTime.dateBytesToDate(dataBuffer_,
-                columnDataPosition_[column - 1],
-                recyclableDate_).toString();
+        return getDATE(column).toString();
     }
 
     // Build a string object from the DERBY byte TIME representation.
     private final String getStringFromTIME(int column) throws SqlException {
-        return org.apache.derby.client.am.DateTime.timeBytesToTime(dataBuffer_,
-                columnDataPosition_[column - 1],
-                recyclableTime_).toString();
+        return getTIME(column).toString();
     }
 
     // Build a string object from the DERBY byte TIMESTAMP representation.
     private final String getStringFromTIMESTAMP(int column) throws SqlException {
-        return org.apache.derby.client.am.DateTime.timestampBytesToTimestamp(dataBuffer_,
-                columnDataPosition_[column - 1],
-                recyclableTimestamp_).toString();
+        return getTIMESTAMP(column).toString();
     }
 
     // Extract bytes from a database java.sql.Types.BINARY field.
diff --git a/db/derby/code/branches/10.1/java/client/org/apache/derby/client/am/DateTime.java b/db/derby/code/branches/10.1/java/client/org/apache/derby/client/am/DateTime.java
index 7878a928..c4146909 100644
--- a/db/derby/code/branches/10.1/java/client/org/apache/derby/client/am/DateTime.java
+++ b/db/derby/code/branches/10.1/java/client/org/apache/derby/client/am/DateTime.java
@@ -19,6 +19,8 @@
 */
 package org.apache.derby.client.am;
 
+import java.io.UnsupportedEncodingException;
+
 
 /**
  * High performance converters from date/time byte encodings to JDBC Date, Time and Timestamp objects.
@@ -44,15 +46,25 @@ private DateTime() {
     // *********************************************************
 
     /**
-     * Expected character representation is DERBY string representation of a date, which is in one of the following
-     * format.
+     * Expected character representation is DERBY string representation of a date, 
+     * which is in JIS format: <code> yyyy-mm-dd </code>
+     * 
+     * @param buffer    
+     * @param offset    
+     * @param recyclableDate
+     * @param encoding            encoding of buffer data
+     * @return
+     * @throws UnsupportedEncodingException
      */
     public static final java.sql.Date dateBytesToDate(byte[] buffer,
                                                       int offset,
-                                                      java.sql.Date recyclableDate) {
+                                                      java.sql.Date recyclableDate, 
+                                                      String encoding) 
+    throws UnsupportedEncodingException {
         int year, month, day;
 
-        String date = new String(buffer, offset, DateTime.dateRepresentationLength);
+        String date = new String(buffer, offset, 
+                DateTime.dateRepresentationLength,encoding);
         int yearIndx, monthIndx, dayIndx;
         if (date.charAt(4) == '-') {
             // JIS format: yyyy-mm-dd.
@@ -90,16 +102,26 @@ private DateTime() {
         }
     }
 
+    
     /**
-     * Expected character representation is DERBY string representation of a time, which is in one of the following
-     * format: hh.mm.ss.
+     * Expected character representation is DERBY string representation of time,
+     * which is in the format: <code> hh.mm.ss </code>
+     * @param buffer
+     * @param offset
+     * @param recyclableTime
+     * @param encoding           encoding of buffer
+     * @return
+     * @throws UnsupportedEncodingException
      */
     public static final java.sql.Time timeBytesToTime(byte[] buffer,
                                                       int offset,
-                                                      java.sql.Time recyclableTime) {
+                                                      java.sql.Time recyclableTime,
+                                                      String encoding) 
+    throws UnsupportedEncodingException {
         int hour, minute, second;
 
-        String time = new String(buffer, offset, DateTime.timeRepresentationLength);
+        String time = new String(buffer, offset, 
+                DateTime.timeRepresentationLength, encoding);
         int zeroBase = ((int) '0');
 
         // compute hour.
@@ -128,13 +150,24 @@ private DateTime() {
     /**
      * Expected character representation is DERBY string representation of a timestamp:
      * <code>yyyy-mm-dd-hh.mm.ss.ffffff</code>.
+     * 
+     * @param buffer
+     * @param offset
+     * @param recyclableTimestamp
+     * @param encoding                encoding of buffer
+     * @return
+     * @throws UnsupportedEncodingException
      */
     public static final java.sql.Timestamp timestampBytesToTimestamp(byte[] buffer,
                                                                      int offset,
-                                                                     java.sql.Timestamp recyclableTimestamp) {
+                                                                     java.sql.Timestamp recyclableTimestamp, 
+                                                                     String encoding) 
+    throws UnsupportedEncodingException
+    {
         int year, month, day, hour, minute, second, fraction;
+        String timestamp = new String(buffer, offset, 
+                DateTime.timestampRepresentationLength,encoding);
 
-        String timestamp = new String(buffer, offset, DateTime.timestampRepresentationLength);
         int zeroBase = ((int) '0');
 
         year =
@@ -301,16 +334,27 @@ public static final int timestampToTimestampBytes(byte[] buffer,
     // ******* CROSS output converters (byte[] -> class) *******
     // *********************************************************
 
+    
     /**
-     * Expected character representation is DERBY string representation of a date, which is in one of the following
-     * format.
+     * Expected character representation is DERBY string representation of a date
+     * which is in JIS format: <code> yyyy-mm-dd </code>
+     * 
+     * @param buffer
+     * @param offset
+     * @param recyclableTimestamp
+     * @param encoding                encoding of buffer
+     * @return
+     * @throws UnsupportedEncodingException
      */
     public static final java.sql.Timestamp dateBytesToTimestamp(byte[] buffer,
                                                                 int offset,
-                                                                java.sql.Timestamp recyclableTimestamp) {
+                                                                java.sql.Timestamp recyclableTimestamp,
+                                                                String encoding) 
+    throws UnsupportedEncodingException {
         int year, month, day;
 
-        String date = new String(buffer, offset, DateTime.dateRepresentationLength);
+        String date = new String(buffer, offset, DateTime.dateRepresentationLength,
+                encoding);
         int yearIndx, monthIndx, dayIndx;
 
         yearIndx = 0;
@@ -348,16 +392,28 @@ public static final int timestampToTimestampBytes(byte[] buffer,
         }
     }
 
+    
     /**
-     * Expected character representation is DERBY string representation of a time, which is in one of the following
-     * format.
+     *  Expected character representation is DERBY string representation of time
+     * which is in the format: <code> hh.mm.ss </code>
+     * 
+     * @param buffer
+     * @param offset
+     * @param recyclableTimestamp
+     * @param encoding                 encoding of buffer
+     * @return  
+     * @throws UnsupportedEncodingException
+     * 
      */
     public static final java.sql.Timestamp timeBytesToTimestamp(byte[] buffer,
                                                                 int offset,
-                                                                java.sql.Timestamp recyclableTimestamp) {
+                                                                java.sql.Timestamp recyclableTimestamp, 
+                                                                String encoding)
+    throws UnsupportedEncodingException {
         int hour, minute, second;
 
-        String time = new String(buffer, offset, DateTime.timeRepresentationLength);
+        String time = new String(buffer, offset, 
+                DateTime.timeRepresentationLength, encoding);
         int zeroBase = ((int) '0');
 
         // compute hour.
@@ -387,16 +443,28 @@ public static final int timestampToTimestampBytes(byte[] buffer,
         }
     }
 
+    
     /**
      * Expected character representation is DERBY string representation of a timestamp:
      * <code>yyyy-mm-dd-hh.mm.ss.ffffff</code>.
+     * 
+     * @param buffer
+     * @param offset
+     * @param recyclableDate
+     * @param encoding             encoding of buffer
+     * @return
+     * @throws UnsupportedEncodingException
      */
     public static final java.sql.Date timestampBytesToDate(byte[] buffer,
                                                            int offset,
-                                                           java.sql.Date recyclableDate) {
+                                                           java.sql.Date recyclableDate, 
+                                                           String encoding) 
+    throws UnsupportedEncodingException 
+     {
         int year, month, day;
 
-        String timestamp = new String(buffer, offset, DateTime.timestampRepresentationLength);
+        String timestamp = new String(buffer, offset, 
+                DateTime.timestampRepresentationLength, encoding);
         int zeroBase = ((int) '0');
 
         year =
@@ -423,16 +491,27 @@ public static final int timestampToTimestampBytes(byte[] buffer,
         }
     }
 
+   
     /**
      * Expected character representation is DERBY string representation of a timestamp:
      * <code>yyyy-mm-dd-hh.mm.ss.ffffff</code>.
+     * 
+     * @param buffer
+     * @param offset
+     * @param recyclableTime
+     * @param encoding            encoding of buffer
+     * @return
+     * @throws UnsupportedEncodingException
      */
     public static final java.sql.Time timestampBytesToTime(byte[] buffer,
                                                            int offset,
-                                                           java.sql.Time recyclableTime) {
+                                                           java.sql.Time recyclableTime, 
+                                                           String encoding) 
+    throws  UnsupportedEncodingException {
         int hour, minute, second;
 
-        String timestamp = new String(buffer, offset, DateTime.timestampRepresentationLength);
+        String timestamp = new String(buffer, offset, 
+                DateTime.timestampRepresentationLength, encoding);
         int zeroBase = ((int) '0');
 
         hour =
