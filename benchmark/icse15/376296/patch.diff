diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/XADatabase.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/XADatabase.java
index 1b2c39b4..69ce8a80 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/XADatabase.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/XADatabase.java
@@ -89,6 +89,9 @@ protected synchronized Connection makeConnection(Properties p) throws
 		
 		// Get a new logical connection.
 		conn = xaConnection.getConnection();
+		// Client will always drive the commits so connection should
+		// always be autocommit false on the server. DERBY-898/DERBY-899
+		conn.setAutoCommit(false);
 		setConnection(conn);
 		return conn;
 		
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/savepointJdbc30_JSR169.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/savepointJdbc30_JSR169.java
index df885416..3faf9d2c 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/savepointJdbc30_JSR169.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/savepointJdbc30_JSR169.java
@@ -22,14 +22,12 @@
 
 import java.sql.Connection;
 import java.sql.DriverManager;
-import java.sql.Savepoint;
 import java.sql.ResultSet;
-import java.sql.Statement;
 import java.sql.SQLException;
-import java.sql.Types;
+import java.sql.Savepoint;
+import java.sql.Statement;
 
 import org.apache.derby.tools.ij;
-import org.apache.derby.tools.JDBCDisplayUtil;
 import org.apache.derbyTesting.functionTests.util.TestUtil;
 /**
  * Test the new class Savepoint in jdbc 30.
@@ -50,7 +48,7 @@
 
 
 	public static void main(String[] args) {
-		Connection con = null, con2 = null, con3 = null;
+		Connection con = null, con2 = null;
 		Statement  s;
 		System.out.println("Test savepointJdbc30 starting");
 
@@ -60,12 +58,34 @@ public static void main(String[] args) {
 			// make the initial connection.
 			ij.getPropertyArg(args);
 			con = ij.startJBMS();
-			isDerbyNet = TestUtil.isNetFramework();
+			con2 = ij.startJBMS();
+			runTests("regular connections", con,con2);
+			
+			con.close();
+			con2.close();
+
+		}
+		catch (SQLException e) {
+			dumpSQLExceptions(e);
+		}
+		catch (Throwable e) {
+			System.out.println("FAIL -- unexpected exception:");
+			e.printStackTrace(System.out);
+		}
 
+	
+	}
+
+public static void runTests(String tag, Connection con, Connection con2) 
+throws SQLException {
+	
+	Statement  s;
+	System.out.println("Test savepointJdbc30 starting for "  + tag);
+	isDerbyNet = TestUtil.isNetFramework();
 			con.setAutoCommit(true); // make sure it is true
-			s = con.createStatement();
-			con2 = ij.startJBMS();
 			con2.setAutoCommit(false);
+	s = con.createStatement();
+
 			/* Create the table and do any other set-up */
 			setUpTest(s);
 
@@ -82,29 +102,14 @@ public static void main(String[] args) {
 			if (!isDerbyNet)
 				nonDRDATests(con, s);
 
-			s.close();
-			con.close();
-			con2.close();
 
-			con3 = ij.startJBMS();
-			con3.setAutoCommit(true);
-			s = con3.createStatement();
+	con.setAutoCommit(true);
 			TestUtil.cleanUpTest(s, testObjects);
-			s.close();
-			con3.close();
 
+	s.close();
 
 		}
-		catch (SQLException e) {
-			dumpSQLExceptions(e);
-		}
-		catch (Throwable e) {
-			System.out.println("FAIL -- unexpected exception:");
-			e.printStackTrace(System.out);
-		}
 
-		System.out.println("Test savepointJdbc30 finished");
-	}
 
 	//The following tests have nested savepoints through JDBC calls. When coming through JCC,
 	//these nested JDBC savepoint calls are translated into equivalent SQL savepoint statements.
@@ -946,7 +951,7 @@ public static void doConnectionReleaseSavepoint() throws Throwable
 		s.executeUpdate("insert into t2 values(1)");
 	}
 
-	static private void dumpSQLExceptions (SQLException se) {
+	 public static void dumpSQLExceptions (SQLException se) {
 		System.out.println("FAIL -- unexpected exception");
 		while (se != null) {
 			System.out.print("SQLSTATE("+se.getSQLState()+"):");
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/savepointJdbc30_XA.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/savepointJdbc30_XA.java
index 3f24d583..00af5918 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/savepointJdbc30_XA.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/savepointJdbc30_XA.java
@@ -1 +1,76 @@
   + native
+/*
+
+   Derby - Class org.apache.derbyTesting.functionTests.tests.jdbcapi.savepointJdbc30_XA.java
+
+   Copyright 2002, 2004 The Apache Software Foundation or its licensors, as applicable.
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derbyTesting.functionTests.tests.jdbcapi;
+
+import java.sql.Connection;
+import java.sql.Savepoint;
+import java.sql.ResultSet;
+import java.sql.Statement;
+import java.sql.SQLException;
+import java.sql.Types;
+import java.util.Properties;
+
+import javax.sql.XADataSource;
+
+import org.apache.derby.tools.ij;
+import org.apache.derbyTesting.functionTests.util.TestUtil;
+/**
+ * Additional savepoint tests not available with J2ME for connections
+ * obtained from XADataSource (DERBY-898/DERBY-899)
+ */
+
+
+public class savepointJdbc30_XA  extends savepointJdbc30_JSR169{
+
+
+
+	public static void main(String[] args) {
+		Connection con = null, con2 = null;
+	    // Check savepoints for local transactions for
+		// connections fromXADataSource	    
+	    
+	    try {
+	    // Get a connection just to set up the environment with the properties
+	    ij.getPropertyArg(args);	
+	    ij.startJBMS().close();
+		// Test connections obtained via XADataSource DERBY-898/899
+		Properties dsprops = new Properties();
+		dsprops.setProperty("databaseName","wombat");
+		XADataSource ds  = TestUtil.getXADataSource(dsprops);
+		con = ds.getXAConnection().getConnection();
+		con2 = ds.getXAConnection().getConnection();
+		
+		runTests("connections from XADataSource (local tranasaction)", 
+				 con, con2);
+		con.close();
+		con2.close();
+	    }
+		catch (SQLException e) {
+		    dumpSQLExceptions(e);
+				}
+		catch (Throwable e) {
+			System.out.println("FAIL -- unexpected exception:");
+			e.printStackTrace(System.out);
+		}
+
+	}
+}
