diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
index f5fdb926..0ca80fb1 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
@@ -148,7 +148,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	boolean compilingStatement;
 
     /** True if the statement was invalidated while it was being compiled. */
-    private boolean invalidatedWhileCompiling;
+    boolean invalidatedWhileCompiling;
 
 	////////////////////////////////////////////////
 	// STATE that is not copied by getClone()
@@ -408,47 +408,7 @@ private ResultSet executeStmt(Activation activation,
 			// to execute.  That exception will be caught by the executeSPS()
 			// method of the GenericTriggerExecutor class, and at that time
 			// the SPS action will be recompiled correctly.
-
-                final int depth = lccToUse.getStatementDepth();
-                try {
                     rePrepare(lccToUse);
-                } finally {
-                    boolean recompile = false;
-
-                    // Check if the statement was invalidated while it was
-                    // compiled. If so, the newly compiled plan may or may
-                    // not be up to date anymore, so we recompile the statement
-                    // if this happens. Note that this is checked in a finally
-                    // block, so we also retry if an exception was thrown. The
-                    // exception was probably thrown because of the changes
-                    // that invalidated the statement. If not, recompiling
-                    // will also fail, and the exception will be exposed to
-                    // the caller.
-                    //
-                    // invalidatedWhileCompiling and isValid are protected by
-                    // synchronization on "this".
-                    synchronized (this) {
-                        if (invalidatedWhileCompiling) {
-                            isValid = false;
-                            invalidatedWhileCompiling = false;
-                            recompile = true;
-                        }
-                    }
-
-                    if (recompile) {
-                        // A new statement context is pushed while compiling.
-                        // Typically, this context is popped by an error
-                        // handler at a higher level. But since we retry the
-                        // compilation, the error handler won't be invoked, so
-                        // the stack must be reset to its original state first.
-                        while (lccToUse.getStatementDepth() > depth) {
-                            lccToUse.popStatementContext(
-                                    lccToUse.getStatementContext(), null);
-                        }
-
-                        continue recompileOutOfDatePlan;
-                    }
-                }
 			}
 
 			StatementContext statementContext = lccToUse.pushStatementContext(
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java
index 7beab656..23c3890c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/GenericStatement.java
@@ -82,7 +82,7 @@ public PreparedStatement prepare(LanguageConnectionContext lcc) throws StandardE
 		** Note: don't reset state since this might be
 		** a recompilation of an already prepared statement.
 		*/ 
-		return prepMinion(lcc, true, (Object[]) null, (SchemaDescriptor) null, false); 
+		return prepare(lcc, false);
 	}
 	public PreparedStatement prepare(LanguageConnectionContext lcc, boolean forMetaData) throws StandardException
 	{
@@ -90,7 +90,52 @@ public PreparedStatement prepare(LanguageConnectionContext lcc, boolean forMetaD
 		** Note: don't reset state since this might be
 		** a recompilation of an already prepared statement.
 		*/ 
-		return prepMinion(lcc, true, (Object[]) null, (SchemaDescriptor) null, forMetaData); 
+
+        final int depth = lcc.getStatementDepth();
+        while (true) {
+            try {
+                return prepMinion(lcc, true, (Object[]) null,
+                                  (SchemaDescriptor) null, forMetaData);
+            } finally {
+                boolean recompile = false;
+
+                // Check if the statement was invalidated while it was
+                // compiled. If so, the newly compiled plan may not be
+                // up to date anymore, so we recompile the statement
+                // if this happens. Note that this is checked in a finally
+                // block, so we also retry if an exception was thrown. The
+                // exception was probably thrown because of the changes
+                // that invalidated the statement. If not, recompiling
+                // will also fail, and the exception will be exposed to
+                // the caller.
+                //
+                // invalidatedWhileCompiling and isValid are protected by
+                // synchronization on the prepared statement.
+                synchronized (preparedStmt) {
+                    if (preparedStmt.invalidatedWhileCompiling) {
+                        preparedStmt.isValid = false;
+                        preparedStmt.invalidatedWhileCompiling = false;
+                        recompile = true;
+                    }
+                }
+
+                if (recompile) {
+                    // A new statement context is pushed while compiling.
+                    // Typically, this context is popped by an error
+                    // handler at a higher level. But since we retry the
+                    // compilation, the error handler won't be invoked, so
+                    // the stack must be reset to its original state first.
+                    while (lcc.getStatementDepth() > depth) {
+                        lcc.popStatementContext(
+                                lcc.getStatementContext(), null);
+                    }
+
+                    // Don't return yet. The statement was invalidated, so
+                    // we must retry the compilation.
+                    continue;
+                }
+            }
+        }
 	}
 
 	private PreparedStatement prepMinion(LanguageConnectionContext lcc, boolean cacheMe, Object[] paramDefaults,
