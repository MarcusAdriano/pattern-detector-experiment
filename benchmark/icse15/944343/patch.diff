diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamOut.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamOut.java
index ec70c66f..673cba70 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamOut.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamOut.java
@@ -72,9 +72,8 @@ public static void transferRanges(InetAddress target, String tableName, Collecti
     {
         assert ranges.size() > 0;
         
-        // this is a sneaking way of indicating target as a destination node. it is a lame way of doing it and will 
-        // change as part of fixing CASSANDRA-1076.
-        StreamOutManager.get(target);
+        // this is so that this target shows up as a destination while anticompaction is happening.
+        StreamOutManager.pendingDestinations.add(target);
 
         logger.debug("Beginning transfer process to " + target + " for ranges " + StringUtils.join(ranges, ", "));
 
@@ -113,6 +112,7 @@ public static void transferRanges(InetAddress target, String tableName, Collecti
         finally
         {
             StreamingService.instance.setStatus(StreamingService.NOTHING);
+            StreamOutManager.remove(target);
         }
         if (callback != null)
             callback.run();
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamOutManager.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamOutManager.java
index 0d5f1851..d5779a40 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamOutManager.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamOutManager.java
@@ -48,6 +48,7 @@
     private static Logger logger = LoggerFactory.getLogger( StreamOutManager.class );
         
     private static ConcurrentMap<InetAddress, StreamOutManager> streamManagers = new ConcurrentHashMap<InetAddress, StreamOutManager>();
+    public static final Set<InetAddress> pendingDestinations = Collections.synchronizedSet(new HashSet<InetAddress>());
 
     public static StreamOutManager get(InetAddress to)
     {
@@ -61,10 +62,20 @@ public static StreamOutManager get(InetAddress to)
         return manager;
     }
 
+    public static void remove(InetAddress to)
+    {
+        if (streamManagers.containsKey(to) && streamManagers.get(to).files.size() == 0)
+            streamManagers.remove(to);
+        pendingDestinations.remove(to);
+    }
+
     public static Set<InetAddress> getDestinations()
     {
         // the results of streamManagers.keySet() isn't serializable, so create a new set.
-        return new HashSet(streamManagers.keySet());
+        Set<InetAddress> hosts = new HashSet<InetAddress>();
+        hosts.addAll(streamManagers.keySet());
+        hosts.addAll(pendingDestinations);
+        return hosts;
     }
 
     // we need sequential and random access to the files. hence, the map and the list.
