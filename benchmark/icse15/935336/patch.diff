diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/MergeJoinResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/MergeJoinResultSet.java
index 8f83a4d6..34cd51f2 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/MergeJoinResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/MergeJoinResultSet.java
@@ -254,15 +254,25 @@ private ExecRow getReturnRow(ExecRow leftRow, ExecRow rightRow)
 		for (colInCtr = 1, colOutCtr = 1; colInCtr <= leftNumCols;
 			 colInCtr++, colOutCtr++)
 		{
-				 mergedRow.setColumn(colOutCtr, 
-									 leftRow.getColumn(colInCtr));
+            DataValueDescriptor src_col = leftRow.getColumn(colInCtr);
+            // Clone the value if it is represented by a stream (DERBY-3650).
+            if (src_col != null && src_col.hasStream()) {
+                src_col = src_col.cloneValue(false);
+            }
+
+            mergedRow.setColumn(colOutCtr, src_col);
 		}
 
 		for (colInCtr = 1; colInCtr <= rightNumCols; 
 			 colInCtr++, colOutCtr++)
 		{
-				 mergedRow.setColumn(colOutCtr, 
-									 rightRow.getColumn(colInCtr));
+            DataValueDescriptor src_col = rightRow.getColumn(colInCtr);
+            // Clone the value if it is represented by a stream (DERBY-3650).
+            if (src_col != null && src_col.hasStream()) {
+                src_col = src_col.cloneValue(false);
+            }
+
+            mergedRow.setColumn(colOutCtr, src_col);
 		}
 
 		setCurrentRow(mergedRow);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NestedLoopJoinResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NestedLoopJoinResultSet.java
index 2a030302..12e4c2c6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NestedLoopJoinResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NestedLoopJoinResultSet.java
@@ -180,16 +180,30 @@ public ExecRow	getNextRowCore() throws StandardException
 				for (colInCtr = 1, colOutCtr = 1; colInCtr <= leftNumCols;
 					 colInCtr++, colOutCtr++)
 					{
-						 mergedRow.setColumn(colOutCtr, 
-											 leftRow.getColumn(colInCtr));
+                    DataValueDescriptor src_col = leftRow.getColumn(colInCtr);
+                    // Clone the value if it is represented by a stream
+                    // (DERBY-3650).
+                    if (src_col != null && src_col.hasStream()) {
+                        src_col = src_col.cloneValue(false);
 					}
+
+                    mergedRow.setColumn(colOutCtr, src_col);
+                }
+
 				if (! notExistsRightSide)
 				{
 					for (colInCtr = 1; colInCtr <= rightNumCols; 
 						 colInCtr++, colOutCtr++)
 					{
-						 mergedRow.setColumn(colOutCtr, 
-											 rightRow.getColumn(colInCtr));
+                        DataValueDescriptor src_col = 
+                            rightRow.getColumn(colInCtr);
+                        // Clone the value if it is represented by a stream
+                        // (DERBY-3650).
+                        if (src_col != null && src_col.hasStream()) {
+                            src_col = src_col.cloneValue(false);
+                        }
+
+                        mergedRow.setColumn(colOutCtr, src_col);
 					}
 				}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NestedLoopLeftOuterJoinResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NestedLoopLeftOuterJoinResultSet.java
index 36a00a6b..d7a29104 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NestedLoopLeftOuterJoinResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/NestedLoopLeftOuterJoinResultSet.java
@@ -223,14 +223,24 @@ protected void getMergedRow(ExecRow leftRow, ExecRow rightRow)
 		for (colInCtr = 1, colOutCtr = 1; colInCtr <= leftNumCols;
 			 colInCtr++, colOutCtr++)
 		{
-			 mergedRow.setColumn(colOutCtr, 
-								 leftRow.getColumn(colInCtr));
+            DataValueDescriptor src_col = leftRow.getColumn(colInCtr);
+            // Clone the value if it is represented by a stream (DERBY-3650).
+            if (src_col != null && src_col.hasStream()) {
+                src_col = src_col.cloneValue(false);
+            }
+
+            mergedRow.setColumn(colOutCtr, src_col);
 		}
 		for (colInCtr = 1; colInCtr <= rightNumCols; 
 			 colInCtr++, colOutCtr++)
 		{
-			 mergedRow.setColumn(colOutCtr, 
-								 rightRow.getColumn(colInCtr));
+            DataValueDescriptor src_col = rightRow.getColumn(colInCtr);
+            // Clone the value if it is represented by a stream (DERBY-3650).
+            if (src_col != null && src_col.hasStream()) {
+                src_col = src_col.cloneValue(false);
+            }
+
+            mergedRow.setColumn(colOutCtr, src_col);
 		}
 	}
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java
index 1ab83e94..e925878b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java
@@ -73,6 +73,7 @@ public static Test suite() throws SQLException {
         suite.addTest(LobSortTest.suite());
         suite.addTest (BlobSetMethodsTest.suite());
         suite.addTest (JDBC4FromJDBC3DataSourceTest.suite());
+        suite.addTest(Derby3650Test.suite());
 		
 		return suite;
 	}
