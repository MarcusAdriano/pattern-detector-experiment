diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java
index 62fa8fa9..d7aac3e6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/DefaultInfoImpl.java
@@ -21,6 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.catalog.types;
 
+import org.apache.derby.iapi.services.io.ArrayUtil;
 import org.apache.derby.iapi.services.io.StoredFormatIds;
 import org.apache.derby.iapi.services.io.Formatable;
 
@@ -116,7 +117,7 @@ public String getDefaultText()
 	 */
 	public String[] getReferencedColumnNames()
 	{
-		return referencedColumnNames;
+        return ArrayUtil.copy( referencedColumnNames );
 	}
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/IndexDescriptorImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/IndexDescriptorImpl.java
index 8749c621..a9729128 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/IndexDescriptorImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/IndexDescriptorImpl.java
@@ -23,6 +23,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.catalog.IndexDescriptor;
 
+import org.apache.derby.iapi.services.io.ArrayUtil;
 import org.apache.derby.iapi.services.io.Formatable;
 import org.apache.derby.iapi.services.io.StoredFormatIds;
 
@@ -98,8 +99,8 @@ public IndexDescriptorImpl(String indexType,
 		this.indexType = indexType;
 		this.isUnique = isUnique;
 		this.isUniqueWithDuplicateNulls = isUniqueWithDuplicateNulls;
-		this.baseColumnPositions = baseColumnPositions;
-		this.isAscending = isAscending;
+		this.baseColumnPositions = ArrayUtil.copy( baseColumnPositions );
+		this.isAscending = ArrayUtil.copy( isAscending );
 		this.numberOfOrderedColumns = numberOfOrderedColumns;
 	}
 
@@ -127,7 +128,7 @@ public boolean isUnique()
 	/** @see IndexDescriptor#baseColumnPositions */
 	public int[] baseColumnPositions()
 	{
-		return baseColumnPositions;
+        return ArrayUtil.copy( baseColumnPositions );
 	}
 
 	/** @see IndexDescriptor#getKeyColumnPosition */
@@ -182,19 +183,19 @@ public boolean			isDescending(Integer keyColumnPosition)
 	/** @see IndexDescriptor#isAscending */
 	public boolean[]		isAscending()
 	{
-		return isAscending;
+        return ArrayUtil.copy( isAscending );
 	}
 
 	/** @see IndexDescriptor#setBaseColumnPositions */
 	public void		setBaseColumnPositions(int[] baseColumnPositions)
 	{
-		this.baseColumnPositions = baseColumnPositions;
+		this.baseColumnPositions = ArrayUtil.copy( baseColumnPositions );
 	}
 
 	/** @see IndexDescriptor#setIsAscending */
 	public void		setIsAscending(boolean[] isAscending)
 	{
-		this.isAscending = isAscending;
+		this.isAscending = ArrayUtil.copy( isAscending );
 	}
 
 	/** @see IndexDescriptor#setNumberOfOrderedColumns */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java
index bb812b47..e7f9197c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/ReferencedColumnsDescriptorImpl.java
@@ -22,6 +22,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.catalog.types;
 
 
+import org.apache.derby.iapi.services.io.ArrayUtil;
 import org.apache.derby.iapi.services.io.Formatable;
 import org.apache.derby.iapi.services.io.StoredFormatIds;
 import org.apache.derby.catalog.ReferencedColumns;
@@ -80,7 +81,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 	public ReferencedColumnsDescriptorImpl(	int[] referencedColumns)
 	{
-		this.referencedColumns = referencedColumns;
+		this.referencedColumns = ArrayUtil.copy( referencedColumns );
 	}
 
 	/**
@@ -94,8 +95,8 @@ public ReferencedColumnsDescriptorImpl(	int[] referencedColumns)
 	public ReferencedColumnsDescriptorImpl(	int[] referencedColumns,
 			int[] referencedColumnsInTriggerAction)
 	{
-		this.referencedColumns = referencedColumns;
-		this.referencedColumnsInTriggerAction = referencedColumnsInTriggerAction;
+		this.referencedColumns = ArrayUtil.copy( referencedColumns );
+		this.referencedColumnsInTriggerAction = ArrayUtil.copy( referencedColumnsInTriggerAction );
 	}
 
 	/** Zero-argument constructor for Formatable interface */
@@ -107,7 +108,7 @@ public ReferencedColumnsDescriptorImpl()
 	*/
 	public int[] getReferencedColumnPositions()
 	{
-		return referencedColumns;
+		return ArrayUtil.copy( referencedColumns );
 	}
 	
 	/**
@@ -115,7 +116,7 @@ public ReferencedColumnsDescriptorImpl()
 	*/
 	public int[] getTriggerActionReferencedColumnPositions()
 	{
-		return referencedColumnsInTriggerAction;
+		return ArrayUtil.copy( referencedColumnsInTriggerAction );
 	}
 
 	/* Externalizable interface */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java
index 484699ea..9681a6ba 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java
@@ -172,9 +172,9 @@ public RoutineAliasInfo(String methodName,
 
 		super(methodName);
 		this.parameterCount = parameterCount;
-		this.parameterNames = parameterNames;
-		this.parameterTypes = parameterTypes;
-		this.parameterModes = parameterModes;
+		this.parameterNames = ArrayUtil.copy( parameterNames );
+		setParameterTypes( parameterTypes );
+		this.parameterModes = ArrayUtil.copy( parameterModes );
 		this.dynamicResultSets = dynamicResultSets;
 		this.parameterStyle = parameterStyle;
 		this.sqlOptions = (short) (sqlAllowed & SQL_ALLOWED_MASK);
@@ -232,22 +232,25 @@ public int getParameterCount() {
      * Types of the parameters. If there are no parameters
      * then this may return null (or a zero length array).
      */
-	public TypeDescriptor[] getParameterTypes() {
-		return parameterTypes;
+	public TypeDescriptor[] getParameterTypes()
+    {
+        return TypeDescriptorImpl.copyTypeDescriptors( parameterTypes );
 	}
 
-	public int[] getParameterModes() {
-		return parameterModes;
+    /** Set the paramter types. Useful if they need to be bound. */
+    public  void    setParameterTypes( TypeDescriptor[] parameterTypes )
+    {
+		this.parameterTypes = TypeDescriptorImpl.copyTypeDescriptors( parameterTypes );
 	}
+
+	public int[] getParameterModes() { return ArrayUtil.copy( parameterModes ); }
         /**
          * Returns an array containing the names of the parameters.
          * As of DERBY 10.3, parameter names are optional (see DERBY-183
          * for more information). If the i-th parameter was unnamed,
          * parameterNames[i] will contain a string of length 0.
          */
-	public String[] getParameterNames() {
-		return parameterNames;
-	}
+	public String[] getParameterNames() { return ArrayUtil.copy( parameterNames );}
 
 	public int getMaxDynamicResultSets() {
 		return dynamicResultSets;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/RowMultiSetImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/RowMultiSetImpl.java
index ec589ced..0ca42685 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/RowMultiSetImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/RowMultiSetImpl.java
@@ -22,6 +22,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derby.catalog.types;
 import org.apache.derby.catalog.TypeDescriptor;
 import org.apache.derby.iapi.services.sanity.SanityManager;
+import org.apache.derby.iapi.services.io.ArrayUtil;
 import org.apache.derby.iapi.services.io.StoredFormatIds;
 import java.io.ObjectOutput;
 import java.io.ObjectInput;
@@ -86,8 +87,8 @@ public RowMultiSetImpl()
      */
     public RowMultiSetImpl( String[] columnNames, TypeDescriptor[] types )
     {
-        _columnNames = columnNames;
-        _types = types;
+        _columnNames = ArrayUtil.copy( columnNames );
+        setTypes( types );
 
         if (
             (columnNames == null ) ||
@@ -107,10 +108,13 @@ public RowMultiSetImpl( String[] columnNames, TypeDescriptor[] types )
     ///////////////////////////////////////////////////////////////////////////////////
 
     /** Get the names of the columns in this row set */
-    public  String[]    getColumnNames()    { return _columnNames; }
+    public  String[]    getColumnNames()    { return ArrayUtil.copy( _columnNames ); }
     
     /** Get the types of the columns in this row set */
-    public  TypeDescriptor[]    getTypes() { return _types; }
+    public  TypeDescriptor[]    getTypes() { return TypeDescriptorImpl.copyTypeDescriptors( _types ); }
+    
+    /** Set the types of the columns in this row set */
+    public  void    setTypes( TypeDescriptor[] types ) { _types = TypeDescriptorImpl.copyTypeDescriptors( types ); }
     
     ///////////////////////////////////////////////////////////////////////////////////
     //
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/TypeDescriptorImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/TypeDescriptorImpl.java
index 70e2d147..b338606a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/TypeDescriptorImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/TypeDescriptorImpl.java
@@ -204,6 +204,12 @@ public TypeDescriptorImpl(
 		this.maximumWidth = maximumWidth;
 	}
 
+    /** copy an array of type descriptors */
+    public  static TypeDescriptor[]    copyTypeDescriptors( TypeDescriptor[] original )
+    {
+        return (original == null) ? null : (TypeDescriptor[]) original.clone();
+    }
+    
 	/**
 	 * @see TypeDescriptor#getMaximumWidth
 	 */
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java
index ba8df773..2d1a595d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java
@@ -29,12 +29,37 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 /**
   Utility class for constructing and reading and writing arrays from/to
-  formatId streams.
+  formatId streams and for performing other operations on arrays.
  
   @version 0.1
  */
 public abstract class ArrayUtil
 {
+	///////////////////////////////////////////////////////////////////
+	//
+	// Methods to copy arrays. We'd like to use java.util.copyOf(), but
+    // we have to run on Java 5.
+	//
+	///////////////////////////////////////////////////////////////////
+
+    /** Copy an array of strings; the original array could be null */
+    public  static  String[]    copy( String[] original )
+    {
+        return (original == null) ? null : (String[]) original.clone();
+    }
+
+    /** Copy a (possibly null) array of booleans */
+    public  static  boolean[]   copy( boolean[] original )
+    {
+        return (original == null) ? null : (boolean[]) original.clone();
+    }
+
+    /** Copy a (possibly null) array of ints */
+    public  static  int[]   copy( int[] original )
+    {
+        return (original == null) ? null : (int[]) original.clone();
+    }
+
 	///////////////////////////////////////////////////////////////////
 	//
 	// Methods for Arrays of OBJECTS.  Cannot be used for an
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java
index 072618ab..69657218 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateAliasNode.java
@@ -531,6 +531,8 @@ private void bindParameterTypes( RoutineAliasInfo aliasInfo ) throws StandardExc
         {
             parameterTypes[ i ] = bindUserCatalogType( parameterTypes[ i ] );
         }
+
+        aliasInfo.setParameterTypes( parameterTypes );
     }
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
index 2cdd6a4a..ec8b3db2 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
@@ -1678,7 +1678,6 @@ public DataTypeDescriptor bindRowMultiSet( DataTypeDescriptor originalDTD ) thro
         if ( !originalDTD.getCatalogType().isRowMultiSet() ) { return originalDTD; }
 
         RowMultiSetImpl originalMultiSet = (RowMultiSetImpl) originalDTD.getTypeId().getBaseTypeId();
-        String[] columnNames = originalMultiSet.getColumnNames();
         TypeDescriptor[] columnTypes = originalMultiSet.getTypes();
         int columnCount = columnTypes.length;
 
@@ -1686,6 +1685,7 @@ public DataTypeDescriptor bindRowMultiSet( DataTypeDescriptor originalDTD ) thro
         {
             columnTypes[ i ] = bindUserCatalogType( columnTypes[ i ] );
         }
+        originalMultiSet.setTypes( columnTypes );
 
         return originalDTD;
     }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
index 5d20961f..f35b4ded 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
@@ -2766,17 +2766,27 @@ private void getAffectedIndexes()
 
 				boolean[] isAscending = compressIRGs[j].isAscending();
 				boolean reMakeArrays = false;
+				boolean rewriteBaseColumnPositions = false;
 				int size = baseColumnPositions.length;
 				for (int k = 0; k < size; k++)
 				{
 					if (baseColumnPositions[k] > droppedColumnPosition)
+                    {
 						baseColumnPositions[k]--;
+                        rewriteBaseColumnPositions = true;
+                    }
 					else if (baseColumnPositions[k] == droppedColumnPosition)
 					{
 						baseColumnPositions[k] = 0;		// mark it
 						reMakeArrays = true;
 					}
 				}
+
+                if ( rewriteBaseColumnPositions )
+                {
+                    compressIRGs[j].setBaseColumnPositions( baseColumnPositions );
+                }
+                
 				if (reMakeArrays)
 				{
 					size--;
