diff --git a/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/OBRResolverAdvancedTest.java b/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/OBRResolverAdvancedTest.java
index 6ec425b8..b28ffc3d 100644
--- a/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/OBRResolverAdvancedTest.java
+++ b/aries/trunk/application/application-itests/src/test/java/org/apache/aries/application/runtime/itests/OBRResolverAdvancedTest.java
@@ -28,9 +28,6 @@
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.FileReader;
-import java.io.FileWriter;
-import java.io.InputStreamReader;
-import java.net.URL;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashSet;
@@ -435,68 +432,6 @@ public void testMutlipleServices() throws Exception{
 
 
 
-  //Test for JIRA-461 which currently fails.
-  @Test
-  public void testTwitter() throws Exception
-  {
-    // provision against the local runtime
-    System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "false");
-    RepositoryAdmin repositoryAdmin = getOsgiService(RepositoryAdmin.class);
-    Repository[] repos = repositoryAdmin.listRepositories();
-    for (Repository repo : repos) {
-      repositoryAdmin.removeRepository(repo.getURI());
-    }
-
-    
-    // Use the superclasses' getUrlToEba() method instead of the pax-exam mavenBundle() method because pax-exam is running in a
-    // diffference bundle which doesn't have visibility to the META-INF/maven/dependencies.properties file used to figure out the
-    // version of the maven artifact.
-    URL twitterEbaUrl = getUrlToEba("org.apache.aries.application.itest.twitter",
-        "org.apache.aries.application.itest.twitter.eba");
-    URL twitterCommonLangJar_url = getUrlToBundle("commons-lang", "commons-lang");
-    URL twitterJar_url = getUrlToBundle("org.apache.aries.application", "twitter4j");
-   
-    // add the repository xml to the repository admin
-    StringBuilder repositoryXML = new StringBuilder();
-    BufferedReader reader = new BufferedReader(new InputStreamReader(this.getClass().getResourceAsStream("/obr/twitter/TwitterRepository.xml")));
-    String line;
-    while ((line = reader.readLine()) != null) {
-      repositoryXML.append(line);
-      repositoryXML.append("\r\n");
-    }
-  //replace the jar file url with the real url related to the environment
-    String repo = repositoryXML.toString().replaceAll("commons.lang.location", twitterCommonLangJar_url.toExternalForm());
-    repo = repo.replaceAll("twitter4j.location", twitterJar_url.toExternalForm());
-    
-    FileWriter writer = new FileWriter("twitterRepo.xml");
-    writer.write(repo);
-    writer.close();
-    repositoryAdmin.addRepository(new File("twitterRepo.xml").toURI().toURL());
-    AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
-    AriesApplication app = manager.createApplication(twitterEbaUrl);
-    app = manager.resolve(app);
-    DeploymentMetadata depMeta = app.getDeploymentMetadata();
-    List<DeploymentContent> provision = depMeta.getApplicationProvisionBundles();
-    Collection<DeploymentContent> useBundles = depMeta.getDeployedUseBundle();
-    Collection<DeploymentContent> appContent = depMeta.getApplicationDeploymentContents();
-    // We cannot be sure whether there are two or three provision bundles pulled in by Felix OBR as there is an outstanding defect
-    // https://issues.apache.org/jira/browse/FELIX-2672
-    // The workaround is to check we get the two bundles we are looking for, instead of insisting on just having two bundles.
-    
-    List<String> provisionBundleSymbolicNames = new ArrayList<String>();
-    for (DeploymentContent dep : provision) {
-       provisionBundleSymbolicNames.add(dep.getContentName());
-    }
-    String provision_bundle1 = "org.apache.commons.lang";
-    String provision_bundle2 = "twitter4j";
-    assertTrue("Bundle " + provision_bundle1 + " not found.", provisionBundleSymbolicNames.contains(provision_bundle1));
-    assertTrue("Bundle " + provision_bundle2 + " not found.", provisionBundleSymbolicNames.contains(provision_bundle2));
-    assertEquals(useBundles.toString(), 0, useBundles.size());
-    assertEquals(appContent.toString(), 1, appContent.size());
-    AriesApplicationContext ctx = manager.install(app);
-    ctx.start();
-  }
-  
   private void generateOBRRepoXML(boolean nullURI, String ... bundleFiles) throws Exception
   {
     Set<ModelledResource> mrs = new HashSet<ModelledResource>();
diff --git a/aries/trunk/samples/twitter/twitter-bundle/src/main/java/org/apache/aries/sample/twitter/TwitterQuery.java b/aries/trunk/samples/twitter/twitter-bundle/src/main/java/org/apache/aries/sample/twitter/TwitterQuery.java
index 985e48f2..d833a23d 100644
--- a/aries/trunk/samples/twitter/twitter-bundle/src/main/java/org/apache/aries/sample/twitter/TwitterQuery.java
+++ b/aries/trunk/samples/twitter/twitter-bundle/src/main/java/org/apache/aries/sample/twitter/TwitterQuery.java
@@ -2,3 +2,63 @@
   + Date Revision
   + native
   + target
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.sample.twitter;
+import java.util.List;
+
+import org.osgi.framework.BundleActivator;
+import org.osgi.framework.BundleContext;
+
+import twitter4j.Query;
+import twitter4j.QueryResult;
+import twitter4j.Tweet;
+import twitter4j.Twitter;
+import org.apache.commons.lang.StringEscapeUtils;
+
+public class TwitterQuery implements BundleActivator {
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext)
+	 */
+	public void start(BundleContext context) throws Exception {
+		Twitter twitter = new Twitter();
+		Query query = new Query("from:theasf");
+		
+		try {
+			QueryResult result = twitter.search(query);
+		    List<Tweet> tweets = result.getTweets(); 
+		    System.out.println("hits:" + tweets.size());
+		    for (Tweet tweet : result.getTweets()) {
+		        System.out.println(tweet.getFromUser() + ":" + StringEscapeUtils.unescapeXml(tweet.getText()));
+		    }
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+	}
+
+	/*
+	 * (non-Javadoc)
+	 * @see org.osgi.framework.BundleActivator#stop(org.osgi.framework.BundleContext)
+	 */
+	public void stop(BundleContext context) throws Exception {
+	}
+
+}
diff --git a/aries/trunk/samples/twitter/twitter-itests/src/test/java/org/apache/aries/sample/twitter/itest/AbstractIntegrationTest.java b/aries/trunk/samples/twitter/twitter-itests/src/test/java/org/apache/aries/sample/twitter/itest/AbstractIntegrationTest.java
index 17c97dcc..661fdec1 100644
--- a/aries/trunk/samples/twitter/twitter-itests/src/test/java/org/apache/aries/sample/twitter/itest/AbstractIntegrationTest.java
+++ b/aries/trunk/samples/twitter/twitter-itests/src/test/java/org/apache/aries/sample/twitter/itest/AbstractIntegrationTest.java
@@ -1 +1,224 @@
   + text/plain
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.aries.sample.twitter.itest;
+
+import static org.ops4j.pax.exam.CoreOptions.options;
+import static org.ops4j.pax.exam.CoreOptions.wrappedBundle;
+import static org.ops4j.pax.exam.OptionUtils.combine;
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Properties;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.runner.RunWith;
+import org.ops4j.pax.exam.CoreOptions;
+import org.ops4j.pax.exam.Inject;
+import org.ops4j.pax.exam.Option;
+import org.ops4j.pax.exam.junit.JUnit4TestRunner;
+import org.ops4j.pax.exam.options.MavenArtifactProvisionOption;
+import org.ops4j.pax.url.mvn.Handler;
+import org.ops4j.pax.url.mvn.ServiceConstants;
+import org.osgi.framework.Bundle;
+import org.osgi.framework.BundleContext;
+import org.osgi.framework.Constants;
+import org.osgi.framework.Filter;
+import org.osgi.framework.FrameworkUtil;
+import org.osgi.framework.InvalidSyntaxException;
+import org.osgi.framework.Version;
+import org.osgi.util.tracker.ServiceTracker;
+
+@RunWith(JUnit4TestRunner.class)
+public class AbstractIntegrationTest {
+
+  public static final long DEFAULT_TIMEOUT = 60000;
+
+  @Inject
+  protected BundleContext bundleContext;
+  
+  private List<ServiceTracker> srs;
+
+  @Before
+  public void setUp() {
+      srs = new ArrayList<ServiceTracker>();
+  }
+  
+  @After
+  public void tearDown() throws Exception{
+      for (ServiceTracker st : srs) {
+          if (st != null) {
+              st.close();
+          }  
+      }
+  }
+  
+  protected Bundle getBundle(String symbolicName) {
+    return getBundle(symbolicName, null);
+  }
+	
+  protected Bundle getBundle(String bundleSymbolicName, String version) {
+    Bundle result = null;
+    for (Bundle b : bundleContext.getBundles()) {
+      if (b.getSymbolicName().equals(bundleSymbolicName)) {
+        if (version == null
+            || b.getVersion().equals(Version.parseVersion(version))) {
+          result = b;
+          break;
+        }
+      }
+    }
+    return result;
+  }
+
+  public static MavenArtifactProvisionOption mavenBundle(String groupId,
+          String artifactId) {
+    return CoreOptions.mavenBundle().groupId(groupId).artifactId(artifactId)
+        .versionAsInProject();
+  }
+
+  
+  protected static Option[] updateOptions(Option[] options) {
+    // We need to add pax-exam-junit here when running with the ibm
+    // jdk to avoid the following exception during the test run:
+    // ClassNotFoundException: org.ops4j.pax.exam.junit.Configuration
+    if ("IBM Corporation".equals(System.getProperty("java.vendor"))) {
+      Option[] ibmOptions = options(wrappedBundle(mavenBundle(
+          "org.ops4j.pax.exam", "pax-exam-junit")));
+      options = combine(ibmOptions, options);
+    }
+
+    return options;
+  }
+
+  protected <T> T getOsgiService(Class<T> type, long timeout) {
+    return getOsgiService(type, null, timeout);
+  }
+
+  protected <T> T getOsgiService(Class<T> type) {
+    return getOsgiService(type, null, DEFAULT_TIMEOUT);
+  }
+  
+  protected <T> T getOsgiService(Class<T> type, String filter, long timeout) {
+    return getOsgiService(null, type, filter, timeout);
+  }
+
+  protected <T> T getOsgiService(BundleContext bc, Class<T> type,
+      String filter, long timeout) {
+    ServiceTracker tracker = null;
+    try {
+      String flt;
+      if (filter != null) {
+        if (filter.startsWith("(")) {
+          flt = "(&(" + Constants.OBJECTCLASS + "=" + type.getName() + ")"
+              + filter + ")";
+        } else {
+          flt = "(&(" + Constants.OBJECTCLASS + "=" + type.getName() + ")("
+              + filter + "))";
+        }
+      } else {
+        flt = "(" + Constants.OBJECTCLASS + "=" + type.getName() + ")";
+      }
+      Filter osgiFilter = FrameworkUtil.createFilter(flt);
+      tracker = new ServiceTracker(bc == null ? bundleContext : bc, osgiFilter,
+          null);
+      tracker.open();
+     
+      // add tracker to the list of trackers we close at tear down
+      srs.add(tracker);
+
+      Object x = tracker.waitForService(timeout);
+      Object svc = type.cast(x);
+      if (svc == null) {
+        throw new RuntimeException("Gave up waiting for service " + flt);
+      }
+      return type.cast(svc);
+    } catch (InvalidSyntaxException e) {
+      throw new IllegalArgumentException("Invalid filter", e);
+    } catch (InterruptedException e) {
+      throw new RuntimeException(e);
+    }
+  }
+ 
+  public static URL getUrlToEba(String groupId, String artifactId) throws MalformedURLException {
+    String artifactVersion = getArtifactVersion(groupId, artifactId);
+
+    // Need to use handler from org.ops4j.pax.url.mvn
+    URL urlToEba = new URL(null,
+        ServiceConstants.PROTOCOL + ":" + groupId + "/" +artifactId + "/"
+            + artifactVersion + "/eba", new Handler());
+    return urlToEba;
+  }
+  
+  public static URL getUrlToBundle(String groupId, String artifactId) throws MalformedURLException {
+	    String artifactVersion = getArtifactVersion(groupId, artifactId);
+
+	    // Need to use handler from org.ops4j.pax.url.mvn
+	    URL urlToEba = new URL(null,
+	        ServiceConstants.PROTOCOL + ":" + groupId + "/" +artifactId + "/"
+	            + artifactVersion, new Handler());
+	    return urlToEba;
+	  }
+
+  public static String getArtifactVersion(final String groupId, final String artifactId)
+  {
+    final Properties dependencies = new Properties();
+    try {
+      InputStream in = getFileFromClasspath("META-INF/maven/dependencies.properties");
+      try {
+        dependencies.load(in);
+      } finally {
+        in.close();
+      }
+      final String version = dependencies.getProperty(groupId + "/" + artifactId + "/version");
+      if (version == null) {
+        throw new RuntimeException("Could not resolve version. Do you have a dependency for "
+            + groupId + "/" + artifactId + " in your maven project?");
+      }
+      return version;
+    } catch (IOException e) {
+      // TODO throw a better exception
+      throw new RuntimeException(
+          "Could not resolve version. Did you configure the depends-maven-plugin in your maven project? "
+              + " Or maybe you did not run the maven build and you are using an IDE?");
+    }
+  }  
+
+  private static InputStream getFileFromClasspath( final String filePath )
+    throws FileNotFoundException
+  {
+    try
+    {
+        URL fileURL = AbstractIntegrationTest.class.getClassLoader().getResource( filePath );
+        if( fileURL == null )
+        {
+            throw new FileNotFoundException( "File [" + filePath + "] could not be found in classpath" );
+        }
+        return fileURL.openStream();
+    }
+    catch (IOException e)
+    {
+        throw new FileNotFoundException( "File [" + filePath + "] could not be found: " + e.getMessage() );
+    }
+  }
+}
diff --git a/aries/trunk/samples/twitter/twitter-itests/src/test/java/org/apache/aries/sample/twitter/itest/TwitterTest.java b/aries/trunk/samples/twitter/twitter-itests/src/test/java/org/apache/aries/sample/twitter/itest/TwitterTest.java
index 17c97dcc..8ef160af 100644
--- a/aries/trunk/samples/twitter/twitter-itests/src/test/java/org/apache/aries/sample/twitter/itest/TwitterTest.java
+++ b/aries/trunk/samples/twitter/twitter-itests/src/test/java/org/apache/aries/sample/twitter/itest/TwitterTest.java
@@ -1 +1,169 @@
   + text/plain
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.sample.twitter.itest;
+import static junit.framework.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.ops4j.pax.exam.CoreOptions.equinox;
+import static org.ops4j.pax.exam.CoreOptions.options;
+import static org.ops4j.pax.exam.CoreOptions.systemProperty;
+import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileWriter;
+import java.io.InputStreamReader;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+import org.apache.aries.application.DeploymentContent;
+import org.apache.aries.application.DeploymentMetadata;
+import org.apache.aries.application.management.AriesApplication;
+import org.apache.aries.application.management.AriesApplicationContext;
+import org.apache.aries.application.management.AriesApplicationManager;
+import org.apache.aries.application.utils.AppConstants;
+import org.apache.felix.bundlerepository.Repository;
+import org.apache.felix.bundlerepository.RepositoryAdmin;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.ops4j.pax.exam.Option;
+import org.ops4j.pax.exam.junit.JUnit4TestRunner;
+@RunWith(JUnit4TestRunner.class)
+public class TwitterTest extends AbstractIntegrationTest 
+{
+  public static final String CORE_BUNDLE_BY_VALUE = "core.bundle.by.value";
+  public static final String CORE_BUNDLE_BY_REFERENCE = "core.bundle.by.reference";
+  public static final String TRANSITIVE_BUNDLE_BY_VALUE = "transitive.bundle.by.value";
+  public static final String TRANSITIVE_BUNDLE_BY_REFERENCE = "transitive.bundle.by.reference";
+  public static final String USE_BUNDLE_BY_REFERENCE = "use.bundle.by.reference";
+  public static final String REPO_BUNDLE = "aries.bundle1";
+  public static final String HELLO_WORLD_CLIENT_BUNDLE="hello.world.client.bundle";
+  public static final String HELLO_WORLD_SERVICE_BUNDLE1="hello.world.service.bundle1";
+  public static final String HELLO_WORLD_SERVICE_BUNDLE2="hello.world.service.bundle2";
+  
+  //Test for JIRA-461 which currently fails.
+  @Test
+  public void testTwitter() throws Exception
+  {
+    // provision against the local runtime
+    System.setProperty(AppConstants.PROVISON_EXCLUDE_LOCAL_REPO_SYSPROP, "false");
+    RepositoryAdmin repositoryAdmin = getOsgiService(RepositoryAdmin.class);
+    Repository[] repos = repositoryAdmin.listRepositories();
+    for (Repository repo : repos) {
+      repositoryAdmin.removeRepository(repo.getURI());
+    }
+
+    
+    // Use the superclasses' getUrlToEba() method instead of the pax-exam mavenBundle() method because pax-exam is running in a
+    // diffference bundle which doesn't have visibility to the META-INF/maven/dependencies.properties file used to figure out the
+    // version of the maven artifact.
+    URL twitterEbaUrl = getUrlToEba("org.apache.aries.samples.twitter",
+        "org.apache.aries.samples.twitter.eba");
+    URL twitterCommonLangJar_url = getUrlToBundle("commons-lang", "commons-lang");
+    URL twitterJar_url = getUrlToBundle("org.apache.aries.samples.twitter", "org.apache.aries.samples.twitter.twitter4j");
+   
+    // add the repository xml to the repository admin
+    StringBuilder repositoryXML = new StringBuilder();
+    BufferedReader reader = new BufferedReader(new InputStreamReader(this.getClass().getResourceAsStream("/obr/twitter/TwitterRepository.xml")));
+    String line;
+    while ((line = reader.readLine()) != null) {
+      repositoryXML.append(line);
+      repositoryXML.append("\r\n");
+    }
+  //replace the jar file url with the real url related to the environment
+    String repo = repositoryXML.toString().replaceAll("commons.lang.location", twitterCommonLangJar_url.toExternalForm());
+    repo = repo.replaceAll("twitter4j.location", twitterJar_url.toExternalForm());
+    
+    FileWriter writer = new FileWriter("twitterRepo.xml");
+    writer.write(repo);
+    writer.close();
+    repositoryAdmin.addRepository(new File("twitterRepo.xml").toURI().toURL());
+    AriesApplicationManager manager = getOsgiService(AriesApplicationManager.class);
+    AriesApplication app = manager.createApplication(twitterEbaUrl);
+    app = manager.resolve(app);
+    DeploymentMetadata depMeta = app.getDeploymentMetadata();
+    List<DeploymentContent> provision = depMeta.getApplicationProvisionBundles();
+    Collection<DeploymentContent> useBundles = depMeta.getDeployedUseBundle();
+    Collection<DeploymentContent> appContent = depMeta.getApplicationDeploymentContents();
+    // We cannot be sure whether there are two or three provision bundles pulled in by Felix OBR as there is an outstanding defect
+    // https://issues.apache.org/jira/browse/FELIX-2672
+    // The workaround is to check we get the two bundles we are looking for, instead of insisting on just having two bundles.
+    
+    List<String> provisionBundleSymbolicNames = new ArrayList<String>();
+    for (DeploymentContent dep : provision) {
+       provisionBundleSymbolicNames.add(dep.getContentName());
+    }
+    String provision_bundle1 = "org.apache.commons.lang";
+    String provision_bundle2 = "twitter4j";
+    assertTrue("Bundle " + provision_bundle1 + " not found.", provisionBundleSymbolicNames.contains(provision_bundle1));
+    assertTrue("Bundle " + provision_bundle2 + " not found.", provisionBundleSymbolicNames.contains(provision_bundle2));
+    assertEquals(useBundles.toString(), 0, useBundles.size());
+    assertEquals(appContent.toString(), 1, appContent.size());
+    AriesApplicationContext ctx = manager.install(app);
+    ctx.start();
+  }
+  
+  @org.ops4j.pax.exam.junit.Configuration
+  public static Option[] configuration() {
+    Option[] options = options(
+        // Log
+        mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
+        mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
+        // Felix Config Admin
+        mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
+        // Felix mvn url handler
+        mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
+
+        // this is how you set the default log level when using pax
+        // logging (logProfile)
+        systemProperty("org.ops4j.pax.logging.DefaultServiceLog.level").value("DEBUG"),
+
+        // Bundles
+        mavenBundle("org.apache.aries.application", "org.apache.aries.application.api"),
+        mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils"),
+        mavenBundle("org.apache.aries.application", "org.apache.aries.application.management"),
+        mavenBundle("org.apache.aries.application", "org.apache.aries.application.default.local.platform"),
+        mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime"),
+        mavenBundle("org.apache.aries.application", "org.apache.aries.application.resolver.obr"),
+        mavenBundle("org.apache.aries.application", "org.apache.aries.application.deployment.management"),
+        mavenBundle("org.apache.aries.application", "org.apache.aries.application.modeller"),
+        mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository"),
+        mavenBundle("org.apache.aries.application", "org.apache.aries.application.runtime.itest.interfaces"),
+        mavenBundle("org.apache.aries", "org.apache.aries.util"),
+        mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"),
+        mavenBundle("asm", "asm-all"),
+        mavenBundle("org.apache.aries.proxy", "org.apache.aries.proxy"),
+        mavenBundle("org.osgi", "org.osgi.compendium"),
+        mavenBundle("org.apache.aries.testsupport", "org.apache.aries.testsupport.unit"),
+        /* For debugging, uncomment the next two lines  */
+        /*vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5010"),
+        waitForFrameworkStartup(),  */
+//        vmOption ("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5010"),
+        /* For debugging, add these imports:
+        import static org.ops4j.pax.exam.CoreOptions.waitForFrameworkStartup;
+        import static org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption;
+        */
+
+        equinox().version("3.5.0"));
+    options = updateOptions(options);
+    return options;
+  }
+}
