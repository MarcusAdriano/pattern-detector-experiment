diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index dee39de0..5da2697a 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -1091,10 +1091,11 @@ private ColumnFamily getTopLevelColumns(QueryFilter filter, int gcBefore)
 
             byte[] dataKey = null;
             int n = 0;
-            Iterator<byte[]> iter = indexRow.getColumnNames().iterator();
-            while (iter.hasNext())
+            for (IColumn column : indexRow.getSortedColumns())
             {
-                dataKey = iter.next();
+                if (column.isMarkedForDelete())
+                    continue;
+                dataKey = column.name();
                 n++;
                 DecoratedKey dk = partitioner_.decorateKey(dataKey);
                 if (!range.right.equals(partitioner_.getMinimumToken()) && range.right.compareTo(dk.token) < 0)
@@ -1436,7 +1437,7 @@ public ColumnFamily newIndexedColumnFamily(byte[] column)
         return ColumnFamily.create(indexedColumns_.get(column).metadata);
     }
 
-    public DecoratedKey getIndexKeyFor(byte[] name, byte[] value)
+    public DecoratedKey<LocalToken> getIndexKeyFor(byte[] name, byte[] value)
     {
         return indexedColumns_.get(name).partitioner_.decorateKey(value);
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java b/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
index 2033a809..1e8ec7f7 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
@@ -32,6 +32,7 @@
 
 import org.apache.cassandra.config.*;
 import org.apache.cassandra.db.commitlog.CommitLog;
+import org.apache.cassandra.dht.LocalToken;
 import org.apache.cassandra.io.sstable.SSTableDeletingReference;
 import org.apache.cassandra.io.sstable.SSTableReader;
 import org.apache.cassandra.io.util.FileUtils;
@@ -389,7 +390,7 @@ public void apply(RowMutation mutation, Object serializedMutation, boolean write
                         for (byte[] columnName : mutatedIndexedColumns)
                         {
                             IColumn column = columnFamily.getColumn(columnName);
-                            DecoratedKey valueKey = cfs.getIndexKeyFor(columnName, column.value());
+                            DecoratedKey<LocalToken> valueKey = cfs.getIndexKeyFor(columnName, column.value());
                             ColumnFamily cf = cfs.newIndexedColumnFamily(columnName);
                             cf.addColumn(new Column(mutation.key(), ArrayUtils.EMPTY_BYTE_ARRAY, column.clock()));
                             applyCF(cfs.getIndexedColumnFamilyStore(columnName), valueKey, cf, memtablesToFlush);
@@ -403,10 +404,10 @@ public void apply(RowMutation mutation, Object serializedMutation, boolean write
                             {
                                 byte[] columnName = entry.getKey();
                                 IColumn column = entry.getValue();
-                                DecoratedKey valueKey = cfs.getIndexKeyFor(columnName, column.value());
+                                DecoratedKey<LocalToken> valueKey = cfs.getIndexKeyFor(columnName, column.value());
                                 ColumnFamily cf = cfs.newIndexedColumnFamily(columnName);
                                 cf.deleteColumn(mutation.key(), localDeletionTime, column.clock());
-                                applyCF(cfs, valueKey, cf, memtablesToFlush);
+                                applyCF(cfs.getIndexedColumnFamilyStore(columnName), valueKey, cf, memtablesToFlush);
                             }
                         }
                     }
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
index 28dd1179..fa8533ad 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/db/ColumnFamilyStoreTest.java
@@ -189,6 +189,33 @@ public void testIndexScan() throws IOException
         assert Arrays.equals(FBUtilities.toByteArray(1L), rows.get(1).cf.getColumn("birthdate".getBytes("UTF8")).value());
     }
 
+    @Test
+    public void testIndexUpdate() throws IOException
+    {
+        RowMutation rm;
+
+        rm = new RowMutation("Keyspace2", "k1".getBytes());
+        rm.add(new QueryPath("Indexed1", null, "birthdate".getBytes("UTF8")), FBUtilities.toByteArray(1L), new TimestampClock(1));
+        rm.apply();
+
+        rm = new RowMutation("Keyspace2", "k1".getBytes());
+        rm.add(new QueryPath("Indexed1", null, "birthdate".getBytes("UTF8")), FBUtilities.toByteArray(2L), new TimestampClock(2));
+        rm.apply();
+
+        IndexExpression expr = new IndexExpression("birthdate".getBytes("UTF8"), IndexOperator.EQ, FBUtilities.toByteArray(1L));
+        IndexClause clause = new IndexClause(Arrays.asList(expr), ArrayUtils.EMPTY_BYTE_ARRAY, 100);
+        IFilter filter = new IdentityQueryFilter();
+        IPartitioner p = StorageService.getPartitioner();
+        Range range = new Range(p.getMinimumToken(), p.getMinimumToken());
+        List<Row> rows = Table.open("Keyspace2").getColumnFamilyStore("Indexed1").scan(clause, range, filter);
+        assert rows.size() == 0;
+
+        expr = new IndexExpression("birthdate".getBytes("UTF8"), IndexOperator.EQ, FBUtilities.toByteArray(2L));
+        clause = new IndexClause(Arrays.asList(expr), ArrayUtils.EMPTY_BYTE_ARRAY, 100);
+        rows = Table.open("Keyspace2").getColumnFamilyStore("Indexed1").scan(clause, range, filter);
+        assert Arrays.equals("k1".getBytes(), rows.get(0).key.key);
+    }
+
     private ColumnFamilyStore insertKey1Key2() throws IOException, ExecutionException, InterruptedException
     {
         List<RowMutation> rms = new LinkedList<RowMutation>();
