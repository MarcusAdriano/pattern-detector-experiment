diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableNamesIterator.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableNamesIterator.java
index 64185928..6d3a7556 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableNamesIterator.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableNamesIterator.java
@@ -49,7 +49,13 @@ public SSTableNamesIterator(String filename, String key, String cfName, SortedSe
             SortedSet<IndexHelper.IndexInfo> ranges = new TreeSet<IndexHelper.IndexInfo>(IndexHelper.getComparator(comparator));
             for (byte[] name : columns)
             {
-                ranges.add(indexList.get(IndexHelper.indexFor(name, indexList, comparator, false)));
+                int index = IndexHelper.indexFor(name, indexList, comparator, false);
+                if (index == indexList.size())
+                    continue;
+                IndexHelper.IndexInfo indexInfo = indexList.get(index);
+                if (comparator.compare(name, indexInfo.firstName) < 0)
+                   continue;
+                ranges.add(indexInfo);
             }
 
             /* seek to the correct offset to the data */
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java
index 919ea227..378f50b9 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java
@@ -101,6 +101,8 @@ public ColumnGroupReader(String filename, String key, long position) throws IOEx
 
             columnStartPosition = file.getFilePointer();
             curRangeIndex = IndexHelper.indexFor(startColumn, indexes, comparator, isAscending);
+            if (!isAscending && curRangeIndex == indexes.size())
+                curRangeIndex--;
         }
 
         public ColumnFamily getEmptyColumnFamily()
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/IndexHelper.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/IndexHelper.java
index 82022c12..34767d7a 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/IndexHelper.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/io/IndexHelper.java
@@ -120,6 +120,10 @@ public static BloomFilter defreezeBloomFilter(RandomAccessFile file) throws IOEx
         return BloomFilter.serializer().deserialize(bufIn);
     }
 
+    /**
+     * the index of the IndexInfo in which @name will be found.
+     * If the index is @indexList.size(), the @name appears nowhere.
+     */
     public static int indexFor(byte[] name, List<IndexInfo> indexList, AbstractType comparator, boolean ascending)
     {
         if (name.length == 0 && !ascending)
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java
index 785edef5..5e0a7acd 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java
@@ -84,6 +84,9 @@ public void run() throws Exception
 
                 cf = cfStore.getColumnFamily(new SliceQueryFilter(TEST_KEY, new QueryPath("Standard3"), ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, true, 0));
                 assertColumns(cf);
+
+                cf = cfStore.getColumnFamily(new NamesQueryFilter(TEST_KEY, new QueryPath("Standard3"), "col99".getBytes()));
+                assertColumns(cf);
             }
         };
         reTest(table.getColumnFamilyStore("Standard3"), verify);
@@ -352,6 +355,12 @@ private void validateSliceLarge(ColumnFamilyStore cfStore) throws IOException
         assertEquals(new String(cf.getColumn("col1999".getBytes()).value()), "v1999");
         assertEquals(new String(cf.getColumn("col1998".getBytes()).value()), "v1998");
         assertEquals(new String(cf.getColumn("col1997".getBytes()).value()), "v1997");
+
+        cf = cfStore.getColumnFamily(key, new QueryPath("Standard1"), "col9000".getBytes(), ArrayUtils.EMPTY_BYTE_ARRAY, false, 3);
+        assertColumns(cf, "col1997", "col1998", "col1999");
+
+        cf = cfStore.getColumnFamily(key, new QueryPath("Standard1"), "col9000".getBytes(), ArrayUtils.EMPTY_BYTE_ARRAY, true, 3);
+        assertColumns(cf);
     }
 
     @Test
