diff --git a/aries/trunk/sandbox/jmx-next/jmx-core/src/main/java/org/apache/aries/jmx/codec/PropertyData.java b/aries/trunk/sandbox/jmx-next/jmx-core/src/main/java/org/apache/aries/jmx/codec/PropertyData.java
index d9b6ebc6..3079e799 100644
--- a/aries/trunk/sandbox/jmx-next/jmx-core/src/main/java/org/apache/aries/jmx/codec/PropertyData.java
+++ b/aries/trunk/sandbox/jmx-next/jmx-core/src/main/java/org/apache/aries/jmx/codec/PropertyData.java
@@ -35,6 +35,7 @@
 
 import java.lang.reflect.Array;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 import java.util.StringTokenizer;
 import java.util.Vector;
@@ -106,16 +107,16 @@ private PropertyData(String key, T value, String preservedBaseType) throws Illeg
             }
             this.encodedValue = builder.toString();
         } else if (type.equals(Vector.class)) {
-            Vector vector = (Vector) value;
+            Vector<?> vector = (Vector<?>) value;
             Class<? extends Object> componentType = Object.class;
             if (vector.size() > 0) {
                 componentType = vector.firstElement().getClass();
             }
             this.encodedType = VECTOR_OF + componentType.getSimpleName();
             StringBuilder builder = new StringBuilder();
-            Vector valueVector = (Vector) value;
+            Vector<?> valueVector = (Vector<?>) value;
             boolean useDelimiter = false;
-            for (Object val: valueVector) {
+            for (Object val : valueVector) {
                 if (useDelimiter) {
                     builder.append(",");
                 } else {
@@ -124,6 +125,25 @@ private PropertyData(String key, T value, String preservedBaseType) throws Illeg
                 builder.append(val);
             }
             this.encodedValue = builder.toString();
+        } else if (List.class.isAssignableFrom(type)) {
+            // Lists are encoded as Arrays...
+            List<?> list = (List<?>) value;
+            Class<?> componentType = Object.class;
+            if (list.size() > 0)
+                componentType = list.get(0).getClass();
+
+            this.encodedType = ARRAY_OF + componentType.getSimpleName();
+            StringBuilder builder = new StringBuilder();
+            boolean useDelimiter = false;
+            for (Object o : list) {
+                if (useDelimiter) {
+                    builder.append(",");
+                } else {
+                    useDelimiter = true;
+                }
+                builder.append(o);
+            }
+            this.encodedValue = builder.toString();
         } else {
             this.encodedType = (preservedBaseType == null) ? type.getSimpleName() : preservedBaseType;
             this.encodedValue = value.toString();
diff --git a/aries/trunk/sandbox/jmx-next/jmx-core/src/main/java/org/apache/aries/jmx/framework/wiring/BundleWiringState.java b/aries/trunk/sandbox/jmx-next/jmx-core/src/main/java/org/apache/aries/jmx/framework/wiring/BundleWiringState.java
index 8723802d..2f63317f 100644
--- a/aries/trunk/sandbox/jmx-next/jmx-core/src/main/java/org/apache/aries/jmx/framework/wiring/BundleWiringState.java
+++ b/aries/trunk/sandbox/jmx-next/jmx-core/src/main/java/org/apache/aries/jmx/framework/wiring/BundleWiringState.java
@@ -116,13 +116,21 @@ private void populateTransitiveRevisions(String namespace, BundleRevision rootRe
         if (wiring == null)
             return;
 
-        List<BundleWire> wires = wiring.getRequiredWires(namespace);
-        for (BundleWire wire : wires) {
+        List<BundleWire> requiredWires = wiring.getRequiredWires(namespace);
+        for (BundleWire wire : requiredWires) {
             BundleRevision revision = wire.getCapability().getRevision();
             if (!allRevisions.containsKey(revision)) {
                 populateTransitiveRevisions(namespace, revision, allRevisions);
             }
         }
+
+        List<BundleWire> providedWires = wiring.getProvidedWires(namespace);
+        for (BundleWire wire : providedWires) {
+            BundleRevision revision = wire.getRequirement().getRevision();
+            if (!allRevisions.containsKey(revision)) {
+                populateTransitiveRevisions(namespace, revision, allRevisions);
+            }
+        }
     }
 
     private CompositeData getRevisionWiring(BundleRevision revision, int revisionID, String namespace, Map<BundleRevision, Integer> revisionIDMap) {
diff --git a/aries/trunk/sandbox/jmx-next/jmx-core/src/test/java/org/apache/aries/jmx/codec/PropertyDataTest.java b/aries/trunk/sandbox/jmx-next/jmx-core/src/test/java/org/apache/aries/jmx/codec/PropertyDataTest.java
index ba93cc05..4b447806 100644
--- a/aries/trunk/sandbox/jmx-next/jmx-core/src/test/java/org/apache/aries/jmx/codec/PropertyDataTest.java
+++ b/aries/trunk/sandbox/jmx-next/jmx-core/src/test/java/org/apache/aries/jmx/codec/PropertyDataTest.java
@@ -36,7 +36,9 @@
 import static org.osgi.jmx.JmxConstants.VALUE;
 
 import java.math.BigInteger;
+import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 import java.util.Vector;
 
@@ -320,5 +322,40 @@ public void testToFromCompositeDataForVector() {
         
     }
     
+    @Test
+    public void testToFromCompositeDataForList() {
+        List<String> sl = new ArrayList<String>();
+        sl.add("A");
+        sl.add("B");
+
+        PropertyData<List<String>> pd = PropertyData.newInstance("test", sl);
+        CompositeData cd = pd.toCompositeData();
+
+        assertEquals("test", cd.get(KEY));
+        assertEquals("A,B", cd.get(VALUE));
+        assertEquals("Array of String", cd.get(TYPE));
+
+        PropertyData<String []> pd2 = PropertyData.from(cd);
+        assertEquals("test", pd2.getKey());
+        assertEquals("Array of String", pd2.getEncodedType());
+        assertArrayEquals(new String [] {"A", "B"}, pd2.getValue());
+    }
 
+    @Test
+    public void testToFromCompositeDataForList2() {
+        List<Long> sl = new ArrayList<Long>();
+        sl.add(Long.MAX_VALUE);
+
+        PropertyData<List<Long>> pd = PropertyData.newInstance("test", sl);
+        CompositeData cd = pd.toCompositeData();
+
+        assertEquals("test", cd.get(KEY));
+        assertEquals(new Long(Long.MAX_VALUE).toString(), cd.get(VALUE));
+        assertEquals("Array of Long", cd.get(TYPE));
+
+        PropertyData<Long []> pd2 = PropertyData.from(cd);
+        assertEquals("test", pd2.getKey());
+        assertEquals("Array of Long", pd2.getEncodedType());
+        assertArrayEquals(new Long [] {Long.MAX_VALUE}, pd2.getValue());
+    }
 }
