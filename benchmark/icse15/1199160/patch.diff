diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/Node.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/Node.java
index e69de29b..495982c5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/Node.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/Node.java
@@ -0,0 +1,155 @@
+/*
+
+   Derby - Class org.apache.derby.iapi.sql.compile.Node
+
+   Licensed to the Apache Software Foundation (ASF) under one or more
+   contributor license agreements.  See the NOTICE file distributed with
+   this work for additional information regarding copyright ownership.
+   The ASF licenses this file to you under the Apache License, Version 2.0
+   (the "License"); you may not use this file except in compliance with
+   the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+ */
+
+package org.apache.derby.iapi.sql.compile;
+
+import org.apache.derby.iapi.error.StandardException;
+
+/**
+ * Interface implemented by the nodes created by a {@code NodeFactory}. Callers
+ * of the various {@code NodeFactory.getNode()} methods will typically cast the
+ * returned node to a more specific sub-type, as this interface only contains
+ * the methods needed by {@code NodeFactory} to initialize the node.
+ */
+public interface Node {
+
+    /**
+     * Initialize a query tree node.
+     *
+     * @exception StandardException		Thrown on error
+     */
+    void init(Object arg1) throws StandardException;
+
+    /**
+     * Initialize a query tree node.
+     *
+     * @exception StandardException		Thrown on error
+     */
+    void init(Object arg1, Object arg2) throws StandardException;
+
+    /**
+     * Initialize a query tree node.
+     *
+     * @exception StandardException		Thrown on error
+     */
+    void init(Object arg1, Object arg2, Object arg3) throws StandardException;
+
+    /**
+     * Initialize a query tree node.
+     *
+     * @exception StandardException		Thrown on error
+     */
+    void init(Object arg1, Object arg2, Object arg3, Object arg4)
+            throws StandardException;
+
+    /**
+     * Initialize a query tree node.
+     *
+     * @exception StandardException		Thrown on error
+     */
+    void init(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5)
+            throws StandardException;
+
+    /**
+     * Initialize a query tree node.
+     *
+     * @exception StandardException		Thrown on error
+     */
+    void init(Object arg1, Object arg2, Object arg3,
+              Object arg4, Object arg5, Object arg6)
+            throws StandardException;
+
+    /**
+     * Initialize a query tree node.
+     *
+     * @exception StandardException		Thrown on error
+     */
+    void init(Object arg1, Object arg2, Object arg3, Object arg4,
+              Object arg5, Object arg6, Object arg7)
+            throws StandardException;
+
+    /**
+     * Initialize a query tree node.
+     *
+     * @exception StandardException		Thrown on error
+     */
+    void init(Object arg1, Object arg2, Object arg3, Object arg4,
+              Object arg5, Object arg6, Object arg7, Object arg8)
+            throws StandardException;
+
+    /**
+     * Initialize a query tree node.
+     *
+     * @exception StandardException		Thrown on error
+     */
+    void init(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5,
+              Object arg6, Object arg7, Object arg8, Object arg9)
+            throws StandardException;
+
+    /**
+     * Initialize a query tree node.
+     *
+     * @exception StandardException		Thrown on error
+     */
+    void init(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5,
+              Object arg6, Object arg7, Object arg8, Object arg9, Object arg10)
+            throws StandardException;
+
+    /**
+     * Initialize a query tree node.
+     *
+     * @exception StandardException		Thrown on error
+     */
+    void init(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5,
+              Object arg6, Object arg7, Object arg8, Object arg9, Object arg10,
+              Object arg11)
+            throws StandardException;
+
+    /**
+     * Initialize a query tree node.
+     *
+     * @exception StandardException		Thrown on error
+     */
+    void init(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5,
+              Object arg6, Object arg7, Object arg8, Object arg9, Object arg10,
+              Object arg11, Object arg12)
+            throws StandardException;
+
+    /**
+     * Initialize a query tree node.
+     *
+     * @exception StandardException		Thrown on error
+     */
+    void init(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5,
+              Object arg6, Object arg7, Object arg8, Object arg9, Object arg10,
+              Object arg11, Object arg12, Object arg13)
+            throws StandardException;
+
+    /**
+     * Initialize a query tree node.
+     *
+     * @exception StandardException		Thrown on error
+     */
+    void init(Object arg1, Object arg2, Object arg3, Object arg4, Object arg5,
+              Object arg6, Object arg7, Object arg8, Object arg9, Object arg10,
+              Object arg11, Object arg12, Object arg13, Object arg14)
+            throws StandardException;
+}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java
index 5463769d..582bbcf3 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java
@@ -26,12 +26,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.error.StandardException;
 
-/* Strictly speaking we shouldn't import classes under the impl hierarchy here
- * but this is work in progress.
- * manish - Wed Mar 28 13:05:19 PST 2001
- */
-import	org.apache.derby.impl.sql.compile.QueryTreeNode;
-
 /**
 	This is an interface for NodeFactories.
 	<p>
@@ -64,7 +58,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 *
 	 * @exception StandardException		Thrown on error.
 	 */
-	public abstract QueryTreeNode getNode(int nodeType,
+	public abstract Node getNode(int nodeType,
 							ContextManager cm) throws StandardException;
 
 	/**
@@ -78,10 +72,10 @@ public abstract QueryTreeNode getNode(int nodeType,
 	 *
 	 * @exception StandardException		Thrown on error.
 	 */
-	public final QueryTreeNode getNode(int nodeType, Object arg1, ContextManager cm)
+	public final Node getNode(int nodeType, Object arg1, ContextManager cm)
 													throws StandardException
 	{
-		QueryTreeNode retval = getNode(nodeType, cm);
+		Node retval = getNode(nodeType, cm);
 
 		retval.init(arg1);
 
@@ -100,13 +94,13 @@ public final QueryTreeNode getNode(int nodeType, Object arg1, ContextManager cm)
 	 *
 	 * @exception StandardException		Thrown on error.
 	 */
-	public final QueryTreeNode getNode(int nodeType,
+	public final Node getNode(int nodeType,
 							Object arg1,
 							Object arg2,
 							ContextManager cm)
 								throws StandardException
 	{
-		QueryTreeNode retval =  getNode(nodeType, cm);
+		Node retval =  getNode(nodeType, cm);
 
 		retval.init(arg1, arg2);
 
@@ -126,14 +120,14 @@ public final QueryTreeNode getNode(int nodeType,
 	 *
 	 * @exception StandardException		Thrown on error.
 	 */
-	public final QueryTreeNode getNode(int nodeType,
+	public final Node getNode(int nodeType,
 							Object arg1,
 							Object arg2,
 							Object arg3,
 							ContextManager cm)
 								throws StandardException
 	{
-		QueryTreeNode retval =  getNode(nodeType, cm);
+		Node retval =  getNode(nodeType, cm);
 
 		retval.init(arg1, arg2, arg3);
 
@@ -154,7 +148,7 @@ public final QueryTreeNode getNode(int nodeType,
 	 *
 	 * @exception StandardException		Thrown on error.
 	 */
-	public QueryTreeNode getNode(int nodeType,
+	public Node getNode(int nodeType,
 							Object arg1,
 							Object arg2,
 							Object arg3,
@@ -162,7 +156,7 @@ public QueryTreeNode getNode(int nodeType,
 							ContextManager cm)
 								throws StandardException
 	{
-		QueryTreeNode retval =  getNode(nodeType, cm);
+		Node retval =  getNode(nodeType, cm);
 
 		retval.init(arg1, arg2, arg3, arg4);
 
@@ -185,7 +179,7 @@ public QueryTreeNode getNode(int nodeType,
 	 *
 	 * @exception StandardException		Thrown on error.
 	 */
-	public QueryTreeNode getNode(int nodeType,
+	public Node getNode(int nodeType,
 							Object arg1,
 							Object arg2,
 							Object arg3,
@@ -194,7 +188,7 @@ public QueryTreeNode getNode(int nodeType,
 							ContextManager cm)
 								throws StandardException
 	{
-		QueryTreeNode retval =  getNode(nodeType, cm);
+		Node retval =  getNode(nodeType, cm);
 
 		retval.init(arg1, arg2, arg3, arg4, arg5);
 
@@ -217,7 +211,7 @@ public QueryTreeNode getNode(int nodeType,
 	 *
 	 * @exception StandardException		Thrown on error.
 	 */
-	public final QueryTreeNode getNode(int nodeType,
+	public final Node getNode(int nodeType,
 							Object arg1,
 							Object arg2,
 							Object arg3,
@@ -227,7 +221,7 @@ public final QueryTreeNode getNode(int nodeType,
 							ContextManager cm)
 								throws StandardException
 	{
-		QueryTreeNode retval =  getNode(nodeType, cm);
+		Node retval =  getNode(nodeType, cm);
 
 		retval.init(arg1, arg2, arg3, arg4, arg5, arg6);
 
@@ -251,7 +245,7 @@ public final QueryTreeNode getNode(int nodeType,
 	 *
 	 * @exception StandardException		Thrown on error.
 	 */
-	public final QueryTreeNode getNode(int nodeType,
+	public final Node getNode(int nodeType,
 							Object arg1,
 							Object arg2,
 							Object arg3,
@@ -262,7 +256,7 @@ public final QueryTreeNode getNode(int nodeType,
 							ContextManager cm)
 								throws StandardException
 	{
-		QueryTreeNode retval =  getNode(nodeType, cm);
+		Node retval =  getNode(nodeType, cm);
 
 		retval.init(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
 
@@ -286,7 +280,7 @@ public final QueryTreeNode getNode(int nodeType,
 	 *
 	 * @exception StandardException		Thrown on error.
 	 */
-	public final QueryTreeNode getNode(int nodeType,
+	public final Node getNode(int nodeType,
 							Object arg1,
 							Object arg2,
 							Object arg3,
@@ -298,7 +292,7 @@ public final QueryTreeNode getNode(int nodeType,
 							ContextManager cm)
 								throws StandardException
 	{
-		QueryTreeNode retval =  getNode(nodeType, cm);
+		Node retval =  getNode(nodeType, cm);
 
 		retval.init(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
 
@@ -323,7 +317,7 @@ public final QueryTreeNode getNode(int nodeType,
 	 *
 	 * @exception StandardException		Thrown on error.
 	 */
-	public final QueryTreeNode getNode(int nodeType,
+	public final Node getNode(int nodeType,
 							Object arg1,
 							Object arg2,
 							Object arg3,
@@ -336,7 +330,7 @@ public final QueryTreeNode getNode(int nodeType,
 							ContextManager cm)
 								throws StandardException
 	{
-		QueryTreeNode retval =  getNode(nodeType, cm);
+		Node retval =  getNode(nodeType, cm);
 
 		retval.init(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
 
@@ -362,7 +356,7 @@ public final QueryTreeNode getNode(int nodeType,
 	 *
 	 * @exception StandardException		Thrown on error.
 	 */
-	public final QueryTreeNode getNode(int nodeType,
+	public final Node getNode(int nodeType,
 							Object arg1,
 							Object arg2,
 							Object arg3,
@@ -376,7 +370,7 @@ public final QueryTreeNode getNode(int nodeType,
 							ContextManager cm)
 								throws StandardException
 	{
-		QueryTreeNode retval =  getNode(nodeType, cm);
+		Node retval =  getNode(nodeType, cm);
 
 		retval.init(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9,
 					arg10);
@@ -404,7 +398,7 @@ public final QueryTreeNode getNode(int nodeType,
 	 *
 	 * @exception StandardException		Thrown on error.
 	 */
-	public final QueryTreeNode getNode(int nodeType,
+	public final Node getNode(int nodeType,
 							Object arg1,
 							Object arg2,
 							Object arg3,
@@ -419,7 +413,7 @@ public final QueryTreeNode getNode(int nodeType,
 							ContextManager cm)
 								throws StandardException
 	{
-		QueryTreeNode retval =  getNode(nodeType, cm);
+		Node retval =  getNode(nodeType, cm);
 
 		retval.init(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9,
 					arg10, arg11);
@@ -448,7 +442,7 @@ public final QueryTreeNode getNode(int nodeType,
 	 *
 	 * @exception StandardException		Thrown on error.
 	 */
-	public final QueryTreeNode getNode(int nodeType,
+	public final Node getNode(int nodeType,
 							Object arg1,
 							Object arg2,
 							Object arg3,
@@ -464,7 +458,7 @@ public final QueryTreeNode getNode(int nodeType,
 							ContextManager cm)
 								throws StandardException
 	{
-		QueryTreeNode retval =  getNode(nodeType, cm);
+		Node retval =  getNode(nodeType, cm);
 
 		retval.init(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9,
 					arg10, arg11, arg12);
@@ -494,7 +488,7 @@ public final QueryTreeNode getNode(int nodeType,
 	 *
 	 * @exception StandardException		Thrown on error.
 	 */
-	public final QueryTreeNode getNode(int nodeType,
+	public final Node getNode(int nodeType,
 							Object arg1,
 							Object arg2,
 							Object arg3,
@@ -511,7 +505,7 @@ public final QueryTreeNode getNode(int nodeType,
 							ContextManager cm)
 								throws StandardException
 	{
-		QueryTreeNode retval =  getNode(nodeType, cm);
+		Node retval =  getNode(nodeType, cm);
 
 		retval.init(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9,
 					arg10, arg11, arg12, arg13);
@@ -542,7 +536,7 @@ public final QueryTreeNode getNode(int nodeType,
 	 *
 	 * @exception StandardException		Thrown on error.
 	 */
-	public final QueryTreeNode getNode(int nodeType,
+	public final Node getNode(int nodeType,
 							Object arg1,
 							Object arg2,
 							Object arg3,
@@ -560,7 +554,7 @@ public final QueryTreeNode getNode(int nodeType,
 							ContextManager cm)
 								throws StandardException
 	{
-		QueryTreeNode retval =  getNode(nodeType, cm);
+		Node retval =  getNode(nodeType, cm);
 
 		retval.init(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9,
 					arg10, arg11, arg12, arg13, arg14);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java
index e502904b..4339adf8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BetweenOperatorNode.java
@@ -213,7 +213,7 @@ public ValueNode preprocess(int numTables,
 		NodeFactory nodeFactory = getNodeFactory();
 		ContextManager cm = getContextManager();
 
-        QueryTreeNode trueNode = nodeFactory.getNode(
+        QueryTreeNode trueNode = (QueryTreeNode) nodeFactory.getNode(
 											C_NodeTypes.BOOLEAN_CONSTANT_NODE,
 											Boolean.TRUE,
 											cm);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java
index 3b80b3a1..be0bdd6c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java
@@ -354,12 +354,11 @@ private void recastNullNodes(ValueNodeList thenElseList,
 	private QueryTreeNode recastNullNode(ValueNode nodeToCast,
 		DataTypeDescriptor typeToUse) throws StandardException
 	{
-		QueryTreeNode cast = getNodeFactory().getNode(
+		return (QueryTreeNode) getNodeFactory().getNode(
 					C_NodeTypes.CAST_NODE,
 					((CastNode)nodeToCast).castOperand,
 					typeToUse,
 					getContextManager());
-		return cast;
 	}
 
 	/**
@@ -402,7 +401,7 @@ public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
 			 * The untyped NULL should have a data type descriptor
 			 * that allows its value to be nullable.
 			 */
-			QueryTreeNode cast = getNodeFactory().getNode(
+			QueryTreeNode cast = (QueryTreeNode) getNodeFactory().getNode(
 						C_NodeTypes.CAST_NODE,
 						thenElseList.elementAt(0), 
 						bcon.getLeftOperand().getTypeServices().getNullabilityType(true),
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
index d9d58abd..186e2454 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
@@ -2409,8 +2409,8 @@ private ResultSetNode mapTableAsVTI(
         // call is an indication that we are mapping to a no-argument VTI. Since
         // we have the table descriptor we do not need to pass in a TableName.
         // See NewInvocationNode for more.
-        QueryTreeNode newNode =
-                getNodeFactory().getNode(C_NodeTypes.NEW_INVOCATION_NODE,
+        QueryTreeNode newNode = (QueryTreeNode) getNodeFactory().getNode(
+                C_NodeTypes.NEW_INVOCATION_NODE,
                 null, // TableName
                 td, // TableDescriptor
                 Collections.EMPTY_LIST,
@@ -2420,7 +2420,8 @@ private ResultSetNode mapTableAsVTI(
         QueryTreeNode vtiNode;
 
         if (correlationName != null) {
-            vtiNode = getNodeFactory().getNode(C_NodeTypes.FROM_VTI,
+            vtiNode = (QueryTreeNode) getNodeFactory().getNode(
+                    C_NodeTypes.FROM_VTI,
                     newNode,
                     correlationName,
                     resultColumns,
@@ -2430,7 +2431,8 @@ private ResultSetNode mapTableAsVTI(
             TableName exposedName = newNode.makeTableName(td.getSchemaName(),
                     td.getDescriptorName());
 
-            vtiNode = getNodeFactory().getNode(C_NodeTypes.FROM_VTI,
+            vtiNode = (QueryTreeNode) getNodeFactory().getNode(
+                    C_NodeTypes.FROM_VTI,
                     newNode,
                     correlationName,
                     resultColumns,
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java
index 0ef75f73..f1979c66 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/LikeEscapeOperatorNode.java
@@ -673,7 +673,7 @@ public ValueNode preprocess(
             {
                 // pattern string is a constant
                 likeLTopt = 
-                    getNodeFactory().getNode(
+                    (QueryTreeNode) getNodeFactory().getNode(
                         C_NodeTypes.CHAR_CONSTANT_NODE,
                         lessThanString,
                         getContextManager());
@@ -901,7 +901,7 @@ private ValueNode setupOptimizeStringFromParameter(
         if (escapeNode != null)
             param.add(escapeNode);
 
-        QueryTreeNode maxWidthNode = getNodeFactory().getNode(
+        QueryTreeNode maxWidthNode = (QueryTreeNode) getNodeFactory().getNode(
             C_NodeTypes.INT_CONSTANT_NODE,
             new Integer(maxWidth),
             getContextManager());
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java
index 9a579850..20322866 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java
@@ -31,6 +31,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.sql.compile.Optimizer;
 
+import org.apache.derby.iapi.sql.compile.Node;
 import org.apache.derby.iapi.sql.compile.NodeFactory;
 import org.apache.derby.iapi.sql.compile.C_NodeTypes;
 
@@ -133,7 +134,7 @@ public Boolean doJoinOrderOptimization()
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
-	public QueryTreeNode getNode(int nodeType, ContextManager cm)
+	public Node getNode(int nodeType, ContextManager cm)
 											throws StandardException
 	{
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
index 0d6f3df3..4476378d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
@@ -43,6 +43,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.StatementType;
 import org.apache.derby.iapi.sql.compile.C_NodeTypes;
 import org.apache.derby.iapi.sql.compile.CompilerContext;
+import org.apache.derby.iapi.sql.compile.Node;
 import org.apache.derby.iapi.sql.compile.NodeFactory;
 import org.apache.derby.iapi.sql.compile.Parser;
 import org.apache.derby.iapi.sql.compile.TypeCompiler;
@@ -69,7 +70,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  *
  */
 
-public abstract class QueryTreeNode implements Visitable
+public abstract class QueryTreeNode implements Node, Visitable
 {
 	public static final int AUTOINCREMENT_START_INDEX = 0;
 	public static final int AUTOINCREMENT_INC_INDEX   = 1;
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ValueNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ValueNode.java
index 1c70d1da..d5166f99 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ValueNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ValueNode.java
@@ -613,7 +613,7 @@ public ValueNode putAndsOnTop()
 	{
 		NodeFactory		nodeFactory = getNodeFactory();
 
-        QueryTreeNode trueNode = nodeFactory.getNode(
+        QueryTreeNode trueNode = (QueryTreeNode) nodeFactory.getNode(
 										C_NodeTypes.BOOLEAN_CONSTANT_NODE,
 										Boolean.TRUE,
 										getContextManager());
