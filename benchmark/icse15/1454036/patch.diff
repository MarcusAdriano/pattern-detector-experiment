diff --git a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/AriesSubsystemTest.java b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/AriesSubsystemTest.java
index 7d9c69cf..4921df53 100644
--- a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/AriesSubsystemTest.java
+++ b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/AriesSubsystemTest.java
@@ -1,5 +1,6 @@
 package org.apache.aries.subsystem.itests;
 
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertSame;
 import static org.junit.Assert.fail;
@@ -15,6 +16,7 @@
 import org.apache.aries.util.filesystem.FileSystem;
 import org.apache.aries.util.filesystem.IDirectory;
 import org.easymock.EasyMock;
+import org.eclipse.equinox.region.Region;
 import org.eclipse.equinox.region.RegionFilter;
 import org.junit.Before;
 import org.junit.Test;
@@ -126,6 +128,64 @@ public void setUp() throws Exception {
 		super.setUp();
 	}
 	
+	/*
+	 * The region copy process when adding additional requirements should
+	 * keep all edges, not just the ones running between parent and child. This
+	 * is of particular concern with regard to the connections all subsystem
+	 * regions have with the root region to allow the subsystem services
+	 * through. However, it may also be of concern if the region digraph is
+	 * modified outside of the subsystems API.
+	 */
+	@Test
+	public void testAddRequirementsKeepsEdgesOtherThanParentChild() throws Exception {
+		AriesSubsystem compositeA = (AriesSubsystem)installSubsystemFromFile(COMPOSITE_A);
+		AriesSubsystem applicationB = (AriesSubsystem)getConstituentAsSubsystem(compositeA, APPLICATION_B, null, SubsystemConstants.SUBSYSTEM_TYPE_APPLICATION);
+		Region bRegion = getRegion(applicationB);
+		// One edge to parent for import package. One edge to root for subsystem
+		// service.
+		assertEquals("Wrong number of edges", 2, bRegion.getEdges().size());
+		Requirement requirement = new BasicRequirement.Builder()
+				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
+				.directive(
+						PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE, 
+						"(osgi.wiring.package=org.osgi.framework)")
+				.resource(EasyMock.createMock(Resource.class))
+				.build();
+		applicationB.addRequirements(Collections.singleton(requirement));
+		bRegion = getRegion(applicationB);
+		// Still one edge to parent for import package. One edge to root for 
+		// subsystem service.
+		assertEquals("Wrong number of edges", 2, bRegion.getEdges().size());
+		Region rootRegion = getRegion(getRootSubsystem());
+		// The root region won't be the tail region for any connection unless
+		// manually added.
+		assertEquals("Wrong number of edges", 0, rootRegion.getEdges().size());
+		// Manually add a connection from root to application B.
+		rootRegion.connectRegion(
+				bRegion, 
+				rootRegion.getRegionDigraph().createRegionFilterBuilder().allow(
+						"com.foo", 
+						"(bar=b)").build());
+		// The root region should now have an edge.
+		assertEquals("Wrong number of edges", 1, rootRegion.getEdges().size());
+		// Add another requirement to force a copy.
+		requirement = new BasicRequirement.Builder()
+				.namespace(PackageNamespace.PACKAGE_NAMESPACE)
+				.directive(
+						PackageNamespace.REQUIREMENT_FILTER_DIRECTIVE, 
+						"(osgi.wiring.package=org.osgi.framework.wiring)")
+				.resource(EasyMock.createMock(Resource.class))
+				.build();
+		applicationB.addRequirements(Collections.singleton(requirement));
+		rootRegion = getRegion(getRootSubsystem());
+		// The root region should still have its edge.
+		assertEquals("Wrong number of edges", 1, rootRegion.getEdges().size());
+		bRegion = getRegion(applicationB);
+		// Still one edge to parent for import package. One edge to root for 
+		// subsystem service.
+		assertEquals("Wrong number of edges", 2, bRegion.getEdges().size());
+	}
+	
 	/*
 	 * Test the AriesSubsystem.addRequirements(Collection<Requirement>) method.
 	 * 
diff --git a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java
index cda3754e..e2d63b9c 100644
--- a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java
+++ b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java
@@ -704,7 +704,7 @@ protected Subsystem getConstituentAsSubsystem(Subsystem subsystem, String symbol
 	
 	protected Region getRegion(Subsystem subsystem) {
 		RegionDigraph digraph = getOsgiService(RegionDigraph.class);
-		String name = subsystem.getSymbolicName() + ';' + subsystem.getVersion() + ';' + subsystem.getType() + ';' + subsystem.getSubsystemId();
+		String name = getRegionName(subsystem);
 		Region region = digraph.getRegion(name);
 		assertNotNull("Region not found: " + name, region);
 		return region;
@@ -716,6 +716,12 @@ protected Bundle getRegionContextBundle(Subsystem subsystem) {
 		return bc.getBundle();
 	}
 	
+	protected String getRegionName(Subsystem subsystem) {
+		if (subsystem.getSubsystemId() == 0)
+			return "org.eclipse.equinox.region.kernel";
+		return subsystem.getSymbolicName() + ';' + subsystem.getVersion() + ';' + subsystem.getType() + ';' + subsystem.getSubsystemId();
+	}
+	
 	protected AriesSubsystem getRootAriesSubsystem() {
 		return getOsgiService(AriesSubsystem.class);
 	}
