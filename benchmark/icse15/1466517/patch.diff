diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AbstractAction.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AbstractAction.java
index 044035e2..a6136123 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AbstractAction.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/AbstractAction.java
@@ -15,8 +15,11 @@
 
 import java.security.PrivilegedAction;
 
+import org.osgi.service.subsystem.Subsystem.State;
 import org.osgi.service.subsystem.SubsystemException;
 
+import com.sun.org.apache.bcel.internal.generic.GETSTATIC;
+
 public abstract class AbstractAction implements PrivilegedAction<Object> {
 	protected final boolean disableRootCheck;
 	protected final BasicSubsystem requestor;
@@ -39,14 +42,24 @@ protected void checkValid() {
 			throw new IllegalStateException("Detected stale subsystem instance: " + s);
 	}
 	
-	protected void waitForStateChange() {
+	protected void waitForStateChange(State fromState) {
+		long then = System.currentTimeMillis() + 60000;
 		synchronized (target) {
+			while (target.getState().equals(fromState)) {
+				// State change has not occurred.
+				long now = System.currentTimeMillis();
+				if (then <= now)
+					// Wait time has expired.
+					throw new SubsystemException("Operation timed out while waiting for the subsystem to change state from " + fromState);
 			try {
-				target.wait();
+					// Wait will never be called with zero or a negative
+					// argument due to previous check.
+					target.wait(then - now);
 			}
 			catch (InterruptedException e) {
 				throw new SubsystemException(e);
 			}
 		}
 	}
+	}
 }
diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StartAction.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StartAction.java
index ab406d20..b250a397 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StartAction.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StartAction.java
@@ -68,7 +68,7 @@ public Object run() {
 			throw new SubsystemException("Cannot stop from state " + state);
 		// The following states must wait.
 		if (EnumSet.of(State.INSTALLING, State.RESOLVING, State.STARTING, State.STOPPING).contains(state)) {
-			waitForStateChange();
+			waitForStateChange(state);
 			return new StartAction(instigator, requestor, target).run();
 		}
 		// The following states mean the requested state has already been attained.
diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StopAction.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StopAction.java
index e1c02dd6..ac60997d 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StopAction.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/StopAction.java
@@ -47,7 +47,7 @@ public Object run() {
 		else if (EnumSet.of(State.INSTALL_FAILED, State.UNINSTALLING, State.UNINSTALLED).contains(state))
 			throw new IllegalStateException("Cannot stop from state " + state);
 		else if (EnumSet.of(State.INSTALLING, State.RESOLVING, State.STARTING, State.STOPPING).contains(state)) {
-			waitForStateChange();
+			waitForStateChange(state);
 			return new StopAction(requestor, target, disableRootCheck).run();
 		}
 		target.setState(State.STOPPING);
diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/UninstallAction.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/UninstallAction.java
index d06afade..d865e368 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/UninstallAction.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/UninstallAction.java
@@ -30,7 +30,7 @@ public Object run() {
 		if (EnumSet.of(State.UNINSTALLED).contains(state))
 			return null;
 		else if (EnumSet.of(State.INSTALL_FAILED, State.INSTALLING, State.RESOLVING, State.STARTING, State.STOPPING, State.UNINSTALLING).contains(state)) {
-			waitForStateChange();
+			waitForStateChange(state);
 			target.uninstall();
 		}
 		else if (state.equals(State.ACTIVE)) {
