diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java
index 9ee1fb3b..9dbcc1ed 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java
@@ -574,6 +574,10 @@ protected Query getFieldQuery(String field, String queryText, int slop)
         throws SyntaxError {
     Query query = getFieldQuery(field, queryText, true);
 
+    // only set slop of the phrase query was a result of this parser
+    // and not a sub-parser.
+    if (subQParser == null) {
+
     if (query instanceof PhraseQuery) {
       ((PhraseQuery) query).setSlop(slop);
     }
@@ -581,6 +585,8 @@ protected Query getFieldQuery(String field, String queryText, int slop)
       ((MultiPhraseQuery) query).setSlop(slop);
     }
 
+    }
+
     return query;
   }
 
@@ -780,7 +786,7 @@ Query handleBoost(Query q, Token boost) {
       float boostVal = Float.parseFloat(boost.image);
       // avoid boosting null queries, such as those caused by stop words
       if (q != null) {
-        q.setBoost(boostVal);
+        q.setBoost(q.getBoost() * boostVal);
       }
     }
     return q;
@@ -933,7 +939,8 @@ protected String analyzeIfMultitermTermText(String field, String part, FieldType
   }
 
 
-  // called from parser
+  private QParser subQParser = null;
+
   protected Query getFieldQuery(String field, String queryText, boolean quoted) throws SyntaxError {
     checkNullField(field);
     // intercept magic field name of "_" to use as a hook for our
@@ -941,8 +948,8 @@ protected Query getFieldQuery(String field, String queryText, boolean quoted) th
     if (field.charAt(0) == '_' && parser != null) {
       MagicFieldName magic = MagicFieldName.get(field);
       if (null != magic) {
-        QParser nested = parser.subQuery(queryText, magic.subParser);
-        return nested.getQuery();
+        subQParser = parser.subQuery(queryText, magic.subParser);
+        return subQParser.getQuery();
       }
     }
     SchemaField sf = schema.getFieldOrNull(field);
diff --git a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java
index a904e214..5142cd24 100644
--- a/lucene/dev/branches/lucene_solr_4_2/solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java
+++ b/lucene/dev/branches/lucene_solr_4_2/solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java
@@ -114,4 +114,53 @@ public void testSyntax() throws Exception {
     );
   }
 
+  @Test
+  public void testNestedQueryModifiers() throws Exception {
+    // One previous error was that for nested queries, outer parameters overrode nested parameters.
+    // For example _query_:"\"a b\"~2" was parsed as "a b"
+
+    String subqq="_query_:\"{!v=$qq}\"";
+
+    assertJQ(req("q","_query_:\"\\\"how brown\\\"~2\""
+        , "debug","query"
+    )
+        ,"/response/docs/[0]/id=='1'"
+    );
+
+    assertJQ(req("q",subqq, "qq","\"how brown\"~2"
+        , "debug","query"
+    )
+        ,"/response/docs/[0]/id=='1'"
+    );
+
+    // Should explicit slop override?  It currently does not, but that could be considered a bug.
+    assertJQ(req("q",subqq+"~1", "qq","\"how brown\"~2"
+        , "debug","query"
+    )
+        ,"/response/docs/[0]/id=='1'"
+    );
+
+    // Should explicit slop override?  It currently does not, but that could be considered a bug.
+    assertJQ(req("q","  {!v=$qq}~1", "qq","\"how brown\"~2"
+        , "debug","query"
+    )
+        ,"/response/docs/[0]/id=='1'"
+    );
+
+    // boost should multiply
+    assertJQ(req("fq","id:1", "fl","id,score", "q", subqq+"^3", "qq","text:x^2"
+        , "debug","query"
+    )
+        ,"/debug/parsedquery=='text:x^6.0'"
+    );
+
+    // boost should multiply
+    assertJQ(req("fq","id:1", "fl","id,score", "q", "  {!v=$qq}^3", "qq","text:x^2"
+        , "debug","query"
+    )
+        ,"/debug/parsedquery=='text:x^6.0'"
+    );
+
+  }
+
 }
