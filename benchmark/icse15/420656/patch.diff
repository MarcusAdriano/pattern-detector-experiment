diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
index 865f86ef..aad0e7e5 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedResultSet.java
@@ -126,13 +126,16 @@
 	private ResultSetMetaData rMetaData;
 	private SQLWarning topWarning;
 
-	// This activation is set by EmbedStatement
-	// for a single execution Activation. Ie.
-	// a ResultSet from a Statement.executeQuery().
-	// In this case the finalization of the ResultSet
-	// will mark the Activation as unused.
-	// c.f. EmbedPreparedStatement.finalize().
-	Activation finalizeActivation;
+	/**
+	 This activation is set by EmbedStatement
+	 for a single execution Activation. Ie.
+	 a ResultSet from a Statement.executeQuery().
+	 In this case the closing of this ResultSet will close
+	 the activation or the finalization of the ResultSet
+	 without it being closed will mark the Activation as unused.
+	 c.f. EmbedPreparedStatement.finalize().
+    */
+	Activation singleUseActivation;
 
 	// Order of creation 
 	final int order;
@@ -230,7 +233,8 @@ public EmbedResultSet(EmbedConnection conn, ResultSet resultsToWrap,
 		//CONCUR_READ_ONLY or CONCUR_UPDATABLE depending on whether the underlying language resultset is updateable or not.
 		//If the underlying language resultset is not updateable, then the concurrency of the ResultSet object will be CONCUR_READ_ONLY
 		//and a warning will be issued on the ResultSet object.
-		if (stmt == null) concurrencyOfThisResultSet = JDBC20Translation.CONCUR_READ_ONLY;
+		if (stmt == null)
+			concurrencyOfThisResultSet = JDBC20Translation.CONCUR_READ_ONLY;
 		else if (stmt.getResultSetConcurrency() == JDBC20Translation.CONCUR_READ_ONLY)
 			concurrencyOfThisResultSet = JDBC20Translation.CONCUR_READ_ONLY;
 		else {
@@ -294,8 +298,8 @@ else if (stmt.getResultSetConcurrency() == JDBC20Translation.CONCUR_READ_ONLY)
 	protected void finalize() throws Throwable {
 		super.finalize();
 
-		if (finalizeActivation != null) {
-			finalizeActivation.markUnused();
+		if (singleUseActivation != null) {
+			singleUseActivation.markUnused();
 		}		
 	}
 
@@ -579,6 +583,13 @@ public void close() throws SQLException	{
 			try	{
 				try	{
 				    theResults.finish(); // release the result set, don't just close it
+				    
+				    if (this.singleUseActivation != null)
+				    {
+				    	this.singleUseActivation.close();
+				    	this.singleUseActivation = null;
+				    }
+				    
 				} catch (Throwable t) {
 					throw handleException(t);
 				}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
index 9751bce2..d54e65d4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
@@ -1202,7 +1202,7 @@ boolean executeStatement(Activation a,
 					// closed sometime later by the connection
 					// outside of finalization.
 					if (a.isSingleExecution())
-						lresults.finalizeActivation = a;
+						lresults.singleUseActivation = a;
 
 					updateCount = -1;
 					retval = true;
