diff --git a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
index d1b8d3c7..a5849328 100644
--- a/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
+++ b/incubator/aries/trunk/jndi/jndi-url/src/main/java/org/apache/aries/jndi/services/ServiceHelper.java
@@ -198,10 +198,14 @@ public static Object getService(String className, String filter) throws IllegalA
    */
   private static BundleContext getBundleContext()
   {
-    BundleContext result = context;
+    BundleContext result = null;
     ClassLoader cl = Thread.currentThread().getContextClassLoader();
+    while (result == null && cl != null) {
     if (cl instanceof BundleReference) {
       result = ((BundleReference)cl).getBundle().getBundleContext();
+      } else if (cl != null) {
+        cl = cl.getParent();
+      }
     } 
     
     if (result == null) result = context;
diff --git a/incubator/aries/trunk/jndi/jndi-url/src/test/java/org/apache/aries/jndi/url/ServiceHelperTest.java b/incubator/aries/trunk/jndi/jndi-url/src/test/java/org/apache/aries/jndi/url/ServiceHelperTest.java
index 4471cdf6..89019872 100644
--- a/incubator/aries/trunk/jndi/jndi-url/src/test/java/org/apache/aries/jndi/url/ServiceHelperTest.java
+++ b/incubator/aries/trunk/jndi/jndi-url/src/test/java/org/apache/aries/jndi/url/ServiceHelperTest.java
@@ -24,6 +24,8 @@
 import static org.junit.Assert.assertTrue;
 
 import java.lang.reflect.Field;
+import java.net.URL;
+import java.net.URLClassLoader;
 import java.util.Hashtable;
 import java.util.List;
 import java.util.Properties;
@@ -206,4 +208,41 @@ public void getMultipleServices()
     skel.assertCalledExactNumberOfTimes(getService, 3);
     skel.assertCalledExactNumberOfTimes(ungetService, 1);
   }
+
+  /**
+   * This test checks that the getServices method correctly walks the class loader heirarchy
+   * when searching for the callers bundle context.
+   */
+  @Test
+  public void parentClassLoaderImplementsBundleContext()
+  {
+    Bundle b = Skeleton.newMock(new BundleMock("scooby.doo", new Properties()), Bundle.class);
+
+    Skeleton skel = Skeleton.getSkeleton(b);
+
+    ClassLoader cl = new URLClassLoader(new URL[0], ((BundleMock)skel.getTemplateObject()).getClassLoader());
+    cl = new URLClassLoader(new URL[0], cl);
+
+    Thread.currentThread().setContextClassLoader(cl);
+
+    skel = Skeleton.getSkeleton(b.getBundleContext());
+
+    Object retrievedService = ServiceHelper.getService("java.lang.Runnable", null);
+
+    assertNotNull("We could not locate the service in the registry", retrievedService);
+
+    assertTrue("We didn't get back the service we expected", service == retrievedService);
+
+    MethodCall getService = new MethodCall(BundleContext.class, "getService", ServiceReference.class);
+    MethodCall ungetService = new MethodCall(BundleContext.class, "ungetService", ServiceReference.class);
+
+    skel.assertNotCalled(ungetService);
+    skel.assertCalledExactNumberOfTimes(getService, 1);
+
+    Object retrievedService2 = ServiceHelper.getService("java.lang.Runnable", null);
+
+    assertTrue("We got different objects, which we did not want", retrievedService == retrievedService2);
+    skel.assertCalledExactNumberOfTimes(getService, 2);
+    skel.assertCalledExactNumberOfTimes(ungetService, 1);
+  }
 }
