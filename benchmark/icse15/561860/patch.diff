diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java
index 25671dc3..c4de2bae 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/AggregateNode.java
@@ -168,26 +168,17 @@ public ValueNode replaceAggregatesWithColumnReferences(ResultColumnList rcl, int
 			/*
 			** Parse time.	
 			*/
-			if (getTypeServices() == null)
-			{
-				generatedRef = (ColumnReference) getNodeFactory().getNode(
-												C_NodeTypes.COLUMN_REFERENCE,
-												generatedColName,
-												null,
-												getContextManager());
-			}
-			else
-			{
 				generatedRef = (ColumnReference) getNodeFactory().getNode(
 												C_NodeTypes.COLUMN_REFERENCE,
 												generatedRC.getName(),
 												null,
 												getContextManager());
-				generatedRef.setType(this.getTypeServices());
-			}
+
 			// RESOLVE - unknown nesting level, but not correlated, so nesting levels must be 0
+            generatedRef.setSource(generatedRC);
 			generatedRef.setNestingLevel(0);
 			generatedRef.setSourceLevel(0);
+            
 			if (tableNumber != -1)
 			{
 				generatedRef.setTableNumber(tableNumber);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java
index d51149d9..f77d2190 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GroupByTest.java
@@ -21,6 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derbyTesting.functionTests.tests.lang;
 
+import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;
 
@@ -110,5 +111,28 @@ public void testGroupByWithAliasToSameName() throws SQLException {
 		s.close();
 		rollback();
 	}
+    
+    /**
+     * DERBY-2397 showed incorrect typing of aggregate nodes
+     * that lead to a SUBSTR throwing an exception that its
+     * position/length were out of range.
+     * @throws SQLException
+     */
+    public void testDERBY2937() throws SQLException {
+        Statement s = createStatement();
+        
+        s.executeUpdate("CREATE TABLE A2937 (C CHAR(10) NOT NULL, " +
+                "D DATE NOT NULL, DC DECIMAL(6,2))");
+        s.executeUpdate("INSERT INTO A2937 VALUES ('aaa', " +
+                "DATE('2007-07-10'), 500.00)");
+        
+        ResultSet rs = s.executeQuery("SELECT A.C, SUBSTR (MAX(CAST(A.D AS CHAR(10)) || " +
+                "CAST(A.DC AS CHAR(8))), 11, 8) AS BUG " +
+                "FROM A2937 A GROUP BY A.C");
+        JDBC.assertFullResultSet(rs,
+                new String[][] {{"aaa","500.00"}});
+        s.executeUpdate("DROP TABLE A2937");
+        
+    }
 }
 
