diff --git a/aries/trunk/blueprint/blueprint-itests/src/test/java/org/apache/aries/blueprint/itests/TestReferences.java b/aries/trunk/blueprint/blueprint-itests/src/test/java/org/apache/aries/blueprint/itests/TestReferences.java
index 9234946e..103bbd84 100644
--- a/aries/trunk/blueprint/blueprint-itests/src/test/java/org/apache/aries/blueprint/itests/TestReferences.java
+++ b/aries/trunk/blueprint/blueprint-itests/src/test/java/org/apache/aries/blueprint/itests/TestReferences.java
@@ -32,6 +32,7 @@
 
 import org.apache.aries.blueprint.sample.BindingListener;
 import org.apache.aries.blueprint.sample.DefaultRunnable;
+import org.apache.aries.blueprint.sample.DestroyTest;
 import org.apache.aries.blueprint.sample.InterfaceA;
 import org.apache.aries.unittest.mocks.MethodCall;
 import org.apache.aries.unittest.mocks.Skeleton;
@@ -39,6 +40,7 @@
 import org.junit.runner.RunWith;
 import org.ops4j.pax.exam.Option;
 import org.ops4j.pax.exam.junit.JUnit4TestRunner;
+import org.osgi.framework.Bundle;
 import org.osgi.framework.Constants;
 import org.osgi.framework.ServiceRegistration;
 import org.osgi.service.blueprint.container.BlueprintContainer;
@@ -156,6 +158,35 @@ public void testDefaultReference() throws Exception {
       assertEquals("The default runnable was not called", 2, defaultRunnable.getCount());
     }
 
+    @Test
+    public void testReferencesCallableInDestroy() throws Exception {
+      bundleContext.registerService(Runnable.class.getName(), new Thread(), null);
+      
+      BlueprintContainer blueprintContainer = getBlueprintContainerForBundle("org.apache.aries.blueprint.sample");
+      assertNotNull(blueprintContainer);
+      
+      DestroyTest dt = (DestroyTest) blueprintContainer.getComponentInstance("destroyCallingReference");
+      
+      Bundle b = findBundle("org.apache.aries.blueprint.sample");
+      assertNotNull(b);
+      b.stop();
+      
+      assertTrue("The destroy method was called", dt.waitForDestruction(1000));
+      
+      Exception e = dt.getDestroyFailure();
+      
+      if (e != null) throw e;
+    }
+
+    private Bundle findBundle(String bsn)
+    {
+      for (Bundle b : bundleContext.getBundles()) {
+        if (bsn.equals(b.getSymbolicName())) return b;
+      }
+      
+      return null;
+    }
+
     @org.ops4j.pax.exam.junit.Configuration
     public static Option[] configuration() {
         Option[] options = options(
diff --git a/aries/trunk/blueprint/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/DestroyTest.java b/aries/trunk/blueprint/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/DestroyTest.java
index e69de29b..149ac5bf 100644
--- a/aries/trunk/blueprint/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/DestroyTest.java
+++ b/aries/trunk/blueprint/blueprint-sample/src/main/java/org/apache/aries/blueprint/sample/DestroyTest.java
@@ -0,0 +1,64 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.blueprint.sample;
+
+public class DestroyTest
+{
+  private Runnable target;
+  private Exception destroyFailure;
+  private boolean destroyed;
+  
+  public void setTarget(Runnable r)
+  {
+    target = r;
+  }
+  
+  public Exception getDestroyFailure()
+  {
+    return destroyFailure;
+  }
+  
+  public void destroy()
+  {
+    try {
+      target.run();
+    } catch (Exception e) {
+      destroyFailure = e;
+    }
+    
+    synchronized (this) {
+      destroyed = true;
+      notifyAll();
+    }
+  }
+
+  public synchronized boolean waitForDestruction(int timeout)
+  {
+    long startTime = System.currentTimeMillis();
+    
+    while (!!!destroyed && System.currentTimeMillis() - startTime < timeout) {
+      try {
+        wait(100);
+      } catch (InterruptedException e) {
+      }
+    }
+    
+    return destroyed;
+  }
+}
