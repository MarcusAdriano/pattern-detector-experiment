diff --git a/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/internal/BundleBlueprintParser.java b/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/internal/BundleBlueprintParser.java
index 2653d053..ce495c47 100644
--- a/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/internal/BundleBlueprintParser.java
+++ b/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/internal/BundleBlueprintParser.java
@@ -23,6 +23,10 @@
 
 import org.apache.aries.util.manifest.BundleManifest;
 import org.apache.aries.util.manifest.ManifestHeaderProcessor;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import static org.apache.aries.application.utils.AppConstants.*;
 
 /**
  * A bundle may contain a Bundle-Blueprint: header as per p649 of the v4 spec. If present, 
@@ -36,6 +40,7 @@
 public class BundleBlueprintParser {
   
   public static final String DEFAULT_HEADER = "OSGI-INF/blueprint/*.xml";
+  private static final Logger logger = LoggerFactory.getLogger(BundleBlueprintParser.class);
   
   String _mfHeader = null;
   List<Path> _paths;
@@ -81,7 +86,7 @@ public boolean matches (String dir, String fil) {
    * @param bundleMf BundleManifest to construct the parser from
    */
   public BundleBlueprintParser (BundleManifest bundleMf) {
-    String bundleBPHeader = (String) bundleMf.getRawAttributes().getValue("Bundle-Blueprint");
+    String bundleBPHeader = bundleMf.getRawAttributes().getValue("Bundle-Blueprint");
     setup (bundleBPHeader);
   }
 
@@ -108,6 +113,8 @@ private void setup (String bundleBPHeader) {
       _mfHeader = bundleBPHeader;
     }
     
+    logger.debug("Bundle-Blueprint header: {}", _mfHeader);
+    
     // Break this comma separated list up
     List<String> files = ManifestHeaderProcessor.split(_mfHeader, ",");
     clauses: for (String fileClause : files) {
@@ -150,12 +157,18 @@ private void setup (String bundleBPHeader) {
    *  @return true if this is a blueprint file according to the Bundle-Blueprint header
    */
   public boolean isBPFile (String directory, String filename) { 
+    logger.debug(LOG_ENTRY, "isBPFile", new Object[] {directory, filename});
+      
+    boolean result=false;
     for (Path path: _paths) { 
       if (path.matches(directory, filename)) { 
-        return true;
+        result = true;
+        break;
       }
     }
-    return false;
+    
+    logger.debug(LOG_EXIT, "isBPFile", result);
+    return result;
   }
        
 }
diff --git a/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/IFile.java b/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/IFile.java
index f63b4502..095e2d9e 100644
--- a/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/IFile.java
+++ b/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/IFile.java
@@ -31,7 +31,8 @@
 public interface IFile
 {
   /**
-   * @return the name of the file relative to the root of the virtual FS.
+   * @return the name of the file relative to the root of the virtual FS. This will return a '/' separated path
+   * indepedent of underlying filesystem
    */
   public String getName();
   /**
diff --git a/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/FileImpl.java b/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/FileImpl.java
index 8b4bfdd0..3d4776c6 100644
--- a/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/FileImpl.java
+++ b/aries/trunk/util/src/main/java/org/apache/aries/util/filesystem/impl/FileImpl.java
@@ -54,7 +54,7 @@ public FileImpl(File f, File rootFile)
     rootDir = rootFile.getAbsolutePath();
     
     if (f.equals(rootFile)) name = "";
-    else name = file.getAbsolutePath().substring(rootDir.length() + 1);
+    else name = file.getAbsolutePath().substring(rootDir.length() + 1).replace('\\', '/');
   }
   
   @Override
