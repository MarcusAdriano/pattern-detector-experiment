diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ImportPackageHeader.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ImportPackageHeader.java
index e3ae8fd7..edbe5dfc 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ImportPackageHeader.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/archive/ImportPackageHeader.java
@@ -178,14 +178,10 @@ public String toString() {
 	public static final String RESOLUTION_MANDATORY = PackageNamespace.RESOLUTION_MANDATORY;
 	public static final String RESOLUTION_OPTIONAL = PackageNamespace.RESOLUTION_OPTIONAL;
 	
-	private static final String REGEX = Grammar.IMPORT + "(?=,|\\z)";
-	private static final Pattern PATTERN = Pattern.compile(REGEX);
-	
 	private static Collection<Clause> processHeader(String header) {
-		Matcher matcher = PATTERN.matcher(header);
 		Set<Clause> clauses = new HashSet<Clause>();
-		while (matcher.find())
-			clauses.add(new Clause(matcher.group()));
+		for (String clause : new ClauseTokenizer(header).getClauses())
+			clauses.add(new Clause(clause));
 		return clauses;
 	}
 	
diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
index 5a4fb15b..f78cec26 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResource.java
@@ -257,6 +257,7 @@ private boolean addDependencies(Repository repository, Requirement requirement,
 	}
 	
 	private boolean addDependenciesFromContentRepository(Requirement requirement, List<Capability> capabilities) throws BundleException, IOException, InvalidSyntaxException, URISyntaxException {
+		// TODO Why create this with each method call? What not cache it as an instance variable?
 		Repository repository = new ContentRepository(installableContent, sharedContent);
 		return addDependencies(repository, requirement, capabilities);
 	}
diff --git a/aries/trunk/subsystem/subsystem-core/src/test/java/org/apache/aries/subsystem/core/Temp.java b/aries/trunk/subsystem/subsystem-core/src/test/java/org/apache/aries/subsystem/core/Temp.java
index c7acc094..e69de29b 100644
--- a/aries/trunk/subsystem/subsystem-core/src/test/java/org/apache/aries/subsystem/core/Temp.java
+++ b/aries/trunk/subsystem/subsystem-core/src/test/java/org/apache/aries/subsystem/core/Temp.java
@@ -1,23 +0,0 @@
-package org.apache.aries.subsystem.core;
-
-import java.util.regex.Pattern;
-
-import org.apache.aries.subsystem.core.archive.Clause;
-import org.apache.aries.subsystem.core.archive.Grammar;
-import org.apache.aries.subsystem.core.archive.Parameter;
-import org.apache.aries.subsystem.core.archive.ProvisionResourceHeader;
-
-public class Temp {
-	public static void main(String[] args) {
-		String s = "org.eclipse.osgi; singleton:=true;deployed-version=3.7.0.v20110221;type=osgi.bundle";
-		System.out.println(Pattern.matches(Grammar.CLAUSE, s));
-		ProvisionResourceHeader h = new ProvisionResourceHeader(s);
-		System.out.println(h.getName());
-		for (Clause c : h.getClauses()) {
-			System.out.println(c.getPath());
-			for (Parameter p : c.getParameters()) {
-				System.out.println(p.getValue());
-			}
-		}
-	}
-}
diff --git a/aries/trunk/subsystem/subsystem-core/src/test/java/org/apache/aries/subsystem/core/archive/ImportPackageHeaderTest.java b/aries/trunk/subsystem/subsystem-core/src/test/java/org/apache/aries/subsystem/core/archive/ImportPackageHeaderTest.java
index e69de29b..f55e4d1a 100644
--- a/aries/trunk/subsystem/subsystem-core/src/test/java/org/apache/aries/subsystem/core/archive/ImportPackageHeaderTest.java
+++ b/aries/trunk/subsystem/subsystem-core/src/test/java/org/apache/aries/subsystem/core/archive/ImportPackageHeaderTest.java
@@ -0,0 +1,48 @@
+package org.apache.aries.subsystem.core.archive;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
+
+import org.junit.Test;
+import org.osgi.framework.VersionRange;
+
+public class ImportPackageHeaderTest {
+	@Test
+	public void testVersionAttributeWithMultiplePackages() {
+		String headerStr = "org.foo;org.bar;org.foo.bar;version=1.3";
+		ImportPackageHeader header = new ImportPackageHeader(headerStr);
+		assertClauses(header, 1);
+		assertVersionAttribute(header, "org.foo;org.bar;org.foo.bar", "1.3");
+	}
+	
+	@Test
+	public void testVersionAttributeWithoutMultiplePackages() {
+		String headerStr = "org.foo,org.bar,org.foo.bar;version=1.3";
+		ImportPackageHeader header = new ImportPackageHeader(headerStr);
+		assertClauses(header, 3);
+		assertVersionAttribute(header, "org.foo", "0");
+		assertVersionAttribute(header, "org.bar", "0.0");
+		assertVersionAttribute(header, "org.foo.bar", "1.3");
+	}
+	
+	private void assertClauses(ImportPackageHeader header, int expectedClauses) {
+		assertEquals("Wrong number of clauses", expectedClauses, header.getClauses().size());
+	}
+	
+	private void assertVersionAttribute(ImportPackageHeader header, String path, String expectedVersion) {
+		for (ImportPackageHeader.Clause clause : header.getClauses())
+			if (path.equals(clause.getPath())) {
+				assertVersionAttribute(clause, expectedVersion);
+				return;
+			}
+		fail("Path not found: " + path);
+	}
+	
+	private void assertVersionAttribute(ImportPackageHeader.Clause clause, String expectedVersion) {
+		assertVersionAttribute(clause, new VersionRange(expectedVersion));
+	}
+	
+	private void assertVersionAttribute(ImportPackageHeader.Clause clause, VersionRange expectedVersion) {
+		assertEquals("Wrong version attribute", expectedVersion, clause.getVersionRangeAttribute().getVersionRange());
+	}
+}
