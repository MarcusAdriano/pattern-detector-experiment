diff --git a/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java b/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
index f0ae52c5..325947dc 100644
--- a/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
+++ b/db/derby/code/branches/10.3/java/drda/org/apache/derby/impl/drda/NetworkServerControlImpl.java
@@ -41,6 +41,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import javax.net.ssl.SSLServerSocketFactory;
 import java.net.UnknownHostException;
 import java.security.AccessController;
+import java.security.PrivilegedAction;
 import java.security.PrivilegedActionException;
 import java.security.PrivilegedExceptionAction;
 import java.sql.Connection;
@@ -704,7 +705,7 @@ public Object run() throws IOException
 		
 		// We accept clients on a separate thread so we don't run into a problem
 		// blocking on the accept when trying to process a shutdown
-		ClientThread clientThread =	 
+		final ClientThread clientThread =	 
 			(ClientThread) AccessController.doPrivileged(
 								new PrivilegedExceptionAction() {
 									public Object run() throws Exception
@@ -727,6 +728,10 @@ public Object run() throws Exception
             }
         }
 
+        
+        AccessController.doPrivileged(
+                new PrivilegedAction() {
+                    public Object run()  {
 		// Need to interrupt the memcheck thread if it is sleeping.
 		if (mc != null)
 			mc.interrupt();
@@ -734,6 +739,10 @@ public Object run() throws Exception
 		//interrupt client thread
 		clientThread.interrupt();
 
+                        return null;
+                    }
+                });
+		
  		// Close out the sessions
  		synchronized(sessionTable) {
  			for (Enumeration e = sessionTable.elements(); e.hasMoreElements(); )
@@ -748,8 +757,16 @@ public Object run() throws Exception
  			//interupt any connection threads still active
  			for (int i = 0; i < threadList.size(); i++)
  			{
- 				((DRDAConnThread)threadList.get(i)).close();
- 				((DRDAConnThread)threadList.get(i)).interrupt();
+				final DRDAConnThread threadi = (DRDAConnThread)threadList.get(i);
+                
+ 				threadi.close();
+				AccessController.doPrivileged(
+							new PrivilegedAction() {
+								public Object run() {
+									threadi.interrupt();
+									return null;
+								}
+							});
  			}
  			threadList.clear();
 		}
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/DRDAServerStarter.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/DRDAServerStarter.java
index 78ff2608..19a3ce9b 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/DRDAServerStarter.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/jdbc/DRDAServerStarter.java
@@ -34,6 +34,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.lang.reflect.InvocationTargetException;
 import java.net.InetAddress;
 import java.security.AccessController;
+import java.security.PrivilegedAction;
 import java.security.PrivilegedActionException;
 import java.security.PrivilegedExceptionAction;
 
@@ -231,7 +232,13 @@ public void stop()
 			{
 				serverShutdownMethod.invoke( server,
 											 null);
+				AccessController.doPrivileged(
+							      new PrivilegedAction() {
+								  public Object run() {
 				serverThread.interrupt();
+								      return null;
+								  }
+							      });				
 				serverThread = null;
 			}
 		   
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/services/context/ContextService.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/services/context/ContextService.java
index 1454fac5..5ecdc2cc 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/services/context/ContextService.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/services/context/ContextService.java
@@ -25,6 +25,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.iapi.services.stream.HeaderPrintWriter;
 
+import java.security.AccessController;
+import java.security.PrivilegedAction;
 import java.util.Hashtable;
 import java.util.Enumeration;
 
@@ -556,8 +558,17 @@ public void notifyAllActiveThreads(Context c) {
 				if (active == null)
 					continue;
 
+                final Thread fActive = active;
 				if (cm.setInterrupted(c))
-					active.interrupt();
+                {
+                    AccessController.doPrivileged(
+                            new PrivilegedAction() {
+                                public Object run()  {
+                                    fActive.interrupt();
+                                    return null;
+                                }
+                            });
+                }
 			}
 		}
 	}
