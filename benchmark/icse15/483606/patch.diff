diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/JarStorageFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/JarStorageFactory.java
index 9c7547d5..8eefc223 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/JarStorageFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/io/JarStorageFactory.java
@@ -21,21 +21,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.impl.io;
 
-import org.apache.derby.iapi.services.sanity.SanityManager;
-
-import org.apache.derby.io.StorageFactory;
-import org.apache.derby.io.StorageFile;
-
 import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.InputStream;
-import java.io.OutputStream;
 import java.io.IOException;
-
-import java.util.Properties;
-import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 
+import org.apache.derby.io.StorageFile;
+
 /**
  * This class provides a Jar file based implementation of the StorageFactory interface. It is used by the
  * database engine to access persistent data and transaction logs under the jar subsubprotocol.
@@ -123,6 +114,20 @@ void doInit() throws IOException
         createTempDir();
     } // end of doInit
 
+    /**
+     * Close the opened jar/zip file on shutdown.
+     * (Fix for DERBY-2083).
+     */
+    public void shutdown() {
+        if (zipData != null) {
+            try {
+                zipData.close();
+            } catch (IOException e) {
+            }
+            zipData = null;
+        }
+    }
+
     private File getJarFile( String name)
     {
         File jarFile = new File( name);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java
index acae90d4..51b3132e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java
@@ -250,14 +250,14 @@ public Properties getServiceProperties( final String serviceName, Properties def
 		//recreate the service root  if requested by the user.
 		final String recreateFrom = recreateServiceRoot(serviceName, defaultProperties);
 
-        InputStream is = null;
+        final Properties serviceProperties = new Properties(defaultProperties);
 		try
         {
-            is = (InputStream) AccessController.doPrivileged(
+            AccessController.doPrivileged(
                 new PrivilegedExceptionAction()
                 {
                     public Object run()
-                        throws FileNotFoundException, IOException, StandardException,
+                        throws IOException, StandardException,
                         InstantiationException, IllegalAccessException
                     {
                         if( recreateFrom != null) // restore from a file
@@ -269,17 +269,24 @@ public Object run()
                         {
                             StorageFactory storageFactory = privGetStorageFactoryInstance( true, serviceName, null, null);
                             StorageFile file = storageFactory.newStorageFile( PersistentService.PROPERTIES_NAME);
-                            InputStream is1 = file.getInputStream();
+                            try {
+                                InputStream is = file.getInputStream();
+                                try {
+                                    // Need to load the properties before closing the
+                                    // StorageFactory.
+                                    serviceProperties.load(new BufferedInputStream(is));
+                                } finally {
+                                    is.close();
+                                }
+                            } finally {
                             storageFactory.shutdown();
-                            return is1;
+                            }
+                            return null;
                         }
                     }
                 }
                 );
 
-			Properties serviceProperties = new Properties(defaultProperties);
-			serviceProperties.load(new BufferedInputStream(is));
-
 			return serviceProperties;
 		}
         catch (PrivilegedActionException pae)
@@ -288,20 +295,7 @@ public Object run()
                 return null;
             throw Monitor.exceptionStartingModule( pae.getException());
         }
-        catch (FileNotFoundException fnfe) {return null ;}
 		catch (SecurityException se) { throw Monitor.exceptionStartingModule(/*serviceName, */ se);	}
-        catch (IOException ioe) { throw Monitor.exceptionStartingModule(/*serviceName, */ ioe); }
-        finally
-        {
-			if (is != null)
-            {
-				try
-                {
-					is.close();
-				}
-                catch (IOException ioe2) {}
-			}
-		}
 	} // end of getServiceProperties
 
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
index 9423b528..1ecf5e2c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/BaseDataFileFactory.java
@@ -126,7 +126,6 @@ Currently only getContainerClass() is abstract, there are probably more
     implements DataFactory, CacheableFactory, ModuleControl, ModuleSupportable, PrivilegedExceptionAction
 {
 
-    private String subSubProtocol;
     StorageFactory storageFactory;
 
     /* writableStorageFactory == (WritableStorageFactory) storageFactory if 
@@ -496,6 +495,7 @@ public void	stop()
 
 		if (isReadOnly())		// do enough to close all files, then return 
         {
+            storageFactory.shutdown();
 			return;
         }
 
@@ -506,6 +506,8 @@ public void	stop()
 			removeStubs();
 
 		releaseJBMSLockOnDB();
+        
+        writableStorageFactory.shutdown();
 	} // end of stop
 
 	/*
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
index 542606d2..b1c1b9f9 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
@@ -99,13 +99,12 @@ public static Test suite()
            suite.addTest(SecurityManagerSetup.noSecurityManager(
                    new DatabaseClassLoadingTest("testRemoveJar"))); 
 
-/*  SKIP due to DERBY-2083         
+       
            suite.addTest(SecurityManagerSetup.noSecurityManager(
                    new DatabaseClassLoadingTest("testDatabaseInJar"))); 
 
            suite.addTest(SecurityManagerSetup.noSecurityManager(
                    new DatabaseClassLoadingTest("testDatabaseInClasspath"))); 
-*/
 
            test = new SupportFilesSetup(suite,
                    new String[] {
@@ -616,7 +615,10 @@ public void testDatabaseInClasspath() throws SQLException, MalformedURLException
         
         setContextClassLoader(jarURL);
         try {
-            readOnlyTest(ds);
+            // Disabled due to DERBY-2162, running this opens
+            // the database thus accessing resources and means the
+            // jar file cannot be cleaned up.
+            // readOnlyTest(ds);
         } finally {
             setContextClassLoader(null);
         } 
@@ -660,7 +662,7 @@ private static void readOnlyTest(DataSource ds) throws SQLException
             assertStatementError("25502", s,
                     "CALL EMC.ADDCONTACT(3, 'really@is_read_only.gov')");
 
-            // Disabled due to DERBY-522
+            // Disabled due to DERBY-552
             // getResourceTests(conn);
             
             // Disabled due to DERBY-553
