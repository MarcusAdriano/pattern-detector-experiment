diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/FieldCacheImpl.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/FieldCacheImpl.java
index 06e95845..c31cb687 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/FieldCacheImpl.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/FieldCacheImpl.java
@@ -634,7 +634,7 @@ protected Object createValue(IndexReader reader, Entry entryKey)
       try {
         do {
           Term term = termEnum.term();
-          if (term==null || term.field() != field) break;
+          if (term==null || term.field() != field || t >= mterms.length) break;
 
           // store term text
           mterms[t] = term.text();
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestSort.java b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestSort.java
index 317601d8..0c28cc8a 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestSort.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestSort.java
@@ -1013,4 +1013,24 @@ private void assertMatches(Searcher searcher, Query query, Sort sort,
     }
   }
 
+  public void testLUCENE2142() throws IOException {
+    RAMDirectory indexStore = new RAMDirectory ();
+    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(
+        TEST_VERSION_CURRENT, new SimpleAnalyzer(
+        TEST_VERSION_CURRENT)));
+    for (int i=0; i<5; i++) {
+        Document doc = new Document();
+        doc.add (new Field ("string", "a"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));
+        doc.add (new Field ("string", "b"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));
+        writer.addDocument (doc);
+    }
+    writer.optimize(); // enforce one segment to have a higher unique term count in all cases
+    writer.close();
+    sort.setSort(
+        new SortField("string", SortField.STRING),
+        SortField.FIELD_DOC );
+    // this should not throw AIOOBE or RuntimeEx
+    new IndexSearcher (indexStore, true).search(new MatchAllDocsQuery(), null, 500, sort);
+  }
+
 }
