diff --git a/db/derby/code/branches/10.7/java/client/org/apache/derby/client/am/CrossConverters.java b/db/derby/code/branches/10.7/java/client/org/apache/derby/client/am/CrossConverters.java
index 5f618f16..f386a49e 100644
--- a/db/derby/code/branches/10.7/java/client/org/apache/derby/client/am/CrossConverters.java
+++ b/db/derby/code/branches/10.7/java/client/org/apache/derby/client/am/CrossConverters.java
@@ -25,6 +25,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.Time;
 import java.sql.Timestamp;
 import java.util.Calendar;
+import java.util.Locale;
 import org.apache.derby.shared.common.reference.SQLState;
 
 // All currently supported derby types are mapped to one of the following jdbc types:
@@ -113,6 +114,10 @@ final Object setObject(int targetType, byte source) throws SqlException {
     // In support of PS.setShort()
     final Object setObject(int targetType, short source) throws SqlException {
         switch (targetType) {
+        case Types.BIT:
+        case Types.BOOLEAN:
+            return Boolean.valueOf(source != 0);
+
         case Types.SMALLINT:
             return new Short(source);
 
@@ -147,6 +152,10 @@ final Object setObject(int targetType, short source) throws SqlException {
     // In support of PS.setInt()
     final Object setObject(int targetType, int source) throws SqlException {
         switch (targetType) {
+        case Types.BIT:
+        case Types.BOOLEAN:
+            return Boolean.valueOf(source != 0);
+
         case Types.SMALLINT:
             if (Configuration.rangeCheckCrossConverters &&
                     (source > Short.MAX_VALUE || source < Short.MIN_VALUE)) {
@@ -237,6 +246,10 @@ final byte setByteFromObject(Object source, int sourceType) throws SqlException
     // In support of PS.setLong()
     final Object setObject(int targetType, long source) throws SqlException {
         switch (targetType) {
+        case Types.BIT:
+        case Types.BOOLEAN:
+            return Boolean.valueOf(source != 0);
+
         case Types.SMALLINT:
             if (Configuration.rangeCheckCrossConverters &&
                     (source > Short.MAX_VALUE || source < Short.MIN_VALUE)) {
@@ -279,6 +292,10 @@ final Object setObject(int targetType, long source) throws SqlException {
     // In support of PS.setFloat()
     final Object setObject(int targetType, float source) throws SqlException {
         switch (targetType) {
+        case Types.BIT:
+        case Types.BOOLEAN:
+            return Boolean.valueOf(source != 0);
+
         case Types.SMALLINT:
             if (Configuration.rangeCheckCrossConverters &&
                     (source > Short.MAX_VALUE || source < Short.MIN_VALUE)) {
@@ -354,6 +371,10 @@ final Object setObject(int targetType, float source) throws SqlException {
     // In support of PS.setDouble()
     final Object setObject(int targetType, double source) throws SqlException {
         switch (targetType) {
+        case Types.BIT:
+        case Types.BOOLEAN:
+            return Boolean.valueOf(source != 0);
+
         case Types.SMALLINT:
             if (Configuration.rangeCheckCrossConverters &&
                     (source > Short.MAX_VALUE || source < Short.MIN_VALUE)) {
@@ -417,6 +438,11 @@ final Object setObject(int targetType, double source) throws SqlException {
     // In support of PS.setBigDecimal()
     final Object setObject(int targetType, java.math.BigDecimal source) throws SqlException {
         switch (targetType) {
+        case Types.BIT:
+        case Types.BOOLEAN:
+            return Boolean.valueOf(
+                    java.math.BigDecimal.valueOf(0L).compareTo(source) != 0);
+
         case Types.SMALLINT:
             if (Configuration.rangeCheckCrossConverters &&
                     (source.compareTo(bdMaxShortValue__) == 1 || source.compareTo(bdMinShortValue__) == -1)) {
@@ -543,6 +569,23 @@ final Object setObject(int targetType, java.sql.Timestamp source) throws SqlExce
     final Object setObject(int targetDriverType, String source) throws SqlException {
         try {
             switch (targetDriverType) {
+            case Types.BIT:
+            case Types.BOOLEAN:
+            {
+                String cleanSource = source.trim().toUpperCase(Locale.ENGLISH);
+                if (cleanSource.equals("UNKNOWN")) {
+                    return null;
+                } else if (cleanSource.equals("TRUE")) {
+                    return Boolean.TRUE;
+                } else if (cleanSource.equals("FALSE")) {
+                    return Boolean.FALSE;
+                } else {
+                    throw new SqlException(agent_.logWriter_,
+                        new ClientMessageId(SQLState.LANG_FORMAT_EXCEPTION),
+                        Types.getTypeString(targetDriverType));
+                }
+            }
+
             case Types.SMALLINT:
                 return Short.valueOf(source);
 
@@ -604,8 +647,6 @@ final Object setObject(int targetDriverType, String source) throws SqlException
      */
     public static int getInputJdbcType(int jdbcType) {
         switch (jdbcType) {
-        case java.sql.Types.BIT:
-        case java.sql.Types.BOOLEAN:
         case java.sql.Types.TINYINT:
         case java.sql.Types.SMALLINT:
             return java.sql.Types.INTEGER;
diff --git a/db/derby/code/branches/10.7/java/client/org/apache/derby/client/am/Types.java b/db/derby/code/branches/10.7/java/client/org/apache/derby/client/am/Types.java
index f9b1bb54..e9ff35ff 100644
--- a/db/derby/code/branches/10.7/java/client/org/apache/derby/client/am/Types.java
+++ b/db/derby/code/branches/10.7/java/client/org/apache/derby/client/am/Types.java
@@ -29,8 +29,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 public class Types {
     // -------------------------------- Driver types -------------------------------------------------
 
-    // Not currently supported as a DERBY column type.  Mapped to SMALLINT.
-    // public final static int BIT        =  java.sql.Types.BIT;          // -7;
+    public final static int BIT        =  java.sql.Types.BIT;          // -7;
 
     // Not currently supported as a DERBY column type.  Mapped to SMALLINT.
     //public final static int TINYINT 	= java.sql.Types.TINYINT;       // -6;
@@ -90,6 +89,7 @@ static public String getTypeString(int type)
             case BIGINT:        return "BIGINT";
             case BINARY:        return "BINARY";
             case BLOB:          return "BLOB";
+            case BIT:
             case BOOLEAN:       return "BOOLEAN";
             case CHAR:          return "CHAR";
             case CLOB:          return "CLOB";
diff --git a/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java b/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java
index c647b761..669b7ac9 100644
--- a/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java
+++ b/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ParameterMappingTest.java
@@ -3123,53 +3123,82 @@ private static void setXXX(Statement s, PreparedStatement psi,
         }
     }
 
+    /**
+     * Do the {@code setObject()} tests for {@code setXXX()}. Test both for
+     * the two-argument {@code setObject(int,Object)} method and the
+     * three-argument {@code setObject(int,Object,int)} method.
+     */
     private static void setXXX_setObject(Statement s, PreparedStatement psi,
             PreparedStatement psq, int type, Object value, String className,
             int b5o) throws SQLException, java.io.IOException {
-        {
-            s.execute("DELETE FROM PM.TYPE_AS");
 
-            SQLException sqleResult = null;
-            boolean worked;
-            try {
-                // setObject(" + className + ")
-                psi.setObject(1, value);
-                psi.executeUpdate();
-                getValidValue(psq, jdbcTypes[type], "setObject(" + className
-                        + ")");
-                worked = true;
+        // Test setObject(int, Object)
+        setXXX_setObject_doWork(
+                s, psi, psq, type, value, className, b5o, false, false);
+
+        // Test setObject(int, Object) with batch execution
+        setXXX_setObject_doWork(
+                s, psi, psq, type, value, className, b5o, false, true);
+
+        // Test setObject(int, Object, int)
+        setXXX_setObject_doWork(
+                s, psi, psq, type, value, className, b5o, true, false);
+
+        // Test setObject(int, Object, int) with batch execution
+        setXXX_setObject_doWork(
+                s, psi, psq, type, value, className, b5o, true, true);
 
-            } catch (SQLException sqle) {
-                sqleResult = sqle;
-                worked = false;
-            }
-            judge_setObject(worked, sqleResult, b5o, type);
         }
+
+    /**
+     * Helper method that does all the work for setXXX_setObject().
+     *
+     * @param withTypeFlag if true, use the setObject() method that takes a
+     * type parameter; otherwise, use the two-argument type-less setObject()
+     * method
+     * @param batchExecution if true, do batch execution; otherwise, do
+     * normal execution
+     */
+    private static void setXXX_setObject_doWork(
+            Statement s, PreparedStatement psi, PreparedStatement psq,
+            int type, Object value, String className, int b5o,
+            boolean withTypeFlag, boolean batchExecution)
+        throws SQLException, IOException
         {
+        int jdbcType = jdbcTypes[type];
+        String method = "setObject(" + className + ")";
+
             s.execute("DELETE FROM PM.TYPE_AS");
 
             SQLException sqleResult = null;
             boolean worked;
             try {
-                // setObject(" + className + ") as batch
+            // Set the parameter value, either with or without explicit type
+            if (withTypeFlag) {
+                psi.setObject(1, value, jdbcType);
+            } else {
                 psi.setObject(1, value);
+            }
+
+            // Execute the statement, either single execution or batch
+            if (batchExecution) {
                 psi.addBatch();
                 psi.executeBatch();
-                getValidValue(psq, jdbcTypes[type], "setObject(" + className
-                        + ")");
+            } else {
+                psi.executeUpdate();
+            }
 
+            // Check if we got a valid value back
+            getValidValue(psq, jdbcType, method);
                 worked = true;
-
             } catch (SQLException sqle) {
                 sqleResult = sqle;
                 worked = false;
-            } catch (Throwable t) {
-                fail("FAIL " + t.getMessage());
-                return;
             }
+
+        // Check if the we got the correct response
             judge_setObject(worked, sqleResult, b5o, type);
         }
-    }
 
     /**
      * Passes Java null to the setObject-call, expecting the driver to set the
diff --git a/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java b/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java
index 5660b15d..12c7b2e5 100644
--- a/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java
+++ b/db/derby/code/branches/10.7/java/testing/org/apache/derbyTesting/functionTests/tests/lang/BooleanValuesTest.java
@@ -1655,6 +1655,101 @@ private void minion_4889( Connection conn, int value, boolean expectedBooleanRes
 
     }
 
+    /**
+     * Verify fix for DERBY-4964 - failure to convert string to boolean with
+     * the client driver.
+     */
+    public void test_4964() throws SQLException {
+        PreparedStatement ps = prepareStatement("values cast(? as boolean)");
+
+        // These should work
+        test_4964_minion(ps, null, null);
+        test_4964_minion(ps, "unknown", null);
+        test_4964_minion(ps, "UNKNOWN", null);
+        test_4964_minion(ps, "unKnoWn", null);
+        test_4964_minion(ps, "  unknown  ", null);
+        test_4964_minion(ps, "true", Boolean.TRUE);
+        test_4964_minion(ps, "TRUE", Boolean.TRUE);
+        test_4964_minion(ps, "TrUe", Boolean.TRUE);
+        test_4964_minion(ps, "  true  ", Boolean.TRUE);
+        test_4964_minion(ps, "false", Boolean.FALSE);
+        test_4964_minion(ps, "FALSE", Boolean.FALSE);
+        test_4964_minion(ps, "FaLsE", Boolean.FALSE);
+        test_4964_minion(ps, "FaLsE", Boolean.FALSE);
+        test_4964_minion(ps, "  false  ", Boolean.FALSE);
+
+        // These should fail
+        test_4964_minion(ps, "0", BAD_CAST);
+        test_4964_minion(ps, "1", BAD_CAST);
+        test_4964_minion(ps, "2", BAD_CAST);
+        test_4964_minion(ps, "null", BAD_CAST);
+        test_4964_minion(ps, "true true", BAD_CAST);
+        test_4964_minion(ps, "false false", BAD_CAST);
+    }
+
+    /**
+     * Set a boolean parameter using a string value and verify that we get
+     * the expected result.
+     *
+     * @param ps a prepared statement that takes a boolean parameter
+     * @param input input string for the parameter
+     * @param expectedValue the expected result; either the expected Boolean return
+     * value if the operation is expected to succeed, or the SQLState of the
+     * exception if it is expected to fail
+     */
+    private void test_4964_minion(
+            PreparedStatement ps, String input, Object expectedValue)
+        throws SQLException
+    {
+        // If the expected value is a string, it denotes the SQLState of an
+        // expected failure
+        boolean shouldFail = expectedValue instanceof String;
+
+        Object[][] rows = { { expectedValue } };
+
+        // test setString(int, String)
+        try {
+            ps.setString(1, input);
+            JDBC.assertFullResultSet(ps.executeQuery(), rows, false);
+            assertFalse(shouldFail);
+        } catch (SQLException sqle) {
+            if (shouldFail) {
+                assertSQLState((String) expectedValue, sqle);
+            } else {
+                throw sqle;
+            }
+        }
+
+        // test setObject(int, Object)
+        try {
+            ps.setObject(1, input);
+            JDBC.assertFullResultSet(ps.executeQuery(), rows, false);
+            assertFalse(shouldFail);
+        } catch (SQLException sqle) {
+            if (shouldFail) {
+                assertSQLState((String) expectedValue, sqle);
+            } else {
+                throw sqle;
+            }
+        }
+
+        // test setObject(int, Object, int) with various target types
+        int[] types = { Types.BIT, Types.BOOLEAN, Types.CHAR, Types.VARCHAR };
+        for (int i = 0; i < types.length; i++) {
+            try {
+                ps.setObject(1, input, types[i]);
+                JDBC.assertFullResultSet(ps.executeQuery(), rows, false);
+                assertFalse(shouldFail);
+            } catch (SQLException sqle) {
+                if (shouldFail) {
+                    assertSQLState((String) expectedValue, sqle);
+                } else {
+                    throw sqle;
+                }
+            }
+        }
+    }
+
     ///////////////////////////////////////////////////////////////////////////////////
     //
     // SQL ROUTINES
