diff --git a/lucene/dev/branches/branch_3x/lucene/core/src/java/org/apache/lucene/index/DocInverterPerField.java b/lucene/dev/branches/branch_3x/lucene/core/src/java/org/apache/lucene/index/DocInverterPerField.java
index 9418796a..9eb5399e 100644
--- a/lucene/dev/branches/branch_3x/lucene/core/src/java/org/apache/lucene/index/DocInverterPerField.java
+++ b/lucene/dev/branches/branch_3x/lucene/core/src/java/org/apache/lucene/index/DocInverterPerField.java
@@ -79,6 +79,12 @@ public void processFields(final Fieldable[] fields,
       // tokenized.
       if (field.isIndexed() && doInvert) {
         
+        final float boost = field.getBoost();
+        // if the field omits norms, the boost cannot be indexed.
+        if (field.getOmitNorms() && boost != 1.0f) {
+          throw new UnsupportedOperationException("You cannot set an index-time boost: norms are omitted for field '" + field.name() + "'");
+        }
+        
         if (i > 0)
           fieldState.position += docState.analyzer == null ? 0 : docState.analyzer.getPositionIncrementGap(fieldInfo.name);
 
@@ -194,7 +200,7 @@ public void processFields(final Fieldable[] fields,
         }
 
         fieldState.offset += docState.analyzer == null ? 0 : docState.analyzer.getOffsetGap(field);
-        fieldState.boost *= field.getBoost();
+        fieldState.boost *= boost;
       }
 
       // LUCENE-2387: don't hang onto the field, so GC can
diff --git a/lucene/dev/branches/branch_3x/lucene/core/src/test/org/apache/lucene/document/TestDocument.java b/lucene/dev/branches/branch_3x/lucene/core/src/test/org/apache/lucene/document/TestDocument.java
index a89415b8..27a840f6 100644
--- a/lucene/dev/branches/branch_3x/lucene/core/src/test/org/apache/lucene/document/TestDocument.java
+++ b/lucene/dev/branches/branch_3x/lucene/core/src/test/org/apache/lucene/document/TestDocument.java
@@ -1,6 +1,9 @@
 package org.apache.lucene.document;
 
+import org.apache.lucene.analysis.MockAnalyzer;
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.IndexWriterConfig;
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.index.Term;
 import org.apache.lucene.search.IndexSearcher;
@@ -279,4 +282,33 @@ public void testFieldSetValueChangeBinary() {
       // expected
     }
   }
+  
+  public void testBoost() throws Exception {
+    Directory dir = newDirectory();
+    IndexWriterConfig iwc = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));
+    iwc.setMergePolicy(newLogMergePolicy());
+    IndexWriter iw = new IndexWriter(dir, iwc);
+    Document doc = new Document();
+    doc.add(new Field("field1", "sometext", Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));
+    doc.add(new Field("field2", "sometext", Field.Store.NO, Field.Index.ANALYZED));
+    doc.add(new Field("foo", "bar", Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS));
+    iw.addDocument(doc); // add an 'ok' document
+    try {
+      doc = new Document();
+      // try to boost with norms omitted
+      Field field = new Field("foo", "baz", Field.Store.NO, Field.Index.NOT_ANALYZED_NO_NORMS);
+      field.setBoost(5.0f);
+      doc.add(field);
+      iw.addDocument(doc);
+      fail("didn't get any exception, boost silently discarded");
+    } catch (UnsupportedOperationException expected) {
+      // expected
+    }
+    IndexReader ir = IndexReader.open(iw, false);
+    assertEquals(1, ir.numDocs());
+    assertEquals("sometext", ir.document(0).get("field1"));
+    ir.close();
+    iw.close();
+    dir.close();
+  }
 }
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/DocumentBuilder.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/DocumentBuilder.java
index ae6ce55e..caa169e6 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/DocumentBuilder.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/update/DocumentBuilder.java
@@ -248,6 +248,11 @@ public static Document toDocument( SolrInputDocument doc, IndexSchema schema )
               sfield.getName() + ": " +field.getValue() );
       }
       
+      if (sfield != null && sfield.omitNorms() && boost != 1.0F) {
+        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,
+            "ERROR: "+getID(doc, schema)+"cannot set an index-time boost, norms are omitted for field " + 
+            sfield.getName() + ": " +field.getValue() );
+      }
 
       // load each field value
       boolean hasField = false;
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/XsltUpdateRequestHandlerTest.java b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/XsltUpdateRequestHandlerTest.java
index 86fafad0..4ee9e191 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/XsltUpdateRequestHandlerTest.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/handler/XsltUpdateRequestHandlerTest.java
@@ -57,7 +57,7 @@ public void testUpdate() throws Exception
     String xml = 
       "<random>" +
       " <document>" +
-      "  <node name=\"id\" enhance=\"2.2\" value=\"12345\"/>" +
+      "  <node name=\"id\" value=\"12345\"/>" +
       "  <node name=\"name\" value=\"kitten\"/>" +
       "  <node name=\"text\" enhance=\"3\" value=\"some other day\"/>" +
       "  <node name=\"title\" enhance=\"4\" value=\"A story\"/>" +
