diff --git a/lucene/dev/trunk/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java b/lucene/dev/trunk/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
index 5522709d..3c3bbffd 100644
--- a/lucene/dev/trunk/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
+++ b/lucene/dev/trunk/lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java
@@ -974,26 +974,28 @@ public TermState termState() throws IOException {
       private ArrayIntList positions;
       private boolean hasNext;
       private Bits liveDocs;
+      private int doc = -1;
 
       public DocsEnum reset(Bits liveDocs, ArrayIntList positions) {
         this.liveDocs = liveDocs;
         this.positions = positions;
         hasNext = true;
+        doc = -1;
         return this;
       }
 
       @Override
       public int docID() {
-        return 0;
+        return doc;
       }
 
       @Override
       public int nextDoc() {
         if (hasNext && (liveDocs == null || liveDocs.get(0))) {
           hasNext = false;
-          return 0;
+          return doc = 0;
         } else {
-          return NO_MORE_DOCS;
+          return doc = NO_MORE_DOCS;
         }
       }
 
@@ -1013,27 +1015,29 @@ public int freq() {
       private int posUpto;
       private boolean hasNext;
       private Bits liveDocs;
+      private int doc = -1;
 
       public DocsAndPositionsEnum reset(Bits liveDocs, ArrayIntList positions) {
         this.liveDocs = liveDocs;
         this.positions = positions;
         posUpto = 0;
         hasNext = true;
+        doc = -1;
         return this;
       }
 
       @Override
       public int docID() {
-        return 0;
+        return doc;
       }
 
       @Override
       public int nextDoc() {
         if (hasNext && (liveDocs == null || liveDocs.get(0))) {
           hasNext = false;
-          return 0;
+          return doc = 0;
         } else {
-          return NO_MORE_DOCS;
+          return doc = NO_MORE_DOCS;
         }
       }
 
diff --git a/lucene/dev/trunk/lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java b/lucene/dev/trunk/lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
index 068b84fb..9921763e 100644
--- a/lucene/dev/trunk/lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
+++ b/lucene/dev/trunk/lucene/contrib/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest.java
@@ -32,14 +32,19 @@
 import org.apache.lucene.document.Document;
 import org.apache.lucene.document.Field;
 import org.apache.lucene.document.TextField;
+import org.apache.lucene.index.DocsAndPositionsEnum;
+import org.apache.lucene.index.DocsEnum;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.IndexWriter;
 import org.apache.lucene.index.IndexWriterConfig;
+import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.index.codecs.lucene40.Lucene40PostingsFormat;
 import org.apache.lucene.queryparser.classic.QueryParser;
+import org.apache.lucene.search.DocIdSetIterator;
 import org.apache.lucene.search.IndexSearcher;
 import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.store.Directory;
+import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util._TestUtil;
 
 /**
@@ -177,4 +182,44 @@ private String randomTerm() {
       return _TestUtil.randomUnicodeString(random);
     }
   }
+  
+  public void testDocsEnumStart() throws Exception {
+    Analyzer analyzer = new MockAnalyzer(random);
+    MemoryIndex memory = new MemoryIndex();
+    memory.addField("foo", "bar", analyzer);
+    IndexReader reader = memory.createSearcher().getIndexReader();
+    DocsEnum disi = reader.termDocsEnum(null, "foo", new BytesRef("bar"));
+    int docid = disi.docID();
+    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);
+    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
+    
+    // now reuse and check again
+    TermsEnum te = reader.terms("foo").iterator(null);
+    assertTrue(te.seekExact(new BytesRef("bar"), true));
+    disi = te.docs(null, disi);
+    docid = disi.docID();
+    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);
+    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
+    reader.close();
+  }
+  
+  public void testDocsAndPositionsEnumStart() throws Exception {
+    Analyzer analyzer = new MockAnalyzer(random);
+    MemoryIndex memory = new MemoryIndex();
+    memory.addField("foo", "bar", analyzer);
+    IndexReader reader = memory.createSearcher().getIndexReader();
+    DocsAndPositionsEnum disi = reader.termPositionsEnum(null, "foo", new BytesRef("bar"));
+    int docid = disi.docID();
+    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);
+    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
+    
+    // now reuse and check again
+    TermsEnum te = reader.terms("foo").iterator(null);
+    assertTrue(te.seekExact(new BytesRef("bar"), true));
+    disi = te.docsAndPositions(null, disi);
+    docid = disi.docID();
+    assertTrue(docid == -1 || docid == DocIdSetIterator.NO_MORE_DOCS);
+    assertTrue(disi.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
+    reader.close();
+  }
 }
