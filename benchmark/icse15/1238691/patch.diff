diff --git a/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/weaving/impl/WrappingTransformer.java b/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/weaving/impl/WrappingTransformer.java
index 8d07e109..d4caad25 100644
--- a/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/weaving/impl/WrappingTransformer.java
+++ b/aries/trunk/jpa/jpa-container/src/main/java/org/apache/aries/jpa/container/weaving/impl/WrappingTransformer.java
@@ -51,17 +51,16 @@ public WrappingTransformer(ClassTransformer delegate,
     
     Object packages = persistenceProvider.getProperty("org.apache.aries.jpa.container.weaving.packages");
     
+    if(packages instanceof String[]) {
+      for(String s : (String[]) packages) {
+        packageImportsToAdd.add(s);
+      }
+    } else {
     Bundle provider = persistenceProvider.getBundle();
     String suffix = ";" + Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE + "=" +
     provider.getSymbolicName() + ";" + Constants.BUNDLE_VERSION_ATTRIBUTE 
     + "=" + provider.getVersion();
     
-    if(packages instanceof String[]) {
-      for(String s : (String[]) packages) {
-        if (s.contains(Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE)) packageImportsToAdd.add(s);
-        else packageImportsToAdd.add(s + suffix);
-      }
-    } else {
       BundleRevision br = provider.adapt(BundleWiring.class).getRevision();
       for(BundleCapability bc : br.getDeclaredCapabilities(BundleRevision.PACKAGE_NAMESPACE)) {
         packageImportsToAdd.add(bc.getAttributes().get(BundleRevision.PACKAGE_NAMESPACE) + suffix);
diff --git a/aries/trunk/jpa/jpa-container/src/test/java/org/apache/aries/jpa/container/weaving/JPAWeavingHookTest.java b/aries/trunk/jpa/jpa-container/src/test/java/org/apache/aries/jpa/container/weaving/JPAWeavingHookTest.java
index f976873b..208236a5 100644
--- a/aries/trunk/jpa/jpa-container/src/test/java/org/apache/aries/jpa/container/weaving/JPAWeavingHookTest.java
+++ b/aries/trunk/jpa/jpa-container/src/test/java/org/apache/aries/jpa/container/weaving/JPAWeavingHookTest.java
@@ -35,6 +35,7 @@
 import org.apache.aries.mocks.BundleMock;
 import org.apache.aries.unittest.mocks.MethodCall;
 import org.apache.aries.unittest.mocks.Skeleton;
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.osgi.framework.Bundle;
@@ -58,6 +59,12 @@ public void setup() {
     ct1a = Skeleton.newMock(ClassTransformer.class);
   }
   
+  @After
+  public void teardown() {
+    Skeleton.getSkeleton(b1).clearMethodCalls();
+    Skeleton.getSkeleton(ct1a).clearMethodCalls();
+  }
+  
   @Test
   public void testFactory() {
     assertSame(JPAWeavingHook.class, 
@@ -67,15 +74,13 @@ public void testFactory() {
         TransformerRegistryFactory.getTransformerRegistry().getClass());
   }
   
-  @Test
-  public void testAddTransformer() {
-     
-     Bundle b2 = Skeleton.newMock(new BundleMock("bundle2", null), Bundle.class);
-     
-     ClassTransformer ct1b = Skeleton.newMock(ClassTransformer.class);
      
+  private ServiceReference basicProviderSetup(String[] weavingPackages) {
      ServiceReference provider1 = Skeleton.newMock(ServiceReference.class);
      
+    Skeleton.getSkeleton(provider1).setReturnValue(new MethodCall(ServiceReference.class, 
+        "getProperty", "org.apache.aries.jpa.container.weaving.packages"), weavingPackages);
+    
      Skeleton.getSkeleton(provider1).setReturnValue(new MethodCall(Bundle.class,
          "adapt", BundleWiring.class), Skeleton.getSkeleton(provider1).createMock(BundleWiring.class));
      
@@ -88,17 +93,19 @@ public void testAddTransformer() {
      Skeleton.getSkeleton(provider1).setReturnValue(new MethodCall(BundleRevision.class, 
          "getDeclaredCapabilities", BundleRevision.PACKAGE_NAMESPACE), 
          Collections.singletonList(Skeleton.getSkeleton(provider1).createMock(BundleCapability.class)));
-     
      Map m = new HashMap();
      m.put(BundleRevision.PACKAGE_NAMESPACE, "foundPackage");
      
      Skeleton.getSkeleton(provider1).setReturnValue(new MethodCall(BundleCapability.class,
          "getAttributes"), m);
+    return provider1;
+  }
      
-     
+  @Test
+  public void testNotWoven() {
+    ServiceReference provider1 = basicProviderSetup(null);
      JPAWeavingHook tr = (JPAWeavingHook) TransformerRegistryFactory.getTransformerRegistry();
      
-     
      //Add a transforme and check it gets called to weave
      tr.addTransformer(b1, ct1a, provider1);
      
@@ -114,12 +121,22 @@ public void testAddTransformer() {
          this.getClass().getClassLoader(), "test1", this.getClass(), pd, bytes));
      
      assertNotCalled(wc);
+  }
      
-     Skeleton.getSkeleton(ct1a).clearMethodCalls();
-     
-     //Check it isn't called for the wrong bundle
      
-     wc = getWovenClass(b2, "test2", bytes, this.getClass().getClassLoader(),
+  @Test
+  public void testWeavingWrongBundle() {
+    Bundle b2 = Skeleton.newMock(new BundleMock("bundle2", null), Bundle.class);
+    ServiceReference provider1 = basicProviderSetup(null);
+    JPAWeavingHook tr = (JPAWeavingHook) TransformerRegistryFactory.getTransformerRegistry();
+     
+    //Add a transforme and check it gets called to weave
+    tr.addTransformer(b1, ct1a, provider1);
+	     
+    ProtectionDomain pd = new ProtectionDomain(null, null);
+    byte[] bytes = new byte[] {(byte) 0xAB, (byte)0xCD};
+
+    WovenClass wc = getWovenClass(b2, "test2", bytes, this.getClass().getClassLoader(),
          this.getClass(), pd);
      
      tr.weave(wc);
@@ -128,19 +145,56 @@ public void testAddTransformer() {
      
      Skeleton.getSkeleton(ct1a).assertNotCalled(new MethodCall(ClassTransformer.class, "transform",
          ClassLoader.class, String.class, Class.class, ProtectionDomain.class, byte[].class));
+  }
      
-     //Check a second weaver isn't called for a when the first gives a result
-     
+  @Test
+  public void testBasicWeaving() {
+    ServiceReference provider1 = basicProviderSetup(null);
+    JPAWeavingHook tr = (JPAWeavingHook) TransformerRegistryFactory.getTransformerRegistry();
+	     
+    //Add a transforme and check it gets called to weave
+    tr.addTransformer(b1, ct1a, provider1);
+
+    ProtectionDomain pd = new ProtectionDomain(null, null);
+    byte[] bytes = new byte[] {(byte) 0xBE, (byte)0xAD};
+	     
+    byte[] returnedBytes = new byte[] {(byte) 0xBA, (byte)0xDE};
+	     
+    Skeleton.getSkeleton(ct1a).setReturnValue(new MethodCall(ClassTransformer.class, "transform",
+        this.getClass().getClassLoader(), "test3", this.getClass(), pd, bytes), returnedBytes);
+	     
+    WovenClass wc = getWovenClass(b1, "test3", bytes, this.getClass().getClassLoader(),
+        this.getClass(), pd);
+	     
+    tr.weave(wc);
+	     
+    Skeleton.getSkeleton(ct1a).assertCalled(new MethodCall(ClassTransformer.class, "transform",
+        this.getClass().getClassLoader(), "test3", this.getClass(), pd, bytes));
+	     
+    assertCalled(wc, returnedBytes, b1, "foundPackage;" + Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE + "=bundle1;" + 
+        Constants.BUNDLE_VERSION_ATTRIBUTE + "=0.0.0");
+  }
+  
+  @Test
+  public void testMultipleTransformers() {
+    ClassTransformer ct1b = Skeleton.newMock(ClassTransformer.class);
+    ServiceReference provider1 = basicProviderSetup(null);
+    JPAWeavingHook tr = (JPAWeavingHook) TransformerRegistryFactory.getTransformerRegistry();
+     
+    //Add a transforme and check it gets called to weave
+    tr.addTransformer(b1, ct1a, provider1);
+    //Check a second weaver isn't called for a when the first gives a result
      tr.addTransformer(b1, ct1b, provider1);
      
-     bytes = new byte[] {(byte) 0xBE, (byte)0xAD};
+    ProtectionDomain pd = new ProtectionDomain(null, null);
+    byte[] bytes = new byte[] {(byte) 0xBE, (byte)0xAD};
      
      byte[] returnedBytes = new byte[] {(byte) 0xBA, (byte)0xDE};
      
      Skeleton.getSkeleton(ct1a).setReturnValue(new MethodCall(ClassTransformer.class, "transform",
          this.getClass().getClassLoader(), "test3", this.getClass(), pd, bytes), returnedBytes);
      
-     wc = getWovenClass(b1, "test3", bytes, this.getClass().getClassLoader(),
+    WovenClass wc = getWovenClass(b1, "test3", bytes, this.getClass().getClassLoader(),
          this.getClass(), pd);
      
      tr.weave(wc);
@@ -151,16 +205,24 @@ public void testAddTransformer() {
      Skeleton.getSkeleton(ct1b).assertNotCalled(new MethodCall(ClassTransformer.class, "transform",
          ClassLoader.class, String.class, Class.class, ProtectionDomain.class, byte[].class));
      
-     assertCalled(wc, returnedBytes, "foundPackage", b1);
-     
-     Skeleton.getSkeleton(ct1a).clearMethodCalls();
+    assertCalled(wc, returnedBytes, b1, "foundPackage;" + Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE + "=bundle1;" + 
+        Constants.BUNDLE_VERSION_ATTRIBUTE + "=0.0.0");
+  }
      
+  @Test
+  public void testMultipleTransformers2() {
+    ClassTransformer ct1b = Skeleton.newMock(ClassTransformer.class);
+    ServiceReference provider1 = basicProviderSetup(null);
+    JPAWeavingHook tr = (JPAWeavingHook) TransformerRegistryFactory.getTransformerRegistry();
      
-     //Check both weavers are called for a when the first gives no result
+    //Add a two transformers that will return null
+    tr.addTransformer(b1, ct1a, provider1);
+    tr.addTransformer(b1, ct1b, provider1);
      
-     bytes = new byte[] {(byte) 0xBE, (byte)0xAD};
+    ProtectionDomain pd = new ProtectionDomain(null, null);
+    byte[] bytes = new byte[] {(byte) 0xBE, (byte)0xAD};
      
-     wc = getWovenClass(b1, "test4", bytes, this.getClass().getClassLoader(),
+    WovenClass wc = getWovenClass(b1, "test4", bytes, this.getClass().getClassLoader(),
          this.getClass(), pd);
      
      tr.weave(wc);
@@ -172,15 +234,25 @@ public void testAddTransformer() {
          this.getClass().getClassLoader(), "test4", this.getClass(), pd, bytes));
      
      assertNotCalled(wc);
+  }
      
-     Skeleton.getSkeleton(ct1a).clearMethodCalls();
-     Skeleton.getSkeleton(ct1b).clearMethodCalls();
      
-     //Check we can remove ct1a
+  @Test
+  public void testMultipleTransformers3() {
+    ClassTransformer ct1b = Skeleton.newMock(ClassTransformer.class);
+    ServiceReference provider1 = basicProviderSetup(null);
+    JPAWeavingHook tr = (JPAWeavingHook) TransformerRegistryFactory.getTransformerRegistry();
+	    
+    //Add a two transformers that will return null
+    tr.addTransformer(b1, ct1a, provider1);
+    tr.addTransformer(b1, ct1b, provider1);
      
      tr.removeTransformer(b1, ct1a);
      
-     wc = getWovenClass(b1, "test5", bytes, this.getClass().getClassLoader(),
+    ProtectionDomain pd = new ProtectionDomain(null, null);
+    byte[] bytes = new byte[] {(byte) 0xBE, (byte)0xAD};
+	    
+    WovenClass wc = getWovenClass(b1, "test5", bytes, this.getClass().getClassLoader(),
          this.getClass(), pd);
      
      tr.weave(wc);
@@ -195,20 +267,50 @@ public void testAddTransformer() {
      
   }
 
+  @Test
+  public void testWeavingPackages() {
+    ClassTransformer ct1b = Skeleton.newMock(ClassTransformer.class);
+    ServiceReference provider1 = basicProviderSetup(new String[] {"specifiedPackage1", "specifiedPackage2;attribute=value"});
+    JPAWeavingHook tr = (JPAWeavingHook) TransformerRegistryFactory.getTransformerRegistry();
+	     
+    //Add a transforme and check it gets called to weave
+    tr.addTransformer(b1, ct1a, provider1);
+    //Check a second weaver isn't called for a when the first gives a result
+    tr.addTransformer(b1, ct1b, provider1);
+
+    ProtectionDomain pd = new ProtectionDomain(null, null);
+    byte[] bytes = new byte[] {(byte) 0xBE, (byte)0xAD};
+	     
+    byte[] returnedBytes = new byte[] {(byte) 0xBA, (byte)0xDE};
+	     
+    Skeleton.getSkeleton(ct1a).setReturnValue(new MethodCall(ClassTransformer.class, "transform",
+        this.getClass().getClassLoader(), "test3", this.getClass(), pd, bytes), returnedBytes);
+	     
+    WovenClass wc = getWovenClass(b1, "test3", bytes, this.getClass().getClassLoader(),
+        this.getClass(), pd);
+	     
+    tr.weave(wc);
+  
+    Skeleton.getSkeleton(ct1a).assertCalled(new MethodCall(ClassTransformer.class, "transform",
+        this.getClass().getClassLoader(), "test3", this.getClass(), pd, bytes));
+	     
+    Skeleton.getSkeleton(ct1b).assertNotCalled(new MethodCall(ClassTransformer.class, "transform",
+        ClassLoader.class, String.class, Class.class, ProtectionDomain.class, byte[].class));
+	     
+    assertCalled(wc, returnedBytes, b1, "specifiedPackage1", "specifiedPackage2;attribute=value");
+  }
   
-  private void assertCalled(WovenClass wc, byte[] returnedBytes, String string,
-      Bundle b) {
+  private void assertCalled(WovenClass wc, byte[] returnedBytes, Bundle b,
+      String... string) {
     Skeleton.getSkeleton(wc).assertCalledExactNumberOfTimes(new MethodCall(WovenClass.class, 
         "setBytes", byte[].class), 1);
     Skeleton.getSkeleton(wc).assertCalled(new MethodCall(WovenClass.class, 
         "setBytes", returnedBytes));
        
-    String importString = string + ";" + Constants.BUNDLE_SYMBOLICNAME_ATTRIBUTE + "=" +
-    b.getSymbolicName() + ";" + Constants.BUNDLE_VERSION_ATTRIBUTE 
-    + "=" + b.getVersion();
-    
-    assertSame(1, wc.getDynamicImports().size());
-    assertTrue(wc.getDynamicImports().contains(importString));
+    assertSame(string.length, wc.getDynamicImports().size());
+    for(String s : string) {
+      assertTrue(wc.getDynamicImports().contains(s));
+    }
   }
 
   private void assertNotCalled(WovenClass wc) {
