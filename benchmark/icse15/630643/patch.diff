diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java
index 26b2d70e..cbb9815a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/InsertNode.java
@@ -422,7 +422,7 @@ public void bindStatement() throws StandardException
 		if (! resultColumnList.columnTypesAndLengthsMatch(
 												resultSet.getResultColumns()))
 		{
-			resultSet = resultSet.genNormalizeResultSetNode(resultSet, false);
+			resultSet = resultSet.genNormalizeResultSetNode(false);
 			resultColumnList.copyTypesAndLengthsToSource(resultSet.getResultColumns());
 		}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
index cc6b638d..5a678440 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultSetNode.java
@@ -821,12 +821,10 @@ public boolean flattenableInFromSubquery(FromList fromList)
 	ResultSetNode genProjectRestrictForReordering()
 				throws StandardException
 	{
-		ResultColumnList	prRCList;
-
 		/* We get a shallow copy of the ResultColumnList and its 
 		 * ResultColumns.  (Copy maintains ResultColumn.expression for now.)
 		 */
-		prRCList = resultColumns;
+        ResultColumnList prRCList = resultColumns;
 		resultColumns = resultColumns.copyListAndObjects();
 
 		/* Replace ResultColumn.expression with new VirtualColumnNodes
@@ -1344,12 +1342,10 @@ void notCursorTargetTable()
 	public ResultSetNode genProjectRestrict()
 				throws StandardException
 	{
-		ResultColumnList	prRCList;
-
 		/* We get a shallow copy of the ResultColumnList and its 
 		 * ResultColumns.  (Copy maintains ResultColumn.expression for now.)
 		 */
-		prRCList = resultColumns;
+        ResultColumnList prRCList = resultColumns;
 		resultColumns = resultColumns.copyListAndObjects();
 
 		/* Replace ResultColumn.expression with new VirtualColumnNodes
@@ -1401,7 +1397,7 @@ protected ResultSetNode genProjectRestrict(int numTables)
 	}
 
 	/** 
-	 * Put a NormalizeResultSetNode on top of the specified ResultSetNode.
+	 * Put a NormalizeResultSetNode on top of this ResultSetNode.
 	 * ColumnReferences must continue to point to the same ResultColumn, so
 	 * that ResultColumn must percolate up to the new PRN.  However,
 	 * that ResultColumn will point to a new expression, a VirtualColumnNode, 
@@ -1418,7 +1414,6 @@ protected ResultSetNode genProjectRestrict(int numTables)
 	 * sort has to agree with what the sort expects.
 	 * (insert into t1 (smallintcol) values 1 union all values 2;
 	 *
-	 * @param normalizeChild	Child result set for new NRSN.
 	 * @param forUpdate			If the normalize result set is being used as a
 	 * child for an update statement, then this is true. 
 	 *
@@ -1428,18 +1423,14 @@ protected ResultSetNode genProjectRestrict(int numTables)
 	 * @see NormalizeResultSetNode#init
 	 */
 
-	public NormalizeResultSetNode 
-		genNormalizeResultSetNode(ResultSetNode	normalizeChild, 
-								  boolean forUpdate)
+	NormalizeResultSetNode 
+		genNormalizeResultSetNode(boolean forUpdate)
 				throws StandardException
 	{
-		NormalizeResultSetNode	nrsn;
-		ResultColumnList		prRCList;
-
 		/* We get a shallow copy of the ResultColumnList and its 
 		 * ResultColumns.  (Copy maintains ResultColumn.expression for now.)
 		 */
-		prRCList = resultColumns;
+        ResultColumnList prRCList = resultColumns;
 		resultColumns = resultColumns.copyListAndObjects();
 
 		// Remove any columns that were generated.
@@ -1453,16 +1444,17 @@ protected ResultSetNode genProjectRestrict(int numTables)
 
 		
 		/* Finally, we create the new NormalizeResultSetNode */
-		nrsn = (NormalizeResultSetNode) getNodeFactory().getNode(
+        NormalizeResultSetNode nrsn =
+            (NormalizeResultSetNode) getNodeFactory().getNode(
 								C_NodeTypes.NORMALIZE_RESULT_SET_NODE,
-								normalizeChild,
+								this,
 								prRCList,
 								null, new Boolean(forUpdate),
 								getContextManager());
 		// Propagate the referenced table map if it's already been created
-		if (normalizeChild.getReferencedTableMap() != null)
+		if (getReferencedTableMap() != null)
 		{
-			nrsn.setReferencedTableMap((JBitSet) normalizeChild.getReferencedTableMap().clone());
+			nrsn.setReferencedTableMap((JBitSet) getReferencedTableMap().clone());
 		}
 		return nrsn;
 	}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnionNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnionNode.java
index f137bec7..fd3c5b91 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnionNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnionNode.java
@@ -410,7 +410,7 @@ private ResultSetNode addNewNodes()
 			 */
 			if (! columnTypesAndLengthsMatch())
 			{
-				treeTop = genNormalizeResultSetNode(this, false);	
+				treeTop = genNormalizeResultSetNode(false);	
 			}
 
 			treeTop = (ResultSetNode) getNodeFactory().getNode(
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java
index 93c785ad..6dfc86ce 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UpdateNode.java
@@ -548,7 +548,7 @@ else if (targetTable instanceof FromVTI)
 		 */
 		if (! resultColumnList.columnTypesAndLengthsMatch())
  		{
-			resultSet = resultSet.genNormalizeResultSetNode(resultSet, true);
+			resultSet = resultSet.genNormalizeResultSetNode(true);
 			resultColumnList.copyTypesAndLengthsToSource(resultSet.getResultColumns());
 								
  			if (hasCheckConstraints(dataDictionary, targetTableDescriptor))
