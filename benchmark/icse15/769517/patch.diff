diff --git a/incubator/cassandra/trunk/src/org/apache/cassandra/config/DatabaseDescriptor.java b/incubator/cassandra/trunk/src/org/apache/cassandra/config/DatabaseDescriptor.java
index f764f954..b31382e4 100644
--- a/incubator/cassandra/trunk/src/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/incubator/cassandra/trunk/src/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -125,7 +125,6 @@
         try
         {
             String file = System.getProperty("storage-config") + System.getProperty("file.separator") + "storage-conf.xml";
-            String os = System.getProperty("os.name");
             XMLUtils xmlUtils = new XMLUtils(file);
 
             /* Cluster Name */
diff --git a/incubator/cassandra/trunk/src/org/apache/cassandra/db/CommitLog.java b/incubator/cassandra/trunk/src/org/apache/cassandra/db/CommitLog.java
index 1483be02..380143e2 100644
--- a/incubator/cassandra/trunk/src/org/apache/cassandra/db/CommitLog.java
+++ b/incubator/cassandra/trunk/src/org/apache/cassandra/db/CommitLog.java
@@ -338,7 +338,6 @@ private void doRecovery(Stack<File> filesNeeded, byte[] header) throws IOExcepti
             IFileReader reader = SequenceFile.reader(file.getAbsolutePath());
             try
             {
-                Map<String, Row> rows = new HashMap<String, Row>();
                 reader.readDirect(header);
                 /* deserialize the commit log header */
                 bufIn.reset(header, 0, header.length);
diff --git a/incubator/cassandra/trunk/src/org/apache/cassandra/db/CommitLogEntry.java b/incubator/cassandra/trunk/src/org/apache/cassandra/db/CommitLogEntry.java
index 83ed291e..ba90dc99 100644
--- a/incubator/cassandra/trunk/src/org/apache/cassandra/db/CommitLogEntry.java
+++ b/incubator/cassandra/trunk/src/org/apache/cassandra/db/CommitLogEntry.java
@@ -18,10 +18,8 @@
 
 package org.apache.cassandra.db;
 
-import java.util.concurrent.atomic.AtomicInteger;
-import java.io.ByteArrayInputStream;
-import java.io.DataOutputStream;
 import java.io.DataInputStream;
+import java.io.DataOutputStream;
 import java.io.IOException;
 
 import org.apache.cassandra.io.ICompactSerializer;
@@ -36,7 +34,6 @@
  */
 class CommitLogEntry
 {    
-    private static AtomicInteger lsnGenerator_ = new AtomicInteger(0);
     private static ICompactSerializer<CommitLogEntry> serializer_;
     static
     {
diff --git a/incubator/cassandra/trunk/src/org/apache/cassandra/db/IdentityFilter.java b/incubator/cassandra/trunk/src/org/apache/cassandra/db/IdentityFilter.java
index 82089ba8..968c2d06 100644
--- a/incubator/cassandra/trunk/src/org/apache/cassandra/db/IdentityFilter.java
+++ b/incubator/cassandra/trunk/src/org/apache/cassandra/db/IdentityFilter.java
@@ -24,7 +24,7 @@ public ColumnFamily filter(String cfString, ColumnFamily columnFamily)
     	String[] values = RowMutation.getColumnAndColumnFamily(cfString);
     	if( columnFamily == null )
     		return columnFamily;
-		String cfName = columnFamily.name();
+
 		if (values.length == 2 && !columnFamily.isSuper())
 		{
 			Collection<IColumn> columns = columnFamily.getAllColumns();
diff --git a/incubator/cassandra/trunk/src/org/apache/cassandra/db/SystemTable.java b/incubator/cassandra/trunk/src/org/apache/cassandra/db/SystemTable.java
index 02b1703b..6d483e68 100644
--- a/incubator/cassandra/trunk/src/org/apache/cassandra/db/SystemTable.java
+++ b/incubator/cassandra/trunk/src/org/apache/cassandra/db/SystemTable.java
@@ -95,7 +95,6 @@ private String getFileName()
     */
     public Row get(String key) throws IOException
     {
-        String file = getFileName();
         DataOutputBuffer bufOut = new DataOutputBuffer();
         reader_.next(bufOut);
 
diff --git a/incubator/cassandra/trunk/src/org/apache/cassandra/db/Table.java b/incubator/cassandra/trunk/src/org/apache/cassandra/db/Table.java
index 40f88507..b63f0487 100644
--- a/incubator/cassandra/trunk/src/org/apache/cassandra/db/Table.java
+++ b/incubator/cassandra/trunk/src/org/apache/cassandra/db/Table.java
@@ -117,7 +117,7 @@ private static void load() throws IOException
                     bufIn.reset(bufOut.getData(), bufOut.getLength());
 
                     /* The key is the table name */
-                    String key = bufIn.readUTF();
+                    bufIn.readUTF();
                     /* read the size of the data we ignore this value */
                     bufIn.readInt();
                     tableMetadata_ = Table.TableMetadata.serializer().deserialize(bufIn);
diff --git a/incubator/cassandra/trunk/src/org/apache/cassandra/gms/Gossiper.java b/incubator/cassandra/trunk/src/org/apache/cassandra/gms/Gossiper.java
index ce3944f0..c2ccbc5c 100644
--- a/incubator/cassandra/trunk/src/org/apache/cassandra/gms/Gossiper.java
+++ b/incubator/cassandra/trunk/src/org/apache/cassandra/gms/Gossiper.java
@@ -117,8 +117,6 @@ public synchronized static Gossiper instance()
     private EndPoint localEndPoint_;
     private long aVeryLongTime_;
     private Random random_ = new Random();
-    /* index used previously */
-    private int prevIndex_ = 0;
     /* round robin index through live endpoint set */
     private int rrIndex_ = 0;
 
@@ -320,7 +318,6 @@ void makeRandomGossipDigest(List<GossipDigest> gDigests)
         int maxVersion = getMaxEndPointStateVersion(epState);
         gDigests.add( new GossipDigest(localEndPoint_, generation, maxVersion) );
 
-        int size = liveEndpoints_.size();
         List<EndPoint> endpoints = new ArrayList<EndPoint>( liveEndpoints_ );
         Collections.shuffle(endpoints, random_);
         for ( EndPoint liveEndPoint : endpoints )
diff --git a/incubator/cassandra/trunk/src/org/apache/cassandra/io/BufferedRandomAccessFile.java b/incubator/cassandra/trunk/src/org/apache/cassandra/io/BufferedRandomAccessFile.java
index f716311b..f8933ea2 100644
--- a/incubator/cassandra/trunk/src/org/apache/cassandra/io/BufferedRandomAccessFile.java
+++ b/incubator/cassandra/trunk/src/org/apache/cassandra/io/BufferedRandomAccessFile.java
@@ -18,11 +18,12 @@
 
 package org.apache.cassandra.io;
 
-import java.io.*;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.RandomAccessFile;
 import java.util.Arrays;
 
-import org.apache.log4j.Logger;
-
 /**
  * A <code>BufferedRandomAccessFile</code> is like a
  * <code>RandomAccessFile</code>, but it uses a private buffer so that most
@@ -38,7 +39,6 @@
 
 public final class BufferedRandomAccessFile extends RandomAccessFile
 {
-    private static final Logger logger_ = Logger.getLogger(BufferedRandomAccessFile.class);
     static final int LogBuffSz_ = 16; // 64K buffer
     public static final int BuffSz_ = (1 << LogBuffSz_);
     static final long BuffMask_ = ~(((long) BuffSz_) - 1L);
@@ -48,7 +48,6 @@
      * "Rd", "Wr", "RdClass", and "WrClass" interfaces.
      */
     private boolean dirty_; // true iff unflushed bytes exist
-    private boolean closed_; // true iff the file is closed
     private long curr_; // current position in file
     private long lo_, hi_; // bounds on characters in "buff"
     private byte[] buff_; // local buffer
@@ -145,7 +144,7 @@ public BufferedRandomAccessFile(String name, String mode, int size) throws FileN
     
     private void init(int size)
     {
-        this.dirty_ = this.closed_ = false;
+        this.dirty_ = false;
         this.lo_ = this.curr_ = this.hi_ = 0;
         this.buff_ = (size > BuffSz_) ? new byte[size] : new byte[BuffSz_];
         this.maxHi_ = (long) BuffSz_;
@@ -156,7 +155,6 @@ private void init(int size)
     public void close() throws IOException
     {
         this.flush();
-        this.closed_ = true;
         super.close();
     }
     
diff --git a/incubator/cassandra/trunk/src/org/apache/cassandra/io/IndexHelper.java b/incubator/cassandra/trunk/src/org/apache/cassandra/io/IndexHelper.java
index fadc15d8..1c7efaff 100644
--- a/incubator/cassandra/trunk/src/org/apache/cassandra/io/IndexHelper.java
+++ b/incubator/cassandra/trunk/src/org/apache/cassandra/io/IndexHelper.java
@@ -160,9 +160,6 @@ static int deserializeIndex(String cfName, DataInput in, List<ColumnIndexInfo> c
 		/* now deserialize the index list */
         DataInputBuffer indexIn = new DataInputBuffer();
         indexIn.reset(indexOut.getData(), indexOut.getLength());
-        String columnName;
-        int position;
-        int numCols;
         
         TypeInfo typeInfo = DatabaseDescriptor.getTypeInfo(cfName);
         if ( DatabaseDescriptor.getColumnFamilyType(cfName).equals("Super") || DatabaseDescriptor.isNameSortingEnabled(cfName) )
diff --git a/incubator/cassandra/trunk/src/org/apache/cassandra/loader/Loader.java b/incubator/cassandra/trunk/src/org/apache/cassandra/loader/Loader.java
index bd79ed52..b109a29f 100644
--- a/incubator/cassandra/trunk/src/org/apache/cassandra/loader/Loader.java
+++ b/incubator/cassandra/trunk/src/org/apache/cassandra/loader/Loader.java
@@ -316,9 +316,6 @@ void preLoad(File rootDirectory) throws Throwable
          * the SSTables and reset the load state in the StorageService. 
         */
         SSTable.delete(ssTables.get(0));
-//        File commitLogDirectory = new File( DatabaseDescriptor.getLogFileLocation() );
-//        FileUtils.delete(commitLogDirectory.listFiles());
-        storageService_.resetLoadState();
         logger_.info("Finished all the requisite clean up ...");
     }
     
diff --git a/incubator/cassandra/trunk/src/org/apache/cassandra/loader/PreLoad.java b/incubator/cassandra/trunk/src/org/apache/cassandra/loader/PreLoad.java
index c1c68335..4006954c 100644
--- a/incubator/cassandra/trunk/src/org/apache/cassandra/loader/PreLoad.java
+++ b/incubator/cassandra/trunk/src/org/apache/cassandra/loader/PreLoad.java
@@ -117,7 +117,6 @@ void run(String userFile) throws Throwable
          * the SSTables and reset the load state in the StorageService. 
         */
         SSTable.delete(ssTables.get(0));
-        storageService_.resetLoadState();
         logger_.info("Finished all the requisite clean up ...");
     }
 
diff --git a/incubator/cassandra/trunk/src/org/apache/cassandra/service/ReadRepairManager.java b/incubator/cassandra/trunk/src/org/apache/cassandra/service/ReadRepairManager.java
index e8491f0a..5f7e70ce 100644
--- a/incubator/cassandra/trunk/src/org/apache/cassandra/service/ReadRepairManager.java
+++ b/incubator/cassandra/trunk/src/org/apache/cassandra/service/ReadRepairManager.java
@@ -64,7 +64,6 @@
 	static class ReadRepairPerformer implements
 			ICacheExpungeHook<String, Message>
 	{
-		private static Logger logger_ = Logger.getLogger(ReadRepairPerformer.class);
 		/*
 		 * The hook fn which takes the end point and the row mutation that 
 		 * needs to be sent to the end point in order 
diff --git a/incubator/cassandra/trunk/src/org/apache/cassandra/service/StorageService.java b/incubator/cassandra/trunk/src/org/apache/cassandra/service/StorageService.java
index eab92ed9..1f49b9c2 100644
--- a/incubator/cassandra/trunk/src/org/apache/cassandra/service/StorageService.java
+++ b/incubator/cassandra/trunk/src/org/apache/cassandra/service/StorageService.java
@@ -188,14 +188,6 @@ public void doVerb(Message message)
         }
     }
 
-    private class ShutdownTimerTask extends TimerTask
-    {
-    	public void run()
-    	{
-    		StorageService.instance().shutdown();
-    	}
-    }
-
     /*
      * Factory method that gets an instance of the StorageService
      * class.
@@ -235,8 +227,6 @@ public static StorageService instance()
      *
      */
     private IEndPointSnitch endPointSnitch_;
-    /* Uptime of this node - we use this to determine if a bootstrap can be performed by this node */
-    private long uptime_ = 0L;
 
     /* This abstraction maintains the token/endpoint metadata information */
     private TokenMetadata tokenMetadata_ = new TokenMetadata();
@@ -247,11 +237,6 @@ public static StorageService instance()
      * for a clean exit.
     */
     private Set<IComponentShutdown> components_ = new HashSet<IComponentShutdown>();
-    /*
-     * This boolean indicates if we are in loading state. If we are then we do not want any
-     * distributed algorithms w.r.t change in token state to kick in.
-    */
-    private boolean isLoadState_ = false;
     /* Timer is used to disseminate load information */
     private Timer loadTimer_ = new Timer(false);
 
@@ -298,7 +283,6 @@ private void init()
     public StorageService()
     {
         init();
-        uptime_ = System.currentTimeMillis();        
         storageLoadBalancer_ = new StorageLoadBalancer(this);
         endPointSnitch_ = new EndPointSnitch();
         
@@ -768,7 +752,6 @@ public void relocate(String[] keys) throws IOException
     {
     	if ( keys.length > 0 )
     	{
-	        isLoadState_ = true;
             Token token = tokenMetadata_.getToken(StorageService.tcpAddr_);
 	        Map<Token, EndPoint> tokenToEndPointMap = tokenMetadata_.cloneTokenEndPointMap();
 	        Token[] tokens = tokenToEndPointMap.keySet().toArray(new Token[tokenToEndPointMap.keySet().size()]);
@@ -780,15 +763,6 @@ public void relocate(String[] keys) throws IOException
     	}
     }
 
-    /*
-     * This is used to indicate that this node is done
-     * with the loading of data.
-    */
-    public void resetLoadState()
-    {
-        isLoadState_ = false;
-    }
-    
     /**
      * This method takes a colon separated string of nodes that need
      * to be bootstrapped. It is also used to filter some source of 
diff --git a/incubator/cassandra/trunk/src/org/apache/cassandra/utils/FBUtilities.java b/incubator/cassandra/trunk/src/org/apache/cassandra/utils/FBUtilities.java
index f93ae316..ce67bd16 100644
--- a/incubator/cassandra/trunk/src/org/apache/cassandra/utils/FBUtilities.java
+++ b/incubator/cassandra/trunk/src/org/apache/cassandra/utils/FBUtilities.java
@@ -50,7 +50,6 @@
 {
 
     private static InetAddress localInetAddress_;
-    private static String host_;
 
     public static String getTimestamp()
     {
