diff --git a/incubator/aries/trunk/application/application-utils/src/main/java/org/apache/aries/application/utils/manifest/ManifestHeaderProcessor.java b/incubator/aries/trunk/application/application-utils/src/main/java/org/apache/aries/application/utils/manifest/ManifestHeaderProcessor.java
index c260b556..94ceaddb 100644
--- a/incubator/aries/trunk/application/application-utils/src/main/java/org/apache/aries/application/utils/manifest/ManifestHeaderProcessor.java
+++ b/incubator/aries/trunk/application/application-utils/src/main/java/org/apache/aries/application/utils/manifest/ManifestHeaderProcessor.java
@@ -33,6 +33,7 @@
 import org.apache.aries.application.impl.ContentImpl;
 import org.apache.aries.application.impl.VersionRangeImpl;
 import org.apache.aries.application.utils.internal.MessageUtil;
+import org.apache.aries.util.ManifestHeaderUtils;
 import org.osgi.framework.Constants;
 
 
@@ -187,47 +188,10 @@ public String toString(){
    */
   public static List<String> split(String value, String delimiter)
   {
-    List<String> result = new ArrayList<String>();
-    if (value != null) {
-      String[] packages = value.split(delimiter);
-      
-      for (int i = 0; i < packages.length; ) {
-        String tmp = packages[i++].trim();
-        // if there is a odd number of " in a string, we need to append
-        while (count(tmp, "\"") % 2 != 0) {
-          // check to see if we need to append the next package[i++]          
-            if (i<packages.length)
-              tmp = tmp + delimiter + packages[i++].trim();
-            else 
-              // oops. The double quotes are not paired up. We have reached to the end of the string.
-              throw new IllegalArgumentException(MessageUtil.getMessage("APPUTILS0008E",tmp));        
+    return ManifestHeaderUtils.split(value, delimiter);
         }
         
-        result.add(tmp);
         
-      }
-    }
-    return result;
-  }  
-  
- /**
-  * count the number of characters in a string
-  * @param parent The string to be searched
-  * @param subString The substring to be found
-  * @return the number of occurrence of the subString
-  */
-  private static int count(String parent, String subString) {
-    
-    int count = 0 ;
-    int i = parent.indexOf(subString);
-    while (i > -1) {
-      if (parent.length() >= i+1)
-        parent = parent.substring(i+1);
-      count ++;
-      i = parent.indexOf(subString);
-    }
-    return count;
-  }
   /**
    * Internal method to parse headers with the format<p>
    *   [Name](;[Name])*(;[attribute-name]=[attribute-value])*<br> 
diff --git a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/util/FrameworkUtils.java b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/util/FrameworkUtils.java
index 26876fac..c79ae85f 100644
--- a/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/util/FrameworkUtils.java
+++ b/incubator/aries/trunk/jmx/jmx-core/src/main/java/org/apache/aries/jmx/util/FrameworkUtils.java
@@ -34,6 +34,7 @@
 import java.util.List;
 import java.util.Set;
 
+import org.apache.aries.util.ManifestHeaderUtils;
 import org.osgi.framework.Bundle;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.Constants;
@@ -281,14 +282,10 @@ public static ServiceReference resolveService(BundleContext bundleContext, long
             List<String> importPackages = new ArrayList<String>();
             String importPackageHeader = bundleHeaders.get(Constants.IMPORT_PACKAGE);
             if (importPackageHeader != null && importPackageHeader.length() > 0) {
-            	for (String headerDeclaration : extractHeaderDeclaration(importPackageHeader)) {
-            		importPackages.addAll(removeParameters(headerDeclaration));
-            	}
+            	importPackages.addAll(extractHeaderDeclaration(importPackageHeader));
             }
             if (dynamicImportHeader != null) {
-            	for (String headerDeclaration : extractHeaderDeclaration(dynamicImportHeader)) {
-            		importPackages.addAll(removeParameters(headerDeclaration));
-            	}
+            	importPackages.addAll(extractHeaderDeclaration(dynamicImportHeader));
             }
             for (String packageName : importPackages) {
                 ExportedPackage[] candidateExports = packageAdmin.getExportedPackages(packageName);
@@ -499,10 +496,7 @@ public static boolean isBundleRequiredByOthers(Bundle bundle, PackageAdmin packa
         Dictionary<String, String> bundleHeaders = bundle.getHeaders();
         String requireBundleHeader = bundleHeaders.get(Constants.REQUIRE_BUNDLE);
         if (requireBundleHeader != null) { // only check if Require-Bundle is used
-            List<String> bundleSymbolicNames = new ArrayList<String>();
-            for (String headerDeclaration : extractHeaderDeclaration(requireBundleHeader)) {
-            	bundleSymbolicNames.addAll(removeParameters(headerDeclaration));
-        	}
+        	List<String> bundleSymbolicNames = extractHeaderDeclaration(requireBundleHeader);
             for (String bundleSymbolicName: bundleSymbolicNames) {
                 RequiredBundle[] candidateRequiredBundles = packageAdmin.getRequiredBundles(bundleSymbolicName);
                 if (candidateRequiredBundles != null) {
@@ -631,59 +625,14 @@ public static boolean arrayContains(Object[] array, Object value) {
     public static List<String> extractHeaderDeclaration(String headerStatement) {
         List<String> result = new ArrayList<String>();
         
-        while(true){
-        	int commaPoz = headerStatement.indexOf(",");
-        	
-        	while (commaPoz!= -1){
-        		String testStr = headerStatement.substring(0, commaPoz);
-        		
-        		int quoteNum = 0;
-        		int bracketNum = 0;
-        		for(char testStrChar : testStr.toCharArray()){
-        			switch (testStrChar) {
-	        			case '"': quoteNum++; break;
-	        			case '[':
-	        			case ']':
-	        			case '(':
-	        			case ')': bracketNum++;
-        			}
-        		}
-        		
-        		// there might be odd numbered quote marks or brackets in the left part,
-        		// which indicates the comma appears in version=[1.0,3.5) or uses="xxx,yyy,zzz"
-	        	if (quoteNum % 2 == 1 || bracketNum %2 ==1){
-	        		commaPoz = headerStatement.indexOf(",", commaPoz+1);
-	        	}else {
-	        		break;
-	        	}
-        	}
-        	
-        	if (commaPoz == -1){	//to the end
-        		result.add(headerStatement.trim());
-        		break;
-        	}else{
-        		result.add(headerStatement.substring(0,commaPoz).trim());
-        		if (commaPoz+1 < headerStatement.trim().length()){ //commaPoz is not the last char
-        			headerStatement = headerStatement.substring(commaPoz+1, headerStatement.length());
-        		}else{
-        			break;
-        		}
-        	}
+        for (String headerDeclaration : ManifestHeaderUtils.split(headerStatement, ",")) {
+            String name = headerDeclaration.contains(";") ? headerDeclaration.substring(0, headerDeclaration
+                    .indexOf(";")) : headerDeclaration;
+            result.add(name);
         }
         
         return result;
     }
     
-    private static List<String> removeParameters(String headerDeclaration) {
-    	List<String> result = new ArrayList<String>();
-    	
-    	for (String headerSentence : headerDeclaration.split("\\s*;\\s*")) {
-            if (headerSentence.indexOf("=") == -1){
-            	result.add(headerSentence.trim());
-            }
-        }
-    	
-    	return result;
-    }
     
 }
diff --git a/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/framework/BundleStateMBeanTest.java b/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/framework/BundleStateMBeanTest.java
index daf1b390..85091404 100644
--- a/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/framework/BundleStateMBeanTest.java
+++ b/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/framework/BundleStateMBeanTest.java
@@ -62,6 +62,7 @@
                         mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
                         mavenBundle("org.osgi", "org.osgi.compendium"),
                         mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx"),
+                        mavenBundle("org.apache.aries", "org.apache.aries.util"),
                         provision(newBundle()
                                 .add(org.apache.aries.jmx.test.bundlea.Activator.class)
                                 .add(org.apache.aries.jmx.test.bundlea.api.InterfaceA.class)
diff --git a/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/framework/FrameworkMBeanTest.java b/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/framework/FrameworkMBeanTest.java
index c463ac74..914e6bd9 100644
--- a/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/framework/FrameworkMBeanTest.java
+++ b/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/framework/FrameworkMBeanTest.java
@@ -52,7 +52,8 @@
             CoreOptions.equinox(),
             mavenBundle("org.ops4j.pax.logging", "pax-logging-api"), 
             mavenBundle("org.ops4j.pax.logging", "pax-logging-service"), 
-            mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx")
+            mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx"),
+            mavenBundle("org.apache.aries", "org.apache.aries.util")
         );
         
         options = updateOptions(options);
diff --git a/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/framework/PackageStateMBeanTest.java b/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/framework/PackageStateMBeanTest.java
index 9e978b90..9eea7814 100644
--- a/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/framework/PackageStateMBeanTest.java
+++ b/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/framework/PackageStateMBeanTest.java
@@ -46,7 +46,7 @@
     public static Option[] configuration() {
         Option[] options = CoreOptions.options(CoreOptions.equinox(), mavenBundle("org.ops4j.pax.logging",
                 "pax-logging-api"), mavenBundle("org.ops4j.pax.logging", "pax-logging-service"), mavenBundle(
-                "org.apache.aries.jmx", "org.apache.aries.jmx"));
+                "org.apache.aries.jmx", "org.apache.aries.jmx"),mavenBundle("org.apache.aries", "org.apache.aries.util"));
         options = updateOptions(options);
         return options;
     }
diff --git a/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/framework/ServiceStateMBeanTest.java b/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/framework/ServiceStateMBeanTest.java
index aca9e65b..05ee8d39 100644
--- a/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/framework/ServiceStateMBeanTest.java
+++ b/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/framework/ServiceStateMBeanTest.java
@@ -69,6 +69,7 @@
                         mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
                         mavenBundle("org.osgi", "org.osgi.compendium"),
                         mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx"),
+                        mavenBundle("org.apache.aries", "org.apache.aries.util"),
                         new Customizer() {
                             public InputStream customizeTestProbe(InputStream testProbe) throws Exception {
                                 return modifyBundle(testProbe)
diff --git a/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/permissionadmin/PermissionAdminMBeanTest.java b/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/permissionadmin/PermissionAdminMBeanTest.java
index 220085fd..53e2107f 100644
--- a/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/permissionadmin/PermissionAdminMBeanTest.java
+++ b/incubator/aries/trunk/jmx/jmx-itests/src/test/java/org/apache/aries/jmx/permissionadmin/PermissionAdminMBeanTest.java
@@ -52,6 +52,7 @@
             mavenBundle("org.ops4j.pax.logging", "pax-logging-api"), 
             mavenBundle("org.ops4j.pax.logging", "pax-logging-service"), 
             mavenBundle("org.apache.aries.jmx", "org.apache.aries.jmx"),
+            mavenBundle("org.apache.aries", "org.apache.aries.util"),
             provision(newBundle()
                     .add(org.apache.aries.jmx.test.bundlea.Activator.class)
                     .add(org.apache.aries.jmx.test.bundlea.api.InterfaceA.class)
diff --git a/incubator/aries/trunk/util/src/main/java/org/apache/aries/util/ManifestHeaderUtils.java b/incubator/aries/trunk/util/src/main/java/org/apache/aries/util/ManifestHeaderUtils.java
index e69de29b..853daa5d 100644
--- a/incubator/aries/trunk/util/src/main/java/org/apache/aries/util/ManifestHeaderUtils.java
+++ b/incubator/aries/trunk/util/src/main/java/org/apache/aries/util/ManifestHeaderUtils.java
@@ -0,0 +1,87 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIESOR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.util;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.aries.util.internal.MessageUtil;
+
+
+
+public class ManifestHeaderUtils {
+
+     /**
+     * 
+     * Splits a delimiter separated string, tolerating presence of non separator commas
+     * within double quoted segments.
+     * 
+     * Eg.
+     * com.ibm.ws.eba.helloWorldService;version="[1.0.0, 1.0.0]" &
+     * com.ibm.ws.eba.helloWorldService;version="1.0.0"
+     * com.ibm.ws.eba.helloWorld;version="2";bundle-version="[2,30)"
+     * com.acme.foo;weirdAttr="one;two;three";weirdDir:="1;2;3"
+     *  @param value          the value to be split
+     *  @param delimiter      the delimiter string such as ',' etc.
+     *  @return List<String>  the components of the split String in a list
+     */
+    public static List<String> split(String value, String delimiter)
+    {
+      List<String> result = new ArrayList<String>();
+      if (value != null) {
+        String[] packages = value.split(delimiter);
+        
+        for (int i = 0; i < packages.length; ) {
+          String tmp = packages[i++].trim();
+          // if there is a odd number of " in a string, we need to append
+          while (count(tmp, "\"") % 2 != 0) {
+            // check to see if we need to append the next package[i++]          
+              if (i<packages.length)
+                tmp = tmp + delimiter + packages[i++].trim();
+              else 
+                // oops. The double quotes are not paired up. We have reached to the end of the string.
+                throw new IllegalArgumentException(MessageUtil.getMessage("UTIL0008E",tmp));        
+          }
+          
+          result.add(tmp);
+          
+        }
+      }
+      return result;
+    }  
+   
+    /**
+     * count the number of characters in a string
+     * @param parent The string to be searched
+     * @param subString The substring to be found
+     * @return the number of occurrence of the subString
+     */
+     private static int count(String parent, String subString) {
+       
+       int count = 0 ;
+       int i = parent.indexOf(subString);
+       while (i > -1) {
+         if (parent.length() >= i+1)
+           parent = parent.substring(i+1);
+         count ++;
+         i = parent.indexOf(subString);
+       }
+       return count;
+     }
+}
