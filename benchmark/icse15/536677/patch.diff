diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java
index bb10d9d3..509afcd0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/services/monitor/StorageFactoryService.java
@@ -574,11 +574,11 @@ public Object run()
 		{
 			//First make sure backup service directory exists in the specified path
 			File backupRoot = new File(restoreFrom);
-			if(backupRoot.exists())
+			if(privExists(backupRoot))
 			{
 				//First make sure backup have service.properties
 				File bserviceProp = new File(restoreFrom, PersistentService.PROPERTIES_NAME);
-				if(bserviceProp.exists())
+				if(privExists(bserviceProp))
 				{
 					//create service root if required
 					if(createRoot)
@@ -909,4 +909,31 @@ public final Object run()
             return null;
         } // end of run
     } // end of class DirectoryList
+    
+    /**
+     * Wrap File.exists() in a priv block to avoid Security exceptions
+     * @param fileToCheck
+	 * @return true if file exists, false if it does not
+	 * @throws SecurityException
+	 */
+    private boolean privExists(final File fileToCheck) throws SecurityException{
+        try {
+            
+            Boolean exist  = (Boolean) AccessController.doPrivileged(
+                    new PrivilegedExceptionAction()
+                    {
+                        public Object run()
+                        throws SecurityException
+                        {
+                            return new Boolean(fileToCheck.exists());
+                        }
+                    }); 
+            return exist.booleanValue();
+        }
+        catch( PrivilegedActionException pae)
+        {
+            throw (SecurityException) pae.getException();
+        }
+    }
+
 }
