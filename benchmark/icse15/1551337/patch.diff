diff --git a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
index 2a98ba4d..21521c5f 100644
--- a/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
+++ b/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/container/ServiceRecipe.java
@@ -92,6 +92,7 @@
     /** Only ever access when holding a lock on <code>monitor</code> */
     private boolean quiesce;
     private Collection<DestroyCallback> destroyCallbacks = new ArrayList<DestroyCallback>();
+    private boolean initialServiceRegistration = true;
     
     public ServiceRecipe(String name,
                          BlueprintContainerImpl blueprintContainer,
@@ -191,15 +192,9 @@ public void register() {
             ServiceRegistration reg = blueprintContainer.registerService(classArray, new TriggerServiceFactory(this, metadata), props);
             if (!registration.compareAndSet(null, reg) && registration.get() != reg) {
                 reg.unregister();
-            } else {
-                if (listeners != null) {
-                    LOGGER.debug("Calling listeners for service registration");
-                    for (ServiceListener listener : listeners) {
-                        listener.register(service, registrationProperties);
-                    }
-                }
             }
         }
+        initialServiceRegistration = false;
     }
 
     public void unregister() {
@@ -253,9 +248,8 @@ protected Object internalGetService() {
      */
     private Object internalGetService(Bundle bundle, ServiceRegistration registration) {
         LOGGER.debug("Retrieving service for bundle {} and service registration {}", bundle, registration);
-        if (this.service == null) {
+        LOGGER.debug("Stack trace", new Throwable());
             createService();
-        }
         
         Object service = this.service;
         // We need the real service ...
@@ -281,6 +275,7 @@ private Object internalGetService(Bundle bundle, ServiceRegistration registratio
 
     private void createService() {
         try {
+            if (service == null) {
             LOGGER.debug("Creating service instance");
             //We can't use the BlueprintRepository because we don't know what interfaces
             //to use yet! We have to be a bit smarter.
@@ -306,10 +301,11 @@ private void createService() {
 			} finally {
 				ExecutionContext.Holder.setContext(old);
 			}
-            
             LOGGER.debug("Service created: {}", service);
+            }
+
             // When the service is first requested, we need to create listeners and call them
-            if (listeners == null) {
+            if (!initialServiceRegistration && listeners == null) {
                 LOGGER.debug("Creating listeners");
                 if (listenersRecipe != null) {
                     listeners = (List) createRecipe(listenersRecipe);
