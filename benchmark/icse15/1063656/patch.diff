diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/CrossConverters.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/CrossConverters.java
index 7db6b40b..b62793df 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/CrossConverters.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/CrossConverters.java
@@ -971,9 +971,26 @@ final boolean getBooleanFromBigDecimal(java.math.BigDecimal source) throws SqlEx
         return source.intValue() != 0;
     }
 
-    // See differences.html for DNC getBoolean() semantics.
-    final boolean getBooleanFromString(String source) throws SqlException {
-        return !(source.trim().equals("0") || source.trim().equals("false"));
+    /**
+     * <p>
+     * Get a boolean value from a CHAR column. In order to match the embedded
+     * driver and JCC we return false iff the CHAR value is "0" or "false".
+     * </p>
+     *
+     * <p>
+     * Leading and trailing whitespace is removed from the input string before
+     * it's compared to "0" and "false". No other normalization is performed.
+     * Specifically, no case conversion is performed, so the comparison is
+     * case sensitive, and everything that doesn't exactly match "0" or "false"
+     * will be considered true.
+     * </p>
+     *
+     * @param source the value of a CHAR column
+     * @return false if source is "0" or "false", true otherwise
+     */
+    final boolean getBooleanFromString(String source) {
+        String trimmed = source.trim();
+        return !(trimmed.equals("0") || trimmed.equals("false"));
     }
 
     //---------------------------- getByte*() methods ----------------------------
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
index 794531a9..f731257a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLChar.java
@@ -250,7 +250,7 @@ private static void appendBlanks(char[] ca, int offset, int howMany)
      * Return false for only "0" or "false" for false. No case insensitivity. 
      * Everything else is true.
      * <p>
-     * The above matches JCC.
+     * The above matches JCC and the client driver.
      *
      *
      * @see DataValueDescriptor#getBoolean
@@ -263,8 +263,8 @@ public boolean getBoolean()
         if (isNull()) 
             return false;
 
-        // match JCC, match only "0" or "false" for false. No case 
-        // insensitivity. everything else is true.
+        // Match JCC and the client driver. Match only "0" or "false" for
+        // false. No case insensitivity. Everything else is true.
 
         String cleanedValue = getString().trim();
 
