diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java
index 1bdaaf16..d9e5b04e 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleEventHook.java
@@ -93,12 +93,24 @@ private void handleInstalledEvent(BundleEvent event) {
 			handleExplicitlyInstalledBundleBundleContext(originRevision, bundleRevision);
 	}
 	
+	@SuppressWarnings("unchecked")
 	private void handleUninstalledEvent(BundleEvent event) {
 		Bundle bundle = event.getBundle();
 		BundleRevision revision = bundleToRevision.remove(bundle);
 		if (ThreadLocalSubsystem.get() != null)
 			return;
-		for (BasicSubsystem subsystem : Activator.getInstance().getSubsystems().getSubsystemsByConstituent(new BundleConstituent(null, revision)))
+		Collection<BasicSubsystem> subsystems;
+		if (revision == null) {
+			// The bundle was installed while the bundle event hook was unregistered.
+			Object[] o = Activator.getInstance().getSubsystems().getSubsystemsByBundle(bundle);
+			if (o == null)
+				return;
+			revision = (BundleRevision)o[0];
+			subsystems = (Collection<BasicSubsystem>)o[1];
+		}
+		else
+			subsystems = Activator.getInstance().getSubsystems().getSubsystemsByConstituent(new BundleConstituent(null, revision));
+		for (BasicSubsystem subsystem : subsystems)
 			ResourceUninstaller.newInstance(revision, subsystem).uninstall();
 	}
 }
diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceInstaller.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceInstaller.java
index c20fee60..20884f14 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceInstaller.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceInstaller.java
@@ -109,6 +109,14 @@ public Bundle getBundle() {
 			return revision.getBundle();
 		}
 
+		public Resource getResource() {
+			return resource;
+		}
+		
+		public BundleRevision getRevision() {
+			return revision;
+		}
+
 		@Override
 		public String getSymbolicName() {
 			return revision.getSymbolicName();
diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java
index 70e5ecd2..d53427c7 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemResourceInstaller.java
@@ -13,12 +13,14 @@
  */
 package org.apache.aries.subsystem.core.internal;
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
 
 import org.apache.aries.util.filesystem.FileSystem;
+import org.osgi.framework.BundleException;
 import org.osgi.resource.Resource;
 import org.osgi.service.coordinator.Coordination;
 import org.osgi.service.coordinator.Participant;
@@ -90,8 +92,7 @@ private BasicSubsystem installAriesSubsystem(BasicSubsystem subsystem) throws Ex
 		addReference(subsystem);
 		addConstituent(subsystem);
 		addSubsystem(subsystem);
-		if (subsystem.isScoped())
-			RegionContextBundleHelper.installRegionContextBundle(subsystem);
+		installRegionContextBundle(subsystem);
 		Activator.getInstance().getSubsystemServiceRegistrar().register(subsystem, this.subsystem);
 		Comparator<Resource> comparator = new InstallResourceComparator();
 		// Install dependencies first...
@@ -128,6 +129,23 @@ private BasicSubsystem installRawSubsystemResource(RawSubsystemResource resource
 		return installSubsystemResource(subsystemResource);
 	}
 	
+	private void installRegionContextBundle(final BasicSubsystem subsystem) throws BundleException, IOException {
+		if (!subsystem.isScoped())
+			return;
+		RegionContextBundleHelper.installRegionContextBundle(subsystem);
+		coordination.addParticipant(new Participant() {
+			@Override
+			public void ended(Coordination coordination) throws Exception {
+				// Nothing
+			}
+
+			@Override
+			public void failed(Coordination coordination) throws Exception {
+				RegionContextBundleHelper.uninstallRegionContextBundle(subsystem);
+			}
+		});
+	}
+	
 	private BasicSubsystem installRepositoryContent(RepositoryContent resource) throws Exception {
 		RawSubsystemResource rawSubsystemResource = new RawSubsystemResource(getLocation(), FileSystem.getFSRoot(resource.getContent()));
 		return installRawSubsystemResource(rawSubsystemResource);
diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java
index 2a729417..e70bf25d 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/Subsystems.java
@@ -25,6 +25,7 @@
 import java.util.Map;
 import java.util.Set;
 
+import org.apache.aries.subsystem.core.internal.BundleResourceInstaller.BundleConstituent;
 import org.osgi.framework.Bundle;
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.wiring.BundleRevision;
@@ -190,6 +191,27 @@ public BasicSubsystem getSubsystemByLocation(String location) {
 		return new ArrayList<BasicSubsystem>(idToSubsystem.values());
 	}
 	
+	// TODO Not very pretty. A quick fix.
+	public Object[] getSubsystemsByBundle(Bundle bundle) {
+		BundleRevision revision = null;
+		ArrayList<BasicSubsystem> result = new ArrayList<BasicSubsystem>();
+		synchronized (subsystemToConstituents) {
+			for (BasicSubsystem subsystem : subsystemToConstituents.keySet()) {
+				for (Resource constituent : getConstituents(subsystem)) {
+					if (constituent instanceof BundleConstituent &&
+							((BundleConstituent)constituent).getBundle() == bundle) {
+						result.add(subsystem);
+						revision = ((BundleConstituent)constituent).getRevision();
+					}
+				}	
+			}
+		}
+		result.trimToSize();
+		if (revision == null)
+			return null;
+		return new Object[]{revision, result};
+	}
+	
 	public Collection<BasicSubsystem> getSubsystemsByConstituent(Resource constituent) {
 		ArrayList<BasicSubsystem> result = new ArrayList<BasicSubsystem>();
 		synchronized (subsystemToConstituents) {
diff --git a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/UnmanagedBundleTest.java b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/UnmanagedBundleTest.java
index 28811b7a..0c5f83db 100644
--- a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/UnmanagedBundleTest.java
+++ b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/UnmanagedBundleTest.java
@@ -116,4 +116,41 @@ public void testInstallWhileImplBundleUninstalled() throws Exception {
 			}
 		}
 	}
+	
+	/*
+	 * Test that bundles installed when the bundle event hook is unavailable
+	 * (i.e. when the subsystems core bundle is stopped) are handled properly
+	 * by the hook when uninstalled.
+	 * 
+	 * See https://issues.apache.org/jira/browse/ARIES-967.
+	 */
+	@Test
+	public void testBundleEventHook() throws Exception {
+		Bundle core = getSubsystemCoreBundle();
+		// Stop the subsystems core bundle so the bundle event hook is not registered.
+		core.stop();
+		try {
+			// Install an unmanaged bundle that will not be seen by the bundle event hook.
+			Bundle a = bundleContext.installBundle(BUNDLE_A, new FileInputStream(BUNDLE_A));
+			try {
+				// Restart the subsystems core bundle.
+				core.start();
+				// Bundle A should be detected as a constituent of the root subsystem.
+				assertConstituent(getRootSubsystem(), BUNDLE_A);
+				// Uninstall bundle A so that it is seen by the bundle event hook.
+				a.uninstall();
+				// Bundle A should no longer be a constituent of the root subsystem.
+				assertNotConstituent(getRootSubsystem(), BUNDLE_A);
+			}
+			finally {
+				uninstallSilently(a);
+			}
+		}
+		finally {
+			try {
+				core.start();
+			}
+			catch (Exception e) {}
+		}
+	}
 }
