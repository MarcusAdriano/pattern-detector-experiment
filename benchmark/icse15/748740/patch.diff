diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/ItemItemWritable.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/ItemItemWritable.java
index b072cddd..a26023aa 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/ItemItemWritable.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/hadoop/ItemItemWritable.java
@@ -72,11 +72,7 @@ public int compareTo(ItemItemWritable that) {
       return 0;
     }
     int compare = itemAID.compareTo(that.itemAID);
-    if (compare == 0) {
-      return itemBID.compareTo(that.itemBID);
-    } else {
-      return compare;
-    }
+    return compare == 0 ? itemBID.compareTo(that.itemBID) : compare;
   }
 
   @Override
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/BitSet.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/BitSet.java
index c0b5f1a6..3d25e1aa 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/BitSet.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/BitSet.java
@@ -17,10 +17,12 @@
 
 package org.apache.mahout.cf.taste.impl.common;
 
+import java.io.Serializable;
+
 /**
  * A simplified and streamlined version of {@link java.util.BitSet}.
  */
-final class BitSet {
+final class BitSet implements Serializable {
 
   private final long[] bits;
 
@@ -35,19 +37,19 @@
   boolean get(int index) {
     // skipping range check for speed
     int offset = index >>> 6;
-    return (bits[offset] & (1L << (index - (offset << 6)))) != 0L;
+    return (bits[offset] & (1L << (index & 0x3F))) != 0L;
   }
 
   void set(int index) {
     // skipping range check for speed
     int offset = index >>> 6;
-    bits[offset] |= (1L << (index - (offset << 6)));
+    bits[offset] |= (1L << (index & 0x3F));
   }
 
   void clear(int index) {
     // skipping range check for speed
     int offset = index >>> 6;
-    bits[offset] &= ~(1L << (index - (offset << 6)));
+    bits[offset] &= ~(1L << (index & 0x3F));
   }
 
   void clear() {
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastMap.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastMap.java
index d5ad329e..7e604ade 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastMap.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastMap.java
@@ -25,6 +25,7 @@
 import java.util.Map;
 import java.util.NoSuchElementException;
 import java.util.Set;
+import java.io.Serializable;
 
 /**
  * <p>This is an optimized {@link Map} implementation, based on algorithms described in Knuth's
@@ -38,7 +39,7 @@
  *
  * <p>This implementation does not allow <code>null</code> as a key or value.</p>
  */
-public final class FastMap<K, V> implements Map<K, V> {
+public final class FastMap<K, V> implements Map<K, V>, Serializable {
 
   public static final int NO_MAX_SIZE = Integer.MAX_VALUE;
 
@@ -175,9 +176,8 @@ public V put(K key, V value) {
     if (key == null || value == null) {
       throw new NullPointerException();
     }
-    int hashSize = keys.length;
     // If less than half the slots are open, let's clear it up
-    if (numSlotsUsed >= hashSize >> 1) {
+    if (numSlotsUsed >= keys.length >> 1) {
       // If over half the slots used are actual entries, let's grow
       if (numEntries >= numSlotsUsed >> 1) {
         growAndRehash();
@@ -208,11 +208,10 @@ public V put(K key, V value) {
 
   private void clearStaleEntry(int index) {
     while (true) {
-      int hashSize = keys.length;
       K currentKey;
       do {
         if (index == 0) {
-          index = hashSize - 1;
+          index = keys.length - 1;
         } else {
           index--;
         }
@@ -283,15 +282,14 @@ public void clear() {
   }
 
   public void rehash() {
-    rehash(keys.length);
+    rehash(RandomUtils.nextTwinPrime(numEntries << 1));
   }
 
   private void growAndRehash() {
-    int hashSize = keys.length;
-    if (hashSize >= RandomUtils.MAX_INT_SMALLER_TWIN_PRIME >> 1) {
+    if (keys.length >= RandomUtils.MAX_INT_SMALLER_TWIN_PRIME >> 1) {
       throw new IllegalStateException("Can't grow any more");
     }
-    rehash(RandomUtils.nextTwinPrime(2 * hashSize));
+    rehash(RandomUtils.nextTwinPrime(keys.length << 1));
   }
 
   @SuppressWarnings("unchecked")
@@ -378,7 +376,7 @@ public void clear() {
       FastMap.this.clear();
     }
 
-    final class MapEntry implements Entry<K, V> {
+    private final class MapEntry implements Entry<K, V> {
 
       private final int index;
 
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastSet.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastSet.java
index 467605ef..c9556fe2 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastSet.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastSet.java
@@ -23,6 +23,7 @@
 import java.util.NoSuchElementException;
 import java.util.Set;
 import java.lang.reflect.Array;
+import java.io.Serializable;
 
 /**
  * <p>This is an optimized {@link Set} implementation, based on algorithms described in Knuth's
@@ -38,7 +39,7 @@
  *
  * @see FastMap
  */
-public final class FastSet<K> implements Set<K> {
+public final class FastSet<K> implements Set<K>, Serializable {
 
   /**
    * Dummy object used to represent a key that has been removed.
@@ -122,9 +123,8 @@ public boolean add(K key) {
     if (key == null) {
       throw new NullPointerException();
     }
-    int hashSize = keys.length;
     // If less than half the slots are open, let's clear it up
-    if (numSlotsUsed >= hashSize >> 1) {
+    if (numSlotsUsed >= keys.length >> 1) {
       // If over half the slots used are actual entries, let's grow
       if (numEntries >= numSlotsUsed >> 1) {
         growAndRehash();
@@ -241,15 +241,14 @@ public void clear() {
   }
 
   private void growAndRehash() {
-    int hashSize = keys.length;
-    if (hashSize >= RandomUtils.MAX_INT_SMALLER_TWIN_PRIME >> 1) {
+    if (keys.length >= RandomUtils.MAX_INT_SMALLER_TWIN_PRIME >> 1) {
       throw new IllegalStateException("Can't grow any more");
     }
-    rehash(RandomUtils.nextTwinPrime(2 * hashSize));
+    rehash(RandomUtils.nextTwinPrime(keys.length << 1));
   }
 
   public void rehash() {
-    rehash(keys.length);
+    rehash(RandomUtils.nextTwinPrime(numEntries << 1));
   }
 
   @SuppressWarnings("unchecked")
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RandomUtils.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RandomUtils.java
index a9b85025..3d96f24c 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RandomUtils.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RandomUtils.java
@@ -17,8 +17,6 @@
 
 package org.apache.mahout.cf.taste.impl.common;
 
-import org.uncommons.maths.random.MersenneTwisterRNG;
-
 import java.util.Random;
 
 /**
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RefreshHelper.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RefreshHelper.java
index 22ad31ef..4a808626 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RefreshHelper.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/RefreshHelper.java
@@ -50,6 +50,12 @@ public void addDependency(Refreshable refreshable) {
     }
   }
 
+  public void removeDependency(Refreshable refreshable) {
+    if (refreshable != null) {
+      dependencies.remove(refreshable);
+    }
+  }
+
   @Override
   public void refresh(Collection<Refreshable> alreadyRefreshed) {
     if (!refreshLock.isLocked()) {
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java
index d6cdf0e1..b014a734 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/eval/GenericRecommenderIRStatsEvaluator.java
@@ -102,12 +102,7 @@ public IRStatistics evaluate(RecommenderBuilder recommenderBuilder,
         Object id = user.getID();
         Collection<Item> relevantItems = new FastSet<Item>(at);
         Preference[] prefs = user.getPreferencesAsArray();
-        double theRelevanceThreshold;
-        if (Double.isNaN(relevanceThreshold)) {
-          theRelevanceThreshold = computeThreshold(prefs);
-        } else {
-          theRelevanceThreshold = relevanceThreshold;
-        }
+        double theRelevanceThreshold = Double.isNaN(relevanceThreshold) ? computeThreshold(prefs) : relevanceThreshold;
         for (Preference pref : prefs) {
           if (pref.getValue() >= theRelevanceThreshold) {
             relevantItems.add(pref.getItem());
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/AbstractJDBCDataModel.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/AbstractJDBCDataModel.java
index 16638649..9555c8fa 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/AbstractJDBCDataModel.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/AbstractJDBCDataModel.java
@@ -70,7 +70,7 @@
  */
 public abstract class AbstractJDBCDataModel implements JDBCDataModel {
 
-  private static final Logger log = LoggerFactory.getLogger(AbstractJDBCDataModel.class);
+  static final Logger log = LoggerFactory.getLogger(AbstractJDBCDataModel.class);
 
   public static final String DEFAULT_DATASOURCE_NAME = "jdbc/taste";
   public static final String DEFAULT_PREFERENCE_TABLE = "taste_preferences";
@@ -394,11 +394,9 @@ public int getNumUsersWithPreferenceFor(Object... itemIDs) throws TasteException
     if (length == 0 || length > 2) {
       throw new IllegalArgumentException("Illegal number of item IDs: " + length);
     }
-    if (length == 1) {
-      return getNumThings("user preferring item", getNumPreferenceForItemSQL, itemIDs);
-    } else {
-      return getNumThings("user preferring items", getNumPreferenceForItemsSQL, itemIDs);
-    }
+    return length == 1 ?
+        getNumThings("user preferring item", getNumPreferenceForItemSQL, itemIDs) :
+        getNumThings("user preferring items", getNumPreferenceForItemsSQL, itemIDs);
   }
 
 
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/CachingRecommender.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/CachingRecommender.java
index e8a00f61..c2c50c13 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/CachingRecommender.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/CachingRecommender.java
@@ -189,13 +189,10 @@ private RecommendationRetriever(Recommender recommender) {
     @Override
     public Recommendations get(Object key) throws TasteException {
       log.debug("Retrieving new recommendations for user ID '{}'", key);
-      List<RecommendedItem> recommendations;
       int howMany = maxHowMany.get();
-      if (currentRescorer == null) {
-        recommendations = recommender.recommend(key, howMany);
-      } else {
-        recommendations = recommender.recommend(key, howMany, currentRescorer);
-      }
+      List<RecommendedItem> recommendations = currentRescorer == null ?
+          recommender.recommend(key, howMany) :
+          recommender.recommend(key, howMany, currentRescorer);
       return new Recommendations(Collections.unmodifiableList(recommendations));
     }
   }
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender.java
index 9818e2cf..94007ad8 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender.java
@@ -252,11 +252,7 @@ public double estimatePreference(Object userID, Object itemID) throws TasteExcep
     }
     checkClustersBuilt();
     Collection<User> cluster = clustersByUserID.get(userID);
-    if (cluster == null) {
-      return Collections.emptyList();
-    } else {
-      return cluster;
-    }
+    return cluster == null ? Collections.<User>emptyList() : cluster;
   }
 
   @Override
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender2.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender2.java
index e66f8116..e1caf740 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender2.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/TreeClusteringRecommender2.java
@@ -218,11 +218,7 @@ public double estimatePreference(Object userID, Object itemID) throws TasteExcep
     }
     checkClustersBuilt();
     Collection<User> cluster = clustersByUserID.get(userID);
-    if (cluster == null) {
-      return Collections.emptyList();
-    } else {
-      return cluster;
-    }
+    return cluster == null ? Collections.<User>emptyList() : cluster;
   }
 
   @Override
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java
index 174045dd..22cebb6b 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/MemoryDiffStorage.java
@@ -224,9 +224,11 @@ private void buildAverageDiffs() throws TasteException {
 
       // Go back and prune inconsequential diffs. "Inconsequential" means, here, only represented by one
       // data point, so possibly unreliable
-      for (Iterator<FastMap<Object, RunningAverage>> it1 = averageDiffs.values().iterator(); it1.hasNext();) {
+      Iterator<FastMap<Object, RunningAverage>> it1 = averageDiffs.values().iterator();
+      while (it1.hasNext()) {
         FastMap<Object, RunningAverage> map = it1.next();
-        for (Iterator<RunningAverage> it2 = map.values().iterator(); it2.hasNext();) {
+        Iterator<RunningAverage> it2 = map.values().iterator();
+        while (it2.hasNext()) {
           RunningAverage average = it2.next();
           if (average.getCount() <= 1) {
             it2.remove();
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java
index 01877746..21314dae 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/recommender/slopeone/jdbc/AbstractJDBCDiffStorage.java
@@ -128,11 +128,7 @@ public RunningAverage getDiff(Object itemID1, Object itemID2) throws TasteExcept
       stmt.setObject(4, itemID1);
       log.debug("Executing SQL query: {}", getDiffSQL);
       rs = stmt.executeQuery();
-      if (rs.next()) {
-        return new FixedRunningAverage(rs.getInt(1), rs.getDouble(2));
-      } else {
-        return null;
-      }
+      return rs.next() ? new FixedRunningAverage(rs.getInt(1), rs.getDouble(2)) : null;
     } catch (SQLException sqle) {
       log.warn("Exception while retrieving diff", sqle);
       throw new TasteException(sqle);
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java
index b0a96cd0..406cb53b 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/AbstractSimilarity.java
@@ -63,7 +63,7 @@
   /**
    * <p>Creates a possibly weighted {@link AbstractSimilarity}.</p>
    */
-  AbstractSimilarity(DataModel dataModel, Weighting weighting) throws TasteException {
+  AbstractSimilarity(final DataModel dataModel, Weighting weighting) throws TasteException {
     if (dataModel == null) {
       throw new IllegalArgumentException("dataModel is null");
     }
@@ -74,15 +74,12 @@
     this.refreshHelper = new RefreshHelper(new Callable<Object>() {
       @Override
       public Object call() throws TasteException {
-        cachedNumItems = AbstractSimilarity.this.dataModel.getNumItems();
-        cachedNumUsers = AbstractSimilarity.this.dataModel.getNumUsers();
+        cachedNumItems = dataModel.getNumItems();
+        cachedNumUsers = dataModel.getNumUsers();
         return null;
       }
     });
     this.refreshHelper.addDependency(this.dataModel);
-    this.refreshHelper.addDependency(this.inferrer);
-    this.refreshHelper.addDependency(this.prefTransform);
-    this.refreshHelper.addDependency(this.similarityTransform);
   }
 
   final DataModel getDataModel() {
@@ -98,6 +95,8 @@ public final void setPreferenceInferrer(PreferenceInferrer inferrer) {
     if (inferrer == null) {
       throw new IllegalArgumentException("inferrer is null");
     }
+    refreshHelper.addDependency(inferrer);
+    refreshHelper.removeDependency(this.inferrer);
     this.inferrer = inferrer;
   }
 
@@ -106,6 +105,8 @@ public final PreferenceTransform getPrefTransform() {
   }
 
   public final void setPrefTransform(PreferenceTransform prefTransform) {
+    refreshHelper.addDependency(prefTransform);
+    refreshHelper.removeDependency(this.prefTransform);
     this.prefTransform = prefTransform;
   }
 
@@ -114,6 +115,8 @@ public final void setPrefTransform(PreferenceTransform prefTransform) {
   }
 
   public final void setSimilarityTransform(SimilarityTransform<Object> similarityTransform) {
+    refreshHelper.addDependency(similarityTransform);
+    refreshHelper.removeDependency(this.similarityTransform);
     this.similarityTransform = similarityTransform;
   }
 
@@ -191,21 +194,13 @@ public double userSimilarity(User user1, User user2) throws TasteException {
           // as if the other user expressed that preference
           if (compare < 0) {
             // X has a value; infer Y's
-            if (hasPrefTransform) {
-              x = prefTransform.getTransformedValue(xPref);
-            } else {
-              x = xPref.getValue();
-            }
+            x = hasPrefTransform ? prefTransform.getTransformedValue(xPref) : xPref.getValue();
             y = inferrer.inferPreference(user2, xIndex);
           } else {
             // compare > 0
             // Y has a value; infer X's
             x = inferrer.inferPreference(user1, yIndex);
-            if (hasPrefTransform) {
-              y = prefTransform.getTransformedValue(yPref);
-            } else {
-              y = yPref.getValue();
-            }
+            y = hasPrefTransform ? prefTransform.getTransformedValue(yPref) : yPref.getValue();
           }
         }
         sumXY += x * y;
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/CachingItemSimilarity.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/CachingItemSimilarity.java
index 6170e7e8..bf241e6b 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/CachingItemSimilarity.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/CachingItemSimilarity.java
@@ -48,12 +48,9 @@ public CachingItemSimilarity(ItemSimilarity similarity, DataModel dataModel) thr
 
   @Override
   public double itemSimilarity(Item item1, Item item2) throws TasteException {
-    Pair<Item, Item> key;
-    if (item1.compareTo(item2) < 0) {
-      key = new Pair<Item, Item>(item1, item2);
-    } else {
-      key = new Pair<Item, Item>(item2, item1);
-    }
+    Pair<Item, Item> key = item1.compareTo(item2) < 0 ?
+        new Pair<Item, Item>(item1, item2) :
+        new Pair<Item, Item>(item2, item1);
     return similarityCache.get(key);
   }
 
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/CachingUserSimilarity.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/CachingUserSimilarity.java
index b7284a04..357e4564 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/CachingUserSimilarity.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/similarity/CachingUserSimilarity.java
@@ -49,12 +49,9 @@ public CachingUserSimilarity(UserSimilarity similarity, DataModel dataModel) thr
 
   @Override
   public double userSimilarity(User user1, User user2) throws TasteException {
-    Pair<User, User> key;
-    if (user1.compareTo(user2) < 0) {
-      key = new Pair<User, User>(user1, user2);
-    } else {
-      key = new Pair<User, User>(user2, user1);
-    }
+    Pair<User, User> key = user1.compareTo(user2) < 0 ?
+        new Pair<User, User>(user1, user2) :
+        new Pair<User, User>(user2, user1);
     return similarityCache.get(key);
   }
 
