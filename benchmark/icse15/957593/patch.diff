diff --git a/cassandra/trunk/src/java/org/apache/cassandra/gms/EndpointState.java b/cassandra/trunk/src/java/org/apache/cassandra/gms/EndpointState.java
index ec9d7da2..0a7c9336 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/gms/EndpointState.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/gms/EndpointState.java
@@ -145,9 +145,6 @@ public boolean getHasToken()
     
     public void serialize(EndpointState epState, DataOutputStream dos) throws IOException
     {
-        /* These are for estimating whether we overshoot the MTU limit */
-        int estimate = 0;
-
         /* serialize the HeartBeatState */
         HeartBeatState hbState = epState.getHeartBeatState();
         HeartBeatState.serializer().serialize(hbState, dos);
@@ -155,26 +152,13 @@ public void serialize(EndpointState epState, DataOutputStream dos) throws IOExce
         /* serialize the map of ApplicationState objects */
         int size = epState.applicationState_.size();
         dos.writeInt(size);
-        if ( size > 0 )
-        {   
-            Set<String> keys = epState.applicationState_.keySet();
-            for( String key : keys )
+        for (String key : epState.applicationState_.keySet())
             {
-                if ( Gossiper.MAX_GOSSIP_PACKET_SIZE - dos.size() < estimate )
-                {
-                    logger_.info("@@@@ Breaking out to respect the MTU size in EndpointState serializer. Estimate is {} @@@@", estimate);;
-                    break;
-                }
-            
                 ApplicationState appState = epState.applicationState_.get(key);
-                if ( appState != null )
+            if (appState != null)
                 {
-                    int pre = dos.size();
                     dos.writeUTF(key);
                     ApplicationState.serializer().serialize(appState, dos);                    
-                    int post = dos.size();
-                    estimate = post - pre;
-                }                
             }
         }
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAckMessage.java b/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAckMessage.java
index ea565e65..a9b35068 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAckMessage.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestAckMessage.java
@@ -70,26 +70,16 @@
 {
     public void serialize(GossipDigestAckMessage gDigestAckMessage, DataOutputStream dos) throws IOException
     {
-        /* Use the helper to serialize the GossipDigestList */
-        boolean bContinue = GossipDigestSerializationHelper.serialize(gDigestAckMessage.gDigestList_, dos);
-        dos.writeBoolean(bContinue);
-        /* Use the EndpointState */
-        if ( bContinue )
-        {
+        GossipDigestSerializationHelper.serialize(gDigestAckMessage.gDigestList_, dos);
+        dos.writeBoolean(true); // 0.6 compatibility
             EndpointStatesSerializationHelper.serialize(gDigestAckMessage.epStateMap_, dos);            
         }
-    }
 
     public GossipDigestAckMessage deserialize(DataInputStream dis) throws IOException
     {
-        Map<InetAddress, EndpointState> epStateMap = new HashMap<InetAddress, EndpointState>();
         List<GossipDigest> gDigestList = GossipDigestSerializationHelper.deserialize(dis);                
-        boolean bContinue = dis.readBoolean();
-
-        if ( bContinue )
-        {
-            epStateMap = EndpointStatesSerializationHelper.deserialize(dis);                                    
-        }
+        dis.readBoolean(); // 0.6 compatibility
+        Map<InetAddress, EndpointState> epStateMap = EndpointStatesSerializationHelper.deserialize(dis);
         return new GossipDigestAckMessage(gDigestList, epStateMap);
     }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestSynMessage.java b/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestSynMessage.java
index 5ea8f5b2..30af5b5b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestSynMessage.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/gms/GossipDigestSynMessage.java
@@ -69,44 +69,24 @@ public GossipDigestSynMessage(String clusterId, List<GossipDigest> gDigests)
 {
     private static Logger logger_ = LoggerFactory.getLogger(GossipDigestSerializationHelper.class);
     
-    static boolean serialize(List<GossipDigest> gDigestList, DataOutputStream dos) throws IOException
+    static void serialize(List<GossipDigest> gDigestList, DataOutputStream dos) throws IOException
     {
-        boolean bVal = true;
-        int size = gDigestList.size();                        
-        dos.writeInt(size);
-        
-        int estimate = 0;            
+        dos.writeInt(gDigestList.size());
         for ( GossipDigest gDigest : gDigestList )
         {
-            if ( Gossiper.MAX_GOSSIP_PACKET_SIZE - dos.size() < estimate )
-            {
-                logger_.info("@@@@ Breaking out to respect the MTU size in GD @@@@");
-                bVal = false;
-                break;
-            }
-            int pre = dos.size();               
             GossipDigest.serializer().serialize( gDigest, dos );
-            int post = dos.size();
-            estimate = post - pre;
         }
-        return bVal;
     }
 
     static List<GossipDigest> deserialize(DataInputStream dis) throws IOException
     {
         int size = dis.readInt();            
-        List<GossipDigest> gDigests = new ArrayList<GossipDigest>();
+        List<GossipDigest> gDigests = new ArrayList<GossipDigest>(size);
         
         for ( int i = 0; i < size; ++i )
         {
-            if ( dis.available() == 0 )
-            {
-                logger_.info("Remaining bytes zero. Stopping deserialization of GossipDigests.");
-                break;
-            }
-                            
-            GossipDigest gDigest = GossipDigest.serializer().deserialize(dis);                
-            gDigests.add( gDigest );                
+            assert dis.available() > 0;
+            gDigests.add(GossipDigest.serializer().deserialize(dis));                
         }        
         return gDigests;
     }
@@ -116,45 +96,25 @@ static boolean serialize(List<GossipDigest> gDigestList, DataOutputStream dos) t
 {
     private static final Logger logger_ = LoggerFactory.getLogger(EndpointStatesSerializationHelper.class);
 
-    static boolean serialize(Map<InetAddress, EndpointState> epStateMap, DataOutputStream dos) throws IOException
+    static void serialize(Map<InetAddress, EndpointState> epStateMap, DataOutputStream dos) throws IOException
     {
-        boolean bVal = true;
-        int estimate = 0;                
-        int size = epStateMap.size();
-        dos.writeInt(size);
-
+        dos.writeInt(epStateMap.size());
         for (Entry<InetAddress, EndpointState> entry : epStateMap.entrySet())
         {
             InetAddress ep = entry.getKey();
-            if ( Gossiper.MAX_GOSSIP_PACKET_SIZE - dos.size() < estimate )
-            {
-                logger_.info("@@@@ Breaking out to respect the MTU size in EPS. Estimate is " + estimate + " @@@@");
-                bVal = false;
-                break;
-            }
-    
-            int pre = dos.size();
             CompactEndpointSerializationHelper.serialize(ep, dos);
             EndpointState.serializer().serialize(entry.getValue(), dos);
-            int post = dos.size();
-            estimate = post - pre;
         }
-        return bVal;
     }
 
     static Map<InetAddress, EndpointState> deserialize(DataInputStream dis) throws IOException
     {
         int size = dis.readInt();            
-        Map<InetAddress, EndpointState> epStateMap = new HashMap<InetAddress, EndpointState>();
+        Map<InetAddress, EndpointState> epStateMap = new HashMap<InetAddress, EndpointState>(size);
         
         for ( int i = 0; i < size; ++i )
         {
-            if ( dis.available() == 0 )
-            {
-                logger_.info("Remaining bytes zero. Stopping deserialization in EndpointState.");
-                break;
-            }
-            // int length = dis.readInt();            
+            assert dis.available() > 0;
             InetAddress ep = CompactEndpointSerializationHelper.deserialize(dis);
             EndpointState epState = EndpointState.serializer().deserialize(dis);
             epStateMap.put(ep, epState);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java b/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
index 4addd50e..b30d83a8 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/gms/Gossiper.java
@@ -102,7 +102,6 @@ public void run()
         }
     }
 
-    final static int MAX_GOSSIP_PACKET_SIZE = 1428;
     public final static int intervalInMillis_ = 1000;
     private static Logger logger_ = LoggerFactory.getLogger(Gossiper.class);
     public static final Gossiper instance = new Gossiper();
@@ -287,7 +286,7 @@ public int getCurrentGenerationNumber(InetAddress endpoint)
     Message makeGossipDigestSynMessage(List<GossipDigest> gDigests) throws IOException
     {
         GossipDigestSynMessage gDigestMessage = new GossipDigestSynMessage(DatabaseDescriptor.getClusterName(), gDigests);
-        ByteArrayOutputStream bos = new ByteArrayOutputStream(Gossiper.MAX_GOSSIP_PACKET_SIZE);
+        ByteArrayOutputStream bos = new ByteArrayOutputStream();
         DataOutputStream dos = new DataOutputStream( bos );
         GossipDigestSynMessage.serializer().serialize(gDigestMessage, dos);
         return new Message(localEndpoint_, StageManager.GOSSIP_STAGE, StorageService.Verb.GOSSIP_DIGEST_SYN, bos.toByteArray());
@@ -295,7 +294,7 @@ Message makeGossipDigestSynMessage(List<GossipDigest> gDigests) throws IOExcepti
 
     Message makeGossipDigestAckMessage(GossipDigestAckMessage gDigestAckMessage) throws IOException
     {
-        ByteArrayOutputStream bos = new ByteArrayOutputStream(Gossiper.MAX_GOSSIP_PACKET_SIZE);
+        ByteArrayOutputStream bos = new ByteArrayOutputStream();
         DataOutputStream dos = new DataOutputStream(bos);
         GossipDigestAckMessage.serializer().serialize(gDigestAckMessage, dos);
         if (logger_.isTraceEnabled())
@@ -305,7 +304,7 @@ Message makeGossipDigestAckMessage(GossipDigestAckMessage gDigestAckMessage) thr
 
     Message makeGossipDigestAck2Message(GossipDigestAck2Message gDigestAck2Message) throws IOException
     {
-        ByteArrayOutputStream bos = new ByteArrayOutputStream(Gossiper.MAX_GOSSIP_PACKET_SIZE);
+        ByteArrayOutputStream bos = new ByteArrayOutputStream();
         DataOutputStream dos = new DataOutputStream(bos);
         GossipDigestAck2Message.serializer().serialize(gDigestAck2Message, dos);
         return new Message(localEndpoint_, StageManager.GOSSIP_STAGE, StorageService.Verb.GOSSIP_DIGEST_ACK2, bos.toByteArray());
