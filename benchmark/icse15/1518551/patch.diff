diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/StatementPlanCacheTest.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/StatementPlanCacheTest.java
index d2ebd081..cde595d9 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/StatementPlanCacheTest.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/StatementPlanCacheTest.java
@@ -110,10 +110,7 @@ protected void setUp() throws SQLException  {
         cacheInPlanPS_TEXT = prepareStatement(
                 "SELECT COUNT(ID) FROM SYSCS_DIAG.STATEMENT_CACHE WHERE " +
                 "SCHEMANAME = ? AND SQL_TEXT = ?");
-        Statement s = createStatement();
-        s.execute("CALL SYSCS_UTIL.SYSCS_EMPTY_STATEMENT_CACHE()");
-        s.close();
-       
+        emptyStatementCache();
     }
     
     protected void tearDown() throws Exception {
diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java
index 4de4290b..074a04b5 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/XplainStatisticsTest.java
@@ -100,6 +100,17 @@ protected void decorateSQL(Statement s)
 	}
         private static long timeSuiteStarted;
 
+    protected void setUp() throws SQLException {
+        // DERBY-6306: Some of the statistics, especially those that give
+        // information about compilation timing, are sensitive to whether
+        // preparing a statement in fact compiles the statement or if it
+        // just fetches it from the statement cache. Empty the statement
+        // cache between each test case, so that they don't need to worry
+        // about statements lying around from earlier test cases affecting
+        // the results.
+        emptyStatementCache();
+    }
+
 	/**
 	 * Creates a variety of tables used by the various tests.
          * The tests use the same basic schema as the 'toursdb' sample
diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java
index a02aa35c..a9283dd2 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/junit/BaseJDBCTestCase.java
@@ -1045,6 +1045,19 @@ private void assertEscapedTableRowCount(String escapedTableName, int rowCount)
         s.close();
     }
 
+    /**
+     * Clear the contents of the statement cache. Useful if a test case
+     * needs to make sure that a statement is actually compiled and not
+     * just fetched from the statement cache.
+     *
+     * @throws SQLException if a database error happens
+     */
+    protected final void emptyStatementCache() throws SQLException {
+        Statement s = createStatement();
+        s.execute("CALL SYSCS_UTIL.SYSCS_EMPTY_STATEMENT_CACHE()");
+        closeStatement(s);
+    }
+
     /**
      * Execute a DROP TABLE command using the passed in tableName as-is
      * and the default connection.
