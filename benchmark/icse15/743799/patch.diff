diff --git a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java
index 372c4ee9..a1aff18b 100644
--- a/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java
+++ b/db/derby/code/branches/10.4/java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java
@@ -259,10 +259,29 @@ public static int reclaimSpace(BaseDataFileFactory dataFactory,
             }
 
 			if (work.incrAttempts() < 3) // retry this for serveral times
+            {
 				return Serviceable.REQUEUE;
+            }
 			else
+            {
+                // If code gets here, the space will be lost forever, and
+                // can only be reclaimed by a full offline compress of the
+                // table/index.
+
+                if (SanityManager.DEBUG)
+                {
+                    if (SanityManager.DEBUG_ON(DaemonService.DaemonTrace))
+                    {
+                        SanityManager.DEBUG(
+                            DaemonService.DaemonTrace, 
+                            "  gave up after 3 tries to get container lock " + 
+                            work);
+                    }
+                }
+
 				return Serviceable.DONE;
 		}	
+		}	
 
 		// At this point, container is opened with IX lock.
 
@@ -281,8 +300,8 @@ public static int reclaimSpace(BaseDataFileFactory dataFactory,
 			return Serviceable.DONE;
 		}
 
-		// We are reclaiming row space or long column.  First get an xlock on the
-		// head row piece.
+		// We are reclaiming row space or long column.  
+		// First get an xlock on the head row piece.
 		RecordHandle headRecord = work.getHeadRowHandle();
 
 		if (!container_rlock.lockRecordForWrite(
@@ -291,10 +310,28 @@ public static int reclaimSpace(BaseDataFileFactory dataFactory,
 			// cannot get the row lock, retry
 			tran.abort();
 			if (work.incrAttempts() < 3)
+            {
 				return Serviceable.REQUEUE;
+            }
 			else
+            {
+                // If code gets here, the space will be lost forever, and
+                // can only be reclaimed by a full offline compress of the
+                // table/index.
+
+                if (SanityManager.DEBUG)
+                {
+                    if (SanityManager.DEBUG_ON(DaemonService.DaemonTrace))
+                    {
+                        SanityManager.DEBUG(
+                            DaemonService.DaemonTrace, 
+                            "  gave up after 3 tries to get row lock " + 
+                            work);
+                    }
+                }
 				return Serviceable.DONE;
 		}
+		}
 
 		// The exclusive lock on the head row has been gotten.
 
@@ -332,19 +369,33 @@ public static int reclaimSpace(BaseDataFileFactory dataFactory,
 			// operation.  
 			// 
 			long headPageId = ((PageKey)headRecord.getPageId()).getPageNumber();
+			//DERBY-4050 - we wait for the page so we don't have to retry.
+			// prior to the 4050 fix, we called getPageNoWait and just 
+			// retried 3 times.  This left unreclaimed space if we were 
+			// not successful after three tries.
 			StoredPage headRowPage = 
-				(StoredPage)containerHdl.getPageNoWait(headPageId);
-
+				(StoredPage)containerHdl.getPage(headPageId);
 			if (headRowPage == null)
 			{
-				// Cannot get page no wait, try again later.
+				// It is not clear why headRowPage would be null,
+				// but logging the failure in case it happens.
+				// If code gets here, the space will be lost forever, and
+				// can only be reclaimed by a full offline compress of the
+				// table/index.
+
+				if (SanityManager.DEBUG)
+				{
+					if (SanityManager.DEBUG_ON(DaemonService.DaemonTrace))
+					{
+						SanityManager.DEBUG(
+								DaemonService.DaemonTrace, 
+								"gave up because hadRowPage was null" + 
+								work);
+					}
+				}
 				tran.abort();
-				if (work.incrAttempts() < 3)
-					return Serviceable.REQUEUE;
-				else
 					return Serviceable.DONE;
 			}
-
 			try
 			{
 				headRowPage.removeOrphanedColumnChain(work, containerHdl);
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java
index e69de29b..5e016b4c 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java
@@ -0,0 +1,141 @@
+/*
+ *
+ * Derby - Class org.apache.derbyTesting.functionTests.tests.store.ClobReclamationTest
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ */
+package org.apache.derbyTesting.functionTests.tests.store;
+
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+import java.util.Properties;
+
+import junit.framework.Test;
+
+import org.apache.derbyTesting.functionTests.util.Formatters;
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
+import org.apache.derbyTesting.junit.JDBC;
+import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
+import org.apache.derbyTesting.junit.TestConfiguration;
+
+/**
+ * Verify that space gets reclaimed for multi-threaded Clob updates
+ * 
+ */
+public class ClobReclamationTest extends BaseJDBCTestCase {
+
+    // Need to adjust NUM_THREADS and expectedNumAllocated.
+    // For 2 threads expectedNumAllocated is 5
+    // For 100 threads expectedNumAllocated is 201
+    private static final int NUM_THREADS = 2;
+
+    private static int expectedNumAllocated = 5;
+
+    public ClobReclamationTest(String name) {
+        super(name);
+
+    }
+
+    /**
+     * Two threads simultaneously updating a table. Thread 1 updates row 1 with
+     * a long value (>32K) Thread 2 updates row with a short clob ("hello");
+     * NUMALLOCATEDPAGES should be only 3 after each does 500 updates
+     * 
+     * @throws SQLException
+     * @throws InterruptedException
+     */
+    public void testMultiThreadedUpdate() throws SQLException,
+            InterruptedException {
+        // need to do a getConnection or we get a
+        // junit assertion that driver is not registered.
+        Connection conn = getConnection();
+        final String updateString = Formatters.repeatChar("a", 33000);
+        Thread[] threads = new Thread[NUM_THREADS];
+        for (int i = 0; i < NUM_THREADS; i++) {
+            final int key = i + 1;
+            threads[i] = new Thread() {
+                public void run() {
+                    try {
+                        Connection conn = openDefaultConnection();
+                        ClobReclamationTest.fiveHundredUpdates(conn,
+                                updateString, key);
+                    } catch (SQLException e) {
+                        fail(e.getMessage());
+                    }
+                }
+            };
+        }
+        for (int i = 0; i < NUM_THREADS; i++) {
+            threads[i].start();
+        }
+        for (int i = 0; i < NUM_THREADS; i++) {
+            threads[i].join();
+        }
+
+        Statement s = createStatement();
+        // Check the space table 
+        // Should not have grown.
+        ResultSet rs = s.executeQuery("SELECT NUMALLOCATEDPAGES FROM "
+                + " new org.apache.derby.diag.SpaceTable('APP','CLOBTAB') t"
+                + " WHERE CONGLOMERATENAME = 'CLOBTAB'");
+        JDBC.assertFullResultSet(rs, new String[][] { { ""
+                + expectedNumAllocated } });
+    }
+
+    private static void fiveHundredUpdates(Connection conn,
+            String updateString, int key) throws SQLException {
+        PreparedStatement ps = conn
+                .prepareStatement("UPDATE CLOBTAB SET C = ? WHERE I = ?");
+        for (int i = 0; i < 500; i++) {
+            ps.setString(1, updateString);
+            ps.setInt(2, key);
+            ps.executeUpdate();
+        }
+    }
+
+    public static Test suite() {
+
+        Properties sysProps = new Properties();
+        sysProps.put("derby.debug.true", "DaemonTrace");
+        Test suite = TestConfiguration.embeddedSuite(ClobReclamationTest.class);
+        return new CleanDatabaseTestSetup(new SystemPropertyTestSetup(suite,
+                sysProps,true)) {
+            /**
+             * Creates the table used in the test cases.
+             * 
+             */
+            protected void decorateSQL(Statement s) throws SQLException {
+                Connection conn = s.getConnection();
+                s
+                        .executeUpdate("CREATE TABLE CLOBTAB (I INT  PRIMARY KEY NOT NULL, c CLOB)");
+                PreparedStatement ps = conn
+                        .prepareStatement("INSERT INTO CLOBTAB VALUES(?,?)");
+                String insertString = "hello";
+                for (int i = 1; i <= NUM_THREADS; i++) {
+                    ps.setInt(1, i);
+                    ps.setString(2, insertString);
+                    ps.executeUpdate();
+                }
+            }
+
+        };
+
+    }
+}
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java
index f6e336b6..06461ac3 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java
@@ -58,6 +58,7 @@ public static Test suite() {
         suite.addTest(PositionedStoreStreamTest.suite());
         suite.addTest(BackupRestoreTest.suite());
         suite.addTest(OfflineBackupTest.suite());
+        suite.addTest(ClobReclamationTest.suite());
         // Encryption only supported for Derby in J2SE/J2EE environments.
         // J2ME (JSR169) does not support encryption.
         if (JDBC.vmSupportsJDBC3()) {
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java
index 1241e454..f01542cd 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/junit/SystemPropertyTestSetup.java
@@ -36,6 +36,7 @@
 	
 	protected Properties newValues;
 	private Properties oldValues;
+	private boolean staticProperties;
 	
 	/**
 	 * Create a test decorator that sets and restores the passed
@@ -45,13 +46,30 @@
 	 * @param newValues properties to be set
 	 */
 	public SystemPropertyTestSetup(Test test,
-			Properties newValues)
+			Properties newValues,
+			boolean staticProperties)
 	{
 		super(test);
 		this.newValues = newValues;
 		this.oldValues = new Properties();
+		this.staticProperties = staticProperties;
 	}
 
+	/**
+	 * Create a test decorator that sets and restores 
+	 * System properties.  Do not shutdown engine after
+	 * setting properties
+	 * @param test
+	 * @param newValues
+	 */
+	public SystemPropertyTestSetup(Test test,
+			Properties newValues)
+	{
+		super(test);
+		this.newValues = newValues;
+		this.oldValues = new Properties();
+		this.staticProperties = false;
+	}
 	/**
 	 * For each property store the current value and
 	 * replace it with the new value, unless there is no change.
@@ -60,6 +78,9 @@ protected void setUp()
     throws java.lang.Exception
     {
     	setProperties(newValues);
+    	// shutdown engine so static properties take effect
+    	if (staticProperties)
+    		TestConfiguration.getCurrent().shutdownEngine();
     }
 
     /**
@@ -78,6 +99,9 @@ protected void tearDown()
        	}
     	// and then reset nay old values
     	setProperties(oldValues);
+    	// shutdown engine to restore any static properties
+    	if (staticProperties)
+    		TestConfiguration.getCurrent().shutdownEngine();
         newValues = null;
         oldValues = null;
     }
