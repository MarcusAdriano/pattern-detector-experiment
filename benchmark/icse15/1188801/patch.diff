diff --git a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/TestAssertions.java b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/TestAssertions.java
index ce51fd34..afbae14c 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/TestAssertions.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/TestAssertions.java
@@ -25,15 +25,6 @@
 
 public class TestAssertions extends LuceneTestCase {
 
-  public void testBasics() {
-    try {
-      assert Boolean.FALSE.booleanValue();
-      fail("assertions are not enabled!");
-    } catch (AssertionError e) {
-      assert Boolean.TRUE.booleanValue();
-    }
-  }
-  
   static class TestAnalyzer1 extends Analyzer {
     @Override
     public final TokenStream tokenStream(String s, Reader r) { return null; }
@@ -82,17 +73,22 @@ public void testTokenStreams() {
     
     new TestAnalyzer2();
     
+    boolean doFail = false;
     try {
       new TestAnalyzer3();
-      fail("TestAnalyzer3 should fail assertion");
+      doFail = true;
     } catch (AssertionError e) {
+      // expected
     }
+    assertFalse("TestAnalyzer3 should fail assertion", doFail);
     
     try {
       new TestAnalyzer4();
-      fail("TestAnalyzer4 should fail assertion");
+      doFail = true;
     } catch (AssertionError e) {
+      // expected
     }
+    assertFalse("TestAnalyzer4 should fail assertion", doFail);
     
     new TestTokenStream1();
     
@@ -100,9 +96,11 @@ public void testTokenStreams() {
     
     try {
       new TestTokenStream3();
-      fail("TestTokenStream3 should fail assertion");
+      doFail = true;
     } catch (AssertionError e) {
+      // expected
     }
+    assertFalse("TestTokenStream3 should fail assertion", doFail);
   }
 
 }
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestSegmentMerger.java b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestSegmentMerger.java
index dc234c87..4e821393 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestSegmentMerger.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestSegmentMerger.java
@@ -147,12 +147,14 @@ public void testInvalidFilesToCreateCompound() throws Exception {
     
     // Assert that SM fails if .del exists
     SegmentMerger sm = new SegmentMerger(dir, 1, "a", null, null, null);
+    boolean doFail = false;
     try {
       sm.createCompoundFile("b1", w.segmentInfos.info(0));
-      fail("should not have been able to create a .cfs with .del and .s* files");
+      doFail = true;
     } catch (AssertionError e) {
       // expected
     }
+    assertFalse("should not have been able to create a .cfs with .del and .s* files", doFail);
     
     // Create an index w/ .s*
     w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));
@@ -165,12 +167,15 @@ public void testInvalidFilesToCreateCompound() throws Exception {
     r.close();
     
     // Assert that SM fails if .s* exists
+    SegmentInfos sis = new SegmentInfos();
+    sis.read(dir);
     try {
-      sm.createCompoundFile("b2", w.segmentInfos.info(0));
-      fail("should not have been able to create a .cfs with .del and .s* files");
+      sm.createCompoundFile("b2", sis.info(0));
+      doFail = true;
     } catch (AssertionError e) {
       // expected
     }
+    assertFalse("should not have been able to create a .cfs with .del and .s* files", doFail);
 
     dir.close();
   }
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java b/lucene/dev/branches/branch_3x/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java
index ac38ea8f..ff9a79b1 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java
@@ -245,6 +245,9 @@ public static void beforeClassLuceneTestCaseJ4() {
     timeZone = TEST_TIMEZONE.equals("random") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);
     TimeZone.setDefault(timeZone);
     testsFailed = false;
+    
+    // verify assertions are enabled (do last, for smooth cleanup)
+    assertTrue("assertions are not enabled!", assertionsEnabled());
   }
   
   @AfterClass
@@ -1284,4 +1287,15 @@ private static String reproduceWithExtraParams() {
   
   @Ignore("just a hack")
   public final void alwaysIgnoredTestMethod() {}
+  
+  /** check if assertions are enabled */
+  private static boolean assertionsEnabled() {
+    try {
+      assert Boolean.FALSE.booleanValue();
+      return false; // should never get here
+    } catch (AssertionError e) {
+      return true;
+    }
+  }
+  
 }
