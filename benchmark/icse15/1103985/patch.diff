diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/response/JSONResponseWriter.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/response/JSONResponseWriter.java
index 3d6d7a6e..30f8309f 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/response/JSONResponseWriter.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/response/JSONResponseWriter.java
@@ -618,7 +618,7 @@ public void writeStr(String name, String val, boolean needsEscaping) throws IOEx
 
       for (int i=0; i<val.length(); i++) {
         char ch = val.charAt(i);
-        if ((ch > '#' && ch != '\\' && ch !=  '\u2028') || ch==' ') { // fast path
+        if ((ch > '#' && ch != '\\' && ch < '\u2028') || ch == ' ') { // fast path
           writer.write(ch);
           continue;
         }
@@ -633,7 +633,10 @@ public void writeStr(String name, String val, boolean needsEscaping) throws IOEx
           case '\t': writer.write('\\'); writer.write('t'); break;
           case '\b': writer.write('\\'); writer.write('b'); break;
           case '\f': writer.write('\\'); writer.write('f'); break;
-          case '\u2028': unicodeEscape(writer,ch); break;
+          case '\u2028': // fallthrough
+          case '\u2029':
+            unicodeEscape(writer,ch);
+            break;
           // case '/':
           default: {
             if (ch <= 0x1F) {
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/request/JSONWriterTest.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/request/JSONWriterTest.java
index e8f84560..8616ec29 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/request/JSONWriterTest.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/request/JSONWriterTest.java
@@ -72,12 +72,12 @@ public void testJSON() throws IOException {
 
     StringWriter buf = new StringWriter();
     NamedList nl = new NamedList();
-    nl.add("data1", "hello");
+    nl.add("data1", "he\u2028llo\u2029!");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)
     nl.add(null, 42);
     rsp.add("nl", nl);
 
     w.write(buf, req, rsp);
-    assertEquals(buf.toString(), "{\"nl\":[[\"data1\",\"hello\"],[null,42]]}");
+    assertEquals("{\"nl\":[[\"data1\",\"he\\u2028llo\\u2029!\"],[null,42]]}", buf.toString());
     req.close();
   }
   
