diff --git a/incubator/cassandra/trunk/src/org/apache/cassandra/db/ColumnComparatorFactory.java b/incubator/cassandra/trunk/src/org/apache/cassandra/db/ColumnComparatorFactory.java
index 3f4e2d6b..410a404b 100644
--- a/incubator/cassandra/trunk/src/org/apache/cassandra/db/ColumnComparatorFactory.java
+++ b/incubator/cassandra/trunk/src/org/apache/cassandra/db/ColumnComparatorFactory.java
@@ -41,7 +41,7 @@
 	{
 		Comparator<IColumn> columnComparator = timestampComparator_;
 
-		switch(comparatorType)
+        switch (comparatorType)
 		{
 			case NAME:
 				columnComparator = nameComparator_;
@@ -61,23 +61,17 @@
 	{
 		ComparatorType comparatorType = ComparatorType.NAME;
 
-		if(comparatorTypeInt == ComparatorType.NAME.ordinal())
+        if (comparatorTypeInt == ComparatorType.NAME.ordinal())
 		{
 			comparatorType = ComparatorType.NAME;
 		}
-		else if(comparatorTypeInt == ComparatorType.TIMESTAMP.ordinal())
+        else if (comparatorTypeInt == ComparatorType.TIMESTAMP.ordinal())
 		{
 			comparatorType = ComparatorType.TIMESTAMP;
 		}
 		return getComparator(comparatorType);
 	}
 
-	public static void main(String[] args)
-	{
-		IColumn col1 = new Column("Column-9");
-		IColumn col2 = new Column("Column-10");
-		System.out.println("Result of compare: " + getComparator(ComparatorType.NAME).compare(col1, col2));
-	}
 }
 
 abstract class AbstractColumnComparator implements Comparator<IColumn>, Serializable
@@ -105,18 +99,19 @@ public AbstractColumnComparator(ColumnComparatorFactory.ComparatorType comparato
 	/* if the time-stamps are the same then sort by names */
     public int compare(IColumn column1, IColumn column2)
     {
+        assert column1.getClass() == column2.getClass();
     	/* inverse sort by time to get hte latest first */
     	long result = column2.timestamp() - column1.timestamp();
     	int finalResult = 0;
-    	if(result == 0)
+        if (result == 0)
     	{
     		result = column1.name().compareTo(column2.name());
     	}
-    	if(result > 0)
+        if (result > 0)
     	{
     		finalResult = 1;
     	}
-    	if( result < 0 )
+        if (result < 0)
     	{
     		finalResult = -1;
     	}
@@ -134,18 +129,19 @@ public int compare(IColumn column1, IColumn column2)
     /* if the names are the same then sort by time-stamps */
     public int compare(IColumn column1, IColumn column2)
     {
+        assert column1.getClass() == column2.getClass();
     	long result = column1.name().compareTo(column2.name());
     	int finalResult = 0;
-    	if(result == 0)
+        if (result == 0 && (column1 instanceof Column))
     	{
-    		/* inverse sort by time to get hte latest first */
+            /* inverse sort by time to get the latest first */
     		result = column2.timestamp() - column1.timestamp();
     	}
-    	if(result > 0)
+        if (result > 0)
     	{
     		finalResult = 1;
     	}
-    	if( result < 0 )
+        if (result < 0)
     	{
     		finalResult = -1;
     	}
