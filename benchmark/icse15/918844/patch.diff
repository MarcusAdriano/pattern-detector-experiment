diff --git a/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationRequest.java b/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationRequest.java
index e4c07a0c..733fc425 100644
--- a/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationRequest.java
+++ b/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/AuthenticationRequest.java
@@ -283,15 +283,15 @@ public void read(TProtocol iprot) throws TException {
         case 1: // CREDENTIALS
           if (field.type == TType.MAP) {
             {
-              TMap _map16 = iprot.readMapBegin();
-              this.credentials = new HashMap<String,String>(2*_map16.size);
-              for (int _i17 = 0; _i17 < _map16.size; ++_i17)
+              TMap _map20 = iprot.readMapBegin();
+              this.credentials = new HashMap<String,String>(2*_map20.size);
+              for (int _i21 = 0; _i21 < _map20.size; ++_i21)
               {
-                String _key18;
-                String _val19;
-                _key18 = iprot.readString();
-                _val19 = iprot.readString();
-                this.credentials.put(_key18, _val19);
+                String _key22;
+                String _val23;
+                _key22 = iprot.readString();
+                _val23 = iprot.readString();
+                this.credentials.put(_key22, _val23);
               }
               iprot.readMapEnd();
             }
@@ -318,10 +318,10 @@ public void write(TProtocol oprot) throws TException {
       oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
       {
         oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.credentials.size()));
-        for (Map.Entry<String, String> _iter20 : this.credentials.entrySet())
+        for (Map.Entry<String, String> _iter24 : this.credentials.entrySet())
         {
-          oprot.writeString(_iter20.getKey());
-          oprot.writeString(_iter20.getValue());
+          oprot.writeString(_iter24.getKey());
+          oprot.writeString(_iter24.getValue());
         }
         oprot.writeMapEnd();
       }
diff --git a/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java b/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java
index 279a1541..24a37ede 100644
--- a/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java
+++ b/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Cassandra.java
@@ -4843,14 +4843,14 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.LIST) {
               {
-                TList _list21 = iprot.readListBegin();
-                this.success = new ArrayList<ColumnOrSuperColumn>(_list21.size);
-                for (int _i22 = 0; _i22 < _list21.size; ++_i22)
+                TList _list25 = iprot.readListBegin();
+                this.success = new ArrayList<ColumnOrSuperColumn>(_list25.size);
+                for (int _i26 = 0; _i26 < _list25.size; ++_i26)
                 {
-                  ColumnOrSuperColumn _elem23;
-                  _elem23 = new ColumnOrSuperColumn();
-                  _elem23.read(iprot);
-                  this.success.add(_elem23);
+                  ColumnOrSuperColumn _elem27;
+                  _elem27 = new ColumnOrSuperColumn();
+                  _elem27.read(iprot);
+                  this.success.add(_elem27);
                 }
                 iprot.readListEnd();
               }
@@ -4900,9 +4900,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
-          for (ColumnOrSuperColumn _iter24 : this.success)
+          for (ColumnOrSuperColumn _iter28 : this.success)
           {
-            _iter24.write(oprot);
+            _iter28.write(oprot);
           }
           oprot.writeListEnd();
         }
@@ -5441,13 +5441,13 @@ public void read(TProtocol iprot) throws TException {
           case 2: // KEYS
             if (field.type == TType.LIST) {
               {
-                TList _list25 = iprot.readListBegin();
-                this.keys = new ArrayList<String>(_list25.size);
-                for (int _i26 = 0; _i26 < _list25.size; ++_i26)
+                TList _list29 = iprot.readListBegin();
+                this.keys = new ArrayList<String>(_list29.size);
+                for (int _i30 = 0; _i30 < _list29.size; ++_i30)
                 {
-                  String _elem27;
-                  _elem27 = iprot.readString();
-                  this.keys.add(_elem27);
+                  String _elem31;
+                  _elem31 = iprot.readString();
+                  this.keys.add(_elem31);
                 }
                 iprot.readListEnd();
               }
@@ -5494,9 +5494,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(KEYS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRING, this.keys.size()));
-          for (String _iter28 : this.keys)
+          for (String _iter32 : this.keys)
           {
-            oprot.writeString(_iter28);
+            oprot.writeString(_iter32);
           }
           oprot.writeListEnd();
         }
@@ -5978,16 +5978,16 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.MAP) {
               {
-                TMap _map29 = iprot.readMapBegin();
-                this.success = new HashMap<String,ColumnOrSuperColumn>(2*_map29.size);
-                for (int _i30 = 0; _i30 < _map29.size; ++_i30)
+                TMap _map33 = iprot.readMapBegin();
+                this.success = new HashMap<String,ColumnOrSuperColumn>(2*_map33.size);
+                for (int _i34 = 0; _i34 < _map33.size; ++_i34)
                 {
-                  String _key31;
-                  ColumnOrSuperColumn _val32;
-                  _key31 = iprot.readString();
-                  _val32 = new ColumnOrSuperColumn();
-                  _val32.read(iprot);
-                  this.success.put(_key31, _val32);
+                  String _key35;
+                  ColumnOrSuperColumn _val36;
+                  _key35 = iprot.readString();
+                  _val36 = new ColumnOrSuperColumn();
+                  _val36.read(iprot);
+                  this.success.put(_key35, _val36);
                 }
                 iprot.readMapEnd();
               }
@@ -6037,10 +6037,10 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.success.size()));
-          for (Map.Entry<String, ColumnOrSuperColumn> _iter33 : this.success.entrySet())
+          for (Map.Entry<String, ColumnOrSuperColumn> _iter37 : this.success.entrySet())
           {
-            oprot.writeString(_iter33.getKey());
-            _iter33.getValue().write(oprot);
+            oprot.writeString(_iter37.getKey());
+            _iter37.getValue().write(oprot);
           }
           oprot.writeMapEnd();
         }
@@ -6644,13 +6644,13 @@ public void read(TProtocol iprot) throws TException {
           case 2: // KEYS
             if (field.type == TType.LIST) {
               {
-                TList _list34 = iprot.readListBegin();
-                this.keys = new ArrayList<String>(_list34.size);
-                for (int _i35 = 0; _i35 < _list34.size; ++_i35)
+                TList _list38 = iprot.readListBegin();
+                this.keys = new ArrayList<String>(_list38.size);
+                for (int _i39 = 0; _i39 < _list38.size; ++_i39)
                 {
-                  String _elem36;
-                  _elem36 = iprot.readString();
-                  this.keys.add(_elem36);
+                  String _elem40;
+                  _elem40 = iprot.readString();
+                  this.keys.add(_elem40);
                 }
                 iprot.readListEnd();
               }
@@ -6705,9 +6705,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(KEYS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRING, this.keys.size()));
-          for (String _iter37 : this.keys)
+          for (String _iter41 : this.keys)
           {
-            oprot.writeString(_iter37);
+            oprot.writeString(_iter41);
           }
           oprot.writeListEnd();
         }
@@ -7209,26 +7209,26 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.MAP) {
               {
-                TMap _map38 = iprot.readMapBegin();
-                this.success = new HashMap<String,List<ColumnOrSuperColumn>>(2*_map38.size);
-                for (int _i39 = 0; _i39 < _map38.size; ++_i39)
+                TMap _map42 = iprot.readMapBegin();
+                this.success = new HashMap<String,List<ColumnOrSuperColumn>>(2*_map42.size);
+                for (int _i43 = 0; _i43 < _map42.size; ++_i43)
                 {
-                  String _key40;
-                  List<ColumnOrSuperColumn> _val41;
-                  _key40 = iprot.readString();
+                  String _key44;
+                  List<ColumnOrSuperColumn> _val45;
+                  _key44 = iprot.readString();
                   {
-                    TList _list42 = iprot.readListBegin();
-                    _val41 = new ArrayList<ColumnOrSuperColumn>(_list42.size);
-                    for (int _i43 = 0; _i43 < _list42.size; ++_i43)
+                    TList _list46 = iprot.readListBegin();
+                    _val45 = new ArrayList<ColumnOrSuperColumn>(_list46.size);
+                    for (int _i47 = 0; _i47 < _list46.size; ++_i47)
                     {
-                      ColumnOrSuperColumn _elem44;
-                      _elem44 = new ColumnOrSuperColumn();
-                      _elem44.read(iprot);
-                      _val41.add(_elem44);
+                      ColumnOrSuperColumn _elem48;
+                      _elem48 = new ColumnOrSuperColumn();
+                      _elem48.read(iprot);
+                      _val45.add(_elem48);
                     }
                     iprot.readListEnd();
                   }
-                  this.success.put(_key40, _val41);
+                  this.success.put(_key44, _val45);
                 }
                 iprot.readMapEnd();
               }
@@ -7278,14 +7278,14 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, this.success.size()));
-          for (Map.Entry<String, List<ColumnOrSuperColumn>> _iter45 : this.success.entrySet())
+          for (Map.Entry<String, List<ColumnOrSuperColumn>> _iter49 : this.success.entrySet())
           {
-            oprot.writeString(_iter45.getKey());
+            oprot.writeString(_iter49.getKey());
             {
-              oprot.writeListBegin(new TList(TType.STRUCT, _iter45.getValue().size()));
-              for (ColumnOrSuperColumn _iter46 : _iter45.getValue())
+              oprot.writeListBegin(new TList(TType.STRUCT, _iter49.getValue().size()));
+              for (ColumnOrSuperColumn _iter50 : _iter49.getValue())
               {
-                _iter46.write(oprot);
+                _iter50.write(oprot);
               }
               oprot.writeListEnd();
             }
@@ -9739,14 +9739,14 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.LIST) {
               {
-                TList _list47 = iprot.readListBegin();
-                this.success = new ArrayList<KeySlice>(_list47.size);
-                for (int _i48 = 0; _i48 < _list47.size; ++_i48)
+                TList _list51 = iprot.readListBegin();
+                this.success = new ArrayList<KeySlice>(_list51.size);
+                for (int _i52 = 0; _i52 < _list51.size; ++_i52)
                 {
-                  KeySlice _elem49;
-                  _elem49 = new KeySlice();
-                  _elem49.read(iprot);
-                  this.success.add(_elem49);
+                  KeySlice _elem53;
+                  _elem53 = new KeySlice();
+                  _elem53.read(iprot);
+                  this.success.add(_elem53);
                 }
                 iprot.readListEnd();
               }
@@ -9796,9 +9796,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
-          for (KeySlice _iter50 : this.success)
+          for (KeySlice _iter54 : this.success)
           {
-            _iter50.write(oprot);
+            _iter54.write(oprot);
           }
           oprot.writeListEnd();
         }
@@ -10969,14 +10969,14 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.LIST) {
               {
-                TList _list51 = iprot.readListBegin();
-                this.success = new ArrayList<KeySlice>(_list51.size);
-                for (int _i52 = 0; _i52 < _list51.size; ++_i52)
+                TList _list55 = iprot.readListBegin();
+                this.success = new ArrayList<KeySlice>(_list55.size);
+                for (int _i56 = 0; _i56 < _list55.size; ++_i56)
                 {
-                  KeySlice _elem53;
-                  _elem53 = new KeySlice();
-                  _elem53.read(iprot);
-                  this.success.add(_elem53);
+                  KeySlice _elem57;
+                  _elem57 = new KeySlice();
+                  _elem57.read(iprot);
+                  this.success.add(_elem57);
                 }
                 iprot.readListEnd();
               }
@@ -11026,9 +11026,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
-          for (KeySlice _iter54 : this.success)
+          for (KeySlice _iter58 : this.success)
           {
-            _iter54.write(oprot);
+            _iter58.write(oprot);
           }
           oprot.writeListEnd();
         }
@@ -12734,26 +12734,26 @@ public void read(TProtocol iprot) throws TException {
           case 3: // CFMAP
             if (field.type == TType.MAP) {
               {
-                TMap _map55 = iprot.readMapBegin();
-                this.cfmap = new HashMap<String,List<ColumnOrSuperColumn>>(2*_map55.size);
-                for (int _i56 = 0; _i56 < _map55.size; ++_i56)
+                TMap _map59 = iprot.readMapBegin();
+                this.cfmap = new HashMap<String,List<ColumnOrSuperColumn>>(2*_map59.size);
+                for (int _i60 = 0; _i60 < _map59.size; ++_i60)
                 {
-                  String _key57;
-                  List<ColumnOrSuperColumn> _val58;
-                  _key57 = iprot.readString();
+                  String _key61;
+                  List<ColumnOrSuperColumn> _val62;
+                  _key61 = iprot.readString();
                   {
-                    TList _list59 = iprot.readListBegin();
-                    _val58 = new ArrayList<ColumnOrSuperColumn>(_list59.size);
-                    for (int _i60 = 0; _i60 < _list59.size; ++_i60)
+                    TList _list63 = iprot.readListBegin();
+                    _val62 = new ArrayList<ColumnOrSuperColumn>(_list63.size);
+                    for (int _i64 = 0; _i64 < _list63.size; ++_i64)
                     {
-                      ColumnOrSuperColumn _elem61;
-                      _elem61 = new ColumnOrSuperColumn();
-                      _elem61.read(iprot);
-                      _val58.add(_elem61);
+                      ColumnOrSuperColumn _elem65;
+                      _elem65 = new ColumnOrSuperColumn();
+                      _elem65.read(iprot);
+                      _val62.add(_elem65);
                     }
                     iprot.readListEnd();
                   }
-                  this.cfmap.put(_key57, _val58);
+                  this.cfmap.put(_key61, _val62);
                 }
                 iprot.readMapEnd();
               }
@@ -12797,14 +12797,14 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(CFMAP_FIELD_DESC);
         {
           oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, this.cfmap.size()));
-          for (Map.Entry<String, List<ColumnOrSuperColumn>> _iter62 : this.cfmap.entrySet())
+          for (Map.Entry<String, List<ColumnOrSuperColumn>> _iter66 : this.cfmap.entrySet())
           {
-            oprot.writeString(_iter62.getKey());
+            oprot.writeString(_iter66.getKey());
             {
-              oprot.writeListBegin(new TList(TType.STRUCT, _iter62.getValue().size()));
-              for (ColumnOrSuperColumn _iter63 : _iter62.getValue())
+              oprot.writeListBegin(new TList(TType.STRUCT, _iter66.getValue().size()));
+              for (ColumnOrSuperColumn _iter67 : _iter66.getValue())
               {
-                _iter63.write(oprot);
+                _iter67.write(oprot);
               }
               oprot.writeListEnd();
             }
@@ -14822,38 +14822,38 @@ public void read(TProtocol iprot) throws TException {
           case 2: // MUTATION_MAP
             if (field.type == TType.MAP) {
               {
-                TMap _map64 = iprot.readMapBegin();
-                this.mutation_map = new HashMap<String,Map<String,List<Mutation>>>(2*_map64.size);
-                for (int _i65 = 0; _i65 < _map64.size; ++_i65)
-                {
-                  String _key66;
-                  Map<String,List<Mutation>> _val67;
-                  _key66 = iprot.readString();
-                  {
                     TMap _map68 = iprot.readMapBegin();
-                    _val67 = new HashMap<String,List<Mutation>>(2*_map68.size);
+                this.mutation_map = new HashMap<String,Map<String,List<Mutation>>>(2*_map68.size);
                     for (int _i69 = 0; _i69 < _map68.size; ++_i69)
                     {
                       String _key70;
-                      List<Mutation> _val71;
+                  Map<String,List<Mutation>> _val71;
                       _key70 = iprot.readString();
                       {
-                        TList _list72 = iprot.readListBegin();
-                        _val71 = new ArrayList<Mutation>(_list72.size);
-                        for (int _i73 = 0; _i73 < _list72.size; ++_i73)
+                    TMap _map72 = iprot.readMapBegin();
+                    _val71 = new HashMap<String,List<Mutation>>(2*_map72.size);
+                    for (int _i73 = 0; _i73 < _map72.size; ++_i73)
+                    {
+                      String _key74;
+                      List<Mutation> _val75;
+                      _key74 = iprot.readString();
+                      {
+                        TList _list76 = iprot.readListBegin();
+                        _val75 = new ArrayList<Mutation>(_list76.size);
+                        for (int _i77 = 0; _i77 < _list76.size; ++_i77)
                         {
-                          Mutation _elem74;
-                          _elem74 = new Mutation();
-                          _elem74.read(iprot);
-                          _val71.add(_elem74);
+                          Mutation _elem78;
+                          _elem78 = new Mutation();
+                          _elem78.read(iprot);
+                          _val75.add(_elem78);
                         }
                         iprot.readListEnd();
                       }
-                      _val67.put(_key70, _val71);
+                      _val71.put(_key74, _val75);
                     }
                     iprot.readMapEnd();
                   }
-                  this.mutation_map.put(_key66, _val67);
+                  this.mutation_map.put(_key70, _val71);
                 }
                 iprot.readMapEnd();
               }
@@ -14892,19 +14892,19 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(MUTATION_MAP_FIELD_DESC);
         {
           oprot.writeMapBegin(new TMap(TType.STRING, TType.MAP, this.mutation_map.size()));
-          for (Map.Entry<String, Map<String,List<Mutation>>> _iter75 : this.mutation_map.entrySet())
+          for (Map.Entry<String, Map<String,List<Mutation>>> _iter79 : this.mutation_map.entrySet())
           {
-            oprot.writeString(_iter75.getKey());
+            oprot.writeString(_iter79.getKey());
             {
-              oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, _iter75.getValue().size()));
-              for (Map.Entry<String, List<Mutation>> _iter76 : _iter75.getValue().entrySet())
+              oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, _iter79.getValue().size()));
+              for (Map.Entry<String, List<Mutation>> _iter80 : _iter79.getValue().entrySet())
               {
-                oprot.writeString(_iter76.getKey());
+                oprot.writeString(_iter80.getKey());
                 {
-                  oprot.writeListBegin(new TList(TType.STRUCT, _iter76.getValue().size()));
-                  for (Mutation _iter77 : _iter76.getValue())
+                  oprot.writeListBegin(new TList(TType.STRUCT, _iter80.getValue().size()));
+                  for (Mutation _iter81 : _iter80.getValue())
                   {
-                    _iter77.write(oprot);
+                    _iter81.write(oprot);
                   }
                   oprot.writeListEnd();
                 }
@@ -16522,13 +16522,13 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.LIST) {
               {
-                TList _list78 = iprot.readListBegin();
-                this.success = new ArrayList<String>(_list78.size);
-                for (int _i79 = 0; _i79 < _list78.size; ++_i79)
+                TList _list82 = iprot.readListBegin();
+                this.success = new ArrayList<String>(_list82.size);
+                for (int _i83 = 0; _i83 < _list82.size; ++_i83)
                 {
-                  String _elem80;
-                  _elem80 = iprot.readString();
-                  this.success.add(_elem80);
+                  String _elem84;
+                  _elem84 = iprot.readString();
+                  this.success.add(_elem84);
                 }
                 iprot.readListEnd();
               }
@@ -16554,9 +16554,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
-          for (String _iter81 : this.success)
+          for (String _iter85 : this.success)
           {
-            oprot.writeString(_iter81);
+            oprot.writeString(_iter85);
           }
           oprot.writeListEnd();
         }
@@ -17009,13 +17009,13 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.SET) {
               {
-                TSet _set82 = iprot.readSetBegin();
-                this.success = new HashSet<String>(2*_set82.size);
-                for (int _i83 = 0; _i83 < _set82.size; ++_i83)
+                TSet _set86 = iprot.readSetBegin();
+                this.success = new HashSet<String>(2*_set86.size);
+                for (int _i87 = 0; _i87 < _set86.size; ++_i87)
                 {
-                  String _elem84;
-                  _elem84 = iprot.readString();
-                  this.success.add(_elem84);
+                  String _elem88;
+                  _elem88 = iprot.readString();
+                  this.success.add(_elem88);
                 }
                 iprot.readSetEnd();
               }
@@ -17041,9 +17041,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeSetBegin(new TSet(TType.STRING, this.success.size()));
-          for (String _iter85 : this.success)
+          for (String _iter89 : this.success)
           {
-            oprot.writeString(_iter85);
+            oprot.writeString(_iter89);
           }
           oprot.writeSetEnd();
         }
@@ -18550,14 +18550,14 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.LIST) {
               {
-                TList _list86 = iprot.readListBegin();
-                this.success = new ArrayList<TokenRange>(_list86.size);
-                for (int _i87 = 0; _i87 < _list86.size; ++_i87)
+                TList _list90 = iprot.readListBegin();
+                this.success = new ArrayList<TokenRange>(_list90.size);
+                for (int _i91 = 0; _i91 < _list90.size; ++_i91)
                 {
-                  TokenRange _elem88;
-                  _elem88 = new TokenRange();
-                  _elem88.read(iprot);
-                  this.success.add(_elem88);
+                  TokenRange _elem92;
+                  _elem92 = new TokenRange();
+                  _elem92.read(iprot);
+                  this.success.add(_elem92);
                 }
                 iprot.readListEnd();
               }
@@ -18583,9 +18583,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
-          for (TokenRange _iter89 : this.success)
+          for (TokenRange _iter93 : this.success)
           {
-            _iter89.write(oprot);
+            _iter93.write(oprot);
           }
           oprot.writeListEnd();
         }
@@ -19206,27 +19206,27 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.MAP) {
               {
-                TMap _map90 = iprot.readMapBegin();
-                this.success = new HashMap<String,Map<String,String>>(2*_map90.size);
-                for (int _i91 = 0; _i91 < _map90.size; ++_i91)
-                {
-                  String _key92;
-                  Map<String,String> _val93;
-                  _key92 = iprot.readString();
-                  {
                     TMap _map94 = iprot.readMapBegin();
-                    _val93 = new HashMap<String,String>(2*_map94.size);
+                this.success = new HashMap<String,Map<String,String>>(2*_map94.size);
                     for (int _i95 = 0; _i95 < _map94.size; ++_i95)
                     {
                       String _key96;
-                      String _val97;
+                  Map<String,String> _val97;
                       _key96 = iprot.readString();
-                      _val97 = iprot.readString();
-                      _val93.put(_key96, _val97);
+                  {
+                    TMap _map98 = iprot.readMapBegin();
+                    _val97 = new HashMap<String,String>(2*_map98.size);
+                    for (int _i99 = 0; _i99 < _map98.size; ++_i99)
+                    {
+                      String _key100;
+                      String _val101;
+                      _key100 = iprot.readString();
+                      _val101 = iprot.readString();
+                      _val97.put(_key100, _val101);
                     }
                     iprot.readMapEnd();
                   }
-                  this.success.put(_key92, _val93);
+                  this.success.put(_key96, _val97);
                 }
                 iprot.readMapEnd();
               }
@@ -19260,15 +19260,15 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeMapBegin(new TMap(TType.STRING, TType.MAP, this.success.size()));
-          for (Map.Entry<String, Map<String,String>> _iter98 : this.success.entrySet())
+          for (Map.Entry<String, Map<String,String>> _iter102 : this.success.entrySet())
           {
-            oprot.writeString(_iter98.getKey());
+            oprot.writeString(_iter102.getKey());
             {
-              oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _iter98.getValue().size()));
-              for (Map.Entry<String, String> _iter99 : _iter98.getValue().entrySet())
+              oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, _iter102.getValue().size()));
+              for (Map.Entry<String, String> _iter103 : _iter102.getValue().entrySet())
               {
-                oprot.writeString(_iter99.getKey());
-                oprot.writeString(_iter99.getValue());
+                oprot.writeString(_iter103.getKey());
+                oprot.writeString(_iter103.getValue());
               }
               oprot.writeMapEnd();
             }
@@ -20024,13 +20024,13 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.LIST) {
               {
-                TList _list100 = iprot.readListBegin();
-                this.success = new ArrayList<String>(_list100.size);
-                for (int _i101 = 0; _i101 < _list100.size; ++_i101)
+                TList _list104 = iprot.readListBegin();
+                this.success = new ArrayList<String>(_list104.size);
+                for (int _i105 = 0; _i105 < _list104.size; ++_i105)
                 {
-                  String _elem102;
-                  _elem102 = iprot.readString();
-                  this.success.add(_elem102);
+                  String _elem106;
+                  _elem106 = iprot.readString();
+                  this.success.add(_elem106);
                 }
                 iprot.readListEnd();
               }
@@ -20056,9 +20056,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
-          for (String _iter103 : this.success)
+          for (String _iter107 : this.success)
           {
-            oprot.writeString(_iter103);
+            oprot.writeString(_iter107);
           }
           oprot.writeListEnd();
         }
diff --git a/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java b/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java
index bf70b25e..94c3e3f5 100644
--- a/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java
+++ b/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/Constants.java
@@ -42,6 +42,6 @@
 
 public class Constants {
 
-  public static final String VERSION = "2.1.0";
+  public static final String VERSION = "2.2.0";
 
 }
diff --git a/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeySlice.java b/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeySlice.java
index 05970f83..7b671ce1 100644
--- a/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeySlice.java
+++ b/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/KeySlice.java
@@ -374,14 +374,14 @@ public void read(TProtocol iprot) throws TException {
         case 2: // COLUMNS
           if (field.type == TType.LIST) {
             {
-              TList _list8 = iprot.readListBegin();
-              this.columns = new ArrayList<ColumnOrSuperColumn>(_list8.size);
-              for (int _i9 = 0; _i9 < _list8.size; ++_i9)
+              TList _list12 = iprot.readListBegin();
+              this.columns = new ArrayList<ColumnOrSuperColumn>(_list12.size);
+              for (int _i13 = 0; _i13 < _list12.size; ++_i13)
               {
-                ColumnOrSuperColumn _elem10;
-                _elem10 = new ColumnOrSuperColumn();
-                _elem10.read(iprot);
-                this.columns.add(_elem10);
+                ColumnOrSuperColumn _elem14;
+                _elem14 = new ColumnOrSuperColumn();
+                _elem14.read(iprot);
+                this.columns.add(_elem14);
               }
               iprot.readListEnd();
             }
@@ -413,9 +413,9 @@ public void write(TProtocol oprot) throws TException {
       oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
       {
         oprot.writeListBegin(new TList(TType.STRUCT, this.columns.size()));
-        for (ColumnOrSuperColumn _iter11 : this.columns)
+        for (ColumnOrSuperColumn _iter15 : this.columns)
         {
-          _iter11.write(oprot);
+          _iter15.write(oprot);
         }
         oprot.writeListEnd();
       }
diff --git a/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SlicePredicate.java b/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SlicePredicate.java
index 20f1c9f9..c5c91728 100644
--- a/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SlicePredicate.java
+++ b/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SlicePredicate.java
@@ -365,13 +365,13 @@ public void read(TProtocol iprot) throws TException {
         case 1: // COLUMN_NAMES
           if (field.type == TType.LIST) {
             {
-              TList _list4 = iprot.readListBegin();
-              this.column_names = new ArrayList<byte[]>(_list4.size);
-              for (int _i5 = 0; _i5 < _list4.size; ++_i5)
+              TList _list8 = iprot.readListBegin();
+              this.column_names = new ArrayList<byte[]>(_list8.size);
+              for (int _i9 = 0; _i9 < _list8.size; ++_i9)
               {
-                byte[] _elem6;
-                _elem6 = iprot.readBinary();
-                this.column_names.add(_elem6);
+                byte[] _elem10;
+                _elem10 = iprot.readBinary();
+                this.column_names.add(_elem10);
               }
               iprot.readListEnd();
             }
@@ -407,9 +407,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(COLUMN_NAMES_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRING, this.column_names.size()));
-          for (byte[] _iter7 : this.column_names)
+          for (byte[] _iter11 : this.column_names)
           {
-            oprot.writeBinary(_iter7);
+            oprot.writeBinary(_iter11);
           }
           oprot.writeListEnd();
         }
diff --git a/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SliceRange.java b/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SliceRange.java
index 30ae8db2..27f40c81 100644
--- a/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SliceRange.java
+++ b/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/SliceRange.java
@@ -59,6 +59,7 @@
  *               materialize the whole result into memory before returning it to the client, so be aware that you may
  *               be better served by iterating through slices by passing the last value of one call in as the 'start'
  *               of the next instead of increasing 'count' arbitrarily large.
+ * @param bitmasks. A list of OR-ed binary AND masks applied to the result set.
  */
 public class SliceRange implements TBase<SliceRange._Fields>, java.io.Serializable, Cloneable, Comparable<SliceRange> {
   private static final TStruct STRUCT_DESC = new TStruct("SliceRange");
@@ -67,18 +68,21 @@
   private static final TField FINISH_FIELD_DESC = new TField("finish", TType.STRING, (short)2);
   private static final TField REVERSED_FIELD_DESC = new TField("reversed", TType.BOOL, (short)3);
   private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)4);
+  private static final TField BITMASKS_FIELD_DESC = new TField("bitmasks", TType.LIST, (short)5);
 
   public byte[] start;
   public byte[] finish;
   public boolean reversed;
   public int count;
+  public List<byte[]> bitmasks;
 
   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
   public enum _Fields implements TFieldIdEnum {
     START((short)1, "start"),
     FINISH((short)2, "finish"),
     REVERSED((short)3, "reversed"),
-    COUNT((short)4, "count");
+    COUNT((short)4, "count"),
+    BITMASKS((short)5, "bitmasks");
 
     private static final Map<Integer, _Fields> byId = new HashMap<Integer, _Fields>();
     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
@@ -145,6 +149,9 @@ public String getFieldName() {
         new FieldValueMetaData(TType.BOOL)));
     put(_Fields.COUNT, new FieldMetaData("count", TFieldRequirementType.REQUIRED, 
         new FieldValueMetaData(TType.I32)));
+    put(_Fields.BITMASKS, new FieldMetaData("bitmasks", TFieldRequirementType.OPTIONAL, 
+        new ListMetaData(TType.LIST, 
+            new FieldValueMetaData(TType.STRING))));
   }});
 
   static {
@@ -189,6 +196,15 @@ public SliceRange(SliceRange other) {
     }
     this.reversed = other.reversed;
     this.count = other.count;
+    if (other.isSetBitmasks()) {
+      List<byte[]> __this__bitmasks = new ArrayList<byte[]>();
+      for (byte[] other_element : other.bitmasks) {
+        byte[] temp_binary_element = new byte[other_element.length];
+        System.arraycopy(other_element, 0, temp_binary_element, 0, other_element.length);
+        __this__bitmasks.add(temp_binary_element);
+      }
+      this.bitmasks = __this__bitmasks;
+    }
   }
 
   public SliceRange deepCopy() {
@@ -294,6 +310,45 @@ public void setCountIsSet(boolean value) {
     __isset_bit_vector.set(__COUNT_ISSET_ID, value);
   }
 
+  public int getBitmasksSize() {
+    return (this.bitmasks == null) ? 0 : this.bitmasks.size();
+  }
+
+  public java.util.Iterator<byte[]> getBitmasksIterator() {
+    return (this.bitmasks == null) ? null : this.bitmasks.iterator();
+  }
+
+  public void addToBitmasks(byte[] elem) {
+    if (this.bitmasks == null) {
+      this.bitmasks = new ArrayList<byte[]>();
+    }
+    this.bitmasks.add(elem);
+  }
+
+  public List<byte[]> getBitmasks() {
+    return this.bitmasks;
+  }
+
+  public SliceRange setBitmasks(List<byte[]> bitmasks) {
+    this.bitmasks = bitmasks;
+    return this;
+  }
+
+  public void unsetBitmasks() {
+    this.bitmasks = null;
+  }
+
+  /** Returns true if field bitmasks is set (has been asigned a value) and false otherwise */
+  public boolean isSetBitmasks() {
+    return this.bitmasks != null;
+  }
+
+  public void setBitmasksIsSet(boolean value) {
+    if (!value) {
+      this.bitmasks = null;
+    }
+  }
+
   public void setFieldValue(_Fields field, Object value) {
     switch (field) {
     case START:
@@ -328,6 +383,14 @@ public void setFieldValue(_Fields field, Object value) {
       }
       break;
 
+    case BITMASKS:
+      if (value == null) {
+        unsetBitmasks();
+      } else {
+        setBitmasks((List<byte[]>)value);
+      }
+      break;
+
     }
   }
 
@@ -349,6 +412,9 @@ public Object getFieldValue(_Fields field) {
     case COUNT:
       return new Integer(getCount());
 
+    case BITMASKS:
+      return getBitmasks();
+
     }
     throw new IllegalStateException();
   }
@@ -368,6 +434,8 @@ public boolean isSet(_Fields field) {
       return isSetReversed();
     case COUNT:
       return isSetCount();
+    case BITMASKS:
+      return isSetBitmasks();
     }
     throw new IllegalStateException();
   }
@@ -425,6 +493,15 @@ public boolean equals(SliceRange that) {
         return false;
     }
 
+    boolean this_present_bitmasks = true && this.isSetBitmasks();
+    boolean that_present_bitmasks = true && that.isSetBitmasks();
+    if (this_present_bitmasks || that_present_bitmasks) {
+      if (!(this_present_bitmasks && that_present_bitmasks))
+        return false;
+      if (!this.bitmasks.equals(that.bitmasks))
+        return false;
+    }
+
     return true;
   }
 
@@ -477,6 +554,15 @@ public int compareTo(SliceRange other) {
         return lastComparison;
       }
     }
+    lastComparison = Boolean.valueOf(isSetBitmasks()).compareTo(typedOther.isSetBitmasks());
+    if (lastComparison != 0) {
+      return lastComparison;
+    }
+    if (isSetBitmasks()) {      lastComparison = TBaseHelper.compareTo(bitmasks, typedOther.bitmasks);
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+    }
     return 0;
   }
 
@@ -520,6 +606,23 @@ public void read(TProtocol iprot) throws TException {
             TProtocolUtil.skip(iprot, field.type);
           }
           break;
+        case 5: // BITMASKS
+          if (field.type == TType.LIST) {
+            {
+              TList _list4 = iprot.readListBegin();
+              this.bitmasks = new ArrayList<byte[]>(_list4.size);
+              for (int _i5 = 0; _i5 < _list4.size; ++_i5)
+              {
+                byte[] _elem6;
+                _elem6 = iprot.readBinary();
+                this.bitmasks.add(_elem6);
+              }
+              iprot.readListEnd();
+            }
+          } else { 
+            TProtocolUtil.skip(iprot, field.type);
+          }
+          break;
         default:
           TProtocolUtil.skip(iprot, field.type);
       }
@@ -557,6 +660,20 @@ public void write(TProtocol oprot) throws TException {
     oprot.writeFieldBegin(COUNT_FIELD_DESC);
     oprot.writeI32(this.count);
     oprot.writeFieldEnd();
+    if (this.bitmasks != null) {
+      if (isSetBitmasks()) {
+        oprot.writeFieldBegin(BITMASKS_FIELD_DESC);
+        {
+          oprot.writeListBegin(new TList(TType.STRING, this.bitmasks.size()));
+          for (byte[] _iter7 : this.bitmasks)
+          {
+            oprot.writeBinary(_iter7);
+          }
+          oprot.writeListEnd();
+        }
+        oprot.writeFieldEnd();
+      }
+    }
     oprot.writeFieldStop();
     oprot.writeStructEnd();
   }
@@ -599,6 +716,16 @@ public String toString() {
     sb.append("count:");
     sb.append(this.count);
     first = false;
+    if (isSetBitmasks()) {
+      if (!first) sb.append(", ");
+      sb.append("bitmasks:");
+      if (this.bitmasks == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.bitmasks);
+      }
+      first = false;
+    }
     sb.append(")");
     return sb.toString();
   }
diff --git a/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/TokenRange.java b/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/TokenRange.java
index 9cd22827..360bdfaf 100644
--- a/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/TokenRange.java
+++ b/incubator/cassandra/trunk/interface/thrift/gen-java/org/apache/cassandra/thrift/TokenRange.java
@@ -439,13 +439,13 @@ public void read(TProtocol iprot) throws TException {
         case 3: // ENDPOINTS
           if (field.type == TType.LIST) {
             {
-              TList _list12 = iprot.readListBegin();
-              this.endpoints = new ArrayList<String>(_list12.size);
-              for (int _i13 = 0; _i13 < _list12.size; ++_i13)
+              TList _list16 = iprot.readListBegin();
+              this.endpoints = new ArrayList<String>(_list16.size);
+              for (int _i17 = 0; _i17 < _list16.size; ++_i17)
               {
-                String _elem14;
-                _elem14 = iprot.readString();
-                this.endpoints.add(_elem14);
+                String _elem18;
+                _elem18 = iprot.readString();
+                this.endpoints.add(_elem18);
               }
               iprot.readListEnd();
             }
@@ -482,9 +482,9 @@ public void write(TProtocol oprot) throws TException {
       oprot.writeFieldBegin(ENDPOINTS_FIELD_DESC);
       {
         oprot.writeListBegin(new TList(TType.STRING, this.endpoints.size()));
-        for (String _iter15 : this.endpoints)
+        for (String _iter19 : this.endpoints)
         {
-          oprot.writeString(_iter15);
+          oprot.writeString(_iter19);
         }
         oprot.writeListEnd();
       }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index 884e169a..501256ed 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -662,6 +662,11 @@ public double getRecentWriteLatencyMicros()
         return writeStats_.getRecentLatencyMicros();
     }
 
+    public ColumnFamily getColumnFamily(String key, QueryPath path, byte[] start, byte[] finish, List<byte[]> bitmasks, boolean reversed, int limit) throws IOException
+    {
+        return getColumnFamily(new SliceQueryFilter(key, path, start, finish, bitmasks, reversed, limit));
+    }
+
     public ColumnFamily getColumnFamily(String key, QueryPath path, byte[] start, byte[] finish, boolean reversed, int limit) throws IOException
     {
         return getColumnFamily(new SliceQueryFilter(key, path, start, finish, reversed, limit));
@@ -968,7 +973,7 @@ public RangeSliceReply getRangeSlice(byte[] super_column, final AbstractBounds r
             columnNameSet.addAll(columnNames);
         for (String key : keys)
         {
-            QueryFilter filter = sliceRange == null ? new NamesQueryFilter(key, queryPath, columnNameSet) : new SliceQueryFilter(key, queryPath, sliceRange.start, sliceRange.finish, sliceRange.reversed, sliceRange.count);
+            QueryFilter filter = sliceRange == null ? new NamesQueryFilter(key, queryPath, columnNameSet) : new SliceQueryFilter(key, queryPath, sliceRange.start, sliceRange.finish, sliceRange.bitmasks, sliceRange.reversed, sliceRange.count);
             rows.add(new Row(key, getColumnFamily(filter)));
         }
 
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java
index eafa6eb7..0e9d08ea 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Memtable.java
@@ -204,7 +204,10 @@ public ColumnIterator getSliceIterator(ColumnFamily cf, SliceQueryFilter filter,
     {
         final ColumnFamily columnFamily = cf == null ? ColumnFamily.create(getTableName(), filter.getColumnFamilyName()) : cf.cloneMeShallow();
 
-        final IColumn columns[] = (cf == null ? columnFamily : cf).getSortedColumns().toArray(new IColumn[columnFamily.getSortedColumns().size()]);
+        Collection<IColumn> rawColumns = (cf == null ? columnFamily : cf).getSortedColumns();
+        Collection<IColumn> filteredColumns = filter.applyPredicate(rawColumns);
+
+        final IColumn columns[] = filteredColumns.toArray(new IColumn[0]);
         // TODO if we are dealing with supercolumns, we need to clone them while we have the read lock since they can be modified later
         if (filter.reversed)
             ArrayUtils.reverse(columns);
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SliceFromReadCommand.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SliceFromReadCommand.java
index 1c5a8dc4..df56293c 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SliceFromReadCommand.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SliceFromReadCommand.java
@@ -20,35 +20,45 @@
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
+import java.util.Collections;
+import java.util.List;
 
 import org.apache.cassandra.db.filter.QueryPath;
 import org.apache.cassandra.db.filter.SliceQueryFilter;
 import org.apache.cassandra.thrift.ColumnParent;
+import org.apache.cassandra.utils.ByteArrayListSerializer;
 
 public class SliceFromReadCommand extends ReadCommand
 {
     public final byte[] start, finish;
     public final boolean reversed;
     public final int count;
+    public final List<byte[]> bitmasks;
 
     public SliceFromReadCommand(String table, String key, ColumnParent column_parent, byte[] start, byte[] finish, boolean reversed, int count)
     {
-        this(table, key, new QueryPath(column_parent), start, finish, reversed, count);
+        this(table, key, new QueryPath(column_parent), start, finish, null, reversed, count);
     }
 
     public SliceFromReadCommand(String table, String key, QueryPath path, byte[] start, byte[] finish, boolean reversed, int count)
+    {
+        this(table, key, path, start, finish, null, reversed, count);
+    }
+
+    public SliceFromReadCommand(String table, String key, QueryPath path, byte[] start, byte[] finish, List<byte[]> bitmasks, boolean reversed, int count)
     {
         super(table, key, path, CMD_TYPE_GET_SLICE);
         this.start = start;
         this.finish = finish;
         this.reversed = reversed;
         this.count = count;
+        this.bitmasks = bitmasks;
     }
 
     @Override
     public ReadCommand copy()
     {
-        ReadCommand readCommand = new SliceFromReadCommand(table, key, queryPath, start, finish, reversed, count);
+        ReadCommand readCommand = new SliceFromReadCommand(table, key, queryPath, start, finish, bitmasks, reversed, count);
         readCommand.setDigestQuery(isDigestQuery());
         return readCommand;
     }
@@ -56,22 +66,45 @@ public ReadCommand copy()
     @Override
     public Row getRow(Table table) throws IOException
     {
-        return table.getRow(new SliceQueryFilter(key, queryPath, start, finish, reversed, count));
+        return table.getRow(new SliceQueryFilter(key, queryPath, start, finish, bitmasks, reversed, count));
     }
 
     @Override
     public String toString()
     {
+        String bitmaskString = getBitmaskDescription(bitmasks);
+
         return "SliceFromReadCommand(" +
                "table='" + table + '\'' +
                ", key='" + key + '\'' +
                ", column_parent='" + queryPath + '\'' +
                ", start='" + getComparator().getString(start) + '\'' +
                ", finish='" + getComparator().getString(finish) + '\'' +
+               ", bitmasks=" + bitmaskString +
                ", reversed=" + reversed +
                ", count=" + count +
                ')';
     }
+
+    public static String getBitmaskDescription(List<byte[]> masks)
+    {
+        StringBuffer bitmaskBuf = new StringBuffer("[");
+
+        if (masks != null)
+        {
+            bitmaskBuf.append(masks.size()).append(" bitmasks: ");
+            for (byte[] bitmask: masks)
+            {
+                for (byte b: bitmask)
+                {
+                    bitmaskBuf.append(String.format("0x%02x ", b));
+                }
+                bitmaskBuf.append("; ");
+            }
+        }
+        bitmaskBuf.append("]");
+        return bitmaskBuf.toString();
+    }
 }
 
 class SliceFromReadCommandSerializer extends ReadCommandSerializer
@@ -86,6 +119,7 @@ public void serialize(ReadCommand rm, DataOutputStream dos) throws IOException
         realRM.queryPath.serialize(dos);
         ColumnSerializer.writeName(realRM.start, dos);
         ColumnSerializer.writeName(realRM.finish, dos);
+        ByteArrayListSerializer.serialize(realRM.bitmasks, dos);
         dos.writeBoolean(realRM.reversed);
         dos.writeInt(realRM.count);
     }
@@ -99,6 +133,7 @@ public ReadCommand deserialize(DataInputStream dis) throws IOException
                                                            QueryPath.deserialize(dis),
                                                            ColumnSerializer.readName(dis),
                                                            ColumnSerializer.readName(dis),
+                                                           ByteArrayListSerializer.deserialize(dis),
                                                            dis.readBoolean(), 
                                                            dis.readInt());
         rm.setDigestQuery(isDigest);
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java
index 7c1bf9d6..90bf6ca9 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SSTableSliceIterator.java
@@ -31,6 +31,8 @@
 import org.apache.cassandra.io.*;
 import org.apache.cassandra.io.util.FileDataInput;
 import org.apache.cassandra.config.DatabaseDescriptor;
+
+import com.google.common.base.Predicate;
 import com.google.common.collect.AbstractIterator;
 
 /**
@@ -38,17 +40,20 @@
  */
 class SSTableSliceIterator extends AbstractIterator<IColumn> implements ColumnIterator
 {
+    private final Predicate<IColumn> predicate;
     private final boolean reversed;
     private final byte[] startColumn;
     private final byte[] finishColumn;
     private final AbstractType comparator;
     private ColumnGroupReader reader;
 
-    public SSTableSliceIterator(SSTableReader ssTable, String key, byte[] startColumn, byte[] finishColumn, boolean reversed)
+    public SSTableSliceIterator(SSTableReader ssTable, String key, byte[] startColumn, byte[] finishColumn, Predicate<IColumn> predicate, boolean reversed)
     throws IOException
     {
         this.reversed = reversed;
 
+        this.predicate = predicate;
+
         /* Morph key into actual key based on the partition type. */
         DecoratedKey decoratedKey = ssTable.getPartitioner().decorateKey(key);
         FileDataInput fdi = ssTable.getFileDataInput(decoratedKey, DatabaseDescriptor.getSlicedReadBufferSizeInKB() * 1024);
@@ -60,6 +65,14 @@ public SSTableSliceIterator(SSTableReader ssTable, String key, byte[] startColum
     }
 
     private boolean isColumnNeeded(IColumn column)
+    {
+        if (!isColumnNeededByRange(column))
+            return false;
+
+        return predicate.apply(column);
+    }
+
+    private boolean isColumnNeededByRange(IColumn column)
     {
         if (startColumn.length == 0 && finishColumn.length == 0)
             return true;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SliceQueryFilter.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SliceQueryFilter.java
index 838f3a19..aecb6239 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SliceQueryFilter.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/filter/SliceQueryFilter.java
@@ -22,35 +22,44 @@
 
 
 import java.io.IOException;
-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.ArrayList;
-import java.util.List;
+import java.util.*;
 
 import org.apache.log4j.Logger;
 import org.apache.commons.collections.comparators.ReverseComparator;
 import org.apache.commons.collections.iterators.ReverseListIterator;
 import org.apache.commons.collections.IteratorUtils;
 
+import com.google.common.collect.Collections2;
 import org.apache.cassandra.io.SSTableReader;
 import org.apache.cassandra.db.*;
 import org.apache.cassandra.db.marshal.AbstractType;
 
+import com.google.common.base.Predicate;
+import com.google.common.base.Predicates;
+import com.google.common.collect.Iterators;
+
 public class SliceQueryFilter extends QueryFilter
 {
     private static Logger logger = Logger.getLogger(SliceQueryFilter.class);
 
     public final byte[] start, finish;
+    public final List<byte[]> bitmasks;
     public final boolean reversed;
     public final int count;
 
     public SliceQueryFilter(String key, QueryPath columnParent, byte[] start, byte[] finish, boolean reversed, int count)
+    {
+        this(key, columnParent, start, finish, null, reversed, count);
+    }
+
+    public SliceQueryFilter(String key, QueryPath columnParent, byte[] start, byte[] finish, List<byte[]> bitmasks, boolean reversed, int count)
     {
         super(key, columnParent);
         this.start = start;
         this.finish = finish;
         this.reversed = reversed;
         this.count = count;
+        this.bitmasks = bitmasks;
     }
 
     public ColumnIterator getMemColumnIterator(Memtable memtable, ColumnFamily cf, AbstractType comparator)
@@ -60,7 +69,10 @@ public ColumnIterator getMemColumnIterator(Memtable memtable, ColumnFamily cf, A
 
     public ColumnIterator getSSTableColumnIterator(SSTableReader sstable) throws IOException
     {
-        return new SSTableSliceIterator(sstable, key, start, finish, reversed);
+        Predicate<IColumn> predicate = (bitmasks == null || bitmasks.isEmpty())
+                                       ? Predicates.<IColumn>alwaysTrue()
+                                       : getBitmaskMatchColumnPredicate();
+        return new SSTableSliceIterator(sstable, key, start, finish, predicate, reversed);
     }
 
     public SuperColumn filterSuperColumn(SuperColumn superColumn, int gcBefore)
@@ -79,6 +91,12 @@ public SuperColumn filterSuperColumn(SuperColumn superColumn, int gcBefore)
             subcolumns = superColumn.getSubColumns().iterator();
         }
 
+        // now apply the predicate
+        if (bitmasks != null && !bitmasks.isEmpty())
+        {
+            subcolumns = Iterators.filter(subcolumns, getBitmaskMatchColumnPredicate());
+        }
+
         // iterate until we get to the "real" start column
         Comparator<byte[]> comparator = reversed ? superColumn.getComparator().getReverseComparator() : superColumn.getComparator();
         while (subcolumns.hasNext())
@@ -133,4 +151,48 @@ public void collectReducedColumns(IColumnContainer container, Iterator<IColumn>
                 container.addColumn(column);
         }
     }
+
+    public Collection<IColumn> applyPredicate(Collection<IColumn> columns)
+    {
+        if (bitmasks == null || bitmasks.isEmpty())
+            return columns;
+
+        return Collections2.filter(columns, getBitmaskMatchColumnPredicate());
+    }
+
+    @SuppressWarnings("unchecked")
+    private Predicate<IColumn> getBitmaskMatchColumnPredicate()
+    {
+        Predicate<IColumn>[] predicates = new Predicate[bitmasks.size()];
+        for (int i = 0; i < bitmasks.size(); i++)
+        {
+            final byte[] bitmask = bitmasks.get(i);
+            predicates[i] = new Predicate<IColumn>()
+            {
+                public boolean apply(IColumn col)
+                {
+                    return matchesBitmask(bitmask, col.name());
+                }
+            };
+        }
+        return Predicates.or(predicates);
+    }
+
+    public static boolean matchesBitmask(byte[] bitmask, byte[] name)
+    {
+        assert name != null;
+        assert bitmask != null;
+
+        int len = Math.min(bitmask.length, name.length);
+
+        for (int i = 0; i < len; i++)
+        {
+            if ((bitmask[i] & name[i]) == 0)
+            {
+                return false;
+            }
+        }
+
+        return true;
+    }
 }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftGlue.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftGlue.java
index 47bca7cb..e8c834a6 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftGlue.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/thrift/ThriftGlue.java
@@ -67,4 +67,17 @@ public static SlicePredicate createSlicePredicate(List<byte[]> columns, SliceRan
         return ret;
     }
 
+    public static SliceRange createSliceRange(byte[] start, byte[] finish, boolean reversed, int count)
+    {
+        SliceRange range = new SliceRange(start, finish, reversed, count);
+        return range;
+    }
+
+    public static SliceRange createSliceRange(byte[] start, byte[] finish, List<byte[]> bitmasks, boolean reversed, int count)
+    {
+        SliceRange range = new SliceRange(start, finish, reversed, count);
+        range.setBitmasks(bitmasks);
+        return range;
+    }
+
 }
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ReadMessageTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ReadMessageTest.java
index 22cab5e7..8597fc2d 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ReadMessageTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/ReadMessageTest.java
@@ -47,13 +47,38 @@ public void testMakeReadMessage() throws IOException
         rm2 = serializeAndDeserializeReadMessage(rm);
         assert rm2.toString().equals(rm.toString());
 
-        rm = new SliceFromReadCommand("Keyspace1", "row1", new QueryPath("Standard1"), ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, true, 2);
+        rm = new SliceFromReadCommand("Keyspace1", "row1", new QueryPath("Standard1"), ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, new ArrayList<byte[]>(0), true, 2);
         rm2 = serializeAndDeserializeReadMessage(rm);
         assert rm2.toString().equals(rm.toString());
         
-        rm = new SliceFromReadCommand("Keyspace1", "row1", new QueryPath("Standard1"), "a".getBytes(), "z".getBytes(), true, 5);
+        rm = new SliceFromReadCommand("Keyspace1", "row1", new QueryPath("Standard1"), "a".getBytes(), "z".getBytes(), new ArrayList<byte[]>(0), true, 5);
         rm2 = serializeAndDeserializeReadMessage(rm);
         assertEquals(rm2.toString(), rm.toString());
+
+        rm = new SliceFromReadCommand("Keyspace1", "row1", new QueryPath("Standard1"), ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, null, true, 2);
+        rm2 = serializeAndDeserializeReadMessage(rm);
+        assert rm2.toString().equals(rm.toString());
+
+        rm = new SliceFromReadCommand("Keyspace1", "row1", new QueryPath("Standard1"), "a".getBytes(), "z".getBytes(), null, true, 5);
+        rm2 = serializeAndDeserializeReadMessage(rm);
+        assertEquals(rm2.toString(), rm.toString());
+
+        for (String[] bitmaskTests: new String[][] { {}, {"test one", "test two" }, { new String(new byte[] { 0, 1, 0x20, (byte) 0xff }) } })
+        {
+            ArrayList<byte[]> bitmasks = new ArrayList<byte[]>(bitmaskTests.length);
+            for (String bitmaskTest : bitmaskTests)
+            {
+                bitmasks.add(bitmaskTest.getBytes("UTF-8"));
+            }
+
+            rm = new SliceFromReadCommand("Keyspace1", "row1", new QueryPath("Standard1"), ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.EMPTY_BYTE_ARRAY, bitmasks, true, 2);
+            rm2 = serializeAndDeserializeReadMessage(rm);
+            assert rm2.toString().equals(rm.toString());
+
+            rm = new SliceFromReadCommand("Keyspace1", "row1", new QueryPath("Standard1"), "a".getBytes(), "z".getBytes(), bitmasks, true, 5);
+            rm2 = serializeAndDeserializeReadMessage(rm);
+            assertEquals(rm2.toString(), rm.toString());
+        }
     }
 
     private ReadCommand serializeAndDeserializeReadMessage(ReadCommand rm) throws IOException
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java
index f94fab8f..cffb7dd5 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/TableTest.java
@@ -22,8 +22,12 @@
 import java.text.NumberFormat;
 import java.util.*;
 import java.io.IOException;
+import java.io.UnsupportedEncodingException;
 
 import org.apache.cassandra.config.DatabaseDescriptor;
+import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections.Predicate;
+import org.apache.commons.collections.PredicateUtils;
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.lang.ArrayUtils;
 import org.junit.Test;
@@ -222,6 +226,70 @@ public void runMayThrow() throws Exception
         reTest(table.getColumnFamilyStore("Standard1"), verify);
     }
 
+    @Test
+    public void testGetSliceWithBitmasks() throws Throwable
+    {
+        // tests slicing against data from one row in a memtable and then flushed to an sstable
+        final Table table = Table.open("Keyspace1");
+        final ColumnFamilyStore cfStore = table.getColumnFamilyStore("Standard1");
+        final String ROW = "row-bitmasktest";
+        final NumberFormat fmt = new DecimalFormat("000");
+
+        RowMutation rm = new RowMutation("Keyspace1", ROW);
+        ColumnFamily cf = ColumnFamily.create("Keyspace1", "Standard1");
+        // at this rate, we're getting 78-79 cos/block, assuming the blocks are set to be about 4k.
+        // so if we go to 300, we'll get at least 4 blocks, which is plenty for testing.
+        for (int i = 0; i < 300; i++)
+            cf.addColumn(column("col" + fmt.format(i), "omg!thisisthevalue!"+i, 1L));
+        rm.add(cf);
+        rm.apply();
+
+        Runnable verify = new WrappedRunnable()
+        {
+            public void runMayThrow() throws Exception
+            {
+                ColumnFamily cf;
+
+                // blocks are partitioned like this: 000-097, 098-193, 194-289, 290-299, assuming a 4k column index size.
+                assert DatabaseDescriptor.getColumnIndexSize() == 4096 : "Unexpected column index size, block boundaries won't be where tests expect them.";
+
+                for (String[] bitmaskTests: new String[][] { {}, {"test one", "test two" }, { new String(new byte[] { 0, 1, 0x20, (byte) 0xff }) } })
+                {
+                    ArrayList<byte[]> bitmasks = new ArrayList<byte[]>(bitmaskTests.length);
+
+                    // test forward, spanning a segment.
+                    cf = cfStore.getColumnFamily(ROW, new QueryPath("Standard1"), "col096".getBytes(), "col099".getBytes(), bitmasks, false, 4);
+                    assertBitmaskedColumns(cf, bitmasks, "col096", "col097", "col098", "col099");
+
+                    // test reversed, spanning a segment.
+                    cf = cfStore.getColumnFamily(ROW, new QueryPath("Standard1"), "col099".getBytes(), "col096".getBytes(), bitmasks, true, 4);
+                    assertBitmaskedColumns(cf, bitmasks, "col096", "col097", "col098", "col099");
+
+                    // test forward, within a segment.
+                    cf = cfStore.getColumnFamily(ROW, new QueryPath("Standard1"), "col100".getBytes(), "col103".getBytes(), bitmasks, false, 4);
+                    assertBitmaskedColumns(cf, bitmasks, "col100", "col101", "col102", "col103");
+
+                    // test reversed, within a segment.
+                    cf = cfStore.getColumnFamily(ROW, new QueryPath("Standard1"), "col103".getBytes(), "col100".getBytes(), bitmasks, true, 4);
+                    assertBitmaskedColumns(cf, bitmasks, "col100", "col101", "col102", "col103");
+
+                    // test forward from beginning, spanning a segment.
+                    String[] strCols = new String[100]; // col000-col099
+                    for (int i = 0; i < 100; i++)
+                        strCols[i] = "col" + fmt.format(i);
+                    cf = cfStore.getColumnFamily(ROW, new QueryPath("Standard1"), "".getBytes(), "col099".getBytes(), bitmasks, false, 100);
+                    assertBitmaskedColumns(cf, bitmasks, strCols);
+
+                    // test reversed, from end, spanning a segment.
+                    cf = cfStore.getColumnFamily(ROW, new QueryPath("Standard1"), "".getBytes(), "col288".getBytes(), bitmasks, true, 12);
+                    assertBitmaskedColumns(cf, bitmasks, "col288", "col289", "col290", "col291", "col292", "col293", "col294", "col295", "col296", "col297", "col298", "col299");
+                }
+            }
+        };
+
+        reTest(table.getColumnFamilyStore("Standard1"), verify);
+    }
+
     private void validateGetSliceNoMatch(Table table) throws IOException
     {
         ColumnFamilyStore cfStore = table.getColumnFamilyStore("Standard2");
@@ -446,6 +514,16 @@ public void runMayThrow() throws Exception
     }
 
     public static void assertColumns(ColumnFamily cf, String... columnNames)
+    {
+        assertBitmaskedColumnsNameArray(cf, null, columnNames);
+    }
+
+    public static void assertBitmaskedColumns(ColumnFamily cf, List<byte[]> bitmasks, String... unfilteredColumnNames)
+    {
+        assertBitmaskedColumnsNameArray(cf, bitmasks, unfilteredColumnNames);
+    }
+
+    public static void assertBitmaskedColumnsNameArray(ColumnFamily cf, List<byte[]> bitmasks, String[] unfilteredColumnNames)
     {
         Collection<IColumn> columns = cf == null ? new TreeSet<IColumn>() : cf.getSortedColumns();
         List<String> L = new ArrayList<String>();
@@ -453,8 +531,50 @@ public static void assertColumns(ColumnFamily cf, String... columnNames)
         {
             L.add(new String(column.name()));
         }
-        assert Arrays.equals(L.toArray(new String[columns.size()]), columnNames)
-                : "Columns [" + ((cf == null) ? "" : cf.getComparator().getColumnsString(columns)) + "]"
-                  + " is not expected [" + StringUtils.join(columnNames, ",") + "]";
+
+        List<String> names = new ArrayList<String>(unfilteredColumnNames.length);
+
+        names.addAll(Arrays.asList(unfilteredColumnNames));
+
+        if (bitmasks != null && bitmasks.size() > 0)
+        {
+            List<Predicate> predicates = new ArrayList<Predicate>(bitmasks.size());
+            for (final byte[] bitmask: bitmasks)
+            {
+                predicates.add(new Predicate()
+                {
+                    public boolean evaluate(Object o)
+                    {
+                        try
+                        {
+                            return SliceQueryFilter.matchesBitmask(bitmask, o.toString().getBytes("UTF-8"));
+                        }
+                        catch (UnsupportedEncodingException e)
+                        {
+                            return false;
+                        }
+                    }
+                });
+            }
+
+            CollectionUtils.filter(names, PredicateUtils.anyPredicate(predicates));
+        }
+
+        String[] columnNames = names.toArray(new String[0]);
+        String[] la = L.toArray(new String[columns.size()]);
+        StringBuffer lasb = new StringBuffer();
+        for (String l: la)
+        {
+            lasb.append(l);
+            lasb.append(", ");
+        }
+
+        assert Arrays.equals(la, columnNames)
+                : String.format("Columns [%s(as string: %s)])] is not expected [%s] (bitmasks %s)",
+                                ((cf == null) ? "" : cf.getComparator().getColumnsString(columns)),
+                                lasb.toString(),
+                                StringUtils.join(columnNames, ","),
+                                SliceFromReadCommand.getBitmaskDescription(bitmasks));
+                                
     }
 }
