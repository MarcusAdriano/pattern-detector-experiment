diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFIterator.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFIterator.java
index ec068844..bf5b58ba 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFIterator.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFIterator.java
@@ -19,9 +19,12 @@
 
 import java.io.BufferedReader;
 import java.io.IOException;
+import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+import java.util.List;
 
 import com.google.common.collect.AbstractIterator;
+import com.google.common.collect.Lists;
 import com.google.common.io.Closeables;
 import org.apache.mahout.math.DenseVector;
 import org.apache.mahout.math.RandomAccessSparseVector;
@@ -31,8 +34,8 @@
 
   // This pattern will make sure a , inside a string is not a point for split.
   // Ex: "Arizona" , "0:08 PM, PDT" , 110 will be split considering "0:08 PM, PDT" as one string
-  private static final Pattern COMMA_PATTERN = Pattern.compile(",(?=([^\"]*\"[^\"]*\")*[^\"]*$)");
   private static final Pattern WORDS_WITHOUT_SPARSE = Pattern.compile("([\\w[^{]])*");
+  private static final Pattern DATA_PATTERN = Pattern.compile("^\\"+ARFFModel.ARFF_SPARSE+"(.*)\\"+ARFFModel.ARFF_SPARSE_END+"$");
 
   private final BufferedReader reader;
   private final ARFFModel model;
@@ -64,12 +67,12 @@ protected Vector computeNext() {
       return endOfData();
     }
     Vector result;
-    if (line.startsWith(ARFFModel.ARFF_SPARSE)) {
-      line = line.substring(1, line.indexOf(ARFFModel.ARFF_SPARSE_END));
-      String[] splits = COMMA_PATTERN.split(line);
+    Matcher contents = DATA_PATTERN.matcher(line);
+    if (contents.find()) {
+      line = contents.group(1);
+      String[] splits = splitCSV(line);
       result = new RandomAccessSparseVector(model.getLabelSize());
       for (String split : splits) {
-        split = split.trim();
         int idIndex = split.indexOf(' ');
         int idx = Integer.parseInt(split.substring(0, idIndex).trim());
         String data = split.substring(idIndex).trim();
@@ -79,7 +82,7 @@ protected Vector computeNext() {
       }
     } else {
       result = new DenseVector(model.getLabelSize());
-      String[] splits = COMMA_PATTERN.split(line);
+      String[] splits = splitCSV(line);
       for (int i = 0; i < splits.length; i++) {
         String split = splits[i];
         split = split.trim();
@@ -88,8 +91,54 @@ protected Vector computeNext() {
         }
       }
     }
-    //result.setLabelBindings(labelBindings);
     return result;
   }
 
+  /**
+   * Splits a string by comma, ignores commas inside quotes and escaped quotes.
+   * As quotes are both double and single possible, because there is no exact definition
+   * for ARFF files
+   * @param line -
+   * @return String[]
+   */
+  public static String[] splitCSV(String line) {
+    StringBuilder sb = new StringBuilder(128);
+    List<String> tokens = Lists.newArrayList();
+    char escapeChar = '\0';
+    for (int i = 0; i < line.length(); i++) {
+      char c = line.charAt(i);
+      if (c == '\\') {
+        i++;
+        sb.append(line.charAt(i));
+      }
+      else if (c == '"' || c == '\'') {
+        // token is closed
+        if (c == escapeChar) {
+          escapeChar = '\0';
+        }
+        else if (escapeChar == '\0') {
+          escapeChar = c;
+        }
+        sb.append(c);
+      }
+      else if (c == ',') {
+        if (escapeChar == '\0') {
+          tokens.add(sb.toString().trim());
+          sb.setLength(0); // start work on next token
+        }
+        else {
+          sb.append(c);
+        }
+      }
+      else {
+        sb.append(c);
+      }
+    }
+    if (sb.length() > 0) {
+      tokens.add(sb.toString().trim());
+    }
+
+    return tokens.toArray(new String[tokens.size()]);
+  }
+
 }
diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java
index 82a49550..295dc7c9 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterable.java
@@ -31,7 +31,6 @@
 import java.text.SimpleDateFormat;
 import java.util.Iterator;
 import java.util.Locale;
-import java.util.regex.Pattern;
 
 /**
  * Read in ARFF (http://www.cs.waikato.ac.nz/~ml/weka/arff.html) and create {@link Vector}s
@@ -49,9 +48,6 @@
  */
 public class ARFFVectorIterable implements Iterable<Vector> {
 
-  private static final Pattern COMMA_PATTERN = Pattern.compile(",");
-  private static final Pattern SPACE_PATTERN = Pattern.compile(" ");
-
   private final BufferedReader buff;
   private final ARFFModel model;
 
@@ -80,44 +76,48 @@ public ARFFVectorIterable(Reader reader, ARFFModel model) throws IOException {
     String line;
     while ((line = buff.readLine()) != null) {
       line = line.trim();
-      String lower = line.toLowerCase(Locale.ENGLISH);
+      if (!line.startsWith(ARFFModel.ARFF_COMMENT) && !line.isEmpty()) {
       Integer labelNumInt = labelNumber;
-      if (!lower.startsWith(ARFFModel.ARFF_COMMENT)) {
-        if (lower.startsWith(ARFFModel.RELATION)) {
-          model.setRelation(ARFFType.removeQuotes(line.substring(ARFFModel.RELATION.length())));
-        } else if (lower.startsWith(ARFFModel.ATTRIBUTE)) {
+        String[] lineParts = line.split("[\\s\\t]+", 2);
+
+        // is it a relation name?
+        if (lineParts[0].equalsIgnoreCase(ARFFModel.RELATION)) {
+          model.setRelation(ARFFType.removeQuotes(lineParts[1]));
+        }
+        // or an attribute
+        else if (lineParts[0].equalsIgnoreCase(ARFFModel.ATTRIBUTE)) {
           String label;
           ARFFType type;
-          if (lower.contains(ARFFType.NUMERIC.getIndicator())) {
-            label = ARFFType.NUMERIC.getLabel(lower);
+
+          // split the name of the attribute and its description
+          String[] attrParts = lineParts[1].split("[\\s\\t]+", 2);
+          if (attrParts.length < 2)
+            throw new UnsupportedOperationException("No type for attribute found: " + lineParts[1]);
+
+          // label is attribute name
+          label = ARFFType.removeQuotes(attrParts[0].toLowerCase());
+          if (attrParts[1].equalsIgnoreCase(ARFFType.NUMERIC.getIndicator())) {
             type = ARFFType.NUMERIC;
-          } else if (lower.contains(ARFFType.INTEGER.getIndicator())) {
-            label = ARFFType.INTEGER.getLabel(lower);
+          } else if (attrParts[1].equalsIgnoreCase(ARFFType.INTEGER.getIndicator())) {
             type = ARFFType.INTEGER;
-          } else if (lower.contains(ARFFType.REAL.getIndicator())) {
-            label = ARFFType.REAL.getLabel(lower);
+          } else if (attrParts[1].equalsIgnoreCase(ARFFType.REAL.getIndicator())) {
             type = ARFFType.REAL;
-          } else if (lower.contains(ARFFType.STRING.getIndicator())) {
-            label = ARFFType.STRING.getLabel(lower);
+          } else if (attrParts[1].equalsIgnoreCase(ARFFType.STRING.getIndicator())) {
             type = ARFFType.STRING;
-          } else if (lower.contains(ARFFType.NOMINAL.getIndicator())) {
-            label = ARFFType.NOMINAL.getLabel(lower);
+          } else if (attrParts[1].toLowerCase().startsWith(ARFFType.NOMINAL.getIndicator())) {
             type = ARFFType.NOMINAL;
-            //@ATTRIBUTE class        {Iris-setosa,Iris-versicolor,Iris-virginica}
-            int classIdx = lower.indexOf(ARFFType.NOMINAL.getIndicator());
-            String[] classes = COMMA_PATTERN.split(line.substring(classIdx + 1, line.length() - 1));
+            // nominal example:
+            // @ATTRIBUTE class        {Iris-setosa,'Iris versicolor',Iris-virginica}
+            String[] classes = ARFFIterator.splitCSV(attrParts[1].substring(1, attrParts[1].length() - 1));
             for (int i = 0; i < classes.length; i++) {
               model.addNominal(label, ARFFType.removeQuotes(classes[i]), i + 1);
             }
-          } else if (lower.contains(ARFFType.DATE.getIndicator())) {
-            label = ARFFType.DATE.getLabel(lower);
+          } else if (attrParts[1].toLowerCase().startsWith(ARFFType.DATE.getIndicator())) {
             type = ARFFType.DATE;
             //TODO: DateFormatter map
             DateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss", Locale.ENGLISH);
-            int idx = lower.lastIndexOf(ARFFType.DATE.getIndicator());
-            String[] split = SPACE_PATTERN.split(line);
-            if (split.length >= 4) { //we have a date format
-              String formStr = line.substring(idx + ARFFType.DATE.getIndicator().length()).trim();
+            String formStr = attrParts[1].substring(ARFFType.DATE.getIndicator().length()).trim();
+            if (!formStr.isEmpty()) {
               if (formStr.startsWith("\"")) {
                 formStr = formStr.substring(1, formStr.length() - 1);
               }
@@ -126,13 +126,12 @@ public ARFFVectorIterable(Reader reader, ARFFModel model) throws IOException {
             model.addDateFormat(labelNumInt, format);
             //@attribute <name> date [<date-format>]
           } else {
-            throw new UnsupportedOperationException("Invalid attribute: " + line);
+            throw new UnsupportedOperationException("Invalid attribute: " + attrParts[1]);
           }
           model.addLabel(label, labelNumInt);
           model.addType(labelNumInt, type);
           labelNumber++;
-        } else if (lower.startsWith(ARFFModel.DATA)) {
-          //inData = true;
+        } else if (lineParts[0].equalsIgnoreCase(ARFFModel.DATA)) {
           break; //skip it
         }
       }
diff --git a/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterableTest.java b/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterableTest.java
index 90b21003..bf7415fc 100644
--- a/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterableTest.java
+++ b/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/arff/ARFFVectorIterableTest.java
@@ -124,7 +124,7 @@ public void testNonNumeric() throws Exception {
     assertEquals(1, nominalMap.size());
     Map<String, Integer> noms = nominalMap.get("bar");
     assertNotNull("nominals for bar are null", noms);
-    assertEquals(2, noms.size());
+    assertEquals(5, noms.size());
     Map<Integer, ARFFType> integerARFFTypeMap = model.getTypeMap();
     assertNotNull("Type map null", integerARFFTypeMap);
     assertEquals(5, integerARFFTypeMap.size());
@@ -189,7 +189,7 @@ public void testMultipleNoms() throws Exception {
     assertEquals(1, nominalMap.size());
     Map<String,Integer> noms = nominalMap.get("bar");
     assertNotNull("nominals for bar are null", noms);
-    assertEquals(2, noms.size());
+    assertEquals(5, noms.size());
     Map<Integer,ARFFType> integerARFFTypeMap = model.getTypeMap();
     assertNotNull("Type map null", integerARFFTypeMap);
     assertEquals(5, integerARFFTypeMap.size());
