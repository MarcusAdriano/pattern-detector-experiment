diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java
index 360259c2..087588bd 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java
@@ -348,6 +348,24 @@ public void bindStatement() throws StandardException
 				column.init(rc.getName(), null, rc.getType(), null);
 				tableElementList.addTableElement(column);
 			}
+		} else {
+			//Set the collation type and collation derivation of all the 
+			//character type columns. Their collation type will be same as the 
+			//collation of the schema they belong to. Their collation 
+			//derivation will be "implicit". 
+			//Earlier we did this in makeConstantAction but that is little too 
+			//late (DERBY-2955)
+			//eg 
+			//CREATE TABLE STAFF9 (EMPNAME CHAR(20),
+			//  CONSTRAINT STAFF9_EMPNAME CHECK (EMPNAME NOT LIKE 'T%'))
+			//For the query above, when run in a territory based db, we need 
+			//to have the correct collation set in bind phase of create table 
+			//so that when LIKE is handled in LikeEscapeOperatorNode, we have 
+			//the correct collation set for EMPNAME otherwise it will throw an 
+			//exception for 'T%' having collation of territory based and 
+			//EMPNAME having the default collation of UCS_BASIC
+			tableElementList.setCollationTypesOnCharacterStringColumns(
+					getSchemaDescriptor());
 		}
 
 		tableElementList.validate(this, dataDictionary, (TableDescriptor) null);
@@ -464,18 +482,6 @@ public ConstantAction	makeConstantAction() throws StandardException
 
 		SchemaDescriptor sd = getSchemaDescriptor();
 		
-		//Set the collation type and collation derivation of all the character
-		//type columns. Their collation type will be same as the collation of
-		//the schema they belong to. Theie collation derivation will be 
-		//"implicit".
-        for (int i = 0; i < colInfos.length; i++) {
-        	DataTypeDescriptor dts = colInfos[i].dataType;
-        	if (dts.getTypeId().isStringTypeId()) {
-        		dts.setCollationType(sd.getCollationType());
-        		dts.setCollationDerivation(StringDataValue.COLLATION_DERIVATION_IMPLICIT);
-        	}
-        }
-
 		if (numConstraints > 0)
 		{
 			conActions =
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/TableElementList.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/TableElementList.java
index 69013ff9..6705957e 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/TableElementList.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/sql/compile/TableElementList.java
@@ -29,6 +29,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.compile.C_NodeTypes;
 
 import org.apache.derby.iapi.types.DataTypeDescriptor;
+import org.apache.derby.iapi.types.StringDataValue;
 
 import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptor;
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
@@ -107,6 +108,29 @@ public String toString()
 		}
 	}
 
+	/**
+	 * Use the passed schema descriptor's collation type to set the collation
+	 * of the character string types in create table node
+	 * @param sd
+	 */
+	void setCollationTypesOnCharacterStringColumns(SchemaDescriptor sd) {
+		int			size = size();
+		int collationType = sd.getCollationType();
+		for (int index = 0; index < size; index++)
+		{
+			TableElementNode tableElement = (TableElementNode) elementAt(index);
+
+			if (tableElement instanceof ColumnDefinitionNode)
+			{
+				ColumnDefinitionNode cdn = (ColumnDefinitionNode) elementAt(index);
+				if (cdn.getDataTypeServices().getTypeId().isStringTypeId()) {
+					cdn.getDataTypeServices().setCollationType(collationType);
+					cdn.getDataTypeServices().setCollationDerivation(StringDataValue.COLLATION_DERIVATION_IMPLICIT);
+				}
+			}
+		}
+	}
+
 	/**
 	 * Validate this TableElementList.  This includes checking for
 	 * duplicate columns names, and checking that user types really exist.
diff --git a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
index 63ae9472..a5e786c2 100644
--- a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
+++ b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
@@ -947,7 +947,7 @@ private void commonTestingForTerritoryBasedDB(Statement s) throws SQLException{
     assertStatementError("42ZA3", s, "CREATE TABLE T AS SELECT TABLENAME " +
     		" FROM SYS.SYSTABLES WITH NO DATA");
     //But following will work because there is no character string type
-    //involved.
+    //involved. (DERBY-2959)
     s.executeUpdate("CREATE TABLE T AS SELECT COLUMNNUMBER FROM " +
     		" SYS.SYSCOLUMNS WITH NO DATA");
     
@@ -961,6 +961,12 @@ private void commonTestingForTerritoryBasedDB(Statement s) throws SQLException{
     ps.setString(1, new Integer(10).toString());
     ps.executeUpdate();     
 
+    //DERBY-2955
+    //We should set the collation type in the bind phase of create table rather
+    //than in code generation phase. Otherwise, following sql will give 
+    //incorrect exception about collation mismatch for the LIKE clause
+    s.execute("CREATE TABLE DERBY_2955 (EMPNAME CHAR(20), CONSTRAINT " +
+    		" STAFF9_EMPNAME CHECK (EMPNAME NOT LIKE 'T%'))");
 }
 
 private void setUpTable(Statement s) throws SQLException {
