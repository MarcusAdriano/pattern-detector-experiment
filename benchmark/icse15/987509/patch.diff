diff --git a/lucene/dev/trunk/solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.java b/lucene/dev/trunk/solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.java
index 4b0c8c45..f2d8dd04 100644
--- a/lucene/dev/trunk/solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.java
+++ b/lucene/dev/trunk/solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.java
@@ -450,6 +450,8 @@ protected NamedList toNamedList(SpellingResult spellingResult, String origQuery,
       for (Iterator<Map.Entry<Token, String>> bestIter = best.entrySet().iterator(); bestIter.hasNext();) {
         Map.Entry<Token, String> entry = bestIter.next();
         Token tok = entry.getKey();
+        // we are replacing the query in order, but injected terms might cause illegal offsets due to previous replacements.
+        if (tok.getPositionIncrement() == 0) continue;
         collation.replace(tok.startOffset() + offset, 
           tok.endOffset() + offset, entry.getValue());
         offset += entry.getValue().length() - (tok.endOffset() - tok.startOffset());
diff --git a/lucene/dev/trunk/solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest.java b/lucene/dev/trunk/solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest.java
index 949fc8c4..8fedf41f 100644
--- a/lucene/dev/trunk/solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest.java
+++ b/lucene/dev/trunk/solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest.java
@@ -57,6 +57,7 @@ public static void beforeClass() throws Exception {
     assertNull(h.validateUpdate(adoc("id", "6", "lowerfilt", "boue")));
     assertNull(h.validateUpdate(adoc("id", "7", "lowerfilt", "glue")));
     assertNull(h.validateUpdate(adoc("id", "8", "lowerfilt", "blee")));
+    assertNull(h.validateUpdate(adoc("id", "9", "lowerfilt", "pixmaa")));
     assertNull(h.validateUpdate(commit()));
   }
   
@@ -236,6 +237,30 @@ public void testCollate() throws Exception {
     assertEquals("document brown",collation);
   }
 
+  @Test
+  public void testCollate2() throws Exception {
+    SolrCore core = h.getCore();
+    SearchComponent speller = core.getSearchComponent("spellcheck");
+    assertTrue("speller is null and it shouldn't be", speller != null);
+
+    ModifiableSolrParams params = new ModifiableSolrParams();
+    params.add(CommonParams.QT, "spellCheckCompRH");
+    params.add(SpellCheckComponent.SPELLCHECK_BUILD, "true");
+    params.add(CommonParams.Q, "pixma-a-b-c-d-e-f-g");
+    params.add(SpellCheckComponent.COMPONENT_NAME, "true");
+    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, "true");
+
+    SolrRequestHandler handler = core.getRequestHandler("spellCheckCompRH");
+    SolrQueryResponse rsp = new SolrQueryResponse();
+    rsp.add("responseHeader", new SimpleOrderedMap());
+    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);
+    NamedList values = rsp.getValues();
+    NamedList spellCheck = (NamedList) values.get("spellcheck");
+    NamedList suggestions = (NamedList) spellCheck.get("suggestions");
+    String collation = (String) suggestions.get("collation");
+    assertEquals("pixmaa", collation);
+  }
+
   @Test
   public void testCorrectSpelling() throws Exception {
     SolrCore core = h.getCore();
