diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FieldCache.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FieldCache.java
index 815d225f..74063547 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FieldCache.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FieldCache.java
@@ -19,7 +19,6 @@
 
 import java.io.IOException;
 import java.io.PrintStream;
-import java.text.DecimalFormat;
 
 import org.apache.lucene.analysis.NumericTokenStream; // for javadocs
 import org.apache.lucene.document.IntField; // for javadocs
@@ -28,6 +27,7 @@
 import org.apache.lucene.document.DoubleField; // for javadocs
 import org.apache.lucene.index.DocTermOrds;
 import org.apache.lucene.index.AtomicReader;
+import org.apache.lucene.index.Terms;
 import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
@@ -52,21 +52,22 @@
     Object value;
   }
 
-  /**
-   * Hack: When thrown from a Parser (NUMERIC_UTILS_* ones), this stops
-   * processing terms and returns the current FieldCache
-   * array.
-   * @lucene.internal
-   */
-  public static final class StopFillCacheException extends RuntimeException {
-  }
-  
   /**
    * Marker interface as super-interface to all parsers. It
    * is used to specify a custom parser to {@link
    * SortField#SortField(String, FieldCache.Parser)}.
    */
   public interface Parser {
+    
+    /**
+     * Pulls a {@link TermsEnum} from the given {@link Terms}. This method allows certain parsers
+     * to filter the actual TermsEnum before the field cache is filled.
+     * 
+     * @param terms the {@link Terms} instance to create the {@link TermsEnum} from.
+     * @return a possibly filtered {@link TermsEnum} instance, this method must not return <code>null</code>.
+     * @throws IOException if an {@link IOException} occurs
+     */
+    public TermsEnum termsEnum(Terms terms) throws IOException;
   }
 
   /** Interface to parse bytes from document fields.
@@ -134,6 +135,10 @@ public byte parseByte(BytesRef term) {
     public String toString() { 
       return FieldCache.class.getName()+".DEFAULT_BYTE_PARSER"; 
     }
+    @Override
+    public TermsEnum termsEnum(Terms terms) throws IOException {
+      return terms.iterator(null);
+    }
   };
 
   /** The default parser for short values, which are encoded by {@link Short#toString(short)} */
@@ -150,6 +155,11 @@ public short parseShort(BytesRef term) {
     public String toString() { 
       return FieldCache.class.getName()+".DEFAULT_SHORT_PARSER"; 
     }
+    
+    @Override
+    public TermsEnum termsEnum(Terms terms) throws IOException {
+      return terms.iterator(null);
+    }
   };
 
   /** The default parser for int values, which are encoded by {@link Integer#toString(int)} */
@@ -162,6 +172,12 @@ public int parseInt(BytesRef term) {
       // directly from byte[]
       return Integer.parseInt(term.utf8ToString());
     }
+    
+    @Override
+    public TermsEnum termsEnum(Terms terms) throws IOException {
+      return terms.iterator(null);
+    }
+    
     @Override
     public String toString() { 
       return FieldCache.class.getName()+".DEFAULT_INT_PARSER"; 
@@ -178,6 +194,12 @@ public float parseFloat(BytesRef term) {
       // directly from byte[]
       return Float.parseFloat(term.utf8ToString());
     }
+    
+    @Override
+    public TermsEnum termsEnum(Terms terms) throws IOException {
+      return terms.iterator(null);
+    }
+    
     @Override
     public String toString() { 
       return FieldCache.class.getName()+".DEFAULT_FLOAT_PARSER"; 
@@ -194,6 +216,12 @@ public long parseLong(BytesRef term) {
       // directly from byte[]
       return Long.parseLong(term.utf8ToString());
     }
+    
+    @Override
+    public TermsEnum termsEnum(Terms terms) throws IOException {
+      return terms.iterator(null);
+    }
+    
     @Override
     public String toString() { 
       return FieldCache.class.getName()+".DEFAULT_LONG_PARSER"; 
@@ -210,6 +238,12 @@ public double parseDouble(BytesRef term) {
       // directly from byte[]
       return Double.parseDouble(term.utf8ToString());
     }
+    
+    @Override
+    public TermsEnum termsEnum(Terms terms) throws IOException {
+      return terms.iterator(null);
+    }
+    
     @Override
     public String toString() { 
       return FieldCache.class.getName()+".DEFAULT_DOUBLE_PARSER"; 
@@ -223,10 +257,14 @@ public String toString() {
   public static final IntParser NUMERIC_UTILS_INT_PARSER=new IntParser(){
     @Override
     public int parseInt(BytesRef term) {
-      if (NumericUtils.getPrefixCodedIntShift(term) > 0)
-        throw new StopFillCacheException();
       return NumericUtils.prefixCodedToInt(term);
     }
+    
+    @Override
+    public TermsEnum termsEnum(Terms terms) throws IOException {
+      return NumericUtils.filterPrefixCodedInts(terms.iterator(null));
+    }
+    
     @Override
     public String toString() { 
       return FieldCache.class.getName()+".NUMERIC_UTILS_INT_PARSER"; 
@@ -240,14 +278,17 @@ public String toString() {
   public static final FloatParser NUMERIC_UTILS_FLOAT_PARSER=new FloatParser(){
     @Override
     public float parseFloat(BytesRef term) {
-      if (NumericUtils.getPrefixCodedIntShift(term) > 0)
-        throw new StopFillCacheException();
       return NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(term));
     }
     @Override
     public String toString() { 
       return FieldCache.class.getName()+".NUMERIC_UTILS_FLOAT_PARSER"; 
     }
+    
+    @Override
+    public TermsEnum termsEnum(Terms terms) throws IOException {
+      return NumericUtils.filterPrefixCodedInts(terms.iterator(null));
+    }
   };
 
   /**
@@ -257,14 +298,17 @@ public String toString() {
   public static final LongParser NUMERIC_UTILS_LONG_PARSER = new LongParser(){
     @Override
     public long parseLong(BytesRef term) {
-      if (NumericUtils.getPrefixCodedLongShift(term) > 0)
-        throw new StopFillCacheException();
       return NumericUtils.prefixCodedToLong(term);
     }
     @Override
     public String toString() { 
       return FieldCache.class.getName()+".NUMERIC_UTILS_LONG_PARSER"; 
     }
+    
+    @Override
+    public TermsEnum termsEnum(Terms terms) throws IOException {
+      return NumericUtils.filterPrefixCodedLongs(terms.iterator(null));
+    }
   };
 
   /**
@@ -274,14 +318,17 @@ public String toString() {
   public static final DoubleParser NUMERIC_UTILS_DOUBLE_PARSER = new DoubleParser(){
     @Override
     public double parseDouble(BytesRef term) {
-      if (NumericUtils.getPrefixCodedLongShift(term) > 0)
-        throw new StopFillCacheException();
       return NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(term));
     }
     @Override
     public String toString() { 
       return FieldCache.class.getName()+".NUMERIC_UTILS_DOUBLE_PARSER"; 
     }
+    
+    @Override
+    public TermsEnum termsEnum(Terms terms) throws IOException {
+      return NumericUtils.filterPrefixCodedLongs(terms.iterator(null));
+    }
   };
   
  
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java
index df42c0da..b03548cc 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java
@@ -140,13 +140,6 @@ public synchronized void purge(AtomicReader r) {
     public Object getValue() { return value; }
   }
 
-  /**
-   * Hack: When thrown from a Parser (NUMERIC_UTILS_* ones), this stops
-   * processing terms and returns the current FieldCache
-   * array.
-   */
-  static final class StopFillCacheException extends RuntimeException {
-  }
   
   // per-segment fieldcaches don't purge until the shared core closes.
   final SegmentReader.CoreClosedListener purgeCore = new SegmentReader.CoreClosedListener() {
@@ -360,9 +353,9 @@ protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDoc
             setDocsWithField = false;
           }
         }
-        final TermsEnum termsEnum = terms.iterator(null);
+        final TermsEnum termsEnum = parser.termsEnum(terms);
+        assert termsEnum != null : "TermsEnum must not be null";
         DocsEnum docs = null;
-        try {
           while(true) {
             final BytesRef term = termsEnum.next();
             if (term == null) {
@@ -385,8 +378,6 @@ protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDoc
               }
             }
           }
-        } catch (FieldCache.StopFillCacheException stop) {
-        }
       }
       if (setDocsWithField) {
         wrapper.setDocsWithField(reader, field, docsWithField);
@@ -435,9 +426,9 @@ protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDoc
             setDocsWithField = false;
           }
         }
-        final TermsEnum termsEnum = terms.iterator(null);
+        final TermsEnum termsEnum = parser.termsEnum(terms);
+        assert termsEnum != null : "TermsEnum must not be null";
         DocsEnum docs = null;
-        try {
           while(true) {
             final BytesRef term = termsEnum.next();
             if (term == null) {
@@ -460,8 +451,6 @@ protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDoc
               }
             }
           }
-        } catch (FieldCache.StopFillCacheException stop) {
-        }
       }
       if (setDocsWithField) {
         wrapper.setDocsWithField(reader, field, docsWithField);
@@ -536,9 +525,9 @@ protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDoc
             setDocsWithField = false;
           }
         }
-        final TermsEnum termsEnum = terms.iterator(null);
+        final TermsEnum termsEnum = parser.termsEnum(terms);
+        assert termsEnum != null : "TermsEnum must not be null";
         DocsEnum docs = null;
-        try {
           while(true) {
             final BytesRef term = termsEnum.next();
             if (term == null) {
@@ -566,8 +555,6 @@ protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDoc
               }
             }
           }
-        } catch (FieldCache.StopFillCacheException stop) {
-        }
       }
 
       if (retArray == null) {
@@ -689,9 +676,9 @@ protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDoc
             setDocsWithField = false;
           }
         }
-        final TermsEnum termsEnum = terms.iterator(null);
+        final TermsEnum termsEnum = parser.termsEnum(terms);
+        assert termsEnum != null : "TermsEnum must not be null";
         DocsEnum docs = null;
-        try {
           while(true) {
             final BytesRef term = termsEnum.next();
             if (term == null) {
@@ -719,8 +706,6 @@ protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDoc
               }
             }
           }
-        } catch (FieldCache.StopFillCacheException stop) {
-        }
       }
 
       if (retArray == null) {
@@ -779,9 +764,9 @@ protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDoc
             setDocsWithField = false;
           }
         }
-        final TermsEnum termsEnum = terms.iterator(null);
+        final TermsEnum termsEnum = parser.termsEnum(terms);
+        assert termsEnum != null : "TermsEnum must not be null";
         DocsEnum docs = null;
-        try {
           while(true) {
             final BytesRef term = termsEnum.next();
             if (term == null) {
@@ -809,8 +794,6 @@ protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDoc
               }
             }
           }
-        } catch (FieldCache.StopFillCacheException stop) {
-        }
       }
 
       if (retArray == null) {
@@ -870,9 +853,9 @@ protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDoc
             setDocsWithField = false;
           }
         }
-        final TermsEnum termsEnum = terms.iterator(null);
+        final TermsEnum termsEnum = parser.termsEnum(terms);
+        assert termsEnum != null : "TermsEnum must not be null";
         DocsEnum docs = null;
-        try {
           while(true) {
             final BytesRef term = termsEnum.next();
             if (term == null) {
@@ -900,8 +883,6 @@ protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDoc
               }
             }
           }
-        } catch (FieldCache.StopFillCacheException stop) {
-        }
       }
       if (retArray == null) { // no values
         retArray = new double[maxDoc];
diff --git a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/NumericUtils.java b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/NumericUtils.java
index f4fcc632..34ead1fa 100644
--- a/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/NumericUtils.java
+++ b/lucene/dev/trunk/lucene/core/src/java/org/apache/lucene/util/NumericUtils.java
@@ -22,6 +22,8 @@
 import org.apache.lucene.document.FloatField; // javadocs
 import org.apache.lucene.document.IntField; // javadocs
 import org.apache.lucene.document.LongField; // javadocs
+import org.apache.lucene.index.FilteredTermsEnum;
+import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.search.NumericRangeFilter;
 import org.apache.lucene.search.NumericRangeQuery; // for javadocs
 
@@ -456,4 +458,41 @@ public void addRange(final int min, final int max, final int shift) {
   
   }
   
+  /**
+   * Filters the given {@link TermsEnum} by accepting only prefix coded 64 bit
+   * terms with a shift value of <tt>0</tt>.
+   * 
+   * @param termsEnum
+   *          the terms enum to filter
+   * @return a filtered {@link TermsEnum} that only returns prefix coded 64 bit
+   *         terms with a shift value of <tt>0</tt>.
+   */
+  public static TermsEnum filterPrefixCodedLongs(TermsEnum termsEnum) {
+    return new FilteredTermsEnum(termsEnum, false) {
+      @Override
+      protected AcceptStatus accept(BytesRef term) {
+        return NumericUtils.getPrefixCodedLongShift(term) == 0 ? AcceptStatus.YES : AcceptStatus.END;
+      }
+    };
+  }
+  
+  /**
+   * Filters the given {@link TermsEnum} by accepting only prefix coded 32 bit
+   * terms with a shift value of <tt>0</tt>.
+   * 
+   * @param termsEnum
+   *          the terms enum to filter
+   * @return a filtered {@link TermsEnum} that only returns prefix coded 32 bit
+   *         terms with a shift value of <tt>0</tt>.
+   */
+  public static TermsEnum filterPrefixCodedInts(TermsEnum termsEnum) {
+    return new FilteredTermsEnum(termsEnum, false) {
+      
+      @Override
+      protected AcceptStatus accept(BytesRef term) {
+        return NumericUtils.getPrefixCodedIntShift(term) == 0 ? AcceptStatus.YES : AcceptStatus.END;
+      }
+    };
+  }
+  
 }
diff --git a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java
index 88ef513b..1b430081 100644
--- a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java
+++ b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java
@@ -21,6 +21,8 @@
 
 import org.apache.lucene.index.AtomicReaderContext;
 import org.apache.lucene.index.Norm;
+import org.apache.lucene.index.Terms;
+import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.search.similarities.Similarity;
 import org.apache.lucene.util.Bits;
 import org.apache.lucene.util.BytesRef;
@@ -96,6 +98,11 @@ public long parseLong(BytesRef string) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
     
+    @Override
+    public TermsEnum termsEnum(Terms terms) {
+      throw new UnsupportedOperationException(UNSUPPORTED_MSG);
+    }
+    
   }
   
   static final class JustCompileExtendedFieldCacheDoubleParser implements FieldCache.DoubleParser {
@@ -105,6 +112,11 @@ public double parseDouble(BytesRef term) {
       throw new UnsupportedOperationException(UNSUPPORTED_MSG);
     }
     
+    @Override
+    public TermsEnum termsEnum(Terms terms) {
+      throw new UnsupportedOperationException(UNSUPPORTED_MSG);
+    }
+    
   }
 
   static final class JustCompileFieldComparator extends FieldComparator<Object> {
diff --git a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestSort.java b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestSort.java
index e143d6a4..95348834 100644
--- a/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestSort.java
+++ b/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/search/TestSort.java
@@ -53,6 +53,8 @@
 import org.apache.lucene.index.StorableField;
 import org.apache.lucene.index.StoredDocument;
 import org.apache.lucene.index.Term;
+import org.apache.lucene.index.Terms;
+import org.apache.lucene.index.TermsEnum;
 import org.apache.lucene.search.BooleanClause.Occur;
 import org.apache.lucene.search.FieldValueHitQueue.Entry;
 import org.apache.lucene.store.Directory;
@@ -581,6 +583,11 @@ public void testCustomFieldParserSort() throws Exception {
       public final int parseInt(final BytesRef term) {
         return (term.bytes[term.offset]-'A') * 123456;
       }
+      
+      @Override
+      public TermsEnum termsEnum(Terms terms) throws IOException {
+        return terms.iterator(null);
+      }
     }), SortField.FIELD_DOC );
     assertMatches (full, queryA, sort, "JIHGFEDCBA");
     assertSaneFieldCaches(getTestName() + " IntParser");
@@ -591,6 +598,10 @@ public final int parseInt(final BytesRef term) {
       public final float parseFloat(final BytesRef term) {
         return (float) Math.sqrt( term.bytes[term.offset] );
       }
+      @Override
+      public TermsEnum termsEnum(Terms terms) throws IOException {
+        return terms.iterator(null);
+      }
     }), SortField.FIELD_DOC );
     assertMatches (full, queryA, sort, "JIHGFEDCBA");
     assertSaneFieldCaches(getTestName() + " FloatParser");
@@ -601,6 +612,11 @@ public final float parseFloat(final BytesRef term) {
       public final long parseLong(final BytesRef term) {
         return (term.bytes[term.offset]-'A') * 1234567890L;
       }
+      
+      @Override
+      public TermsEnum termsEnum(Terms terms) throws IOException {
+        return terms.iterator(null);
+      }
     }), SortField.FIELD_DOC );
     assertMatches (full, queryA, sort, "JIHGFEDCBA");
     assertSaneFieldCaches(getTestName() + " LongParser");
@@ -611,6 +627,10 @@ public final long parseLong(final BytesRef term) {
       public final double parseDouble(final BytesRef term) {
         return Math.pow( term.bytes[term.offset], (term.bytes[term.offset]-'A') );
       }
+      @Override
+      public TermsEnum termsEnum(Terms terms) throws IOException {
+        return terms.iterator(null);
+      }
     }), SortField.FIELD_DOC );
     assertMatches (full, queryA, sort, "JIHGFEDCBA");
     assertSaneFieldCaches(getTestName() + " DoubleParser");
@@ -621,6 +641,11 @@ public final double parseDouble(final BytesRef term) {
       public final byte parseByte(final BytesRef term) {
         return (byte) (term.bytes[term.offset]-'A');
       }
+
+      @Override
+      public TermsEnum termsEnum(Terms terms) throws IOException {
+        return terms.iterator(null);
+      }
     }), SortField.FIELD_DOC );
     assertMatches (full, queryA, sort, "JIHGFEDCBA");
     assertSaneFieldCaches(getTestName() + " ByteParser");
@@ -631,6 +656,10 @@ public final byte parseByte(final BytesRef term) {
       public final short parseShort(final BytesRef term) {
         return (short) (term.bytes[term.offset]-'A');
       }
+      @Override
+      public TermsEnum termsEnum(Terms terms) throws IOException {
+        return terms.iterator(null);
+      }
     }), SortField.FIELD_DOC );
     assertMatches (full, queryA, sort, "JIHGFEDCBA");
     assertSaneFieldCaches(getTestName() + " ShortParser");
@@ -708,6 +737,11 @@ public void setBottom(int bottom) {
       public final int parseInt(final BytesRef term) {
         return (term.bytes[term.offset]-'A') * 123456;
       }
+      
+      @Override
+      public TermsEnum termsEnum(Terms terms) throws IOException {
+        return terms.iterator(null);
+      }
     };
 
     @Override
