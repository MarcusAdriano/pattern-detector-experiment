diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java
index 23c18153..d1b91e5e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java
@@ -50,10 +50,17 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  * statements, the result column represents an column in a stored table.
  * So, a ResultColumn has to be bound differently depending on the type of
  * statement it appears in.
- * 
+ * <P>
  * The type of the ResultColumn can differ from its underlying expression,
  * for example in certain joins the ResultColumn can be nullable even if
- * its underlying column is not.
+ * its underlying column is not. In an INSERT or UPDATE the ResultColumn
+ * will represent the type of the column in the table, the type of
+ * the underlying expresion will be the type of the source of the
+ * value to be insert or updated. The method columnTypeAndLengthMatch()
+ * can be used to detect when normalization is required between
+ * the expression and the tyoe of ResultColumn. This class does
+ * not implement any type normalization (conversion), this is
+ * typically handled by a NormalizeResultSetNode.
  *
  */
 
@@ -911,7 +918,7 @@ public void generateHolder(ExpressionClassBuilder acb,
 		mb.upCast(ClassName.DataValueDescriptor);
 	}
 
-	/*
+	/**
 	** Check whether the column length and type of this result column
 	** match the expression under the columns.  This is useful for
 	** INSERT and UPDATE statements.  For SELECT statements this method
@@ -921,7 +928,6 @@ public void generateHolder(ExpressionClassBuilder acb,
 	** @return	true means the column matches its expressions,
 	**			false means it doesn't match.
 	*/
-
 	boolean columnTypeAndLengthMatch()
 		throws StandardException
 	{
@@ -948,9 +954,6 @@ boolean columnTypeAndLengthMatch()
         
         DataTypeDescriptor  expressionType = getExpression().getTypeServices();
         
-        if (expressionType == null)
-            System.out.println(getExpression().getClass());
-        
         if (!getTypeServices().isExactTypeAndLengthMatch(expressionType))
             return false;
 
