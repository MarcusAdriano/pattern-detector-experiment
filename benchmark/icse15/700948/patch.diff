diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Sqlca.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Sqlca.java
index 013130ed..8d51c8be 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Sqlca.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Sqlca.java
@@ -390,8 +390,9 @@ private void processSqlErrmcTokens(byte[] tokenBytes) {
                 // (five characters) and a colon. Extract the SQL state and
                 // clean up the token. See
                 // DRDAConnThread.buildTokenizedSqlerrmc() for more details.
-                states[i] = tokens[i].substring(0, 5);
-                tokens[i] = tokens[i].substring(6);
+                int colonpos = tokens[i].indexOf(":");
+                states[i] = tokens[i].substring(0, colonpos);
+                tokens[i] = tokens[i].substring(colonpos + 1);
             }
             sqlStates_ = states;
             sqlErrmcMessages_ = tokens;
diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
index 8a2827fa..72832132 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAConnThread.java
@@ -6005,7 +6005,7 @@ private String buildSqlerrmc (SQLException se)
 		se = Util.getExceptionFactory().getArgumentFerry( se );
 		
 		if (se instanceof EmbedSQLException  && ! severe)
-			sqlerrmc = buildTokenizedSqlerrmc((EmbedSQLException) se);
+			sqlerrmc = buildTokenizedSqlerrmc(se);
 		else {
 			// If this is not an EmbedSQLException or is a severe excecption where
 			// we have no hope of succussfully calling the SYSIBM.SQLCAMESSAGE send
@@ -6057,17 +6057,32 @@ private String  buildPreformattedSqlerrmc(SQLException se) {
 	 * @param se   SQLException to print
 	 * 
 	 */
-	private String buildTokenizedSqlerrmc(EmbedSQLException se) {
+	private String buildTokenizedSqlerrmc(SQLException se) {
 		
 		String sqlerrmc = "";
 		do {
-			String messageId = se.getMessageId();
+			if ( se instanceof EmbedSQLException)
+			{
+				String messageId = ((EmbedSQLException)se).getMessageId();
 			// arguments are variable part of a message
-			Object[] args = se.getArguments();
+				Object[] args = ((EmbedSQLException)se).getArguments();
 			for (int i = 0; args != null &&  i < args.length; i++)
 				sqlerrmc += args[i] + SQLERRMC_TOKEN_DELIMITER;
 			sqlerrmc += messageId;
-			se = (EmbedSQLException) se.getNextException();
+				se = se.getNextException();
+			}
+			else
+			{   
+				// this could happen for instance if an SQLException was thrown
+				// from a stored procedure.
+				StringBuffer sb = new StringBuffer(); 
+				sb.append(se.getLocalizedMessage());
+				se = se.getNextException();
+				if (se != null)
+				sb.append(SQLERRMC_TOKEN_DELIMITER + 
+					"SQLSTATE: " + se.getSQLState());
+				sqlerrmc += sb.toString();
+			}
 			if (se != null)
 			{
 				sqlerrmc += SystemProcedures.SQLERRMC_MESSAGE_DELIMITER + se.getSQLState() + ":";				
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/i18n/MessageService.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/i18n/MessageService.java
index a8fc6be6..f1ecfaa6 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/i18n/MessageService.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/i18n/MessageService.java
@@ -270,8 +270,9 @@ public static String formatMessage(ResourceBundle bundle, String messageId, Obje
 		
 		StringBuffer sb = new StringBuffer(messageId);
 
-		sb.append(" : ");
 		int len = arguments.length;
+		if (len > 0)
+			sb.append(" : ");
 
 		for (int i=0; i < len; i++) {
 		    // prepend a comma to all but the first
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SqlExceptionTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SqlExceptionTest.java
index 250c53e6..bdaec841 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SqlExceptionTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SqlExceptionTest.java
@@ -144,6 +144,87 @@ public void testSerializedException() throws Exception {
         }
     }
 
+    /**
+     * Verify that an SQLException thrown by a function can be returned
+     * (DERBY-790).
+     */
+    public void testDerby3390() throws Exception {
+        setAutoCommit(false);
+        Statement stmt = createStatement();
+
+        // with client/server we prefetch, so the error comes earlier
+        try {
+            if (usingDerbyNetClient())
+            {
+                stmt.execute("values badFunction1()");
+                fail("expected an error");
+            }
+            else 
+            {
+                stmt.execute("values badFunction1()");
+                ResultSet rs = stmt.getResultSet();
+                rs.next();
+                fail("expected an error");
+            }
+        } catch (SQLException e) {
+            setAutoCommit(true);
+            // if DERBY-3390 occurs, at this point, with networkserver/client, 
+            // we'd get a 08006. In the server's derby.log you'd see a 
+            // ClassCastException
+            assertSQLState("38000", e);
+            assertTrue(e.getMessage().indexOf("I refuse to return an int") > 1);
+        }
+
+        // as above, but this time the function uses the constructor for
+        // SQLException with SQLState.
+        try {
+            if (usingDerbyNetClient())
+            {
+                stmt.execute("values badFunction2()");
+                fail("expected an error");
+            }
+            else 
+            {
+                stmt.execute("values badFunction2()");
+                ResultSet rs = stmt.getResultSet();
+                rs.next();
+                fail("expected an error");
+            }
+        } catch (SQLException e) {
+            setAutoCommit(true);
+            // if DERBY-3390 occurs, at this point, with networkserver/client, 
+            // we'd get a 08006. In the server's derby.log you'd see a 
+            // ClassCastException
+            assertSQLState("38000", e);
+            assertSQLState("50000", e);
+            assertTrue(e.getMessage().indexOf("I refuse to return an int") > 1);
+        }
+
+        // test an Exception gets thrown for good measure
+        try {
+            if (usingDerbyNetClient())
+            {
+                stmt.execute("values badFunction3()");
+                fail("expected an error");
+            }
+            else 
+            {
+                stmt.execute("values badFunction3()");
+                ResultSet rs = stmt.getResultSet();
+                rs.next();
+                fail("expected an error");
+            }
+        } catch (SQLException e) {
+            setAutoCommit(true);
+            assertSQLState("38000", e);
+            assertTrue(e.getMessage().indexOf("The exception 'java.lang.Exception: I refuse to return an int!'")==0);
+        }
+        
+        stmt.close();
+        rollback();
+        setAutoCommit(true);
+    }    
+
     /**
      * Set up the connection to the database.
      */
@@ -154,6 +235,15 @@ public void setUp() throws Exception {
                 "c2 int)";
         Statement stmt = conn.createStatement();
         stmt.execute(createTableWithPK);
+        stmt.execute("create function badFunction1() returns int language java"
+                + " parameter style java no sql external name '" +
+                SqlExceptionTest.class.getName() + ".badFunction1'");
+        stmt.execute("create function badFunction2() returns int language java"
+                + " parameter style java no sql external name '" +
+                SqlExceptionTest.class.getName() + ".badFunction2'");
+        stmt.execute("create function badFunction3() returns int language java"
+                + " parameter style java no sql external name '" +
+                SqlExceptionTest.class.getName() + ".badFunction3'");
         stmt.close();
         conn.close();
     }
@@ -165,6 +255,9 @@ public void tearDown() throws Exception {
         Connection conn = getConnection();
         Statement stmt = conn.createStatement();
         stmt.executeUpdate("DROP TABLE tableWithPK");
+        stmt.executeUpdate("drop function badfunction1");
+        stmt.executeUpdate("drop function badfunction2");
+        stmt.executeUpdate("drop function badfunction3");
         stmt.close();
         conn.close();
         super.tearDown();
@@ -204,4 +297,38 @@ public static Test suite() {
             return test;
         }
     }
+    
+    /* <p> 
+     * For testing DERBY-3390
+     * This function just throws a SQLException, without SQLState 
+     * </p> 
+     */ 
+    public static int badFunction1() 
+        throws SQLException 
+    { 
+        throw new SQLException( "I refuse to return an int!" );
+    }
+
+    /* <p> 
+     * For testing DERBY-3390
+     * This function just throws a SQLException, with SQLState 
+     * </p> 
+     */ 
+    public static int badFunction2() 
+        throws SQLException 
+    { 
+        throw new SQLException( "I refuse to return an int!", "50000" );
+    }
+    
+    /* <p> 
+     * For testing DERBY-3390
+     * This function just throws an Exception 
+     * </p> 
+     */ 
+    public static int badFunction3() 
+        throws Exception 
+    { 
+        throw new Exception( "I refuse to return an int!" );
+    }
+
 }
