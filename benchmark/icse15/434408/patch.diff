diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/PrivilegeInfo.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/PrivilegeInfo.java
index 0192c6ab..c28a6a27 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/PrivilegeInfo.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/PrivilegeInfo.java
@@ -76,4 +76,24 @@ protected void checkOwnership( String user,
 									  sd.getSchemaName(),
 									  objectDescriptor.getDescriptorName());
 	}
+	
+	/**
+	 * This method adds a warning if a revoke statement has not revoked 
+	 * any privileges from a grantee.
+	 * 
+	 * @param activation
+	 * @param grant true if grant, false if revoke
+	 * @param privileges_revoked true, if at least one privilege has been 
+	 * 							revoked from a grantee, false otherwise
+	 * @param grantee authorization id of the user
+	 */
+	protected void addWarningIfPrivilegeNotRevoked( Activation activation,
+													boolean grant,
+													boolean privileges_revoked,
+													String grantee) 
+	{
+		if(!grant && !privileges_revoked)
+			activation.addWarning(StandardException.newWarning
+					(SQLState.LANG_PRIVILEGE_NOT_REVOKED, grantee));
+	}
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RoutinePrivilegeInfo.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RoutinePrivilegeInfo.java
index 1db73d24..b2472511 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RoutinePrivilegeInfo.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/RoutinePrivilegeInfo.java
@@ -78,13 +78,21 @@ public void executeGrantRevoke( Activation activation,
 		dd.startWriting(lcc);
 		for( Iterator itr = grantees.iterator(); itr.hasNext();)
 		{
+			// Keep track to see if any privileges are revoked by a revoke 
+			// statement. If a privilege is not revoked, we need to raise a
+			// warning.
+			boolean privileges_revoked = false;
 			String grantee = (String) itr.next();
 			if (dd.addRemovePermissionsDescriptor( grant, routinePermsDesc, grantee, tc))
+			{
+				privileges_revoked = true;	
 				//Derby currently supports only restrict form of revoke execute
 				//privilege and that is why, we are sending invalidation action 
 				//as REVOKE_PRIVILEGE_RESTRICT rather than REVOKE_PRIVILEGE
         		dd.getDependencyManager().invalidateFor(routinePermsDesc, DependencyManager.REVOKE_PRIVILEGE_RESTRICT, lcc);
+			}
 
+			addWarningIfPrivilegeNotRevoked(activation, grant, privileges_revoked, grantee);
 		}
 	} // end of executeConstantAction
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TablePrivilegeInfo.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TablePrivilegeInfo.java
index c1a6efc3..0a3ad6a4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TablePrivilegeInfo.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/TablePrivilegeInfo.java
@@ -128,11 +128,22 @@ public void executeGrantRevoke( Activation activation,
 		// Add or remove the privileges to/from the SYS.SYSTABLEPERMS and SYS.SYSCOLPERMS tables
 		for( Iterator itr = grantees.iterator(); itr.hasNext();)
 		{
+			// Keep track to see if any privileges are revoked by a revoke 
+			// statement. If a privilege is not revoked, we need to raise a 
+			// warning. For table privileges, we do not check if privilege for 
+			// a specific action has been revoked or not. Also, we do not check
+			// privileges for specific columns. If at least one privilege has 
+			// been revoked, we do not raise a warning. This has to be refined 
+			// further to check for specific actions/columns and raise warning 
+			// if any privilege has not been revoked.
+			boolean privileges_revoked = false;
+						
 			String grantee = (String) itr.next();
 			if( tablePermsDesc != null)
 			{
 				if (dd.addRemovePermissionsDescriptor( grant, tablePermsDesc, grantee, tc))
 				{
+					privileges_revoked = true;
 	        		dd.getDependencyManager().invalidateFor(tablePermsDesc, DependencyManager.REVOKE_PRIVILEGE, lcc);
 				}
 			}
@@ -141,10 +152,15 @@ public void executeGrantRevoke( Activation activation,
 				if( colPermsDescs[i] != null)
 				{
 					if (dd.addRemovePermissionsDescriptor( grant, colPermsDescs[i], grantee, tc))					
+					{
+						privileges_revoked = true;
 		        		dd.getDependencyManager().invalidateFor(colPermsDescs[i], DependencyManager.REVOKE_PRIVILEGE, lcc);
 				}
 			}
 		}
+			
+			addWarningIfPrivilegeNotRevoked(activation, grant, privileges_revoked, grantee);
+		}
 	} // end of executeConstantAction
 
 	private String getPermString( int action, boolean forGrantOption)
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index fdf54432..31a78c34 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -638,6 +638,7 @@ The message identifier (ie. the value that matches a field in this class)
 	String LANG_VALUE_TRUNCATED                                        = "01505";
 	String LANG_SYNONYM_UNDEFINED                                      = "01522";
 	String LANG_NULL_ELIMINATED_IN_SET_FUNCTION						   = "01003";
+	String LANG_PRIVILEGE_NOT_REVOKED						   		   = "01006";
 
 	String LANG_NO_ROW_FOUND									   	   = "02000";
 
