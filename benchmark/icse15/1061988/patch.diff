diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java
index 3e77e2ee..bb143abd 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/InterruptResilienceTest.java
@@ -74,6 +74,13 @@ public static Test suite()
             return suite;
         }
 
+        if (hasInterruptibleIO()) {
+            println("Test skipped due to interruptible IO.");
+            println("This is default on Solaris/Sun Java <= 1.6, use " +
+                    "-XX:-UseVMInterruptibleIO if available.");
+            return suite;
+        }
+
         suite.addTest(
             baseSuite("InterruptResilienceTest:embedded"));
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
index 4c492d8b..8165a3bd 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
@@ -601,9 +601,7 @@ public static final boolean isSunJVM() {
      *
      * @return true if we have old style interruptible IO
      */
-    public static final boolean hasInterruptibleIO()
-            throws Exception {
-
+    public static final boolean hasInterruptibleIO() {
 
         boolean interruptibleIO = false;
 
@@ -617,14 +615,20 @@ public Object run() throws
 
                         String sysHome = getSystemProperty("derby.system.home");
 
-                        StringBuffer arbitraryRAFFileName = new StringBuffer();
+                        StringBuffer arbitraryRAFFileNameB = new StringBuffer();
+
+                        arbitraryRAFFileNameB.append(sysHome);
+                        arbitraryRAFFileNameB.append(File.separatorChar);
+                        arbitraryRAFFileNameB.append("derby.log");
 
-                        arbitraryRAFFileName.append(sysHome);
-                        arbitraryRAFFileName.append(File.separatorChar);
-                        arbitraryRAFFileName.append("derby.log");
+                        String arbitraryRAFFileName =
+                            arbitraryRAFFileNameB.toString();
+                        // Create if it does not exist:
+                        new File(sysHome).mkdirs(); // e.g. "system"
+                        new File(arbitraryRAFFileName).createNewFile();
 
                         RandomAccessFile f = new RandomAccessFile(
-                            arbitraryRAFFileName.toString(), "r");
+                            arbitraryRAFFileName, "r");
 
                         try {
                             Thread.currentThread().interrupt();
@@ -640,9 +644,14 @@ public Object run() throws
             if (e.getCause() instanceof InterruptedIOException) {
                 interruptibleIO = true;
             } else {
-                throw e;
+                // Better to assume nothing when the test fails. Then, tests
+                // will not be skipped and we would not miss that something is
+                // amiss.
+                println("Could not test for interruptible IO," +
+                        " so assuming we don't have it: " + e);
+                e.getCause().printStackTrace();
+                return false;
             }
-
         }
 
         return interruptibleIO;
