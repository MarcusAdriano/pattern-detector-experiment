diff --git a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/ProxySubclassGenerator.java b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/ProxySubclassGenerator.java
index a76fd474..60439ecf 100644
--- a/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/ProxySubclassGenerator.java
+++ b/incubator/aries/trunk/blueprint/blueprint-core/src/main/java/org/apache/aries/blueprint/proxy/ProxySubclassGenerator.java
@@ -51,6 +51,8 @@
   // Class names to sub-Class names)
   private static final Map<ClassLoader, ConcurrentMap<String, String>> proxyClassesByClassLoader;
 
+  private static final ClassLoader defaultClassLoader = new ClassLoader() {};
+
   static {
     // Ensure that this is a synchronized map as we may use it from multiple
     // threads concurrently
@@ -67,10 +69,9 @@
     LOGGER.debug(AsmInterceptorWrapper.LOG_ENTRY, "getProxySubclass", new Object[] { aClass });
 
     ClassLoader loader = aClass.getClassLoader();
-    // in the special case where the loader is null we use the thread
-    // ContextClassLoader
-    // this is for subclassing java.* or javax.* packages
-    if (loader == null) loader = Thread.currentThread().getContextClassLoader();
+    // in the special case where the loader is null we use a default classloader
+    // this is for subclassing java.* or javax.* packages, so that one will do
+    if (loader == null) loader = defaultClassLoader;
 
     ConcurrentMap<String, String> proxyMap;
     synchronized (loader) {
