diff --git a/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ModelledResourceManagerImpl.java b/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ModelledResourceManagerImpl.java
index b3ba3185..1dd7b659 100644
--- a/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ModelledResourceManagerImpl.java
+++ b/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/impl/ModelledResourceManagerImpl.java
@@ -26,6 +26,8 @@
 import java.io.InputStream;
 import java.net.MalformedURLException;
 import java.net.URISyntaxException;
+import java.security.AccessController;
+import java.security.PrivilegedAction;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashSet;
@@ -206,6 +208,8 @@ private ModelledResource model(String uri, BundleManifest bm, ParsedServiceEleme
       return mbi;      
   }
 
+
+  
   /**
    * Helper method to pass a single bundle into findBlueprints 
    * @param bundleMf The bundle manifest 
@@ -220,6 +224,11 @@ private ModelledResource model(String uri, BundleManifest bm, ParsedServiceEleme
 
     Collection<IFile> blueprints = new ArrayList<IFile>();
     BundleBlueprintParser bpParser = new BundleBlueprintParser(bundleMf);
+    
+    /* OSGi R5 Spec, section 121.3.4: "If the Bundle-Blueprint header is specified but empty, then the Blueprint 
+     * bundle must not be managed. This can be used to temporarily disable a Blueprint bundle."
+     */
+    if (bpParser.mightContainBlueprint()) { 
     List<IFile> files = bundle.listAllFiles();
     Iterator<IFile> it = files.iterator();
     while (it.hasNext()) {
@@ -243,10 +252,11 @@ private ModelledResource model(String uri, BundleManifest bm, ParsedServiceEleme
             } 
 
         }
-        if (bpParser.isBPFile(directoryName, fileName)) {
+	        if (!file.isDirectory() && bpParser.isBPFile(directoryName, fileName)) {
             blueprints.add(file);
         }
     }
+    }
     
     Collection<InputStream> result = new ArrayList<InputStream>();
     try {
diff --git a/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/internal/BundleBlueprintParser.java b/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/internal/BundleBlueprintParser.java
index ce495c47..39ae8a8a 100644
--- a/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/internal/BundleBlueprintParser.java
+++ b/aries/trunk/application/application-modeller/src/main/java/org/apache/aries/application/modelling/internal/BundleBlueprintParser.java
@@ -17,6 +17,8 @@
  * under the License.
  */
 package org.apache.aries.application.modelling.internal;
+import java.security.AccessController;
+import java.security.PrivilegedAction;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.regex.Pattern;
@@ -105,10 +107,34 @@ public BundleBlueprintParser () {
     setup(null);
   }
   
+  static final boolean _blueprintHeaderMandatory;
+  static 
+  { 
+	  String blueprintHeaderMandatory = AccessController.doPrivileged(new PrivilegedAction<String>() 
+	  {
+		  public String run()
+	      {
+	        return System.getProperty("org.apache.aries.blueprint.header.mandatory", "false");
+	      }
+	  });
+	  _blueprintHeaderMandatory = blueprintHeaderMandatory.toLowerCase().equals("true");
+  }
+  
+  /**
+   * @return true if this bundle might contain blueprint files
+   */
+  public boolean mightContainBlueprint() {
+	  return _mfHeader != null && _mfHeader.trim().length() > 0;
+  }
+  
   private void setup (String bundleBPHeader) { 
     _paths = new LinkedList <Path>();
     if (bundleBPHeader == null) { 
+    	if (_blueprintHeaderMandatory) { 
+    		_mfHeader = null;
+    	} else { 
       _mfHeader = DEFAULT_HEADER;
+    	}
     } else { 
       _mfHeader = bundleBPHeader;
     }
