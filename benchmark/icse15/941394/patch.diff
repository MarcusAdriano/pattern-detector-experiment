diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/DirectoryReader.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/DirectoryReader.java
index 1575a44c..bbb9af57 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/DirectoryReader.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/DirectoryReader.java
@@ -1019,6 +1019,11 @@ public boolean isDeleted() {
     public Map<String,String> getUserData() {
       return userData;
     }
+
+    @Override
+    public void delete() {
+      throw new UnsupportedOperationException("This IndexCommit does not support deletions");
+    }
   }
 
   static class MultiTermEnum extends TermEnum {
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/IndexCommit.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/IndexCommit.java
index 54b05726..cb4df553 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/IndexCommit.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/IndexCommit.java
@@ -74,24 +74,14 @@
    * and therefore this should only be called by its {@link IndexDeletionPolicy#onInit onInit()} or 
    * {@link IndexDeletionPolicy#onCommit onCommit()} methods.
   */
-  public void delete() {
-    throw new UnsupportedOperationException("This IndexCommit does not support this method.");
-  }
+  public abstract void delete();
 
-  public boolean isDeleted() {
-    throw new UnsupportedOperationException("This IndexCommit does not support this method.");
-  }
+  public abstract boolean isDeleted();
 
-  /**
-   * Returns true if this commit is an optimized index.
-   */
-  public boolean isOptimized() {
-    throw new UnsupportedOperationException("This IndexCommit does not support this method.");
-  }
+  /** Returns true if this commit is an optimized index. */
+  public abstract boolean isOptimized();
 
-  /**
-   * Two IndexCommits are equal if both their Directory and versions are equal.
-   */
+  /** Two IndexCommits are equal if both their Directory and versions are equal. */
   @Override
   public boolean equals(Object other) {
     if (other instanceof IndexCommit) {
@@ -103,21 +93,17 @@ public boolean equals(Object other) {
 
   @Override
   public int hashCode() {
-    return getDirectory().hashCode() + getSegmentsFileName().hashCode();
+    return (int) (getDirectory().hashCode() + getVersion());
   }
 
   /** Returns the version for this IndexCommit.  This is the
    *  same value that {@link IndexReader#getVersion} would
    *  return if it were opened on this commit. */
-  public long getVersion() {
-    throw new UnsupportedOperationException("This IndexCommit does not support this method.");
-  }
+  public abstract long getVersion();
 
   /** Returns the generation (the _N in segments_N) for this
    *  IndexCommit */
-  public long getGeneration() {
-    throw new UnsupportedOperationException("This IndexCommit does not support this method.");
-  }
+  public abstract long getGeneration();
 
   /** Convenience method that returns the last modified time
    *  of the segments_N file corresponding to this index
@@ -130,7 +116,6 @@ public long getTimestamp() throws IOException {
   /** Returns userData, previously passed to {@link
    *  IndexWriter#commit(Map)} for this commit.  Map is
    *  String -> String. */
-  public Map<String,String> getUserData() throws IOException {
-    throw new UnsupportedOperationException("This IndexCommit does not support this method.");
-  }
+  public abstract Map<String,String> getUserData() throws IOException;
+  
 }
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/SnapshotDeletionPolicy.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/SnapshotDeletionPolicy.java
index 0851282f..b67b391b 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/SnapshotDeletionPolicy.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/index/SnapshotDeletionPolicy.java
@@ -128,6 +128,10 @@ public long getGeneration() {
     public Map<String,String> getUserData() throws IOException {
       return cp.getUserData();
     }
+    @Override
+    public boolean isOptimized() {
+      return cp.isOptimized();
+    }
   }
 
   private List<IndexCommit> wrapCommits(List<? extends IndexCommit> commits) {
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestIndexCommit.java b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestIndexCommit.java
index da26a04e..f27071d4 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestIndexCommit.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/index/TestIndexCommit.java
@@ -4,3 +4,70 @@
   Merged /lucene/dev/trunk/lucene/src/test/org/apache/lucene/document/TestNumberTools.java:r938989,939649
   Merged /lucene/dev/trunk/lucene/src/test/org/apache/lucene/analysis/TestISOLatin1AccentFilter.java:r938989,939649
   Merged /lucene/dev/trunk/lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility.java:r938989,939649
+package org.apache.lucene.index;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import static org.junit.Assert.*;
+
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Map;
+
+import org.apache.lucene.store.Directory;
+import org.apache.lucene.store.RAMDirectory;
+import org.apache.lucene.util.LuceneTestCaseJ4;
+import org.junit.Test;
+
+public class TestIndexCommit extends LuceneTestCaseJ4 {
+
+  @Test
+  public void testEqualsHashCode() throws Exception {
+    // LUCENE-2417: equals and hashCode() impl was inconsistent
+    final Directory dir = new RAMDirectory();
+    
+    IndexCommit ic1 = new IndexCommit() {
+      @Override public String getSegmentsFileName() { return "a"; }
+      @Override public long getVersion() { return 12; }
+      @Override public Directory getDirectory() { return dir; }
+      @Override public Collection<String> getFileNames() throws IOException { return null; }
+      @Override public void delete() {}
+      @Override public long getGeneration() { return 0; }
+      @Override public long getTimestamp() throws IOException { return 1;}
+      @Override public Map<String, String> getUserData() throws IOException { return null; }
+      @Override public boolean isDeleted() { return false; }
+      @Override public boolean isOptimized() { return false; }
+    };
+    
+    IndexCommit ic2 = new IndexCommit() {
+      @Override public String getSegmentsFileName() { return "b"; }
+      @Override public long getVersion() { return 12; }
+      @Override public Directory getDirectory() { return dir; }
+      @Override public Collection<String> getFileNames() throws IOException { return null; }
+      @Override public void delete() {}
+      @Override public long getGeneration() { return 0; }
+      @Override public long getTimestamp() throws IOException { return 1;}
+      @Override public Map<String, String> getUserData() throws IOException { return null; }
+      @Override public boolean isDeleted() { return false; }
+      @Override public boolean isOptimized() { return false; }
+    };
+
+    assertEquals(ic1, ic2);
+    assertEquals("hash codes are not equals", ic1.hashCode(), ic2.hashCode());
+  }
+}
