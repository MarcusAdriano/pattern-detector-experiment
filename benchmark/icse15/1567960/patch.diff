diff --git a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.java b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.java
index b4175e94..59d26479 100644
--- a/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.java
+++ b/lucene/dev/branches/branch_4x/lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer.java
@@ -33,6 +33,7 @@
 import java.util.Comparator;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.concurrent.atomic.AtomicLong;
 
 import org.apache.lucene.codecs.CodecUtil;
 import org.apache.lucene.codecs.DocValuesProducer;
@@ -55,6 +56,7 @@
 import org.apache.lucene.util.BytesRef;
 import org.apache.lucene.util.IOUtils;
 import org.apache.lucene.util.LongValues;
+import org.apache.lucene.util.RamUsageEstimator;
 import org.apache.lucene.util.packed.BlockPackedReader;
 import org.apache.lucene.util.packed.MonotonicBlockPackedReader;
 import org.apache.lucene.util.packed.PackedInts;
@@ -66,6 +68,7 @@
   private final Map<Integer,SortedSetEntry> sortedSets;
   private final Map<Integer,NumericEntry> ords;
   private final Map<Integer,NumericEntry> ordIndexes;
+  private final AtomicLong ramBytesUsed;
   private final IndexInput data;
   private final int maxDoc;
   private final int version;
@@ -118,6 +121,8 @@ protected Lucene45DocValuesProducer(SegmentReadState state, String dataCodec, St
         IOUtils.closeWhileHandlingException(this.data);
       }
     }
+    
+    ramBytesUsed = new AtomicLong(RamUsageEstimator.shallowSizeOfInstance(getClass()));
   }
 
   private void readSortedField(int fieldNumber, IndexInput meta, FieldInfos infos) throws IOException {
@@ -288,14 +293,7 @@ public NumericDocValues getNumeric(FieldInfo field) throws IOException {
   
   @Override
   public long ramBytesUsed() {
-    long sizeInBytes = 0;    
-    for(MonotonicBlockPackedReader monotonicBlockPackedReader: addressInstances.values()) {
-      sizeInBytes += Integer.SIZE + monotonicBlockPackedReader.ramBytesUsed();
-    }
-    for(MonotonicBlockPackedReader monotonicBlockPackedReader: ordIndexInstances.values()) {
-      sizeInBytes += Integer.SIZE + monotonicBlockPackedReader.ramBytesUsed();
-    }
-    return sizeInBytes;
+    return ramBytesUsed.get();
   }
   
   LongValues getNumeric(NumericEntry entry) throws IOException {
@@ -379,6 +377,7 @@ protected MonotonicBlockPackedReader getAddressInstance(IndexInput data, FieldIn
         data.seek(bytes.addressesOffset);
         addrInstance = new MonotonicBlockPackedReader(data, bytes.packedIntsVersion, bytes.blockSize, bytes.count, false);
         addressInstances.put(field.number, addrInstance);
+        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);
       }
       addresses = addrInstance;
     }
@@ -429,6 +428,7 @@ protected MonotonicBlockPackedReader getIntervalInstance(IndexInput data, FieldI
         }
         addrInstance = new MonotonicBlockPackedReader(data, bytes.packedIntsVersion, bytes.blockSize, size, false);
         addressInstances.put(field.number, addrInstance);
+        ramBytesUsed.addAndGet(addrInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);
       }
       addresses = addrInstance;
     }
@@ -500,6 +500,7 @@ protected MonotonicBlockPackedReader getOrdIndexInstance(IndexInput data, FieldI
         data.seek(entry.offset);
         ordIndexInstance = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);
         ordIndexInstances.put(field.number, ordIndexInstance);
+        ramBytesUsed.addAndGet(ordIndexInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);
       }
       ordIndex = ordIndexInstance;
     }
