diff --git a/db/derby/code/branches/10.8/java/build/org/apache/derbyBuild/MessageBuilder.java b/db/derby/code/branches/10.8/java/build/org/apache/derbyBuild/MessageBuilder.java
index e4494b8c..82c5ce85 100644
--- a/db/derby/code/branches/10.8/java/build/org/apache/derbyBuild/MessageBuilder.java
+++ b/db/derby/code/branches/10.8/java/build/org/apache/derbyBuild/MessageBuilder.java
@@ -34,7 +34,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.Project;
 import org.apache.tools.ant.Task;
-import org.apache.tools.ant.taskdefs.Echo;
 
 
 /**
@@ -660,14 +659,16 @@ private String  plugInArgs( String message, String[] rawArgs )
     {
         int             count = rawArgs.length;
         String[]    cookedArgs = new String[ count ];
+        MessageFormat format = new MessageFormat(message);
 
         // add xml angle brackets around the args
         for ( int i = 0; i < count; i++ )
         {
             cookedArgs[ i ] = "<varname>&lt;" + rawArgs[ i ] + "&gt;</varname>";
+            format.setFormatByArgumentIndex(i, null); // use plain string format
         }
 
-        return MessageFormat.format( message, cookedArgs );
+        return format.format(cookedArgs);
     }
 
     /////////////////////////////////////////////////////////////////////////
diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/execute/rts/RealBasicNoPutResultSetStatistics.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/execute/rts/RealBasicNoPutResultSetStatistics.java
index 966f189b..5c6b714a 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/execute/rts/RealBasicNoPutResultSetStatistics.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/execute/rts/RealBasicNoPutResultSetStatistics.java
@@ -21,26 +21,20 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.impl.sql.execute.rts;
 
+import java.security.AccessController;
+import java.security.PrivilegedAction;
 import org.apache.derby.catalog.UUID;
+import org.apache.derby.iapi.reference.SQLState;
+import org.apache.derby.iapi.services.context.ContextService;
+import org.apache.derby.iapi.services.i18n.MessageService;
 import org.apache.derby.impl.sql.catalog.XPLAINResultSetDescriptor;
 import org.apache.derby.impl.sql.catalog.XPLAINResultSetTimingsDescriptor;
 import org.apache.derby.impl.sql.execute.xplain.XPLAINUtil;
 
-import org.apache.derby.iapi.services.io.StoredFormatIds;
-import org.apache.derby.iapi.services.io.Formatable;
-
-import org.apache.derby.iapi.services.i18n.MessageService;
-import org.apache.derby.iapi.reference.SQLState;
-
-import org.apache.derby.iapi.services.io.FormatableHashtable;
-
-import java.util.Vector;
-
-import java.io.ObjectOutput;
-import java.io.ObjectInput;
-import java.io.IOException;
 
 import java.text.DecimalFormat;
+import java.util.Locale;
+import java.util.Vector;
 
 
 /**
@@ -135,39 +129,11 @@ protected final String dumpTimeStats(String indent, String subIndent)
 	protected final String dumpEstimatedCosts(String subIndent)
 	{
 		return	subIndent +
-				MessageService.getTextMessage(SQLState.RTS_OPT_EST_RC) +
-					": " +
-				formatDouble(optimizerEstimatedRowCount) + "\n" +
+            MessageService.getTextMessage(SQLState.RTS_OPT_EST_RC,
+                new Double(optimizerEstimatedRowCount)) + "\n" +
 				subIndent +
-				MessageService.getTextMessage(SQLState.RTS_OPT_EST_COST) +
-					": " +
-				formatDouble(optimizerEstimatedCost) + "\n";
-	}
-
-	/**
-	 * Format a double as a String with leading spaces and two digits
-	 * after the decimal.
-	 */
-	private static DecimalFormat df = null;
-	private String formatDouble(double toFormat)
-	{
-		if (df == null)
-		{
-			// RESOLVE: This really should use the database locale to
-			// format the number.
-			df = new DecimalFormat("###########0.00");
-			df.setMinimumIntegerDigits(1);
-		}
-
-		String retval = df.format(toFormat);
-
-		if (retval.length() < 15)
-		{
-			retval =
-				"               ".substring(0, 15 - retval.length()) + retval;
-		}
-
-		return retval;
+            MessageService.getTextMessage(SQLState.RTS_OPT_EST_COST,
+                 new Double(optimizerEstimatedCost));
 	}
 
 	/**
