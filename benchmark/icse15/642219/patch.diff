diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
index daeb794e..248304d2 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
@@ -234,6 +234,10 @@ public EmbedConnection(InternalDriver driver, String url, Properties info)
 			boolean isTwoPhaseUpgradeBoot = (!createBoot &&
 											 isHardUpgradeBoot(info));
 			boolean isStartSlaveBoot = isStartReplicationSlaveBoot(info);
+            // Set to true if startSlave command is attempted on an
+            // already booted database. Will raise an exception when
+            // credentials have been verified
+            boolean slaveDBAlreadyBooted = false;
 
             boolean isFailoverMasterBoot = false;
             boolean isFailoverSlaveBoot = false;
@@ -276,11 +280,15 @@ public EmbedConnection(InternalDriver driver, String url, Properties info)
 
             if (isStartSlaveBoot) {
                 if (database != null) {
-                    throw StandardException.newException(
-                        SQLState.CANNOT_START_SLAVE_ALREADY_BOOTED,
-                        getTR().getDBName());
-                }
-
+                    // If the slave database has already been booted,
+                    // the command should fail. Setting
+                    // slaveDBAlreadyBooted to true will cause an
+                    // exception to be thrown, but not until after
+                    // credentials have been verified so that db boot
+                    // information is not exposed to unauthorized
+                    // users
+                    slaveDBAlreadyBooted = true;
+                } else {
                 // We need to boot the slave database two times. The
                 // first boot will check authentication and
                 // authorization. The second boot will put the
@@ -292,6 +300,7 @@ public EmbedConnection(InternalDriver driver, String url, Properties info)
                 info.setProperty(SlaveFactory.REPLICATION_MODE,
                                  SlaveFactory.SLAVE_PRE_MODE);
             }
+            }
 
             if (isStopReplicationSlaveBoot(info)) {
                 // DERBY-3383: stopSlave must be performed before
@@ -374,7 +383,23 @@ else if (!shutdown)
 			// Check User's credentials and if it is a valid user of
 			// the database
 			//
+            try {
 			checkUserCredentials(tr.getDBName(), info);
+            } catch (SQLException sqle) {
+                if (isStartSlaveBoot && !slaveDBAlreadyBooted) {
+                    // Failing credentials check on a previously
+                    // unbooted db should not leave the db booted
+                    // for startSlave command.
+
+                    // tr.startTransaction is needed to get the
+                    // Database context. Without this context,
+                    // handleException will not shutdown the
+                    // database
+                    tr.startTransaction();
+                    handleException(tr.shutdownDatabaseException());
+                }
+                throw sqle;
+            }
 
 			// Make a real connection into the database, setup lcc, tc and all
 			// the rest.
@@ -437,6 +462,14 @@ else if (!shutdown)
 				}
 
 				if (isStartSlaveBoot) {
+					// Throw an exception if the database had been
+					// booted before this startSlave connection attempt.
+					if (slaveDBAlreadyBooted) {
+						throw StandardException.newException(
+						SQLState.CANNOT_START_SLAVE_ALREADY_BOOTED,
+						getTR().getDBName());
+					}
+
 					// Let the next boot of the database be
 					// replication slave mode
 					info.setProperty(SlaveFactory.REPLICATION_MODE,
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1.java
index 2cd71f08..507c9b15 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/replicationTests/ReplicationRun_Local_StateTest_part1.java
@@ -427,7 +427,7 @@ private void _testPreStartedMaster()
             String msg = ec + " " + ss + " " + se.getMessage();
             util.DEBUG("3. startSlave No connection as expected: " + msg);
             assertTrue("3. Unexpected SQLException: " + msg, 
-                    SQLState.CANNOT_START_SLAVE_ALREADY_BOOTED.equals(ss));
+                   SQLState.CANNOT_CONNECT_TO_DB_IN_SLAVE_MODE.startsWith(ss));
         }
     }
     
