diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/types/DataType.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/types/DataType.java
index 25771bb6..757b0d43 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/types/DataType.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/types/DataType.java
@@ -230,6 +230,19 @@ public InputStream	getStream() throws StandardException
 			MessageService.getTextMessage(SQLState.LANG_STREAM));
 	}
 
+    /**
+     * Gets the value in the data stream descriptor as a trace string.
+     * This default implementation simply forwards the call to
+     * <code>getString</code>.
+     *
+     * @return The data value in a representation suitable for tracing.
+     * @throws StandardException if getting the data value fails.
+     * @see DataValueDescriptor#getString
+     */
+    public String getTraceString() throws StandardException {
+        return getString();  
+    }
+
 	/*
 	 * Column interface
 	 */
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/types/DataValueDescriptor.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/types/DataValueDescriptor.java
index e017de0a..e6797775 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/types/DataValueDescriptor.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/types/DataValueDescriptor.java
@@ -123,6 +123,15 @@
 	 */
 	String	getString() throws StandardException;
 
+	/**
+     * Gets the value in the data value descriptor as a trace string.
+     * If the value itself is not suitable for tracing purposes, a more
+     * suitable representation is returned. For instance, data values
+     * represented as streams are not materialized. Instead, information about
+     * the associated stream is given.
+     */
+    String getTraceString() throws StandardException;
+
 	/**
 	 * Gets the value in the data value descriptor as a boolean.
 	 * Throws an exception if the data value is not a boolean.
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/types/SQLBlob.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/types/SQLBlob.java
index b0b3bc00..f14efe69 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/types/SQLBlob.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/types/SQLBlob.java
@@ -151,6 +151,25 @@ public DataValueDescriptor setWidth(int desiredWidth,  // ignored!
         return this;
     }
 
+    /**
+     * Gets a trace representation of the BLOB for debugging.
+     *
+     * @return a trace representation of the BLOB.
+     */
+    public final String getTraceString() throws StandardException {
+        // Check if the value is SQL NULL.
+        if (isNull()) {
+            return "NULL";
+        }
+
+        // Check if we have a stream.
+        if (getStream() != null) {
+            return ("BLOB(" + getStream().toString() + ")");
+        }
+
+        return ("BLOB(" + getLength() + ")");
+    }
+
     /**
 	   Return my format identifier.
            
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/types/SQLClob.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/types/SQLClob.java
index e1d624e1..0238838d 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/types/SQLClob.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/types/SQLClob.java
@@ -194,6 +194,26 @@ public Timestamp	getTimestamp(java.util.Calendar cal) throws StandardException
 		throw dataTypeConversion("java.sql.Timestamp");
 	}
 
+    /**
+     * Gets a trace representation of the CLOB for debugging.
+     *
+     * @return a trace representation of the CLOB.
+     */
+    public final String getTraceString() throws StandardException {
+        // Check if the value is SQL NULL.
+        if (isNull()) {
+            return "NULL";
+        }
+
+        // Check if we have a stream.
+        if (getStream() != null) {
+            return ("CLOB(" + getStream().toString() + ")");
+        }
+
+        return ("CLOB(" + getLength() + ")");
+    }
+
+
 	public void setValue(Time theValue, Calendar cal) throws StandardException
 	{
 		throwLangSetMismatch("java.sql.Time");
