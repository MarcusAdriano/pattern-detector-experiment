diff --git a/aries/trunk/blueprint/blueprint-annotation-impl/src/main/java/org/apache/aries/blueprint/annotation/impl/BlueprintAnnotationScannerImpl.java b/aries/trunk/blueprint/blueprint-annotation-impl/src/main/java/org/apache/aries/blueprint/annotation/impl/BlueprintAnnotationScannerImpl.java
index ca8c0f3f..476ba924 100644
--- a/aries/trunk/blueprint/blueprint-annotation-impl/src/main/java/org/apache/aries/blueprint/annotation/impl/BlueprintAnnotationScannerImpl.java
+++ b/aries/trunk/blueprint/blueprint-annotation-impl/src/main/java/org/apache/aries/blueprint/annotation/impl/BlueprintAnnotationScannerImpl.java
@@ -25,8 +25,11 @@
 import java.net.URL;
 import java.util.Arrays;
 import java.util.HashMap;
+import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 
 import javax.xml.bind.JAXBContext;
 import javax.xml.bind.JAXBException;
@@ -60,7 +63,6 @@
 import org.apache.aries.blueprint.jaxb.TreferenceListener;
 import org.apache.aries.blueprint.jaxb.TregistrationListener;
 import org.apache.aries.blueprint.jaxb.Tservice;
-import org.apache.aries.blueprint.jaxb.TserviceProperties;
 import org.apache.aries.blueprint.jaxb.TservicePropertyEntry;
 import org.apache.aries.blueprint.jaxb.TtypeConverters;
 import org.apache.aries.blueprint.jaxb.Tvalue;
@@ -73,7 +75,7 @@
 
 public class BlueprintAnnotationScannerImpl implements
         BlueprintAnnotationScanner {
-    private BundleContext context;
+    private final BundleContext context;
 
     public BlueprintAnnotationScannerImpl(BundleContext bc) {
         this.context = bc;
@@ -167,10 +169,11 @@ private void marshallOBRModel(Tblueprint tblueprint, File blueprintFile)
     private Tblueprint generateBlueprintModel(Bundle bundle) {
         BundleAnnotationFinder baf = createBundleAnnotationFinder(bundle);
 
-        List<Class> blueprintClasses = baf.findAnnotatedClasses(Blueprint.class);
-        List<Class> beanClasses = baf.findAnnotatedClasses(Bean.class);
-        List<Class> refListenerClasses = baf.findAnnotatedClasses(ReferenceListener.class);
-        List<Class> regListenerClasses = baf.findAnnotatedClasses(RegistrationListener.class);
+        // we don't trust baf when it comes to returning classes just once (ARIES-654)
+        Set<Class> blueprintClasses = new LinkedHashSet<Class>(baf.findAnnotatedClasses(Blueprint.class));
+        Set<Class> beanClasses = new HashSet<Class>(baf.findAnnotatedClasses(Bean.class));
+        Set<Class> refListenerClasses = new HashSet<Class>(baf.findAnnotatedClasses(ReferenceListener.class));
+        Set<Class> regListenerClasses = new HashSet<Class>(baf.findAnnotatedClasses(RegistrationListener.class));
         Map<String, TreferenceListener> reflMap = new HashMap<String, TreferenceListener>();
         Map<String, TregistrationListener> reglMap = new HashMap<String, TregistrationListener>();
         
@@ -179,7 +182,7 @@ private Tblueprint generateBlueprintModel(Bundle bundle) {
         
         if (!blueprintClasses.isEmpty()) {
             // use the first annotated blueprint annotation
-            Blueprint blueprint = (Blueprint)blueprintClasses.get(0).getAnnotation(Blueprint.class);
+            Blueprint blueprint = (Blueprint)blueprintClasses.iterator().next().getAnnotation(Blueprint.class);
             tblueprint.setDefaultActivation(blueprint.defaultActivation());
             tblueprint.setDefaultAvailability(blueprint.defaultAvailability());
             tblueprint.setDefaultTimeout(convertToBigInteger(blueprint.defaultTimeout()));
@@ -301,12 +304,12 @@ private Tblueprint generateBlueprintModel(Bundle bundle) {
                 if (fields[i].isAnnotationPresent(Inject.class)) { 
                     if (fields[i].isAnnotationPresent(Reference.class)) {
                         // the field is also annotated with @Reference
-                        Reference ref = (Reference)fields[i].getAnnotation(Reference.class);
+                        Reference ref = fields[i].getAnnotation(Reference.class);
                         Treference tref = generateTref(ref, reflMap);
                         components.add(tref);
                     } else if (fields[i].isAnnotationPresent(ReferenceList.class)) {
                         // the field is also annotated with @ReferenceList
-                        ReferenceList ref = (ReferenceList)fields[i].getAnnotation(ReferenceList.class);
+                        ReferenceList ref = fields[i].getAnnotation(ReferenceList.class);
                         TreferenceList tref = generateTrefList(ref, reflMap);
                         components.add(tref);
                         
diff --git a/aries/trunk/blueprint/blueprint-annotation-itest/src/test/java/org/apache/aries/blueprint/itests/BlueprintAnnotationTest.java b/aries/trunk/blueprint/blueprint-annotation-itest/src/test/java/org/apache/aries/blueprint/itests/BlueprintAnnotationTest.java
index 2746308e..53bcb124 100644
--- a/aries/trunk/blueprint/blueprint-annotation-itest/src/test/java/org/apache/aries/blueprint/itests/BlueprintAnnotationTest.java
+++ b/aries/trunk/blueprint/blueprint-annotation-itest/src/test/java/org/apache/aries/blueprint/itests/BlueprintAnnotationTest.java
@@ -31,6 +31,7 @@
 import java.text.SimpleDateFormat;
 import java.util.Currency;
 import java.util.Hashtable;
+import java.util.List;
 import java.util.Set;
 
 import org.apache.aries.blueprint.sample.Bar;
@@ -39,7 +40,7 @@
 import org.junit.runner.RunWith;
 import org.ops4j.pax.exam.Option;
 import org.ops4j.pax.exam.junit.JUnit4TestRunner;
-import org.osgi.framework.Bundle;
+import org.osgi.framework.*;
 import org.osgi.service.blueprint.container.BlueprintContainer;
 import org.osgi.service.cm.Configuration;
 import org.osgi.service.cm.ConfigurationAdmin;
@@ -75,6 +76,8 @@ public void test() throws Exception {
         assertTrue(foo.isInitialized());
         assertFalse(foo.isDestroyed());
 
+        assertNotNull(blueprintContainer.getComponentInstance("fragment"));
+    
        obj = getOsgiService(bundleContext, Foo.class, null, 5000);
         assertNotNull(obj);
         assertEquals(foo.toString(), obj.toString());
@@ -104,6 +107,7 @@ public void test() throws Exception {
             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint"),
             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.annotation.impl"),
             mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample-annotation"),
+            mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample-fragment"),
             //mavenBundle("org.apache.aries.blueprint", "org.apache.aries.blueprint.sample"),
             mavenBundle("org.osgi", "org.osgi.compendium"),
             //org.ops4j.pax.exam.container.def.PaxRunnerOptions.vmOption("-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"),
diff --git a/aries/trunk/blueprint/blueprint-sample-fragment/src/main/java/org/apache/aries/blueprint/frament/FragmentBean.java b/aries/trunk/blueprint/blueprint-sample-fragment/src/main/java/org/apache/aries/blueprint/frament/FragmentBean.java
index e69de29b..7f232724 100644
--- a/aries/trunk/blueprint/blueprint-sample-fragment/src/main/java/org/apache/aries/blueprint/frament/FragmentBean.java
+++ b/aries/trunk/blueprint/blueprint-sample-fragment/src/main/java/org/apache/aries/blueprint/frament/FragmentBean.java
@@ -0,0 +1,23 @@
+/**
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.apache.aries.blueprint.fragment;
+
+import org.apache.aries.blueprint.annotation.Bean;
+
+@Bean(id="fragment")
+public class FragmentBean {}
+
