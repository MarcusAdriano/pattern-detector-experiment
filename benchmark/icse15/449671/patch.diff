diff --git a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAProtocolException.java b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAProtocolException.java
index 6fa1f4a8..4f1689ee 100644
--- a/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAProtocolException.java
+++ b/db/derby/code/trunk/java/drda/org/apache/derby/impl/drda/DRDAProtocolException.java
@@ -323,7 +323,7 @@ protected static DRDAProtocolException newAgentError(DRDAConnThread agent,
 		int svrcod, String rdbnam, String srvdgn)
 	{
         if ( SanityManager.DEBUG )
-            System.out.println("agentError in " + agent);
+            agent.trace("agentError in " + agent);
 		Object[] oa = {new Integer(svrcod), rdbnam, srvdgn};
 		return new DRDAProtocolException(DRDA_AgentError,
 										agent,
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/dataSourcePermissions_net.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/dataSourcePermissions_net.java
index 9b9348ed..1a7939dd 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/dataSourcePermissions_net.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/dataSourcePermissions_net.java
@@ -64,13 +64,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private static String hostName;
 	private static NetworkServerControl networkServer = null;
     
-    private SwitchablePrintStream consoleLogStream_;
-    private PrintStream originalStream_;
-    private FileOutputStream shutdownLogStream_;
-
-    private SwitchablePrintStream consoleErrLogStream_;
-    private PrintStream originalErrStream_;
-    private FileOutputStream shutdownErrLogStream_;
+    private static FileOutputStream serverOutput;
     
 	public static void main(String[] args) throws Exception {
 
@@ -95,30 +89,15 @@ public static void main(String[] args) throws Exception {
 			e.printStackTrace();
 		}
 		
-		PrintStream originalStream = System.out;
-		FileOutputStream shutdownLogStream = 
-		    new FileOutputStream("dataSourcePermissions_net." + 
-					 System.getProperty("framework","") + "." + 
-					 "shutdown.std.log");
-		SwitchablePrintStream consoleLogStream = 
-		    new SwitchablePrintStream( originalStream );
-
-		PrintStream originalErrStream = System.err;
-		FileOutputStream shutdownErrLogStream = 
-		    new FileOutputStream("dataSourcePermissions_net." + 
-					 System.getProperty("framework","") + "." + 
-					 "shutdown.err.log");
-		SwitchablePrintStream consoleErrLogStream = 
-		    new SwitchablePrintStream( originalErrStream );
-		
-		System.setOut( consoleLogStream );
-		System.setErr( consoleErrLogStream );
+		String fileName = System.getProperty( "derby.system.home", "")
+			+ "serverConsoleOutput.log";
+		serverOutput = new FileOutputStream(fileName);
 
 		if (hostName.equals("localhost"))
 		{
 			// Start the NetworkServer on another thread
 			networkServer = new NetworkServerControl(InetAddress.getByName("localhost"),NETWORKSERVER_PORT);
-			networkServer.start(null);
+			networkServer.start(new PrintWriter(serverOutput));
 
 			// Wait for the NetworkServer to start.
 			if (!isServerStarted(networkServer, 60))
@@ -129,22 +108,12 @@ public static void main(String[] args) throws Exception {
 		// Now, go ahead and run the test.
 		try {
 		    dataSourcePermissions_net tester = 
-			new dataSourcePermissions_net( consoleLogStream ,
-						       originalStream ,
-						       shutdownLogStream ,
-						       consoleErrLogStream ,
-						       originalErrStream,
-						       shutdownErrLogStream);
+			new dataSourcePermissions_net();
 			tester.setProperties();
 			tester.runTest();
 			if (TestUtil.isDerbyNetClientFramework())
 				tester.testClientDataSourceProperties();
-			new dataSourcePermissions_net( consoleLogStream , 
-						       originalStream ,
-						       shutdownLogStream ,
-						       consoleErrLogStream ,
-						       originalErrStream ,
-						       shutdownErrLogStream ).cleanUp();
+			new dataSourcePermissions_net().cleanUp();
 
 		} catch (Exception e) {
 		// if we catch an exception of some sort, we need to make sure to
@@ -160,14 +129,7 @@ public static void main(String[] args) throws Exception {
 		if (hostName.equals("localhost"))
 		{
 		    
-			consoleLogStream.switchOutput( shutdownLogStream );
-			consoleErrLogStream.switchOutput( shutdownErrLogStream );
-			
 			networkServer.shutdown();
-			consoleLogStream.flush();
-			
-			consoleLogStream.switchOutput( originalStream );
-			consoleErrLogStream.switchOutput( originalErrStream );
 			
 			// how do we do this with the new api?
 			//networkServer.join();
@@ -175,29 +137,13 @@ public static void main(String[] args) throws Exception {
 		}
 		System.out.println("Completed dataSourcePermissions_net");
 		
-		originalStream.close();
-		shutdownLogStream.close();
-
-		originalErrStream.close();
-		shutdownErrLogStream.close();
+		serverOutput.close();
 
 	}
 
 
-	public dataSourcePermissions_net( SwitchablePrintStream consoleLogStream,
-					  PrintStream originalStream,
-					  FileOutputStream shutdownLogStream,
-					  SwitchablePrintStream consoleErrLogStream,
-					  PrintStream originalErrStream, 
-					  FileOutputStream shutdownErrLogStream ) {
-	    
-	    consoleLogStream_ = consoleLogStream;
-	    originalStream_ = originalStream;
-	    shutdownLogStream_ = shutdownLogStream;
+	public dataSourcePermissions_net() {
 
-	    consoleErrLogStream_ = consoleErrLogStream;
-	    originalErrStream_ = originalErrStream;
-	    shutdownErrLogStream_ = shutdownErrLogStream;
 	    
 	}
     
@@ -308,33 +254,20 @@ public void start() {
 
 	public void shutdown() {
 	    
-	    try{
 		try {
 
-		    consoleLogStream_.switchOutput( shutdownLogStream_ );
-		    consoleErrLogStream_.switchOutput( shutdownErrLogStream_ );
-		    
 		    DriverManager.getConnection(TestUtil.getJdbcUrlPrefix(hostName,
 															  NETWORKSERVER_PORT) +
 										"wombat;shutdown=true",
 				"EDWARD", "noodle");
 		    
-		    consoleLogStream_.switchOutput( originalStream_ );
-		    consoleErrLogStream_.switchOutput( originalErrStream_);
-		    
 			System.out.println("FAIL - Shutdown returned connection");
 
 		} catch (SQLException sqle) {
-		    consoleLogStream_.switchOutput( originalStream_ );
-		    consoleErrLogStream_.switchOutput( originalErrStream_ );
 		    
 			System.out.println("EXPECTED SHUTDOWN " + sqle.getMessage());
 		}
 		
-	    } catch (IOException ioe){
-		originalStream_.println("Switching stream was failed. Could not complete test ... ");
-	    }
-		
 	}
 
 	protected static boolean isServerStarted(NetworkServerControl server, int ntries)
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testSecMec.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testSecMec.java
index 947d95c9..3dc29d7a 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testSecMec.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/testSecMec.java
@@ -154,20 +154,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 	private static NetworkServerControl networkServer = null;
 
-    private testSecMec(SwitchablePrintStream consoleLogStream,
-		       PrintStream originalStream,
-		       FileOutputStream shutdownLogStream,
-		       SwitchablePrintStream consoleErrLogStream, 
-		       PrintStream originalErrStream,
-		       FileOutputStream shutdownErrLogStream){
-	
-	super(consoleLogStream,
-	      originalStream,
-	      shutdownLogStream,
-	      consoleErrLogStream,
-	      originalErrStream,
-	      shutdownErrLogStream);
-    }
+    private static FileOutputStream serverOutput;
 
 	public static void main(String[] args) throws Exception {
 		// Load harness properties.
@@ -189,24 +176,9 @@ public static void main(String[] args) throws Exception {
 			e.printStackTrace();
 		}
 		
-		PrintStream originalStream = System.out;
-		FileOutputStream shutdownLogStream = 
-		    new FileOutputStream("testSecMec." + 
-					 System.getProperty("framework","") + "." + 
-					 "shutdown.std.log");
-		SwitchablePrintStream consoleLogStream = 
-		    new SwitchablePrintStream( originalStream );
-		
-		PrintStream originalErrStream = System.err;
-		FileOutputStream shutdownErrLogStream = 
-		    new FileOutputStream("testSecMec." + 
-					 System.getProperty("framework","") + "." + 
-					 "shutdown.err.log");
-		SwitchablePrintStream consoleErrLogStream = 
-		    new SwitchablePrintStream( originalErrStream );
-
-		System.setOut( consoleLogStream );
-		System.setErr( consoleErrLogStream );
+		String fileName = System.getProperty( "derby.system.home", "")
+				+ "serverConsoleOutput.log";
+		serverOutput = new FileOutputStream(fileName);
            
         // Start server with a specific value for derby.drda.securityMechanism
         // and run tests. Note connections will be successful or not depending on
@@ -227,7 +199,7 @@ public static void main(String[] args) throws Exception {
 		        try
 		        {
 		            networkServer = new NetworkServerControl(InetAddress.getByName(hostName),NETWORKSERVER_PORT);
-		            networkServer.start(null);
+		            networkServer.start(new PrintWriter(serverOutput));
 		        }catch(Exception e)
 		        {
 		            if ( derby_drda_securityMechanism[i].equals("INVALID_VALUE")||
@@ -257,12 +229,7 @@ public static void main(String[] args) throws Exception {
 		    // Now, go ahead and run the test.
 		    try {
 		        testSecMec tester = 
-		            new testSecMec(consoleLogStream,
-		                    originalStream,
-		                    shutdownLogStream,
-		                    consoleErrLogStream,
-		                    originalErrStream,
-		                    shutdownErrLogStream);
+		            new testSecMec();
                 // Now run the test, note connections will be successful or 
                 // throw an exception depending on derby.drda.securityMechanism 
                 // property specified on the server
@@ -281,29 +248,19 @@ public static void main(String[] args) throws Exception {
 		    // Shutdown the server.
 		    if (hostName.equals("localhost"))
 		    {
-		        consoleLogStream.switchOutput( shutdownLogStream );
-		        consoleErrLogStream.switchOutput( shutdownErrLogStream );
 		        
 		        networkServer.shutdown();
-		        consoleLogStream.flush();
 		        // how do we do this with the new api?
 		        //networkServer.join();
 		        Thread.sleep(5000);
 		        
-		        consoleLogStream.switchOutput( originalStream );
-		        consoleErrLogStream.switchOutput( originalErrStream );
-		        
 		    }
 
             // Now we want to test 
 		}
 		System.out.println("Completed testSecMec");
 
-		originalStream.close();
-		shutdownLogStream.close();
-
-		originalErrStream.close();
-		shutdownErrLogStream.close();
+		serverOutput.close();
 	}
     
 	// Indicates userid/encrypted password security mechanism.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestConnectionMethods.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestConnectionMethods.java
index e45faf69..22aa3782 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestConnectionMethods.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/TestConnectionMethods.java
@@ -24,9 +24,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.io.PrintWriter;
 import java.net.InetAddress;
 import java.sql.Blob;
 import java.sql.Clob;
@@ -50,6 +52,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 public class TestConnectionMethods {
     Connection conn = null;
     
+    private FileOutputStream serverOutput;
+    
     /**
      * Constructor for an object that is used for running test of the
      * new connection methods defined by JDBC 4.
@@ -322,6 +326,9 @@ private void stopNetworkServer() {
         try {
             NetworkServerControl networkServer = new NetworkServerControl();
             networkServer.shutdown();
+            if (serverOutput != null) {
+                serverOutput.close();
+            }
         } catch(Exception e) {
             System.out.println("INFO: Network server shutdown returned: " + e);
         }
@@ -346,10 +353,14 @@ private void startNetworkServer() {
         }
 
         try {
+            String fileName = System.getProperty( "derby.system.home", "")
+                    + "serverConsoleOutput.log";
+            serverOutput = new FileOutputStream(fileName);
+
             NetworkServerControl networkServer = 
                      new NetworkServerControl(InetAddress.getByName(serverName), 
                                               serverPort);
-            networkServer.start(null);
+            networkServer.start(new PrintWriter(serverOutput));
 
             // Wait for the network server to start
             boolean started = false;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java
index c47a5348..3ba4b231 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/NetworkServerTestSetup.java
@@ -19,8 +19,12 @@
  */
 package org.apache.derbyTesting.junit;
 
+import java.io.FileNotFoundException;
 import java.net.InetAddress;
+import java.io.FileOutputStream;
 import java.io.PrintWriter;
+import java.security.AccessController;
+import java.security.PrivilegedAction;
 import junit.extensions.TestSetup;
 import junit.framework.Test;
 import org.apache.derby.drda.NetworkServerControl;
@@ -38,6 +42,8 @@
  */
 final public class NetworkServerTestSetup extends TestSetup {
 
+    private FileOutputStream serverOutput;
+    
     /**
      * Decorator this test with the NetworkServerTestSetup
      */
@@ -54,10 +60,27 @@ protected void setUp() throws Exception {
         
         if (!config.getJDBCClient().isEmbedded()) {
             BaseTestCase.println("Starting network server:");
+
+            
+            serverOutput = (FileOutputStream)
+            AccessController.doPrivileged(new PrivilegedAction() {
+                public Object run() {
+                    String fileName = System.getProperty("derby.system.home") + 
+                            "serverConsoleOutput.log";
+                    FileOutputStream fos = null;
+                    try {
+                        fos = (new FileOutputStream(fileName));
+                    } catch (FileNotFoundException ex) {
+                        ex.printStackTrace();
+                    }
+                    return fos;
+                }
+            });
+
             networkServerController = new NetworkServerControl
                 (InetAddress.getByName(config.getHostName()), config.getPort());
             
-            networkServerController.start(null);
+            networkServerController.start(new PrintWriter(serverOutput));
             
             final long startTime = System.currentTimeMillis();
             while (true) {
@@ -81,6 +104,7 @@ protected void setUp() throws Exception {
     protected void tearDown() throws Exception {
         if (networkServerController != null) {
             networkServerController.shutdown();
+            serverOutput.close();
         }
     }
     
