diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index e8fcb46d..f8443024 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -570,6 +570,9 @@ public String getTempSSTablePath(String directory)
             if (oldMemtable.isFrozen())
                 return null;
 
+            if (DatabaseDescriptor.getCFMetaData(metadata.cfId) == null)
+                return null; // column family was dropped. no point in flushing.
+
             assert memtable == oldMemtable;
             memtable.freeze();
             final CommitLogSegment.CommitLogContext ctx = writeCommitLog ? CommitLog.instance().getContext() : null;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java b/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java
index b588face..6f4e329e 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/CompactionManager.java
@@ -507,7 +507,15 @@ public Object call() throws IOException
             {
                 for (ColumnFamilyStore cfs : stores)
                 {
+                    Table.flusherLock.writeLock().lock();
+                    try
+                    {
                     cfs.table.dropCf(cfs.metadata.cfId);
+                }
+                    finally
+                    {
+                        Table.flusherLock.writeLock().unlock();
+                    }
                 }
                 return null;
             }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java b/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
index bbea121e..0f5d4e64 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
@@ -58,7 +58,7 @@
 
     /**
      * accesses to CFS.memtable should acquire this for thread safety.
-     * only Table.maybeSwitchMemtable should aquire the writeLock; see that method for the full explanation.
+     * Table.maybeSwitchMemtable should aquire the writeLock; see that method for the full explanation.
      */
     static final ReentrantReadWriteLock flusherLock = new ReentrantReadWriteLock(true);
 
