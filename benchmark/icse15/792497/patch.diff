diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/AbstractJDBCDataModel.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/AbstractJDBCDataModel.java
index d51de966..8a799b5e 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/AbstractJDBCDataModel.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/AbstractJDBCDataModel.java
@@ -96,6 +96,8 @@
   private final String getPrefsForItemSQL;
   private final String getNumPreferenceForItemSQL;
   private final String getNumPreferenceForItemsSQL;
+  private int cachedNumUsers;
+  private int cachedNumItems;
 
   protected AbstractJDBCDataModel(DataSource dataSource,
                                   String getUserSQL,
@@ -186,6 +188,9 @@ protected AbstractJDBCDataModel(DataSource dataSource,
     this.getPrefsForItemSQL = getPrefsForItemSQL;
     this.getNumPreferenceForItemSQL = getNumPreferenceForItemSQL;
     this.getNumPreferenceForItemsSQL = getNumPreferenceForItemsSQL;
+
+    this.cachedNumUsers = -1;
+    this.cachedNumItems = -1;
   }
 
   private static void checkNotNullAndLog(String argName, Object value) {
@@ -387,12 +392,18 @@ public Item getItem(Object id, boolean assumeExists) throws TasteException {
 
   @Override
   public int getNumItems() throws TasteException {
-    return getNumThings("items", getNumItemsSQL);
+    if (cachedNumItems < 0) {
+      cachedNumItems = getNumThings("items", getNumItemsSQL);
+    }
+    return cachedNumItems;
   }
 
   @Override
   public int getNumUsers() throws TasteException {
-    return getNumThings("users", getNumUsersSQL);
+    if (cachedNumUsers < 0) {
+      cachedNumUsers = getNumThings("users", getNumUsersSQL);
+    }
+    return cachedNumUsers;
   }
 
   @Override
@@ -504,7 +515,8 @@ public void removePreference(Object userID, Object itemID)
 
   @Override
   public void refresh(Collection<Refreshable> alreadyRefreshed) {
-    // do nothing
+    cachedNumUsers = -1;
+    cachedNumItems = -1;
   }
 
 
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/MySQLBooleanPrefJDBCDataModel.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/MySQLBooleanPrefJDBCDataModel.java
index 5e2ae880..ea38b5f3 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/MySQLBooleanPrefJDBCDataModel.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/MySQLBooleanPrefJDBCDataModel.java
@@ -36,6 +36,8 @@
  */
 public class MySQLBooleanPrefJDBCDataModel extends AbstractBooleanPrefJDBCDataModel {
 
+  private static final String NO_SUCH_COLUMN = "NO_SUCH_COLUMN";
+
   /**
    * <p>Creates a {@link MySQLBooleanPrefJDBCDataModel} using the default {@link javax.sql.DataSource}
    * (named {@link #DEFAULT_DATASOURCE_NAME} and default table/column names.</p>
@@ -57,8 +59,7 @@ public MySQLBooleanPrefJDBCDataModel(String dataSourceName) throws TasteExceptio
     this(lookupDataSource(dataSourceName),
          DEFAULT_PREFERENCE_TABLE,
          DEFAULT_USER_ID_COLUMN,
-         DEFAULT_ITEM_ID_COLUMN,
-         DEFAULT_PREFERENCE_COLUMN);
+         DEFAULT_ITEM_ID_COLUMN);
   }
 
   /**
@@ -71,8 +72,7 @@ public MySQLBooleanPrefJDBCDataModel(DataSource dataSource) {
     this(dataSource,
          DEFAULT_PREFERENCE_TABLE,
          DEFAULT_USER_ID_COLUMN,
-         DEFAULT_ITEM_ID_COLUMN,
-         DEFAULT_PREFERENCE_COLUMN);
+         DEFAULT_ITEM_ID_COLUMN);
   }
 
   /**
@@ -83,18 +83,16 @@ public MySQLBooleanPrefJDBCDataModel(DataSource dataSource) {
    * @param preferenceTable name of table containing preference data
    * @param userIDColumn user ID column name
    * @param itemIDColumn item ID column name
-   * @param preferenceColumn preference column name
    */
   public MySQLBooleanPrefJDBCDataModel(DataSource dataSource,
                                        String preferenceTable,
                                        String userIDColumn,
-                                       String itemIDColumn,
-                                       String preferenceColumn) {
+                                       String itemIDColumn) {
     super(dataSource,
           preferenceTable,
           userIDColumn,
           itemIDColumn,
-          preferenceColumn,
+          NO_SUCH_COLUMN,
           // getUserSQL
           "SELECT " + itemIDColumn + " FROM " + preferenceTable + " WHERE " + userIDColumn + "=?",
           // getNumItemsSQL
@@ -117,7 +115,7 @@ public MySQLBooleanPrefJDBCDataModel(DataSource dataSource,
           // getNumPreferenceForItemSQL
           "SELECT COUNT(1) FROM " + preferenceTable + " WHERE " + itemIDColumn + "=?",
           // getNumPreferenceForItemsSQL
-          "SELECT COUNT(1) FROM " + preferenceTable + " tp1 INNER JOIN " + preferenceColumn + " tp2 " +
+          "SELECT COUNT(1) FROM " + preferenceTable + " tp1 INNER JOIN " + preferenceTable + " tp2 " +
           "ON (tp1." + userIDColumn + "=tp2." + userIDColumn + ") " +
           "WHERE tp1." + itemIDColumn + "=? and tp2." + itemIDColumn + "=?");
   }
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/MySQLJDBCDataModel.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/MySQLJDBCDataModel.java
index 00babeaa..5e88617b 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/MySQLJDBCDataModel.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/jdbc/MySQLJDBCDataModel.java
@@ -162,7 +162,7 @@ public MySQLJDBCDataModel(DataSource dataSource,
           // getNumPreferenceForItemSQL
           "SELECT COUNT(1) FROM " + preferenceTable + " WHERE " + itemIDColumn + "=?",
           // getNumPreferenceForItemsSQL
-          "SELECT COUNT(1) FROM " + preferenceTable + " tp1 INNER JOIN " + preferenceColumn + " tp2 " +
+          "SELECT COUNT(1) FROM " + preferenceTable + " tp1 INNER JOIN " + preferenceTable + " tp2 " +
           "ON (tp1." + userIDColumn + "=tp2." + userIDColumn + ") " +
           "WHERE tp1." + itemIDColumn + "=? and tp2." + itemIDColumn + "=?");
   }
