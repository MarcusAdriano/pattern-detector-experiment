diff --git a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java
index 848d9cfe..acd32fed 100644
--- a/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java
+++ b/db/derby/code/branches/10.8/java/engine/org/apache/derby/impl/sql/compile/ProjectRestrictNode.java
@@ -1104,15 +1104,18 @@ public void pushExpressions(PredicateList predicateList)
 		{
 			SelectNode childSelect = (SelectNode)childResult;
 
-			if ( (childSelect.hasWindows()  &&
-				  childSelect.orderByList != null) ) {
-				// We can't push down if there is an ORDER BY and a window
+            // We can't push down if there is a window
 				// function because that would make ROW_NUMBER give wrong
 				// result:
 				// E.g.
 				//     SELECT * from (SELECT ROW_NUMBER() OVER (), j FROM T
 				//                    ORDER BY j) WHERE j=5
 				//
+            // Similarly, don't push if we have OFFSET and/or FETCH FROM.
+            //
+            if ((childSelect.hasWindows() ||
+                 childSelect.fetchFirst != null ||
+                 childSelect.offset != null)){
 			} else {
 				pushPList.pushExpressionsIntoSelect((SelectNode) childResult,
 													false);
diff --git a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndOffsetFetchInSubqueries.java b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndOffsetFetchInSubqueries.java
index 00eeb1ea..99e09803 100644
--- a/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndOffsetFetchInSubqueries.java
+++ b/db/derby/code/branches/10.8/java/testing/org/apache/derbyTesting/functionTests/tests/lang/OrderByAndOffsetFetchInSubqueries.java
@@ -1020,4 +1020,49 @@ public void testSelectSubqueriesSortAvoidance() throws SQLException {
         rollback();
     }
 
+    /**
+     * Prevent pushing of where predicates into selects with fetch
+     * and/or offset (DERBY-5911). Similarly, for windowed selects.
+     */
+    public void testPushAvoidance() throws SQLException {
+        setAutoCommit(false);
+        Statement s = createStatement();
+        s.executeUpdate
+            ("CREATE TABLE COFFEES (COF_NAME VARCHAR(254),PRICE INTEGER)");
+        s.executeUpdate
+            ("INSERT INTO COFFEES VALUES ('Colombian', 5)");
+        s.executeUpdate
+            ("INSERT INTO COFFEES VALUES ('French_Roast', 5)");
+        s.executeUpdate
+            ("INSERT INTO COFFEES VALUES ('Colombian_Decaf', 20)");
+
+        ResultSet rs = s.executeQuery
+            ("select * from " +
+             "    (select COF_NAME, PRICE from COFFEES " +
+             "     order by COF_NAME fetch next 2 rows only" +
+             "    ) t " +
+             "where t.PRICE < 10");
+
+        JDBC.assertFullResultSet(rs, new String[][]{{"Colombian", "5"}});
+
+        rs = s.executeQuery
+            ("select * from " +
+             "    (select COF_NAME, PRICE from COFFEES " +
+             "     order by COF_NAME offset 2 row" +
+             "    ) t " +
+             "where t.PRICE < 10");
+
+        JDBC.assertFullResultSet(rs, new String[][]{{"French_Roast", "5"}});
+
+        rs = s.executeQuery
+            ("select cof_name, price from " +
+             "   (select row_number() over() as rownum, COF_NAME, PRICE from " +
+             "      (select * from COFFEES order by COF_NAME) i" +
+             "   ) t where rownum <= 2 and PRICE < 10");
+
+        JDBC.assertFullResultSet(rs, new String[][]{{"Colombian", "5"}});
+
+
+        rollback();
+    }
 }
