diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
index f4fbee96..c92e05a4 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/derbynet/SecureServerTest.java
@@ -22,34 +22,22 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package org.apache.derbyTesting.functionTests.tests.derbynet;
 
 import java.io.File;
-import java.io.InputStream;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.net.URL;
-import java.security.AccessController;
-import java.security.PrivilegedAction;
 import java.sql.Connection;
 import java.sql.DriverManager;
 import java.util.ArrayList;
-import java.util.Properties;
+import java.util.Arrays;
 
-import junit.extensions.TestSetup;
 import junit.framework.Test;
 import junit.framework.TestSuite;
-import org.apache.derbyTesting.junit.BaseTestCase;
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.Derby;
 import org.apache.derbyTesting.junit.NetworkServerTestSetup;
 import org.apache.derbyTesting.junit.SecurityManagerSetup;
-import org.apache.derbyTesting.junit.ServerSetup;
 import org.apache.derbyTesting.junit.SpawnedProcess;
 import org.apache.derbyTesting.junit.SupportFilesSetup;
-import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
 import org.apache.derbyTesting.junit.TestConfiguration;
 import org.apache.derbyTesting.functionTests.util.PrivilegedFileOpsForTests;
 
-import org.apache.derby.drda.NetworkServerControl;
-
 /**
  * This Junit test class tests whether the server comes up under a security
  * manager as expected.
@@ -363,7 +351,8 @@ public void testServerStartup()
 
     private void disableTracing() throws Exception {
 
-        String traceOffOutput = runServerCommand( "trace off" );
+        String traceOffOutput = runServerCommand(
+                new String[] { "trace", "off" });
 
         println( "Output for trace off command:\n\n" + traceOffOutput );
 
@@ -373,13 +362,14 @@ private void disableTracing() throws Exception {
 
     private void setTraceDirectory() throws Exception {
 
-        String  traceDirectoryOutput = runServerCommand( "tracedirectory trace" );
+        String  traceDirectoryOutput = runServerCommand(
+                new String[] { "tracedirectory", "trace" });
         println( "Output for tracedirectory trace command:\n\n" + traceDirectoryOutput );
 
         if ( traceDirectoryOutput.indexOf( "Trace directory changed to trace." ) < 0 )
         { fail( "Unexpected output in setting trace directory:" + traceDirectoryOutput ); }
 
-        String pingOutput = runServerCommand( "ping" );
+        String pingOutput = runServerCommand( new String[] { "ping" } );
 
         if (pingOutput.indexOf("Connection obtained for host:") < 0)
         { fail ("Failed ping after changing trace directory: " + pingOutput);}
@@ -412,7 +402,8 @@ private void    connectToServer()
     private void    runsysinfo()
         throws Exception
     {
-        String          sysinfoOutput = runServerCommand( "sysinfo" );
+        String          sysinfoOutput = runServerCommand(
+                new String[] { "sysinfo" } );
 
         if ( sysinfoOutput.indexOf( "Security Exception:" ) > -1 )
         { fail( "Security exceptions in sysinfo output:\n\n:" + sysinfoOutput ); }
@@ -421,7 +412,8 @@ private void    runsysinfo()
     private void    enableTracing()
         throws Exception
     {
-        String          traceOnOutput = runServerCommand( "trace on" );
+        String          traceOnOutput = runServerCommand(
+                new String[] { "trace",  "on" } );
 
         println( "Output for trace on command:\n\n" + traceOnOutput );
 
@@ -460,42 +452,24 @@ public String toString()
      * Run a NetworkServerControl command.
      * </p>
      */
-    private String    runServerCommand( String commandSpecifics )
+    private String    runServerCommand( String[] commandSpecifics )
         throws Exception
     {
         String          portNumber = Integer.toString( getTestConfiguration().getPort() );
-        StringBuffer    buffer = new StringBuffer();
-        String          classpath = getSystemProperty( "java.class.path" );
-
-        buffer.append( getJavaExecutableName() + " -classpath " );
-        buffer.append( classpath );
-        buffer.append( " -Demma.verbosity.level=silent");
-        buffer.append( " org.apache.derby.drda.NetworkServerControl -p " + portNumber + " " + commandSpecifics );
 
-        final   String  command = buffer.toString();
+        ArrayList cmdList = new ArrayList();
+        cmdList.add("-Demma.verbosity.level=silent");
+        cmdList.add("org.apache.derby.drda.NetworkServerControl");
+        cmdList.add("-p");
+        cmdList.add(portNumber);
+        cmdList.addAll(Arrays.asList(commandSpecifics));
 
-        println( "Server command is " + command );
-
-        Process     serverProcess = (Process) AccessController.doPrivileged
-            (
-             new PrivilegedAction()
-             {
-                 public Object run()
-                 {
-                     Process    result = null;
-                     try {
-                        result = Runtime.getRuntime().exec( command );
-                     } catch (Exception ex) {
-                         ex.printStackTrace();
-                     }
+        String[] cmd = (String[]) cmdList.toArray(commandSpecifics);
                      
-                     return result;
-                 }
-             }
-            );
+        Process serverProcess = execJavaCmd(cmd);
         
         SpawnedProcess spawned = new SpawnedProcess(serverProcess,
-                commandSpecifics);
+                cmdList.toString());
         
         // Ensure it completes without failures.
         assertEquals(0, spawned.complete(false));
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Driver40UnbootedTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Driver40UnbootedTest.java
index cb3a51af..50203993 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Driver40UnbootedTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/Driver40UnbootedTest.java
@@ -23,7 +23,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import java.sql.Driver;
 import java.sql.DriverManager;
-import java.sql.SQLException;
 import java.sql.SQLFeatureNotSupportedException;
 
 import junit.framework.Test;
@@ -139,19 +138,12 @@ public void test_notBooted() throws Exception
     {
         if ( !getTestConfiguration().loadingFromJars() ) { return ; }
         
-        StringBuffer    buffer = new StringBuffer();
-        String          classpath = getSystemProperty( "java.class.path" );
+        String[] command = {
+            "-Demma.verbosity.level=silent",
+            getClass().getName()
+        };
 
-        buffer.append( getJavaExecutableName() + " -classpath " );
-        buffer.append( classpath );
-        buffer.append( " -Demma.verbosity.level=silent ");
-        buffer.append( getClass().getName() );
-
-        final   String  command = buffer.toString();
-
-        println( "Server command is " + command );
-
-        Process     process = Runtime.getRuntime().exec( command );
+        Process process = execJavaCmd(command);
         
         SpawnedProcess spawned = new SpawnedProcess( process, "UnbootedTest" );
         
