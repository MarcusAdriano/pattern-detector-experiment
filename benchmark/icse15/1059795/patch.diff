diff --git a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
index e9c4f3d5..297ae52c 100644
--- a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
+++ b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextHelper.java
@@ -74,16 +74,7 @@ private static ContextProvider doCreateURLContext(BundleContext context, String
             ObjectFactory factory = urlObjectFactory.get();
             
             if (factory != null) {
-                try {
-                    Context ctx = (Context) factory.getObjectInstance(null, null, null, env);
-                    
-                    return new ContextProvider(context, urlObjectFactory.getReference(), ctx);
-                } catch (Exception e) {
-                    urlObjectFactory.unget();
-                    NamingException e2 = new NamingException();
-                    e2.initCause(e);
-                    throw e2;
-                }
+                return new URLContextProvider(context, urlObjectFactory.getReference(), factory, env);
             }
         }
 
@@ -168,7 +159,7 @@ private static ContextProvider doGetContextProvider(BundleContext context,
                         try {
                             initialContext = factory.getInitialContext(environment);
                             if (initialContext != null) {
-                              provider = new ContextProvider(context, reference, initialContext);
+                              provider = new SingleContextProvider(context, reference, initialContext);
                               break;
                           }
                         } finally {
@@ -186,7 +177,7 @@ private static ContextProvider doGetContextProvider(BundleContext context,
               if (factory != null) {
                 try {
                     initialContext = factory.getInitialContext(environment);
-                    provider = new ContextProvider(context, ref, initialContext);
+                    provider = new SingleContextProvider(context, ref, initialContext);
                 } finally {
                     if (provider == null) context.ungetService(ref);
                 }
@@ -220,7 +211,7 @@ private static ContextProvider getInitialContextUsingBuilder(BundleContext conte
                 
                 if (factory != null) {
                   try {
-                    provider = new ContextProvider(context, ref, factory.getInitialContext(environment));
+                    provider = new SingleContextProvider(context, ref, factory.getInitialContext(environment));
                   } finally {
                     if (provider == null) context.ungetService(ref); // we didn't get something back, so this was no good.
                   }
diff --git a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextProvider.java b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextProvider.java
index 5be4b65b..a1f4b202 100644
--- a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextProvider.java
+++ b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/ContextProvider.java
@@ -9,15 +9,13 @@
 import org.osgi.framework.BundleContext;
 import org.osgi.framework.ServiceReference;
 
-public class ContextProvider {
-    private ServiceReference reference;
-    private Context context;
-    private BundleContext bc;
+public abstract class ContextProvider {
+    private final ServiceReference reference;
+    private final BundleContext bc;
     
-    public ContextProvider(BundleContext ctx, ServiceReference reference, Context context) {
+    public ContextProvider(BundleContext ctx, ServiceReference reference) {
         bc = ctx;
         this.reference = reference;
-        this.context = context;
     }
     
     public boolean isValid() {
@@ -26,10 +24,7 @@ public boolean isValid() {
 
     public void close() throws NamingException {
        if (bc != null) bc.ungetService(reference);
-       context.close();
     }
 
-    public Context getContext() {
-      return context;
-    }
+    public abstract Context getContext() throws NamingException;
 }
diff --git a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/SingleContextProvider.java b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/SingleContextProvider.java
index e69de29b..435330c5 100644
--- a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/SingleContextProvider.java
+++ b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/SingleContextProvider.java
@@ -0,0 +1,43 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.jndi;
+
+import javax.naming.Context;
+import javax.naming.NamingException;
+
+import org.osgi.framework.BundleContext;
+import org.osgi.framework.ServiceReference;
+
+public class SingleContextProvider extends ContextProvider {
+    private final Context context;
+
+    public SingleContextProvider(BundleContext bc, ServiceReference ref, Context ctx) {
+        super(bc, ref);
+        this.context = ctx;
+    }
+    
+    public Context getContext() {
+        return context;
+    }
+    
+    public void close() throws NamingException {
+        super.close();
+        context.close();
+    }
+}
diff --git a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/URLContextProvider.java b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/URLContextProvider.java
index e69de29b..2254811b 100644
--- a/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/URLContextProvider.java
+++ b/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/URLContextProvider.java
@@ -0,0 +1,50 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.jndi;
+
+import java.util.Hashtable;
+
+import javax.naming.Context;
+import javax.naming.NamingException;
+import javax.naming.spi.ObjectFactory;
+
+import org.osgi.framework.BundleContext;
+import org.osgi.framework.ServiceReference;
+
+public class URLContextProvider extends ContextProvider {
+    private final ObjectFactory factory;
+    private final Hashtable<?, ?> environment;
+    
+    public URLContextProvider(BundleContext bc, ServiceReference reference, ObjectFactory factory, Hashtable<?, ?> environment) {
+        super(bc, reference);
+        this.factory = factory;
+        this.environment = environment;
+    }
+
+    @Override
+    public Context getContext() throws NamingException {
+        try {
+            return (Context) factory.getObjectInstance(null, null, null, environment);
+        } catch (Exception e) {
+            NamingException ne = new NamingException();
+            ne.initCause(e);
+            throw ne;
+        }
+    }    
+}
diff --git a/aries/trunk/jndi/jndi-core/src/test/java/org/apache/aries/jndi/InitialContextTest.java b/aries/trunk/jndi/jndi-core/src/test/java/org/apache/aries/jndi/InitialContextTest.java
index 906b4006..abd23982 100644
--- a/aries/trunk/jndi/jndi-core/src/test/java/org/apache/aries/jndi/InitialContextTest.java
+++ b/aries/trunk/jndi/jndi-core/src/test/java/org/apache/aries/jndi/InitialContextTest.java
@@ -2,9 +2,11 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertNotNull;
 
 import java.util.Hashtable;
 import java.util.Properties;
+import java.util.concurrent.atomic.AtomicBoolean;
 
 import javax.naming.Context;
 import javax.naming.InitialContext;
@@ -19,6 +21,8 @@
 import javax.naming.spi.InitialContextFactoryBuilder;
 import javax.naming.spi.ObjectFactory;
 
+import junit.framework.Assert;
+
 import org.apache.aries.jndi.startup.Activator;
 import org.apache.aries.mocks.BundleContextMock;
 import org.apache.aries.unittest.mocks.MethodCall;
@@ -33,6 +37,7 @@
 {
   private Activator activator;
   private BundleContext bc;
+  private InitialContext ic;
   
   /**
    * This method does the setup .
@@ -131,4 +136,97 @@ public void testLookFromLdapICF() throws Exception
     ilc.extendedOperation(req);
     Skeleton.getSkeleton(backCtx).assertCalled(new MethodCall(LdapContext.class, "extendedOperation", req));
   }
+  
+  @Test
+  public void testURLLookup() throws Exception {
+      ObjectFactory of = new ObjectFactory() {
+          public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment) throws Exception {
+              return dummyContext("result");
+          }
+      };
+      
+      registerURLObjectFactory(of, "test");      
+      ic = initialContext();      
+      
+      assertEquals("result", ic.lookup("test:something"));
+  }
+  
+  @Test
+  public void testNoURLContextCaching() throws Exception {
+      final AtomicBoolean second = new AtomicBoolean(false);
+      final Context ctx = dummyContext("one");
+      final Context ctx2 = dummyContext("two");
+      
+      ObjectFactory of = new ObjectFactory() {
+          public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment) throws Exception {
+              if (second.get()) return ctx2;
+              else {
+                  second.set(true);
+                  return ctx;
+              }
+          }          
+      };
+      
+      registerURLObjectFactory(of, "test");
+      ic = initialContext();
+      
+      assertEquals("one", ic.lookup("test:something"));
+      assertEquals("two", ic.lookup("test:something"));
+  }
+  
+  @Test
+  public void testURLContextErrorPropagation() throws Exception {
+      ObjectFactory of = new ObjectFactory() {        
+        public Object getObjectInstance(Object obj, Name name, Context nameCtx,
+                Hashtable<?, ?> environment) throws Exception {
+            throw new Exception("doh");
+        }
+      };
+      
+      registerURLObjectFactory(of, "test");
+      ic = initialContext();
+      
+      try {
+          ic.lookup("test:something");
+          Assert.fail("Expected NamingException");
+      } catch (NamingException ne) {
+          assertNotNull(ne.getCause());
+          assertEquals("doh", ne.getCause().getMessage());
+      }
+  }
+  
+  /**
+   * Create a minimal initial context with just the bundle context in the environment
+   * @return
+   * @throws Exception
+   */
+  private InitialContext initialContext() throws Exception {
+      Properties props = new Properties();
+      props.put(JNDIConstants.BUNDLE_CONTEXT, bc);
+      InitialContext ic = new InitialContext(props);
+      return ic;
+  }
+  
+  /**
+   * Registers an ObjectFactory to be used for creating URLContexts for the given scheme
+   * @param of
+   * @param scheme
+   */
+  private void registerURLObjectFactory(ObjectFactory of, String scheme) {
+      Properties props = new Properties();
+      props.setProperty(JNDIConstants.JNDI_URLSCHEME, "test");
+      bc.registerService(ObjectFactory.class.getName(), of, props);      
+  }
+  
+  /**
+   * Creates a context that always returns the given object
+   * @param toReturn
+   * @return
+   */
+  private Context dummyContext(Object toReturn) {
+      Context ctx = Skeleton.newMock(Context.class);
+      Skeleton.getSkeleton(ctx).setReturnValue(new MethodCall(Context.class, "lookup", String.class), toReturn);
+      Skeleton.getSkeleton(ctx).setReturnValue(new MethodCall(Context.class, "lookup", Name.class), toReturn);
+      return ctx;
+  }
 }
