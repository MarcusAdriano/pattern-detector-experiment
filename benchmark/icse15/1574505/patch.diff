diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java
index 39eb6a01..cd305906 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/RowResultSetNode.java
@@ -446,22 +446,13 @@ public ResultSetNode preprocess(int numTables,
 									FromList fromList)
 								throws StandardException
 	{
-
-		if (subquerys.size() > 0)
-		{
-			subquerys.preprocess(
+        getResultColumns().preprocess(
 								numTables,
-								(FromList) getNodeFactory().getNode(
-									C_NodeTypes.FROM_LIST,
-									getNodeFactory().doJoinOrderOptimization(),
-									getContextManager()),
-								(SubqueryList) getNodeFactory().getNode(
-													C_NodeTypes.SUBQUERY_LIST,
-													getContextManager()),
+                fromList,
+                subquerys,
 								(PredicateList) getNodeFactory().getNode(
 													C_NodeTypes.PREDICATE_LIST,
 													getContextManager()));
-		}
 
 		/* Allocate a dummy referenced table map */ 
 		referencedTableMap = new JBitSet(numTables);
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/SubqueryList.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/SubqueryList.java
index bcc8d45d..76d815b7 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/SubqueryList.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/SubqueryList.java
@@ -47,35 +47,6 @@ public void addSubqueryNode(SubqueryNode subqueryNode) throws StandardException
 		addElement(subqueryNode);
 	}
 
-	/**
-	 * Preprocess a SubqueryList.  For now, we just preprocess each SubqueryNode
-	 * in the list.
-	 *
-	 * @param	numTables			Number of tables in the DML Statement
-	 * @param	outerFromList		FromList from outer query block
-	 * @param	outerSubqueryList	SubqueryList from outer query block
-	 * @param	outerPredicateList	PredicateList from outer query block
-	 *
-	 * @exception StandardException		Thrown on error
-	 */
-	public void preprocess(int numTables,
-							FromList outerFromList,
-							SubqueryList outerSubqueryList,
-							PredicateList outerPredicateList) 
-				throws StandardException
-	{
-		SubqueryNode	subqueryNode;
-
-		int size = size();
-		for (int index = 0; index < size; index++)
-		{
-			subqueryNode = (SubqueryNode) elementAt(index);
-			subqueryNode.preprocess(numTables, outerFromList,
-									outerSubqueryList,
-									outerPredicateList);
-		}
-	}
-
 	/**
 	 * Optimize the subqueries in this list.  
 	 *
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java
index fb8a381b..bc240027 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/SubqueryNode.java
@@ -889,12 +889,13 @@ else if ( (isIN() || isANY() || isEXISTS() || flattenableNotExists) &&
 			topNode = pushNewPredicate(numTables);
 			pushedNewPredicate = true;
 		}
-		/* Since NOT EXISTS subquery is not flattened, now is good time to create
-		 * an IS NULL node on top.  Other cases are taken care of in pushNewPredicate.
+        /* EXISTS and NOT EXISTS subqueries that haven't been flattened, need
+         * an IS [NOT] NULL node on top so that they return a BOOLEAN. Other
+         * cases are taken care of in pushNewPredicate.
 		 */
-		else if (subqueryType == NOT_EXISTS_SUBQUERY)
+        else if (isEXISTS() || isNOT_EXISTS())
 		{
-			topNode = genIsNullTree();
+            topNode = genIsNullTree(isEXISTS());
 			subqueryType = EXISTS_SUBQUERY;
 		}
 
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/ValueNode.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/ValueNode.java
index 66cdd1a9..862dc157 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/ValueNode.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/compile/ValueNode.java
@@ -561,20 +561,22 @@ public ValueNode genEqualsFalseTree()
 	}
 
 	/**
-	 * Transform this into this is null.  Useful for NOT elimination.
+     * Transform this into this IS NULL or IS NOT NULL.
 	 *
+     * @param notNull if true, transform this into IS NOT NULL;
+     *                otherwise, transform this into IS NULL
 	 * @return		The modified expression
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
-	public ValueNode genIsNullTree()
+    ValueNode genIsNullTree(boolean notNull)
 			throws StandardException
 	{
 		IsNullNode isNullNode;
 
 		isNullNode = (IsNullNode)
 							getNodeFactory().getNode(
-													C_NodeTypes.IS_NULL_NODE,
+													notNull ? C_NodeTypes.IS_NOT_NULL_NODE : C_NodeTypes.IS_NULL_NODE,
 													this,
 													getContextManager());
 		isNullNode.setType(new DataTypeDescriptor(
diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ExistsWithSubqueriesTest.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ExistsWithSubqueriesTest.java
index f190251d..1c77ad10 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ExistsWithSubqueriesTest.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/ExistsWithSubqueriesTest.java
@@ -540,4 +540,106 @@ private void setupDerby3033()
         s.close();
     }
 
+    /**
+     * Some EXISTS subqueries (and IN subqueries transformed to EXISTS)
+     * returned NULL instead of TRUE or FALSE before DERBY-6408. This test
+     * case verifies the fix.
+     */
+    public void testDerby6408() throws SQLException {
+        setAutoCommit(false);
+        Statement s = createStatement();
+
+        // This statement used to return only NULLs.
+        JDBC.assertFullResultSet(
+                s.executeQuery("values (exists(select * from empty), "
+                        + "not exists (select * from empty), "
+                        + "not (exists (select * from empty)), "
+                        + "not (not exists (select * from empty)))"),
+                new String[][] {{"false", "true", "true", "false" }});
+
+        // This similar statement worked even before the fix.
+        JDBC.assertFullResultSet(
+                s.executeQuery("values (exists(select * from onerow), "
+                        + "not exists (select * from onerow), "
+                        + "not (exists (select * from onerow)), "
+                        + "not (not exists (select * from onerow)))"),
+                new String[][] {{"true", "false", "false", "true" }});
+
+        // Now put the same expressions in the SELECT list. Used to return
+        // only NULLs.
+        JDBC.assertFullResultSet(
+                s.executeQuery("select exists(select * from empty), "
+                        + "not exists (select * from empty), "
+                        + "not (exists (select * from empty)), "
+                        + "not (not exists (select * from empty)) from onerow"),
+                new String[][] {{"false", "true", "true", "false" }});
+
+        // Check the returned value when used in a WHERE predicate. All of
+        // these queries returned one row, but they should return no rows
+        // because EXISTS shouldn't return null.
+        JDBC.assertEmpty(s.executeQuery("select * from onerow "
+                + "where (exists (select * from empty)) is null"));
+        JDBC.assertEmpty(s.executeQuery("select * from onerow "
+                + "where (not exists (select * from empty)) is null"));
+        JDBC.assertEmpty(s.executeQuery("select * from onerow "
+                + "where (not (not exists (select * from empty))) is null"));
+
+        // The results were correct even before the fix if the subquery
+        // wasn't empty. Verify that they still are.
+        JDBC.assertEmpty(s.executeQuery("select * from onerow "
+                + "where (exists (select * from onerow)) is null"));
+        JDBC.assertEmpty(s.executeQuery("select * from onerow "
+                + "where (not exists (select * from onerow)) is null"));
+        JDBC.assertEmpty(s.executeQuery("select * from onerow "
+                + "where (not (not exists (select * from onerow))) is null"));
+
+        // Similar problems were seen in IN subqueries that were rewritten
+        // to EXISTS subqueries internally. For example, this query used
+        // to return NULL.
+        JDBC.assertSingleValueResultSet(
+                s.executeQuery("values 1 in (select j from onerow)"), "false");
+
+        // If it should evaluate to TRUE, it worked even before the fix.
+        JDBC.assertSingleValueResultSet(
+                s.executeQuery("values 2 in (select j from onerow)"), "true");
+
+        // DERBY-6409: Quantified comparisons can also be rewritten to EXISTS,
+        // and these two queries returned wrong results before the fix.
+        JDBC.assertSingleValueResultSet(
+                s.executeQuery("values 1 > all (select 2 from tworows)"), "false");
+        JDBC.assertSingleValueResultSet(
+                s.executeQuery("values 1 < all (select 2 from tworows)"), "true");
+
+        // Verify that EXISTS works in INSERT and UPDATE.
+        s.execute("create table d6408(id int generated by default as identity,"
+                + " b boolean not null)");
+
+        // This used to fail with
+        // ERROR 23502: Column 'B'  cannot accept a NULL value.
+        s.execute("insert into d6408(b) values exists (select * from empty), "
+                + "not exists (select * from empty), "
+                + "exists (select * from onerow), "
+                + "not exists (select * from onerow)");
+
+        JDBC.assertFullResultSet(
+                s.executeQuery("select b from d6408 order by id"),
+                new String[][] {{"false"}, {"true"}, {"true"}, {"false"}});
+
+        // These used to fail with
+        // ERROR 23502: Column 'B'  cannot accept a NULL value.
+        s.execute("update d6408 set b = exists (select * from empty)");
+        JDBC.assertSingleValueResultSet(
+                s.executeQuery("select distinct b from d6408"), "false");
+        s.execute("update d6408 set b = not exists (select * from empty)");
+        JDBC.assertSingleValueResultSet(
+                s.executeQuery("select distinct b from d6408"), "true");
+
+        // These passed even before the fix.
+        s.execute("update d6408 set b = exists (select * from onerow)");
+        JDBC.assertSingleValueResultSet(
+                s.executeQuery("select distinct b from d6408"), "true");
+        s.execute("update d6408 set b = not exists (select * from onerow)");
+        JDBC.assertSingleValueResultSet(
+                s.executeQuery("select distinct b from d6408"), "false");
+    }
 }
diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java
index 9df0b8e4..1fe9930a 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java
@@ -10186,9 +10186,8 @@ public void testMinimumSelectPrivilegeRequirement() throws SQLException {
             { "values (select count(*) from user1.t4191)", new String[][] {{"0"}} },
             { "values (select count(1) from user1.t4191)", new String[][] {{"0"}} },
             { "values ((select 1 from user1.t4191))",      new String[][] {{null}} },
-            // DERBY-6408: Next two queries should have returned FALSE.
-            { "values exists(select 1 from user1.t4191)",  new String[][] {{null}} },
-            { "values exists(select * from user1.t4191)",  new String[][] {{null}} },
+            { "values exists(select 1 from user1.t4191)",  new String[][] {{"false"}} },
+            { "values exists(select * from user1.t4191)",  new String[][] {{"false"}} },
             { "select count(*) from (select 1 from user1.t4191) s", new String[][] {{"0"}} },
             { "insert into user1.t4191_table3 select 1, 2 from user1.t4191", new Integer(0) },
             { "update user1.t4191_table3 set c31 = 1 where exists (select * from user1.t4191)", new Integer(0) },
