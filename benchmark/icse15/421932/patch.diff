diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ColumnMetaData.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ColumnMetaData.java
index 6cead661..6f6aa585 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/ColumnMetaData.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/ColumnMetaData.java
@@ -292,7 +292,13 @@ public int getColumnDisplaySize(int column) throws SQLException {
                 return 22;
             case Types.DECIMAL:
             case java.sql.Types.NUMERIC:
-                return getPrecision(column) + 2;  // add 1 for sign and 1 for decimal
+		// There are 3 possible cases with respect to finding the correct max width for DECIMAL type.
+		// 1. If scale = 0, only sign should be added to precision.
+		// 2. scale = precision, 3 should be added to precision for sign, decimal and an additional char '0'.
+		// 3. precision > scale > 0, 2 should be added to precision for sign and decimal.
+		int scale = getScale(column);
+		int precision = getPrecision(column);
+		return (scale == 0) ? (precision + 1) : ((scale == precision) ? (precision + 3) : (precision + 2));
             case Types.CHAR:
             case Types.VARCHAR:
             case Types.LONGVARCHAR:
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeUtilities.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeUtilities.java
index 96cca290..64e4cede 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeUtilities.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeUtilities.java
@@ -218,7 +218,12 @@ public	static	int getColumnDisplaySize(int typeId, int storageLength)
      */
     public static int computeMaxWidth( int precision, int scale)
     {
-        return (scale == 0) ? (precision + 1) : (precision + 3);
+	// There are 3 possible cases with respect to finding the correct max
+	// width for DECIMAL type.
+	// 1. If scale = 0, only sign should be added to precision.
+	// 2. scale=precision, 3 should be added to precision for sign, decimal and an additional char '0'.
+	// 3. precision > scale > 0, 2 should be added to precision for sign and decimal.
+	return (scale ==0) ? (precision +1) : ((scale == precision) ? (precision + 3) : (precision + 2));
     }
 }
 
