diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AbstractType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AbstractType.java
index 543d8557..345ecd93 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AbstractType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/AbstractType.java
@@ -99,7 +99,7 @@ public int compare(ByteBuffer o1, ByteBuffer o2)
 
     /** get a byte representation of the given string.
      *  defaults to unsupportedoperation so people deploying custom Types can update at their leisure. */
-    public ByteBuffer fromString(String source)
+    public ByteBuffer fromString(String source) throws MarshalException
     {
         throw new UnsupportedOperationException();
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/IntegerType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/IntegerType.java
index 5ccfb412..cfc326d5 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/IntegerType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/IntegerType.java
@@ -130,7 +130,7 @@ public String getString(ByteBuffer bytes)
         return new java.math.BigInteger(TBaseHelper.byteBufferToByteArray(bytes)).toString(10);
     }
 
-    public ByteBuffer fromString(String source)
+    public ByteBuffer fromString(String source) throws MarshalException
     {
         BigInteger integerType;
 
@@ -140,7 +140,7 @@ public ByteBuffer fromString(String source)
         }
         catch (Exception e)
         {
-            throw new RuntimeException("'" + source + "' could not be translated into an IntegerType.");
+            throw new MarshalException(String.format("unable to make int from '%s'", source), e);
         }
 
         return ByteBuffer.wrap(integerType.toByteArray());
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LexicalUUIDType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LexicalUUIDType.java
index 71dc9bf8..7b0c3504 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LexicalUUIDType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LexicalUUIDType.java
@@ -64,10 +64,17 @@ public String getString(ByteBuffer bytes)
         return UUIDGen.getUUID(bytes).toString();
     }
 
-    public ByteBuffer fromString(String source)
+    public ByteBuffer fromString(String source) throws MarshalException
+    {
+        try
     {
         return ByteBuffer.wrap(UUIDGen.decompose(UUID.fromString(source)));
     }
+        catch (IllegalArgumentException e)
+        {
+            throw new MarshalException(String.format("unable to make UUID from '%s'", source), e);
+        }
+    }
 
     public void validate(ByteBuffer bytes) throws MarshalException
     {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LongType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LongType.java
index c21891e8..6ecf6869 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LongType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/LongType.java
@@ -70,7 +70,7 @@ public String getString(ByteBuffer bytes)
         return String.valueOf(bytes.getLong(bytes.position()));
     }
 
-    public ByteBuffer fromString(String source)
+    public ByteBuffer fromString(String source) throws MarshalException
     {
         long longType;
 
@@ -80,7 +80,7 @@ public ByteBuffer fromString(String source)
         }
         catch (Exception e)
         {
-            throw new RuntimeException("'" + source + "' could not be translated into a LongType.");
+            throw new MarshalException(String.format("unable to make long from '%s'", source), e);
         }
 
         return ByteBufferUtil.bytes(longType);
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
index d9e44a02..b265e3d5 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/marshal/TimeUUIDType.java
@@ -100,12 +100,20 @@ public String getString(ByteBuffer bytes)
         return uuid.toString();
     }
 
-    public ByteBuffer fromString(String source)
+    public ByteBuffer fromString(String source) throws MarshalException
     {
-        UUID uuid = UUID.fromString(source);
+        UUID uuid = null;
+        try
+        {
+            uuid = UUID.fromString(source);
+        }
+        catch (IllegalArgumentException e)
+        {
+            throw new MarshalException(String.format("unable to make UUID from '%s'", source), e);
+        }
 
         if (uuid.version() != 1)
-            throw new IllegalArgumentException("TimeUUID supports only version 1 UUIDs");
+            throw new MarshalException("TimeUUID supports only version 1 UUIDs");
 
         return ByteBuffer.wrap(UUIDGen.decompose(uuid));
     }
