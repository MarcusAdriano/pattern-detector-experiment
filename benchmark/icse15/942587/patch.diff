diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java
index 8e530943..e6f4f2c4 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockMinion.java
@@ -31,12 +31,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  * Create and boot the supplied db argument. This auxiliary program is used by
  * {@code BootLockTest.java} to boot a db in a different jvm and subsequently
  * attempt a boot to from the original VM to detect dual boot attempt.
-* <p>
- * You can verify this subprogram by invoking it directly as:
- * </p>
- * <p>
- * {@code java org.apache.derbyTesting.functionTests.tests.store.BootLockMinion <dbname>}
- * </p>
+ * <p/>
+ * Started as:
+ * {@code java org.apache.derbyTesting.functionTests.tests.store.BootLockMinion <dbname> <port>}
  */
 
 public class BootLockMinion {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java
index 93cde84f..90b6a85f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/BootLockTest.java
@@ -29,6 +29,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.net.SocketTimeoutException;
 import java.net.ServerSocket;
 import java.net.Socket;
+import java.util.Properties;
 
 import junit.framework.Test;
 import junit.framework.TestSuite;
@@ -38,7 +39,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derbyTesting.junit.SecurityManagerSetup;
 import org.apache.derbyTesting.junit.TestConfiguration;
 import org.apache.derbyTesting.junit.JDBC;
-import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
+import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
 
 import org.apache.derby.iapi.store.raw.data.DataFactory;
 
@@ -102,55 +103,17 @@ private static Test decorateTest() {
 
         Test test = new TestSuite(BootLockTest.class);
 
-        test = TestConfiguration.singleUseDatabaseDecorator(test, dbName);
-
-        test = SecurityManagerSetup.noSecurityManager(test);
-
-        return test;
-    }
-
-    String oldPropValue = null;
-
-    protected void setUp() throws Exception {
-
-        super.setUp();
-
-        // For phoneMe, we won't see DATA_MULTIPLE_JBMS_ON_DB, but instead we
-        // can check that we get DATA_MULTIPLE_JBMS_FORCE_LOCK if we set
-        // derby.database.forceDatabaseLock.
-
         if (JDBC.vmSupportsJSR169()) {
-            // Can't use the DatabasePropertyTestSetup.singleProperty, since
-            // that method sets a database property (not a system property),
-            // and the minion is the one creating the database here. An
-            // alternative would be to let minion set it.
-
-            oldPropValue =
-                System.getProperty("derby.database.forceDatabaseLock");
-            System.setProperty("derby.database.forceDatabaseLock", "true");
-        }
-    }
-
-
-    protected void tearDown() throws Exception {
-
-        if (JDBC.vmSupportsJSR169()) {
-
-            if (oldPropValue != null) {
-                System.setProperty("derby.database.forceDatabaseLock",
-                                   oldPropValue);
-            } else {
-                // FIXME: Java 1.5 only: improve code when we move to that
-                // source level.
-                // System.clearProperty("derby.database.forceDatabaseLock");
-                System.setProperty("derby.database.forceDatabaseLock",
-                                   "false");
+            Properties props = new Properties();
+            props.setProperty("derby.database.forceDatabaseLock", "true");
+            test = new SystemPropertyTestSetup(test, props, true);
             }
 
+        test = TestConfiguration.singleUseDatabaseDecorator(test, dbName);
 
-        }
+        test = SecurityManagerSetup.noSecurityManager(test);
 
-        super.tearDown();
+        return test;
     }
 
 
