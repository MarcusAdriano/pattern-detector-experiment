diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java
index 396f7125..a5083259 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/Column.java
@@ -276,18 +276,6 @@ public IColumn deserialize(DataInputStream dis, String columnName, IFilter filte
         if ( name.equals(columnName) )
         {
             column = defreeze(dis, name);
-            if( filter instanceof IdentityFilter )
-            {
-            	/*
-            	 * If this is being called with identity filter
-            	 * since a column name is passed in we know
-            	 * that this is a final call
-            	 * Hence if the column is found set the filter to done
-            	 * so that we do not look for the column in further files
-            	 */
-            	IdentityFilter f = (IdentityFilter)filter;
-            	f.setDone();
-            }
         }
         else
         {
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
index 90c52bf3..2862de51 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamily.java
@@ -532,10 +532,6 @@ public ColumnFamily deserialize(DataInputStream dis, IFilter filter) throws IOEx
                 if(column != null)
                 {
                     cf.addColumn(column);
-                    if(filter.isDone())
-                    {
-                        break;
-                    }
                 }
             }
             return cf;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index bb5e675c..4124f48f 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -522,17 +522,12 @@ public ColumnFamily getColumnFamily(String key, String columnFamilyColumn, IFilt
         List<ColumnFamily> columnFamilies = new ArrayList<ColumnFamily>();
         /* Get the ColumnFamily from Memtable */
         getColumnFamilyFromCurrentMemtable(key, columnFamilyColumn, filter, columnFamilies);
-        if (columnFamilies.size() == 0 || !filter.isDone())
-        {
             /* Check if MemtableManager has any historical information */
             getUnflushedColumnFamily(key, columnFamily_, columnFamilyColumn, filter, columnFamilies);
-        }
-        if (columnFamilies.size() == 0 || !filter.isDone())
-        {
             long start = System.currentTimeMillis();
             getColumnFamilyFromDisk(key, columnFamilyColumn, columnFamilies, filter);
             diskReadStats_.add(System.currentTimeMillis() - start);
-        }
+
         return columnFamilies;
     }
 
@@ -574,10 +569,6 @@ private void getColumnFamilyFromDisk(String key, String cf, List<ColumnFamily> c
                 if (columnFamily != null)
                 {
                     columnFamilies.add(columnFamily);
-                    if (filter.isDone())
-                    {
-                        break;
-                    }
                 }
             }
         }
@@ -1417,8 +1408,6 @@ void getUnflushedColumnFamily(String key, String cfName, String cf, IFilter filt
             if ( columnFamily != null )
             {
                 columnFamilies.add(columnFamily);
-                if( filter.isDone())
-                    break;
             }
         }
     }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/IFilter.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/IFilter.java
index ee629783..d2a3fe72 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/IFilter.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/IFilter.java
@@ -27,7 +27,6 @@
 
 public interface IFilter
 {
-	public boolean isDone();
 	public ColumnFamily filter(String cfName, ColumnFamily cf);
     public IColumn filter(IColumn column, DataInputStream dis) throws IOException;
     public DataInputBuffer next(String key, String cf, SSTable ssTable) throws IOException;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/IdentityFilter.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/IdentityFilter.java
index 341515f4..9f1e153f 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/IdentityFilter.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/IdentityFilter.java
@@ -28,42 +28,13 @@
 
 public class IdentityFilter implements IFilter
 {
-    private boolean isDone_ = false;
-    
-	public boolean isDone()
-	{
-		return isDone_;
-	}
-
 	public ColumnFamily filter(String cfString, ColumnFamily columnFamily)
 	{
-    	String[] values = RowMutation.getColumnAndColumnFamily(cfString);
-    	if( columnFamily == null )
-    		return columnFamily;
-
-		if (values.length == 2 && !columnFamily.isSuper())
-		{
-			Collection<IColumn> columns = columnFamily.getAllColumns();
-			if(columns.size() >= 1)
-				isDone_ = true;
-		}
-		if (values.length == 3 && columnFamily.isSuper())
-		{
-    		Collection<IColumn> columns = columnFamily.getAllColumns();
-    		for(IColumn column : columns)
-    		{
-    			SuperColumn superColumn = (SuperColumn)column;
-        		Collection<IColumn> subColumns = superColumn.getSubColumns();
-        		if( subColumns.size() >= 1 )
-        			isDone_ = true;
-    		}
-		}
 		return columnFamily;
 	}
 
 	public IColumn filter(IColumn column, DataInputStream dis) throws IOException
 	{
-		// TODO Auto-generated method stub
 		return column;
 	}
 
@@ -71,18 +42,4 @@ public DataInputBuffer next(String key, String cf, SSTable ssTable) throws IOExc
 	{
 		return ssTable.next(key, cf);
 	}
-
-	public void setDone()
-	{
-		isDone_ = true;
-	}
-	/**
-	 * @param args
-	 */
-	public static void main(String[] args)
-	{
-		// TODO Auto-generated method stub
-
-	}
-
 }
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/NamesFilter.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/NamesFilter.java
index ed3e502c..a86d9da7 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/NamesFilter.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/NamesFilter.java
@@ -54,13 +54,8 @@ public ColumnFamily filter(String cf, ColumnFamily columnFamily)
 			{
 		        if ( names_.contains(column.name()) )
 		        {
-		            names_.remove(column.name());
 					filteredCf.addColumn(column);
 		        }
-				if( isDone() )
-				{
-					return filteredCf;
-				}
 			}
 		}
 		else if (values.length == 2 && columnFamily.isSuper())
@@ -76,13 +71,8 @@ else if (values.length == 2 && columnFamily.isSuper())
         		{
     		        if ( names_.contains(subColumn.name()) )
     		        {
-    		            names_.remove(subColumn.name());
     		            filteredSuperColumn.addColumn(subColumn);
     		        }
-    				if( isDone() )
-    				{
-    					return filteredCf;
-    				}
     			}
     		}
 		}
@@ -95,24 +85,13 @@ else if (values.length == 2 && columnFamily.isSuper())
 
     public IColumn filter(IColumn column, DataInputStream dis) throws IOException
     {
-        String columnName = column.name();
-        if ( names_.contains(columnName) )
-        {
-            names_.remove(columnName);
-        }
-        else
+        if (!names_.contains(column.name()))
         {
             column = null;
         }
-
         return column;
     }
 
-    public boolean isDone()
-    {
-        return names_.isEmpty();
-    }
-
     public DataInputBuffer next(String key, String cf, SSTable ssTable) throws IOException
     {
     	return ssTable.next(key, cf, names_, null);
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeFilter.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeFilter.java
index 54eae61d..5d4de184 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeFilter.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/RangeFilter.java
@@ -33,14 +33,12 @@
 {
     private final String colMin_;
     private final String colMax_;
-    private boolean isDone_;
     int count_;
 
     RangeFilter(String colMin, String colMax)
     {
         colMin_ = colMin;
         colMax_ = colMax;
-        isDone_ = false;
         count_ = -1;
     }
     
@@ -48,7 +46,6 @@
     {
         colMin_ = colMin;
         colMax_ = colMax;
-        isDone_ = false;
         count_ = count;
     }
 
@@ -57,28 +54,19 @@ public ColumnFamily filter(String cfName, ColumnFamily cf)
         if (cf == null)
             return null;
 
-        if (count_ == 0)
-        {
-            isDone_ = true;
-            return null;
-        }
-
         ColumnFamily filteredColumnFamily = cf.cloneMeShallow();
 
         Collection<IColumn> columns = cf.getAllColumns();
+        int i = 0;
         for (IColumn c : columns)
         {
+            if ((count_ >= 0) && (i >= count_))
+                break;
             if (c.name().compareTo(colMin_) >= 0
                     && c.name().compareTo(colMax_) <= 0)
             {
                 filteredColumnFamily.addColumn(c);
-                if (count_ > 0)
-                    count_--;
-                if (count_==0)
-                {
-                    isDone_ = true;
-                    break;
-                }
+                i++;
             }
         }
         return filteredColumnFamily;
@@ -87,26 +75,15 @@ public ColumnFamily filter(String cfName, ColumnFamily cf)
     public IColumn filter(IColumn column, DataInputStream dis)
             throws IOException
     {
-        if (column == null || isDone_)
+        if (column == null)
             return null;
 
         if (column.name().compareTo(colMin_) >= 0
                 && column.name().compareTo(colMax_) <= 0)
         {
-            if (count_ > 0)
-                count_--;
-            if (count_ == 0)
-                isDone_ = true;
             return column;
-        } else
-        {
-            return null;
-        }
     }
-
-    public boolean isDone()
-    {
-        return isDone_;
+        return null;
     }
 
     public DataInputBuffer next(String key, String cf, SSTable ssTable)
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java
index 8d51d99c..cb727060 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java
@@ -422,10 +422,6 @@ public IColumn deserialize(DataInputStream dis, String name, IFilter filter) thr
                     if(column != null)
                     {
                         superColumn.addColumn(column);
-                        if(filter.isDone())
-                        {
-                            break;
-                        }
                     }
                 }
                 return superColumn;
diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/TimeFilter.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/TimeFilter.java
index 3779ff3b..85d3cb6b 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/TimeFilter.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/TimeFilter.java
@@ -36,12 +36,10 @@
 class TimeFilter implements IFilter
 {
     private long timeLimit_;
-    private boolean isDone_;
 
     TimeFilter(long timeLimit)
     {
         timeLimit_ = timeLimit;
-        isDone_ = false;
     }
 
     public ColumnFamily filter(String cf, ColumnFamily columnFamily)
@@ -54,23 +52,17 @@ public ColumnFamily filter(String cf, ColumnFamily columnFamily)
         if (values.length == 1 && !columnFamily.isSuper())
         {
             Collection<IColumn> columns = columnFamily.getAllColumns();
-            int i = 0;
             for (IColumn column : columns)
             {
                 if (column.timestamp() >= timeLimit_)
                 {
                     filteredCf.addColumn(column);
-                    ++i;
                 }
                 else
                 {
                     break;
                 }
             }
-            if (i < columns.size())
-            {
-                isDone_ = true;
-            }
         }
         else if (values.length == 2 && columnFamily.isSuper())
         {
@@ -87,23 +79,17 @@ else if (values.length == 2 && columnFamily.isSuper())
                 filteredSuperColumn.markForDeleteAt(column.getLocalDeletionTime(), column.getMarkedForDeleteAt());
                 filteredCf.addColumn(filteredSuperColumn);
                 Collection<IColumn> subColumns = superColumn.getSubColumns();
-                int i = 0;
                 for (IColumn subColumn : subColumns)
                 {
                     if (subColumn.timestamp() >= timeLimit_)
                     {
                         filteredSuperColumn.addColumn(subColumn);
-                        ++i;
                     }
                     else
                     {
                         break;
                     }
                 }
-                if (i < filteredSuperColumn.getColumnCount())
-                {
-                    isDone_ = true;
-                }
             }
         }
         else
@@ -130,19 +116,12 @@ public IColumn filter(IColumn column, DataInputStream dis) throws IOException
             dis.reset();
             if (timeStamp < timeLimit_)
             {
-                isDone_ = true;
                 return null;
             }
         }
         return column;
     }
 
-
-    public boolean isDone()
-    {
-        return isDone_;
-    }
-
     public DataInputBuffer next(String key, String cfName, SSTable ssTable) throws IOException
     {
         return ssTable.next(key, cfName, null, new IndexHelper.TimeRange(timeLimit_, Long.MAX_VALUE));
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/RangeFilterTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/RangeFilterTest.java
index 78c2360b..081bbf31 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/RangeFilterTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/RangeFilterTest.java
@@ -41,7 +41,6 @@ public void testRangeFilterOnColumns() throws IOException
         ColumnFamily filteredCf = f.filter(cf.name(), cf);
         
         assertEquals(filteredCf.getColumnCount(),3);
-        assertFalse(f.isDone());
     }
     
     @Test
@@ -59,7 +58,6 @@ public void testRangeFilterOnColumnsWithCount() throws IOException
         ColumnFamily filteredCf = f.filter(cf.name(), cf);
         
         assertEquals(filteredCf.getColumnCount(),2);
-        assertTrue(f.isDone());
     }
 
     @Test
@@ -100,7 +98,6 @@ public void testRangeFilterOnSuperColumns() throws IOException
 
         col = filteredCf.getColumn("c");
         assertNotNull(col);
-        assertFalse(f.isDone());
     }
 
 }
