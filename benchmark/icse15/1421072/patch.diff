diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java
index c9d98c7b..06b2af12 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java
@@ -750,8 +750,37 @@ private void testCollectionsAPI() throws Exception {
     for (int i = 0; i < cnt; i++) {
       int numShards = _TestUtil.nextInt(random(), 0, shardCount) + 1;
       int replicationFactor = _TestUtil.nextInt(random(), 0, 3) + 2;
-      int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrServer().getZkStateReader().getClusterState().getLiveNodes().size())) + 1;
-      createCollection(collectionInfos, i, numShards, replicationFactor, maxShardsPerNode);
+      int maxShardsPerNode = (((numShards * replicationFactor) / getCommonCloudSolrServer()
+          .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;
+
+      
+      CloudSolrServer client = null;
+      try {
+        if (i == 0) {
+          // Test if we can create a collection through CloudSolrServer where
+          // you havnt set default-collection
+          // This is nice because you want to be able to create you first
+          // collection using CloudSolrServer, and in such case there is
+          // nothing reasonable to set as default-collection
+          client = createCloudClient(null);
+        } else if (i == 1) {
+          // Test if we can create a collection through CloudSolrServer where
+          // you have set default-collection to a non-existing collection
+          // This is nice because you want to be able to create you first
+          // collection using CloudSolrServer, and in such case there is
+          // nothing reasonable to set as default-collection, but you might want
+          // to use the same CloudSolrServer throughout the entire
+          // lifetime of your client-application, so it is nice to be able to
+          // set a default-collection on this CloudSolrServer once and for all
+          // and use this CloudSolrServer to create the collection
+          client = createCloudClient("awholynewcollection_" + i);
+        }
+        
+        createCollection(collectionInfos, "awholynewcollection_" + i,
+            numShards, replicationFactor, maxShardsPerNode, client);
+      } finally {
+        if (client != null) client.shutdown();
+      }
     }
     
     Set<Entry<String,List<Integer>>> collectionInfosEntrySet = collectionInfos.entrySet();
@@ -884,7 +913,12 @@ private void testCollectionsAPI() throws Exception {
     int replicationFactor = 2;
     int maxShardsPerNode = 1;
     collectionInfos = new HashMap<String,List<Integer>>();
-    createCollection(collectionInfos, cnt, numShards, replicationFactor, maxShardsPerNode);
+    CloudSolrServer client = createCloudClient("awholynewcollection_" + cnt);
+    try {
+      createCollection(collectionInfos, "awholynewcollection_" + cnt, numShards, replicationFactor, maxShardsPerNode, client);
+    } finally {
+      client.shutdown();
+    }
     
     // TODO: REMOVE THE SLEEP IN THE METHOD CALL WHEN WE HAVE COLLECTION API 
     // RESPONSES
@@ -895,30 +929,34 @@ private void testCollectionsAPI() throws Exception {
 
 
   protected void createCollection(Map<String,List<Integer>> collectionInfos,
-      int i, int numShards, int numReplica, int maxShardsPerNode) throws SolrServerException, IOException {
+      String collectionName, int numShards, int numReplicas, int maxShardsPerNode, SolrServer client) throws SolrServerException, IOException {
     ModifiableSolrParams params = new ModifiableSolrParams();
     params.set("action", CollectionAction.CREATE.toString());
 
     params.set(OverseerCollectionProcessor.NUM_SLICES, numShards);
-    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplica);
+    params.set(OverseerCollectionProcessor.REPLICATION_FACTOR, numReplicas);
     params.set(OverseerCollectionProcessor.MAX_SHARDS_PER_NODE, maxShardsPerNode);
-    String collectionName = "awholynewcollection_" + i;
+
     int clientIndex = random().nextInt(2);
     List<Integer> list = new ArrayList<Integer>();
     list.add(numShards);
-    list.add(numReplica);
+    list.add(numReplicas);
     list.add(maxShardsPerNode);
     collectionInfos.put(collectionName, list);
     params.set("name", collectionName);
     SolrRequest request = new QueryRequest(params);
     request.setPath("/admin/collections");
   
+    if (client == null) {
     final String baseUrl = ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().substring(
         0,
         ((HttpSolrServer) clients.get(clientIndex)).getBaseURL().length()
             - DEFAULT_COLLECTION.length() - 1);
     
     createNewSolrServer("", baseUrl).request(request);
+    } else {
+      client.request(request);
+    }
   }
 
   private boolean waitForReloads(String collectionName, Map<String,Long> urlToTimeBefore) throws SolrServerException, IOException {
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer.java b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer.java
index 4ff8430a..b63e4ddc 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer.java
@@ -164,7 +164,8 @@ public void connect() {
   }
 
   @Override
-  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException {
+  public NamedList<Object> request(SolrRequest request)
+      throws SolrServerException, IOException {
     connect();
 
     // TODO: if you can hash here, you could favor the shard leader
@@ -182,35 +183,47 @@ public void connect() {
     if (reqParams == null) {
       reqParams = new ModifiableSolrParams();
     }
+    List<String> theUrlList = new ArrayList<String>();
+    if (request.getPath().equals("/admin/collections")) {
+      Set<String> liveNodes = clusterState.getLiveNodes();
+      for (String liveNode : liveNodes) {
+        int splitPointBetweenHostPortAndContext = liveNode.indexOf("_");
+        theUrlList.add("http://"
+            + liveNode.substring(0, splitPointBetweenHostPortAndContext) + "/"
+            + liveNode.substring(splitPointBetweenHostPortAndContext + 1));
+      }
+    } else {
     String collection = reqParams.get("collection", defaultCollection);
     
     if (collection == null) {
-      throw new SolrServerException("No collection param specified on request and no default collection has been set.");
+        throw new SolrServerException(
+            "No collection param specified on request and no default collection has been set.");
     }
     
     // Extract each comma separated collection name and store in a List.
     List<String> collectionList = StrUtils.splitSmart(collection, ",", true);
     
-    // TODO: not a big deal because of the caching, but we could avoid looking at every shard
+      // TODO: not a big deal because of the caching, but we could avoid looking
+      // at every shard
     // when getting leaders if we tweaked some things
     
-    // Retrieve slices from the cloud state and, for each collection specified,
+      // Retrieve slices from the cloud state and, for each collection
+      // specified,
     // add it to the Map of slices.
     Map<String,Slice> slices = new HashMap<String,Slice>();
     for (String collectionName : collectionList) {
-      ClientUtils.addSlices(slices, collectionName, clusterState.getSlices(collectionName), true);
+        ClientUtils.addSlices(slices, collectionName,
+            clusterState.getSlices(collectionName), true);
     }
-
     Set<String> liveNodes = clusterState.getLiveNodes();
 
-    List<String> theUrlList;
     synchronized (cachLock) {
       List<String> leaderUrlList = leaderUrlLists.get(collection);
       List<String> urlList = urlLists.get(collection);
       List<String> replicasList = replicasLists.get(collection);
 
-      if ((sendToLeaders && leaderUrlList == null) || (!sendToLeaders
-          && urlList == null)
+        if ((sendToLeaders && leaderUrlList == null)
+            || (!sendToLeaders && urlList == null)
           || clusterState.hashCode() != this.lastClusterStateHashCode) {
         // build a map of unique nodes
         // TODO: allow filtering by group, role, etc
@@ -223,7 +236,8 @@ public void connect() {
             if (!liveNodes.contains(coreNodeProps.getNodeName())
                 || !coreNodeProps.getState().equals(ZkStateReader.ACTIVE)) continue;
             if (nodes.put(node, nodeProps) == null) {
-              if (!sendToLeaders || (sendToLeaders && coreNodeProps.isLeader())) {
+                if (!sendToLeaders
+                    || (sendToLeaders && coreNodeProps.isLeader())) {
                 String url = coreNodeProps.getCoreUrl();
                 urlList2.add(url);
               } else if (sendToLeaders) {
@@ -233,6 +247,7 @@ public void connect() {
             }
           }
         }
+          
         if (sendToLeaders) {
           this.leaderUrlLists.put(collection, urlList2);
           leaderUrlList = urlList2;
@@ -263,8 +278,10 @@ public void connect() {
         theUrlList.addAll(theReplicas);
       }
     }
+    }
  
-   // System.out.println("########################## MAKING REQUEST TO " + theUrlList);
+    // System.out.println("########################## MAKING REQUEST TO " +
+    // theUrlList);
  
     LBHttpSolrServer.Req req = new LBHttpSolrServer.Req(request, theUrlList);
     LBHttpSolrServer.Rsp rsp = lbServer.request(req);
diff --git a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
index 6a7d7625..c5e6aab2 100644
--- a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
+++ b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java
@@ -214,13 +214,7 @@ protected void initCloud() throws Exception {
     assert(cloudInit == false);
     cloudInit = true;
     try {
-      CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());
-      server.setDefaultCollection(DEFAULT_COLLECTION);
-      server.getLbServer().getHttpClient().getParams()
-          .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);
-      server.getLbServer().getHttpClient().getParams()
-          .setParameter(CoreConnectionPNames.SO_TIMEOUT, 20000);
-      cloudClient = server;
+      cloudClient = createCloudClient(DEFAULT_COLLECTION);
       
       cloudClient.connect();
     } catch (MalformedURLException e) {
@@ -233,6 +227,16 @@ protected void initCloud() throws Exception {
         shardToJetty, shardToLeaderJetty);
   }
 
+  protected CloudSolrServer createCloudClient(String defaultCollection)
+      throws MalformedURLException {
+    CloudSolrServer server = new CloudSolrServer(zkServer.getZkAddress());
+    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);
+    server.getLbServer().getHttpClient().getParams()
+        .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 5000);
+    server.getLbServer().getHttpClient().getParams()
+        .setParameter(CoreConnectionPNames.SO_TIMEOUT, 20000);
+    return server;
+  }
   
   @Override
   protected void createServers(int numServers) throws Exception {
