diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/Config.java b/cassandra/trunk/src/java/org/apache/cassandra/config/Config.java
index 66158767..f5b2e418 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/Config.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/Config.java
@@ -95,7 +95,7 @@
     public RequestSchedulerId request_scheduler_id;
     public RequestSchedulerOptions request_scheduler_options;
 
-    public RawKeyspace[] keyspaces;
+    public List<RawKeyspace> keyspaces;
     
     public static enum CommitLogSync {
         periodic,
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/Converter.java b/cassandra/trunk/src/java/org/apache/cassandra/config/Converter.java
index f64c08aa..890e38de 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/Converter.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/Converter.java
@@ -32,13 +32,20 @@
 import javax.xml.transform.TransformerException;
 import javax.xml.xpath.XPathExpressionException;
 
-import com.esotericsoftware.yamlbeans.YamlWriter;
 import org.apache.cassandra.utils.FBUtilities;
+import org.apache.cassandra.utils.SkipNullRepresenter;
 import org.apache.cassandra.utils.XMLUtils;
 import org.apache.cassandra.db.ColumnFamilyType;
 import org.w3c.dom.NodeList;
 import org.w3c.dom.Node;
 import org.xml.sax.SAXException;
+import org.yaml.snakeyaml.Dumper;
+import org.yaml.snakeyaml.DumperOptions;
+import org.yaml.snakeyaml.Yaml;
+import org.yaml.snakeyaml.introspector.Property;
+import org.yaml.snakeyaml.nodes.NodeTuple;
+import org.yaml.snakeyaml.nodes.Tag;
+import org.yaml.snakeyaml.representer.Representer;
 
 /**
  * @deprecated Yaml configuration for Keyspaces and ColumnFamilies is deprecated in 0.7
@@ -49,7 +56,7 @@
     private static Config conf = new Config();
     private final static String PREVIOUS_CONF_FILE = "cassandra.xml";
     
-    private static RawKeyspace[] readTablesFromXml(XMLUtils xmlUtils) throws ConfigurationException
+    private static List<RawKeyspace> readTablesFromXml(XMLUtils xmlUtils) throws ConfigurationException
     {
 
         List<RawKeyspace> keyspaces = new ArrayList<RawKeyspace>();
@@ -120,7 +127,7 @@
                 }
                 keyspaces.add(ks);
             }
-            return keyspaces.toArray(new RawKeyspace[0]);
+            return keyspaces;
         }
         catch (XPathExpressionException e) 
         {
@@ -276,9 +283,23 @@ private static void loadPreviousConfig(String config) throws ConfigurationExcept
     
     private static void dumpConfig(String outfile) throws IOException
     {
-        YamlWriter writer = new YamlWriter(new FileWriter(outfile));
-        writer.write(conf);
-        writer.close();
+        DumperOptions options = new DumperOptions();
+        /* Use a block YAML arrangement */
+        options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
+        SkipNullRepresenter representer = new SkipNullRepresenter();
+        /* Use Tag.MAP to avoid the class name being included as global tag */
+        representer.addClassTag(Config.class, Tag.MAP);
+        representer.addClassTag(RawColumnFamily.class, Tag.MAP);
+        Dumper dumper = new Dumper(representer, options);
+        Yaml yaml = new Yaml(dumper);
+        String output = yaml.dump(conf);
+        
+        /* Write to output file */
+        BufferedWriter out = new BufferedWriter(new FileWriter(outfile));
+        out.write("# Cassandra YAML generated from previous config\n");
+        out.write("# Configuration wiki: http://wiki.apache.org/cassandra/StorageConfiguration\n");
+        out.write(output);
+        out.close(); 
     }
     
     public static void main (String[] args) 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index f9d80acd..db167a3d 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -27,9 +27,6 @@
 import java.net.UnknownHostException;
 import java.util.*;
 
-import com.esotericsoftware.yamlbeans.YamlException;
-import com.esotericsoftware.yamlbeans.YamlReader;
-
 import org.apache.cassandra.io.sstable.Descriptor;
 import org.apache.cassandra.locator.DynamicEndpointSnitch;
 import org.slf4j.Logger;
@@ -58,6 +55,10 @@
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.utils.Pair;
+import org.yaml.snakeyaml.Loader;
+import org.yaml.snakeyaml.TypeDescription;
+import org.yaml.snakeyaml.Yaml;
+import org.yaml.snakeyaml.error.YAMLException;
 
 public class DatabaseDescriptor
 {
@@ -116,8 +117,19 @@ static String getStorageConfigPath() throws ConfigurationException
             if (logger.isDebugEnabled())
                 logger.info("Loading settings from " + configFileName);
 
-            YamlReader yaml = new YamlReader(new FileReader(configFileName));
-            conf = yaml.read(Config.class);
+            InputStream input = new FileInputStream(new File(configFileName));
+            org.yaml.snakeyaml.constructor.Constructor constructor = new org.yaml.snakeyaml.constructor.Constructor(Config.class);
+            TypeDescription desc = new TypeDescription(Config.class);
+            desc.putListPropertyType("keyspaces", RawKeyspace.class);
+            TypeDescription ksDesc = new TypeDescription(RawKeyspace.class);
+            ksDesc.putListPropertyType("column_families", RawColumnFamily.class);
+            TypeDescription cfDesc = new TypeDescription(RawColumnFamily.class);
+            cfDesc.putListPropertyType("column_metadata", RawColumnDefinition.class);
+            constructor.addTypeDescription(desc);
+            constructor.addTypeDescription(ksDesc);
+            constructor.addTypeDescription(cfDesc);
+            Yaml yaml = new Yaml(new Loader(constructor));
+            conf = (Config)yaml.load(input);
 
             if (conf.commitlog_sync == null)
             {
@@ -359,13 +371,13 @@ else if (conf.memtable_flush_writers == null)
         }
         catch (ConfigurationException e)
         {
-            logger.error("System error: " + e.getMessage());
+            logger.error("Fatal error: " + e.getMessage());
             System.err.println("Bad configuration; unable to start server");
             System.exit(1);
         }
-        catch (YamlException e)
+        catch (YAMLException e)
         {
-            logger.error("Parsing error: " + e.getMessage());
+            logger.error("Fatal error: " + e.getMessage());
             System.err.println("Bad configuration; unable to start server");
             System.exit(1);
         }
@@ -491,7 +503,7 @@ public boolean accept(File pathname)
             }
             
             // since we loaded definitions from local storage, log a warning if definitions exist in yaml.
-            if (conf.keyspaces != null && conf.keyspaces.length > 0)
+            if (conf.keyspaces != null && conf.keyspaces.size() > 0)
                 logger.warn("Schema definitions were defined both locally and in " + STORAGE_CONF_FILE +
                     ". Definitions in " + STORAGE_CONF_FILE + " were ignored.");
             
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/RawColumnFamily.java b/cassandra/trunk/src/java/org/apache/cassandra/config/RawColumnFamily.java
index 24a40352..77c8c559 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/RawColumnFamily.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/RawColumnFamily.java
@@ -26,7 +26,6 @@
 
 import org.apache.cassandra.db.ClockType;
 import org.apache.cassandra.db.ColumnFamilyType;
-import org.apache.cassandra.utils.FBUtilities;
 
 /**
  * @deprecated Yaml configuration for Keyspaces and ColumnFamilies is deprecated in 0.7
@@ -46,22 +45,4 @@
     public boolean preload_row_cache = CFMetaData.DEFAULT_PRELOAD_ROW_CACHE;
     public int gc_grace_seconds = CFMetaData.DEFAULT_GC_GRACE_SECONDS;
     public RawColumnDefinition[] column_metadata = new RawColumnDefinition[0];
-
-
-    /**
-     *  These getters/setters allow us to read X% in as a double.
-     */
-    public String getRows_cached() {
-        return String.valueOf(rows_cached);
-    }
-    public void setRows_cached(String in) {
-        rows_cached = FBUtilities.parseDoubleOrPercent(in);
-    }
-
-    public String getKeys_cached() {
-        return String.valueOf(keys_cached);
-    }
-    public void setKeys_cached(String in) {
-        keys_cached = FBUtilities.parseDoubleOrPercent(in);
-    }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
index 36810f4c..54498102 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageService.java
@@ -18,7 +18,8 @@
 
 package org.apache.cassandra.service;
 
-import java.io.*;
+import java.io.IOError;
+import java.io.IOException;
 import java.lang.management.ManagementFactory;
 import java.net.InetAddress;
 import java.net.UnknownHostException;
@@ -27,12 +28,12 @@
 import javax.management.MBeanServer;
 import javax.management.ObjectName;
 
-import com.esotericsoftware.yamlbeans.YamlWriter;
 import org.apache.cassandra.config.CFMetaData;
 import org.apache.cassandra.config.ColumnDefinition;
 import org.apache.cassandra.config.RawColumnDefinition;
 import org.apache.cassandra.config.RawColumnFamily;
 import org.apache.cassandra.config.RawKeyspace;
+import org.apache.cassandra.utils.SkipNullRepresenter;
 import org.apache.commons.lang.StringUtils;
 
 import org.slf4j.Logger;
@@ -70,6 +71,10 @@
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.utils.WrappedRunnable;
 import org.apache.log4j.Level;
+import org.yaml.snakeyaml.Dumper;
+import org.yaml.snakeyaml.DumperOptions;
+import org.yaml.snakeyaml.Yaml;
+import org.yaml.snakeyaml.nodes.Tag;
 
 /*
  * This abstraction contains the token/identifier of this node
@@ -1745,7 +1750,7 @@ else if (e.getCause() instanceof Exception)
         
     }
 
-    public void exportSchema(String filename) throws IOException
+    public String exportSchema() throws IOException
     {
         List<RawKeyspace> keyspaces = new ArrayList<RawKeyspace>();
         for (String ksname : DatabaseDescriptor.getNonSystemTables())
@@ -1791,9 +1796,19 @@ public void exportSchema(String filename) throws IOException
             keyspaces.add(rks);
         }
 
-        YamlWriter writer = new YamlWriter(new FileWriter(filename));
-        writer.write(keyspaces);
-        writer.close();
+        DumperOptions options = new DumperOptions();
+        /* Use a block YAML arrangement */
+        options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
+        SkipNullRepresenter representer = new SkipNullRepresenter();
+        /* Use Tag.MAP to avoid the class name being included as global tag */
+        representer.addClassTag(RawColumnFamily.class, Tag.MAP);
+        representer.addClassTag(Keyspaces.class, Tag.MAP);
+        representer.addClassTag(ColumnDefinition.class, Tag.MAP);
+        Dumper dumper = new Dumper(representer, options);
+        Yaml yaml = new Yaml(dumper);
+        Keyspaces ks = new Keyspaces();
+        ks.keyspaces = keyspaces;
+        return yaml.dump(ks);
     }
     
     public class Keyspaces
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageServiceMBean.java b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageServiceMBean.java
index d79e80a0..3b584c7c 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/service/StorageServiceMBean.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/service/StorageServiceMBean.java
@@ -19,8 +19,6 @@
 package org.apache.cassandra.service;
 
 import java.io.IOException;
-import java.io.OutputStream;
-import java.io.PrintStream;
 import java.net.UnknownHostException;
 import java.util.List;
 import java.util.Map;
@@ -221,7 +219,7 @@
      * Introduced in 0.7 to allow schema yaml to be exported.
      * @todo: deprecate in 0.7+1, remove in 0.7+2.
      */
-    public void exportSchema(String filename) throws IOException;
+    public String exportSchema() throws IOException;
 
     /**
      * Truncates (deletes) the given columnFamily from the provided keyspace.
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeProbe.java b/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeProbe.java
index 24b3a3c7..3550a6b2 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeProbe.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/tools/NodeProbe.java
@@ -19,7 +19,6 @@
 package org.apache.cassandra.tools;
 
 import java.io.IOException;
-import java.io.OutputStream;
 import java.io.PrintStream;
 import java.lang.management.ManagementFactory;
 import java.lang.management.MemoryMXBean;
@@ -412,9 +411,9 @@ public void loadSchemaFromYAML() throws ConfigurationException, IOException
         ssProxy.loadSchemaFromYAML();
     }
     
-    public void exportSchemaToYAML(String filename) throws IOException
+    public String exportSchemaToYAML() throws IOException
     {
-        ssProxy.exportSchema(filename);
+        return ssProxy.exportSchema();
     }
 }
 
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/tools/SchemaTool.java b/cassandra/trunk/src/java/org/apache/cassandra/tools/SchemaTool.java
index 16dc2d18..a80f9611 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/tools/SchemaTool.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/tools/SchemaTool.java
@@ -53,14 +53,14 @@ public static void main(String[] args)
         if ("import".equals(args[2]))
             new NodeProbe(host, port).loadSchemaFromYAML();
         else if ("export".equals(args[2]))
-            new NodeProbe(host, port).exportSchemaToYAML(args[3]);
+            System.out.println(new NodeProbe(host, port).exportSchemaToYAML());
         else
             usage();
     }
     
     private static void usage()
     {
-        System.err.printf("java %s <host> <port> import|export to_file%n", SchemaTool.class.getName());
+        System.err.printf("java %s <host> <port> import|export%n", SchemaTool.class.getName());
         System.exit(1);
     }
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/utils/SkipNullRepresenter.java b/cassandra/trunk/src/java/org/apache/cassandra/utils/SkipNullRepresenter.java
index e69de29b..e9854a9f 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/utils/SkipNullRepresenter.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/utils/SkipNullRepresenter.java
@@ -0,0 +1,41 @@
+package org.apache.cassandra.utils;
+
+import org.yaml.snakeyaml.introspector.Property;
+import org.yaml.snakeyaml.nodes.NodeTuple;
+import org.yaml.snakeyaml.nodes.Tag;
+import org.yaml.snakeyaml.representer.Representer;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * <p/>
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * <p/>
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+/* used to prevent null values from being included in generated YAML */
+public class SkipNullRepresenter extends Representer
+{
+    protected NodeTuple representJavaBeanProperty(Object javaBean, Property property, Object propertyValue, Tag customTag) 
+    {
+        if (propertyValue == null) 
+        {
+            return null;
+        } 
+        else 
+        {
+            return super.representJavaBeanProperty(javaBean, property, propertyValue, customTag);
+        }
+    }
+}
