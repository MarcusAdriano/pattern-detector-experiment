diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java
index bc467cac..65ff7836 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java
@@ -219,18 +219,6 @@ private void initPreparedStatement(ColumnMetaData parameterMetaData,
         }
     }
 
-    protected void finalize() throws java.lang.Throwable {
-        if (agent_.loggingEnabled()) {
-            agent_.logWriter_.traceEntry(this, "finalize");
-        }
-        if (openOnClient_) {
-            synchronized (connection_) {
-                closeX();
-            }
-        }
-        super.finalize();
-    }
-
     // called immediately after the constructor by Connection prepare*() methods
     void prepare() throws SqlException {
         try {
@@ -2003,28 +1991,12 @@ else if (registerOutScale < parameterMetaData_.sqlScale_[parameterIndex - 1]) {
         }
     }
 
-    public void close() throws SQLException {
-        try
-        {
-            synchronized (connection_) {
-                if (agent_.loggingEnabled()) {
-                    agent_.logWriter_.traceEntry(this, "close");
-                }
-                closeX();
-            }
-        }
-        catch ( SqlException se )
-        {
-            throw se.getSQLException();
-        }
-    }
+    /* (non-Javadoc)
+     * @see org.apache.derby.client.am.Statement#markClosed(boolean)
+     */
+    protected void markClosed(boolean removeListener){
+    	super.markClosed(removeListener);
 
-    // An untraced version of close()
-    public void closeX() throws SqlException {
-        if (!openOnClient_) {
-            return;
-        }
-        super.closeX();
         if (parameterMetaData_ != null) {
             parameterMetaData_.markClosed();
             parameterMetaData_ = null;
@@ -2040,6 +2012,7 @@ public void closeX() throws SqlException {
         }
         parameters_ = null;
 
+        if(removeListener)
         connection_.CommitAndRollbackListeners_.remove(this);
     }
 
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java
index ad7601be..5188f676 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/Statement.java
@@ -358,14 +358,19 @@ private void initStatement(int type, int concurrency, int holdability,
         generatedKeysColumnNames_ = columnNames;
     }
 
+    /* (non-Javadoc)
+     * @see java.lang.Object#finalize()
+     * 
+     * This method cleans up client-side resources by calling markClosed().
+     * It is different from close() method, which also does clean up on server.
+     * Changes done as part of DERBY-210. 
+     */
     protected void finalize() throws java.lang.Throwable {
         if (agent_.loggingEnabled()) {
             agent_.logWriter_.traceEntry(this, "finalize");
         }
         if (openOnClient_) {
-            synchronized (connection_) {
-                closeX();
-            }
+            markClosed();
         }
         super.finalize();
     }
@@ -475,7 +480,25 @@ public void close() throws SQLException {
         }
     }
 
-    // An untraced version of close()
+    /**
+     * An untraced version of <code>close</code>. This method cleans up 
+     * client-side resources and also sends commands to network server to 
+     * perform clean up. This should not be called in the finalizer. 
+     * Difference between <code>finalize</code> and <code>close</code> is
+     * that close method does these things additionally (Changes done as 
+     * part of DERBY-210):
+     * 1) Sends commands to the server to close the result sets.
+     * 2) Sends commands to the server to close the result sets of the 
+     * generated keys query.
+     * 3) Sends a commit if autocommit is on and it is appropriate.
+     * 4) Explicitly removes the statement from connection_.openStatements_ 
+     * and CommitAndRollbackListeners_ by passing true to markClosed.  
+     * 
+     * We may need to do 1) in finalizer too. This is being tracked in 
+     * DERBY-1021
+     * 
+     * @throws SqlException
+     */
     public void closeX() throws SqlException {
         if (!openOnClient_) {
             return;
@@ -491,13 +514,7 @@ public void closeX() throws SqlException {
                 flowCloseOutsideUOW();
             }
         } finally {
-            markClosed();
-            connection_.openStatements_.remove(this);
-        }
-        // push the mark close of rsmd into Statement.markClosed() method
-        if (resultSetMetaData_ != null) {
-            resultSetMetaData_.markClosed();
-            resultSetMetaData_ = null;
+            markClosed(true);
         }
     }
 
@@ -1633,7 +1650,39 @@ void markClosedOnServer() {
         }
     }
 
+    /**
+     * This method cleans up client-side resources held by this Statement. 
+     * The Statement will not be removed from the open statements list and 
+     * PreparedStatement will also not be removed from the commit and rollback 
+     * listeners list in <code>org.apache.derby.client.am.Connection</code>.
+     * 
+     * This method is called from:
+     * 1. finalize() - For the finaizer to be called, the Statement 
+     * should not have any references and so it should have been already 
+     * removed from the lists.  
+     * 
+     * 2. <code>org.apache.derby.client.am.Connection#markStatementsClosed</code> 
+     * This method explicitly removes the Statement from open statements list.
+     *  
+     * 3. To close positioned update statements - These statements are not
+     * added to the list of open statements.
+     */
     void markClosed() {
+    	markClosed(false);
+    }
+    
+    /**
+     * This method cleans up client-side resources held by this Statement. 
+     * If removeListener is true, the Statement is removed from open statements
+     * list and PreparedStatement is also removed from commit and rollback 
+     * listeners list. This is called from the close methods.
+     * 
+     * @param removeListener if true the Statement will be removed
+     * from the open statements list and PreparedStatement will also be removed
+     * from commit and rollback listeners list in 
+     * <code>org.apache.derby.client.am.Connection</code>.
+     */
+    void markClosed(boolean removeListener) {
         openOnClient_ = false;
         markResultSetsClosed();
         // in case a cursorName was set on the Statement but the Statement was
@@ -1643,6 +1692,15 @@ void markClosed() {
         removeClientCursorNameFromCache();
         markPreparedStatementForAutoGeneratedKeysClosed();
         markClosedOnServer();
+
+        // mark close ResultSetMetaData
+        if (resultSetMetaData_ != null) {
+            resultSetMetaData_.markClosed();
+            resultSetMetaData_ = null;
+        }
+        
+        if(removeListener)
+        	connection_.openStatements_.remove(this);
     }
 
     void markPreparedStatementForAutoGeneratedKeysClosed() {
