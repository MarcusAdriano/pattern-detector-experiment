diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/PeerSync.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/PeerSync.java
index bd3fd1e5..5f7e9794 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/PeerSync.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/PeerSync.java
@@ -51,6 +51,7 @@
 import org.apache.solr.update.processor.DistributedUpdateProcessorFactory;
 import org.apache.solr.update.processor.RunUpdateProcessorFactory;
 import org.apache.solr.update.processor.UpdateRequestProcessor;
+import org.apache.solr.update.processor.UpdateRequestProcessorChain;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -447,13 +448,8 @@ private boolean handleUpdates(ShardResponse srsp) {
     SolrQueryRequest req = new LocalSolrQueryRequest(uhandler.core, params);
     SolrQueryResponse rsp = new SolrQueryResponse();
 
-    // TODO: use the standard update processor chain now that it has support to skip processors before the DistributedUpdateProcessor?
-    RunUpdateProcessorFactory runFac = new RunUpdateProcessorFactory();
-    DistributedUpdateProcessorFactory magicFac = new DistributedUpdateProcessorFactory();
-    runFac.init(new NamedList());
-    magicFac.init(new NamedList());
-
-    UpdateRequestProcessor proc = magicFac.getInstance(req, rsp, runFac.getInstance(req, rsp, null));
+    UpdateRequestProcessorChain processorChain = req.getCore().getUpdateProcessingChain(null);
+    UpdateRequestProcessor proc = processorChain.createProcessor(req, rsp);
 
     Collections.sort(updates, updateRecordComparator);
 
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/UpdateLog.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/UpdateLog.java
index d3085ea8..034959f4 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/UpdateLog.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/update/UpdateLog.java
@@ -26,6 +26,7 @@
 import org.apache.solr.common.SolrInputDocument;
 import org.apache.solr.common.params.ModifiableSolrParams;
 import org.apache.solr.common.params.SolrParams;
+import org.apache.solr.common.params.UpdateParams;
 import org.apache.solr.common.util.ExecutorUtil;
 import org.apache.solr.common.util.NamedList;
 import org.apache.solr.core.PluginInfo;
@@ -37,8 +38,10 @@
 import org.apache.solr.search.SolrIndexSearcher;
 import org.apache.solr.update.processor.DistributedUpdateProcessor;
 import org.apache.solr.update.processor.DistributedUpdateProcessorFactory;
+import org.apache.solr.update.processor.DistributingUpdateProcessorFactory;
 import org.apache.solr.update.processor.RunUpdateProcessorFactory;
 import org.apache.solr.update.processor.UpdateRequestProcessor;
+import org.apache.solr.update.processor.UpdateRequestProcessorChain;
 import org.apache.solr.util.DefaultSolrThreadFactory;
 import org.apache.solr.util.RefCounted;
 import org.apache.solr.util.plugin.PluginInfoInitialized;
@@ -1198,13 +1201,8 @@ public void doReplay(TransactionLog translog) {
         // NOTE: we don't currently handle a core reload during recovery.  This would cause the core
         // to change underneath us.
 
-        // TODO: use the standard request factory?  We won't get any custom configuration instantiating this way.
-        RunUpdateProcessorFactory runFac = new RunUpdateProcessorFactory();
-        DistributedUpdateProcessorFactory magicFac = new DistributedUpdateProcessorFactory();
-        runFac.init(new NamedList());
-        magicFac.init(new NamedList());
-
-        UpdateRequestProcessor proc = magicFac.getInstance(req, rsp, runFac.getInstance(req, rsp, null));
+        UpdateRequestProcessorChain processorChain = req.getCore().getUpdateProcessingChain(null);
+        UpdateRequestProcessor proc = processorChain.createProcessor(req, rsp);
 
         long commitVersion = 0;
         int operationAndFlags = 0;
