diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/SectionManager.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/SectionManager.java
index bbe95b67..887e88ca 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/SectionManager.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/SectionManager.java
@@ -21,6 +21,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.client.am;
 
+import java.lang.ref.WeakReference;
+
 import org.apache.derby.shared.common.reference.JDBC30Translation;
 
 import org.apache.derby.shared.common.reference.SQLState;
@@ -184,11 +186,12 @@ void mapCursorNameToQuerySection(String cursorName, Section section) {
     }
 
     void mapCursorNameToResultSet(String cursorName, ResultSet resultSet) {
-        positionedUpdateCursorNameToResultSet_.put(cursorName, resultSet);
+        // DERBY-3316. Needs WeakReference so that ResultSet can be garbage collected
+        positionedUpdateCursorNameToResultSet_.put(cursorName, new WeakReference(resultSet));
     }
 
     ResultSet getPositionedUpdateResultSet(String cursorName) throws SqlException {
-        ResultSet rs = (ResultSet) positionedUpdateCursorNameToResultSet_.get(cursorName);
+        ResultSet rs = (ResultSet) ((WeakReference) (positionedUpdateCursorNameToResultSet_.get(cursorName))).get();
         if (rs == null) {
             throw new SqlException(agent_.logWriter_, 
                 new ClientMessageId(SQLState.CLIENT_RESULT_SET_NOT_OPEN));
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/derbyStress.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/derbyStress.java
index 77f2421d..e4474904 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/derbyStress.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/derbyStress.java
@@ -54,7 +54,7 @@ public static void main(String[] args) {
 			}
 
 			reExecuteStatementTest();
-
+			testDerby3316();
 			System.out.println("Test derbyStress finished.");
 		} catch (SQLException se) {
 			TestUtil.dumpSQLExceptions(se);
@@ -133,4 +133,37 @@ private static void reExecuteStatementTest() throws Exception {
 		conn.close();
 		System.out.println("PASSED");
 	}
+        
+    /**
+     * Test fix for leak if ResultSets are not closed.
+     * @throws Exception
+     */
+    public static void testDerby3316() throws Exception {
+          System.out.println("DERBY-3316: Multiple statement executions ");
+          Connection conn = ij.startJBMS();
+                
+          Statement s = conn.createStatement();
+          s.executeUpdate("CREATE TABLE TAB (col1 varchar(32672))");
+          PreparedStatement ps = conn.prepareStatement("INSERT INTO TAB VALUES(?)");
+          ps.setString(1,"hello");
+          ps.executeUpdate();
+          ps.setString(1,"hello");
+          ps.executeUpdate();
+          ps.close();
+          for (int i = 0; i < 2000; i++)
+          {
+                  s = conn.createStatement();
+                  ResultSet rs = s.executeQuery("SELECT * from tab");
+                  // drain the resultset
+                  while (rs.next());
+                  // With DERBY-3316, If I don't explicitly close the resultset or 
+                  // statement, we get a leak.
+                  //rs.close();
+                  //s.close();
+          }    
+          s = conn.createStatement();
+          s.executeUpdate("DROP TABLE TAB");
+          s.close();
+       }
+      
 }
