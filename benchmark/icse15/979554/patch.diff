diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/AbstractDiscreteDistribution.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/AbstractDiscreteDistribution.java
index e25ed367..870a0e18 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/AbstractDiscreteDistribution.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/AbstractDiscreteDistribution.java
@@ -12,9 +12,6 @@
  * Abstract base class for all discrete distributions.
  *
  */
-
-/** @deprecated until unit tests are in place.  Until this time, this class/interface is unsupported. */
-@Deprecated
 public abstract class AbstractDiscreteDistribution extends AbstractDistribution {
 
   /** Makes this class non instantiable, but still let's others inherit from it. */
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java
index fef49983..cea44c28 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Gamma.java
@@ -33,19 +33,19 @@
   private double alpha;
 
   // rate
-  private double beta;
+  private double rate;
 
   /**
    * Constructs a Gamma distribution with a given shape (alpha) and rate (beta).
    *
    * @param alpha The shape parameter.
-   * @param beta The rate parameter.
+   * @param rate The rate parameter.
    * @param randomGenerator The random number generator that generates bits for us.
    * @throws IllegalArgumentException if <tt>alpha &lt;= 0.0 || alpha &lt;= 0.0</tt>.
    */
-  public Gamma(double alpha, double beta, RandomEngine randomGenerator) {
+  public Gamma(double alpha, double rate, RandomEngine randomGenerator) {
     this.alpha = alpha;
-    this.beta = beta;
+    this.rate = rate;
     setRandomGenerator(randomGenerator);
   }
 
@@ -54,13 +54,13 @@ public Gamma(double alpha, double beta, RandomEngine randomGenerator) {
    * @param x The end-point where the cumulation should end.
    */
   public double cdf(double x) {
-    return Probability.gamma(alpha, beta, x);
+    return Probability.gamma(alpha, rate, x);
   }
 
   /** Returns a random number from the distribution. */
   @Override
   public double nextDouble() {
-    return nextDouble(alpha, beta);
+    return nextDouble(alpha, rate);
   }
 
   /** Returns a random number from the distribution; bypasses the internal state.
@@ -84,15 +84,15 @@ public double nextDouble() {
    *                unsigned long integer *seed                     *
    *              - NORMAL(seed) ... Normal generator N(0,1).       *
    *                                                                *
-   * @param beta  Scale parameter.
    * @param alpha   Shape parameter.
+   * @param rate    Rate parameter (=1/scale).
    * @return A gamma distributed sample.
    */
-  public double nextDouble(double alpha, double beta) {
+  public double nextDouble(double alpha, double rate) {
     if (alpha <= 0.0) {
       throw new IllegalArgumentException();
     }
-    if (beta <= 0.0) {
+    if (rate <= 0.0) {
       throw new IllegalArgumentException();
     }
 
@@ -105,12 +105,12 @@ public double nextDouble(double alpha, double beta) {
         if (p <= 1.0) {                       // Step 2. Case gds <= 1
           gds = Math.exp(Math.log(p) / alpha);
           if (Math.log(randomGenerator.raw()) <= -gds) {
-            return (gds / beta);
+            return (gds / rate);
           }
         } else {                                // Step 3. Case gds > 1
           gds = -Math.log((b - p) / alpha);
           if (Math.log(randomGenerator.raw()) <= ((alpha - 1.0) * Math.log(gds))) {
-            return (gds / beta);
+            return (gds / rate);
           }
         }
       }
@@ -137,12 +137,12 @@ public double nextDouble(double alpha, double beta) {
       double x = s + 0.5 * t;
       gds = x * x;
       if (t >= 0.0) {
-        return (gds / beta);
+        return (gds / rate);
       }         // Immediate acceptance
 
       double u = randomGenerator.raw();
       if (d * u <= t * t * t) {
-        return (gds / beta);
+        return (gds / rate);
       } // Squeeze acceptance
 
       double q0 = 0.0;
@@ -199,7 +199,7 @@ public double nextDouble(double alpha, double beta) {
               v + a5) * v + a4) * v + a3) * v + a2) * v + a1) * v;
         }                  // Step 7. Quotient acceptance
         if (Math.log(1.0 - u) <= q) {
-          return (gds / beta);
+          return (gds / rate);
         }
       }
 
@@ -239,7 +239,7 @@ public double nextDouble(double alpha, double beta) {
         }                            // Step 12. Hat acceptance
         if (c * u * sign_u <= w * Math.exp(e - 0.5 * t * t)) {
           x = s + 0.5 * t;
-          return (x * x / beta);
+          return (x * x / rate);
         }
       }
     }
@@ -256,7 +256,7 @@ public double pdf(double x) {
     }
     if (x == 0) {
       if (alpha == 1.0) {
-        return beta;
+        return rate;
       } else if (alpha < 1) {
         return Double.POSITIVE_INFINITY;
       } else {
@@ -264,12 +264,12 @@ public double pdf(double x) {
       }
     }
     if (alpha == 1.0) {
-      return beta * Math.exp(-x * beta);
+      return rate * Math.exp(-x * rate);
     }
-    return beta * Math.exp((alpha - 1.0) * Math.log(x * beta) - x * beta - Fun.logGamma(alpha));
+    return rate * Math.exp((alpha - 1.0) * Math.log(x * rate) - x * rate - Fun.logGamma(alpha));
   }
 
   public String toString() {
-    return this.getClass().getName() + '(' + beta + ',' + alpha + ')';
+    return this.getClass().getName() + '(' + rate + ',' + alpha + ')';
   }
 }
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java
index 936b6e90..2a9d75bd 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/NegativeBinomial.java
@@ -25,39 +25,48 @@
 */
 package org.apache.mahout.math.jet.random;
 
+import org.apache.mahout.math.jet.math.Arithmetic;
 import org.apache.mahout.math.jet.random.engine.RandomEngine;
 import org.apache.mahout.math.jet.stat.Probability;
 
-/** @deprecated until unit tests are in place.  Until this time, this class/interface is unsupported. */
-@Deprecated
+/** Mostly deprecated until unit tests are in place.  Until this time, this class/interface is unsupported. */
 public class NegativeBinomial extends AbstractDiscreteDistribution {
 
-  private int n;
+  private int r;
   private double p;
 
   private Gamma gamma;
   private Poisson poisson;
 
-  // The uniform random number generated shared by all <b>static</b> methods.
-  private static final NegativeBinomial shared = new NegativeBinomial(1, 0.5, makeDefaultGenerator());
-
   /**
-   * Constructs a Negative Binomial distribution. Example: n=1, p=0.5.
+   * Constructs a Negative Binomial distribution which describes the probability of getting
+   * a particular number of negative trials (k) before getting a fixed number of positive
+   * trials (r) where each positive trial has probability (p) of being successful.
    *
-   * @param n               the number of trials.
+   * @param r               the required number of positive trials.
    * @param p               the probability of success.
    * @param randomGenerator a uniform random number generator.
    */
-  public NegativeBinomial(int n, double p, RandomEngine randomGenerator) {
+  public NegativeBinomial(int r, double p, RandomEngine randomGenerator) {
     setRandomGenerator(randomGenerator);
-    setNandP(n, p);
-    this.gamma = new Gamma(n, 1, randomGenerator);
+    this.r = r;
+    this.p = p;
+    this.gamma = new Gamma(r, 1, randomGenerator);
     this.poisson = new Poisson(0.0, randomGenerator);
   }
 
-  /** Returns the cumulative distribution function. */
+  /**
+   * Returns the cumulative distribution function.
+   */
   public double cdf(int k) {
-    return Probability.negativeBinomial(k, n, p);
+    return Probability.negativeBinomial(k, r, p);
+  }
+
+  /**
+   * Returns the probability distribution function.
+   */
+  public double pdf(int k) {
+    return Arithmetic.binomial(k + r - 1, r - 1) * Math.pow(p, r) * Math.pow(1.0 - p, k);
   }
 
   /**
@@ -66,6 +75,7 @@ public double cdf(int k) {
    *
    * @return a copy of the receiver.
    */
+  @Deprecated
   @Override
   public Object clone() {
     NegativeBinomial copy = (NegativeBinomial) super.clone();
@@ -80,78 +90,50 @@ public Object clone() {
     return copy;
   }
 
-  /** Returns a random number from the distribution. */
+  /**
+   * Returns a random number from the distribution.
+   */
   @Override
   public int nextInt() {
-    return nextInt(n, p);
+    return nextInt(r, p);
   }
 
-  /** Returns a random number from the distribution; bypasses the internal state. */
-  public int nextInt(int n, double p) {
-/******************************************************************
- *                                                                *
- *        Negative Binomial Distribution - Compound method        *
- *                                                                *
- ******************************************************************
- *                                                                *
- * FUNCTION:    - nbp  samples a random number from the Negative  *
- *                Binomial distribution with parameters r (no. of *
- *                failures given) and p (probability of success)  *
- *                valid for  r > 0, 0 < p < 1.                    *
- *                If G from Gamma(r) then K  from Poiss(pG/(1-p)) *
- *                is NB(r,p)--distributed.                        *
- * REFERENCE:   - J.H. Ahrens, U. Dieter (1974): Computer methods *
- *                for sampling from gamma, beta, Poisson and      *
- *                binomial distributions, Computing 12, 223--246. *
- * SUBPROGRAMS: - drand(seed) ... (0,1)-Uniform generator with    *
- *                unsigned long integer *seed                     *
- *              - Gamma(seed,a) ... Gamma generator for a > 0     *
- *                unsigned long *seed, double a                   *
- *              - Poisson(seed,a) ...Poisson generator for a > 0  *
- *                unsigned long *seed, double a.                  *
- *                                                                *
- ******************************************************************/
-
-    double x = p / (1.0 - p);
-    //double p1 = p;
-    double y = x * this.gamma.nextDouble(n, 1);
-    return this.poisson.nextInt(y);
-  }
-
-  /** Returns the probability distribution function. */
-  public double pdf(int k) {
-    if (k > n) {
-      throw new IllegalArgumentException();
-    }
-    return org.apache.mahout.math.jet.math.Arithmetic.binomial(n, k) * Math.pow(p, k) * Math.pow(1.0 - p, n - k);
+  /**
+   * Returns a sample from this distribution.  The value returned will
+   * be the number of negative samples required before achieving r
+   * positive samples.  Each successive sample is taken independently
+   * from a Bernouli process with probability p of success.
+   *
+   * The algorithm used is taken from J.H. Ahrens, U. Dieter (1974):
+   * Computer methods for sampling from gamma, beta, Poisson and
+   * binomial distributions, Computing 12, 223--246.
+   *
+   * This algorithm is essentially the same as described at
+   * http://en.wikipedia.org/wiki/Negative_binomial_distribution#Gamma.E2.80.93Poisson_mixture
+   * except that the notion of positive and negative outcomes is uniformly
+   * inverted.  Because the inversion is complete and consistent, this
+   * definition is effectively identical to that defined on wikipedia.
+   */
+  public int nextInt(int r, double p) {
+    return this.poisson.nextInt(gamma.nextDouble(r, p / (1.0 - p)));
   }
 
   /**
    * Sets the parameters number of trials and the probability of success.
    *
-   * @param n the number of trials
+   * @param r the number of trials
    * @param p the probability of success.
    */
-  public void setNandP(int n, double p) {
-    this.n = n;
+  public void setRandP(int r, double p) {
+    this.r = r;
     this.p = p;
   }
 
   /**
-   * Returns a random number from the distribution with the given parameters n and p.
-   *
-   * @param n the number of trials
-   * @param p the probability of success.
+   * Returns a String representation of the receiver.
    */
-  public static int staticNextInt(int n, double p) {
-    synchronized (shared) {
-      return shared.nextInt(n, p);
-    }
-  }
-
-  /** Returns a String representation of the receiver. */
   public String toString() {
-    return this.getClass().getName() + '(' + n + ',' + p + ')';
+    return this.getClass().getName() + '(' + r + ',' + p + ')';
   }
 
 }
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java
index ed39401b..399b7358 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/random/Poisson.java
@@ -12,8 +12,7 @@
 import org.apache.mahout.math.jet.random.engine.RandomEngine;
 import org.apache.mahout.math.jet.stat.Probability;
 
-/** @deprecated until unit tests are in place.  Until this time, this class/interface is unsupported. */
-@Deprecated
+/** Partially deprecated until unit tests are in place.  Until this time, this class/interface is unsupported. */
 public class Poisson extends AbstractDiscreteDistribution {
 
   private double mean;
@@ -62,16 +61,14 @@
   private static final double SWITCH_MEAN = 10.0; // switch from method A to method B
 
 
-  // The uniform random number generated shared by all <b>static</b> methods.
-  private static final Poisson shared = new Poisson(0.0, makeDefaultGenerator());
-
   /** Constructs a poisson distribution. Example: mean=1.0. */
   public Poisson(double mean, RandomEngine randomGenerator) {
     setRandomGenerator(randomGenerator);
-    setMean(mean);
+    this.mean = mean;
   }
 
   /** Returns the cumulative distribution function. */
+  @Deprecated
   public double cdf(int k) {
     return Probability.poisson(k, this.mean);
   }
@@ -83,6 +80,7 @@ public double cdf(int k) {
    * @return a copy of the receiver.
    */
   @Override
+  @Deprecated
   public Object clone() {
     Poisson copy = (Poisson) super.clone();
     if (this.pp != null) {
@@ -120,7 +118,6 @@ public int nextInt(double theMean) {
  *                                                                *
  *****************************************************************/
     RandomEngine gen = this.randomGenerator;
-    double my = theMean;
 
     //double t, g, my_k;
 
@@ -131,16 +128,16 @@ public int nextInt(double theMean) {
     //static long ll,m;
 
     int m;
-    if (my < SWITCH_MEAN) { // CASE B: Inversion- start new table and calculate p0
-      if (my != my_old) {
-        my_old = my;
+    if (theMean < SWITCH_MEAN) { // CASE B: Inversion- start new table and calculate p0
+      if (theMean != my_old) {
+        my_old = theMean;
         llll = 0;
-        p = Math.exp(-my);
+        p = Math.exp(-theMean);
         q = p;
         p0 = p;
         //for (k=pp.length; --k >=0; ) pp[k] = 0;
       }
-      m = (my > 1.0) ? (int) my : 1;
+      m = (theMean > 1.0) ? (int) theMean : 1;
       while (true) {
         double u = gen.raw();
         int k = 0;
@@ -159,7 +156,7 @@ public int nextInt(double theMean) {
           }
         }
         for (k = llll + 1; k <= 35; k++) { // Step C. Creation of new prob.
-          p *= my / (double) k;
+          p *= theMean / (double) k;
           q += p;
           pp[k] = q;
           if (u <= q) {
@@ -170,23 +167,23 @@ public int nextInt(double theMean) {
         llll = 35;
       }
     }     // end my < SWITCH_MEAN
-    else if (my < MEAN_MAX) { // CASE A: acceptance complement
+    else if (theMean < MEAN_MAX) { // CASE A: acceptance complement
       //static double        my_last = -1.0;
       //static long int      m,  k2, k4, k1, k5;
       //static double        dl, dr, r1, r2, r4, r5, ll, lr, l_my, c_pm,
       //             f1, f2, f4, f5, p1, p2, p3, p4, p5, p6;
 
-      m = (int) my;
-      if (my != my_last) { //  set-up
-        my_last = my;
+      m = (int) theMean;
+      if (theMean != my_last) { //  set-up
+        my_last = theMean;
 
         // approximate deviation of reflection points k2, k4 from my - 1/2
-        double Ds = Math.sqrt(my + 0.25);
+        double Ds = Math.sqrt(theMean + 0.25);
 
         // mode m, reflection points k2 and k4, and points k1 and k5, which
         // delimit the centre region of h(x)
-        k2 = (int) Math.ceil(my - 0.5 - Ds);
-        k4 = (int) (my - 0.5 + Ds);
+        k2 = (int) Math.ceil(theMean - 0.5 - Ds);
+        k4 = (int) (theMean - 0.5 + Ds);
         k1 = k2 + k2 - m + 1;
         k5 = k4 + k4 - m;
 
@@ -195,17 +192,17 @@ else if (my < MEAN_MAX) { // CASE A: acceptance complement
         dr = (double) (k5 - k4);
 
         // recurrence constants r(k) = p(k)/p(k-1) at k = k1, k2, k4+1, k5+1
-        r1 = my / (double) k1;
-        r2 = my / (double) k2;
-        r4 = my / (double) (k4 + 1);
-        r5 = my / (double) (k5 + 1);
+        r1 = theMean / (double) k1;
+        r2 = theMean / (double) k2;
+        r4 = theMean / (double) (k4 + 1);
+        r5 = theMean / (double) (k5 + 1);
 
         // reciprocal values of the scale parameters of expon. tail envelopes
         ll = Math.log(r1);                     // expon. tail left
         lr = -Math.log(r5);                     // expon. tail right
 
         // Poisson constants, necessary for computing function values f(k)
-        l_my = Math.log(my);
+        l_my = Math.log(theMean);
         c_pm = m * l_my - Arithmetic.logFactorial(m);
 
         // function values f(k) = p(k)/p(m) at k = k2, k4, k1, k5
@@ -315,11 +312,12 @@ else if (my < MEAN_MAX) { // CASE A: acceptance complement
         }
       }
     } else { // mean is too large
-      return (int) my;
+      return (int) theMean;
     }
   }
 
   /** Returns the probability distribution function. */
+  @Deprecated
   public double pdf(int k) {
     return Math.exp(k * Math.log(this.mean) - Arithmetic.logFactorial(k) - this.mean);
 
@@ -328,19 +326,13 @@ public double pdf(int k) {
   }
 
   /** Sets the mean. */
+  @Deprecated
   public void setMean(double mean) {
     this.mean = mean;
   }
 
-  /** Returns a random number from the distribution with the given mean. */
-  public static int staticNextInt(double mean) {
-    synchronized (shared) {
-      shared.setMean(mean);
-      return shared.nextInt();
-    }
-  }
-
   /** Returns a String representation of the receiver. */
+  @Deprecated
   public String toString() {
     return this.getClass().getName() + '(' + mean + ')';
   }
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java
index 288c5635..1218f1ac 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/stat/Gamma.java
@@ -47,11 +47,10 @@ protected Gamma() {
    * @param beta
    * @return The beta function for given values of alpha and beta.
    */
-  @Deprecated
   public static double beta(double alpha, double beta) {
-
-    double y = alpha + beta;
-    y = gamma(y);
+    double y = 0;
+    if (alpha < 40 && beta < 40) {
+      y = gamma(alpha + beta);
     if (y == 0.0) {
       return 1.0;
     }
@@ -63,12 +62,14 @@ public static double beta(double alpha, double beta) {
       y = gamma(beta) / y;
       y *= gamma(alpha);
     }
+    } else {
+      y = Math.exp(logGamma(alpha) + logGamma(beta) - logGamma(alpha + beta));
+    }
 
     return (y);
   }
 
   /** Returns the Gamma function of the argument. */
-  @Deprecated
   public static double gamma(double x) throws ArithmeticException {
 
     double[] P = {
@@ -160,33 +161,35 @@ public static double gamma(double x) throws ArithmeticException {
   }
 
   /**
-   * Returns the Incomplete Beta Function evaluated from zero to <tt>xx</tt>; formerly named <tt>ibeta</tt>.
+   * Returns the regularized Incomplete Beta Function evaluated from zero to <tt>xx</tt>; formerly named <tt>ibeta</tt>.
    *
-   * @param aa the alpha parameter of the beta distribution.
-   * @param bb the beta parameter of the beta distribution.
+   * See http://en.wikipedia.org/wiki/Incomplete_beta_function#Incomplete_beta_function
+   *
+   * @param alpha the alpha parameter of the beta distribution.
+   * @param beta the beta parameter of the beta distribution.
    * @param xx the integration end point.
    */
-  @Deprecated
-  public static double incompleteBeta(double aa, double bb, double xx) throws ArithmeticException {
+  public static double incompleteBeta(double alpha, double beta, double xx) throws ArithmeticException {
 
-    if (aa <= 0.0 || bb <= 0.0) {
-      throw new
-          ArithmeticException("ibeta: Domain error!");
+    if (alpha <= 0.0) {
+      throw new ArithmeticException("incompleteBeta: Domain error! alpha must be > 0, but was " + alpha);
     }
 
-    if ((xx <= 0.0) || (xx >= 1.0)) {
-      if (xx == 0.0) {
+    if (beta <= 0.0) {
+      throw new ArithmeticException("incompleteBeta: Domain error! beta must be > 0, but was " + beta);
+    }
+
+    if (xx <= 0.0) {
         return 0.0;
       }
-      if (xx == 1.0) {
+
+    if (xx >= 1.0) {
         return 1.0;
       }
-      throw new ArithmeticException("ibeta: Domain error!");
-    }
 
     double t;
-    if ((bb * xx) <= 1.0 && xx <= 0.95) {
-      t = powerSeries(aa, bb, xx);
+    if ((beta * xx) <= 1.0 && xx <= 0.95) {
+      t = powerSeries(alpha, beta, xx);
       return t;
     }
 
@@ -198,15 +201,15 @@ public static double incompleteBeta(double aa, double bb, double xx) throws Arit
     double b;
     double a;
     boolean flag = false;
-    if (xx > (aa / (aa + bb))) {
+    if (xx > (alpha / (alpha + beta))) {
       flag = true;
-      a = bb;
-      b = aa;
+      a = beta;
+      b = alpha;
       xc = xx;
       x = w;
     } else {
-      a = aa;
-      b = bb;
+      a = alpha;
+      b = beta;
       xc = w;
       x = xx;
     }
@@ -270,7 +273,6 @@ public static double incompleteBeta(double aa, double bb, double xx) throws Arit
   }
 
   /** Continued fraction expansion #1 for incomplete beta integral; formerly named <tt>incbcf</tt>. */
-  @Deprecated
   static double incompleteBetaFraction1(double a, double b, double x) throws ArithmeticException {
 
     double k1 = a;
@@ -349,7 +351,6 @@ static double incompleteBetaFraction1(double a, double b, double x) throws Arith
   }
 
   /** Continued fraction expansion #2 for incomplete beta integral; formerly named <tt>incbd</tt>. */
-  @Deprecated
   static double incompleteBetaFraction2(double a, double b, double x) throws ArithmeticException {
 
     double k1 = a;
@@ -633,8 +634,7 @@ public static double logGamma(double x) {
    * Power series for incomplete beta integral; formerly named <tt>pseries</tt>. Use when b*x is small and x not too
    * close to 1.
    */
-  @Deprecated
-  static double powerSeries(double a, double b, double x) throws ArithmeticException {
+  static private double powerSeries(double a, double b, double x) throws ArithmeticException {
 
     double ai = 1.0 / a;
     double u = (1.0 - b) * x;
@@ -673,7 +673,6 @@ static double powerSeries(double a, double b, double x) throws ArithmeticExcepti
    * Returns the Gamma function computed by Stirling's formula; formerly named <tt>stirf</tt>. The polynomial STIR is
    * valid for 33 <= x <= 172.
    */
-  @Deprecated
   static double stirlingFormula(double x) throws ArithmeticException {
     double[] STIR = {
         7.87311395793093628397E-4,
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java
index 83969b15..565e5841 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/jet/stat/Probability.java
@@ -503,7 +503,6 @@ public static double gammaComplemented(double alpha, double beta, double x) {
    * @param n the number of trials.
    * @param p the probability of success (must be in <tt>(0.0,1.0)</tt>).
    */
-  @Deprecated
   public static double negativeBinomial(int k, int n, double p) {
     if ((p < 0.0) || (p > 1.0)) {
       throw new IllegalArgumentException();
@@ -669,7 +668,6 @@ public static double normalInverse(double y0) throws ArithmeticException {
    * @param k    number of terms.
    * @param mean the mean of the poisson distribution.
    */
-  @Deprecated
   public static double poisson(int k, double mean) throws ArithmeticException {
     if (mean < 0) {
       throw new IllegalArgumentException();
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/random/NegativeBinomialTest.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/random/NegativeBinomialTest.java
index e69de29b..4f1de155 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/random/NegativeBinomialTest.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/random/NegativeBinomialTest.java
@@ -0,0 +1,63 @@
+package org.apache.mahout.math.jet.random;
+
+import com.google.common.base.Charsets;
+import com.google.common.base.Splitter;
+import com.google.common.collect.Iterables;
+import com.google.common.io.CharStreams;
+import com.google.common.io.InputSupplier;
+import com.google.common.io.Resources;
+import org.apache.mahout.math.jet.random.engine.MersenneTwister;
+import org.junit.Test;
+
+import java.io.IOException;
+import java.io.InputStreamReader;
+
+import static org.junit.Assert.assertEquals;
+
+public class NegativeBinomialTest {
+  private Splitter onComma = Splitter.on(",").trimResults();
+  private static final int N = 10000;
+
+  @Test
+  public void testDistributionFunctions() throws IOException {
+    InputSupplier<InputStreamReader> input = Resources.newReaderSupplier(Resources.getResource("negative-binomial-test-data.csv"), Charsets.UTF_8);
+    boolean header = true;
+    for (String line : CharStreams.readLines(input)) {
+      if (header) {
+        // skip
+        header = false;
+      } else {
+        Iterable<String> values = onComma.split(line);
+        int k = Integer.parseInt(Iterables.get(values, 0));
+        double p = Double.parseDouble(Iterables.get(values, 1));
+        int r = Integer.parseInt(Iterables.get(values, 2));
+        double density = Double.parseDouble(Iterables.get(values, 3));
+        double cume = Double.parseDouble(Iterables.get(values, 4));
+        NegativeBinomial nb = new NegativeBinomial(r, p, new MersenneTwister());
+        assertEquals("cumulative " + k + "," + p + "," + r, cume, nb.cdf(k), cume * 1e-05);
+        assertEquals("density " + k + "," + p + "," + r, density, nb.pdf(k), density * 1e-05);
+      }
+    }
+  }
+
+  @Test
+  public void sample() {
+    for (double p : new double[]{0.1, 0.2, 0.5, 0.9}) {
+      for (int r = 1; r < 5; r++) {
+        NegativeBinomial nb = new NegativeBinomial(r, p, new MersenneTwister(1));
+        int[] counts = new int[N];
+        for (int i = 0; i < N; i++) {
+          int k = nb.nextInt();
+          if (k < counts.length) {
+            counts[k]++;
+          }
+        }
+
+        // probably should do a chi^2 or LLR test here especially since we know the PDF
+        for (int k = 0; k < counts.length; k++) {
+          assertEquals(String.format("r=%d,p=%.3f,k=%d,count=%d,pdf=%.3f", r, p, k, counts[k], nb.pdf(k)), N * nb.pdf(k), counts[k], Math.max(3, 4 * Math.sqrt(N * nb.pdf(k) * (1 - nb.pdf(k)))));
+        }
+      }
+    }
+  }
+}
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/stat/GammaTest.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/stat/GammaTest.java
index e69de29b..df585a35 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/stat/GammaTest.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/jet/stat/GammaTest.java
@@ -0,0 +1,128 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.mahout.math.jet.stat;
+
+import com.google.common.base.Charsets;
+import com.google.common.base.Splitter;
+import com.google.common.collect.Iterables;
+import com.google.common.io.*;
+import org.junit.Test;
+
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.Random;
+
+import static org.junit.Assert.assertEquals;
+
+public class GammaTest {
+  @Test
+  public void testGamma() {
+    double[] x = new double[]{1, 2, 5, 10, 20, 50, 100};
+    double[] expected = new double[]{1.000000e+00, 1.000000e+00, 2.400000e+01, 3.628800e+05, 1.216451e+17, 6.082819e+62, 9.332622e+155};
+
+    for (int i = 0; i < x.length; i++) {
+      assertEquals(expected[i], Gamma.gamma(x[i]), expected[i] * 1e-5);
+      assertEquals(gammaInteger(x[i]), Gamma.gamma(x[i]), expected[i] * 1e-5);
+      assertEquals(gammaInteger(x[i]), Math.exp(Gamma.logGamma(x[i])), expected[i] * 1e-5);
+    }
+  }
+
+  @Test
+  public void testNegativeArgForGamma() {
+    double[] x = new double[]{-30.3, -20.7, -10.5, -1.1, 0.5, 0.99, -0.999};
+    double[] expected = new double[]{-5.243216e-33, -1.904051e-19, -2.640122e-07, 9.714806e+00, 1.772454e+00, 1.005872e+00, -1.000424e+03};
+
+    for (int i = 0; i < x.length; i++) {
+      assertEquals(expected[i], Gamma.gamma(x[i]), Math.abs(expected[i] * 1e-5));
+      assertEquals(Math.abs(expected[i]), Math.abs(Math.exp(Gamma.logGamma(x[i]))), Math.abs(expected[i] * 1e-5));
+    }
+  }
+
+  private double gammaInteger(double x) {
+    double r = 1;
+    for (int i = 2; i < x; i++) {
+      r *= i;
+    }
+    return r;
+  }
+
+  @Test
+  public void testBigX() {
+    assertEquals(factorial(4), 4 * 3 * 2, 0);
+    assertEquals(factorial(4), Gamma.gamma(5), 0);
+    assertEquals(factorial(14), Gamma.gamma(15), 0);
+    assertEquals(factorial(34), Gamma.gamma(35), 1e-15 * factorial(34));
+    assertEquals(factorial(44), Gamma.gamma(45), 1e-15 * factorial(44));
+
+    assertEquals(-6.884137e-40 + 3.508309e-47, Gamma.gamma(-35.1), 1e-52);
+    assertEquals(-3.915646e-41 - 3.526813e-48 - 1.172516e-55, Gamma.gamma(-35.9), 1e-52);
+    assertEquals(-2000000000.577215, Gamma.gamma(-0.5e-9), 1e-15 * 2000000000.577215);
+    assertEquals(1999999999.422784, Gamma.gamma(0.5e-9), 1e-15 * 1999999999.422784);
+    assertEquals(1.324296658017984e+252, Gamma.gamma(146.1), 1e-10 * 1.324296658017984e+252);
+
+    for (double x : new double[]{5, 15, 35, 45, -35.1, -35.9, -0.5e-9, 0.5e-9, 146.1}) {
+      double ref = Math.log(Math.abs(Gamma.gamma(x)));
+      double actual = Gamma.logGamma(x);
+      double diff = Math.abs(ref - actual) / ref;
+      assertEquals("gamma versus logGamma at " + x + " (diff = " + diff + ")", 0, (ref - actual) / ref, 1e-8);
+    }
+  }
+
+  private double factorial(int n) {
+    double r = 1;
+    for (int i = 2; i <= n; i++) {
+      r *= i;
+    }
+    return r;
+  }
+
+  @Test
+  public void beta() {
+    Random x = new Random(1);
+    for (int i = 0; i < 200; i++) {
+      double alpha = -50 * Math.log(1 - x.nextDouble());
+      double beta = -50 * Math.log(1 - x.nextDouble());
+      double ref = Math.exp(Gamma.logGamma(alpha) + Gamma.logGamma(beta) - Gamma.logGamma(alpha + beta));
+      double actual = Gamma.beta(alpha, beta);
+      double err = (ref - actual) / ref;
+      assertEquals("beta at (" + alpha + ", " + beta + ") relative error = " + err, 0, err, 1e-10);
+    }
+  }
+
+  @Test
+  public void incompleteBeta() throws IOException {
+    Splitter onComma = Splitter.on(",").trimResults();
+
+    InputSupplier<InputStreamReader> input = Resources.newReaderSupplier(Resources.getResource("beta-test-data.csv"), Charsets.UTF_8);
+    boolean header = true;
+    for (String line : CharStreams.readLines(input)) {
+      if (header) {
+        // skip
+        header = false;
+      } else {
+        Iterable<String> values = onComma.split(line);
+        double alpha = Double.parseDouble(Iterables.get(values, 0));
+        double beta = Double.parseDouble(Iterables.get(values, 1));
+        double x = Double.parseDouble(Iterables.get(values, 2));
+        double ref = Double.parseDouble(Iterables.get(values, 3));
+        double actual = Gamma.incompleteBeta(alpha, beta, x);
+        assertEquals(alpha + "," + beta + "," + x, ref, actual, ref * 1e-05);
+      }
+    }
+  }
+}
