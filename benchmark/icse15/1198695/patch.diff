diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java
index beef7427..ca6257e1 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/compile/NodeFactory.java
@@ -21,13 +21,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.iapi.sql.compile;
 
-import java.util.Properties;
-
 import org.apache.derby.iapi.services.context.ContextManager;
 
-import org.apache.derby.iapi.sql.dictionary.DataDictionary;
-import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
-
 import org.apache.derby.iapi.error.StandardException;
 
 /* Strictly speaking we shouldn't import classes under the impl hierarchy here
@@ -35,8 +30,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  * manish - Wed Mar 28 13:05:19 PST 2001
  */
 import	org.apache.derby.impl.sql.compile.QueryTreeNode;
-import org.apache.derby.impl.sql.compile.ResultColumnList;
-import org.apache.derby.impl.sql.compile.ResultSetNode;
 
 /**
 	This is an interface for NodeFactories.
@@ -573,53 +566,4 @@ public final QueryTreeNode getNode(int nodeType,
 
 		return  retval;
 	}
-
-	/**
-	 * Get one of the several types of create alias nodes. Carved out of parser
-	 * so this could be used by ALTER PUBLICATION.
-	 *
-	 * @param aliasName				The name of the alias
-	 * @param targetName			The full path/method name
-	 * @param aliasSpecificInfo	The full path of the target method name,
-	 *								if any
-	 * @param aliasType	The type of alias to create
-	 * @param delimitedIdentifier	Whether or not to treat the class name
-	 *								as a delimited identifier if trying to
-	 *								resolve it as a class alias.
-	 * @param cm			A ContextManager
-	 *
-	 * @return	A CreateAliasNode matching the given parameters
-	 *
-	 * @exception StandardException		Thrown on error
-	 */
-	public abstract QueryTreeNode
-	getCreateAliasNode(
-		Object aliasName,
-		Object targetName,
-		Object aliasSpecificInfo,
-		char aliasType,
-		Boolean delimitedIdentifier,
-		ContextManager cm)
-		throws StandardException;
-
-	
-	/**
-	 * Return a correctly configured node that represents
-	 * a scan from a VTI dervied from the TableDesciptor.
-	 * Used to convert from system diagnostic tables
-	 * to VTI scans.
-	 * @param td Table that is really a vti
-	 * @param correlationName Correlation name of table clause
-	 * @param resultColumns Columns extracted from table.
-	 * @param tableProperties Properties being passed onto the table scan
-	 * @param cm Current context manager
-	 */
-	public abstract ResultSetNode mapTableAsVTI(
-			TableDescriptor td,
-			String correlationName,
-			ResultColumnList resultColumns,
-			Properties tableProperties,		
-			ContextManager cm) throws StandardException;
-
 }
-
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
index 0ed4eaf6..fc303aff 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
@@ -21,6 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package	org.apache.derby.impl.sql.compile;
 
+import java.util.*;
 import org.apache.derby.catalog.IndexDescriptor;
 import org.apache.derby.iapi.util.StringUtil;
 
@@ -35,6 +36,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.services.classfile.VMOpcode;
 
 import org.apache.derby.iapi.services.compiler.MethodBuilder;
+import org.apache.derby.iapi.services.context.ContextManager;
 import org.apache.derby.iapi.services.property.PropertyUtil;
 import org.apache.derby.iapi.services.sanity.SanityManager;
 
@@ -78,12 +80,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.types.DataValueDescriptor;
 
 
-import java.util.Enumeration;
-import java.util.Properties;
-import java.util.Vector;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.Set;
 
 /**
  * A FromBaseTable represents a table in the FROM list of a DML statement,
@@ -2192,7 +2188,7 @@ public ResultSetNode bindNonVTITables(DataDictionary dataDictionary,
 		TableDescriptor tableDescriptor = bindTableDescriptor();
 
 		if (tableDescriptor.getTableType() == TableDescriptor.VTI_TYPE) {
-			ResultSetNode vtiNode = getNodeFactory().mapTableAsVTI(
+			ResultSetNode vtiNode = mapTableAsVTI(
 					tableDescriptor,
 					getCorrelationName(),
 					resultColumns,
@@ -2388,6 +2384,64 @@ public ResultSetNode bindNonVTITables(DataDictionary dataDictionary,
 		return this;
 	}
 
+	/** 
+     * Return a node that represents invocation of the virtual table for the
+     * given table descriptor. The mapping of the table descriptor to a specific
+     * VTI class name will occur as part of the "init" phase for the
+     * NewInvocationNode that we create here.
+     *
+     * Currently only handles no argument VTIs corresponding to a subset of the
+     * diagnostic tables. (e.g. lock_table). The node returned is a FROM_VTI
+     * node with a passed in NEW_INVOCATION_NODE representing the class, with no
+     * arguments. Other attributes of the original FROM_TABLE node (such as
+     * resultColumns) are passed into the FROM_VTI node.
+     */
+    private ResultSetNode mapTableAsVTI(
+            TableDescriptor td,
+            String correlationName,
+            ResultColumnList resultColumns,
+            Properties tableProperties,
+            ContextManager cm)
+        throws StandardException {
+
+
+        // The fact that we pass a non-null table descriptor to the following
+        // call is an indication that we are mapping to a no-argument VTI. Since
+        // we have the table descriptor we do not need to pass in a TableName.
+        // See NewInvocationNode for more.
+        QueryTreeNode newNode =
+                getNodeFactory().getNode(C_NodeTypes.NEW_INVOCATION_NODE,
+                null, // TableName
+                td, // TableDescriptor
+                Collections.EMPTY_LIST,
+                Boolean.FALSE,
+                cm);
+
+        QueryTreeNode vtiNode;
+
+        if (correlationName != null) {
+            vtiNode = getNodeFactory().getNode(C_NodeTypes.FROM_VTI,
+                    newNode,
+                    correlationName,
+                    resultColumns,
+                    tableProperties,
+                    cm);
+        } else {
+            TableName exposedName = newNode.makeTableName(td.getSchemaName(),
+                    td.getDescriptorName());
+
+            vtiNode = getNodeFactory().getNode(C_NodeTypes.FROM_VTI,
+                    newNode,
+                    correlationName,
+                    resultColumns,
+                    tableProperties,
+                    exposedName,
+                    cm);
+        }
+
+        return (ResultSetNode) vtiNode;
+    }
+
 	/** 
 	 * Determine whether or not the specified name is an exposed name in
 	 * the current query block.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java
index 4754b180..ea72837d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/MethodCallNode.java
@@ -29,13 +29,9 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.error.StandardException;
 
-import org.apache.derby.iapi.types.StringDataValue;
 import org.apache.derby.iapi.types.TypeId;
 import org.apache.derby.iapi.types.JSQLType;
 
-import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
-
-import org.apache.derby.iapi.sql.compile.Visitable;
 import org.apache.derby.iapi.sql.compile.Visitor;
 import org.apache.derby.iapi.sql.compile.C_NodeTypes;
 import org.apache.derby.iapi.sql.compile.CompilerContext;
@@ -55,14 +51,13 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.util.JBitSet;
 
-import org.apache.derby.impl.sql.compile.ExpressionClassBuilder;
 import org.apache.derby.catalog.types.RoutineAliasInfo;
 
-import java.lang.reflect.Modifier;
 import java.lang.reflect.Member;
 
 import java.sql.ResultSet;
 import java.util.Enumeration;
+import java.util.List;
 import java.util.StringTokenizer;
 import java.util.Vector;
 
@@ -163,11 +158,11 @@ public RoutineAliasInfo getRoutineInfo()
 	/**
 	 * Add the parameter list
 	 *
-	 * @param parameterList		A Vector of the parameters
+	 * @param parameterList		A list of the parameters
 	 *
 	 * @exception StandardException		Thrown on error
 	 */
-	public void addParms(Vector parameterList) throws StandardException
+	public void addParms(List parameterList) throws StandardException
 	{
 		methodParms = new JavaValueNode[parameterList.size()];
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NewInvocationNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NewInvocationNode.java
index f455e5cc..9a23f5a3 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NewInvocationNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NewInvocationNode.java
@@ -54,6 +54,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import java.util.Vector;
 import java.util.Enumeration;
+import java.util.List;
 
 /**
  * A NewInvocationNode represents a new object() invocation.
@@ -85,7 +86,7 @@ public void init(
 		throws StandardException
 	{
 		super.init("<init>");
-		addParms((Vector) params);
+		addParms((List) params);
 
 		this.javaClassName = (String) javaClassName;
 		this.delimitedIdentifier =
@@ -132,7 +133,7 @@ public void init(
 		throws StandardException
 	{
 		super.init("<init>");
-		addParms((Vector) params);
+		addParms((List) params);
 
 		if (SanityManager.DEBUG)
 		{
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java
index e1b4a011..9a579850 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/NodeFactoryImpl.java
@@ -22,7 +22,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 package	org.apache.derby.impl.sql.compile;
 
 import java.util.Properties;
-import java.util.Vector;
 
 import org.apache.derby.iapi.services.context.ContextManager;
 
@@ -34,7 +33,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.sql.compile.NodeFactory;
 import org.apache.derby.iapi.sql.compile.C_NodeTypes;
-import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
 
 import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.iapi.services.property.PropertyUtil;
@@ -43,9 +41,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.reference.EngineType;
 import org.apache.derby.iapi.reference.SQLState;
 
-import org.apache.derby.catalog.AliasInfo;
 import org.apache.derby.iapi.services.loader.ClassInfo;
-import org.apache.derby.iapi.util.StringUtil;
 
 /**
  * This class is a factory for QueryTreeNode nodes.  It exists to provide
@@ -75,8 +71,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	private final ClassInfo[]	nodeCi =
 		new ClassInfo[C_NodeTypes.FINAL_VALUE+1];
 	
-	private static final Vector emptyVector = new Vector(0);
-
 	//////////////////////////////////////////////////////////////////////
 	//
 	// ModuleControl interface
@@ -651,141 +645,4 @@ protected String nodeName(int nodeType)
 			throw StandardException.newException(SQLState.NOT_IMPLEMENTED);
 		}
 	}
-
-
-	/**
-	 * Get one of the several types of create alias nodes. Carved out of parser
-	 * so this could be used by ALTER PUBLICATION.
-	 *
-	 * @param aliasName	The name of the alias
-	 * @param targetName	The full path/method name
-	 * @param aliasSpecificInfo	The full path of the target method name,
-	 *								if any
-	 * @param aliasType	The type of alias to create
-	 * @param delimitedIdentifier	Whether or not to treat the class name
-	 *								as a delimited identifier if trying to
-	 *								resolve it as a class alias.
-	 * @param cm			A ContextManager
-	 *
-	 * @return	A CreateAliasNode matching the given parameters
-	 *
-	 * @exception StandardException		Thrown on error
-	 */
-	public	QueryTreeNode
-	getCreateAliasNode(
-		Object aliasName,
-		Object targetName,
-		Object aliasSpecificInfo,
-		char aliasType,
-		Boolean delimitedIdentifier,
-		ContextManager cm)
-		throws StandardException
-	{
-		int nodeType;
-		String methodName = null;
-		String targetMethodName = null;
-		String targetClassName = null;
-
-		nodeType = C_NodeTypes.CREATE_ALIAS_NODE;
-
-		if (
-            (aliasType != AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR) &&
-            (aliasType != AliasInfo.ALIAS_TYPE_UDT_AS_CHAR)
-            )
-		{
-        	int lastPeriod;
-        	String fullStaticMethodName = (String) targetName;
-        	int paren = fullStaticMethodName.indexOf('(');
-        	if (paren == -1) {
-            	// not a Java signature - split based on last period
-            	lastPeriod = fullStaticMethodName.lastIndexOf('.');
-        	} else {
-            	// a Java signature - split on last period before the '('
-            	lastPeriod = fullStaticMethodName.substring(0, paren).lastIndexOf('.');
-        	}
-        	if (lastPeriod == -1 || lastPeriod == fullStaticMethodName.length()-1) {
-            	throw StandardException.newException(SQLState.LANG_INVALID_FULL_STATIC_METHOD_NAME, fullStaticMethodName);
-        	}
-        	String javaClassName = fullStaticMethodName.substring(0, lastPeriod);
-        	methodName = fullStaticMethodName.substring(lastPeriod + 1);
-			targetName = javaClassName;
-		}
-
-		return getNode(
-			nodeType,
-			aliasName,
-			targetName,
-			methodName,
-			aliasSpecificInfo,
-			new Character(aliasType),
-			delimitedIdentifier,
-			cm );
-	}
-
-	/**
-	 * Return a node that represents invocation of the virtual table
-	 * for the given table descriptor.  The mapping of the table descriptor
-	 * to a specific VTI class name will occur as part of the "init"
-	 * phase for the NewInvocationNode that we create here.
-	 * <P>
-	 * Currently only handles no argument vtis corresponding to a subset
-	 * of the diagnostic tables. (e.g. lock_table).
-	 * The node returned is a FROM_VTI node with a passed in NEW_INVOCATION_NODE
-	 * representing the class, with no arguments.
-	 * Other attributes of the original FROM_TABLE node (such as resultColumns)
-	 * are passed into the FROM_VTI node.
-	 * 
-	 */
-	public ResultSetNode mapTableAsVTI(
-			TableDescriptor td,
-			String correlationName,
-			ResultColumnList resultColumns,
-			Properties tableProperties,		
-			ContextManager cm)
-		throws StandardException {
-		
-	
-		/* The fact that we pass a non-null table descriptor to the
-		 * following call is an indication that we are mapping to a
-		 * no-argument VTI.  Since we have the table descriptor we
-		 * do not need to pass in a TableName. See NewInvocationNode
-		 * for more.
-		 */
-		QueryTreeNode newNode =
-			getNode(C_NodeTypes.NEW_INVOCATION_NODE, 
-				null,	// TableName
-				td,     // TableDescriptor
-				emptyVector,
-				Boolean.FALSE,
-				cm);
-		
-		 QueryTreeNode vtiNode;
-		 
-		 if (correlationName != null)
-		 {
-			 vtiNode = getNode(C_NodeTypes.FROM_VTI,
-						newNode,
-						correlationName,
-						resultColumns,
-						tableProperties,
-						cm);
-		 }
-		 else
-		 {
-			 TableName exposedName = newNode.makeTableName(td.getSchemaName(),
-						td.getDescriptorName());
-			 
-			vtiNode = getNode(C_NodeTypes.FROM_VTI,
-						newNode,
-						correlationName,
-						resultColumns,
-						tableProperties,
-						exposedName,
-						cm);
-		}
-		 
-		return (ResultSetNode) vtiNode;
-	}
 }
-
-
