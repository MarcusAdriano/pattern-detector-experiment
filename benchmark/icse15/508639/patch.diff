diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java
index 234ab57f..5be69ad6 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TriggerTest.java
@@ -182,9 +182,9 @@ private void actionTypesInsertTest(String type)
         int jdbcType = DatabaseMetaDataTest.getJDBCType(type);
         int precision = DatabaseMetaDataTest.getPrecision(jdbcType, type);
 
-        // Can't directly insert into XML columns from JDBC.
+        // BUG DERBY-2350  - remove this check & return to see the issue.      
         if (jdbcType == JDBC.SQLXML)
-            return; // temp
+            return;
         
         // BUG DERBY-2349 - remove this check & return to see the issue.
         if (jdbcType == Types.BLOB)
@@ -195,6 +195,17 @@ private void actionTypesInsertTest(String type)
         String ins1 = "INSERT INTO T_MAIN(V) VALUES (?)";
         String ins3 = "INSERT INTO T_MAIN(V) VALUES (?), (?), (?)";
         
+        // Can't directly insert into XML columns from JDBC.
+        if (jdbcType == JDBC.SQLXML)
+        {
+            ins1 = "INSERT INTO T_MAIN(V) VALUES " +
+                    "XMLPARSE (DOCUMENT CAST (? AS CLOB) PRESERVE WHITESPACE)";
+            ins3 = "INSERT INTO T_MAIN(V) VALUES " +
+                    "XMLPARSE (DOCUMENT CAST (? AS CLOB) PRESERVE WHITESPACE)," +
+                    "XMLPARSE (DOCUMENT CAST (? AS CLOB) PRESERVE WHITESPACE)," +
+                    "XMLPARSE (DOCUMENT CAST (? AS CLOB) PRESERVE WHITESPACE)";
+        }
+        
         PreparedStatement ps;
         ps = prepareStatement(ins1);
         setRandomValue(r, ps, 1, jdbcType, precision);
@@ -367,6 +378,12 @@ public static Object getRandomValue(Random r, int jdbcType,
             return new ReadOnceByteArrayInputStream(
                     randomBinary(r, r.nextInt(precision)));
             
+        case JDBC.SQLXML:
+            // Not random yet, but was blocked by DEBRY-2350
+            // so just didn't put effort into generating 
+            // a random size XML document.
+            return new StringReaderWithLength("<a><b>text</b></a>");
+            
              
        }
             
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/streams/ReadOnceByteArrayInputStream.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/streams/ReadOnceByteArrayInputStream.java
index e69de29b..c4efb46c 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/streams/ReadOnceByteArrayInputStream.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/streams/ReadOnceByteArrayInputStream.java
@@ -0,0 +1,45 @@
+package org.apache.derbyTesting.functionTests.util.streams;
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+
+public class ReadOnceByteArrayInputStream extends ByteArrayInputStream {
+
+    private boolean isClosed;
+    
+    public ReadOnceByteArrayInputStream(byte[] arg0) {
+        super(arg0);
+    }
+
+    public ReadOnceByteArrayInputStream(byte[] arg0, int arg1, int arg2) {
+        super(arg0, arg1, arg2);
+    }
+    
+    public boolean markSupported()
+    {
+        return false;
+    }
+    
+    public void close() throws IOException
+    {
+        isClosed = true;
+        super.close();
+    }
+    
+    public int read(byte[] b,
+            int off,
+            int len)
+    {
+        if (isClosed)
+            return -1;
+        return super.read(b, off, len);
+    }
+    
+    public int read()
+    {
+        if (isClosed)
+            return -1;
+        return super.read();
+    }
+
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/streams/StringReaderWithLength.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/streams/StringReaderWithLength.java
index 3f24d583..b6d1132b 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/streams/StringReaderWithLength.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/streams/StringReaderWithLength.java
@@ -1 +1,23 @@
   + native
+package org.apache.derbyTesting.functionTests.util.streams;
+
+import java.io.StringReader;
+
+public class StringReaderWithLength extends StringReader {
+
+    private final int length;
+    
+    public StringReaderWithLength(String arg0) {
+        super(arg0);
+        this.length = arg0.length();
+    }
+    
+    public boolean markSupported() {
+        return false;
+    }
+
+    public int getLength()
+    {
+        return length;
+    }
+}
