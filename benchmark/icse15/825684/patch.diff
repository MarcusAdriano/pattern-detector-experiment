diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/Range.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/Range.java
index 2548e609..f133c033 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/Range.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/dht/Range.java
@@ -30,9 +30,8 @@
 /**
  * A representation of the range that a node is responsible for on the DHT ring.
  *
- * A Range is responsible for the tokens between [left, right).
+ * A Range is responsible for the tokens between (left, right].
  */
-
 public class Range implements Comparable<Range>, Serializable
 {
     private static ICompactSerializer<Range> serializer_;
@@ -81,30 +80,26 @@ public Token right()
      */
     public boolean contains(Token bi)
     {
-        if ( left_.compareTo(right_) > 0 )
+        if ( isWrapAround(this) )
         {
             /* 
-             * left is greater than right we are wrapping around.
-             * So if the interval is [a,b) where a > b then we have
-             * 3 cases one of which holds for any given token k.
-             * (1) k > a -- return true
-             * (2) k < b -- return true
-             * (3) b < k < a -- return false
+             * We are wrapping around, so the interval is (a,b] where a >= b,
+             * then we have 3 cases which hold for any given token k:
+             * (1) a < k -- return true
+             * (2) k <= b -- return true
+             * (3) b < k <= a -- return false
             */
-            if ( bi.compareTo(left_) >= 0 )
+            if ( bi.compareTo(left_) > 0 )
                 return true;
-            else return right_.compareTo(bi) > 0;
+            else
+                return right_.compareTo(bi) >= 0;
         }
-        else if ( left_.compareTo(right_) < 0 )
+        else
         {
             /*
-             * This is the range [a, b) where a < b. 
+             * This is the range (a, b] where a < b. 
             */
-            return ( bi.compareTo(left_) >= 0 && right_.compareTo(bi) > 0 );
-        }        
-        else
-    	{
-    		return true;
+            return ( bi.compareTo(left_) > 0 && right_.compareTo(bi) >= 0 );
     	}    	
     }
 
@@ -115,7 +110,7 @@ else if ( left_.compareTo(right_) < 0 )
      */
     private static boolean isWrapAround(Range range)
     {
-        return range.left_.compareTo(range.right_) > 0;
+        return range.left_.compareTo(range.right_) >= 0;
     }
     
     public int compareTo(Range rhs)
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/dht/RangeTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/dht/RangeTest.java
index a6179722..4b8e279d 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/dht/RangeTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/dht/RangeTest.java
@@ -24,17 +24,24 @@
     @Test
     public void testRange() {
         Range left = new Range(new BigIntegerToken("0"), new BigIntegerToken("100"));
-		assert left.contains(new BigIntegerToken("0"));
+        assert !left.contains(new BigIntegerToken("0"));
         assert left.contains(new BigIntegerToken("10"));
-        assert !left.contains(new BigIntegerToken("-1"));
-        assert !left.contains(new BigIntegerToken("100"));
+        assert left.contains(new BigIntegerToken("100"));
         assert !left.contains(new BigIntegerToken("101"));
+    }
+
+    @Test
+    public void testWrappingRange() {
+        Range range = new Range(new BigIntegerToken("0"), new BigIntegerToken("0"));
+        assert range.contains(new BigIntegerToken("0"));
+        assert range.contains(new BigIntegerToken("10"));
+        assert range.contains(new BigIntegerToken("100"));
+        assert range.contains(new BigIntegerToken("101"));
 
-        Range right = new Range(new BigIntegerToken("100"), new BigIntegerToken("0"));
-        assert right.contains(new BigIntegerToken("100"));
-        assert right.contains(new BigIntegerToken("200"));
-        assert right.contains(new BigIntegerToken("-10"));
-        assert !right.contains(new BigIntegerToken("0"));
-        assert !right.contains(new BigIntegerToken("1"));
+        range = new Range(new BigIntegerToken("100"), new BigIntegerToken("0"));
+        assert range.contains(new BigIntegerToken("0"));
+        assert !range.contains(new BigIntegerToken("1"));
+        assert !range.contains(new BigIntegerToken("100"));
+        assert range.contains(new BigIntegerToken("200"));
     }
 }
