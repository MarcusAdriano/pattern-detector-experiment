diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/TypeDescriptorImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/TypeDescriptorImpl.java
index 73ece440..e32acac4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/TypeDescriptorImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/catalog/types/TypeDescriptorImpl.java
@@ -28,6 +28,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.types.DataTypeDescriptor;
 import org.apache.derby.iapi.types.StringDataValue;
+import org.apache.derby.iapi.reference.Property;
 
 import java.io.ObjectOutput;
 import java.io.ObjectInput;
@@ -426,8 +427,8 @@ public String getCollationName()
     {
         return(
             collationType == StringDataValue.COLLATION_TYPE_UCS_BASIC ? 
-                StringDataValue.COLLATION_TYPE_UCS_BASIC_STRING : 
-                StringDataValue.COLLATION_TYPE_TERRITORY_BASED_STRING);
+                Property.UCS_BASIC_COLLATION : 
+                Property.TERRITORY_BASED_COLLATION);
     }
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/StringDataValue.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/StringDataValue.java
index d0b6afda..6171857f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/StringDataValue.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/StringDataValue.java
@@ -65,11 +65,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	/** @see StringDataValue#COLLATION_TYPE_UCS_BASIC */
 	public	static final int COLLATION_TYPE_TERRITORY_BASED = 1;
 
-    public  static final String COLLATION_TYPE_UCS_BASIC_STRING = 
-        "USC_BASIC";
-    public  static final String COLLATION_TYPE_TERRITORY_BASED_STRING = 
-        "TERRITORY_BASED";
-
 	/**
 	 * The SQL concatenation '||' operator.
 	 *
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java
index f37787eb..e6ed1e79 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CreateTableNode.java
@@ -290,6 +290,9 @@ public void bindStatement() throws StandardException
 				qeRCL.copyResultColumnNames(resultColumns);
 			}
 			
+			SchemaDescriptor sd = getSchemaDescriptor();
+			int schemaCollationType = sd.getCollationType();
+	    
 			/* Create table element list from columns in query expression */
 			tableElementList = new TableElementList();
 			
@@ -315,6 +318,30 @@ public void bindStatement() throws StandardException
 							dtd.getFullSQLTypeName(),
 							rc.getName());
 				}
+				//DERBY-2879  CREATE TABLE AS <subquery> does not maintain the 
+				//collation for character types. 
+				//eg for a territory based collation database
+				//create table t as select tablename from sys.systables with no data;
+				//Derby at this point does not support for a table's character 
+				//columns to have a collation different from it's schema's
+				//collation. Which means that in a territory based database, 
+				//the query above will cause table t's character columns to
+				//have collation of UCS_BASIC but the containing schema of t
+				//has collation of territory based. This is not supported and
+				//hence we will throw an exception below for the query above in
+				//a territory based database. 
+				if (dtd.getCollationType() != schemaCollationType)
+				{
+					String schemaCollationName =
+			        	(schemaCollationType == 
+			        		StringDataValue.COLLATION_TYPE_UCS_BASIC ? 
+			                Property.UCS_BASIC_COLLATION : 
+			                Property.TERRITORY_BASED_COLLATION);
+					throw StandardException.newException(
+							SQLState.LANG_CAN_NOT_CREATE_TABLE,
+							dtd.getCollationName(),
+							schemaCollationName);
+				}
 
 				ColumnDefinitionNode column = new ColumnDefinitionNode();
 				column.init(rc.getName(), null, rc.getType(), null);
diff --git a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
index 1bb907e6..9af5bf10 100644
--- a/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
+++ b/db/derby/code/trunk/java/shared/org/apache/derby/shared/common/reference/SQLState.java
@@ -1047,6 +1047,7 @@ The message identifier (ie. the value that matches a field in this class)
     String LANG_QUERY_TOO_COMPLEX                                     = "42ZA0";
     String LANG_INVALID_SQL_IN_BATCH                                  = "42ZA1";
     String LANG_LIKE_COLLATION_MISMATCH                               = "42ZA2";
+    String LANG_CAN_NOT_CREATE_TABLE                               = "42ZA3";
 
 	//following 3 matches the DB2 sql states
 	String LANG_DECLARED_GLOBAL_TEMP_TABLE_ONLY_IN_SESSION_SCHEMA = "428EK";
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
index c01f9f55..54f35573 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
@@ -912,6 +912,16 @@ private void commonTestingForTerritoryBasedDB(Statement s) throws SQLException{
     rs = s.executeQuery("SELECT COUNT(*) FROM APP.CUSTOMER ");
     JDBC.assertFullResultSet(rs,new String[][] {{"8"}});
     //End of parameter testing
+    
+    //The user table has to adhere to the collation type of the schema in which
+    //it resides. If the table creation breaks that rule, then an exception 
+    //will be thrown. DERBY-2879
+    s.executeUpdate("set schema APP");
+    //following fails as expected because otherwise character types in T will
+    //have collation type of UCS_BASIC but the APP schema has collation of
+    //territory based
+    assertStatementError("42ZA3", s, "CREATE TABLE T AS SELECT TABLENAME " +
+    		" FROM SYS.SYSTABLES WITH NO DATA");
 }
 
 private void setUpTable(Statement s) throws SQLException {
