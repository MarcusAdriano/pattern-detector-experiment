diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/CompletedFileStatus.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/CompletedFileStatus.java
index 04119eae..e69de29b 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/CompletedFileStatus.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/CompletedFileStatus.java
@@ -1,121 +0,0 @@
-package org.apache.cassandra.streaming;
-/*
- * 
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- * 
- *   http://www.apache.org/licenses/LICENSE-2.0
- * 
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- * 
- */
-
-
-import java.io.ByteArrayOutputStream;
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.IOException;
-
-import org.apache.cassandra.io.ICompactSerializer;
-import org.apache.cassandra.net.Message;
-import org.apache.cassandra.service.StorageService;
-import org.apache.cassandra.utils.FBUtilities;
-
-class CompletedFileStatus
-{
-    private static ICompactSerializer<CompletedFileStatus> serializer_;
-
-    public static enum StreamCompletionAction
-    {
-        DELETE,
-        STREAM
-    }
-
-    static
-    {
-        serializer_ = new CompletedFileStatusSerializer();
-    }
-
-    public static ICompactSerializer<CompletedFileStatus> serializer()
-    {
-        return serializer_;
-    }
-
-    private String file_;
-    private long expectedBytes_;
-    private StreamCompletionAction action_;
-
-    public CompletedFileStatus(String file, long expectedBytes)
-    {
-        file_ = file;
-        expectedBytes_ = expectedBytes;
-        action_ = StreamCompletionAction.DELETE;
-    }
-
-    public String getFile()
-    {
-        return file_;
-    }
-
-    public long getExpectedBytes()
-    {
-        return expectedBytes_;
-    }
-
-    public void setAction(StreamCompletionAction action)
-    {
-        action_ = action;
-    }
-
-    public StreamCompletionAction getAction()
-    {
-        return action_;
-    }
-
-    public Message makeStreamStatusMessage() throws IOException
-    {
-        ByteArrayOutputStream bos = new ByteArrayOutputStream();
-        DataOutputStream dos = new DataOutputStream( bos );
-        CompletedFileStatus.serializer().serialize(this, dos);
-        return new Message(FBUtilities.getLocalAddress(), "", StorageService.Verb.STREAM_FINISHED, bos.toByteArray());
-    }
-
-    private static class CompletedFileStatusSerializer implements ICompactSerializer<CompletedFileStatus>
-    {
-        public void serialize(CompletedFileStatus streamStatus, DataOutputStream dos) throws IOException
-        {
-            dos.writeUTF(streamStatus.getFile());
-            dos.writeLong(streamStatus.getExpectedBytes());
-            dos.writeInt(streamStatus.getAction().ordinal());
-        }
-
-        public CompletedFileStatus deserialize(DataInputStream dis) throws IOException
-        {
-            String targetFile = dis.readUTF();
-            long expectedBytes = dis.readLong();
-            CompletedFileStatus streamStatus = new CompletedFileStatus(targetFile, expectedBytes);
-
-            int ordinal = dis.readInt();
-            if ( ordinal == StreamCompletionAction.DELETE.ordinal() )
-            {
-                streamStatus.setAction(StreamCompletionAction.DELETE);
-            }
-            else if ( ordinal == StreamCompletionAction.STREAM.ordinal() )
-            {
-                streamStatus.setAction(StreamCompletionAction.STREAM);
-            }
-
-            return streamStatus;
-        }
-    }
-}
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/FileStatus.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/FileStatus.java
index e69de29b..0eabbab8 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/FileStatus.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/FileStatus.java
@@ -0,0 +1,121 @@
+package org.apache.cassandra.streaming;
+/*
+ * 
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ * 
+ */
+
+
+import java.io.ByteArrayOutputStream;
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+
+import org.apache.cassandra.io.ICompactSerializer;
+import org.apache.cassandra.net.Message;
+import org.apache.cassandra.service.StorageService;
+import org.apache.cassandra.utils.FBUtilities;
+
+class FileStatus
+{
+    private static ICompactSerializer<FileStatus> serializer_;
+
+    public static enum StreamCompletionAction
+    {
+        DELETE,
+        STREAM
+    }
+
+    static
+    {
+        serializer_ = new FileStatusSerializer();
+    }
+
+    public static ICompactSerializer<FileStatus> serializer()
+    {
+        return serializer_;
+    }
+
+    private String file_;
+    private long expectedBytes_;
+    private StreamCompletionAction action_;
+
+    public FileStatus(String file, long expectedBytes)
+    {
+        file_ = file;
+        expectedBytes_ = expectedBytes;
+        action_ = StreamCompletionAction.DELETE;
+    }
+
+    public String getFile()
+    {
+        return file_;
+    }
+
+    public long getExpectedBytes()
+    {
+        return expectedBytes_;
+    }
+
+    public void setAction(StreamCompletionAction action)
+    {
+        action_ = action;
+    }
+
+    public StreamCompletionAction getAction()
+    {
+        return action_;
+    }
+
+    public Message makeStreamStatusMessage() throws IOException
+    {
+        ByteArrayOutputStream bos = new ByteArrayOutputStream();
+        DataOutputStream dos = new DataOutputStream( bos );
+        FileStatus.serializer().serialize(this, dos);
+        return new Message(FBUtilities.getLocalAddress(), "", StorageService.Verb.STREAM_FINISHED, bos.toByteArray());
+    }
+
+    private static class FileStatusSerializer implements ICompactSerializer<FileStatus>
+    {
+        public void serialize(FileStatus streamStatus, DataOutputStream dos) throws IOException
+        {
+            dos.writeUTF(streamStatus.getFile());
+            dos.writeLong(streamStatus.getExpectedBytes());
+            dos.writeInt(streamStatus.getAction().ordinal());
+        }
+
+        public FileStatus deserialize(DataInputStream dis) throws IOException
+        {
+            String targetFile = dis.readUTF();
+            long expectedBytes = dis.readLong();
+            FileStatus streamStatus = new FileStatus(targetFile, expectedBytes);
+
+            int ordinal = dis.readInt();
+            if ( ordinal == StreamCompletionAction.DELETE.ordinal() )
+            {
+                streamStatus.setAction(StreamCompletionAction.DELETE);
+            }
+            else if ( ordinal == StreamCompletionAction.STREAM.ordinal() )
+            {
+                streamStatus.setAction(StreamCompletionAction.STREAM);
+            }
+
+            return streamStatus;
+        }
+    }
+}
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/IStreamComplete.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/IStreamComplete.java
index 985fb3bd..3888f4a8 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/IStreamComplete.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/IStreamComplete.java
@@ -29,5 +29,5 @@
      * This callback if registered with the StreamContextManager is 
      * called when the stream from a host is completely handled. 
     */
-    public void onStreamCompletion(InetAddress from, PendingFile pendingFile, CompletedFileStatus streamStatus) throws IOException;
+    public void onStreamCompletion(InetAddress from, PendingFile pendingFile, FileStatus streamStatus) throws IOException;
 }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/IncomingStreamReader.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/IncomingStreamReader.java
index b60b86fe..06f023f5 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/IncomingStreamReader.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/IncomingStreamReader.java
@@ -33,7 +33,7 @@
 {
     private static Logger logger = LoggerFactory.getLogger(IncomingStreamReader.class);
     private PendingFile pendingFile;
-    private CompletedFileStatus streamStatus;
+    private FileStatus streamStatus;
     private SocketChannel socketChannel;
 
     public IncomingStreamReader(SocketChannel socketChannel)
@@ -68,7 +68,7 @@ public void read() throws IOException
         catch (IOException ex)
         {
             /* Ask the source node to re-stream this file. */
-            streamStatus.setAction(CompletedFileStatus.StreamCompletionAction.STREAM);
+            streamStatus.setAction(FileStatus.StreamCompletionAction.STREAM);
             handleStreamCompletion(remoteAddress.getAddress());
             /* Delete the orphaned file. */
             File file = new File(pendingFile.getFilename());
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamCompletionHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamCompletionHandler.java
index 345c32bb..d03e036f 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamCompletionHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamCompletionHandler.java
@@ -44,7 +44,7 @@
 {
     private static Logger logger = LoggerFactory.getLogger(StreamCompletionHandler.class);
 
-    public void onStreamCompletion(InetAddress host, PendingFile pendingFile, CompletedFileStatus streamStatus) throws IOException
+    public void onStreamCompletion(InetAddress host, PendingFile pendingFile, FileStatus streamStatus) throws IOException
     {
         /* Parse the stream context and the file to the list of SSTables in the associated Column Family Store. */
         if (pendingFile.getFilename().contains("-Data.db"))
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamFinishedVerbHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamFinishedVerbHandler.java
index 72af2766..54d5788e 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamFinishedVerbHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamFinishedVerbHandler.java
@@ -44,7 +44,7 @@ public void doVerb(Message message)
 
         try
         {
-            CompletedFileStatus streamStatus = CompletedFileStatus.serializer().deserialize(new DataInputStream(bufIn));
+            FileStatus streamStatus = FileStatus.serializer().deserialize(new DataInputStream(bufIn));
 
             switch (streamStatus.getAction())
             {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamInManager.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamInManager.java
index b58a4814..c65d4fba 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamInManager.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamInManager.java
@@ -36,7 +36,7 @@
     /* Maintain a stream context per host that is the source of the stream */
     public static final Map<InetAddress, List<PendingFile>> ctxBag_ = new Hashtable<InetAddress, List<PendingFile>>();
     /* Maintain in this map the status of the streams that need to be sent back to the source */
-    public static final Map<InetAddress, List<CompletedFileStatus>> streamStatusBag_ = new Hashtable<InetAddress, List<CompletedFileStatus>>();
+    public static final Map<InetAddress, List<FileStatus>> streamStatusBag_ = new Hashtable<InetAddress, List<FileStatus>>();
     /* Maintains a callback handler per endpoint to notify the app that a stream from a given endpoint has been handled */
     public static final Map<InetAddress, IStreamComplete> streamNotificationHandlers_ = new HashMap<InetAddress, IStreamComplete>();
 
@@ -53,12 +53,12 @@ public synchronized static PendingFile getStreamContext(InetAddress key)
         return pendingFile;
     }
     
-    public synchronized static CompletedFileStatus getStreamStatus(InetAddress key)
+    public synchronized static FileStatus getStreamStatus(InetAddress key)
     {
-        List<CompletedFileStatus> status = streamStatusBag_.get(key);
+        List<FileStatus> status = streamStatusBag_.get(key);
         if ( status == null )
             throw new IllegalStateException("Streaming status has not been set for " + key);
-        CompletedFileStatus streamStatus = status.remove(0);
+        FileStatus streamStatus = status.remove(0);
         if ( status.isEmpty() )
             streamStatusBag_.remove(key);
         return streamStatus;
@@ -108,7 +108,7 @@ public synchronized static void registerStreamCompletionHandler(InetAddress key,
         streamNotificationHandlers_.put(key, streamComplete);
     }
     
-    public synchronized static void addStreamContext(InetAddress key, PendingFile pendingFile, CompletedFileStatus streamStatus)
+    public synchronized static void addStreamContext(InetAddress key, PendingFile pendingFile, FileStatus streamStatus)
     {
         /* Record the stream context */
         List<PendingFile> context = ctxBag_.get(key);
@@ -120,10 +120,10 @@ public synchronized static void addStreamContext(InetAddress key, PendingFile pe
         context.add(pendingFile);
         
         /* Record the stream status for this stream context */
-        List<CompletedFileStatus> status = streamStatusBag_.get(key);
+        List<FileStatus> status = streamStatusBag_.get(key);
         if ( status == null )
         {
-            status = new ArrayList<CompletedFileStatus>();
+            status = new ArrayList<FileStatus>();
             streamStatusBag_.put(key, status);
         }
         status.add( streamStatus );
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamInitiateVerbHandler.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamInitiateVerbHandler.java
index fbb7bdb3..57377bd1 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamInitiateVerbHandler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamInitiateVerbHandler.java
@@ -79,8 +79,7 @@ public void doVerb(Message message)
                 PendingFile remoteFile = pendingFile.getKey();
                 PendingFile localFile = pendingFile.getValue();
 
-                CompletedFileStatus streamStatus = new CompletedFileStatus(remoteFile.getFilename(),
-                                                                           remoteFile.getExpectedBytes());
+                FileStatus streamStatus = new FileStatus(remoteFile.getFilename(), remoteFile.getExpectedBytes());
 
                 if (logger.isDebugEnabled())
                   logger.debug("Preparing to receive stream from " + message.getFrom() + ": " + remoteFile + " -> " + localFile);
@@ -129,7 +128,7 @@ public void doVerb(Message message)
         return mapping;
     }
 
-    private void addStreamContext(InetAddress host, PendingFile pendingFile, CompletedFileStatus streamStatus)
+    private void addStreamContext(InetAddress host, PendingFile pendingFile, FileStatus streamStatus)
     {
         if (logger.isDebugEnabled())
           logger.debug("Adding stream context " + pendingFile + " for " + host + " ...");
