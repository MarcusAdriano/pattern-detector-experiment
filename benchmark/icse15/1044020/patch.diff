diff --git a/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/DelegateContext.java b/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/DelegateContext.java
index bcdb8edc..bd0697ec 100644
--- a/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/DelegateContext.java
+++ b/incubator/aries/trunk/jndi/jndi-core/src/main/java/org/apache/aries/jndi/DelegateContext.java
@@ -35,17 +35,21 @@
 import javax.naming.directory.ModificationItem;
 import javax.naming.directory.SearchControls;
 import javax.naming.directory.SearchResult;
+import javax.naming.ldap.Control;
+import javax.naming.ldap.ExtendedRequest;
+import javax.naming.ldap.ExtendedResponse;
+import javax.naming.ldap.LdapContext;
 
 import org.osgi.framework.BundleContext;
 
-public class DelegateContext implements DirContext {
+public class DelegateContext implements DirContext, LdapContext {
     
-    private Hashtable<Object, Object> env = new Hashtable<Object, Object>();
+    private final Hashtable<Object, Object> env = new Hashtable<Object, Object>();
 
-    private BundleContext bundleContext;
+    private final BundleContext bundleContext;
     private ContextProvider contextProvider;
-    private Map<String, ContextProvider> urlContexts = new HashMap<String, ContextProvider>();
-    private boolean rebind;
+    private final Map<String, ContextProvider> urlContexts = new HashMap<String, ContextProvider>();
+    private final boolean rebind;
 
     public DelegateContext(BundleContext bundleContext, Hashtable<?, ?> theEnv) {
         this.bundleContext = bundleContext;
@@ -374,4 +378,35 @@ public DirContext getSchemaClassDefinition(String name) throws NamingException {
                                     SearchControls cons) throws NamingException {
         return ((DirContext) findContext(name)).search(name, filterExpr, filterArgs, cons);
     }
+
+    public ExtendedResponse extendedOperation(ExtendedRequest request)
+        throws NamingException {
+      return ((LdapContext) getDefaultContext()).extendedOperation(request);
+    }
+
+    public Control[] getConnectControls() throws NamingException {
+      return ((LdapContext) getDefaultContext()).getConnectControls();
+    }
+
+    public Control[] getRequestControls() throws NamingException {
+      return ((LdapContext) getDefaultContext()).getRequestControls();
+    }
+
+    public Control[] getResponseControls() throws NamingException {
+      return ((LdapContext) getDefaultContext()).getResponseControls();
+    }
+
+    public LdapContext newInstance(Control[] requestControls)
+        throws NamingException {
+      return ((LdapContext) getDefaultContext()).newInstance(requestControls);
+    }
+
+    public void reconnect(Control[] connCtls) throws NamingException {
+      ((LdapContext) getDefaultContext()).reconnect(connCtls);
+    }
+
+    public void setRequestControls(Control[] requestControls)
+        throws NamingException {
+      ((LdapContext) getDefaultContext()).setRequestControls(requestControls);
+    }
 }
diff --git a/incubator/aries/trunk/jndi/jndi-core/src/test/java/org/apache/aries/jndi/InitialContextTest.java b/incubator/aries/trunk/jndi/jndi-core/src/test/java/org/apache/aries/jndi/InitialContextTest.java
index c52324ca..f9c6272b 100644
--- a/incubator/aries/trunk/jndi/jndi-core/src/test/java/org/apache/aries/jndi/InitialContextTest.java
+++ b/incubator/aries/trunk/jndi/jndi-core/src/test/java/org/apache/aries/jndi/InitialContextTest.java
@@ -11,7 +11,12 @@
 import javax.naming.Name;
 import javax.naming.NamingException;
 import javax.naming.NoInitialContextException;
+import javax.naming.ldap.Control;
+import javax.naming.ldap.ExtendedRequest;
+import javax.naming.ldap.InitialLdapContext;
+import javax.naming.ldap.LdapContext;
 import javax.naming.spi.InitialContextFactory;
+import javax.naming.spi.InitialContextFactoryBuilder;
 import javax.naming.spi.ObjectFactory;
 
 import org.apache.aries.jndi.startup.Activator;
@@ -101,4 +106,28 @@ public void testLookupWithoutICFButWithURLLookup() throws NamingException
     Object someObject = initialCtx.lookup("testURL:somedata");
     assertEquals("Expected to be given a string, but got something else.", "someText", someObject);
   }
+  
+  @Test
+  public void testLookFromLdapICF() throws Exception
+  {
+    InitialContextFactoryBuilder icf = Skeleton.newMock(InitialContextFactoryBuilder.class);
+    bc.registerService(new String[] {InitialContextFactoryBuilder.class.getName(), icf.getClass().getName()}, icf, new Properties());
+    
+    LdapContext backCtx = Skeleton.newMock(LdapContext.class);
+    InitialContextFactory fac = Skeleton.newMock(InitialContextFactory.class);
+    Skeleton.getSkeleton(fac).setReturnValue(
+        new MethodCall(InitialContextFactory.class, "getInitialContext", Hashtable.class), 
+        backCtx);
+    Skeleton.getSkeleton(icf).setReturnValue(
+        new MethodCall(InitialContextFactoryBuilder.class, "createInitialContextFactory", Hashtable.class), 
+        fac);
+    
+    Properties props = new Properties();
+    props.put(JNDIConstants.BUNDLE_CONTEXT, bc);
+    InitialLdapContext ilc = new InitialLdapContext(props, new Control[0]);
+    
+    ExtendedRequest req = Skeleton.newMock(ExtendedRequest.class);
+    ilc.extendedOperation(req);
+    Skeleton.getSkeleton(backCtx).assertCalled(new MethodCall(LdapContext.class, "extendedOperation", req));
+  }
 }
