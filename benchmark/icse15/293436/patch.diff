diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/RowUtil.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/RowUtil.java
index 29ec2050..b9777673 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/RowUtil.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/store/access/RowUtil.java
@@ -243,14 +243,12 @@ public static int getNumberOfColumns(
 
 	/**
 		See if a row actually contains no columns.
-		Returns true if row is null, row.length is null,
-		or columnList is not null but has not bits set.
+		Returns true if row is null or row.length is zero.
 
-		@return true if no columns are selected in this row.
+		@return true if row is empty.
 	*/
 	public static boolean isRowEmpty(
-    DataValueDescriptor[]   row, 
-    FormatableBitSet                 columnList) 
+    DataValueDescriptor[]   row) 
     {
 
 		if (row == null)
@@ -259,14 +257,6 @@ public static boolean isRowEmpty(
 		if (row.length == 0)
 			return true;
 
-		if (columnList == null)
-			return false;
-
-		int size = columnList.getLength();
-		for (int i = 0; i < size; i--) {
-			if (columnList.isSet(i))
-				return true;
-		}
 		return false;
 	}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java
index 8e6c8c22..badb2087 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/btree/BTreeScan.java
@@ -239,7 +239,7 @@ private void initScanParams(
 	{
         // startKeyValue init.
 	    this.init_startKeyValue         = startKeyValue;
-		if (RowUtil.isRowEmpty(this.init_startKeyValue, (FormatableBitSet) null))
+		if (RowUtil.isRowEmpty(this.init_startKeyValue))
 			this.init_startKeyValue = null;
 
         // startSearchOperator init.
@@ -252,7 +252,7 @@ private void initScanParams(
 
         // stopKeyValue init.
 	    this.init_stopKeyValue          = stopKeyValue;
-        if (RowUtil.isRowEmpty(this.init_stopKeyValue, (FormatableBitSet) null))
+        if (RowUtil.isRowEmpty(this.init_stopKeyValue))
             this.init_stopKeyValue = null;
 
         // stopSearchOperator init.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericScanController.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericScanController.java
index 07b7cf0c..4192b90d 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericScanController.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/conglomerate/GenericScanController.java
@@ -291,7 +291,7 @@ protected void positionAtInitScan(
     {
         // startKeyValue init.
 	    this.init_startKeyValue         = startKeyValue;
-		if (RowUtil.isRowEmpty(this.init_startKeyValue, (FormatableBitSet) null))
+		if (RowUtil.isRowEmpty(this.init_startKeyValue))
 			this.init_startKeyValue = null;
 
         // startSearchOperator init.
@@ -313,7 +313,7 @@ protected void positionAtInitScan(
 
         // stopKeyValue init.
 	    this.init_stopKeyValue          = stopKeyValue;
-        if (RowUtil.isRowEmpty(this.init_stopKeyValue, (FormatableBitSet) null))
+        if (RowUtil.isRowEmpty(this.init_stopKeyValue))
             this.init_stopKeyValue = null;
 
         // stopSearchOperator init.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/heap/Heap.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/heap/Heap.java
index df127f6e..c6c1116f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/heap/Heap.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/access/heap/Heap.java
@@ -663,8 +663,8 @@ public ScanManager openScan(
 	{
         // Heap scans do not suppport start and stop scan positions (these
         // only make sense for ordered storage structures).
-		if (!RowUtil.isRowEmpty(startKeyValue, (FormatableBitSet) null)
-			|| !RowUtil.isRowEmpty(stopKeyValue, (FormatableBitSet) null))
+		if (!RowUtil.isRowEmpty(startKeyValue)
+			|| !RowUtil.isRowEmpty(stopKeyValue))
 		{
             throw StandardException.newException(
                     SQLState.HEAP_UNIMPLEMENTED_FEATURE);
