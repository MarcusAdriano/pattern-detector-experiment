diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/common/CommandLineUtil.java b/mahout/trunk/core/src/main/java/org/apache/mahout/common/CommandLineUtil.java
index 553e10b3..0cc93bab 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/common/CommandLineUtil.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/common/CommandLineUtil.java
@@ -22,7 +22,6 @@
 import java.io.PrintWriter;
 
 import com.google.common.base.Charsets;
-import org.apache.commons.cli.Options;
 import org.apache.commons.cli2.Group;
 import org.apache.commons.cli2.OptionException;
 import org.apache.commons.cli2.util.HelpFormatter;
@@ -47,37 +46,23 @@ public static void printHelp(Group group) {
    * @param group job-specific command-line options.
    */
   public static void printHelpWithGenericOptions(Group group) throws IOException {
-    Options ops = new Options();
-    new GenericOptionsParser(new Configuration(), ops, new String[0]);
-    org.apache.commons.cli.HelpFormatter fmt = new org.apache.commons.cli.HelpFormatter();
-    fmt.printHelp("<command> [Generic Options] [Job-Specific Options]", 
-        "Generic Options:", ops, "");
-    
+    new GenericOptionsParser(new Configuration(), new org.apache.commons.cli.Options(), new String[0]);
     PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out, Charsets.UTF_8), true);
     HelpFormatter formatter = new HelpFormatter();
     formatter.setGroup(group);
     formatter.setPrintWriter(pw);
-    formatter.printHelp();
     formatter.setFooter("Specify HDFS directories while running on hadoop; else specify local file system directories");
-    formatter.printFooter();
-
-    pw.flush();
+    formatter.print();
   }
 
   public static void printHelpWithGenericOptions(Group group, OptionException oe) throws IOException {
-    Options ops = new Options();
-    new GenericOptionsParser(new Configuration(), ops, new String[0]);
-    org.apache.commons.cli.HelpFormatter fmt = new org.apache.commons.cli.HelpFormatter();
-    fmt.printHelp("<command> [Generic Options] [Job-Specific Options]",
-        "Generic Options:", ops, "");
-
+    new GenericOptionsParser(new Configuration(), new org.apache.commons.cli.Options(), new String[0]);
     PrintWriter pw = new PrintWriter(new OutputStreamWriter(System.out, Charsets.UTF_8), true);
     HelpFormatter formatter = new HelpFormatter();
     formatter.setGroup(group);
     formatter.setPrintWriter(pw);
     formatter.setException(oe);
     formatter.print();
-    pw.flush();
   }
 
 }
diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java
index 56b03b8e..9a1a5ea0 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java
@@ -86,7 +86,7 @@ public int run(String[] args) throws Exception {
     addOption("vectorSize", "vs", "Truncate vectors to <vs> length when dumping (most useful when in"
             + " conjunction with -sort", false);
     addOption(buildOption("filter", "fi", "Only dump out those vectors whose name matches the filter." 
-            + "  Multiple items may be specified by repeating the argument.", true, 1, 100, false, null));
+            + "  Multiple items may be specified by repeating the argument.", true, 1, Integer.MAX_VALUE, false, null));
 
     if (parseArguments(args, false, true) == null) {
       return -1;
