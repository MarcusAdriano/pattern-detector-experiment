diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java
index 7a087b47..a46714b3 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/catalog/types/RoutineAliasInfo.java
@@ -288,7 +288,7 @@ public void readExternal( ObjectInput in )
      * @param onDiskType The object read that represents the type.
      * @return A type descriptor.
      */
-    private static TypeDescriptor getStoredType(Object onDiskType)
+    public static TypeDescriptor getStoredType(Object onDiskType)
     {
         if (onDiskType instanceof OldRoutineType)
             return ((OldRoutineType) onDiskType).getCatalogType();
diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/GenericColumnDescriptor.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/GenericColumnDescriptor.java
index 43d79958..281f8051 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/GenericColumnDescriptor.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/sql/GenericColumnDescriptor.java
@@ -21,6 +21,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.impl.sql;
 
+import org.apache.derby.catalog.types.RoutineAliasInfo;
 import org.apache.derby.iapi.sql.ResultColumnDescriptor;
 import org.apache.derby.iapi.types.DataTypeDescriptor;
 
@@ -220,7 +221,7 @@ public void readExternal(ObjectInput in)
 		tableName = (String)fh.get("tableName");
 		schemaName = (String)fh.get("schemaName");
 		columnPos = fh.getInt("columnPos");
-		type = (DataTypeDescriptor)fh.get("type");
+		type = getStoredDataTypeDescriptor(fh.get("type"));
 		isAutoincrement = fh.getBoolean("isAutoincrement");
 		updatableByCursor = fh.getBoolean("updatableByCursor");
 	}
@@ -248,4 +249,27 @@ public String toString()
 			return "";
 		}
 	}
+
+    /**
+     * When retrieving a DataTypeDescriptor, it might just be a regular
+     * DataTypeDescriptor or may be an OldRoutineType, as used for Routine
+     * parameters and return values prior to DERBY-2775. If it is not a regular
+     * DataTypeDescriptor, it must be an OldRoutineType, so convert it to a
+     * DataTypeDescriptor DERBY-4913
+     * 
+     * @param o
+     *            object as obtained by fh.get("type") in readExternal
+     * @return DataTypeDescriptor
+     */
+    private DataTypeDescriptor getStoredDataTypeDescriptor(Object o) {
+
+        if (o instanceof DataTypeDescriptor)
+            return (DataTypeDescriptor) o;
+        else
+            // Must be an OldRoutineType, so we will convert it to a
+            // DataTypeDescriptor for our purposes
+            return DataTypeDescriptor
+                    .getType(RoutineAliasInfo.getStoredType(o));
+    }
+
 }
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/OldVersions.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/OldVersions.java
index db82288b..e4035d78 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/OldVersions.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/OldVersions.java
@@ -49,6 +49,10 @@ Licensed to the Apache Software Foundation (ASF) under one or more
         {10, 4, 2, 0}, // 10.4.2.0 (September 05, 2008 / SVN 693552)
     };
 
+    //Constant for special upgrade testing with both upgrade and create 
+    // set. We just test this with one version in the interest of time
+    // DERBY-4913
+    public static int[] VERSION_10_3_3_0=  new int[] {10,3,3,0};
     /**
      * <p>
      * Get an array of versions supported by this platform.
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/PhaseChanger.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/PhaseChanger.java
index 93781b98..1064f966 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/PhaseChanger.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/PhaseChanger.java
@@ -45,13 +45,17 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private ClassLoader loader;
     private ClassLoader previousLoader;
     private boolean trace = false;
+    private String upgradeAttributes="upgrade=true";
     
     public PhaseChanger(Test test, int phase,
-            ClassLoader loader, int[] version) {
+            ClassLoader loader, int[] version, boolean useCreateOnUpgrade) {
         super(test);
         this.phase = phase;
         this.loader = loader;
         this.version = version;
+        if (useCreateOnUpgrade) {
+            upgradeAttributes += ";create=true";
+        }
     }
     
     /**
@@ -75,6 +79,9 @@ protected void setUp() throws SQLException
                     + "." +  ((int[]) UpgradeChange.oldVersion.get())[3];
             BaseTestCase.traceit("Test upgrade from: " + versStr + ", phase: " 
                     + UpgradeChange.PHASES[phase]);
+            if (UpgradeChange.PHASES[phase].equals("UPGRADE")) {
+                BaseTestCase.traceit("Upgrade attributes = " + upgradeAttributes);
+            }
         }
         
         if (loader != null) {
@@ -99,7 +106,7 @@ protected void setUp() throws SQLException
             
         case UpgradeChange.PH_HARD_UPGRADE:
             JDBCDataSource.setBeanProperty(ds, "connectionAttributes",
-                    "upgrade=true");
+                    upgradeAttributes);
             break;
         default:
             break;
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeRun.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeRun.java
index b5b08163..1476e22f 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeRun.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeRun.java
@@ -76,7 +76,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
         new AdditionalDb("ROLES_10_5", false)
     };
     
-    public final static Test suite(final int[] version) {
+    public final static Test suite(final int[] version, boolean useCreateOnUpgrade) {
         
         ClassLoader oldLoader = makeClassLoader( version );
         
@@ -114,7 +114,7 @@ public final static Test suite(final int[] version) {
                     + " Upgrade Phase: " + UpgradeChange.PHASES[phase] + " ",
                     phase, version);
             
-            Test phaseSet = new PhaseChanger(phaseTests, phase, loader, version);
+            Test phaseSet = new PhaseChanger(phaseTests, phase, loader, version, useCreateOnUpgrade);
             phaseSet = handleJavaSE6(phase, version, phaseSet);
             suite.addTest(phaseSet);
         }
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/_Suite.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/_Suite.java
index 60f5ea0f..ced80221 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/_Suite.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/_Suite.java
@@ -20,6 +20,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 */
 package org.apache.derbyTesting.functionTests.tests.upgradeTests;
 
+import java.util.Arrays;
+
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
@@ -130,9 +132,15 @@ public static Test suite() {
         old = OldVersions.getSupportedVersions();
         
         for (int i = 0; i < old.length; i++) {
-            suite.addTest(UpgradeRun.suite(old[i]));
+            // DERBY-4913. Test upgrade and create together for 10.3.3.0 since
+            // that combination seems to trigger a different code path.
+            if (Arrays.equals(old[i],OldVersions.VERSION_10_3_3_0))
+                suite.addTest(UpgradeRun.suite(old[i], true));
+            else
+                suite.addTest(UpgradeRun.suite(old[i], false));
         }
 
+        
         return suite;
     }
     
