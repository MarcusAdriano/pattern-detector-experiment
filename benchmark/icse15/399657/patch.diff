diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java
index ffc31884..bdc7b9f3 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/sql/compile/ConditionalNode.java
@@ -68,6 +68,9 @@
 {
 	ValueNode		testCondition;
 	ValueNodeList	thenElseList;
+	//true means we are here for NULLIF(V1,V2), false means we are here for following
+	//CASE WHEN BooleanExpression THEN thenExpression ELSE elseExpression END
+	boolean	thisIsNullIfNode;
 
 	/**
 	 * Initializer for a ConditionalNode
@@ -76,10 +79,11 @@
 	 * @param thenElseList		ValueNodeList with then and else expressions
 	 */
 
-	public void init(Object testCondition, Object thenElseList)
+	public void init(Object testCondition, Object thenElseList, Object thisIsNullIfNode)
 	{
 		this.testCondition = (ValueNode) testCondition;
 		this.thenElseList = (ValueNodeList) thenElseList;
+		this.thisIsNullIfNode = ((Boolean) thisIsNullIfNode).booleanValue();
 	}
 
 	/**
@@ -146,6 +150,19 @@ public ValueNode bindExpression(FromList fromList, SubqueryList subqueryList,
 		testCondition = testCondition.bindExpression(fromList, 
 			subqueryList,
 			aggregateVector);
+
+		if (thisIsNullIfNode) {
+			//for NULLIF(V1,V2), parser binds thenElseList.elementAt(0) to untyped NULL
+			//At bind phase, we should bind it to the type of V1 since now we know the
+			//type of V1  
+			BinaryComparisonOperatorNode bcon = (BinaryComparisonOperatorNode)testCondition;
+			QueryTreeNode cast = getNodeFactory().getNode(
+						C_NodeTypes.CAST_NODE,
+						thenElseList.elementAt(0), 
+						bcon.getLeftOperand().getTypeServices(),
+						getContextManager());
+			thenElseList.setElementAt(cast,0);
+		}
 		thenElseList.bindExpression(fromList, 
 			subqueryList,
 			aggregateVector);
diff --git a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultset.java b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultset.java
index e9b6e4b9..30bb7de4 100644
--- a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultset.java
+++ b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/resultset.java
@@ -21,12 +21,15 @@
 package org.apache.derbyTesting.functionTests.tests.jdbcapi;
 
 import java.sql.Connection;
+import java.sql.Date;
 import java.sql.DriverManager;
 import java.sql.ResultSetMetaData;
 import java.sql.ResultSet;
 import java.sql.PreparedStatement;
 import java.sql.Statement;
 import java.sql.SQLException;
+import java.sql.Time;
+import java.sql.Timestamp;
 import java.sql.Types;
 
 import java.lang.reflect.*;
@@ -56,7 +59,77 @@
 
 	static private boolean isDerbyNet = false;
 
-	public static void main(String[] args) {
+	private static String VALID_DATE_STRING = "'2000-01-01'";
+	private static String VALID_TIME_STRING = "'15:30:20'";
+	private static String VALID_TIMESTAMP_STRING = "'2000-01-01 15:30:20'";
+	private static String NULL_VALUE="NULL";
+
+	private static String[] SQLTypes =
+	{
+		"SMALLINT",
+		"INTEGER",
+		"BIGINT",
+		"DECIMAL(10,5)",
+		"REAL",
+		"DOUBLE",
+		"CHAR(60)",
+		"VARCHAR(60)",
+		"LONG VARCHAR",
+		"CHAR(60) FOR BIT DATA",
+		"VARCHAR(60) FOR BIT DATA",
+		"LONG VARCHAR FOR BIT DATA",
+		"CLOB(1k)",
+		"DATE",
+		"TIME",
+		"TIMESTAMP",
+		"BLOB(1k)",
+
+	};
+
+	private static String[] ColumnNames =
+	{
+		"SMALLINTCOL",
+		"INTEGERCOL",
+		"BIGINTCOL",
+		"DECIMALCOL",
+		"REALCOL",
+		"DOUBLECOL",
+		"CHARCOL",
+		"VARCHARCOL",
+		"LONGVARCHARCOL",
+		"CHARFORBITCOL",
+		"VARCHARFORBITCOL",
+		"LVARCHARFORBITCOL",
+		"CLOBCOL",
+		"DATECOL",
+		"TIMECOL",
+		"TIMESTAMPCOL",
+		"BLOBCOL",
+
+	};
+
+ private static String[][]SQLData =
+	{
+		{NULL_VALUE, "0","1","2"},       // SMALLINT
+		{NULL_VALUE,"0","1","21"},       // INTEGER
+		{NULL_VALUE,"0","1","22"},       // BIGINT
+		{NULL_VALUE,"0.0","1.0","23.0"},      // DECIMAL(10,5)
+		{NULL_VALUE,"0.0","1.0","24.0"},      // REAL,
+		{NULL_VALUE,"0.0","1.0","25.0"},      // DOUBLE
+		{NULL_VALUE,"'0'","'aa'","'2.0'"},      // CHAR(60)
+		{NULL_VALUE,"'0'","'aa'",VALID_TIME_STRING},      //VARCHAR(60)",
+		{NULL_VALUE,"'0'","'aa'",VALID_TIMESTAMP_STRING},      // LONG VARCHAR
+		{NULL_VALUE,"X'10aa'",NULL_VALUE,"X'10aaaa'"},  // CHAR(60)  FOR BIT DATA
+		{NULL_VALUE,"X'10aa'",NULL_VALUE,"X'10aaba'"},  // VARCHAR(60) FOR BIT DATA
+		{NULL_VALUE,"X'10aa'",NULL_VALUE,"X'10aaca'"},  //LONG VARCHAR FOR BIT DATA
+		{NULL_VALUE,"'13'","'14'",NULL_VALUE},     //CLOB(1k)
+		{NULL_VALUE,VALID_DATE_STRING,VALID_DATE_STRING,NULL_VALUE},        // DATE
+		{NULL_VALUE,VALID_TIME_STRING,VALID_TIME_STRING,VALID_TIME_STRING},        // TIME
+		{NULL_VALUE,VALID_TIMESTAMP_STRING,VALID_TIMESTAMP_STRING,VALID_TIMESTAMP_STRING},   // TIMESTAMP
+		{NULL_VALUE,NULL_VALUE,NULL_VALUE,NULL_VALUE}                 // BLOB
+	};
+
+	public static void main(String[] args) throws Throwable {
 
 		isDerbyNet = TestUtil.isNetFramework();
 
@@ -90,7 +163,6 @@ public static void main(String[] args) {
 			stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
 									   ResultSet.CONCUR_UPDATABLE);
 
-			// REMIND: might want a usertype case as well...
 			stmt.execute("create table t (i int, s smallint, r real, "+
 				"d double precision, dt date, t time, ts timestamp, "+
 				"c char(10), v varchar(40) not null, dc dec(10,2),"+
@@ -527,10 +599,12 @@ public static void main(String[] args) {
 
 			testMutableValues(con);
 			testCorrelationNamesAndMetaDataCalls(con);
+			testNullIfAndMetaDataCalls(con);
 			con.close();
 
 		}
 		catch (SQLException e) {
+			System.out.println("FAIL -- unexpected exception: " + e.toString());
 			dumpSQLExceptions(e);
 			e.printStackTrace();
 		}
@@ -543,6 +617,202 @@ public static void main(String[] args) {
     }
 
 
+	//test NULLIF(L,R) with and without parameter and check the return value's data type
+	static private void testNullIfAndMetaDataCalls(Connection conn) throws Throwable
+	{
+		System.out.println("Tests to check metadata information of nullif column");
+		tablesForTestingAllDatatypesCombinations(conn);
+		testAllDatatypesCombinations(conn);
+		testParameterForFirstOperandToNullIf(conn);
+	}
+          
+	public static void testParameterForFirstOperandToNullIf( Connection conn) throws Throwable
+	{
+		System.out.println("Start testing first operand as parameter to nullif");
+		PreparedStatement ps;
+		for (int secondColumnType = 0; secondColumnType < SQLTypes.length; secondColumnType++) {
+			System.out.println("Testing nullif(?,"+SQLTypes[secondColumnType]+")");
+			String nullIfString =
+				new String("SELECT NULLIF(?," + ColumnNames[secondColumnType] +") from AllDataTypesTable");
+			try {
+					ps = conn.prepareStatement(nullIfString);
+					switch(secondColumnType) {
+						case 0:
+						case 1:
+						case 2:
+						case 3:
+						case 4:
+						case 5:
+						case 6:
+						case 7:
+							System.out.println("Testing nullif(?,"+SQLTypes[secondColumnType]+") with setBoolean");
+							ps.setBoolean(1, true);
+							break;
+						case 8: //'LONG VARCHAR'
+						case 11: //'LONG VARCHAR FOR BIT DATA'
+						case 12: //'CLOB'
+						case 16: //'BLOB'
+						//Take specific case of LONG VARCHAR. Prepare of nullif(?,long varchar)
+						//fails early on because at bind time, Derby tries to set ? to
+						//long varchar. But comparison between 2 long varchars is not
+						//supported and hence bind code in BinaryComparisonOperatorNode fails
+						//Similar thing happens for CLOB, BLOB and LONG VARCHAR FOR BIT DATA
+						case 9:
+						case 10:
+							System.out.println("Testing nullif(?,"+SQLTypes[secondColumnType]+") with setBinaryStream");
+							ps.setBinaryStream(1, (java.io.InputStream)null, 1);
+							break;
+						case 13://DATE
+							System.out.println("Testing nullif(?,"+SQLTypes[secondColumnType]+") with setDate");
+							ps.setDate(1, Date.valueOf("2000-01-01"));
+							break;
+						case 14://TIME
+							System.out.println("Testing nullif(?,"+SQLTypes[secondColumnType]+") with setTime");
+							ps.setTime(1, Time.valueOf("15:30:20"));
+							break;
+						case 15://TIMESTAMP
+							System.out.println("Testing nullif(?,"+SQLTypes[secondColumnType]+") with setTimestamp");
+							ps.setTimestamp(1, Timestamp.valueOf("2000-01-01 15:30:20"));
+							break;
+						default: break;
+					}
+					dumpRS(ps.executeQuery());
+			} catch (SQLException e)
+			{
+				dumpSQLExceptions(e);
+			}
+		}
+	}
+
+	public static void testAllDatatypesCombinations( Connection conn) throws Throwable
+	{
+		System.out.println("Start testing all datatypes combinations in NULLIF function");
+		Statement s = conn.createStatement();
+		for (int firstColumnType = 0; firstColumnType < SQLTypes.length; firstColumnType++) {
+			StringBuffer nullIfString = new StringBuffer("SELECT NULLIF(" + ColumnNames[firstColumnType]);
+			for (int secondColumnType = 0; secondColumnType < SQLTypes.length; secondColumnType++) {
+				try {
+					StringBuffer completeNullIfString = new StringBuffer(nullIfString.toString() + "," + ColumnNames[secondColumnType]);
+					System.out.println(completeNullIfString + ") from AllDataTypesTable");
+					dumpRS(s.executeQuery(completeNullIfString + ") from AllDataTypesTable"));
+				} catch (SQLException e)
+				{
+					dumpSQLExceptions(e);
+				}
+			}
+		}
+	}
+
+	public static void tablesForTestingAllDatatypesCombinations( Connection conn) throws Throwable
+	{
+		System.out.println("Set up by creating table for testing all datatypes combinations");
+
+		Statement s = conn.createStatement();
+
+		try {
+			s.executeUpdate("DROP TABLE AllDataTypesTable");
+		}
+		catch(SQLException se) {}
+
+		StringBuffer createSQL = new StringBuffer("create table AllDataTypesTable (");
+		for (int type = 0; type < SQLTypes.length - 1; type++)
+		{
+			createSQL.append(ColumnNames[type] + " " + SQLTypes[type] + ",");
+		}
+		createSQL.append(ColumnNames[SQLTypes.length - 1] + " " + SQLTypes[SQLTypes.length - 1] + ")");
+		System.out.println(createSQL);
+		s.executeUpdate(createSQL.toString());
+
+		for (int row = 0; row < SQLData[0].length; row++)
+		{
+			createSQL = new StringBuffer("insert into AllDataTypesTable values(");
+			for (int type = 0; type < SQLTypes.length - 1; type++)
+			{
+				createSQL.append(SQLData[type][row] + ",");
+			}
+			createSQL.append(SQLData[SQLTypes.length - 1][row]+")");
+			System.out.println(createSQL);
+			s.executeUpdate(createSQL.toString());
+		}
+
+		s.close();
+		conn.commit();
+	}
+
+	public static void dumpRS(ResultSet s) throws SQLException
+	{
+		if (s == null)
+		{
+			System.out.println("<NULL>");
+			return;
+		}
+
+		ResultSetMetaData rsmd = s.getMetaData();
+
+		// Get the number of columns in the result set
+		int numCols = rsmd.getColumnCount();
+
+		if (numCols <= 0)
+		{
+			System.out.println("(no columns!)");
+			return;
+		}
+
+		StringBuffer heading = new StringBuffer("\t ");
+		StringBuffer underline = new StringBuffer("\t ");
+
+		int len;
+		// Display column headings
+		for (int i=1; i<=numCols; i++)
+		{
+			if (i > 1)
+			{
+				heading.append(",");
+				underline.append(" ");
+			}
+			len = heading.length();
+			heading.append("COL"+i);
+			heading.append("(datatype : " + rsmd.getColumnTypeName(i));
+			heading.append(", precision : " + rsmd.getPrecision(i));
+			heading.append(", scale : " + rsmd.getScale(i) + ")");
+			len = heading.length() - len;
+			for (int j = len; j > 0; j--)
+			{
+				underline.append("-");
+			}
+		}
+		System.out.println(heading.toString());
+		System.out.println(underline.toString());
+
+
+		StringBuffer row = new StringBuffer();
+		// Display data, fetching until end of the result set
+		while (s.next())
+		{
+			row.append("\t{");
+			// Loop through each column, getting the
+			// column data and displaying
+			for (int i=1; i<=numCols; i++)
+			{
+				if (i > 1) row.append(",");
+				try{
+				row.append(s.getString(i));
+				} catch(SQLException ex){
+					if (ex.getSQLState().equals("22005")) {
+						if (s.getBytes(i) != null)
+                row.append(new String(s.getBytes(i)));
+						else
+                row.append(s.getBytes(i));
+					} else throw ex;
+				}
+			}
+			row.append("}\n");
+		}
+		System.out.println(row.toString());
+		s.close();
+	}
+
+
 	static private void testCorrelationNamesAndMetaDataCalls(Connection conn) throws Exception
 	{
 		Statement stmt = conn.createStatement();
@@ -657,7 +927,6 @@ private static void showLocks() throws Exception {
 	}
 
 	static private void dumpSQLExceptions (SQLException se) {
-		System.out.println("FAIL -- unexpected exception");
 		while (se != null) {
             JDBCTestDisplayUtil.ShowCommonSQLException(System.out, se);			
 	         se = se.getNextException();
diff --git a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/coalesceTests.java b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/coalesceTests.java
index fa2bf76a..d6afdbaf 100644
--- a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/coalesceTests.java
+++ b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/lang/coalesceTests.java
@@ -149,11 +149,6 @@
 
 	public static void main (String[] argv) throws Throwable
 	{
-		boolean isDB2=false;
-		String framework = System.getProperty("framework");
-		if (framework != null && framework.toUpperCase().equals("DB2JCC"))
-			isDB2 = true;
-
 		ij.getPropertyArg(argv);
 		Connection conn = ij.startJBMS();
 
