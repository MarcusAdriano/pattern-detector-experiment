diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/LimitInputStream.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/LimitInputStream.java
index c162abcc..a55b02f9 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/LimitInputStream.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/LimitInputStream.java
@@ -144,4 +144,18 @@ public int clearLimit() {
 	public void setInput(InputStream in) {
 		this.in = in;
 	}
+
+    /**
+     * This stream doesn't support mark/reset, independent of whether the
+     * underlying stream does so or not.
+     * <p>
+     * The reason for not supporting mark/reset, is that it is hard to combine
+     * with the limit functionality without always keeping track of the number
+     * of bytes read.
+     *
+     * @return {@code false}
+     */
+    public boolean markSupported() {
+        return false;
+    }
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLClob.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLClob.java
index 116bda0d..c77c6c88 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLClob.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SQLClob.java
@@ -26,6 +26,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.jdbc.CharacterStreamDescriptor;
 
 import org.apache.derby.iapi.services.io.ArrayInputStream;
+import org.apache.derby.iapi.services.io.FormatIdInputStream;
 import org.apache.derby.iapi.services.io.InputStreamUtil;
 import org.apache.derby.iapi.services.io.StoredFormatIds;
 
@@ -38,6 +39,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.io.InputStream;
 import java.io.ObjectInput;
 import java.io.ObjectOutput;
+import java.io.PushbackInputStream;
 import java.sql.Clob;
 import java.sql.Date;
 import java.sql.SQLException;
@@ -707,17 +709,30 @@ public void readExternal(ObjectInput in)
             }
             hdrInfo = investigateHeader(header, read);
             if (read > hdrInfo.headerLength()) {
-                // We read too much data, reset and position on the first byte
-                // of the user data.
-                // First see if we set a mark on the stream and can reset it.
-                // If not, try using the Resetable interface.
+                // We read too much data. To "unread" the bytes, the following
+                // mechanisms will be attempted:
+                //  1) See if we set a mark on the stream, if so reset it.
+                //  2) If we have a FormatIdInputStream, use a
+                //     PushBackInputStream and use it as the source.
+                //  3) Try using the Resetable interface.
+                // To avoid silent data truncation / data corruption, we fail
+                // in step three if the stream isn't resetable.
                 if (markSet) {
-                    // Stream is not a store Resetable one, use mark/reset
-                    // functionality instead.
+                    // 1) Reset the stream to the previously set mark.
                     srcIn.reset();
                     InputStreamUtil.skipFully(srcIn, hdrInfo.headerLength());
-                } else if (in instanceof Resetable) {
-                    // We have a store stream.
+                } else if (in instanceof FormatIdInputStream) {
+                    // 2) Add a push back stream on top of the underlying
+                    // source, and unread the surplus bytes we read. Set the
+                    // push back stream to be the source of the data input obj.
+                    final int surplus = read - hdrInfo.headerLength();
+                    FormatIdInputStream formatIn = (FormatIdInputStream)in;
+                    PushbackInputStream pushbackIn = new PushbackInputStream(
+                            formatIn.getInputStream(), surplus);
+                    pushbackIn.unread(header, hdrInfo.headerLength(), surplus);
+                    formatIn.setInput(pushbackIn);
+                } else {
+                    // 3) Assume we have a store stream.
                     rewindStream(srcIn, hdrInfo.headerLength());
                 }
             }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java
index 02c5d119..1ab83e94 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/_Suite.java
@@ -70,6 +70,7 @@ public static Test suite() throws SQLException {
 		suite.addTest(ConnectionMethodsTest.suite());
         suite.addTest(VerifySignatures.suite());
         suite.addTest (LobStreamTest.suite());
+        suite.addTest(LobSortTest.suite());
         suite.addTest (BlobSetMethodsTest.suite());
         suite.addTest (JDBC4FromJDBC3DataSourceTest.suite());
 		
