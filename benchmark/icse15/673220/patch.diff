diff --git a/lucene/java/trunk/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter.java b/lucene/java/trunk/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter.java
index 8d13af2b..7d615d4b 100644
--- a/lucene/java/trunk/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter.java
+++ b/lucene/java/trunk/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter.java
@@ -285,7 +285,7 @@ public final String getBestFragment(TokenStream tokenStream, String text)
 					(lastEndOffset < text.length()) 
 					&&
 //					and that text is not too large...
-					(text.length()< maxDocCharsToAnalyze)
+					(text.length()<= maxDocCharsToAnalyze)
 				)				
 			{
 				//append it to the last fragment
diff --git a/lucene/java/trunk/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java b/lucene/java/trunk/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
index e8d03233..e4cfc7e0 100644
--- a/lucene/java/trunk/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
+++ b/lucene/java/trunk/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
@@ -877,6 +877,27 @@ public void run() throws Exception {
 
   }
 
+  public void testMaxSizeEndHighlight() throws Exception {
+    TestHighlightRunner helper = new TestHighlightRunner() {
+      public void run() throws Exception {
+        String stopWords[] = { "in", "it" };
+        TermQuery query = new TermQuery(new Term("text", "searchterm"));
+
+        String text = "this is a text with searchterm in it";
+        SimpleHTMLFormatter fm = new SimpleHTMLFormatter();
+        Highlighter hg = getHighlighter(query, "text", new StandardAnalyzer(
+            stopWords).tokenStream("text", new StringReader(text)), fm);
+        hg.setTextFragmenter(new NullFragmenter());
+        hg.setMaxDocCharsToAnalyze(36);
+        String match = hg.getBestFragment(new StandardAnalyzer(stopWords), "text", text);
+        assertTrue(
+            "Matched text should contain remainder of text after highlighted query ",
+            match.endsWith("in it"));
+      }
+    };
+    helper.start();
+  }
+
   public void testUnRewrittenQuery() throws Exception {
     TestHighlightRunner helper = new TestHighlightRunner() {
 
