diff --git a/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java b/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
index d23e2b9c..a03079f5 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/net/MessagingService.java
@@ -63,6 +63,7 @@
 
 public final class MessagingService implements MessagingServiceMBean
 {
+    public static final int VERSION_07 = 1;
     public static final int version_ = 2;
     //TODO: make this parameter dynamic somehow.  Not sure if config is appropriate.
     private SerializerType serializerType_ = SerializerType.BINARY;
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/OperationType.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/OperationType.java
index 86a39534..9eafcbfd 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/OperationType.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/OperationType.java
@@ -23,6 +23,8 @@
  */
 public enum OperationType
 {
+    // TODO: the only types of operation that are currently distinguised are AES and everything else.  There is no
+    // sense in having the other types (yet).
     AES,
     BOOTSTRAP,
     UNBOOTSTRAP,
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/PendingFile.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/PendingFile.java
index 0984f2e2..0576f07f 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/PendingFile.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/PendingFile.java
@@ -27,6 +27,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import org.apache.cassandra.net.MessagingService;
 import org.apache.commons.lang.StringUtils;
 
 import org.apache.cassandra.io.ICompactSerializer;
@@ -118,6 +119,7 @@ public void serialize(PendingFile sc, DataOutputStream dos, int version) throws
             {
                 dos.writeLong(section.left); dos.writeLong(section.right);
             }
+            if (version > MessagingService.VERSION_07)
             dos.writeUTF(sc.type.name());
         }
 
@@ -133,7 +135,10 @@ public PendingFile deserialize(DataInputStream dis, int version) throws IOExcept
             List<Pair<Long,Long>> sections = new ArrayList<Pair<Long,Long>>(count);
             for (int i = 0; i < count; i++)
                 sections.add(new Pair<Long,Long>(Long.valueOf(dis.readLong()), Long.valueOf(dis.readLong())));
-            OperationType type = OperationType.valueOf(dis.readUTF());
+            // this controls the way indexes are rebuilt when streaming in.  
+            OperationType type = OperationType.RESTORE_REPLICA_COUNT;
+            if (version > MessagingService.VERSION_07)
+                type = OperationType.valueOf(dis.readUTF());
             return new PendingFile(null, desc, component, sections, type);
         }
     }
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamRequestMessage.java b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamRequestMessage.java
index 9f3cbbc8..17a50060 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamRequestMessage.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/streaming/StreamRequestMessage.java
@@ -33,6 +33,7 @@
 import org.apache.cassandra.net.CompactEndpointSerializationHelper;
 import org.apache.cassandra.net.Message;
 import org.apache.cassandra.net.MessageProducer;
+import org.apache.cassandra.net.MessagingService;
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.utils.FBUtilities;
 
@@ -145,6 +146,7 @@ public void serialize(StreamRequestMessage srm, DataOutputStream dos, int versio
                 {
                     AbstractBounds.serializer().serialize(range, dos);
                 }
+                if (version > MessagingService.VERSION_07)
                 dos.writeUTF(srm.type.name());
             }
         }
@@ -168,7 +170,9 @@ public StreamRequestMessage deserialize(DataInputStream dis, int version) throws
                 {
                     ranges.add((Range) AbstractBounds.serializer().deserialize(dis));
                 }
-                OperationType type = OperationType.valueOf(dis.readUTF());
+                OperationType type = OperationType.RESTORE_REPLICA_COUNT;
+                if (version > MessagingService.VERSION_07)
+                    type = OperationType.valueOf(dis.readUTF());
                 return new StreamRequestMessage(target, ranges, table, sessionId, type);
             }
         }
diff --git a/cassandra/trunk/test/unit/org/apache/cassandra/streaming/SerializationsTest.java b/cassandra/trunk/test/unit/org/apache/cassandra/streaming/SerializationsTest.java
index f72e51be..7a74e2e7 100644
--- a/cassandra/trunk/test/unit/org/apache/cassandra/streaming/SerializationsTest.java
+++ b/cassandra/trunk/test/unit/org/apache/cassandra/streaming/SerializationsTest.java
@@ -62,7 +62,7 @@ private void testPendingFileWrite() throws IOException
         out.close();
     }
     
-    @Test @Ignore
+    @Test
     public void testPendingFileRead() throws IOException
     {
         if (EXECUTE_WRITES)
@@ -96,7 +96,7 @@ private void testStreamHeaderWrite() throws IOException
         out.close();
     }
     
-    @Test @Ignore
+    @Test
     public void testStreamHeaderRead() throws IOException
     {
         if (EXECUTE_WRITES)
@@ -160,7 +160,7 @@ private void testStreamRequestMessageWrite() throws IOException
         out.close();
     }
     
-    @Test @Ignore
+    @Test
     public void testStreamRequestMessageRead() throws IOException
     {
         if (EXECUTE_WRITES)
