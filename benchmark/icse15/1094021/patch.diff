diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java
index 3a125b33..03ba570b 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/search/ExtendedDismaxQParserPlugin.java
@@ -235,6 +235,7 @@ public Query parse() throws ParseException {
 
       try {
         up.setRemoveStopFilter(!stopwords);
+        up.exceptions = true;
         parsedUserQuery = up.parse(mainUserQuery);
 
         if (stopwords && isEmpty(parsedUserQuery)) {
@@ -244,6 +245,7 @@ public Query parse() throws ParseException {
         }
       } catch (Exception e) {
         // ignore failure and reparse later after escaping reserved chars
+        up.exceptions = false;
       }
 
       if (parsedUserQuery != null && doMinMatched) {
@@ -786,12 +788,19 @@ public String getFieldName(String s, int pos, int end) {
       RANGE
     }
 
+
+  static final RuntimeException unknownField = new RuntimeException("UnknownField");
+  static {
+    unknownField.fillInStackTrace();
+  }
+
   /**
    * A subclass of SolrQueryParser that supports aliasing fields for
    * constructing DisjunctionMaxQueries.
    */
   class ExtendedSolrQueryParser extends SolrQueryParser {
 
+
     /** A simple container for storing alias info
      */
     protected class Alias {
@@ -804,6 +813,7 @@ public String getFieldName(String s, int pos, int end) {
     boolean allowWildcard=true;
     int minClauseSize = 0;    // minimum number of clauses per phrase query...
                               // used when constructing boosting part of query via sloppy phrases
+    boolean exceptions;  //  allow exceptions to be thrown (for example on a missing field)
 
     ExtendedAnalyzer analyzer;
 
@@ -981,6 +991,15 @@ protected Query getAliasedQuery()
           return q;
         }
       } else {
+
+        // verify that a fielded query is actually on a field that exists... if not,
+        // then throw an exception to get us out of here, and we'll treat it like a
+        // literal when we try the escape+re-parse.
+        if (exceptions) {
+          FieldType ft = schema.getFieldTypeNoEx(field);
+          if (ft == null) throw unknownField;
+        }
+
         return getQuery();
       }
     }
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/TestExtendedDismaxParser.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/TestExtendedDismaxParser.java
index ec0a7e3e..6d0dbf90 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/TestExtendedDismaxParser.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/TestExtendedDismaxParser.java
@@ -49,8 +49,13 @@ public void testFocusQueryParser() {
             "name", "The Zapper"));
     assertU(adoc("id", "45", "trait_ss", "Chauvinist",
             "title", "25 star General"));
-    assertU(adoc("id", "46", "trait_ss", "Obnoxious",
-            "subject", "Defeated the pacifists op the Gandhi nebula"));
+    assertU(adoc("id", "46", 
+                 "trait_ss", "Obnoxious",
+                 "subject", "Defeated the pacifists op the Gandhi nebula",
+                 "t_special", "literal:colon value",
+                 "movies_t", "first is Mission: Impossible, second is Terminator 2: Judgement Day.  Terminator:3 ok...",
+                 "foo_i", "8"
+    ));
     assertU(adoc("id", "47", "trait_ss", "Pig",
             "text", "line up and fly directly at the enemy death cannons, clogging them with wreckage!"));
     assertU(adoc("id", "48", "text_sw", "this has gigabyte potential", "foo_i","100"));
@@ -64,6 +69,11 @@ public void testFocusQueryParser() {
     String twor = "*[count(//doc)=2]";
     String nor = "*[count(//doc)=0]";
 
+  assertQ("expected doc is missing (using un-escaped edismax w/qf)",
+          req("q", "literal:colon", 
+              "qf", "t_special",
+              "defType", "edismax"),
+          "//doc[1]/str[@name='id'][.='46']"); 
 
     assertQ("standard request handler returns all matches",
             req(allq),
@@ -154,6 +164,58 @@ public void testFocusQueryParser() {
            "q","the big"), oner
     );
 
+    // searching for a literal colon value when clearly not used for a field
+    assertQ("expected doc is missing (using standard)",
+            req("q", "t_special:literal\\:colon"),
+            "//doc[1]/str[@name='id'][.='46']"); 
+    assertQ("expected doc is missing (using escaped edismax w/field)",
+            req("q", "t_special:literal\\:colon", 
+                "defType", "edismax"),
+            "//doc[1]/str[@name='id'][.='46']"); 
+    assertQ("expected doc is missing (using un-escaped edismax w/field)",
+            req("q", "t_special:literal:colon", 
+                "defType", "edismax"),
+            "//doc[1]/str[@name='id'][.='46']"); 
+    assertQ("expected doc is missing (using escaped edismax w/qf)",
+            req("q", "literal\\:colon", 
+                "qf", "t_special",
+                "defType", "edismax"),
+            "//doc[1]/str[@name='id'][.='46']"); 
+    assertQ("expected doc is missing (using un-escaped edismax w/qf)",
+            req("q", "literal:colon", 
+                "qf", "t_special",
+                "defType", "edismax"),
+            "//doc[1]/str[@name='id'][.='46']");
+
+    assertQ(req("defType","edismax", "mm","100%", "q","terminator:3", "qf","movies_t"),
+            oner);
+    assertQ(req("defType","edismax", "mm","100%", "q","Mission:Impossible", "qf","movies_t"),
+            oner);
+    assertQ(req("defType","edismax", "mm","100%", "q","Mission : Impossible", "qf","movies_t"),
+            oner);
+    assertQ(req("defType","edismax", "mm","100%", "q","Mission: Impossible", "qf","movies_t"),
+            oner);
+    assertQ(req("defType","edismax", "mm","100%", "q","Terminator 2: Judgement Day", "qf","movies_t"),
+            oner);
+
+    // make sure the clause wasn't eliminated
+    assertQ(req("defType","edismax", "mm","100%", "q","Terminator 10: Judgement Day", "qf","movies_t"),
+            nor);
+
+    // throw in a numeric field
+    assertQ(req("defType","edismax", "mm","0", "q","Terminator: 100", "qf","movies_t foo_i"),
+            twor);
+
+    assertQ(req("defType","edismax", "mm","100%", "q","Terminator: 100", "qf","movies_t foo_i"),
+            nor);
+
+    assertQ(req("defType","edismax", "mm","100%", "q","Terminator: 8", "qf","movies_t foo_i"),
+            oner);
+
+    assertQ(req("defType","edismax", "mm","0", "q","movies_t:Terminator 100", "qf","movies_t foo_i"),
+            twor);
+
+
     /** stopword removal in conjunction with multi-word synonyms at query time
      * break this test.
      // multi-word synonyms
