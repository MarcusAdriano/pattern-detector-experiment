diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
index 80a0145b..a410210f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromBaseTable.java
@@ -2721,7 +2721,8 @@ else if (isOneRowResultSet())
 		}
 		
 		/* No need to go to the data page if this is a covering index */
-		if (ap.getCoveringIndexScan())
+		/* Derby-1087: use data page when returning an updatable resultset */
+		if (ap.getCoveringIndexScan() && (!cursorTargetTable()))
 		{
 			/* Massage resultColumns so that it matches the index. */
 			resultColumns = newResultColumns(resultColumns,
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/IndexRowToBaseRowResultSet.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/IndexRowToBaseRowResultSet.java
index 281e7c30..ed79b47e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/IndexRowToBaseRowResultSet.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/IndexRowToBaseRowResultSet.java
@@ -105,17 +105,6 @@
 	protected boolean currentRowPrescanned;
 	private boolean sourceIsForUpdateIndexScan;
 
-	// for scrollable insensitive updatable result sets, the rowLocation of each
-	// row is stored in a hash table, and used to position the scan by calling 
-	// the method positionScanAtRowLocation. When this method is called, the 
-	// baseRowLocation will be set to the value of the cached rowLocation, and
-	// it will not be necessary to read the row from the B-tree in order to get
-	// the rowLocation of the current row.
-	// If positionFromRowLocation is true, then baseRowLocation can be used for
-	// fetching the currentRow, and it is not necessary to read the rowLocation
-	// from the B-tree, otherwise, the rowLocation must be read from the B-tree.
-	private boolean positionFromRowLocation;
-
     //
     // class interface
     //
@@ -223,7 +212,6 @@ public IndexRowToBaseRowResultSet(
 		}
 
 		constructorTime += getElapsedMillis(beginTime);
-		this.positionFromRowLocation = false;
 
     }
 
@@ -614,7 +602,6 @@ public void positionScanAtRowLocation(RowLocation rl)
 		throws StandardException 
 	{
 		baseRowLocation = rl;
-		positionFromRowLocation = true;
 		source.positionScanAtRowLocation(rl);
 	}
 
@@ -645,10 +632,9 @@ public ExecRow getCurrentRow() throws StandardException {
 			return null;
 		}
 
-		// If positionFromRowLocation is true, we can use the baseRowLocation
-		// directly and do not need to read the rowLocation from the b-tree
-		// before fetching the row.
-		if (positionFromRowLocation) {
+		// We do not need to read the row from the index first, since we already 
+		// have the rowLocation of the current row and can read it directly from 
+		// the heap.
 			sourceRow = activation.getExecutionFactory().
 					getValueRow(indexCols.length);
 			sourceRow.setRowArray(rowArray);
@@ -665,67 +651,6 @@ public ExecRow getCurrentRow() throws StandardException {
 			return currentRow;
 		}
 		
-		/* Call the child result set to get it's current row.
-		 * If no row exists, then return null, else requalify it
-		 * before returning.
-		 */
-		sourceRow = ((CursorResultSet) source).getCurrentRow();
-		if (sourceRow != null)
-		{
-			/*
-			** Presumably, if the index row is still there, the RowLocation
-			** it contains is still valid.  This means we don't have to
-			** check whether the row is still there.
-			*/
-			if (SanityManager.DEBUG) {
-				SanityManager.ASSERT(
-					sourceRow.getColumn(sourceRow.nColumns())
-														instanceof RowLocation,
-					"Last column of source row is not a RowLocation"
-						);
-			}
-
-			baseRowLocation = (RowLocation)
-						sourceRow.getColumn(sourceRow.nColumns());
-
-			// Fetch the columns coming from the heap
-			boolean row_exists = 
-                baseCC.fetch(
-                    baseRowLocation, rowArray, (FormatableBitSet) null);
-
-            if (row_exists)
-            {
-				// Copy the columns coming from the index into resultRow
-				for (int index = 0; index < indexCols.length; index++)
-				{
-					if (indexCols[index] != -1)
-					{
-						compactRow.setColumn(
-										index + 1,
-										sourceRow.getColumn(indexCols[index] + 1));
-					}
-				}
-
-                setCurrentRow(compactRow);
-
-                currentRow = compactRow;
-            }
-            else
-            {
-                clearCurrentRow();
-
-                currentRow = null;
-            }
-
-        } else {
-			clearCurrentRow();
-
-			currentRow = null;
-		}
-		
-		return currentRow;
-	}
-
 	/**
 	 * Is this ResultSet or it's source result set for update.
 	 * beetle 3865: updateable cursor using index scan.  We didn't need this function
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/URCoveringIndexTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/URCoveringIndexTest.java
index e69de29b..7efa07b5 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/URCoveringIndexTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/URCoveringIndexTest.java
@@ -0,0 +1,153 @@
+/*
+ *
+ * Derby - Class URCoveringIndexTest
+ *
+ * Copyright 2006 The Apache Software Foundation or its 
+ * licensors, as applicable.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, 
+ * software distributed under the License is distributed on an 
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
+ * either express or implied. See the License for the specific 
+ * language governing permissions and limitations under the License.
+ */
+package org.apache.derbyTesting.functionTests.tests.jdbcapi;
+import org.apache.derbyTesting.functionTests.util.TestUtil;
+import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
+import junit.framework.*;
+import java.sql.*;
+
+/**
+ * Tests updatable result sets when there is a index that includes all data for 
+ * the query (covering index).
+ *
+ * DERBY-1087
+ *
+ * @author Fernanda Pizzorno
+ */
+public class URCoveringIndexTest extends BaseJDBCTestCase {
+    
+    /** Creates a new instance of SURBaseTest */
+    public URCoveringIndexTest(String name) {
+        super(name);
+    }
+
+    /**
+     * Set up the connection to the database.
+     */
+    public void setUp() throws  Exception {       
+        con = getConnection();
+        con.setAutoCommit(false);
+
+        String createTableWithPK = "CREATE TABLE tableWithPK (" +
+                "c1 int primary key," +
+                "c2 int)";
+        String insertData = "INSERT INTO tableWithPK values (1, 1)";
+        Statement stmt = con.createStatement();
+        stmt.execute(createTableWithPK);
+        
+        stmt.execute(insertData);
+    }
+    
+    /**
+     * Rollback the transaction
+     */
+    public void tearDown() throws Exception {
+        println("TearDown");
+        try { 
+            con.rollback();
+            con.close();
+        } catch (SQLException e) {
+            printStackTrace(e);
+        }      
+    }
+    
+    private void testUpdateUpdatedTupleWithCoveringIndex(
+            boolean scroll,
+            boolean usePositionedUpdate) throws SQLException{
+        
+        SQLWarning w = null;
+        int resultsetType = scroll ? ResultSet.TYPE_SCROLL_INSENSITIVE :
+                ResultSet.TYPE_FORWARD_ONLY;
+        
+        if (!(con.getMetaData().supportsResultSetConcurrency(resultsetType,
+                ResultSet.CONCUR_UPDATABLE))) {
+            return;
+        }
+
+            
+        Statement updStmt = con.createStatement(resultsetType, 
+                ResultSet.CONCUR_UPDATABLE);
+        Statement roStmt = con.createStatement();
+        
+        ResultSet rs = updStmt.executeQuery("SELECT c1 FROM tableWithPK");
+        rs.next();
+        int orig_c1 = rs.getInt(1);
+        roStmt.executeUpdate("UPDATE tableWithPK SET c1 = " + 
+                (orig_c1 + 10) + "WHERE c1 = " + rs.getInt(1));
+        rs.clearWarnings();
+        if (usePositionedUpdate) {
+            roStmt.executeUpdate("UPDATE tableWithPK set c1 = " + 
+                    (orig_c1 + 20) + "WHERE CURRENT OF " + 
+                    rs.getCursorName());
+            w = roStmt.getWarnings();
+        } else {
+            rs.updateInt(1, (orig_c1 + 20));
+            rs.updateRow();
+            w = rs.getWarnings();
+        }
+        assertTrue("Update should not produce any warnings ", w == null);
+        rs.close();
+        
+        rs = roStmt.executeQuery("SELECT c1 FROM tableWithPK");
+        rs.next();
+        assertEquals("Expecting c1 to be " + orig_c1 + " + 20", 
+                rs.getInt(1), (orig_c1 + 20));
+        rs.close();
+        roStmt.close();
+        updStmt.close();
+
+    }
+
+    /**
+     * Updates a previously updated row with a covering index using positioned
+     * updates and scrollable result sets.
+     */
+    public void testUpdateUpdatedTupleScrollPostitioned()  throws SQLException{
+        testUpdateUpdatedTupleWithCoveringIndex(true, true);
+    }
+
+    /**
+     * Updates a previously updated row with a covering index using updateRow
+     * and scrollable result sets.
+     */
+    public void testUpdateUpdatedTupleScrollUpdateRow()  throws SQLException{
+        testUpdateUpdatedTupleWithCoveringIndex(true, false);
+    }
+
+    /**
+     * Updates a previously updated row with a covering index using positioned
+     * updates and forward only result sets.
+     */
+    public void testUpdateUpdatedTupleFOPositioned()  throws SQLException{
+        testUpdateUpdatedTupleWithCoveringIndex(false, true);
+    }
+
+    /**
+     * Updates a previously updated row with a covering index using updateRow
+     * and forward only result sets.
+     */
+    public void testUpdateUpdatedTupleFOUpdateRow()  throws SQLException{
+        testUpdateUpdatedTupleWithCoveringIndex(false, false);
+    }
+
+
+    protected Connection con = null; // Connection established in setUp()
+       
+}
