diff --git a/lucene/java/trunk/src/java/org/apache/lucene/queryParser/QueryParser.java b/lucene/java/trunk/src/java/org/apache/lucene/queryParser/QueryParser.java
index 6ebc32b2..aa627c6e 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/queryParser/QueryParser.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/queryParser/QueryParser.java
@@ -12,7 +12,7 @@
 
 /**
  * This class is generated by JavaCC.  The only method that clients should need
- * to call is <a href="#parse">parse()</a>.
+ * to call is {@link #parse(String)} or {@link #parse(String, String, Analyzer)}.
  *
  * The syntax for query strings is as follows:
  * A Query is a series of clauses.
@@ -40,7 +40,8 @@
  *
  * <p>
  * Examples of appropriately formatted queries can be found in the <a
- * href="http://jakarta.apache.org/lucene/src/test/org/apache/lucene/queryParser/TestQueryParser.java">test cases</a>.
+ * href="http://jakarta.apache.org/lucene/docs/queryparsersyntax.html">query syntax
+ * documentation</a>.
  * </p>
  *
  * @author Brian Goetz
@@ -64,10 +65,6 @@
   /** The actual operator that parser uses to combine query terms */
   private int operator = DEFAULT_OPERATOR_OR;
 
-  /**
-   * Whether terms of wildcard and prefix queries are to be automatically
-   * lower-cased or not.  Default is <code>true</code>.
-   */
   boolean lowercaseWildcardTerms = true;
 
   Analyzer analyzer;
@@ -99,8 +96,7 @@ public QueryParser(String f, Analyzer a) {
     field = f;
   }
 
-  /** Parses a query string, returning a
-   * <a href="lucene.search.Query.html">Query</a>.
+  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.
    *  @param query  the query string to be parsed.
    *  @throws ParseException if the parsing fails
    */
@@ -155,7 +151,7 @@ public int getFuzzyPrefixLength() {
   }
 
   /**
-   * Set the prefix length for fuzzy queries. Default is 2.
+   * Set the prefix length for fuzzy queries. Default is 0.
    * @param fuzzyPrefixLength The fuzzyPrefixLength to set.
    */
   public void setFuzzyPrefixLength(int fuzzyPrefixLength) {
@@ -179,7 +175,7 @@ public int getPhraseSlop() {
 
   /**
    * Sets the boolean operator of the QueryParser.
-   * In classic mode (<code>DEFAULT_OPERATOR_OR</code>) terms without any modifiers
+   * In default mode (<code>DEFAULT_OPERATOR_OR</code>) terms without any modifiers
    * are considered optional: for example <code>capital of Hungary</code> is equal to
    * <code>capital OR of OR Hungary</code>.<br/>
    * In <code>DEFAULT_OPERATOR_AND</code> terms are considered to be in conjuction: the
@@ -197,10 +193,17 @@ public int getOperator() {
     return operator;
   }
 
+  /**
+   * Whether terms of wildcard and prefix queries are to be automatically
+   * lower-cased or not.  Default is <code>true</code>.
+   */
   public void setLowercaseWildcardTerms(boolean lowercaseWildcardTerms) {
     this.lowercaseWildcardTerms = lowercaseWildcardTerms;
   }
 
+  /**
+   * @see #setLowercaseWildcardTerms(boolean)
+   */
   public boolean getLowercaseWildcardTerms() {
     return lowercaseWildcardTerms;
   }
@@ -450,7 +453,7 @@ protected Query getWildcardQuery(String field, String termStr) throws ParseExcep
 
   /**
    * Factory method for generating a query (similar to
-   * ({@link #getWildcardQuery}). Called when parser parses an input term
+   * {@link #getWildcardQuery}). Called when parser parses an input term
    * token that uses prefix notation; that is, contains a single '*' wildcard
    * character as its last character. Since this is a special case
    * of generic wildcard term, and such a query can be optimized easily,
@@ -489,7 +492,7 @@ protected Query getFuzzyQuery(String field, String termStr) throws ParseExceptio
 
    /**
    * Factory method for generating a query (similar to
-   * ({@link #getWildcardQuery}). Called when parser parses
+   * {@link #getWildcardQuery}). Called when parser parses
    * an input term token that has the fuzzy suffix (~) appended.
    *
    * @param field Name of the field query will use.
@@ -539,7 +542,16 @@ public static String escape(String s) {
     return sb.toString();
   }
 
+  /**
+   * Command line tool to test QueryParser, using {@link org.apache.lucene.analysis.SimpleAnalyzer}.
+   * Usage:<br>
+   * <code>java org.apache.lucene.queryParser.QueryParser &lt;input&gt;</code>
+   */
   public static void main(String[] args) throws Exception {
+    if (args.length == 0) {
+      System.out.println("Usage: java org.apache.lucene.queryParser.QueryParser <input>");
+      System.exit(0);
+    }
     QueryParser qp = new QueryParser("field",
                            new org.apache.lucene.analysis.SimpleAnalyzer());
     Query q = qp.parse(args[0]);
