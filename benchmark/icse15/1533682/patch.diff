diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java
index 370ccc81..5cf8674c 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/raw/data/AllocExtent.java
@@ -207,7 +207,6 @@ protected AllocExtent(long offset, // physical offset
 							"length " + length + " > maxlength " + maxlength);
 		}
 
-
 		this.extentOffset = offset;
 		this.extentStart = start;
 		this.extentEnd = start+maxlength-1;
@@ -575,7 +574,7 @@ protected void compressPages(
             }
         }
 
-        if (new_highest_page >= 0)
+        if (new_highest_page + 1 >= 0)
         {
             freePages.shrink(new_highest_page + 1);
             unFilledPages.shrink(new_highest_page + 1);
diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java
index 530b0223..2ed21ffa 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/impl/store/raw/data/AllocPage.java
@@ -1070,15 +1070,15 @@ protected boolean compress(
 			SanityManager.ASSERT(isLatched(), "page is not latched");
         }
 
-        int last_valid_page = extent.compress(owner, ntt, this);
+        int last_valid_page_bit = extent.compress(owner, ntt, this);
 
-        if (last_valid_page >= 0)
+        if (last_valid_page_bit >= 0)
         {
             // a non-negative return means that pages can be returned to
             // the operating system.
-            myContainer.truncatePages(extent.getPagenum(last_valid_page));
+            myContainer.truncatePages(extent.getPagenum(last_valid_page_bit));
 
-            if (last_valid_page == this.getPageNumber())
+            if (last_valid_page_bit == 0)
             {
                 // all pages of the extent have been returned to OS.
                 all_pages_compressed = true;
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby5234Test.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby5234Test.java
index e69de29b..06118b97 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby5234Test.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/Derby5234Test.java
@@ -0,0 +1,245 @@
+/*
+  Class org.apache.derbyTesting.functionTests.tests.store.Derby5234Test
+
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to you under the Apache License, Version 2.0
+  (the "License"); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+
+  http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+
+*/
+
+package org.apache.derbyTesting.functionTests.tests.store;
+
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.SQLException;
+
+import junit.framework.Test;
+
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.TestConfiguration;
+
+/**
+ * Regression test for DERBY-5234.
+ */
+public class Derby5234Test extends BaseJDBCTestCase
+{
+    ///////////////////////////////////////////////////////////////////////////////////
+    //
+    // CONSTANTS
+    //
+    ///////////////////////////////////////////////////////////////////////////////////
+
+    // this number of rows will force Derby to grab a second allocation page for the table
+    private static  final   long    ITERATIONS = 12500;
+
+    // highest row count which does NOT trip the bug
+    private static  final   long    MAX_KEY_PER_FIRST_EXTENT = 10217L;
+
+    private static  final   int     VARCHAR_LENGTH = 2000;
+    private static  final   String  SEED = "0123456789";
+
+    ///////////////////////////////////////////////////////////////////////////////////
+    //
+    // STATE
+    //
+    ///////////////////////////////////////////////////////////////////////////////////
+
+    ///////////////////////////////////////////////////////////////////////////////////
+    //
+    // CONSTRUCTOR
+    //
+    ///////////////////////////////////////////////////////////////////////////////////
+
+    public Derby5234Test(String name)
+    {
+        super(name);
+    }
+
+    ///////////////////////////////////////////////////////////////////////////////////
+    //
+    // JUnit BEHAVIOR
+    //
+    ///////////////////////////////////////////////////////////////////////////////////
+
+    /** Create a suite of tests. */
+    public static Test suite()
+    {
+        return TestConfiguration.defaultSuite( Derby5234Test.class );
+    }
+
+    // do this for each test case
+    protected void setUp() throws Exception
+    {
+        super.setUp();
+        
+        goodStatement
+            (
+             getConnection(),
+             "create table t5234( a bigint, b varchar( " + VARCHAR_LENGTH + " ) )"
+             );
+    }
+    protected void tearDown() throws Exception
+    {
+        goodStatement
+            (
+             getConnection(),
+             "drop table t5234"
+             );
+        
+        super.tearDown();
+    }
+    
+    ///////////////////////////////////////////////////////////////////////////////////
+    //
+    // TESTS
+    //
+    ///////////////////////////////////////////////////////////////////////////////////
+
+    /**
+     * <p>
+     * Basic test case for DERBY-5234. Test that the last allocation page
+     * remembers which pages have been released to the operating system.
+     * </p>
+     */
+    public void test_01_basic() throws Exception
+    {
+        vetBasic( ITERATIONS );
+    }
+    private void vetBasic( long rowCount ) throws Exception
+    {
+        Connection  conn = getConnection();
+
+        // this makes the test run faster
+        boolean oldAutoCommit = conn.getAutoCommit();
+        conn.setAutoCommit( false );
+
+        insertRows( conn, rowCount );
+        deleteRows( conn );
+        compressTable( conn );
+
+        // the bug would cause the second round of insertions to write
+        // beyond the end of the file
+        insertRows( conn, rowCount );
+        
+        conn.setAutoCommit( oldAutoCommit );
+    }
+    /** Fill the table with enough rows to force Derby to grab a second allocation page */
+    private void    insertRows( Connection conn, long iterations )
+        throws Exception
+    {
+        PreparedStatement insert = chattyPrepare
+            (
+             conn,
+             "insert into t5234( a, b ) values ( ?, ? )"
+             );
+        String          varcharValue = makeVarcharValue();
+
+        long    percent = 0L;
+        for ( long i = 0; i < iterations; i++)
+        {
+            if ( (i * 10) / iterations  > percent)
+            {
+                conn.commit();
+                percent++;
+            }
+
+            insert.setLong( 1, i );
+            insert.setString( 2, varcharValue );
+            insert.executeUpdate();
+        }
+        
+        conn.commit();
+    }
+    private String    makeVarcharValue()
+    {
+        StringBuffer    buffer = new StringBuffer();
+        int                 count = VARCHAR_LENGTH / SEED.length();
+
+        for ( int i = 0; i < count; i++ ) { buffer.append( SEED ); }
+
+        return buffer.toString();
+    }
+    private void deleteRows( Connection conn )
+        throws Exception
+    {
+        goodStatement
+            (
+             conn,
+             "delete from t5234"
+             );
+        
+        conn.commit();
+    }
+    private void compressTable( Connection conn )
+        throws Exception
+    {
+        goodStatement
+            (
+             conn,
+             "call syscs_util.syscs_inplace_compress_table( 'APP', 'T5234', 0, 0, 1 )"
+             );
+
+        conn.commit();
+    }
+
+    /**
+     * <p>
+     * Test with the highest row count which did NOT trip the bug.
+     * </p>
+     */
+    public void test_02_maxOK() throws Exception
+    {
+        vetBasic( MAX_KEY_PER_FIRST_EXTENT );
+    }
+    
+    /**
+     * <p>
+     * Test with one more than the highest good value.
+     * </p>
+     */
+    public void test_03_triggeringEdge() throws Exception
+    {
+        vetBasic( MAX_KEY_PER_FIRST_EXTENT + 1L );
+    }
+    
+    ///////////////////////////////////////////////////////////////////////////////////
+    //
+    // HELPER METHODS
+    //
+    ///////////////////////////////////////////////////////////////////////////////////
+
+    /**
+     * Run a successful statement.
+     * @throws SQLException 
+     */
+    private void    goodStatement( Connection conn, String command ) throws SQLException
+    {
+        PreparedStatement    ps = chattyPrepare( conn, command );
+
+        ps.execute();
+        ps.close();
+    }
+    
+    /**
+     * Prepare a statement and report its sql text.
+     */
+    private PreparedStatement   chattyPrepare( Connection conn, String text )
+        throws SQLException
+    {
+        println( "Preparing statement:\n\t" + text );
+        
+        return conn.prepareStatement( text );
+    }
+
+}
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java
index 9bbaa9f3..6f59d2c7 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/store/_Suite.java
@@ -65,6 +65,7 @@ public static Test suite() {
         suite.addTest(LiveLockTest.suite());
         suite.addTest(ClobReclamationTest.suite());
         suite.addTest(IndexSplitDeadlockTest.suite());
+        suite.addTest(Derby5234Test.suite());
 
         // Encryption only supported for Derby in J2SE/J2EE environments.
         // J2ME (JSR169) does not support encryption.
