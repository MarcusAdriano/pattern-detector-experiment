diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java
index f53fed32..6c624a11 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java
@@ -80,10 +80,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  *       query expression a single time per statement, instead of
  *       having to do it for every row against which the query
  *       is evaluated.  An instance of this class is created at
- *       compile time and then passed (using "saved objects")
- *       to the appropriate operator implementation method in
- *       XML.java; see SqlXmlExecutor.java for more about the
- *       role this class plays in "saved object" processing.
+ *       compile time and then passed to the appropriate operator
+ *       implementation method in XML.java.
  *
  *    2. By keeping all XML-specific references in this one class, 
  *       we have a single "point of entry" to the XML objects--namely,
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/XML.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/XML.java
index 154f31f2..332d87de 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/XML.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/XML.java
@@ -598,7 +598,7 @@ public void loadStream() throws StandardException
      * store the _serialized_ version locally and then return
      * this XMLDataValue.
      *
-     * @param text The string value to check.
+     * @param stringValue The string value to check.
      * @param preserveWS Whether or not to preserve
      *  ignorable whitespace.
      * @param sqlxUtil Contains SQL/XML objects and util
@@ -609,9 +609,18 @@ public void loadStream() throws StandardException
      *  value is returned; otherwise, an exception is thrown. 
      * @exception StandardException Thrown on error.
      */
-    public XMLDataValue XMLParse(String text, boolean preserveWS,
-        SqlXmlUtil sqlxUtil) throws StandardException
+    public XMLDataValue XMLParse(
+            StringDataValue stringValue,
+            boolean preserveWS,
+            SqlXmlUtil sqlxUtil)
+        throws StandardException
     {
+        if (stringValue.isNull()) {
+            setToNull();
+            return this;
+        }
+
+        String text = stringValue.getString();
         try {
 
             if (preserveWS) {
@@ -834,10 +843,10 @@ public BooleanDataValue XMLExists(SqlXmlUtil sqlxUtil)
      * the received XMLDataValue "result" param (assuming "result" is
      * non-null; else create a new XMLDataValue).
      *
-     * @param result The result of a previous call to this method; null
-     *  if not called yet.
      * @param sqlxUtil Contains SQL/XML objects and util methods that
      *  facilitate execution of XML-related operations
+     * @param result The result of a previous call to this method; null
+     *  if not called yet.
      * @return An XMLDataValue whose content corresponds to the serialized
      *  version of the results from evaluation of the query expression.
      *  Note: this XMLDataValue may not be storable into Derby XML
@@ -845,8 +854,8 @@ public BooleanDataValue XMLExists(SqlXmlUtil sqlxUtil)
      * @exception Exception thrown on error (and turned into a
      *  StandardException by the caller).
      */
-    public XMLDataValue XMLQuery(XMLDataValue result,
-        SqlXmlUtil sqlxUtil) throws StandardException
+    public XMLDataValue XMLQuery(SqlXmlUtil sqlxUtil, XMLDataValue result)
+            throws StandardException
     {
         if (this.isNull()) {
         // if the context is null, we return null,
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/XMLDataValue.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/XMLDataValue.java
index 5ff48d14..890438b8 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/XMLDataValue.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/XMLDataValue.java
@@ -30,7 +30,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      * store the _serialized_ version locally and then return
      * this XMLDataValue.
      *
-     * @param text The string value to check.
+     * @param stringValue The string value to check.
      * @param preserveWS Whether or not to preserve
      *  ignorable whitespace.
      * @param sqlxUtil Contains SQL/XML objects and util
@@ -41,8 +41,11 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      *  value returned; otherwise, an exception is thrown. 
      * @exception StandardException Thrown on error.
      */
-	public XMLDataValue XMLParse(String text, boolean preserveWS,
-		SqlXmlUtil sqlxUtil) throws StandardException;
+    public XMLDataValue XMLParse(
+            StringDataValue stringValue,
+            boolean preserveWS,
+            SqlXmlUtil sqlxUtil)
+        throws StandardException;
 
     /**
      * The SQL/XML XMLSerialize operator.
@@ -90,10 +93,10 @@ public BooleanDataValue XMLExists(SqlXmlUtil sqlxUtil)
      * the received XMLDataValue "result" param (assuming "result" is
      * non-null; else create a new XMLDataValue).
      *
-     * @param result The result of a previous call to this method; null
-     *  if not called yet.
      * @param sqlxUtil Contains SQL/XML objects and util methods that
      *  facilitate execution of XML-related operations
+     * @param result The result of a previous call to this method; null
+     *  if not called yet.
      * @return An XMLDataValue whose content corresponds to the serialized
      *  version of the results from evaluation of the query expression.
      *  Note: this XMLDataValue may not be storable into Derby XML
@@ -101,7 +104,7 @@ public BooleanDataValue XMLExists(SqlXmlUtil sqlxUtil)
      * @exception Exception thrown on error (and turned into a
      *  StandardException by the caller).
      */
-    public XMLDataValue XMLQuery(XMLDataValue result, SqlXmlUtil sqlxUtil)
+    public XMLDataValue XMLQuery(SqlXmlUtil sqlxUtil, XMLDataValue result)
 		throws StandardException;
 
     /* ****
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java
index e810f4ba..f160f445 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryOperatorNode.java
@@ -483,30 +483,15 @@ public void generateExpression(ExpressionClassBuilder acb,
 ** but how?
 */
 
+        // The number of arguments to pass to the method that implements the
+        // operator, depends on the type of the operator.
+        int numArgs;
+
 		// If we're dealing with XMLEXISTS or XMLQUERY, there is some
 		// additional work to be done.
 		boolean xmlGen =
 			(operatorType == XMLQUERY_OP) || (operatorType == XMLEXISTS_OP);
 
-		if (xmlGen) {
-		// We create an execution-time object so that we can retrieve
-		// saved objects (esp. our compiled query expression) from
-		// the activation.  We do this for two reasons: 1) this level
-		// of indirection allows us to separate the XML data type
-		// from the required XML implementation classes (esp. JAXP
-		// and Xalan classes)--for more on how this works, see the
-		// comments in SqlXmlUtil.java; and 2) we can take
-		// the XML query expression, which we've already compiled,
-		// and pass it to the execution-time object for each row,
-		// which means that we only have to compile the query
-		// expression once per SQL statement (instead of once per
-		// row); see SqlXmlExecutor.java for more.
-			mb.pushNewStart(
-				"org.apache.derby.impl.sql.execute.SqlXmlExecutor");
-            pushSqlXmlUtil(acb, mb, xmlQuery, operator);
-            mb.pushNewComplete(1);
-		}
-
 		/*
 		** The receiver is the operand with the higher type precedence.
 		** Like always makes the left the receiver.
@@ -544,6 +529,9 @@ public void generateExpression(ExpressionClassBuilder acb,
 			rightOperand.generateExpression(acb, mb);
 			mb.cast(rightInterfaceType); // second arg with cast
 			// stack: left, left, right
+
+            // We've pushed two arguments
+            numArgs = 2;
 		}
 		else
 		{
@@ -567,21 +555,25 @@ public void generateExpression(ExpressionClassBuilder acb,
 			** UNLESS we're generating an XML operator such as XMLEXISTS.
 			** In that case we want to generate
 			** 
-			**  SqlXmlExecutor.method(left, right)"
-			**
-			** and we've already pushed the SqlXmlExecutor object to
-			** the stack.
+			**  <right expression>.method(sqlXmlUtil)
 			*/
 
 			rightOperand.generateExpression(acb, mb);			
 			mb.cast(receiverType); // cast the method instance
 			// stack: right
 			
-			if (!xmlGen) {
+            if (xmlGen) {
+                // Push one argument (the SqlXmlUtil instance)
+                numArgs = 1;
+                pushSqlXmlUtil(acb, mb, xmlQuery, operator);
+                // stack: right,sqlXmlUtil
+            } else {
+                // Push two arguments (left, right)
+                numArgs = 2;
+
 				mb.dup();
 				mb.cast(rightInterfaceType);
 				// stack: right,right
-			}
 			
 			leftOperand.generateExpression(acb, mb);
 			mb.cast(leftInterfaceType); // second arg with cast
@@ -590,21 +582,20 @@ public void generateExpression(ExpressionClassBuilder acb,
 			mb.swap();
 			// stack: right,left,right			
 		}
+		}
 
 		/* Figure out the result type name */
 		resultTypeName = (operatorType == -1)
 			? getTypeCompiler().interfaceName()
 			: resultInterfaceType;
 
-		// Boolean return types don't need a result field
-		boolean needField = !getTypeId().isBooleanTypeId();
-
-		if (needField) {
-
-			/* Allocate an object for re-use to hold the result of the operator */
-			LocalField resultField =
-				acb.newFieldDeclaration(Modifier.PRIVATE, resultTypeName);
+        // Boolean return types don't need a result field. For other types,
+        // allocate an object for re-use to hold the result of the operator.
+        LocalField resultField = getTypeId().isBooleanTypeId() ?
+            null : acb.newFieldDeclaration(Modifier.PRIVATE, resultTypeName);
 
+        // Push the result field onto the stack, if there is a result field.
+		if (resultField != null) {
 			/*
 			** Call the method for this operator.
 			*/
@@ -613,6 +604,9 @@ public void generateExpression(ExpressionClassBuilder acb,
 			//before generating code "field = method(p1, p2, field);"
 			initializeResultField(acb, mb, resultField);
 
+            // Adjust number of arguments for the result field
+            numArgs++;
+
 			/* pass statically calculated scale to decimal divide method to make
 			 * result set scale consistent, beetle 3901
 			 */
@@ -623,17 +617,15 @@ public void generateExpression(ExpressionClassBuilder acb,
 				operator.equals("/"))
 			{
 				mb.push(getTypeServices().getScale());		// 4th arg
-				mb.callMethod(VMOpcode.INVOKEINTERFACE, receiverType, methodName, resultTypeName, 4);
+                numArgs++;
 			}
-			else if (xmlGen) {
-			// This is for an XMLQUERY operation, so invoke the method
-			// on our execution-time object.
-				mb.callMethod(VMOpcode.INVOKEVIRTUAL, null,
-					methodName, resultTypeName, 3);
 			}
-			else
-				mb.callMethod(VMOpcode.INVOKEINTERFACE, receiverType, methodName, resultTypeName, 3);
 
+        mb.callMethod(VMOpcode.INVOKEINTERFACE, receiverType,
+                      methodName, resultTypeName, numArgs);
+
+        // Store the result of the method call, if there is a result field.
+        if (resultField != null) {
 			//the need for following if was realized while fixing bug 5704 where decimal*decimal was resulting an overflow value but we were not detecting it
 			if (getTypeId().variableLength())//since result type is numeric variable length, generate setWidth code.
 			{
@@ -656,17 +648,6 @@ else if (xmlGen) {
 			*/
 
 			mb.putField(resultField);
-		} else {
-			if (xmlGen) {
-			// This is for an XMLEXISTS operation, so invoke the method
-			// on our execution-time object.
-				mb.callMethod(VMOpcode.INVOKEVIRTUAL, null,
-					methodName, resultTypeName, 2);
-			}
-			else {
-				mb.callMethod(VMOpcode.INVOKEINTERFACE, receiverType,
-					methodName, resultTypeName, 2);
-			}
 		}
 	}
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java
index 8f4b1570..42128caf 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java
@@ -607,26 +607,6 @@ public void generateExpression(ExpressionClassBuilder acb,
 											MethodBuilder mb)
 									throws StandardException
 	{
-		// For XML operator we do some extra work.
-		boolean xmlGen = (operatorType == XMLPARSE_OP) ||
-			(operatorType == XMLSERIALIZE_OP);
-
-		if (xmlGen) {
-		// We create an execution-time object from which we call
-		// the necessary methods.  We do this for two reasons: 1) this
-		// level of indirection allows us to separate the XML data type
-		// from the required XML implementation classes (esp. JAXP and
-		// Xalan classes)--for more on how this works, see the comments
-		// in SqlXmlUtil.java; and 2) this allows us to create the
-		// required XML objects a single time (which we did at bind time
-		// when we created a new SqlXmlUtil) and then reuse those objects
-		// for each row in the target result set, instead of creating
-		// new objects every time; see SqlXmlUtil.java for more.
-			mb.pushNewStart(
-				"org.apache.derby.impl.sql.execute.SqlXmlExecutor");
-			mb.pushNewComplete(addXmlOpMethodParams(acb, mb));
-		}
-
 		String resultTypeName = 
 			(operatorType == -1)
 				? getTypeCompiler().interfaceName()
@@ -647,25 +627,13 @@ public void generateExpression(ExpressionClassBuilder acb,
 			LocalField field = acb.newFieldDeclaration(Modifier.PRIVATE, resultTypeName);
 			mb.getField(field);
 
-			/* If we're calling a method on a class (SqlXmlExecutor) instead
-			 * of calling a method on the operand interface, then we invoke
-			 * VIRTUAL; we then have 2 args (the operand and the local field)
-			 * instead of one, i.e:
-			 *
-			 *  SqlXmlExecutor.method(operand, field)
-			 *
-			 * instead of
-			 *
-			 *  <operand>.method(field).
-			 */
-			if (xmlGen) {
-				mb.callMethod(VMOpcode.INVOKEVIRTUAL, null,
-					methodName, resultTypeName, 2);
-			}
-			else {
-				mb.callMethod(VMOpcode.INVOKEINTERFACE,
-					(String) null, methodName, resultTypeName, 1);
-			}
+            int numArgs = 1;
+
+            // XML operators take extra arguments.
+            numArgs += addXmlOpMethodParams(acb, mb, field);
+
+            mb.callMethod(VMOpcode.INVOKEINTERFACE, null,
+                          methodName, resultTypeName, numArgs);
 
 			/*
 			** Store the result of the method call in the field, so we can re-use
@@ -746,11 +714,14 @@ void acceptChildren(Visitor v)
     /**
      * Add some additional arguments to our method call for
      * XML related operations like XMLPARSE and XMLSERIALIZE.
+     *
+     * @param acb the builder for the class in which the method lives
      * @param mb The MethodBuilder that will make the call.
+     * @param resultField the field that contains the previous result
      * @return Number of parameters added.
      */
     protected int addXmlOpMethodParams(ExpressionClassBuilder acb,
-		MethodBuilder mb) throws StandardException
+		MethodBuilder mb, LocalField resultField) throws StandardException
     {
         if ((operatorType != XMLPARSE_OP) && (operatorType != XMLSERIALIZE_OP))
         // nothing to do.
@@ -781,11 +752,25 @@ protected int addXmlOpMethodParams(ExpressionClassBuilder acb,
 
         /* Else we're here for XMLPARSE. */
 
-        // Push the SqlXmlUtil instance as the first argument.
-        pushSqlXmlUtil(acb, mb, null, null);
+        // XMLPARSE is different from other unary operators in that the method
+        // must be called on the result object (the XML value) and not on the
+        // operand (the string value). We must therefore make sure the result
+        // object is not null.
+        MethodBuilder constructor = acb.getConstructor();
+        acb.generateNull(constructor, getTypeCompiler(),
+                         getTypeServices().getCollationType());
+        constructor.setField(resultField);
+
+        // Swap operand and result object so that the method will be called
+        // on the result object.
+        mb.swap();
 
         // Push whether or not we want to preserve whitespace.
         mb.push(((Boolean)additionalArgs[0]).booleanValue());
+
+        // Push the SqlXmlUtil instance as the next argument.
+        pushSqlXmlUtil(acb, mb, null, null);
+
         return 2;
     }
     
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/SqlXmlExecutor.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/SqlXmlExecutor.java
index 9de16ebf..e69de29b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/SqlXmlExecutor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/SqlXmlExecutor.java
@@ -1,272 +0,0 @@
-/*
-
-   Derby - Class org.apache.derby.impl.sql.execute.SqlXmlExecutor
-
-   Licensed to the Apache Software Foundation (ASF) under one or more
-   contributor license agreements.  See the NOTICE file distributed with
-   this work for additional information regarding copyright ownership.
-   The ASF licenses this file to You under the Apache License, Version 2.0
-   (the "License"); you may not use this file except in compliance with
-   the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-   Unless required by applicable law or agreed to in writing, software
-   distributed under the License is distributed on an "AS IS" BASIS,
-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-   See the License for the specific language governing permissions and
-   limitations under the License.
-
- */
-
-package org.apache.derby.impl.sql.execute;
-
-import org.apache.derby.iapi.error.StandardException;
-
-import org.apache.derby.iapi.types.BooleanDataValue;
-import org.apache.derby.iapi.types.StringDataValue;
-import org.apache.derby.iapi.types.XML;
-import org.apache.derby.iapi.types.XMLDataValue;
-import org.apache.derby.iapi.types.SqlXmlUtil;
-
-/**
- * <p>
- * This class is really just an execution time "utility" that
- * makes calls to methods on the XMLDataValue interface.  Instances
- * of this class are generated at execution time by the various
- * Derby XML operators--one instance for each row in the target
- * result set--and then the appropriate operator call is made on
- * that instance (see, for example, the generateExpression() methods
- * in UnaryOperatorNode and BinaryOperatorNode).  When an instance
- * of this class is instantiated, one of the arguments that can be
- * provided is an already-constructed instance of SqlXmlUtil from the current
- * Activation.  When it comes time to execute the operator, this class
- * just makes the appropriate call on the received XMLDataValue object
- * and passes in the SqlXmlUtil, from which the XMLDataValue can
- * retrieve compile-time objects.  The XMLDataValue can also make
- * calls to various XML-specific utilities on the SqlXmlUtil
- * object.
- * </p>
- *
- * <p>
- * Let's take an example.  Assume the statement that the user
- * wants to execute is:
- * </p>
- *
- * <pre>
- *   select id from xtable
- *      where XMLEXISTS('/simple' PASSING BY REF xcol)
- * </pre>
- *
- * <p>
- * For each activation of the statement, the first time a row is read from
- * xtable, the expression "/simple" is compiled and stored in the activation.
- * Then, for each row in xtable, we'll generate the following:
- * </p>
- *
- * <pre>
- *  boolean result =
- *    (new SqlXmlExecutor(cachedSqlXmlUtilInstance)).
- *      XMLExists("/simple", xcol);
- * </pre>
- *
- * <p>
- * In other words, for each row we create a new instance of
- * this class and call "XMLExists" on that instance.  Then,
- * as seen below, we retrieve the SqlXmlUtil from the activation
- * and pass that into a call to "XMLExists" on the XML value
- * itself (i.e. xcol).  XMLDataValue.XMLExists() then uses the
- * methods and objects (which include the compiled query
- * expression for "/simple") defined on SqlXmlUtil to complete
- * the operation.
- * </p>
- *
- * <p>
- * Okay, so why do we use this execution-time SqlXmlExecutor class
- * instead of just generating a call to XMLDataValue.XMLExists()
- * directly?  The reason is that we only want to compile the XML
- * query expression once per statement--and where possible we'd
- * also like to only generate re-usable XML-specific objects
- * once per statement, as well.  If instead we generated a call to
- * XMLDataValue.XMLExists() directly for each row, then we would
- * have to either pass in the expression string and have XMLDataValue
- * compile it, or we would have to compile the expression string
- * and then pass the compiled object into XMLDataValue--in either
- * case, we'd end up compiling the XML query expression (and creating
- * the corresponding XML-specific objects) once for each row in
- * the target result set.  By caching the SqlXmlUtil instance in the
- * Activation and access it via this SqlXmlExecutor class, we make
- * it so that we only have to compile the XML query expression and
- * create XML-specific objects once per activation, and then
- * we can re-use those objects for every row in the target
- * result set.  Yes, we're still creating an instance of this
- * class (SqlXmlExecutor) once per row, but this is
- * still going to be cheaper than having to re-compile the query
- * expression and re-create XML objects for every row.
- * </p>
- *
- * <p>
- * So in short, this class allows us to improve the execution-time
- * performance of XML operators by allowing us to create XML-
- * specific objects and compile XML query expressions once per
- * statement, instead of once per row.
- * </p>
- *
- * <p>
- * The next paragraph contains a historical note about why this class is
- * placed in this package. It is no longer true that the class uses the
- * {@code getSavedObject()} method on the Activation, so it should now be
- * safe to move it to the types package.
- * </p>
- *
- * <p><i>
- * One final note: the reason this class is in this package
- * instead of the types package is that, in order to retrieve
- * the compile-time objects, we have to use the "getSavedObject()"
- * method on the Activation.  But the Activation class is part
- * of the SQL layer (org.apache.derby.iapi.sql.Activation) and
- * we want to keep the types layer independent of the SQL layer
- * because the types can be used during recovery before the SQL
- * system has booted.  So the next logical choices were the compile
- * package (impl.sql.compile) or the execution package; of those,
- * the execution package seems more appropriate since this
- * class is only instantiated and used during execution, not
- * during compilation.
- * </i></p>
- */
-
-public class SqlXmlExecutor {
-
-    /** Utility instance that performs the actual XML operations. */
-    private final SqlXmlUtil sqlXmlUtil;
-
-    // Target type, target width and target collation type that 
-    // were specified for an XMLSERIALIZE operator.
-    private int targetTypeId;
-    private int targetMaxWidth;
-    private int targetCollationType;
-
-    // Whether or not to preserve whitespace for XMLPARSE
-    // operator.
-    private boolean preserveWS;
-
-    /**
-     * Constructor 1: Used for XMLPARSE op.
-     * @param sqlXmlUtil utility that performs the parsing
-     * @param preserveWS Whether or not to preserve whitespace
-     */
-    public SqlXmlExecutor(SqlXmlUtil sqlXmlUtil, boolean preserveWS)
-    {
-        this.sqlXmlUtil = sqlXmlUtil;
-        this.preserveWS = preserveWS;
-    }
-
-    /**
-     * Constructor 2: Used for XMLSERIALIZE op.
-     * @param targetTypeId The string type to which we want to serialize.
-     * @param targetMaxWidth The max width of the target type.
-     * @param targetCollationType The collation type of the target type.
-     */
-    public SqlXmlExecutor(int targetTypeId, int targetMaxWidth, 
-    		int targetCollationType)
-    {
-        this.sqlXmlUtil = null;
-        this.targetTypeId = targetTypeId;
-        this.targetMaxWidth = targetMaxWidth;
-        this.targetCollationType = targetCollationType;
-    }
-
-    /**
-     * Constructor 3: Used for XMLEXISTS/XMLQUERY ops.
-     * @param sqlXmlUtil utility that performs the query
-     */
-    public SqlXmlExecutor(SqlXmlUtil sqlXmlUtil)
-    {
-        this.sqlXmlUtil = sqlXmlUtil;
-    }
-
-    /**
-     * Make the call to perform an XMLPARSE operation on the
-     * received XML string and store the result in the received
-     * XMLDataValue (or if it's null, create a new one).
-     *
-     * @param xmlText String to parse
-     * @param result XMLDataValue in which to store the result
-     * @return The received XMLDataValue with its content set to
-     *  correspond to the received xmlText, if the text constitutes
-     *  a valid XML document.  If the received XMLDataValue is
-     *  null, then create a new one and set its content to
-     *  correspond to the received xmlText.
-     */
-    public XMLDataValue XMLParse(StringDataValue xmlText, XMLDataValue result)
-        throws StandardException
-    {
-        if (result == null)
-            result = new XML();
-
-        if (xmlText.isNull())
-        {
-            result.setToNull();
-            return result;
-        }
-
-        return result.XMLParse(
-            xmlText.getString(), preserveWS, sqlXmlUtil);
-    }
-
-    /**
-     * Make the call to perform an XMLSERIALIZE operation on the
-     * received XML data value and store the result in the received
-     * StringDataValue (or if it's null, create a new one).
-     *
-     * @param xmlVal XML value to serialize
-     * @param result StringDataValue in which to store the result
-     * @return A serialized (to string) version of this XML object,
-     *  in the form of a StringDataValue object.  
-     */
-    public StringDataValue XMLSerialize(XMLDataValue xmlVal,
-        StringDataValue result) throws StandardException
-    {
-        return xmlVal.XMLSerialize(result, targetTypeId, targetMaxWidth, 
-        		targetCollationType);
-    }
-
-    /**
-     * Make the call to perform an XMLEXISTS operation on the
-     * received XML data value.
-     *
-     * @param xExpr Query expression to be evaluated
-     * @param xmlContext Context node against which to evaluate
-     *  the expression.
-     * @return True if evaluation of the query expression
-     *  against xmlContext returns at least one item; unknown if
-     *  either the xml value is NULL; false otherwise. 
-     */
-    public BooleanDataValue XMLExists(StringDataValue xExpr,
-        XMLDataValue xmlContext) throws StandardException
-    {
-        return xmlContext.XMLExists(sqlXmlUtil);
-    }
-
-    /**
-     * Make the call to perform an XMLQUERY operation on the
-     * received XML data value and store the result in the
-     * received result holder (or, if it's null, create a
-     * new one).
-     *
-     * @param xExpr Query expression to be evaluated
-     * @param xmlContext Context node against which to evaluate
-     *  the expression.
-     * @param result XMLDataValue in which to store the result
-     * @return The received XMLDataValue with its content set to
-     *  result of evaluating the query expression against xmlContext.
-     *  If the received XMLDataValue is null, then create a new one
-     *  and set its content to correspond to the received xmlText.
-     */
-    public XMLDataValue XMLQuery(StringDataValue xExpr,
-        XMLDataValue xmlContext, XMLDataValue result)
-        throws StandardException
-    {
-        return xmlContext.XMLQuery(result, sqlXmlUtil);
-    }
-}
