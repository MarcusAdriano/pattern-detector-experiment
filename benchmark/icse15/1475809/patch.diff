diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java
index 2fed25a5..1526fc39 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/ArrayUtil.java
@@ -73,6 +73,26 @@ Licensed to the Apache Software Foundation (ASF) under one or more
         return (original == null) ? null : (int[]) original.clone();
     }
 
+    /** Copy a (possibly null) array of longs */
+    public  static  long[]   copy( long[] original )
+    {
+        return (original == null) ? null : (long[]) original.clone();
+    }
+
+    /** Copy a (possibly null) 2-dimensional array of ints */
+    public  static  int[][]   copy2( int[][] original )
+    {
+        if ( original == null ) { return null; }
+
+        int[][] result = new int[ original.length ][];
+        for ( int i = 0; i < original.length; i++ )
+        {
+            result[ i ] = copy( original[ i ] );
+        }
+        
+        return result;
+    }
+
     /**
      * Make the contents of an array available as a read-only list. If the
      * array is null, an empty list will be returned.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/CatalogRowFactory.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/CatalogRowFactory.java
index 5b4946da..7d7f9a1b 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/CatalogRowFactory.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/CatalogRowFactory.java
@@ -26,6 +26,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.catalog.UUID;
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.reference.Property;
+import org.apache.derby.iapi.services.io.ArrayUtil;
 import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.iapi.services.uuid.UUIDFactory;
 import org.apache.derby.iapi.sql.execute.ExecRow;
@@ -239,8 +240,8 @@ public	void	initInfo(int        columnCount,
 				indexNames[ictr] = generateIndexName(ictr);
 				indexUUID[ictr] = uf.recreateUUID(uuidStrings[ictr + 2 ]);
 			}
-			this.indexColumnPositions = indexColumnPositions;
-			this.indexUniqueness = indexUniqueness;
+			this.indexColumnPositions = ArrayUtil.copy2( indexColumnPositions );
+			this.indexUniqueness = ArrayUtil.copy( indexUniqueness );
  
 		}
 	}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java
index e9275d13..b0cda8ff 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/ConglomerateDescriptor.java
@@ -28,6 +28,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.catalog.UUID;
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.reference.SQLState;
+import org.apache.derby.iapi.services.io.ArrayUtil;
 import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.iapi.sql.StatementType;
 import org.apache.derby.iapi.store.access.TransactionController;
@@ -229,7 +230,7 @@ public IndexRowGenerator getIndexDescriptor()
 	 */
 	public void setColumnNames(String[] columnNames)
 	{
-		this.columnNames = columnNames;
+		this.columnNames = ArrayUtil.copy( columnNames );
 	}
 
 	/**
@@ -240,7 +241,7 @@ public void setColumnNames(String[] columnNames)
 	 */
 	public String[] getColumnNames()
 	{
-		return columnNames;
+		return ArrayUtil.copy( columnNames );
 	}
 
 	//
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java
index 6a62d2bb..ed66d453 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/ConstraintDescriptor.java
@@ -29,6 +29,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.catalog.UUID;
 
 import org.apache.derby.iapi.reference.SQLState;
+import org.apache.derby.iapi.services.io.ArrayUtil;
 import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.catalog.DependableFinder;
 import org.apache.derby.catalog.Dependable;
@@ -200,7 +201,7 @@ public boolean	initiallyDeferred()
 	 */
 	public int[]	getReferencedColumns()
 	{
-		return referencedColumns;
+		return ArrayUtil.copy( referencedColumns );
 	}
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/IndexLister.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/IndexLister.java
index 6982341c..a62ad7f3 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/IndexLister.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/IndexLister.java
@@ -23,6 +23,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.error.StandardException;
 
+import org.apache.derby.iapi.services.io.ArrayUtil;
+
 import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
 import org.apache.derby.iapi.sql.dictionary.ConglomerateDescriptor;
 import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
@@ -85,7 +87,7 @@ public	IndexLister( TableDescriptor	tableDescriptor )
 					throws StandardException
 	{
 		if ( indexRowGenerators == null ) { getAllIndexes(); }
-		return	indexRowGenerators;
+		return	(IndexRowGenerator[]) ArrayUtil.copy( indexRowGenerators );
 	}
 
     /**
@@ -99,7 +101,7 @@ public	IndexLister( TableDescriptor	tableDescriptor )
 					throws StandardException
 	{
 		if ( indexConglomerateNumbers == null ) { getAllIndexes(); }
-		return	indexConglomerateNumbers;
+		return	ArrayUtil.copy( indexConglomerateNumbers );
 	}
 
     /**
@@ -112,7 +114,7 @@ public	IndexLister( TableDescriptor	tableDescriptor )
     public	String[]		getIndexNames()	throws StandardException
 	{
 		if ( indexNames == null ) { getAllIndexes(); }
-		return	indexNames;
+		return	ArrayUtil.copy( indexNames );
 	}
 
     /**
@@ -127,7 +129,7 @@ public	IndexLister( TableDescriptor	tableDescriptor )
 					throws StandardException
 	{
 		if ( distinctIndexRowGenerators == null ) { getAllIndexes(); }
-		return	distinctIndexRowGenerators;
+		return	(IndexRowGenerator[]) ArrayUtil.copy( distinctIndexRowGenerators );
 	}
 
     /**
@@ -142,7 +144,7 @@ public	IndexLister( TableDescriptor	tableDescriptor )
 					throws StandardException
 	{
 		if ( distinctIndexConglomerateNumbers == null ) { getAllIndexes(); }
-		return	distinctIndexConglomerateNumbers;
+		return	ArrayUtil.copy( distinctIndexConglomerateNumbers );
 	}
 
     /**
@@ -156,7 +158,7 @@ public	IndexLister( TableDescriptor	tableDescriptor )
     public	String[]		getDistinctIndexNames()	throws StandardException
 	{
 		if ( indexNames == null ) { getAllIndexes(); }
-		return	indexNames;
+		return	ArrayUtil.copy( indexNames );
 	}
 
 	////////////////////////////////////////////////////////////////////////
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/PasswordHasher.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/PasswordHasher.java
index e9cfe54e..55ef7265 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/PasswordHasher.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/PasswordHasher.java
@@ -25,6 +25,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.security.NoSuchAlgorithmException;
 
 import org.apache.derby.iapi.error.StandardException;
+import org.apache.derby.iapi.services.io.ArrayUtil;
 import org.apache.derby.iapi.services.sanity.SanityManager;
 import org.apache.derby.iapi.util.StringUtil;
 import org.apache.derby.shared.common.reference.SQLState;
@@ -107,7 +108,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
          )
     {
         _messageDigestAlgorithm = messageDigestAlgorithm;
-        _salt = salt;
+        _salt = ArrayUtil.copy( salt );
         _iterations = iterations;
     }
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java
index 978f2d71..713da315 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/SPSDescriptor.java
@@ -32,6 +32,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.reference.SQLState;
 import org.apache.derby.iapi.services.context.ContextManager;
 import org.apache.derby.iapi.services.context.ContextService;
+import org.apache.derby.iapi.services.io.ArrayUtil;
 import org.apache.derby.iapi.services.io.StoredFormatIds;
 import org.apache.derby.iapi.services.monitor.Monitor;
 import org.apache.derby.iapi.services.sanity.SanityManager;
@@ -46,6 +47,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.sql.execute.ExecPreparedStatement;
 import org.apache.derby.iapi.store.access.TransactionController;
 import org.apache.derby.iapi.types.DataTypeDescriptor;
+import org.apache.derby.iapi.types.DataTypeUtilities;
 
 /**
  * A SPSDescriptor describes a Stored Prepared Statement.
@@ -218,7 +220,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 		this.text = text;
 		this.usingText = usingText;
 		this.valid = valid;
-		this.compileTime = compileTime;
+		this.compileTime = DataTypeUtilities.clone( compileTime );
 		this.sd = dataDictionary.getSchemaDescriptor(suuid, null);
 		this.preparedStatement = preparedStatement;
 		this.compSchemaId = compSchemaUUID;
@@ -510,7 +512,7 @@ public static boolean validType(char type)
 	 */
 	public final synchronized Timestamp getCompileTime()
 	{
-		return compileTime;
+		return DataTypeUtilities.clone( compileTime );
 	}
 
 	/**
@@ -593,7 +595,7 @@ public final UUID getUUID() {
             lookedUpParams = true;
         }
 
-		return params;
+		return (DataTypeDescriptor[]) ArrayUtil.copy( params );
 	}
 
 	/**
@@ -603,7 +605,7 @@ public final UUID getUUID() {
 	 */
 	public final synchronized void setParams(DataTypeDescriptor params[])
 	{
-		this.params = params;
+		this.params = (DataTypeDescriptor[]) ArrayUtil.copy( params );
 	}
 
 	/**
@@ -620,9 +622,11 @@ public final synchronized void setParams(DataTypeDescriptor params[])
 		throws StandardException
 	{
 		if (paramDefaults == null)
+        {
 			getParams();
+        }
 
-		return paramDefaults;
+		return ArrayUtil.copy( paramDefaults );
 	}
 
 	/**
@@ -632,7 +636,7 @@ public final synchronized void setParams(DataTypeDescriptor params[])
 	 */
 	public final synchronized void setParameterDefaults(Object[] values)
 	{
-		this.paramDefaults = values;
+		this.paramDefaults = ArrayUtil.copy( values );
 	}
 	
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/StatisticsDescriptor.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/StatisticsDescriptor.java
index 7edcd11a..cd6c88f7 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/StatisticsDescriptor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/StatisticsDescriptor.java
@@ -23,6 +23,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.catalog.Statistics;
 import org.apache.derby.catalog.UUID;
+import org.apache.derby.iapi.types.DataTypeUtilities;
 
 import org.apache.derby.iapi.sql.dictionary.DataDictionary;
 import java.sql.Timestamp;
@@ -72,7 +73,7 @@ public UUID getUUID()
 	/*----- getter functions for rowfactory ------*/
 	public UUID getTableUUID() { return statTableID;}
 	public UUID getReferenceID() { return statRefID; }
-	public Timestamp getUpdateTimestamp() { return statUpdateTime; }
+	public Timestamp getUpdateTimestamp() { return DataTypeUtilities.clone( statUpdateTime ); }
 	public String getStatType() { return statType; }
 	public boolean isValid() { return statValid; }
 	public Statistics getStatistic() { return statStat; }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java
index 942cfece..86358e67 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/TriggerDescriptor.java
@@ -21,10 +21,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derby.iapi.sql.dictionary;
 
+import org.apache.derby.iapi.services.io.ArrayUtil;
 import org.apache.derby.iapi.services.io.Formatable;
 import org.apache.derby.iapi.sql.depend.Dependent;
 import org.apache.derby.iapi.sql.depend.Provider;
 import org.apache.derby.iapi.error.StandardException;
+import org.apache.derby.iapi.types.DataTypeUtilities;
 import org.apache.derby.catalog.UUID;
 import java.sql.Timestamp;
 
@@ -188,8 +190,8 @@ public TriggerDescriptor() {}
 		this.whenSPSId = whenSPSId;
 		this.isEnabled = isEnabled;
 		this.referencedCols = referencedCols;
-		this.referencedColsInTriggerAction = referencedColsInTriggerAction;
-		this.creationTimestamp = creationTimestamp;
+		setReferencedColsInTriggerAction( referencedColsInTriggerAction );
+		this.creationTimestamp = DataTypeUtilities.clone( creationTimestamp );
 		this.triggerDefinition = triggerDefinition;
 		this.referencingOld = referencingOld;
 		this.referencingNew = referencingNew;
@@ -274,7 +276,7 @@ public int getTriggerEventMask()
 	 */
 	public Timestamp getCreationTimestamp()
 	{
-		return creationTimestamp;
+		return DataTypeUtilities.clone( creationTimestamp );
 	}
 
 	/**
@@ -460,7 +462,7 @@ public TableDescriptor getTableDescriptor()
 	 */
 	public int[] getReferencedCols()
 	{
-		return referencedCols;
+		return ArrayUtil.copy( referencedCols );
 	}
 
 	/**
@@ -470,7 +472,13 @@ public TableDescriptor getTableDescriptor()
 	 */
 	public int[] getReferencedColsInTriggerAction()
 	{
-		return referencedColsInTriggerAction;
+        return ArrayUtil.copy( referencedColsInTriggerAction );
+	}
+
+    /** Set the referenced column array for trigger actions */
+    public  void    setReferencedColsInTriggerAction( int[] referencedColsInTriggerAction )
+    {
+		this.referencedColsInTriggerAction = ArrayUtil.copy( referencedColsInTriggerAction );
 	}
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/UserDescriptor.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/UserDescriptor.java
index 7c388ae6..068b136f 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/UserDescriptor.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/sql/dictionary/UserDescriptor.java
@@ -24,6 +24,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import java.sql.Timestamp;
 import java.util.Arrays;
 
+import org.apache.derby.iapi.types.DataTypeUtilities;
+
 /**
  * A Descriptor for a user stored in SYSUSERS.
  */
@@ -65,12 +67,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
             System.arraycopy( password, 0, _password, 0, password.length );
         }
         
-        _lastModified = lastModified;
+        _lastModified = DataTypeUtilities.clone( lastModified );
 	}
 
 	public String getUserName(){ return _userName; }
 	public String getHashingScheme()    { return _hashingScheme; }
-    public  Timestamp   getLastModified()   { return _lastModified; }
+    public  Timestamp   getLastModified()   { return DataTypeUtilities.clone( _lastModified ); }
 
     /**
      * <p>
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeUtilities.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeUtilities.java
index 04a09c11..c9018220 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeUtilities.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/DataTypeUtilities.java
@@ -27,6 +27,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derby.iapi.reference.JDBC40Translation;
 import org.apache.derby.iapi.services.io.StoredFormatIds;
 
+import java.sql.Timestamp;
 import java.sql.Types;
 import java.sql.ResultSetMetaData;
 
@@ -35,6 +36,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  */
 public abstract class DataTypeUtilities  {
 
+    /** Clone a Timestamp because they are mutable */
+    public  static  Timestamp   clone( Timestamp original )
+    {
+        return original == null ? null : (Timestamp) original.clone();
+    }
+    
 	/**
 		Get the precision of the datatype.
 		@param	dtd			data type descriptor
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
index f35b4ded..81cbeab9 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/AlterTableConstantAction.java
@@ -1551,6 +1551,7 @@ else if (referencedColsInTriggerAction[j] == droppedColumnPosition)
 						if (referencedColsInTriggerAction[j] > droppedColumnPosition)
 							referencedColsInTriggerAction[j]--;
 					}
+                    trd.setReferencedColsInTriggerAction( referencedColsInTriggerAction );
 					dd.addDescriptor(trd, sd,
 							 DataDictionary.SYSTRIGGERS_CATALOG_NUM,
 							 false, tc);
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java
index b379717a..ce4007bf 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/execute/rts/RunTimeStatisticsImpl.java
@@ -33,6 +33,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.sql.execute.RunTimeStatistics;
 import org.apache.derby.iapi.sql.execute.xplain.XPLAINVisitor;
+import org.apache.derby.iapi.types.DataTypeUtilities;
 
 import java.util.Vector;
 
@@ -98,14 +99,10 @@ public	RunTimeStatisticsImpl(
 		this.optimizeTime = optimizeTime;
 		this.generateTime = generateTime;
 		this.executeTime = executeTime;
-		this.beginCompilationTimestamp =beginCompilationTimestamp == null ?
-            null : (Timestamp) beginCompilationTimestamp.clone();
-		this.endCompilationTimestamp = endCompilationTimestamp == null ?
-            null : (Timestamp) endCompilationTimestamp.clone();
-		this.beginExecutionTimestamp = beginExecutionTimestamp == null ?
-            null : (Timestamp) beginExecutionTimestamp.clone();
-		this.endExecutionTimestamp = endExecutionTimestamp == null ?
-            null : (Timestamp) endExecutionTimestamp.clone();
+		this.beginCompilationTimestamp = DataTypeUtilities.clone( beginCompilationTimestamp );
+		this.endCompilationTimestamp = DataTypeUtilities.clone( endCompilationTimestamp );
+		this.beginExecutionTimestamp = DataTypeUtilities.clone( beginExecutionTimestamp );
+		this.endExecutionTimestamp = DataTypeUtilities.clone( endExecutionTimestamp );
 		this.subqueryTrackingArray = (ResultSetStatistics[]) ArrayUtil.copy( subqueryTrackingArray );
 		this.topResultSetStatistics = topResultSetStatistics;
 	}
@@ -179,7 +176,7 @@ public long getExecuteTimeInMillis()
 	 */
 	public Timestamp getBeginCompilationTimestamp()
 	{
-		return beginCompilationTimestamp == null ?  null : (Timestamp) beginCompilationTimestamp.clone();
+		return DataTypeUtilities.clone( beginCompilationTimestamp );
 	}
 
 	/**
@@ -189,7 +186,7 @@ public Timestamp getBeginCompilationTimestamp()
 	 */
 	public Timestamp getEndCompilationTimestamp()
 	{
-		return endCompilationTimestamp == null ? null : (Timestamp) endCompilationTimestamp.clone();
+		return DataTypeUtilities.clone( endCompilationTimestamp );
 	}
 
 	/**
@@ -199,7 +196,7 @@ public Timestamp getEndCompilationTimestamp()
 	 */
 	public Timestamp getBeginExecutionTimestamp()
 	{
-		return beginExecutionTimestamp == null ? null : (Timestamp) beginExecutionTimestamp.clone();
+		return DataTypeUtilities.clone( beginExecutionTimestamp );
 	}
 
 	/**
@@ -209,7 +206,7 @@ public Timestamp getBeginExecutionTimestamp()
 	 */
 	public Timestamp getEndExecutionTimestamp()
 	{
-		return endExecutionTimestamp == null ? null : (Timestamp) endExecutionTimestamp.clone();
+		return DataTypeUtilities.clone( endExecutionTimestamp );
 	}
 
 	/**
