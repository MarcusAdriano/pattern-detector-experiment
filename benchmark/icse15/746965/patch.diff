diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java
index c858c753..0badca56 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/store/IndexSplitDeadlockTest.java
@@ -63,7 +63,7 @@ public static Test suite() {
 
     protected void tearDown() throws Exception {
         rollback();
-        getConnection().setAutoCommit(false); // required by JDBC.dropSchema()
+        setAutoCommit(false); // required by JDBC.dropSchema()
         JDBC.dropSchema(getConnection().getMetaData(), "APP");
 
         // Go through all the threads and call waitFor() so that we
@@ -87,7 +87,7 @@ protected void tearDown() throws Exception {
     // there's no test case for fetchMax().
 
     public void testBTreeMaxScan_fetchMaxRowFromBeginning() throws Exception {
-        getConnection().setAutoCommit(false);
+        setAutoCommit(false);
 
         Statement s = createStatement();
         s.executeUpdate("create table max_scan(x int)");
@@ -184,7 +184,7 @@ public void testBTreeForwardScan_fetchRows_resumeAfterSplit()
     public void testBTreeForwardScan_fetchRows_resumeScanAfterCommitAndSplit()
             throws SQLException {
 
-        getConnection().setAutoCommit(false);
+        setAutoCommit(false);
 
         // Create a table and an index and populate them
         Statement s1 = createStatement();
@@ -236,7 +236,7 @@ public void testBTreeForwardScan_fetchRows_resumeScanAfterCommitAndSplit()
     public void testBTreeForwardScan_fetchRows_resumeScanAfterCompress()
             throws Exception {
 
-        getConnection().setAutoCommit(false);
+        setAutoCommit(false);
 
         // Create a table and an index and populate them
         Statement s1 = createStatement();
@@ -297,7 +297,7 @@ public void testBTreeForwardScan_fetchRows_resumeScanAfterCompress()
      */
     public void testBTreeForwardScan_fetchRows_resumeAfterWait_unique()
             throws Exception {
-        getConnection().setAutoCommit(false);
+        setAutoCommit(false);
 
         // Populate a table with a unique index
         Statement s = createStatement();
@@ -336,7 +336,7 @@ public void testBTreeForwardScan_fetchRows_resumeAfterWait_unique()
      */
     public void testBTreeForwardScan_fetchRows_resumeAfterWait_unique_split()
             throws Exception {
-        getConnection().setAutoCommit(false);
+        setAutoCommit(false);
 
         // Populate a table with a unique index
         Statement s = createStatement();
@@ -397,7 +397,7 @@ public void doWork(Connection conn) throws Exception {
      */
     public void testBTreeForwardScan_fetchRows_resumeAfterWait_nonUnique()
             throws Exception {
-        getConnection().setAutoCommit(false);
+        setAutoCommit(false);
 
         // Populate a table with a non-unique index
         Statement s = createStatement();
@@ -437,7 +437,7 @@ public void testBTreeForwardScan_fetchRows_resumeAfterWait_nonUnique()
      */
     public void testBTreeForwardScan_fetchRows_resumeAfterWait_nonUnique_split()
             throws Exception {
-        getConnection().setAutoCommit(false);
+        setAutoCommit(false);
 
         // Populate a table with a non-unique index
         Statement s = createStatement();
