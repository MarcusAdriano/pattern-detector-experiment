diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemServiceRegistrar.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemServiceRegistrar.java
index b9cad0d6..d82db690 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemServiceRegistrar.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/SubsystemServiceRegistrar.java
@@ -19,7 +19,6 @@
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Hashtable;
-import java.util.Iterator;
 import java.util.Map;
 
 import org.apache.aries.subsystem.AriesSubsystem;
@@ -39,8 +38,11 @@ public SubsystemServiceRegistrar(BundleContext context) {
 		this.context = context;
 	}
 	
-	public synchronized void addRegion(BasicSubsystem subsystem, Region region) {
-		ServiceRegistration<?> registration = map.get(subsystem);
+	public void addRegion(BasicSubsystem subsystem, Region region) {
+		ServiceRegistration<?> registration;
+		Dictionary<String, Object> properties;
+		synchronized (this) {
+			registration = map.get(subsystem);
 		if (registration == null)
 			throw new IllegalStateException("Subsystem '" + subsystem + "' is not registered");
 		Collection<String> currentRegions = (Collection<String>)registration.getReference().getProperty(Constants.SubsystemServicePropertyRegions);
@@ -50,8 +52,9 @@ public synchronized void addRegion(BasicSubsystem subsystem, Region region) {
 		Collection<String> newRegions = new HashSet<String>(currentRegions.size() + 1);
 		newRegions.addAll(currentRegions);
 		newRegions.add(regionName);
-		Dictionary<String, Object> properties = properties(subsystem);
+			properties = properties(subsystem);
 		properties.put(Constants.SubsystemServicePropertyRegions, Collections.unmodifiableCollection(newRegions));
+		}
 		registration.setProperties(properties);
 	}
 	
@@ -62,18 +65,35 @@ public synchronized Subsystem getSubsystemService(BasicSubsystem subsystem) {
 		return (Subsystem)Activator.getInstance().getBundleContext().getService(registration.getReference());
 	}
 	
-	public synchronized void register(BasicSubsystem child, BasicSubsystem parent) {
+	public void register(BasicSubsystem child, BasicSubsystem parent) {
+		Dictionary<String, Object> properties;
+		synchronized (this) {
 		if (map.containsKey(child))
 			return;
-		Dictionary<String, Object> properties = properties(child, parent);
-		ServiceRegistration<?> registration = context.registerService(
+			map.put(child, null);
+			properties = properties(child, parent);
+		}
+		ServiceRegistration<?> registration = null;
+		try {
+			registration = context.registerService(
 				new String[] {Subsystem.class.getName(), AriesSubsystem.class.getName()}, 
 				child, properties);
+		}
+		finally {
+			synchronized (this) {
+				if (registration == null)
+					map.remove(child);
+				else
 		map.put(child, registration);
 	}
+		}
+	}
 	
-	public synchronized void removeRegion(BasicSubsystem subsystem, Region region) {
-		ServiceRegistration<?> registration = map.get(subsystem);
+	public void removeRegion(BasicSubsystem subsystem, Region region) {
+		ServiceRegistration<?> registration;
+		Dictionary<String, Object> properties;
+		synchronized (this) {
+			registration = map.get(subsystem);
 		if (registration == null)
 			return;
 		Collection<String> regions = (Collection<String>)registration.getReference().getProperty(Constants.SubsystemServicePropertyRegions);
@@ -82,31 +102,31 @@ public synchronized void removeRegion(BasicSubsystem subsystem, Region region) {
 			return;
 		regions = new HashSet<String>(regions);
 		regions.remove(regionName);
-		Dictionary<String, Object> properties = properties(subsystem);
+			properties = properties(subsystem);
 		properties.put(Constants.SubsystemServicePropertyRegions, Collections.unmodifiableCollection(regions));
+		}
 		registration.setProperties(properties);
 	}
 	
-	public synchronized void unregister(Subsystem subsystem) {
-		ServiceRegistration<?> registration = map.remove(subsystem);
+	public void unregister(Subsystem subsystem) {
+		ServiceRegistration<?> registration;
+		synchronized (this) {
+			registration = map.remove(subsystem);
 		if (registration == null)
 			throw new IllegalStateException("Subsystem '" + subsystem + "' is not registered");
-		registration.unregister();
 	}
-	
-	public synchronized void unregisterAll() {
-		for (Iterator<ServiceRegistration<?>> i = map.values().iterator(); i.hasNext();) {
-			ServiceRegistration<?> registration = i.next();
 			registration.unregister();
-			i.remove();
-		}
 	}
 	
-	public synchronized void update(BasicSubsystem subsystem) {
-		ServiceRegistration<?> registration = map.get(subsystem);
+	public void update(BasicSubsystem subsystem) {
+		ServiceRegistration<?> registration;
+		Dictionary<String, Object> properties;
+		synchronized (this) {
+			registration = map.get(subsystem);
 		if (registration == null)
 			throw new IllegalStateException("Subsystem '" + subsystem + "' is not registered");
-		Dictionary<String, Object> properties = properties(subsystem, registration);
+			properties = properties(subsystem, registration);
+		}
 		registration.setProperties(properties);
 	}
 	
