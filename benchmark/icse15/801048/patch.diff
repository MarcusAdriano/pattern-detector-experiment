diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java
index 31cce023..339a1098 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/SuperColumn.java
@@ -111,23 +111,10 @@ public int size()
     public int serializedSize()
     {
         /*
-         * Size of a super-column is =
-         *   size of a name (UtfPrefix + length of the string)
-         * + 1 byte to indicate if the super-column has been deleted
-         * + 4 bytes for size of the sub-columns
-         * + 4 bytes for the number of sub-columns
-         * + size of all the sub-columns.
-        */
-
-    	/*
-    	 * We store the string as UTF-8 encoded, so when we calculate the length, it
-    	 * should be converted to UTF-8.
-    	 */
-    	/*
     	 * We need to keep the way we are calculating the column size in sync with the
     	 * way we are calculating the size for the column family serializer.
     	 */
-    	return IColumn.UtfPrefix_ + name_.length + DBConstants.boolSize_ + DBConstants.intSize_ + DBConstants.intSize_ + getSizeOfAllColumns();
+    	return IColumn.UtfPrefix_ + name_.length + DBConstants.intSize_ + DBConstants.longSize_ + DBConstants.intSize_ + getSizeOfAllColumns();
     }
 
     /**
@@ -136,8 +123,7 @@ public int serializedSize()
     int getSizeOfAllColumns()
     {
         int size = 0;
-        Collection<IColumn> subColumns = getSubColumns();
-        for ( IColumn subColumn : subColumns )
+        for (IColumn subColumn : getSubColumns())
         {
             size += subColumn.serializedSize();
         }
@@ -346,10 +332,8 @@ public void serialize(IColumn column, DataOutput dos) throws IOException
         dos.writeLong(superColumn.getMarkedForDeleteAt());
 
         Collection<IColumn> columns  = column.getSubColumns();
-        int size = columns.size();
-        dos.writeInt(size);
+        dos.writeInt(columns.size());
 
-        dos.writeInt(superColumn.getSizeOfAllColumns());
         for ( IColumn subColumn : columns )
         {
             Column.serializer().serialize(subColumn, dos);
@@ -364,8 +348,6 @@ public IColumn deserialize(DataInput dis) throws IOException
 
         /* read the number of columns */
         int size = dis.readInt();
-        /* read the size of all columns */
-        dis.readInt();
         for ( int i = 0; i < size; ++i )
         {
             IColumn subColumn = Column.serializer().deserialize(dis);
