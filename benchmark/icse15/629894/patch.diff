diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementEventsTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementEventsTest.java
index 2db8b709..7e3fea4f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementEventsTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/StatementEventsTest.java
@@ -118,10 +118,12 @@ public String getName() {
     public void setUp() throws SQLException {
         if (xa) {
             XADataSource ds = J2EEDataSource.getXADataSource();
+            J2EEDataSource.setBeanProperty(ds, "createDatabase", "create");
             pooledConnection = ds.getXAConnection();
         } else {
             ConnectionPoolDataSource ds =
                 J2EEDataSource.getConnectionPoolDataSource();
+            J2EEDataSource.setBeanProperty(ds, "createDatabase", "create");
             pooledConnection = ds.getPooledConnection();
         }
         StatementEventListener listener = new StatementEventListener() {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java
index 9cbf3476..d3179aff 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DataSourceTest.java
@@ -226,7 +226,6 @@ public void testAllDataSources() throws SQLException, Exception
     public void testJira95ds() throws SQLException {
         try {
             DataSource ds = JDBCDataSource.getDataSource();
-            JDBCDataSource.setBeanProperty(ds, "createDatabase", "false");
             // non-existent database
             JDBCDataSource.setBeanProperty(ds, "databaseName", "jdbc:derby:wombat");
             ds.getConnection();
@@ -361,7 +360,6 @@ public void testClientTraceFileDSConnectionAttribute() throws SQLException
 
         // DataSource
         DataSource ds = JDBCDataSource.getDataSource();
-        JDBCDataSource.setBeanProperty(ds, "createDatabase", "false");
 
         // DataSource - setTransationAttributes
         traceFile = "trace1.out";
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DboPowersTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DboPowersTest.java
index 6003bfc5..ab0cf83a 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DboPowersTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/DboPowersTest.java
@@ -440,7 +440,6 @@ public void testEncrypt() throws SQLException
         String bootPassword="12345678";
         DataSource ds = JDBCDataSource.getDataSource();
 
-        JDBCDataSource.setBeanProperty(ds, "createDatabase", "false");
         JDBCDataSource.setBeanProperty(ds, "connectionAttributes",
                                        "dataEncryption=true;bootPassword=" +
                                            bootPassword);
@@ -498,7 +497,6 @@ public void testReEncrypt() throws SQLException
         String newBootPassword="87654321";
         DataSource ds = JDBCDataSource.getDataSource();
 
-        JDBCDataSource.setBeanProperty(ds, "createDatabase", "false");
         JDBCDataSource.setBeanProperty(ds, "connectionAttributes",
                                        "bootPassword=" + bootPassword +
                                        ";newBootPassword=" + newBootPassword);
@@ -698,8 +696,6 @@ public void testHardUpgrade() throws SQLException
         String password = getTestConfiguration().getUserPassword();
 
         DataSource ds = JDBCDataSource.getDataSource();
-
-        JDBCDataSource.setBeanProperty(ds, "createDatabase", "false");
         JDBCDataSource.setBeanProperty(
             ds, "connectionAttributes", "upgrade=true");
         JDBCDataSource.setBeanProperty(ds, "user", user);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java
index f6401b61..474525c7 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/J2EEDataSourceTest.java
@@ -837,7 +837,6 @@ else if (usingDerbyNetClient())
             assertTenConnectionsUnique();
 
         DataSource dscs = JDBCDataSource.getDataSource();
-        JDBCDataSource.setBeanProperty(dscs, "createDatabase", "false");
         if (usingEmbedded()) 
                 assertToString(dscs);
 
@@ -890,7 +889,6 @@ else if (usingDerbyNetClient())
         aes1.resetState();
 
         XADataSource dsx = J2EEDataSource.getXADataSource();
-        JDBCDataSource.setBeanProperty(dsx, "createDatabase", "false");
 
         if (usingEmbedded())
             assertToString(dsx);
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolXADSCreateShutdownDBTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolXADSCreateShutdownDBTest.java
index 14bc1ad1..9d4d6060 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolXADSCreateShutdownDBTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/PoolXADSCreateShutdownDBTest.java
@@ -172,7 +172,6 @@ public void doCreateAndShutdown(Object ds) throws SQLException {
         assertUpdateCount(createStatement(), 0, "set schema APP");
    
         // check that first the value is null
-        JDBCDataSource.setBeanProperty(ds, "createDatabase", "false");
         assertGetNull(ds, dbName);
         // check that we can set & that when set we can get
         // doesn't actually open connections so a little silly.
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
index f5044e48..2fd41349 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DatabaseClassLoadingTest.java
@@ -639,7 +639,6 @@ public void testDatabaseInClasspath() throws SQLException, MalformedURLException
     {
         String dbName = "classpath:dbro";
         DataSource ds = JDBCDataSource.getDataSource(dbName);
-        JDBCDataSource.setBeanProperty(ds, "createDatabase", "false");
         
         try {
             ds.getConnection();
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/PhaseChanger.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/PhaseChanger.java
index a0e49139..da5569b5 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/PhaseChanger.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/PhaseChanger.java
@@ -84,7 +84,6 @@ protected void setUp() throws SQLException
             break;
             
         case UpgradeChange.PH_HARD_UPGRADE:
-            JDBCDataSource.setBeanProperty(ds, "createDatabase", "false");
             JDBCDataSource.setBeanProperty(ds, "connectionAttributes",
                     "upgrade=true");
             break;
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java
index 7beab5a1..0926325d 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/JDBCDataSource.java
@@ -37,9 +37,8 @@
     
     /**
      * Return a new DataSource corresponding to the current
-     * configuration.
-     * <p>The getConnection() method will return a connection identical to
-     * {@link TestConfiguration#openDefaultConnection}.
+     * configuration. The getConnection() method will return
+     * a connection identical to TestConfiguration.openDefaultConnection().
      */
     public static javax.sql.DataSource getDataSource()
     {
@@ -85,10 +84,6 @@
      * Create a new DataSource object setup from the passed in TestConfiguration.
      * The getConnection() method will return a connection identical to
      * TestConfiguration.openDefaultConnection().
-     * <p>
-     * If no properties are passed in, defaults are obtained from the
-     * current <code>TestConfiguration</code> and the data source will be
-     * configured to create the specified database if it does not exist.
      */
     static javax.sql.DataSource getDataSource(TestConfiguration config,
             HashMap beanProperties)
@@ -101,10 +96,6 @@
      * Create a new DataSource object setup from the passed in
      * TestConfiguration using the received properties and data
      * source class name.
-     * <p>
-     * If no properties are passed in, defaults are obtained from the
-     * current <code>TestConfiguration</code> and the data source will be
-     * configured to create the specified database if it does not exist.
      */
     static Object getDataSource(TestConfiguration config,
         HashMap beanProperties, String dsClassName)
@@ -132,8 +123,6 @@ static HashMap getDataSourceProperties(TestConfiguration config)
         beanProperties.put("databaseName", config.getDefaultDatabaseName());
         beanProperties.put("user", config.getUserName());
         beanProperties.put("password", config.getUserPassword());
-        // By default non-existing databases will be created.
-        beanProperties.put("createDatabase", "create");
 
         
         return beanProperties;
