diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index e7fcd97c..d01292aa 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -171,36 +171,24 @@ public void reload()
         if (!memops.isModified())
             memops = new DefaultDouble(metadata.getMemtableOperationsInMillions());
         
-        // reset the memtable with new settings.
-        try
-        {
-            forceBlockingFlush();
-        }
-        catch (InterruptedException ex)
-        {
-            throw new RuntimeException(ex);
-        }
-        catch (ExecutionException ex)
-        {
-            throw new IOError(ex.getCause());
-        }
-        
         ssTables.updateCacheSizes();
         
         // figure out what needs to be added and dropped.
-        Set<ByteBuffer> indexesToDrop = new HashSet<ByteBuffer>();
-        Set<ColumnDefinition> indexesToAdd = new HashSet<ColumnDefinition>();
+        final Set<ByteBuffer> indexesToDrop = new HashSet<ByteBuffer>();
+        final Set<ColumnDefinition> indexesToAdd = new HashSet<ColumnDefinition>();
         
         for (ColumnDefinition cdef : metadata.getColumn_metadata().values())
-        {
             if (!indexedColumns.containsKey(cdef.name))
                 indexesToAdd.add(cdef);
-        }
         for (ByteBuffer indexName : indexedColumns.keySet())
-        {
             if (!metadata.getColumn_metadata().containsKey(indexName))
                 indexesToDrop.add(indexName);
-        }
+        // future: if/when we have modifiable settings for secondary indexes, they'll need to be handled here.
+        
+        final Runnable indexMaintenance = new Runnable() 
+        {
+            public void run() 
+            {
         // drop indexes no longer needed.
         for (ByteBuffer indexName : indexesToDrop)
         {
@@ -214,6 +202,10 @@ public void reload()
             if (info.getIndexType() != null)
                 addIndex(info);
     }
+        };
+        // reset the memtable with new settings.
+        maybeSwitchMemtable(memtable, true, indexMaintenance);
+    }
 
     private ColumnFamilyStore(Table table, String columnFamilyName, IPartitioner partitioner, int generation, CFMetaData metadata)
     {
@@ -616,7 +608,7 @@ public String getTempSSTablePath(String directory)
     }
 
     /** flush the given memtable and swap in a new one for its CFS, if it hasn't been frozen already.  threadsafe. */
-    Future<?> maybeSwitchMemtable(Memtable oldMemtable, final boolean writeCommitLog)
+    Future<?> maybeSwitchMemtable(Memtable oldMemtable, final boolean writeCommitLog, final Runnable postFlush)
     {
         /*
          * If we can get the writelock, that means no new updates can come in and
@@ -671,6 +663,8 @@ public void runMayThrow() throws InterruptedException, IOException
                         // the log header with "you can discard anything written before the context" is not valid
                         CommitLog.instance.discardCompletedSegments(metadata.cfId, ctx);
                     }
+                    if (postFlush != null)
+                        postFlush.run();
                 }
             });
         }
@@ -702,7 +696,7 @@ public void forceFlushIfExpired()
         if (memtable.isClean())
             return null;
 
-        return maybeSwitchMemtable(memtable, true);
+        return maybeSwitchMemtable(memtable, true, null);
     }
 
     public void forceBlockingFlush() throws ExecutionException, InterruptedException
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java b/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
index 061cd1ea..dd536e7c 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/db/Table.java
@@ -448,7 +448,7 @@ public void apply(RowMutation mutation, Object serializedMutation, boolean write
         // flush memtables that got filled up outside the readlock (maybeSwitchMemtable acquires writeLock).
         // usually mTF will be empty and this will be a no-op.
         for (Memtable memtable : memtablesToFlush)
-            memtable.cfs.maybeSwitchMemtable(memtable, writeCommitLog);
+            memtable.cfs.maybeSwitchMemtable(memtable, writeCommitLog, null);
     }
 
     private static List<Memtable> addFullMemtable(List<Memtable> memtablesToFlush, Memtable fullMemtable)
@@ -594,7 +594,7 @@ public void build()
 
                 // during index build, we do flush index memtables separately from master; otherwise we could OOM
                 for (Memtable memtable : memtablesToFlush)
-                    memtable.cfs.maybeSwitchMemtable(memtable, false);
+                    memtable.cfs.maybeSwitchMemtable(memtable, false, null);
             }
 
             try
