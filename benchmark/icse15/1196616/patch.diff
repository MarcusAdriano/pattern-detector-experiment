diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/minhash/HashFactory.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/minhash/HashFactory.java
index 82d5fa37..5cb572e4 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/minhash/HashFactory.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/minhash/HashFactory.java
@@ -18,6 +18,7 @@
 
 import org.apache.mahout.common.RandomUtils;
 import org.apache.mahout.math.MurmurHash;
+import org.apache.mahout.math.MurmurHash3;
 
 import java.util.Random;
 
@@ -27,7 +28,7 @@ private HashFactory() {
   }
 
   public enum HashType {
-    LINEAR, POLYNOMIAL, MURMUR
+    LINEAR, POLYNOMIAL, MURMUR, MURMUR3
   }
 
   public static HashFunction[] createHashFunctions(HashType type, int numFunctions) {
@@ -49,6 +50,11 @@ private HashFactory() {
           hashFunction[i] = new MurmurHashWrapper(seed.nextInt());
         }
         break;
+      case MURMUR3:
+        for (int i = 0; i < numFunctions; i++) {
+          hashFunction[i] = new MurmurHash3Wrapper(seed.nextInt());
+        }
+        break;
       default:
         throw new IllegalStateException("Unknown type: " + type);
     }
@@ -111,4 +117,18 @@ public int hash(byte[] bytes) {
       return Math.abs((int) (hashValue % RandomUtils.MAX_INT_SMALLER_TWIN_PRIME));
     }
   }
+
+  static class MurmurHash3Wrapper implements HashFunction {
+    private final int seed;
+
+    MurmurHash3Wrapper(int seed) {
+      this.seed = seed;
+    }
+
+    @Override
+    public int hash(byte[] bytes) {
+      long hashValue = MurmurHash3.murmurhash3_x86_32(bytes, 0, bytes.length, seed);
+      return Math.abs((int) (hashValue % RandomUtils.MAX_INT_SMALLER_TWIN_PRIME));
+    }
+  }
 }
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/minhash/TestMinHashClustering.java b/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/minhash/TestMinHashClustering.java
index 17909aba..133d4771 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/minhash/TestMinHashClustering.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/minhash/TestMinHashClustering.java
@@ -171,4 +171,12 @@ public void testMurmurMinHashMRJob() throws Exception {
     verify(output, 0.3, "Hash Type: MURMUR");
   }
   
+  @Test
+  public void testMurmur3MinHashMRJob() throws Exception {
+    String[] args = makeArguments(2, 3, 20, 4, HashType.MURMUR3.toString());
+    int ret = ToolRunner.run(new Configuration(), new MinHashDriver(), args);
+    assertEquals("Minhash MR Job failed for " + HashType.MURMUR3, 0, ret);
+    verify(output, 0.3, "Hash Type: MURMUR");
+  }
+  
 }
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/MurmurHash3.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/MurmurHash3.java
index e69de29b..8052e3ef 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/MurmurHash3.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/MurmurHash3.java
@@ -0,0 +1,80 @@
+package org.apache.mahout.math;
+/**
+ *  This code is public domain.
+ *
+ *  The MurmurHash3 algorithm was created by Austin Appleby and put into the public domain.  See http://code.google.com/p/smhasher/
+ *
+ *  This java port was authored by
+ *  Yonik Seeley and was placed into the public domain per https://github.com/yonik/java_util/blob/master/src/util/hash/MurmurHash3.java.
+ */
+
+//
+
+/**
+ *  <p>
+ *  This produces exactly the same hash values as the final C++
+ *  version of MurmurHash3 and is thus suitable for producing the same hash values across
+ *  platforms.
+ *  <p>
+ *  The 32 bit x86 version of this hash should be the fastest variant for relatively short keys like ids.
+ *  <p>
+ *  Note - The x86 and x64 versions do _not_ produce the same results, as the
+ *  algorithms are optimized for their respective platforms.
+ *  <p>
+ *  See also http://github.com/yonik/java_util for future updates to this file.
+ */
+public class MurmurHash3 {
+
+  /** Returns the MurmurHash3_x86_32 hash. */
+  public static int murmurhash3_x86_32(byte[] data, int offset, int len, int seed) {
+
+    final int c1 = 0xcc9e2d51;
+    final int c2 = 0x1b873593;
+
+    int h1 = seed;
+    int roundedEnd = offset + (len & 0xfffffffc);  // round down to 4 byte block
+
+    for (int i=offset; i<roundedEnd; i+=4) {
+      // little endian load order
+      int k1 = (data[i] & 0xff) | ((data[i+1] & 0xff) << 8) | ((data[i+2] & 0xff) << 16) | (data[i+3] << 24);
+      k1 *= c1;
+      k1 = (k1 << 15) | (k1 >>> 17);  // ROTL32(k1,15);
+      k1 *= c2;
+
+      h1 ^= k1;
+      h1 = (h1 << 13) | (h1 >>> 19);  // ROTL32(h1,13);
+      h1 = h1*5+0xe6546b64;
+    }
+
+    // tail
+    int k1 = 0;
+
+    switch(len & 0x03) {
+      case 3:
+        k1 = (data[roundedEnd + 2] & 0xff) << 16;
+        // fallthrough
+      case 2:
+        k1 |= (data[roundedEnd + 1] & 0xff) << 8;
+        // fallthrough
+      case 1:
+        k1 |= (data[roundedEnd] & 0xff);
+        k1 *= c1;
+        k1 = (k1 << 15) | (k1 >>> 17);  // ROTL32(k1,15);
+        k1 *= c2;
+        h1 ^= k1;
+    }
+
+    // finalization
+    h1 ^= len;
+
+    // fmix(h1);
+    h1 ^= h1 >>> 16;
+    h1 *= 0x85ebca6b;
+    h1 ^= h1 >>> 13;
+    h1 *= 0xc2b2ae35;
+    h1 ^= h1 >>> 16;
+
+    return h1;
+  }
+
+}
