diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java
index 5f0613ab..41836ab4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/store/raw/data/StoredPage.java
@@ -369,10 +369,9 @@ public int getTypeFormatId()
      * This is used as the threshold for a long column.
      * 
      * maxFieldSize = 
-     *      totalSpace * (1 - spareSpace/100) - 
-     *      slotEntrySize * - 16 - OVERFLOW_POINTER_SIZE;
+     *      totalSpace - slotEntrySize - 16 - OVERFLOW_POINTER_SIZE;
      **/
-	protected int maxFieldSize;
+    private int maxFieldSize;
 
 
     /**
@@ -696,15 +695,15 @@ protected void usePageBuffer(byte[] pageBuffer)
 		if (rawDataIn != null)
 			rawDataIn.setData(pageData);
 
-        initSpace();
-
-		if (pageSize >= 65536)
-			slotFieldSize = LARGE_SLOT_SIZE;
-		else
-			slotFieldSize = SMALL_SLOT_SIZE;
-		
+        // Note that the slotFieldSize and slotEntrySize need to be
+        // calculated BEFORE initSpace() is called, because the
+        // maxFieldSize computation in initSpace() includes these
+        // values in its calculations. (DERBY-3099)
+        slotFieldSize = calculateSlotFieldSize(pageSize);
 		slotEntrySize = 3 * slotFieldSize;
 
+        initSpace();
+
         // offset of slot table entry[0]
         slotTableOffsetToFirstEntry = 
             (pageSize - CHECKSUM_SIZE - slotEntrySize);
@@ -721,6 +720,21 @@ protected void usePageBuffer(byte[] pageBuffer)
 			rawDataOut.setData(pageData);
 	}
 
+    /**
+     * Calculate the slot field size from the page size.
+     *
+     * @param pageSize page size in bytes
+     * @return slot field size in bytes
+     */
+    private int calculateSlotFieldSize(int pageSize) {
+        if (pageSize < 65536) {
+            // slots are 2 bytes (unsigned short data type) for pages <64KB
+            return SMALL_SLOT_SIZE;
+        } else {
+            // slots are 4 bytes (int data type) for pages >=64KB
+            return LARGE_SLOT_SIZE;
+        }
+    }
 
     /**
      * Create a new StoredPage.
@@ -3338,8 +3352,16 @@ private void initSpace()
 
 		maxFieldSize = totalSpace - slotEntrySize - 16 - OVERFLOW_POINTER_SIZE;
 
-        if (SanityManager.DEBUG)
+        if (SanityManager.DEBUG) {
             SanityManager.ASSERT(maxFieldSize >= 0);
+            // DERBY-3099: maxFieldSize was calculated before slotFieldSize and
+            // slotEntrySize had been initialized.
+            int expectedFieldSize = calculateSlotFieldSize(pageData.length);
+            SanityManager.ASSERT(slotFieldSize == expectedFieldSize,
+                                 "slotFieldSize uninitialized");
+            SanityManager.ASSERT(slotEntrySize == 3 * expectedFieldSize,
+                                 "slotEntrySize uninitialized");
+        }
 	}
 
     /**
