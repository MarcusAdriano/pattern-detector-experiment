diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LoginTimeoutTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LoginTimeoutTest.java
index ba2a4256..f67b4276 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LoginTimeoutTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/LoginTimeoutTest.java
@@ -36,6 +36,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.authentication.UserAuthenticator;
 
+import org.apache.derbyTesting.junit.BaseTestCase;
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
 import org.apache.derbyTesting.junit.SystemPropertyTestSetup;
@@ -68,6 +69,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private static  final   boolean SUCCEED = true;
     private static  final   boolean FAIL = false;
 
+    private static  final   int LONG_TIMEOUT = 10;
+
     ///////////////////////////////////////////////////////////////////////////////////
     //
     // STATE
@@ -89,6 +92,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     /** User authenticator which sleeps for a while */
     public  static  final   class   SluggishAuthenticator   implements  UserAuthenticator
     {
+        public  static  boolean debugPrinting = false;
+        
         private static  final   long    MILLIS_PER_SECOND = 1000L;
         
         public  static  long    secondsToSleep = 2;
@@ -107,12 +112,23 @@ public  SluggishAuthenticator() {}
         {
             // sleepy...
             try {
+                long    sleepTime = secondsToSleep * MILLIS_PER_SECOND;
+                printText( "SluggishAuthenticator going to sleep for " + sleepTime + " milliseconds." );
                 Thread.sleep( secondsToSleep * MILLIS_PER_SECOND );
+                printText( "...SluggishAuthenticator waking up after " + sleepTime + " milliseconds." );
             } catch (Exception e) { throw new SQLException( e.getMessage(), e ); }
 
             // ...and vacuous.
             return returnValue;
         }
+        
+        private static  void    printText( String text )
+        {
+            if ( debugPrinting )
+            {
+                BaseTestCase.println( text );
+            }
+        }
     }
 
     /** Behavior shared by DataSource and DriverManager */
@@ -250,7 +266,11 @@ private static  Properties  systemProperties()
      */
     public  void    testBasic() throws Exception
     {
-        DataSource  ds = JDBCDataSource.getDataSource();
+        SluggishAuthenticator.debugPrinting = TestConfiguration.getCurrent().isVerbose();
+
+        // make sure the database is created in order to eliminate asymmetries
+        // in running the tests
+        openDefaultConnection( RUTH, RUTH_PASSWORD );
         
         vetConnector( new DriverManagerConnector( this ), true );
         vetConnector( new DataSourceConnector( JDBCDataSource.getDataSource() ), true );
@@ -262,21 +282,25 @@ public  void    testBasic() throws Exception
     }
     private void    vetConnector( Connector connector, boolean shouldSucceed ) throws Exception
     {
+        try {
         tryTimeout( connector, 1, FAIL && shouldSucceed );
-        tryTimeout( connector, 10, SUCCEED && shouldSucceed );
+            tryTimeout( connector, LONG_TIMEOUT, SUCCEED && shouldSucceed );
         tryTimeout( connector, 0, SUCCEED && shouldSucceed );
-
+        }
+        finally
+        {
         // revert to default state
         connector.setLoginTimeout( 0 );
     }
-    private static  void    tryTimeout( Connector connector, int timeout, boolean shouldSucceed ) throws Exception
+    }
+    private void    tryTimeout( Connector connector, int timeout, boolean shouldSucceed ) throws Exception
     {
         println( "Setting timeout " + timeout + " on " + connector );
         connector.setLoginTimeout( timeout );
 
         tryTimeout( connector, shouldSucceed );
     }
-    private static  void    tryTimeout( Connector connector, boolean shouldSucceed ) throws Exception
+    private void    tryTimeout( Connector connector, boolean shouldSucceed ) throws Exception
     {
         long    startTime = System.currentTimeMillis();
         
@@ -287,7 +311,7 @@ private static  void    tryTimeout( Connector connector, boolean shouldSucceed )
         }
         catch (SQLException se)
         {
-            if ( shouldSucceed ) { fail( "Should have been able to connect!" ); }
+            if ( shouldSucceed ) { failWithTrace( se, "Should have been able to connect!" ); }
 
             assertTrue( "Didn't expect to see a " + se.getClass().getName(), (se instanceof SQLTimeoutException) );
             assertSQLState( LOGIN_TIMEOUT, se );
@@ -299,9 +323,10 @@ private static  void    tryTimeout( Connector connector, boolean shouldSucceed )
     }
     private void    vetExceptionPassthrough() throws Exception
     {
+        try {
         println( "Verifying that exceptions are not swallowed by the embedded login timer." );
         // set a long timeout which we won't exceed
-        DriverManager.setLoginTimeout( 10 );
+            DriverManager.setLoginTimeout( LONG_TIMEOUT );
 
         // tell the authenticator to always fail
         SluggishAuthenticator.returnValue = false;
@@ -311,11 +336,14 @@ private void    vetExceptionPassthrough() throws Exception
             fail( "Didn't expect to get a connection!" );
         }
         catch (SQLException se) { assertSQLState( LOGIN_FAILED, se ); }
-
+        }
+        finally
+        {
         // return to default position
         DriverManager.setLoginTimeout( 0 );
         SluggishAuthenticator.returnValue = true;
     }
+    }
     private void    vetServerTimeouts() throws Exception
     {
         println( "Verifying behavior when timeouts are also set on the server." );
@@ -332,7 +360,7 @@ private void    vetServerTimeouts() throws Exception
         Connector   connector = new DriverManagerConnector( this );
 
         vetServerTimeout( controlConnection, connector, 1, FAIL );
-        vetServerTimeout( controlConnection, connector, 10, SUCCEED );
+        vetServerTimeout( controlConnection, connector, LONG_TIMEOUT, SUCCEED );
         vetServerTimeout( controlConnection, connector, 0, SUCCEED );
 
         // reset server timeout to default
@@ -365,4 +393,17 @@ public  static  void    setLoginTimeout( int seconds ) throws Exception
         DriverManager.setLoginTimeout( seconds );
     }
     
+    ///////////////////////////////////////////////////////////////////////////////////
+    //
+    // MINIONS
+    //
+    ///////////////////////////////////////////////////////////////////////////////////
+
+    /** Fail and print a stack trace */
+    private static void    failWithTrace( Throwable t, String message )
+    {
+        printStackTrace( t );
+        fail( message );
+    }
+
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
index 7333b207..3cf4b56f 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/junit/BaseTestCase.java
@@ -200,6 +200,7 @@ public static void alarm(final String text) {
     public static void println(final String text) {
         if (TestConfiguration.getCurrent().isVerbose()) {
             out.println("DEBUG: " + text);
+            out.flush();
         }
     }
 
