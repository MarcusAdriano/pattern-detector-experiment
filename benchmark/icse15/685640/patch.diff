diff --git a/lucene/solr/trunk/src/java/org/apache/solr/common/util/NamedListCodec.java b/lucene/solr/trunk/src/java/org/apache/solr/common/util/NamedListCodec.java
index 6a72ef2e..b2e0541b 100644
--- a/lucene/solr/trunk/src/java/org/apache/solr/common/util/NamedListCodec.java
+++ b/lucene/solr/trunk/src/java/org/apache/solr/common/util/NamedListCodec.java
@@ -222,6 +222,7 @@ public boolean writeKnownType(Object val) throws IOException {
     }
     if (val instanceof Iterable) {
       writeIterator(((Iterable)val).iterator());
+      return true;
     }
     return false;
   }
diff --git a/lucene/solr/trunk/src/test/org/apache/solr/common/util/TestNamedListCodec.java b/lucene/solr/trunk/src/test/org/apache/solr/common/util/TestNamedListCodec.java
index e7266850..97468d2c 100644
--- a/lucene/solr/trunk/src/test/org/apache/solr/common/util/TestNamedListCodec.java
+++ b/lucene/solr/trunk/src/test/org/apache/solr/common/util/TestNamedListCodec.java
@@ -22,9 +22,12 @@
 
 import java.io.ByteArrayOutputStream;
 import java.io.ByteArrayInputStream;
+import java.io.IOException;
 import java.util.List;
 import java.util.Random;
 import java.util.ArrayList;
+import java.util.Map;
+import java.util.HashMap;
 
 import junit.framework.TestCase;
 
@@ -122,7 +125,43 @@ public void testIterator() throws Exception{
     assertEquals(list.size(), l.size());
   }
 
+  public void testIterable() throws Exception {
+    ByteArrayOutputStream baos = new ByteArrayOutputStream();
+
+    NamedList r = new NamedList();
 
+    Map<String, String> map = new HashMap<String, String>();
+    map.put("foo", "bar");
+    map.put("junk", "funk");
+    map.put("ham", "burger");
+
+    r.add("keys", map.keySet());
+    r.add("more", "less");
+    r.add("values", map.values());
+    r.add("finally", "the end");
+    new NamedListCodec(null).marshal(r,baos);
+    byte[] arr = baos.toByteArray();
+
+    try {
+      NamedList result = new NamedListCodec().unmarshal(new ByteArrayInputStream(arr));
+      assertTrue("result is null and it shouldn't be", result != null);
+      List keys = (List) result.get("keys");
+      assertTrue("keys is null and it shouldn't be", keys != null);
+      assertTrue("keys Size: " + keys.size() + " is not: " + 3, keys.size() == 3);
+      String less = (String) result.get("more");
+      assertTrue("less is null and it shouldn't be", less != null);
+      assertTrue(less + " is not equal to " + "less", less.equals("less") == true);
+      List values = (List) result.get("values");
+      assertTrue("values is null and it shouldn't be", values != null);
+      assertTrue("values Size: " + values.size() + " is not: " + 3, values.size() == 3);
+      String theEnd = (String) result.get("finally");
+      assertTrue("theEnd is null and it shouldn't be", theEnd != null);
+      assertTrue(theEnd + " is not equal to " + "the end", theEnd.equals("the end") == true);
+    } catch (ClassCastException e) {
+      assertTrue("Received a CCE and we shouldn't have", false);
+    }
+
+  }
 
   
   int rSz(int orderOfMagnitude) {
