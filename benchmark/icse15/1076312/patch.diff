diff --git a/lucene/dev/branches/branch_3x/lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter.java b/lucene/dev/branches/branch_3x/lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter.java
index 96c9fa60..2542d616 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter.java
@@ -28,6 +28,7 @@
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.WhitespaceTokenizer;
 import org.apache.lucene.document.Document;
+import org.apache.lucene.index.IndexWriter; // javadoc
 import org.apache.lucene.store.Directory;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.Version;
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java b/lucene/dev/branches/branch_3x/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java
index da5be28e..823f8368 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java
@@ -85,9 +85,9 @@
  * <code>super.tearDown()</code>
  * </p>
  *
- * @After - replaces setup
- * @Before - replaces teardown
- * @Test - any public method with this annotation is a test case, regardless
+ * <code>@After</code> - replaces setup
+ * <code>@Before</code> - replaces teardown
+ * <code>@Test</code> - any public method with this annotation is a test case, regardless
  * of its name
  * <p>
  * <p>
@@ -484,7 +484,7 @@ private static int threadCleanup(String context) {
    * directly in the same scope as the IndexReader.
    * </p>
    *
-   * @see FieldCacheSanityChecker
+   * @see org.apache.lucene.util.FieldCacheSanityChecker
    */
   protected void assertSaneFieldCaches(final String msg) {
     final CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();
@@ -774,13 +774,13 @@ public static MockDirectoryWrapper newDirectory(Random r, Directory d) throws IO
   }
   
   /** Returns a new field instance. 
-   * See {@link #newField(String, String, Store, Index, TermVector)} for more information */
+   * See {@link #newField(String, String, Field.Store, Field.Index, Field.TermVector)} for more information */
   public static Field newField(String name, String value, Index index) {
     return newField(random, name, value, index);
   }
   
   /** Returns a new field instance. 
-   * See {@link #newField(String, String, Store, Index, TermVector)} for more information */
+   * See {@link #newField(String, String, Field.Store, Field.Index, Field.TermVector)} for more information */
   public static Field newField(String name, String value, Store store, Index index) {
     return newField(random, name, value, store, index);
   }
@@ -799,19 +799,19 @@ public static Field newField(String name, String value, Store store, Index index
   }
   
   /** Returns a new field instance, using the specified random. 
-   * See {@link #newField(String, String, Store, Index, TermVector)} for more information */
+   * See {@link #newField(String, String, Field.Store, Field.Index, Field.TermVector)} for more information */
   public static Field newField(Random random, String name, String value, Index index) {
     return newField(random, name, value, Store.NO, index);
   }
   
   /** Returns a new field instance, using the specified random. 
-   * See {@link #newField(String, String, Store, Index, TermVector)} for more information */
+   * See {@link #newField(String, String, Field.Store, Field.Index, Field.TermVector)} for more information */
   public static Field newField(Random random, String name, String value, Store store, Index index) {
     return newField(random, name, value, store, index, TermVector.NO);
   }
   
   /** Returns a new field instance, using the specified random. 
-   * See {@link #newField(String, String, Store, Index, TermVector)} for more information */
+   * See {@link #newField(String, String, Field.Store, Field.Index, Field.TermVector)} for more information */
   public static Field newField(Random random, String name, String value, Store store, Index index, TermVector tv) {
     if (!index.isIndexed())
       return new Field(name, value, store, index);
