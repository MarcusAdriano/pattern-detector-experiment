diff --git a/cassandra/branches/cassandra-0.7/contrib/bmt_example/CassandraBulkLoader.java b/cassandra/branches/cassandra-0.7/contrib/bmt_example/CassandraBulkLoader.java
index 3470d32e..76f1e4c3 100644
--- a/cassandra/branches/cassandra-0.7/contrib/bmt_example/CassandraBulkLoader.java
+++ b/cassandra/branches/cassandra-0.7/contrib/bmt_example/CassandraBulkLoader.java
@@ -75,6 +75,7 @@
 import org.apache.cassandra.net.MessagingService;
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.utils.FBUtilities;
+import org.apache.cassandra.utils.ByteBufferUtil;
 import org.apache.hadoop.filecache.DistributedCache;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.io.Text;
@@ -175,9 +176,9 @@ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text>
                 String ColumnValue = fields[3];
                 int timestamp = 0;
                 columnFamily.addColumn(new QueryPath(cfName,
-                                                     ByteBuffer.wrap(SuperColumnName.getBytes(Charsets.UTF_8)),
-                                                     ByteBuffer.wrap(ColumnName.getBytes(Charsets.UTF_8))), 
-                                       ByteBuffer.wrap(ColumnValue.getBytes()),
+                                                     ByteBufferUtil.bytes(SuperColumnName),
+                                                     ByteBufferUtil.bytes(ColumnName)),
+                                       ByteBufferUtil.bytes(ColumnValue),
                                        timestamp);
             }
 
@@ -186,7 +187,7 @@ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text>
             /* Get serialized message to send to cluster */
             message = createMessage(keyspace, key.getBytes(), cfName, columnFamilies);
             List<IAsyncResult> results = new ArrayList<IAsyncResult>();
-            for (InetAddress endpoint: StorageService.instance.getNaturalEndpoints(keyspace, ByteBuffer.wrap(key.getBytes())))
+            for (InetAddress endpoint: StorageService.instance.getNaturalEndpoints(keyspace, ByteBufferUtil.bytes(key)))
             {
                 /* Send message to end point */
                 results.add(MessagingService.instance().sendRR(message, endpoint));
diff --git a/cassandra/branches/cassandra-0.7/contrib/client_only/src/ClientOnlyExample.java b/cassandra/branches/cassandra-0.7/contrib/client_only/src/ClientOnlyExample.java
index 7bb4d20b..fa69965f 100644
--- a/cassandra/branches/cassandra-0.7/contrib/client_only/src/ClientOnlyExample.java
+++ b/cassandra/branches/cassandra-0.7/contrib/client_only/src/ClientOnlyExample.java
@@ -63,9 +63,9 @@ private static void testWriting() throws Exception
         // do some writing.
         for (int i = 0; i < 100; i++)
         {
-            RowMutation change = new RowMutation(KEYSPACE, ByteBuffer.wrap(("key" + i).getBytes()));
+            RowMutation change = new RowMutation(KEYSPACE, ByteBufferUtil.bytes(("key" + i)));
             ColumnPath cp = new ColumnPath(COLUMN_FAMILY).setColumn(("colb").getBytes());
-            change.add(new QueryPath(cp), ByteBuffer.wrap(("value" + i).getBytes()), 0);
+            change.add(new QueryPath(cp), ByteBufferUtil.bytes(("value" + i)), 0);
 
             // don't call change.apply().  The reason is that is makes a static call into Table, which will perform
             // local storage initialization, which creates local directories.
@@ -87,7 +87,7 @@ private static void testReading() throws Exception
         for (int i = 0; i < 100; i++)
         {
             List<ReadCommand> commands = new ArrayList<ReadCommand>();
-            SliceByNamesReadCommand readCommand = new SliceByNamesReadCommand(KEYSPACE, ByteBuffer.wrap(("key" + i).getBytes()),
+            SliceByNamesReadCommand readCommand = new SliceByNamesReadCommand(KEYSPACE, ByteBufferUtil.bytes(("key" + i)),
                                                                               new QueryPath(COLUMN_FAMILY, null, null), cols);
             readCommand.setDigestQuery(false);
             commands.add(readCommand);
diff --git a/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/Session.java b/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/Session.java
index 9b9e4722..adad267c 100644
--- a/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/Session.java
+++ b/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/Session.java
@@ -28,6 +28,8 @@
 import org.apache.cassandra.db.ColumnFamilyType;
 import org.apache.cassandra.thrift.*;
 import org.apache.commons.lang.StringUtils;
+
+import org.apache.cassandra.utils.ByteBufferUtil;
 import org.apache.thrift.protocol.TBinaryProtocol;
 import org.apache.thrift.transport.TFramedTransport;
 import org.apache.thrift.transport.TSocket;
@@ -372,7 +374,7 @@ public void createKeySpaces()
         standardCfDef.setComparator_type("AsciiType").setDefault_validation_class("BytesType");
         if (indexType != null)
         {
-            ColumnDef standardColumn = new ColumnDef(ByteBuffer.wrap("C1".getBytes()), "BytesType");
+            ColumnDef standardColumn = new ColumnDef(ByteBufferUtil.bytes("C1"), "BytesType");
             standardColumn.setIndex_type(indexType).setIndex_name("Idx1");
             standardCfDef.setColumn_metadata(Arrays.asList(standardColumn));
         }
diff --git a/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/IndexedRangeSlicer.java b/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/IndexedRangeSlicer.java
index 1c1b889a..e8cd38e3 100644
--- a/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/IndexedRangeSlicer.java
+++ b/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/IndexedRangeSlicer.java
@@ -36,15 +36,15 @@ public IndexedRangeSlicer(int index)
     public void run(Cassandra.Client client) throws IOException
     {
         String format = "%0" + session.getTotalKeysLength() + "d";
-        SlicePredicate predicate = new SlicePredicate().setSlice_range(new SliceRange(ByteBuffer.wrap(new byte[]{}),
-                                                                                      ByteBuffer.wrap(new byte[] {}),
+        SlicePredicate predicate = new SlicePredicate().setSlice_range(new SliceRange(ByteBufferUtil.EMPTY_BYTE_BUFFER,
+                                                                                      ByteBufferUtil.EMPTY_BYTE_BUFFER,
                                                                                       false, session.getColumnsPerKey()));
 
         List<ByteBuffer> values = super.generateValues();
         ColumnParent parent = new ColumnParent("Standard1");
         int expectedPerValue = session.getNumKeys() / values.size();
 
-        ByteBuffer columnName = ByteBuffer.wrap("C1".getBytes());
+        ByteBuffer columnName = ByteBufferUtil.bytes("C1");
 
         int received = 0;
 
@@ -56,7 +56,7 @@ public void run(Cassandra.Client client) throws IOException
         while (received < expectedPerValue)
         {
             IndexClause clause = new IndexClause(Arrays.asList(expression),
-                                                 ByteBuffer.wrap(startOffset.getBytes()),
+                                                 ByteBufferUtil.bytes(startOffset),
                                                  session.getKeysPerCall());
 
             List<KeySlice> results = null;
diff --git a/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/Inserter.java b/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/Inserter.java
index 7b932614..ad6d8b0f 100644
--- a/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/Inserter.java
+++ b/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/Inserter.java
@@ -59,7 +59,7 @@ public void run(Cassandra.Client client) throws IOException
             for (int i = 0; i < session.getSuperColumns(); i++)
             {
                 String superColumnName = "S" + Integer.toString(i);
-                superColumns.add(new SuperColumn(ByteBuffer.wrap(superColumnName.getBytes()), columns));
+                superColumns.add(new SuperColumn(ByteBufferUtil.bytes(superColumnName), columns));
             }
         }
 
diff --git a/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/MultiGetter.java b/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/MultiGetter.java
index cc244306..823b847a 100644
--- a/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/MultiGetter.java
+++ b/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/MultiGetter.java
@@ -20,6 +20,7 @@
 import org.apache.cassandra.contrib.stress.util.Operation;
 import org.apache.cassandra.db.ColumnFamilyType;
 import org.apache.cassandra.thrift.*;
+import org.apache.cassandra.utils.ByteBufferUtil;
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
@@ -27,6 +28,7 @@
 import java.util.List;
 import java.util.Map;
 
+
 public class MultiGetter extends Operation
 {
     public MultiGetter(int index)
@@ -36,8 +38,8 @@ public MultiGetter(int index)
 
     public void run(Cassandra.Client client) throws IOException
     {
-        SlicePredicate predicate = new SlicePredicate().setSlice_range(new SliceRange(ByteBuffer.wrap(new byte[]{}),
-                                                                                      ByteBuffer.wrap(new byte[] {}),
+        SlicePredicate predicate = new SlicePredicate().setSlice_range(new SliceRange(ByteBufferUtil.EMPTY_BYTE_BUFFER,
+                                                                                      ByteBufferUtil.EMPTY_BYTE_BUFFER,
                                                                                       false, session.getColumnsPerKey()));
 
         int offset = index * session.getKeysPerThread();
@@ -49,7 +51,7 @@ public void run(Cassandra.Client client) throws IOException
 
             for (int j = 0; j < session.getSuperColumns(); j++)
             {
-                ColumnParent parent = new ColumnParent("Super1").setSuper_column(("S" + j).getBytes());
+                ColumnParent parent = new ColumnParent("Super1").setSuper_column(ByteBufferUtil.bytes("S" + j));
 
                 long start = System.currentTimeMillis();
 
diff --git a/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/RangeSlicer.java b/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/RangeSlicer.java
index b2e6ff43..c827984d 100644
--- a/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/RangeSlicer.java
+++ b/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/RangeSlicer.java
@@ -42,14 +42,14 @@ public void run(Cassandra.Client client) throws IOException
         // initial values
         int count = session.getColumnsPerKey();
 
-        SlicePredicate predicate = new SlicePredicate().setSlice_range(new SliceRange(ByteBuffer.wrap(new byte[] {}),
-                                                                                      ByteBuffer.wrap(new byte[] {}),
+        SlicePredicate predicate = new SlicePredicate().setSlice_range(new SliceRange(ByteBufferUtil.EMPTY_BYTE_BUFFER,
+                                                                                      ByteBufferUtil.EMPTY_BYTE_BUFFER,
                                                                                       false,
                                                                                       count));
 
         if (session.getColumnFamilyType() == ColumnFamilyType.Super)
         {
-            byte[] start = String.format(format, index).getBytes();
+            ByteBuffer start = ByteBufferUtil.bytes(String.format(format, index));
 
             List<KeySlice> slices = new ArrayList<KeySlice>();
             KeyRange range = new KeyRange(count).setStart_key(start).setEnd_key(ByteBufferUtil.EMPTY_BYTE_BUFFER);
@@ -57,7 +57,7 @@ public void run(Cassandra.Client client) throws IOException
             for (int i = 0; i < session.getSuperColumns(); i++)
             {
                 String superColumnName = "S" + Integer.toString(i);
-                ColumnParent parent = new ColumnParent("Super1").setSuper_column(ByteBuffer.wrap(superColumnName.getBytes()));
+                ColumnParent parent = new ColumnParent("Super1").setSuper_column(ByteBufferUtil.bytes(superColumnName));
 
                 long startTime = System.currentTimeMillis();
 
@@ -83,7 +83,7 @@ public void run(Cassandra.Client client) throws IOException
                     error(String.format("Operation [%d] retried %d times - error on calling get_range_slices for range offset %s %s%n",
                                         index,
                                         session.getRetryTimes(),
-                                        new String(start),
+                                        ByteBufferUtil.string(start),
                                         (exceptionMessage == null) ? "" : "(" + exceptionMessage + ")"));
                 }
 
@@ -97,7 +97,7 @@ public void run(Cassandra.Client client) throws IOException
         {
             ColumnParent parent = new ColumnParent("Standard1");
 
-            byte[] start = String.format(format, index).getBytes();
+            ByteBuffer start = ByteBufferUtil.bytes(String.format(format, index));
 
             List<KeySlice> slices = new ArrayList<KeySlice>();
             KeyRange range = new KeyRange(count).setStart_key(start).setEnd_key(ByteBufferUtil.EMPTY_BYTE_BUFFER);
@@ -129,7 +129,7 @@ public void run(Cassandra.Client client) throws IOException
                 error(String.format("Operation [%d] retried %d times - error on calling get_indexed_slices for range offset %s %s%n",
                                     index,
                                     session.getRetryTimes(),
-                                    new String(start),
+                                    ByteBufferUtil.string(start),
                                     (exceptionMessage == null) ? "" : "(" + exceptionMessage + ")"));
             }
 
diff --git a/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/Reader.java b/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/Reader.java
index 8478a2a1..360a2e4a 100644
--- a/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/Reader.java
+++ b/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/operations/Reader.java
@@ -25,6 +25,8 @@
 import java.nio.ByteBuffer;
 import java.util.List;
 
+import static com.google.common.base.Charsets.UTF_8;
+
 public class Reader extends Operation
 {
     public Reader(int index)
@@ -63,7 +65,7 @@ private void runSuperColumnReader(SlicePredicate predicate, Cassandra.Client cli
         for (int j = 0; j < session.getSuperColumns(); j++)
         {
             String superColumn = 'S' + Integer.toString(j);
-            ColumnParent parent = new ColumnParent("Super1").setSuper_column(superColumn.getBytes());
+            ColumnParent parent = new ColumnParent("Super1").setSuper_column(superColumn.getBytes(UTF_8));
 
             long start = System.currentTimeMillis();
 
diff --git a/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/util/Operation.java b/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/util/Operation.java
index 3bdb72c8..b98513bf 100644
--- a/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/util/Operation.java
+++ b/cassandra/branches/cassandra-0.7/contrib/stress/src/org/apache/cassandra/contrib/stress/util/Operation.java
@@ -21,16 +21,16 @@
 import java.math.BigInteger;
 import java.nio.ByteBuffer;
 import java.security.MessageDigest;
-
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
 
+import static com.google.common.base.Charsets.UTF_8;
+
 import org.apache.cassandra.contrib.stress.Session;
 import org.apache.cassandra.contrib.stress.Stress;
 import org.apache.cassandra.thrift.Cassandra;
 import org.apache.cassandra.thrift.InvalidRequestException;
-import org.apache.cassandra.utils.ByteBufferUtil;
 import org.apache.cassandra.utils.FBUtilities;
 
 public abstract class Operation
@@ -91,7 +91,7 @@ public Operation(int idx)
     private static byte[] generateRandomKey()
     {
         String format = "%0" + Stress.session.getTotalKeysLength() + "d";
-        return String.format(format, Stress.randomizer.nextInt(Stress.session.getNumKeys() - 1)).getBytes();
+        return String.format(format, Stress.randomizer.nextInt(Stress.session.getNumKeys() - 1)).getBytes(UTF_8);
     }
 
     /**
@@ -109,7 +109,7 @@ public Operation(int idx)
 
             if (0 <= token && token < session.getNumKeys())
             {
-                return String.format(format, (int) token).getBytes();
+                return String.format(format, (int) token).getBytes(UTF_8);
             }
         }
     }
@@ -148,7 +148,7 @@ private static double nextGaussian(int mu, float sigma)
     private String getMD5(String input)
     {
         MessageDigest md = FBUtilities.threadLocalMD5Digest();
-        byte[] messageDigest = md.digest(input.getBytes());
+        byte[] messageDigest = md.digest(input.getBytes(UTF_8));
         StringBuilder hash = new StringBuilder(new BigInteger(1, messageDigest).toString(16));
 
         while (hash.length() < 32)
diff --git a/cassandra/branches/cassandra-0.7/contrib/word_count/src/WordCount.java b/cassandra/branches/cassandra-0.7/contrib/word_count/src/WordCount.java
index 594f4a88..1641082b 100644
--- a/cassandra/branches/cassandra-0.7/contrib/word_count/src/WordCount.java
+++ b/cassandra/branches/cassandra-0.7/contrib/word_count/src/WordCount.java
@@ -27,6 +27,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import static com.google.common.base.Charsets.UTF_8;
+
 import org.apache.cassandra.db.IColumn;
 import org.apache.cassandra.hadoop.ColumnFamilyInputFormat;
 import org.apache.cassandra.hadoop.ConfigHelper;
@@ -82,7 +84,7 @@ public static void main(String[] args) throws Exception
         protected void setup(org.apache.hadoop.mapreduce.Mapper.Context context)
         throws IOException, InterruptedException
         {
-            sourceColumn = ByteBuffer.wrap(context.getConfiguration().get(CONF_COLUMN_NAME).getBytes());
+            sourceColumn = ByteBufferUtil.bytes(context.getConfiguration().get(CONF_COLUMN_NAME));
         }
 
         public void map(ByteBuffer key, SortedMap<ByteBuffer, IColumn> columns, Context context) throws IOException, InterruptedException
@@ -120,7 +122,7 @@ public void reduce(Text key, Iterable<IntWritable> values, Context context) thro
         protected void setup(org.apache.hadoop.mapreduce.Reducer.Context context)
         throws IOException, InterruptedException
         {
-            outputKey = ByteBuffer.wrap(context.getConfiguration().get(CONF_COLUMN_NAME).getBytes());
+            outputKey = ByteBufferUtil.bytes(context.getConfiguration().get(CONF_COLUMN_NAME));
         }
 
         public void reduce(Text word, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException
@@ -135,7 +137,7 @@ private static Mutation getMutation(Text word, int sum)
         {
             Column c = new Column();
             c.name = ByteBuffer.wrap(Arrays.copyOf(word.getBytes(), word.getLength()));
-            c.value = ByteBuffer.wrap(String.valueOf(sum).getBytes());
+            c.value = ByteBufferUtil.bytes(String.valueOf(sum));
             c.timestamp = System.currentTimeMillis() * 1000;
 
             Mutation m = new Mutation();
@@ -194,7 +196,7 @@ public int run(String[] args) throws Exception
             ConfigHelper.setInitialAddress(job.getConfiguration(), "localhost");
             ConfigHelper.setPartitioner(job.getConfiguration(), "org.apache.cassandra.dht.RandomPartitioner");
             ConfigHelper.setInputColumnFamily(job.getConfiguration(), KEYSPACE, COLUMN_FAMILY);
-            SlicePredicate predicate = new SlicePredicate().setColumn_names(Arrays.asList(ByteBuffer.wrap(columnName.getBytes())));
+            SlicePredicate predicate = new SlicePredicate().setColumn_names(Arrays.asList(ByteBufferUtil.bytes(columnName)));
             ConfigHelper.setInputSlicePredicate(job.getConfiguration(), predicate);
 
             job.waitForCompletion(true);
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/cli/CliClient.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/cli/CliClient.java
index 3500ab2e..4dadb21e 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/cli/CliClient.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/cli/CliClient.java
@@ -252,7 +252,7 @@ private void executeCount(Tree statement)
         SliceRange range = new SliceRange(ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER, false, Integer.MAX_VALUE);
         SlicePredicate predicate = new SlicePredicate().setColumn_names(null).setSlice_range(range);
 
-        int count = thriftClient.get_count(ByteBuffer.wrap(key.getBytes(Charsets.UTF_8)), colParent, predicate, consistencyLevel);
+        int count = thriftClient.get_count(ByteBufferUtil.bytes(key), colParent, predicate, consistencyLevel);
         sessionState.out.printf("%d columns%n", count);
     }
     
@@ -301,7 +301,7 @@ else if (columnSpecCnt == 2)
         if (columnName != null)
             path.setColumn(columnName);
 
-        thriftClient.remove(ByteBuffer.wrap(key.getBytes(Charsets.UTF_8)), path,
+        thriftClient.remove(ByteBufferUtil.bytes(key), path,
                              FBUtilities.timestampMicros(), consistencyLevel);
         sessionState.out.println(String.format("%s removed.", (columnSpecCnt == 0) ? "row" : "column"));
     }
@@ -1770,7 +1770,7 @@ private ByteBuffer columnValueAsBytes(ByteBuffer columnName, String columnFamily
         }
 
         // if no validation were set returning simple .getBytes()
-        return ByteBuffer.wrap(columnValue.getBytes());
+        return ByteBufferUtil.bytes(columnValue);
     }
 
     /**
@@ -1993,7 +1993,7 @@ private void printSliceList(CfDef columnFamilyDef, List<KeySlice> slices)
 
         for (KeySlice ks : slices)
         {
-            String keyName = (keyComparator == null) ? ByteBufferUtil.string(ks.key, Charsets.UTF_8) : keyComparator.getString(ks.key);
+            String keyName = (keyComparator == null) ? ByteBufferUtil.string(ks.key) : keyComparator.getString(ks.key);
 
             sessionState.out.printf("-------------------%n");
             sessionState.out.printf("RowKey: %s%n", keyName);
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/config/DatabaseDescriptor.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
index 71880452..6d7d707f 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/config/DatabaseDescriptor.java
@@ -45,6 +45,7 @@
 import org.apache.cassandra.locator.*;
 import org.apache.cassandra.scheduler.IRequestScheduler;
 import org.apache.cassandra.scheduler.NoScheduler;
+import org.apache.cassandra.utils.ByteBufferUtil;
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.utils.Pair;
 import org.yaml.snakeyaml.Loader;
@@ -613,7 +614,7 @@ else if (cf.compare_subcolumns_with != null)
                         throw new ConfigurationException("index_name cannot be set if index_type is not also set");
                     }
 
-                    ByteBuffer columnName = ByteBuffer.wrap(rcd.name.getBytes(Charsets.UTF_8));
+                    ByteBuffer columnName = ByteBufferUtil.bytes(rcd.name);
                     metadata.put(columnName, new ColumnDefinition(columnName, rcd.validator_class, rcd.index_type, rcd.index_name));
                 }
 
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/DefsTable.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/DefsTable.java
index 78c3b1bf..1a678a1f 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/DefsTable.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/DefsTable.java
@@ -35,8 +35,6 @@
 import org.apache.cassandra.utils.ByteBufferUtil;
 import org.apache.cassandra.utils.UUIDGen;
 
-import static com.google.common.base.Charsets.UTF_8;
-
 public class DefsTable
 {
     // column name for the schema storing serialized keyspace definitions
@@ -57,13 +55,13 @@ public static synchronized void dumpToStorage(UUID version) throws IOException
         for (String ksname : ksnames)
         {
             KSMetaData ksm = DatabaseDescriptor.getTableDefinition(ksname);
-            rm.add(new QueryPath(Migration.SCHEMA_CF, null, ByteBuffer.wrap(ksm.name.getBytes(UTF_8))), SerDeUtils.serialize(ksm.deflate()), now);
+            rm.add(new QueryPath(Migration.SCHEMA_CF, null, ByteBufferUtil.bytes(ksm.name)), SerDeUtils.serialize(ksm.deflate()), now);
         }
         // add the schema
         rm.add(new QueryPath(Migration.SCHEMA_CF,
                              null,
                              DEFINITION_SCHEMA_COLUMN_NAME),
-                             ByteBuffer.wrap(org.apache.cassandra.avro.KsDef.SCHEMA$.toString().getBytes(UTF_8)),
+                             ByteBufferUtil.bytes(org.apache.cassandra.avro.KsDef.SCHEMA$.toString()),
                              now);
         rm.apply();
 
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/HintedHandOffManager.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/HintedHandOffManager.java
index 4653f7f9..e3c0fd8f 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/HintedHandOffManager.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/HintedHandOffManager.java
@@ -197,7 +197,7 @@ public void deleteHintsForEndpoint(final InetAddress endpoint)
     {
         final String ipaddr = endpoint.getHostAddress();
         final ColumnFamilyStore hintStore = Table.open(Table.SYSTEM_TABLE).getColumnFamilyStore(HINTS_CF);
-        final RowMutation rm = new RowMutation(Table.SYSTEM_TABLE, ByteBuffer.wrap(ipaddr.getBytes()));
+        final RowMutation rm = new RowMutation(Table.SYSTEM_TABLE, ByteBufferUtil.bytes(ipaddr));
         rm.delete(new QueryPath(HINTS_CF), System.currentTimeMillis());
 
         // execute asynchronously to avoid blocking caller (which may be processing gossip)
@@ -230,13 +230,13 @@ private static boolean pagingFinished(ColumnFamily hintColumnFamily, ByteBuffer
 
     public static ByteBuffer makeCombinedName(String tableName, String columnFamily)
     {
-        byte[] withsep = ArrayUtils.addAll(tableName.getBytes(UTF_8), SEPARATOR.getBytes());
+        byte[] withsep = ArrayUtils.addAll(tableName.getBytes(UTF_8), SEPARATOR.getBytes(UTF_8));
         return ByteBuffer.wrap(ArrayUtils.addAll(withsep, columnFamily.getBytes(UTF_8)));
     }
 
     private static String[] getTableAndCFNames(ByteBuffer joined)
     {
-        int index = ByteBufferUtil.lastIndexOf(joined, SEPARATOR.getBytes()[0], joined.limit());
+        int index = ByteBufferUtil.lastIndexOf(joined, SEPARATOR.getBytes(UTF_8)[0], joined.limit());
 
         if (index == -1 || index < (joined.position() + 1))
             throw new RuntimeException("Corrupted hint name " + ByteBufferUtil.bytesToHex(joined));
@@ -308,7 +308,7 @@ private void deliverHintsToEndpoint(InetAddress endpoint) throws IOException, Di
         // 3. Delete the subcolumn if the write was successful
         // 4. Force a flush
         // 5. Do major compaction to clean up all deletes etc.
-        ByteBuffer endpointAsUTF8 = ByteBuffer.wrap(endpoint.getHostAddress().getBytes(UTF_8)); // keys have to be UTF8 to make OPP happy
+        ByteBuffer endpointAsUTF8 = ByteBufferUtil.bytes(endpoint.getHostAddress()); // keys have to be UTF8 to make OPP happy
         DecoratedKey epkey =  StorageService.getPartitioner().decorateKey(endpointAsUTF8);
         int rowsReplayed = 0;
         ColumnFamilyStore hintStore = Table.open(Table.SYSTEM_TABLE).getColumnFamilyStore(HINTS_CF);
@@ -364,7 +364,7 @@ private void deliverHintsToEndpoint(InetAddress endpoint) throws IOException, Di
     /** called when a keyspace is dropped or rename. newTable==null in the case of a drop. */
     public static void renameHints(String oldTable, String newTable) throws IOException
     {
-        DecoratedKey oldTableKey = StorageService.getPartitioner().decorateKey(ByteBuffer.wrap(oldTable.getBytes(UTF_8)));
+        DecoratedKey oldTableKey = StorageService.getPartitioner().decorateKey(ByteBufferUtil.bytes(oldTable));
         // we're basically going to fetch, drop and add the scf for the old and new table. we need to do it piecemeal 
         // though since there could be GB of data.
         ColumnFamilyStore hintStore = Table.open(Table.SYSTEM_TABLE).getColumnFamilyStore(HINTS_CF);
@@ -378,7 +378,7 @@ public static void renameHints(String oldTable, String newTable) throws IOExcept
                 break;
             if (newTable != null)
             {
-                RowMutation insert = new RowMutation(Table.SYSTEM_TABLE, ByteBuffer.wrap(newTable.getBytes(UTF_8)));
+                RowMutation insert = new RowMutation(Table.SYSTEM_TABLE, ByteBufferUtil.bytes(newTable));
                 insert.add(cf);
                 insert.apply();
             }
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
index 2888f231..cf83409a 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/RowMutationVerbHandler.java
@@ -25,7 +25,6 @@
 import java.net.UnknownHostException;
 import java.nio.ByteBuffer;
 
-import com.google.common.base.Charsets;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -61,7 +60,7 @@ public void doVerb(Message message, String id)
                 {
                     ByteBuffer addressBytes = ByteBufferUtil.readWithShortLength(dis);
                     if (logger_.isDebugEnabled())
-                        logger_.debug("Adding hint for " + InetAddress.getByName(ByteBufferUtil.string(addressBytes, Charsets.UTF_8)));
+                        logger_.debug("Adding hint for " + InetAddress.getByName(ByteBufferUtil.string(addressBytes)));
                     RowMutation hintedMutation = new RowMutation(Table.SYSTEM_TABLE, addressBytes);
                     hintedMutation.addHints(rm);
                     hintedMutation.apply();
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/SystemTable.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/SystemTable.java
index fbd65bbc..65d3eaf8 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/SystemTable.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/SystemTable.java
@@ -44,8 +44,6 @@
 import org.apache.cassandra.utils.ByteBufferUtil;
 import org.apache.cassandra.utils.FBUtilities;
 
-import static com.google.common.base.Charsets.UTF_8;
-
 public class SystemTable
 {
     private static Logger logger = LoggerFactory.getLogger(SystemTable.class);
@@ -239,8 +237,8 @@ public boolean accept(File dir, String name)
             // no system files.  this is a new node.
             RowMutation rm = new RowMutation(Table.SYSTEM_TABLE, LOCATION_KEY);
             cf = ColumnFamily.create(Table.SYSTEM_TABLE, SystemTable.STATUS_CF);
-            cf.addColumn(new Column(PARTITIONER, ByteBuffer.wrap(DatabaseDescriptor.getPartitioner().getClass().getName().getBytes(UTF_8)), FBUtilities.timestampMicros()));
-            cf.addColumn(new Column(CLUSTERNAME, ByteBuffer.wrap(DatabaseDescriptor.getClusterName().getBytes()), FBUtilities.timestampMicros()));
+            cf.addColumn(new Column(PARTITIONER, ByteBufferUtil.bytes(DatabaseDescriptor.getPartitioner().getClass().getName()), FBUtilities.timestampMicros()));
+            cf.addColumn(new Column(CLUSTERNAME, ByteBufferUtil.bytes(DatabaseDescriptor.getClusterName()), FBUtilities.timestampMicros()));
             rm.add(cf);
             rm.apply();
 
@@ -252,9 +250,9 @@ public boolean accept(File dir, String name)
         IColumn clusterCol = cf.getColumn(CLUSTERNAME);
         assert partitionerCol != null;
         assert clusterCol != null;
-        if (!DatabaseDescriptor.getPartitioner().getClass().getName().equals(ByteBufferUtil.string(partitionerCol.value(), UTF_8)))
+        if (!DatabaseDescriptor.getPartitioner().getClass().getName().equals(ByteBufferUtil.string(partitionerCol.value())))
             throw new ConfigurationException("Detected partitioner mismatch! Did you change the partitioner?");
-        String savedClusterName = ByteBufferUtil.string(clusterCol.value(), UTF_8);
+        String savedClusterName = ByteBufferUtil.string(clusterCol.value());
         if (!DatabaseDescriptor.getClusterName().equals(savedClusterName))
             throw new ConfigurationException("Saved cluster name " + savedClusterName + " != configured name " + DatabaseDescriptor.getClusterName());
     }
@@ -331,17 +329,17 @@ public static void setBootstrapped(boolean isBootstrapped)
     public static boolean isIndexBuilt(String table, String indexName)
     {
         ColumnFamilyStore cfs = Table.open(Table.SYSTEM_TABLE).getColumnFamilyStore(INDEX_CF);
-        QueryFilter filter = QueryFilter.getNamesFilter(decorate(ByteBuffer.wrap(table.getBytes(UTF_8))),
+        QueryFilter filter = QueryFilter.getNamesFilter(decorate(ByteBufferUtil.bytes(table)),
                                                         new QueryPath(INDEX_CF),
-                                                        ByteBuffer.wrap(indexName.getBytes(UTF_8)));
+                                                        ByteBufferUtil.bytes(indexName));
         return cfs.getColumnFamily(filter) != null;
     }
 
     public static void setIndexBuilt(String table, String indexName)
     {
         ColumnFamily cf = ColumnFamily.create(Table.SYSTEM_TABLE, INDEX_CF);
-        cf.addColumn(new Column(ByteBuffer.wrap(indexName.getBytes(UTF_8)), ByteBufferUtil.EMPTY_BYTE_BUFFER, System.currentTimeMillis()));
-        RowMutation rm = new RowMutation(Table.SYSTEM_TABLE, ByteBuffer.wrap(table.getBytes(UTF_8)));
+        cf.addColumn(new Column(ByteBufferUtil.bytes(indexName), ByteBufferUtil.EMPTY_BYTE_BUFFER, System.currentTimeMillis()));
+        RowMutation rm = new RowMutation(Table.SYSTEM_TABLE, ByteBufferUtil.bytes(table));
         rm.add(cf);
         try
         {
@@ -357,8 +355,8 @@ public static void setIndexBuilt(String table, String indexName)
 
     public static void setIndexRemoved(String table, String indexName)
     {
-        RowMutation rm = new RowMutation(Table.SYSTEM_TABLE, ByteBuffer.wrap(table.getBytes(UTF_8)));
-        rm.delete(new QueryPath(INDEX_CF, null, ByteBuffer.wrap(indexName.getBytes(UTF_8))), System.currentTimeMillis());
+        RowMutation rm = new RowMutation(Table.SYSTEM_TABLE, ByteBufferUtil.bytes(table));
+        rm.delete(new QueryPath(INDEX_CF, null, ByteBufferUtil.bytes(indexName)), System.currentTimeMillis());
         try
         {
             rm.apply();
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/marshal/AsciiType.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/marshal/AsciiType.java
index 5a6821bb..d7974296 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/marshal/AsciiType.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/marshal/AsciiType.java
@@ -49,7 +49,7 @@ public String getString(ByteBuffer bytes)
 
     public ByteBuffer fromString(String source)
     {
-        return ByteBuffer.wrap(source.getBytes(Charsets.US_ASCII));
+        return ByteBufferUtil.bytes(source, Charsets.US_ASCII);
     }
 
     public void validate(ByteBuffer bytes) throws MarshalException
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/marshal/UTF8Type.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/marshal/UTF8Type.java
index c4ee5b6d..3f94486d 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/marshal/UTF8Type.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/marshal/UTF8Type.java
@@ -23,8 +23,6 @@
 import java.nio.ByteBuffer;
 import java.nio.charset.CharacterCodingException;
 
-import com.google.common.base.Charsets;
-
 import org.apache.cassandra.utils.ByteBufferUtil;
 
 public class UTF8Type extends BytesType
@@ -37,7 +35,7 @@ public String getString(ByteBuffer bytes)
     {
         try
         {
-            return ByteBufferUtil.string(bytes, Charsets.UTF_8);
+            return ByteBufferUtil.string(bytes);
         }
         catch (CharacterCodingException e)
         {
@@ -47,7 +45,7 @@ public String getString(ByteBuffer bytes)
 
     public ByteBuffer fromString(String source)
     {
-        return ByteBuffer.wrap(source.getBytes(Charsets.UTF_8));
+        return ByteBufferUtil.bytes(source);
     }
     
     public void validate(ByteBuffer bytes) throws MarshalException
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/migration/Migration.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/migration/Migration.java
index bb601e59..fe3ff958 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/migration/Migration.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/migration/Migration.java
@@ -45,8 +45,6 @@
 import org.apache.cassandra.utils.ByteBufferUtil;
 import org.apache.cassandra.utils.UUIDGen;
 
-import static com.google.common.base.Charsets.UTF_8;
-
 /**
  * A migration represents a single metadata mutation (cf dropped, added, etc.).  Migrations can be applied locally, or
  * serialized and sent to another machine where it can be applied there. Each migration has a version represented by
@@ -237,12 +235,12 @@ static RowMutation makeDefinitionMutation(KSMetaData add, KSMetaData remove, UUI
         long now = System.currentTimeMillis();
         // add a column for each keyspace
         for (KSMetaData ksm : ksms)
-            rm.add(new QueryPath(SCHEMA_CF, null, ByteBuffer.wrap(ksm.name.getBytes(UTF_8))), SerDeUtils.serialize(ksm.deflate()), now);
+            rm.add(new QueryPath(SCHEMA_CF, null, ByteBufferUtil.bytes(ksm.name)), SerDeUtils.serialize(ksm.deflate()), now);
         // add the schema
         rm.add(new QueryPath(SCHEMA_CF,
                              null,
                              DefsTable.DEFINITION_SCHEMA_COLUMN_NAME),
-                             ByteBuffer.wrap(org.apache.cassandra.avro.KsDef.SCHEMA$.toString().getBytes(UTF_8)),
+                             ByteBufferUtil.bytes(org.apache.cassandra.avro.KsDef.SCHEMA$.toString()),
                              now);
         return rm;
     }
@@ -323,7 +321,7 @@ public static Migration deserialize(ByteBuffer bytes) throws IOException
     
     public static ByteBuffer toUTF8Bytes(UUID version)
     {
-        return ByteBuffer.wrap(version.toString().getBytes(UTF_8));
+        return ByteBufferUtil.bytes(version.toString());
     }
     
     public static boolean isLegalName(String s)
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/CollatingOrderPreservingPartitioner.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/CollatingOrderPreservingPartitioner.java
index 5c890b55..a12bcd75 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/CollatingOrderPreservingPartitioner.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/CollatingOrderPreservingPartitioner.java
@@ -25,8 +25,6 @@
 import java.util.Locale;
 import java.util.Map;
 
-import com.google.common.base.Charsets;
-
 import org.apache.cassandra.utils.ByteBufferUtil;
 
 public class CollatingOrderPreservingPartitioner extends AbstractByteOrderedPartitioner
@@ -41,7 +39,7 @@ public BytesToken getToken(ByteBuffer key)
         String skey;
         try
         {
-            skey = ByteBufferUtil.string(key, Charsets.UTF_8);
+            skey = ByteBufferUtil.string(key);
         }
         catch (CharacterCodingException e)
         {
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java
index 75695bb2..5a2e6b3b 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/OrderPreservingPartitioner.java
@@ -23,8 +23,6 @@
 import java.nio.charset.CharacterCodingException;
 import java.util.*;
 
-import com.google.common.base.Charsets;
-
 import org.apache.cassandra.config.CFMetaData;
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.db.DecoratedKey;
@@ -118,14 +116,14 @@ public StringToken getRandomToken()
     {
         public ByteBuffer toByteArray(Token<String> stringToken)
         {
-            return ByteBuffer.wrap(stringToken.token.getBytes(Charsets.UTF_8));
+            return ByteBufferUtil.bytes(stringToken.token);
         }
 
         public Token<String> fromByteArray(ByteBuffer bytes)
         {
             try
             {
-                return new StringToken(ByteBufferUtil.string(bytes, Charsets.UTF_8));
+                return new StringToken(ByteBufferUtil.string(bytes));
             }
             catch (CharacterCodingException e)
             {
@@ -159,7 +157,7 @@ public StringToken getToken(ByteBuffer key)
         String skey;
         try
         {
-            skey = ByteBufferUtil.string(key, Charsets.UTF_8);
+            skey = ByteBufferUtil.string(key);
         }
         catch (CharacterCodingException e)
         {
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/RandomPartitioner.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/RandomPartitioner.java
index 61bb6744..aeec66b2 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/RandomPartitioner.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/RandomPartitioner.java
@@ -30,8 +30,6 @@
 import org.apache.cassandra.utils.GuidGenerator;
 import org.apache.cassandra.utils.Pair;
 
-import static com.google.common.base.Charsets.UTF_8;
-
 /**
  * This class generates a BigIntegerToken using MD5 hash.
  */
@@ -65,7 +63,7 @@
         String token = null;
         try
         {
-            token = ByteBufferUtil.string(fromdisk, fromdisk.position(), splitPoint - fromdisk.position(), UTF_8);
+            token = ByteBufferUtil.string(fromdisk, fromdisk.position(), splitPoint - fromdisk.position());
         }
         catch (CharacterCodingException e)
         {
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageProxy.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageProxy.java
index c54ab773..0a01c1c5 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -52,8 +52,6 @@
 import org.apache.cassandra.thrift.*;
 import org.apache.cassandra.utils.*;
 
-import static com.google.common.base.Charsets.UTF_8;
-
 public class StorageProxy implements StorageProxyMBean
 {
     private static final Logger logger = LoggerFactory.getLogger(StorageProxy.class);
@@ -258,7 +256,7 @@ private static void addHintHeader(Message message, InetAddress target) throws IO
         {
             dos.write(previousHints);
         }
-        ByteBufferUtil.writeWithShortLength(ByteBuffer.wrap(target.getHostAddress().getBytes(UTF_8)), dos);
+        ByteBufferUtil.writeWithShortLength(ByteBufferUtil.bytes(target.getHostAddress()), dos);
         message.setHeader(RowMutation.HINT, bos.toByteArray());
     }
 
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageService.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageService.java
index e0dd182c..f0acb0f3 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageService.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageService.java
@@ -2078,7 +2078,7 @@ public String exportSchema() throws IOException
                     RawColumnDefinition rcd = new RawColumnDefinition();
                     rcd.index_name = cd.getIndexName();
                     rcd.index_type = cd.getIndexType();
-                    rcd.name = ByteBufferUtil.string(cd.name, Charsets.UTF_8);
+                    rcd.name = ByteBufferUtil.string(cd.name);
                     rcd.validator_class = cd.validator.getClass().getName();
                     rcf.column_metadata[j++] = rcd;
                 }
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/utils/ByteBufferUtil.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/utils/ByteBufferUtil.java
index 35ef9666..c0485ee9 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/utils/ByteBufferUtil.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/utils/ByteBufferUtil.java
@@ -23,12 +23,13 @@
 import java.io.EOFException;
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.UnsupportedEncodingException;
 import java.nio.ByteBuffer;
 import java.nio.charset.CharacterCodingException;
 import java.nio.charset.Charset;
 import java.util.Arrays;
 
+import static com.google.common.base.Charsets.UTF_8;
+
 import org.apache.cassandra.io.util.FileDataInput;
 import org.apache.commons.lang.ArrayUtils;
 
@@ -101,16 +102,41 @@ public static int compare(ByteBuffer o1, byte[] o2)
         return compareUnsigned(o1, ByteBuffer.wrap(o2));
     }
 
+    /**
+     * Decode a String representation.
+     * This method assumes that the encoding charset is UTF_8.
+     *
+     * @param buffer a byte buffer holding the string representation
+     * @return the decoded string
+     */
     public static String string(ByteBuffer buffer) throws CharacterCodingException
     {
-        return string(buffer, Charset.defaultCharset());
+        return string(buffer, UTF_8);
     }
 
+    /**
+     * Decode a String representation.
+     * This method assumes that the encoding charset is UTF_8.
+     *
+     * @param buffer a byte buffer holding the string representation
+     * @param position the starting position in {@code buffer} to start decoding from
+     * @param length the number of bytes from {@code buffer} to use
+     * @return the decoded string
+     */
     public static String string(ByteBuffer buffer, int position, int length) throws CharacterCodingException
     {
-        return string(buffer, position, length, Charset.defaultCharset());
+        return string(buffer, position, length, UTF_8);
     }
 
+    /**
+     * Decode a String representation.
+     *
+     * @param buffer a byte buffer holding the string representation
+     * @param position the starting position in {@code buffer} to start decoding from
+     * @param length the number of bytes from {@code buffer} to use
+     * @param charset the String encoding charset
+     * @return the decoded string
+     */
     public static String string(ByteBuffer buffer, int position, int length, Charset charset) throws CharacterCodingException
     {
         ByteBuffer copy = buffer.duplicate();
@@ -119,6 +145,13 @@ public static String string(ByteBuffer buffer, int position, int length, Charset
         return string(copy, charset);
     }
 
+    /**
+     * Decode a String representation.
+     *
+     * @param buffer a byte buffer holding the string representation
+     * @param charset the String encoding charset
+     * @return the decoded string
+     */
     public static String string(ByteBuffer buffer, Charset charset) throws CharacterCodingException
     {
         return charset.newDecoder().decode(buffer.duplicate()).toString();
@@ -177,16 +210,27 @@ else if (startIndex >= buffer.limit())
         return -1;
     }
 
+    /**
+     * Encode a String in a ByteBuffer using UTF_8.
+     *
+     * @param s the string to encode
+     * @return the encoded string
+     */
     public static ByteBuffer bytes(String s) 
     { 
-        try
-        {
-            return ByteBuffer.wrap(s.getBytes("UTF-8"));
+        return ByteBuffer.wrap(s.getBytes(UTF_8));
         }
-        catch (UnsupportedEncodingException e)
+
+    /**
+     * Encode a String in a ByteBuffer using the provided charset.
+     *
+     * @param s the string to encode
+     * @param charset the String encoding charset to use
+     * @return the encoded string
+     */
+    public static ByteBuffer bytes(String s, Charset charset)
         {
-           throw new RuntimeException(e);
-        } 
+        return ByteBuffer.wrap(s.getBytes(charset));
     }
 
     /**
diff --git a/cassandra/branches/cassandra-0.7/test/distributed/org/apache/cassandra/MovementTest.java b/cassandra/branches/cassandra-0.7/test/distributed/org/apache/cassandra/MovementTest.java
index 5577e2be..0fa3c5e7 100644
--- a/cassandra/branches/cassandra-0.7/test/distributed/org/apache/cassandra/MovementTest.java
+++ b/cassandra/branches/cassandra-0.7/test/distributed/org/apache/cassandra/MovementTest.java
@@ -50,13 +50,13 @@
     {
         final int N = 1000;
         Column col1 = new Column(
-            ByteBuffer.wrap("c1".getBytes()),
-            ByteBuffer.wrap("v1".getBytes()),
+            ByteBufferUtil.bytes("c1"),
+            ByteBufferUtil.bytes("v1"),
             0
             );
         Column col2 = new Column(
-            ByteBuffer.wrap("c2".getBytes()),
-            ByteBuffer.wrap("v2".getBytes()),
+            ByteBufferUtil.bytes("c2"),
+            ByteBufferUtil.bytes("v2"),
             0
             );
 
@@ -66,7 +66,7 @@
         for (int i = 0; i < N; i++)
         {
             String rawKey = String.format("test.key.%d", i);
-            ByteBuffer key = ByteBuffer.wrap(rawKey.getBytes());
+            ByteBuffer key = ByteBufferUtil.bytes(rawKey);
             Mutation m1 = (new Mutation()).setColumn_or_supercolumn((new ColumnOrSuperColumn()).setColumn(col1));
             Mutation m2 = (new Mutation()).setColumn_or_supercolumn((new ColumnOrSuperColumn()).setColumn(col2));
             rows.put(key, Arrays.asList(m1.getColumn_or_supercolumn(),
diff --git a/cassandra/branches/cassandra-0.7/test/distributed/org/apache/cassandra/MutationTest.java b/cassandra/branches/cassandra-0.7/test/distributed/org/apache/cassandra/MutationTest.java
index f0cd79e3..26514251 100644
--- a/cassandra/branches/cassandra-0.7/test/distributed/org/apache/cassandra/MutationTest.java
+++ b/cassandra/branches/cassandra-0.7/test/distributed/org/apache/cassandra/MutationTest.java
@@ -189,8 +189,8 @@ protected void insert(Cassandra.Client client, ByteBuffer key, String cf, String
         throws InvalidRequestException, UnavailableException, TimedOutException, TException
     {
         Column col = new Column(
-             ByteBuffer.wrap(name.getBytes()),
-             ByteBuffer.wrap(value.getBytes()),
+             ByteBufferUtil.bytes(name),
+             ByteBufferUtil.bytes(value),
              timestamp
              );
         client.insert(key, new ColumnParent(cf), col, cl);
@@ -337,8 +337,8 @@ public String toString()
 
     protected void assertColumnEqual(String name, String value, long timestamp, Column col)
     {
-        assertEquals(ByteBuffer.wrap(name.getBytes()), col.name);
-        assertEquals(ByteBuffer.wrap(value.getBytes()), col.value);
+        assertEquals(ByteBufferUtil.bytes(name), col.name);
+        assertEquals(ByteBufferUtil.bytes(value), col.value);
         assertEquals(timestamp, col.timestamp);
     }
 
@@ -371,6 +371,6 @@ protected InetAddress nonEndpointForKey(InetAddress seed, ByteBuffer key, String
 
     protected ByteBuffer newKey()
     {
-        return ByteBuffer.wrap(String.format("test.key.%d", System.currentTimeMillis()).getBytes());
+        return ByteBufferUtil.bytes(String.format("test.key.%d", System.currentTimeMillis()));
     }
 }
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/Util.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/Util.java
index 006d5f80..518c045d 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/Util.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/Util.java
@@ -25,13 +25,8 @@
 import java.net.UnknownHostException;
 import java.nio.ByteBuffer;
 import java.util.List;
-import java.util.Map;
-import java.util.HashMap;
 import java.util.concurrent.ExecutionException;
 
-import static org.junit.Assert.*;
-
-import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.db.*;
 import org.apache.cassandra.db.columniterator.IdentityQueryFilter;
 import org.apache.cassandra.db.filter.QueryFilter;
@@ -39,26 +34,26 @@
 import org.apache.cassandra.dht.*;
 import org.apache.cassandra.gms.ApplicationState;
 import org.apache.cassandra.gms.VersionedValue;
-import org.apache.cassandra.locator.AbstractReplicationStrategy;
 import org.apache.cassandra.service.StorageService;
+import org.apache.cassandra.utils.ByteBufferUtil;
 
-import static com.google.common.base.Charsets.UTF_8;
+import static org.junit.Assert.assertTrue;
 
 public class Util
 {
     public static DecoratedKey dk(String key)
     {
-        return StorageService.getPartitioner().decorateKey(ByteBuffer.wrap(key.getBytes(UTF_8)));
+        return StorageService.getPartitioner().decorateKey(ByteBufferUtil.bytes(key));
     }
 
     public static Column column(String name, String value, long timestamp)
     {
-        return new Column(ByteBuffer.wrap(name.getBytes()), ByteBuffer.wrap(value.getBytes()), timestamp);
+        return new Column(ByteBufferUtil.bytes(name), ByteBufferUtil.bytes(value), timestamp);
     }
 
     public static Token token(String key)
     {
-        return StorageService.getPartitioner().getToken(ByteBuffer.wrap(key.getBytes()));
+        return StorageService.getPartitioner().getToken(ByteBufferUtil.bytes(key));
     }
 
     public static Range range(String left, String right)
@@ -68,7 +63,7 @@ public static Range range(String left, String right)
 
     public static Range range(IPartitioner p, String left, String right)
     {
-        return new Range(p.getToken(ByteBuffer.wrap(left.getBytes())), p.getToken(ByteBuffer.wrap(right.getBytes())));
+        return new Range(p.getToken(ByteBufferUtil.bytes(left)), p.getToken(ByteBufferUtil.bytes(right)));
     }
 
     public static Bounds bounds(String left, String right)
@@ -78,7 +73,7 @@ public static Bounds bounds(String left, String right)
 
     public static void addMutation(RowMutation rm, String columnFamilyName, String superColumnName, long columnName, String value, long timestamp)
     {
-        rm.add(new QueryPath(columnFamilyName, ByteBuffer.wrap(superColumnName.getBytes()), getBytes(columnName)), ByteBuffer.wrap(value.getBytes()), timestamp);
+        rm.add(new QueryPath(columnFamilyName, ByteBufferUtil.bytes(superColumnName), getBytes(columnName)), ByteBufferUtil.bytes(value), timestamp);
     }
 
     public static ByteBuffer getBytes(long v)
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/client/TestRingCache.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/client/TestRingCache.java
index 1382c78c..84792075 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/client/TestRingCache.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/client/TestRingCache.java
@@ -91,7 +91,7 @@ public static void main(String[] args) throws Throwable
 
         for (int nRows = minRow; nRows < maxRow; nRows++)
         {
-            ByteBuffer row = ByteBuffer.wrap((rowPrefix + nRows).getBytes());
+            ByteBuffer row = ByteBufferUtil.bytes((rowPrefix + nRows));
             ColumnPath col = new ColumnPath("Standard1").setSuper_column((ByteBuffer)null).setColumn("col1".getBytes());
             ColumnParent parent = new ColumnParent("Standard1").setSuper_column((ByteBuffer)null);
 
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/CleanupTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/CleanupTest.java
index c7dfaec0..c962ed93 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/CleanupTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/CleanupTest.java
@@ -51,7 +51,7 @@
     public static final String TABLE1 = "Keyspace1";
     public static final String CF1 = "Indexed1";
     public static final String CF2 = "Standard1";
-    public static final ByteBuffer COLUMN = ByteBuffer.wrap("birthdate".getBytes());
+    public static final ByteBuffer COLUMN = ByteBufferUtil.bytes("birthdate");
     public static final ByteBuffer VALUE = ByteBuffer.allocate(8);
     static
     {
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java
index d519ad19..983d2dba 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/ColumnFamilyTest.java
@@ -80,7 +80,7 @@ public void testManyColumns() throws IOException
         cf = ColumnFamily.serializer().deserialize(new DataInputStream(bufIn));
         for (String cName : map.navigableKeySet())
         {
-            ByteBuffer val = cf.getColumn(ByteBuffer.wrap(cName.getBytes())).value();
+            ByteBuffer val = cf.getColumn(ByteBufferUtil.bytes(cName)).value();
             assert new String(val.array(),val.position(),val.remaining()).equals(map.get(cName));
         }
         assert cf.getColumnNames().size() == map.size();
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/CompactionsPurgeTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/CompactionsPurgeTest.java
index c290b876..9aeefec5 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/CompactionsPurgeTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/CompactionsPurgeTest.java
@@ -57,7 +57,7 @@ public void testMajorCompactionPurge() throws IOException, ExecutionException, I
         rm = new RowMutation(TABLE1, key.key);
         for (int i = 0; i < 10; i++)
         {
-            rm.add(new QueryPath(cfName, null, ByteBuffer.wrap(String.valueOf(i).getBytes())), ByteBufferUtil.EMPTY_BYTE_BUFFER, 0);
+            rm.add(new QueryPath(cfName, null, ByteBufferUtil.bytes(String.valueOf(i))), ByteBufferUtil.EMPTY_BYTE_BUFFER, 0);
         }
         rm.apply();
         cfs.forceBlockingFlush();
@@ -66,14 +66,14 @@ public void testMajorCompactionPurge() throws IOException, ExecutionException, I
         for (int i = 0; i < 10; i++)
         {
             rm = new RowMutation(TABLE1, key.key);
-            rm.delete(new QueryPath(cfName, null, ByteBuffer.wrap(String.valueOf(i).getBytes())), 1);
+            rm.delete(new QueryPath(cfName, null, ByteBufferUtil.bytes(String.valueOf(i))), 1);
             rm.apply();
         }
         cfs.forceBlockingFlush();
 
         // resurrect one column
         rm = new RowMutation(TABLE1, key.key);
-        rm.add(new QueryPath(cfName, null, ByteBuffer.wrap(String.valueOf(5).getBytes())), ByteBufferUtil.EMPTY_BYTE_BUFFER, 2);
+        rm.add(new QueryPath(cfName, null, ByteBufferUtil.bytes(String.valueOf(5))), ByteBufferUtil.EMPTY_BYTE_BUFFER, 2);
         rm.apply();
         cfs.forceBlockingFlush();
 
@@ -82,7 +82,7 @@ public void testMajorCompactionPurge() throws IOException, ExecutionException, I
         cfs.invalidateCachedRow(key);
         ColumnFamily cf = cfs.getColumnFamily(QueryFilter.getIdentityFilter(key, new QueryPath(cfName)));
         assertColumns(cf, "5");
-        assert cf.getColumn(ByteBuffer.wrap(String.valueOf(5).getBytes())) != null;
+        assert cf.getColumn(ByteBufferUtil.bytes(String.valueOf(5))) != null;
     }
 
     @Test
@@ -102,7 +102,7 @@ public void testMinorCompactionPurge() throws IOException, ExecutionException, I
             rm = new RowMutation(TABLE2, key.key);
             for (int i = 0; i < 10; i++)
             {
-                rm.add(new QueryPath(cfName, null, ByteBuffer.wrap(String.valueOf(i).getBytes())), ByteBufferUtil.EMPTY_BYTE_BUFFER, 0);
+                rm.add(new QueryPath(cfName, null, ByteBufferUtil.bytes(String.valueOf(i))), ByteBufferUtil.EMPTY_BYTE_BUFFER, 0);
             }
             rm.apply();
             cfs.forceBlockingFlush();
@@ -111,7 +111,7 @@ public void testMinorCompactionPurge() throws IOException, ExecutionException, I
             for (int i = 0; i < 10; i++)
             {
                 rm = new RowMutation(TABLE2, key.key);
-                rm.delete(new QueryPath(cfName, null, ByteBuffer.wrap(String.valueOf(i).getBytes())), 1);
+                rm.delete(new QueryPath(cfName, null, ByteBufferUtil.bytes(String.valueOf(i))), 1);
                 rm.apply();
             }
             cfs.forceBlockingFlush();
@@ -125,7 +125,7 @@ public void testMinorCompactionPurge() throws IOException, ExecutionException, I
         cfs.forceBlockingFlush();
         Collection<SSTableReader> sstablesIncomplete = cfs.getSSTables();
         rm = new RowMutation(TABLE2, key1.key);
-        rm.add(new QueryPath(cfName, null, ByteBuffer.wrap(String.valueOf(5).getBytes())), ByteBufferUtil.EMPTY_BYTE_BUFFER, 2);
+        rm.add(new QueryPath(cfName, null, ByteBufferUtil.bytes(String.valueOf(5))), ByteBufferUtil.EMPTY_BYTE_BUFFER, 2);
         rm.apply();
         cfs.forceBlockingFlush();
         CompactionManager.instance.doCompaction(cfs, sstablesIncomplete, Integer.MAX_VALUE);
@@ -157,7 +157,7 @@ public void testCompactionPurgeOneFile() throws IOException, ExecutionException,
         rm = new RowMutation(TABLE1, key.key);
         for (int i = 0; i < 5; i++)
         {
-            rm.add(new QueryPath(cfName, null, ByteBuffer.wrap(String.valueOf(i).getBytes())), ByteBufferUtil.EMPTY_BYTE_BUFFER, 0);
+            rm.add(new QueryPath(cfName, null, ByteBufferUtil.bytes(String.valueOf(i))), ByteBufferUtil.EMPTY_BYTE_BUFFER, 0);
         }
         rm.apply();
 
@@ -165,7 +165,7 @@ public void testCompactionPurgeOneFile() throws IOException, ExecutionException,
         for (int i = 0; i < 5; i++)
         {
             rm = new RowMutation(TABLE1, key.key);
-            rm.delete(new QueryPath(cfName, null, ByteBuffer.wrap(String.valueOf(i).getBytes())), 1);
+            rm.delete(new QueryPath(cfName, null, ByteBufferUtil.bytes(String.valueOf(i))), 1);
             rm.apply();
         }
         store.forceBlockingFlush();
@@ -196,7 +196,7 @@ public void testCompactionPurgeTombstonedRow() throws IOException, ExecutionExce
         rm = new RowMutation(tableName, key.key);
         for (int i = 0; i < 10; i++)
         {
-            rm.add(new QueryPath(cfName, null, ByteBuffer.wrap(String.valueOf(i).getBytes())), ByteBufferUtil.EMPTY_BYTE_BUFFER, 0);
+            rm.add(new QueryPath(cfName, null, ByteBufferUtil.bytes(String.valueOf(i))), ByteBufferUtil.EMPTY_BYTE_BUFFER, 0);
         }
         rm.apply();
 
@@ -217,7 +217,7 @@ public void testCompactionPurgeTombstonedRow() throws IOException, ExecutionExce
         rm = new RowMutation(tableName, key.key);
         for (int i = 0; i < 10; i++)
         {
-            rm.add(new QueryPath(cfName, null, ByteBuffer.wrap(String.valueOf(i).getBytes())), ByteBufferUtil.EMPTY_BYTE_BUFFER, 0);
+            rm.add(new QueryPath(cfName, null, ByteBufferUtil.bytes(String.valueOf(i))), ByteBufferUtil.EMPTY_BYTE_BUFFER, 0);
         }
         rm.apply();
 
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/CompactionsTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/CompactionsTest.java
index 2eb4df1a..06f85367 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/CompactionsTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/CompactionsTest.java
@@ -61,7 +61,7 @@ public void testCompactions() throws IOException, ExecutionException, Interrupte
             for (int i = 0; i < ROWS_PER_SSTABLE; i++) {
                 DecoratedKey key = Util.dk(String.valueOf(i % 2));
                 RowMutation rm = new RowMutation(TABLE1, key.key);
-                rm.add(new QueryPath("Standard1", null, ByteBuffer.wrap(String.valueOf(i / 2).getBytes())), ByteBufferUtil.EMPTY_BYTE_BUFFER, j * ROWS_PER_SSTABLE + i);
+                rm.add(new QueryPath("Standard1", null, ByteBufferUtil.bytes(String.valueOf(i / 2))), ByteBufferUtil.EMPTY_BYTE_BUFFER, j * ROWS_PER_SSTABLE + i);
                 rm.apply();
                 inserted.add(key);
             }
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/DefsTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/DefsTest.java
index 578a39e7..a9a2bb5c 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/DefsTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/DefsTest.java
@@ -295,7 +295,7 @@ public void dropCf() throws ConfigurationException, IOException, ExecutionExcept
         // write some data, force a flush, then verify that files exist on disk.
         RowMutation rm = new RowMutation(ks.name, dk.key);
         for (int i = 0; i < 100; i++)
-            rm.add(new QueryPath(cfm.cfName, null, ByteBuffer.wrap(("col" + i).getBytes())), ByteBufferUtil.bytes("anyvalue"), 1L);
+            rm.add(new QueryPath(cfm.cfName, null, ByteBufferUtil.bytes(("col" + i))), ByteBufferUtil.bytes("anyvalue"), 1L);
         rm.apply();
         ColumnFamilyStore store = Table.open(cfm.tableName).getColumnFamilyStore(cfm.cfName);
         assert store != null;
@@ -341,7 +341,7 @@ public void renameCf() throws ConfigurationException, IOException, ExecutionExce
         // write some data, force a flush, then verify that files exist on disk.
         RowMutation rm = new RowMutation(ks.name, dk.key);
         for (int i = 0; i < 100; i++)
-            rm.add(new QueryPath(oldCfm.cfName, null, ByteBuffer.wrap(("col" + i).getBytes())), ByteBufferUtil.bytes("anyvalue"), 1L);
+            rm.add(new QueryPath(oldCfm.cfName, null, ByteBufferUtil.bytes(("col" + i))), ByteBufferUtil.bytes("anyvalue"), 1L);
         rm.apply();
         ColumnFamilyStore store = Table.open(oldCfm.tableName).getColumnFamilyStore(oldCfm.cfName);
         assert store != null;
@@ -415,7 +415,7 @@ public void dropKS() throws ConfigurationException, IOException, ExecutionExcept
         // write some data, force a flush, then verify that files exist on disk.
         RowMutation rm = new RowMutation(ks.name, dk.key);
         for (int i = 0; i < 100; i++)
-            rm.add(new QueryPath(cfm.cfName, null, ByteBuffer.wrap(("col" + i).getBytes())), ByteBufferUtil.bytes("anyvalue"), 1L);
+            rm.add(new QueryPath(cfm.cfName, null, ByteBufferUtil.bytes(("col" + i))), ByteBufferUtil.bytes("anyvalue"), 1L);
         rm.apply();
         ColumnFamilyStore store = Table.open(cfm.tableName).getColumnFamilyStore(cfm.cfName);
         assert store != null;
@@ -465,7 +465,7 @@ public void renameKs() throws ConfigurationException, IOException, ExecutionExce
         // write some data that we hope to read back later.
         RowMutation rm = new RowMutation(oldKs.name, dk.key);
         for (int i = 0; i < 10; i++)
-            rm.add(new QueryPath(cfName, null, ByteBuffer.wrap(("col" + i).getBytes())), ByteBufferUtil.bytes("value"), 1L);
+            rm.add(new QueryPath(cfName, null, ByteBufferUtil.bytes(("col" + i))), ByteBufferUtil.bytes("value"), 1L);
         rm.apply();
         ColumnFamilyStore store = Table.open(oldKs.name).getColumnFamilyStore(cfName);
         assert store != null;
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/NameSortTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/NameSortTest.java
index 433dc98e..823754cb 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/NameSortTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/NameSortTest.java
@@ -64,15 +64,15 @@ private void testNameSort(int N) throws IOException, ExecutionException, Interru
 
         for (int i = 0; i < N; ++i)
         {
-            ByteBuffer key = ByteBuffer.wrap(Integer.toString(i).getBytes());
+            ByteBuffer key = ByteBufferUtil.bytes(Integer.toString(i));
             RowMutation rm;
 
             // standard
             for (int j = 0; j < 8; ++j)
             {
-                ByteBuffer bytes = ByteBuffer.wrap(j % 2 == 0 ? "a".getBytes() : "b".getBytes());
+                ByteBuffer bytes = j % 2 == 0 ? ByteBufferUtil.bytes("a") : ByteBufferUtil.bytes("b");
                 rm = new RowMutation("Keyspace1", key);
-                rm.add(new QueryPath("Standard1", null, ByteBuffer.wrap(("Column-" + j).getBytes())), bytes, j);
+                rm.add(new QueryPath("Standard1", null, ByteBufferUtil.bytes(("Column-" + j))), bytes, j);
                 rm.applyUnsafe();
             }
 
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/RecoveryManager2Test.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/RecoveryManager2Test.java
index 519e99d7..55632299 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/RecoveryManager2Test.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/RecoveryManager2Test.java
@@ -33,6 +33,7 @@
 import org.apache.cassandra.CleanupHelper;
 import org.apache.cassandra.Util;
 import org.apache.cassandra.db.commitlog.CommitLog;
+import org.apache.cassandra.utils.ByteBufferUtil;
 
 public class RecoveryManager2Test extends CleanupHelper
 {
@@ -73,7 +74,7 @@ public void testWithFlush() throws Exception
 
     private void insertRow(String cfname, String key) throws IOException
     {
-        RowMutation rm = new RowMutation("Keyspace1", ByteBuffer.wrap(key.getBytes()));
+        RowMutation rm = new RowMutation("Keyspace1", ByteBufferUtil.bytes(key));
         ColumnFamily cf = ColumnFamily.create("Keyspace1", cfname);
         cf.addColumn(column("col1", "val1", 1L));
         rm.add(cf);
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/RecoveryManagerTruncateTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/RecoveryManagerTruncateTest.java
index fed0fbad..1c27f514 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/RecoveryManagerTruncateTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/RecoveryManagerTruncateTest.java
@@ -89,11 +89,11 @@ private IColumn getFromTable(Table table, String cfName, String keyName, String
 			return null;
 		}
 		cf = cfStore.getColumnFamily(QueryFilter.getNamesFilter(
-		        Util.dk(keyName), new QueryPath(cfName), ByteBuffer.wrap(columnName.getBytes())));
+		        Util.dk(keyName), new QueryPath(cfName), ByteBufferUtil.bytes(columnName)));
 		if (cf == null)
 		{
 			return null;
 		}
-		return cf.getColumn(ByteBuffer.wrap(columnName.getBytes()));
+		return cf.getColumn(ByteBufferUtil.bytes(columnName));
 	}
 }
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/RowIterationTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/RowIterationTest.java
index d78111bb..82246668 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/RowIterationTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/RowIterationTest.java
@@ -55,7 +55,7 @@ public void testRowIteration() throws IOException, ExecutionException, Interrupt
         for (int i = 0; i < ROWS_PER_SSTABLE; i++) {
             DecoratedKey key = Util.dk(String.valueOf(i));
             RowMutation rm = new RowMutation(TABLE1, key.key);
-            rm.add(new QueryPath("Super3", ByteBufferUtil.bytes("sc"), ByteBuffer.wrap(String.valueOf(i).getBytes())), ByteBuffer.wrap(new byte[ROWS_PER_SSTABLE * 10 - i * 2]), i);
+            rm.add(new QueryPath("Super3", ByteBufferUtil.bytes("sc"), ByteBufferUtil.bytes(String.valueOf(i))), ByteBuffer.wrap(new byte[ROWS_PER_SSTABLE * 10 - i * 2]), i);
             rm.apply();
             inserted.add(key);
         }
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/SerializationsTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/SerializationsTest.java
index 577fe2bf..68c7d919 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/SerializationsTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/SerializationsTest.java
@@ -32,6 +32,8 @@
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.thrift.SlicePredicate;
 import org.apache.cassandra.thrift.SliceRange;
+import org.apache.cassandra.utils.ByteBufferUtil;
+
 import org.junit.Test;
 
 import java.io.DataInputStream;
@@ -47,9 +49,9 @@
 {
     private void testRangeSliceCommandWrite() throws IOException
     {
-        ByteBuffer startCol = ByteBuffer.wrap("Start".getBytes());
-        ByteBuffer stopCol = ByteBuffer.wrap("Stop".getBytes());
-        ByteBuffer emptyCol = ByteBuffer.wrap("".getBytes());
+        ByteBuffer startCol = ByteBufferUtil.bytes("Start");
+        ByteBuffer stopCol = ByteBufferUtil.bytes("Stop");
+        ByteBuffer emptyCol = ByteBufferUtil.bytes("");
         SlicePredicate namesPred = new SlicePredicate();
         namesPred.column_names = Statics.NamedCols;
         SliceRange emptySliceRange = new SliceRange(emptyCol, emptyCol, false, 100); 
@@ -284,24 +286,24 @@ public void testWriteResponseRead() throws IOException
     }
     
     private static ByteBuffer bb(String s) {
-        return ByteBuffer.wrap(s.getBytes());
+        return ByteBufferUtil.bytes(s);
     }
     
     private static class Statics 
     {
         private static final String KS = "Keyspace1";
-        private static final ByteBuffer Key = ByteBuffer.wrap("Key01".getBytes());
+        private static final ByteBuffer Key = ByteBufferUtil.bytes("Key01");
         private static final List<ByteBuffer> NamedCols = new ArrayList<ByteBuffer>() 
         {{
-            add(ByteBuffer.wrap("AAA".getBytes()));     
-            add(ByteBuffer.wrap("BBB".getBytes()));     
-            add(ByteBuffer.wrap("CCC".getBytes()));     
+            add(ByteBufferUtil.bytes("AAA"));
+            add(ByteBufferUtil.bytes("BBB"));
+            add(ByteBufferUtil.bytes("CCC"));
         }};
-        private static final ByteBuffer SC = ByteBuffer.wrap("SCName".getBytes());
+        private static final ByteBuffer SC = ByteBufferUtil.bytes("SCName");
         private static final QueryPath StandardPath = new QueryPath("Standard1");
         private static final QueryPath SuperPath = new QueryPath("Super1", SC);
-        private static final ByteBuffer Start = ByteBuffer.wrap("Start".getBytes());
-        private static final ByteBuffer Stop = ByteBuffer.wrap("Stop".getBytes());
+        private static final ByteBuffer Start = ByteBufferUtil.bytes("Start");
+        private static final ByteBuffer Stop = ByteBufferUtil.bytes("Stop");
         
         private static final ColumnFamily StandardCf = ColumnFamily.create(Statics.KS, "Standard1");
         private static final ColumnFamily SuperCf = ColumnFamily.create(Statics.KS, "Super1");
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/TimeSortTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/TimeSortTest.java
index e6ee425a..ab067551 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/TimeSortTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/db/TimeSortTest.java
@@ -68,7 +68,7 @@ public void testTimeSort() throws IOException, ExecutionException, InterruptedEx
 
         for (int i = 900; i < 1000; ++i)
         {
-            RowMutation rm = new RowMutation("Keyspace1", ByteBuffer.wrap(Integer.toString(i).getBytes()));
+            RowMutation rm = new RowMutation("Keyspace1", ByteBufferUtil.bytes(Integer.toString(i)));
             for (int j = 0; j < 8; ++j)
             {
                 rm.add(new QueryPath("StandardLong1", null, getBytes(j * 2)), ByteBufferUtil.bytes("a"), j * 2);
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/io/LazilyCompactedRowTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/io/LazilyCompactedRowTest.java
index dfd57d6a..d742c0fd 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/io/LazilyCompactedRowTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/io/LazilyCompactedRowTest.java
@@ -150,7 +150,7 @@ public void testOneRowTwoColumns() throws IOException, ExecutionException, Inter
         Table table = Table.open("Keyspace1");
         ColumnFamilyStore cfs = table.getColumnFamilyStore("Standard1");
 
-        ByteBuffer key =ByteBuffer.wrap( "k".getBytes() );
+        ByteBuffer key = ByteBufferUtil.bytes("k");
         RowMutation rm = new RowMutation("Keyspace1", key);
         rm.add(new QueryPath("Standard1", null, ByteBufferUtil.bytes("c")), ByteBufferUtil.EMPTY_BYTE_BUFFER, 0);
         rm.add(new QueryPath("Standard1", null, ByteBufferUtil.bytes("d")), ByteBufferUtil.EMPTY_BYTE_BUFFER, 0);
@@ -212,9 +212,9 @@ public void testManyRows() throws IOException, ExecutionException, InterruptedEx
         final int ROWS_PER_SSTABLE = 10;
         for (int j = 0; j < (DatabaseDescriptor.getIndexInterval() * 3) / ROWS_PER_SSTABLE; j++) {
             for (int i = 0; i < ROWS_PER_SSTABLE; i++) {
-                ByteBuffer key = ByteBuffer.wrap(String.valueOf(i % 2).getBytes());
+                ByteBuffer key = ByteBufferUtil.bytes(String.valueOf(i % 2));
                 RowMutation rm = new RowMutation("Keyspace1", key);
-                rm.add(new QueryPath("Standard1", null, ByteBuffer.wrap(String.valueOf(i / 2).getBytes())), ByteBufferUtil.EMPTY_BYTE_BUFFER, j * ROWS_PER_SSTABLE + i);
+                rm.add(new QueryPath("Standard1", null, ByteBufferUtil.bytes(String.valueOf(i / 2))), ByteBufferUtil.EMPTY_BYTE_BUFFER, j * ROWS_PER_SSTABLE + i);
                 rm.apply();
             }
             cfs.forceBlockingFlush();
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/io/sstable/LegacySSTableTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/io/sstable/LegacySSTableTest.java
index 8593bd98..01d547a3 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/io/sstable/LegacySSTableTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/io/sstable/LegacySSTableTest.java
@@ -28,6 +28,7 @@
 import org.apache.cassandra.db.DecoratedKey;
 import org.apache.cassandra.db.columniterator.SSTableNamesIterator;
 import org.apache.cassandra.utils.FBUtilities;
+import org.apache.cassandra.utils.ByteBufferUtil;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
@@ -99,7 +100,7 @@ public void testVersion(String version) throws Throwable
             SSTableReader reader = SSTableReader.open(getDescriptor(version));
             for (String keystring : TEST_DATA)
             {
-                ByteBuffer key = ByteBuffer.wrap(keystring.getBytes());
+                ByteBuffer key = ByteBufferUtil.bytes(keystring);
                 // confirm that the bloom filter does not reject any keys/names
                 DecoratedKey dk = reader.partitioner.decorateKey(key);
                 SSTableNamesIterator iter = new SSTableNamesIterator(reader, dk, FBUtilities.singleton(key));
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/io/sstable/SSTableReaderTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/io/sstable/SSTableReaderTest.java
index 6c1a86a9..45a50aaf 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/io/sstable/SSTableReaderTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/io/sstable/SSTableReaderTest.java
@@ -49,7 +49,7 @@
 {
     static Token t(int i)
     {
-        return StorageService.getPartitioner().getToken(ByteBuffer.wrap(String.valueOf(i).getBytes()));
+        return StorageService.getPartitioner().getToken(ByteBufferUtil.bytes(String.valueOf(i)));
     }
 
     @Test
@@ -62,7 +62,7 @@ public void testGetPositionsForRanges() throws IOException, ExecutionException,
         CompactionManager.instance.disableAutoCompaction();
         for (int j = 0; j < 10; j++)
         {
-            ByteBuffer key = ByteBuffer.wrap(String.valueOf(j).getBytes());
+            ByteBuffer key = ByteBufferUtil.bytes(String.valueOf(j));
             RowMutation rm = new RowMutation("Keyspace1", key);
             rm.add(new QueryPath("Standard2", null, ByteBufferUtil.bytes("0")), ByteBufferUtil.EMPTY_BYTE_BUFFER, j);
             rm.apply();
@@ -103,7 +103,7 @@ public void testSpannedIndexPositions() throws IOException, ExecutionException,
         CompactionManager.instance.disableAutoCompaction();
         for (int j = 0; j < 100; j += 2)
         {
-            ByteBuffer key = ByteBuffer.wrap(String.valueOf(j).getBytes());
+            ByteBuffer key = ByteBufferUtil.bytes(String.valueOf(j));
             RowMutation rm = new RowMutation("Keyspace1", key);
             rm.add(new QueryPath("Standard1", null, ByteBufferUtil.bytes("0")), ByteBufferUtil.EMPTY_BYTE_BUFFER, j);
             rm.apply();
@@ -140,7 +140,7 @@ public void testPersistentStatistics() throws IOException, ExecutionException, I
 
         for (int j = 0; j < 100; j += 2)
         {
-            ByteBuffer key = ByteBuffer.wrap(String.valueOf(j).getBytes());
+            ByteBuffer key = ByteBufferUtil.bytes(String.valueOf(j));
             RowMutation rm = new RowMutation("Keyspace1", key);
             rm.add(new QueryPath("Standard1", null, ByteBufferUtil.bytes("0")), ByteBufferUtil.EMPTY_BYTE_BUFFER, j);
             rm.apply();
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/io/sstable/SSTableTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/io/sstable/SSTableTest.java
index 8f9d72f1..25c9ad09 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/io/sstable/SSTableTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/io/sstable/SSTableTest.java
@@ -34,7 +34,7 @@
     @Test
     public void testSingleWrite() throws IOException {
         // write test data
-        ByteBuffer key = ByteBuffer.wrap(Integer.toString(1).getBytes());
+        ByteBuffer key = ByteBufferUtil.bytes(Integer.toString(1));
         ByteBuffer bytes = ByteBuffer.wrap(new byte[1024]);
         new Random().nextBytes(bytes.array());
 
@@ -64,7 +64,7 @@ public void testManyWrites() throws IOException {
         Map<ByteBuffer, ByteBuffer> map = new HashMap<ByteBuffer,ByteBuffer>();
         for (int i = 100; i < 1000; ++i)
         {
-            map.put(ByteBuffer.wrap(Integer.toString(i).getBytes()), ByteBuffer.wrap(("Avinash Lakshman is a good man: " + i).getBytes()));
+            map.put(ByteBufferUtil.bytes(Integer.toString(i)), ByteBufferUtil.bytes(("Avinash Lakshman is a good man: " + i)));
         }
 
         // write
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/io/sstable/SSTableUtils.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/io/sstable/SSTableUtils.java
index cefdb54d..aa639763 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/io/sstable/SSTableUtils.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/io/sstable/SSTableUtils.java
@@ -29,6 +29,7 @@
 import org.apache.cassandra.db.DecoratedKey;
 import org.apache.cassandra.db.IColumn;
 import org.apache.cassandra.io.util.DataOutputBuffer;
+import org.apache.cassandra.utils.ByteBufferUtil;
 
 public class SSTableUtils
 {
@@ -122,7 +123,7 @@ public SSTableReader write(Set<String> keys) throws IOException
             for (String key : keys)
             {
                 ColumnFamily cf = ColumnFamily.create(ksname, cfname);
-                cf.addColumn(new Column(ByteBuffer.wrap(key.getBytes()), ByteBuffer.wrap(key.getBytes()), 0));
+                cf.addColumn(new Column(ByteBufferUtil.bytes(key), ByteBufferUtil.bytes(key), 0));
                 map.put(key, cf);
             }
             return write(map);
@@ -135,8 +136,7 @@ public SSTableReader write(Map<String, ColumnFamily> entries) throws IOException
             {
                 DataOutputBuffer buffer = new DataOutputBuffer();
                 ColumnFamily.serializer().serializeWithIndexes(entry.getValue(), buffer);
-                map.put(ByteBuffer.wrap(entry.getKey().getBytes()),
-                        ByteBuffer.wrap(buffer.asByteArray()));
+                map.put(ByteBufferUtil.bytes(entry.getKey()), ByteBuffer.wrap(buffer.asByteArray()));
             }
             return writeRaw(map);
         }
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/locator/SimpleStrategyTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/locator/SimpleStrategyTest.java
index 56d7089a..42466e9f 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/locator/SimpleStrategyTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/locator/SimpleStrategyTest.java
@@ -36,6 +36,7 @@
 import org.apache.cassandra.dht.*;
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.service.StorageServiceAccessor;
+import org.apache.cassandra.utils.ByteBufferUtil;
 
 import static org.junit.Assert.*;
 
@@ -68,7 +69,7 @@ public void testStringEndpoints() throws UnknownHostException, ConfigurationExce
         List<Token> keyTokens = new ArrayList<Token>();
         for (int i = 0; i < 5; i++) {
             endpointTokens.add(new StringToken(String.valueOf((char)('a' + i * 2))));
-            keyTokens.add(partitioner.getToken(ByteBuffer.wrap(String.valueOf((char)('a' + i * 2 + 1)).getBytes())));
+            keyTokens.add(partitioner.getToken(ByteBufferUtil.bytes(String.valueOf((char)('a' + i * 2 + 1)))));
         }
         verifyGetNaturalEndpoints(endpointTokens.toArray(new Token[0]), keyTokens.toArray(new Token[0]));
     }
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/service/EmbeddedCassandraServiceTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/service/EmbeddedCassandraServiceTest.java
index efd2e115..143efa70 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/service/EmbeddedCassandraServiceTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/service/EmbeddedCassandraServiceTest.java
@@ -20,6 +20,7 @@
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
+import java.nio.charset.CharacterCodingException;
 
 import com.google.common.base.Charsets;
 import org.junit.BeforeClass;
@@ -69,8 +70,8 @@ public static void setup() throws TTransportException, IOException, InterruptedE
     }
 
     @Test
-    public void testEmbeddedCassandraService() throws AuthenticationException, AuthorizationException,
-    InvalidRequestException, UnavailableException, TimedOutException, TException, NotFoundException
+    public void testEmbeddedCassandraService()
+    throws AuthenticationException, AuthorizationException, InvalidRequestException, UnavailableException, TimedOutException, TException, NotFoundException, CharacterCodingException
     {
         Cassandra.Client client = getClient();
         client.set_keyspace("Keyspace1");
@@ -84,14 +85,14 @@ public void testEmbeddedCassandraService() throws AuthenticationException, Autho
 
         // insert
         client.insert(key_user_id, par, new Column(ByteBufferUtil.bytes("name"),
-                ByteBuffer.wrap( "Ran".getBytes(Charsets.UTF_8)), timestamp), ConsistencyLevel.ONE);
+                      ByteBufferUtil.bytes("Ran"), timestamp), ConsistencyLevel.ONE);
 
         // read
         ColumnOrSuperColumn got = client.get(key_user_id, cp, ConsistencyLevel.ONE);
 
         // assert
         assertNotNull("Got a null ColumnOrSuperColumn", got);
-        assertEquals("Ran", new String(got.getColumn().getValue(), Charsets.UTF_8));
+        assertEquals("Ran", ByteBufferUtil.string(got.getColumn().value));
     }
 
     /**
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/streaming/SerializationsTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/streaming/SerializationsTest.java
index 04d2f24d..af268dc8 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/streaming/SerializationsTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/streaming/SerializationsTest.java
@@ -31,6 +31,7 @@
 import org.apache.cassandra.io.sstable.Descriptor;
 import org.apache.cassandra.io.sstable.SSTable;
 import org.apache.cassandra.net.Message;
+import org.apache.cassandra.utils.ByteBufferUtil;
 import org.apache.cassandra.utils.FBUtilities;
 import org.apache.cassandra.utils.Pair;
 import org.junit.Test;
@@ -144,7 +145,7 @@ private void testStreamRequestMessageWrite() throws IOException
     {
         Collection<Range> ranges = new ArrayList<Range>();
         for (int i = 0; i < 5; i++)
-            ranges.add(new Range(new BytesToken(ByteBuffer.wrap(Integer.toString(10*i).getBytes())), new BytesToken(ByteBuffer.wrap(Integer.toString(10*i+5).getBytes()))));
+            ranges.add(new Range(new BytesToken(ByteBufferUtil.bytes(Integer.toString(10*i))), new BytesToken(ByteBufferUtil.bytes(Integer.toString(10*i+5)))));
         StreamRequestMessage msg0 = new StreamRequestMessage(FBUtilities.getLocalAddress(), ranges, "Keyspace1", 123L);
         StreamRequestMessage msg1 = new StreamRequestMessage(FBUtilities.getLocalAddress(), makePendingFile(true, "aa", 100), 124L);
         StreamRequestMessage msg2 = new StreamRequestMessage(FBUtilities.getLocalAddress(), makePendingFile(false, "aa", 100), 124L);
@@ -180,8 +181,8 @@ private static SSTable makeSSTable()
         Table t = Table.open("Keyspace1");
         for (int i = 0; i < 100; i++)
         {
-            RowMutation rm = new RowMutation(t.name, ByteBuffer.wrap(Long.toString(System.nanoTime()).getBytes()));
-            rm.add(new QueryPath("Standard1", null, ByteBuffer.wrap("cola".getBytes())), ByteBuffer.wrap("value".getBytes()), 0);
+            RowMutation rm = new RowMutation(t.name, ByteBufferUtil.bytes(Long.toString(System.nanoTime())));
+            rm.add(new QueryPath("Standard1", null, ByteBufferUtil.bytes("cola")), ByteBufferUtil.bytes("value"), 0);
             try
             {
                 rm.apply();
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/streaming/StreamingTransferTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/streaming/StreamingTransferTest.java
index d4bb97f3..29e250fe 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/streaming/StreamingTransferTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/streaming/StreamingTransferTest.java
@@ -68,7 +68,7 @@ public void testTransferTable() throws Exception
         for (int i = 1; i <= 3; i++)
         {
             String key = "key" + i;
-            RowMutation rm = new RowMutation("Keyspace1", ByteBuffer.wrap(key.getBytes()));
+            RowMutation rm = new RowMutation("Keyspace1", ByteBufferUtil.bytes(key));
             ColumnFamily cf = ColumnFamily.create(table.name, cfs.columnFamily);
             cf.addColumn(column(key, "v", 0));
             cf.addColumn(new Column(ByteBufferUtil.bytes("birthdate"), ByteBufferUtil.bytes((long) i), 0));
@@ -143,8 +143,8 @@ public void testTransferTableMultiple() throws Exception
         ColumnFamilyStore cfstore = Table.open(tablename).getColumnFamilyStore(cfname);
         List<Row> rows = Util.getRangeSlice(cfstore);
         assertEquals(6, rows.size());
-        assert rows.get(0).key.key.equals( ByteBufferUtil.bytes("test"));
-        assert rows.get(3).key.key.equals(ByteBuffer.wrap( "transfer1".getBytes() ));
+        assert rows.get(0).key.key.equals(ByteBufferUtil.bytes("test"));
+        assert rows.get(3).key.key.equals(ByteBufferUtil.bytes("transfer1"));
         assert rows.get(0).cf.getColumnsMap().size() == 1;
         assert rows.get(3).cf.getColumnsMap().size() == 1;
 
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/tools/SSTableExportTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/tools/SSTableExportTest.java
index 50671eeb..453f3134 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/tools/SSTableExportTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/tools/SSTableExportTest.java
@@ -54,7 +54,7 @@
 {
     public String asHex(String str)
     {
-        return bytesToHex(ByteBuffer.wrap(str.getBytes()));
+        return bytesToHex(ByteBufferUtil.bytes(str));
     }
 
     @Test
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/utils/ByteBufferUtilTest.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/utils/ByteBufferUtilTest.java
index f89dd587..1c384abe 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/utils/ByteBufferUtilTest.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/utils/ByteBufferUtilTest.java
@@ -218,7 +218,7 @@ public void testIntBytesConversions()
     public void testDecode() throws IOException
     {
         ByteBuffer bytes = ByteBuffer.wrap(new byte[]{(byte)0xff, (byte)0xfe});
-        ByteBufferUtil.string(bytes, Charsets.UTF_8);
+        ByteBufferUtil.string(bytes);
     }
 
     @Test
diff --git a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/utils/KeyGenerator.java b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/utils/KeyGenerator.java
index 3ca15a74..519c5809 100644
--- a/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/utils/KeyGenerator.java
+++ b/cassandra/branches/cassandra-0.7/test/unit/org/apache/cassandra/utils/KeyGenerator.java
@@ -92,7 +92,7 @@ public boolean hasNext() {
         }
 
         public ByteBuffer next() {
-            return ByteBuffer.wrap(Integer.toString(i++).getBytes());
+            return ByteBufferUtil.bytes(Integer.toString(i++));
         }
 
         public void remove() {
