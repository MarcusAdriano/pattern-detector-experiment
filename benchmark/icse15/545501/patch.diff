diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/UpdateableBlobStream.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/UpdateableBlobStream.java
index 42d7b702..9ccb81d0 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/UpdateableBlobStream.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/UpdateableBlobStream.java
@@ -31,23 +31,28 @@ Licensed to the Apache Software Foundation (ASF) under one
 
 /**
  * Updateable blob stream is a wrapper stream over dvd stream 
- * and LOBInputStream. It detects if blob data has moved from 
- * dvd to clob control update itself to point to LOBInputStream.
+ * and LOBInputStream.
+ * It detects if blob data has moved from dvd to clob control. If this happens,
+ * it will update itself to point to LOBInputStream and reflect changes made to
+ * the Blob after the current position of the stream.
  */
 class UpdateableBlobStream extends InputStream {
-    //flag to check if its using stream from LOBStreamControl
-    //or from DVD.
+    /**
+     * Flag to check if it is using stream from LOBStreamControl or from DVD.
+     * <code>true</code> means data is read from LOBStreamControl,
+     * <code>false</code> means data is read from the DVD.
+     */
     private boolean materialized;
     private InputStream stream;
+    /* Current position of this stream in number of bytes. */
     private long pos;
-    private EmbedBlob blob;
+    private final EmbedBlob blob;
     
     /**
      * Constructs UpdateableBlobStream using the the InputStream receives as the
-     * parameter. The initial position is set to the pos.
+     * parameter. The initial position is set to the <code>0</code>.
      * @param blob EmbedBlob this stream is associated with.
      * @param is InputStream this class is going to use internally.
-     * @throws IOException
      */
     UpdateableBlobStream (EmbedBlob blob, InputStream is) {
         stream = is;        
@@ -55,11 +60,13 @@ Licensed to the Apache Software Foundation (ASF) under one
         this.blob = blob;
     }
     
-    //Checks if this object is using materialized blob
-    //if not it checks if the blob was materialized since
-    //this stream was last access. If the blob was materialized 
-    //(due to one of the set methods) it gets the stream again and 
-    //sets the position to current read position
+    /**
+     * Checks if this object is using materialized blob
+     * if not it checks if the blob was materialized since
+     * this stream was last access. If the blob was materialized
+     * (due to one of the set methods) it gets the stream again and
+     * sets the position to current read position.
+     */
     private void updateIfRequired () throws IOException {
         if (materialized)
             return;
@@ -70,6 +77,7 @@ private void updateIfRequired () throws IOException {
             } catch (SQLException ex) {
                 IOException ioe = new IOException (ex.getMessage());
                 ioe.initCause (ex);
+                throw ioe;
             }
             long leftToSkip = pos;
             while (leftToSkip > 0) {
@@ -86,7 +94,6 @@ private void updateIfRequired () throws IOException {
                     }
                 }
                 leftToSkip -= skipped;
-                
             }
         }
     }
@@ -98,12 +105,16 @@ private void updateIfRequired () throws IOException {
      * has been reached, the value <code>-1</code> is returned. This method
      * blocks until input data is available, the end of the stream is detected,
      * or an exception is thrown.
-     * 
-     * <p> A subclass must provide an implementation of this method.
+     * <p>
+     * A subclass must provide an implementation of this method.
+     * <p>
+     * Note that this stream will reflect changes made to the underlying Blob at
+     * positions equal to or larger then the current position.
      * 
      * @return the next byte of data, or <code>-1</code> if the end of the
      *             stream is reached.
      * @exception IOException  if an I/O error occurs.
+     * @see InputStream#read
      */
     public int read() throws IOException {
         updateIfRequired();        
@@ -118,7 +129,9 @@ public int read() throws IOException {
      * an array of bytes.  An attempt is made to read as many as
      * <code>len</code> bytes, but a smaller number may be read.
      * The number of bytes actually read is returned as an integer.
-     * 
+     * <p>
+     * Note that this stream will reflect changes made to the underlying Blob at
+     * positions equal to or larger then the current position .
      * 
      * @param b     the buffer into which the data is read.
      * @param off   the start offset in array <code>b</code>
@@ -134,7 +147,7 @@ public int read() throws IOException {
      * @exception IndexOutOfBoundsException If <code>off</code> is negative, 
      * <code>len</code> is negative, or <code>len</code> is greater than 
      * <code>b.length - off</code>
-     * @see java.io.InputStream#read()
+     * @see java.io.InputStream#read(byte[],int,int)
      */
     public int read(byte[] b, int off, int len) throws IOException {
         updateIfRequired();        
@@ -149,6 +162,9 @@ public int read(byte[] b, int off, int len) throws IOException {
      * the buffer array <code>b</code>. The number of bytes actually read is
      * returned as an integer.  This method blocks until input data is
      * available, end of file is detected, or an exception is thrown.
+     * <p>
+     * Note that this stream will reflect changes made to the underlying Blob at
+     * positions equal to or larger then the current position .
      * 
      * @param b   the buffer into which the data is read.
      * @return the total number of bytes read into the buffer, or
@@ -158,7 +174,7 @@ public int read(byte[] b, int off, int len) throws IOException {
      * other than the end of the file, if the input stream has been closed, or
      * if some other I/O error occurs.
      * @exception NullPointerException  if <code>b</code> is <code>null</code>.
-     * @see java.io.InputStream#read(byte[], int, int)
+     * @see java.io.InputStream#read(byte[])
      */
     public int read(byte[] b) throws IOException {
         updateIfRequired();
@@ -176,6 +192,9 @@ public int read(byte[] b) throws IOException {
      * before <code>n</code> bytes have been skipped is only one possibility.
      * The actual number of bytes skipped is returned.  If <code>n</code> is
      * negative, no bytes are skipped.
+     * <p>
+     * Note that this stream will reflect changes made to the underlying Blob at
+     * positions equal to or larger then the current position .
      * 
      * @param n   the number of bytes to be skipped.
      * @return the actual number of bytes skipped.
