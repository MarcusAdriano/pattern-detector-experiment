diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java
index a1d96f2c..88898863 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/store/access/btree/BTreeController.java
@@ -110,7 +110,11 @@ public BTreeController()
      * it would be a waste to merge the page only to split it again to allow
      * the insert of the row causing the split.
      *
-	 * @return true if at least one row was purged.
+	 * @return true if at least one row was purged.  If true, then the routine
+     *              will leave the page latched, and the caller will release
+     *              the latch by committing or aborting the transaction.  The
+     *              latch must be held to end transaction to insure space on
+     *              the page remains available for a undo of the purge.
      *
      * @param open_btree The already open btree to use to get latch on page.
      * @param pageno     The page number of the leaf to attempt the reclaim on.
@@ -194,7 +198,13 @@ private boolean reclaim_deleted_rows(
         finally
         {
             if (controlRow != null)
+            {
+                if (!purged_at_least_one_row) 
+                {
+                    // Ok to release latch if no purging has happened.
                 controlRow.release();
+                }
+            }
 
             return(purged_at_least_one_row);
         }
@@ -307,6 +317,12 @@ private boolean reclaim_deleted_rows(
                 // don't split if we reclaim any rows.
                 do_split = !reclaim_deleted_rows(split_open_btree, leaf_pageno);
 
+                // on return if !do_split then the latch on leaf_pageno is held
+                // and will be released by the committing or aborting the 
+                // transaction.  If a purge has been done, no other action on
+                // the page should be attempted (ie. a split) before committing
+                // the purges.
+
                 split_open_btree.close();
             }
         }
@@ -314,6 +330,9 @@ private boolean reclaim_deleted_rows(
         long new_leaf_pageno = leaf_pageno; 
         if (do_split)
         {
+            // no space was reclaimed from deleted rows, so do split to allow
+            // space for a subsequent insert.
+
             split_open_btree = new OpenBTree();
             split_open_btree.init(
                 this.init_open_user_scans, 
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java
index 2bbb8066..4462d1e5 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/impl/store/access/heap/HeapPostCommit.java
@@ -225,7 +225,10 @@ private final void purgeCommittedDeletes(
             {
                 // If no purge happened on the page and the page is not
                 // removed, feel free to unlatch it.  Otherwise, let
-                // transaction commit take care of it.
+                // transaction commit take care of it.  The latch must be
+                // held until end transaction in order to insure no other
+                // transaction uses the space freed by the purge, which
+                // would cause a subquent undo of the purge to fail.
 				if (!purgingDone)
                 {
                     page.unlatch();
