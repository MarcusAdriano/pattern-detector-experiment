diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/dblook_test.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/dblook_test.java
index 76822510..be61d7e8 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/dblook_test.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/tools/dblook_test.java
@@ -95,6 +95,10 @@ protected void doTest() {
 			createTestDatabase(dbCreationScript_2);
 			runMessageCheckTest(testDBName);
 
+            // Test DERBY-6387 - wrong order of triggers
+            System.out.println("\n-= Start DERBY-6387 test. =-");
+            testDerby6387();
+
 		} catch (SQLException se) {
 
 			System.out.println("FAILED: to complete the test:");
@@ -1713,4 +1717,22 @@ private void printAsHeader(String str) {
 
 	}
 
+    /**
+     * Regression test case for DERBY-6387. Verify that triggers are returned
+     * in the order in which they were created.
+     */
+    private void testDerby6387() throws Exception {
+        // Create the test database.
+        createTestDatabase("dblook_makeDB_derby6387.sql");
+
+        // Run dblook on it.
+        lookOne(testDBName);
+
+        // Check that the error log was empty.
+        dumpFileToSysOut("dblook.log");
+
+        // Check the dblook output. Before DERBY-6387 was fixed, TR24 was
+        // first in the output. It should be last.
+        dumpFileToSysOut(testDBName + ".sql");
+    }
 }
diff --git a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/dblook/DB_Trigger.java b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/dblook/DB_Trigger.java
index 60f8f476..238e1ecf 100644
--- a/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/dblook/DB_Trigger.java
+++ b/db/derby/code/trunk/java/tools/org/apache/derby/impl/tools/dblook/DB_Trigger.java
@@ -59,7 +59,8 @@ public static void doTriggers(Connection conn, boolean supportsWhenClause)
 
 		Statement stmt = conn.createStatement();
         ResultSet rs = stmt.executeQuery(
-                "SELECT * FROM SYS.SYSTRIGGERS WHERE STATE != 'D'");
+                "SELECT * FROM SYS.SYSTRIGGERS WHERE STATE != 'D' " +
+                "ORDER BY CREATIONTIMESTAMP");
 
 		boolean firstTime = true;
 		while (rs.next()) {
