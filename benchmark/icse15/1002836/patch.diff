diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/OnlineGaussianAccumulator.java b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/OnlineGaussianAccumulator.java
index 6eb98208..e0410f56 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/OnlineGaussianAccumulator.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/OnlineGaussianAccumulator.java
@@ -20,9 +20,8 @@
 import org.apache.mahout.math.function.SquareRootFunction;
 
 /**
- * An online Gaussian statistics accumulator based upon Knuth (who cites Wellford) which is declared to be
+ * An online Gaussian statistics accumulator based upon Knuth (who cites Welford) which is declared to be
  * numerically-stable. See http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance
- * The cited algorithm has been modified to accumulate weighted Vectors
  */
 public class OnlineGaussianAccumulator implements GaussianAccumulator {
   private double n = 0;
diff --git a/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/InputMapper.java b/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/InputMapper.java
index 6188dac7..722c42f3 100644
--- a/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/InputMapper.java
+++ b/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/canopy/InputMapper.java
@@ -48,6 +48,8 @@ protected void map(LongWritable key, Text values, Context context) throws IOExce
         doubles.add(Double.valueOf(value));
       }
     }
+    // ignore empty lines in data file
+    if (!doubles.isEmpty()) {
     try {
       Vector result = (Vector) constructor.newInstance(doubles.size());
       int index = 0;
@@ -65,6 +67,7 @@ protected void map(LongWritable key, Text values, Context context) throws IOExce
       throw new IllegalStateException(e);
     }
   }
+  }
 
   @Override
   protected void setup(Context context) throws IOException, InterruptedException {
diff --git a/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/InputMapper.java b/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/InputMapper.java
index 46a0092b..480c3d9e 100644
--- a/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/InputMapper.java
+++ b/mahout/trunk/examples/src/main/java/org/apache/mahout/clustering/syntheticcontrol/meanshift/InputMapper.java
@@ -46,6 +46,8 @@ protected void map(LongWritable key, Text values, Context context) throws IOExce
         doubles.add(Double.valueOf(value));
       }
     }
+    // ignore empty lines in input data
+    if (!doubles.isEmpty()) {
     Vector point = new DenseVector(doubles.size());
     int index = 0;
     for (Double d : doubles) {
@@ -54,4 +56,5 @@ protected void map(LongWritable key, Text values, Context context) throws IOExce
     MeanShiftCanopy canopy = new MeanShiftCanopy(point, nextCanopyId++, new EuclideanDistanceMeasure());
     context.write(new Text(), canopy);
   }
+  }
 }
diff --git a/mahout/trunk/utils/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java b/mahout/trunk/utils/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java
index 7c2b9164..744f57df 100644
--- a/mahout/trunk/utils/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java
+++ b/mahout/trunk/utils/src/main/java/org/apache/mahout/clustering/cdbw/CDbwEvaluator.java
@@ -32,7 +32,7 @@
 import org.apache.hadoop.io.Writable;
 import org.apache.mahout.clustering.Cluster;
 import org.apache.mahout.clustering.GaussianAccumulator;
-import org.apache.mahout.clustering.RunningSumsGaussianAccumulator;
+import org.apache.mahout.clustering.OnlineGaussianAccumulator;
 import org.apache.mahout.clustering.evaluation.RepresentativePointsDriver;
 import org.apache.mahout.clustering.evaluation.RepresentativePointsMapper;
 import org.apache.mahout.common.distance.DistanceMeasure;
@@ -134,7 +134,7 @@ public CDbwEvaluator(Configuration conf, Path clustersIn) throws ClassNotFoundEx
    */
   private void computeStd(int cI) {
     List<VectorWritable> repPts = representativePoints.get(cI);
-    GaussianAccumulator accumulator = new RunningSumsGaussianAccumulator();
+    GaussianAccumulator accumulator = new OnlineGaussianAccumulator();
     for (VectorWritable vw : repPts) {
       accumulator.observe(vw.get());
     }
diff --git a/mahout/trunk/utils/src/test/java/org/apache/mahout/clustering/cdbw/TestCDbwEvaluator.java b/mahout/trunk/utils/src/test/java/org/apache/mahout/clustering/cdbw/TestCDbwEvaluator.java
index d3264af3..5bcf0033 100644
--- a/mahout/trunk/utils/src/test/java/org/apache/mahout/clustering/cdbw/TestCDbwEvaluator.java
+++ b/mahout/trunk/utils/src/test/java/org/apache/mahout/clustering/cdbw/TestCDbwEvaluator.java
@@ -175,8 +175,8 @@ public void testCDbw0() throws IOException {
     CDbwEvaluator evaluator = new CDbwEvaluator(representativePoints, clusters, measure);
     assertEquals("inter cluster density", 0.0, evaluator.interClusterDensity(), EPSILON);
     assertEquals("separation", 20.485281374238568, evaluator.separation(), EPSILON);
-    assertEquals("intra cluster density", 0.8944271909999157, evaluator.intraClusterDensity(), EPSILON);
-    assertEquals("CDbw", 18.322592676403097, evaluator.getCDbw(), EPSILON);
+    assertEquals("intra cluster density", 0.8, evaluator.intraClusterDensity(), EPSILON);
+    assertEquals("CDbw", 16.388225099390855, evaluator.getCDbw(), EPSILON);
   }
 
   @Test
@@ -185,10 +185,10 @@ public void testCDbw1() throws IOException {
     DistanceMeasure measure = new EuclideanDistanceMeasure();
     initData(1, 0.5, measure);
     CDbwEvaluator evaluator = new CDbwEvaluator(representativePoints, clusters, measure);
-    assertEquals("inter cluster density", 0.0, evaluator.interClusterDensity(), EPSILON);
-    assertEquals("separation", 13.656854249492381, evaluator.separation(), EPSILON);
-    assertEquals("intra cluster density", 0.44721359549995787, evaluator.intraClusterDensity(), EPSILON);
-    assertEquals("CDbw", 6.107530892134367, evaluator.getCDbw(), EPSILON);
+    assertEquals("inter cluster density", 1.2, evaluator.interClusterDensity(), EPSILON);
+    assertEquals("separation", 6.207661022496537, evaluator.separation(), EPSILON);
+    assertEquals("intra cluster density", 0.4, evaluator.intraClusterDensity(), EPSILON);
+    assertEquals("CDbw", 2.483064408998615, evaluator.getCDbw(), EPSILON);
   }
 
   @Test
@@ -197,10 +197,10 @@ public void testCDbw2() throws IOException {
     DistanceMeasure measure = new EuclideanDistanceMeasure();
     initData(1, 0.75, measure);
     CDbwEvaluator evaluator = new CDbwEvaluator(representativePoints, clusters, measure);
-    assertEquals("inter cluster density", 0.7634413615167959, evaluator.interClusterDensity(), EPSILON);
-    assertEquals("separation", 3.8722167199667066, evaluator.separation(), EPSILON);
-    assertEquals("intra cluster density", 0.29814239699997197, evaluator.intraClusterDensity(), EPSILON);
-    assertEquals("CDbw", 1.1544719745942431, evaluator.getCDbw(), EPSILON);
+    assertEquals("inter cluster density", 0.682842712474619, evaluator.interClusterDensity(), EPSILON);
+    assertEquals("separation", 4.0576740025245694, evaluator.separation(), EPSILON);
+    assertEquals("intra cluster density", 0.26666666666666666, evaluator.intraClusterDensity(), EPSILON);
+    assertEquals("CDbw", 1.0820464006732184, evaluator.getCDbw(), EPSILON);
   }
 
   @Test
@@ -215,8 +215,8 @@ public void testEmptyCluster() throws IOException {
     CDbwEvaluator evaluator = new CDbwEvaluator(representativePoints, clusters, measure);
     assertEquals("inter cluster density", 0.0, evaluator.interClusterDensity(), EPSILON);
     assertEquals("separation", 20.485281374238568, evaluator.separation(), EPSILON);
-    assertEquals("intra cluster density", 0.8944271909999157, evaluator.intraClusterDensity(), EPSILON);
-    assertEquals("CDbw", 18.322592676403097, evaluator.getCDbw(), EPSILON);
+    assertEquals("intra cluster density", 0.8, evaluator.intraClusterDensity(), EPSILON);
+    assertEquals("CDbw", 16.388225099390855, evaluator.getCDbw(), EPSILON);
   }
 
   @Test
@@ -232,8 +232,8 @@ public void testSingleValueCluster() throws IOException {
     CDbwEvaluator evaluator = new CDbwEvaluator(representativePoints, clusters, measure);
     assertEquals("inter cluster density", 0.0, evaluator.interClusterDensity(), EPSILON);
     assertEquals("separation", 20.485281374238568, evaluator.separation(), EPSILON);
-    assertEquals("intra cluster density", 0.8944271909999157, evaluator.intraClusterDensity(), EPSILON);
-    assertEquals("CDbw", 18.322592676403097, evaluator.getCDbw(), EPSILON);
+    assertEquals("intra cluster density", 0.8, evaluator.intraClusterDensity(), EPSILON);
+    assertEquals("CDbw", 16.388225099390855, evaluator.getCDbw(), EPSILON);
   }
 
   /**
@@ -256,8 +256,8 @@ public void testAllSameValueCluster() throws IOException {
     CDbwEvaluator evaluator = new CDbwEvaluator(representativePoints, clusters, measure);
     assertEquals("inter cluster density", 0.0, evaluator.interClusterDensity(), EPSILON);
     assertEquals("separation", 20.485281374238568, evaluator.separation(), EPSILON);
-    assertEquals("intra cluster density", 0.8944271909999157, evaluator.intraClusterDensity(), EPSILON);
-    assertEquals("CDbw", 18.322592676403097, evaluator.getCDbw(), EPSILON);
+    assertEquals("intra cluster density", 0.8, evaluator.intraClusterDensity(), EPSILON);
+    assertEquals("CDbw", 16.388225099390855, evaluator.getCDbw(), EPSILON);
   }
 
   /**
@@ -274,17 +274,17 @@ public void testAlmostSameValueCluster() throws IOException {
     clusters.add(cluster);
     List<VectorWritable> points = new ArrayList<VectorWritable>();
     Vector delta = new DenseVector(new double[] { 0, Double.MIN_NORMAL });
-    points.add(new VectorWritable(delta));
-    points.add(new VectorWritable(cluster.getCenter()));
-    points.add(new VectorWritable(cluster.getCenter()));
-    points.add(new VectorWritable(cluster.getCenter()));
-    points.add(new VectorWritable(cluster.getCenter()));
+    points.add(new VectorWritable(delta.clone()));
+    points.add(new VectorWritable(delta.clone()));
+    points.add(new VectorWritable(delta.clone()));
+    points.add(new VectorWritable(delta.clone()));
+    points.add(new VectorWritable(delta.clone()));
     representativePoints.put(cluster.getId(), points);
     CDbwEvaluator evaluator = new CDbwEvaluator(representativePoints, clusters, measure);
     assertEquals("inter cluster density", 0.0, evaluator.interClusterDensity(), EPSILON);
     assertEquals("separation", 28.970562748477143, evaluator.separation(), EPSILON);
-    assertEquals("intra cluster density", 2.0124611797498106, evaluator.intraClusterDensity(), EPSILON);
-    assertEquals("CDbw", 58.30213288681623, evaluator.getCDbw(), EPSILON);
+    assertEquals("intra cluster density", 1.8, evaluator.intraClusterDensity(), EPSILON);
+    assertEquals("CDbw", 52.147012947258865, evaluator.getCDbw(), EPSILON);
   }
 
   @Test
