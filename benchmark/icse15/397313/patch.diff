diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
index 169b5781..d6370f2e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedBlob.java
@@ -70,9 +70,15 @@ multiple threads and sucks data from the stream (returned from
 
 final class EmbedBlob extends ConnectionChild implements Blob
 {
-    // clob is either bytes or stream
+    // blob is either bytes or stream
     private boolean         isBytes;
     private InputStream     myStream;
+    /*
+     * Length of the BLOB if known. Set to -1 if
+     * the current length of the BLOB is not known.
+     */
+    private long myLength = -1;
+    
     private byte[]          myBytes;
     // note: cannot control position of the stream since user can do a getBinaryStream
     private long            pos;
@@ -107,6 +113,7 @@ protected EmbedBlob(DataValueDescriptor dvd, EmbedConnection con)
             if (SanityManager.DEBUG)
                 SanityManager.ASSERT(dvdBytes != null,"blob has a null value underneath");
 
+            myLength = dvdBytes.length;
             myBytes = new byte[dvdBytes.length];
             System.arraycopy(dvdBytes, 0, myBytes, 0, dvdBytes.length);
         }
@@ -208,11 +215,12 @@ private int read()
     public long length()
         throws SQLException
     {
+        if (myLength != -1)
+            return myLength;
+        
         boolean pushStack = false;
         try
         {
-            if (isBytes)
-                return myBytes.length;
             // we have a stream
             synchronized (getConnectionSynchronization())
             {
@@ -221,6 +229,14 @@ public long length()
                     setupContextStack();
 
                 setPosition(0);
+                // If possible get the length from the encoded
+                // length at the front of the raw stream.
+                if ((myLength = biStream.getLength()) != -1) {
+                    biStream.close();
+                   return myLength;
+                }
+                
+                // Otherwise have to read the entire stream!
                 for (;;)
                 {
                     int size = biStream.read(buf);
@@ -228,6 +244,9 @@ public long length()
                         break;
                     pos += size;
                 }
+                // Save for future uses.
+                myLength = pos;
+                biStream.close();
                 return pos;
             }
         }
