diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/ConsistencyChecker.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/ConsistencyChecker.java
index 4604874c..f6a64ce8 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/ConsistencyChecker.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/ConsistencyChecker.java
@@ -153,7 +153,7 @@ public synchronized void response(Message response)
 		
         public DataRepairHandler() throws IOException
         {
-            readResponseResolver_ = new ReadResponseResolver(readCommand_.table, replicas_.size());
+            readResponseResolver_ = new ReadResponseResolver(readCommand_.table, readCommand_.key, replicas_.size());
             majority_ = (replicas_.size() / 2) + 1;
             // wrap original data Row in a response Message so it doesn't need to be special-cased in the resolver
             ReadResponse readResponse = new ReadResponse(row_);
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/ReadResponseResolver.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/ReadResponseResolver.java
index 9d1a4a98..b95e2854 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/ReadResponseResolver.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/ReadResponseResolver.java
@@ -24,11 +24,8 @@
 import java.io.IOException;
 import java.util.*;
 
-import org.apache.cassandra.db.ColumnFamily;
-import org.apache.cassandra.db.ReadResponse;
-import org.apache.cassandra.db.Row;
-import org.apache.cassandra.db.RowMutation;
-import org.apache.cassandra.db.RowMutationMessage;
+import org.apache.cassandra.db.*;
+
 import java.net.InetAddress;
 import org.apache.cassandra.net.Message;
 import org.apache.cassandra.net.MessagingService;
@@ -48,14 +45,16 @@
     private final String table;
     private final int responseCount;
     private final Map<Message, ReadResponse> results = new NonBlockingHashMap<Message, ReadResponse>();
+    private String key;
 
-    public ReadResponseResolver(String table, int responseCount)
+    public ReadResponseResolver(String table, String key, int responseCount)
     {
         assert 1 <= responseCount && responseCount <= DatabaseDescriptor.getReplicationFactor(table)
             : "invalid response count " + responseCount;
 
         this.responseCount = responseCount;
         this.table = table;
+        this.key = key;
     }
 
     /*
@@ -73,7 +72,6 @@ public Row resolve(Collection<Message> responses) throws DigestMismatchException
         long startTime = System.currentTimeMillis();
 		List<ColumnFamily> versions = new ArrayList<ColumnFamily>(responses.size());
 		List<InetAddress> endPoints = new ArrayList<InetAddress>(responses.size());
-		String key = null;
 		byte[] digest = null;
 
         /*
@@ -104,7 +102,6 @@ public Row resolve(Collection<Message> responses) throws DigestMismatchException
             {
                 versions.add(result.row().cf);
                 endPoints.add(message.getFrom());
-                key = result.row().key;
             }
         }
 
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/StorageProxy.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/StorageProxy.java
index 5abe3126..f2de6e73 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/StorageProxy.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/service/StorageProxy.java
@@ -470,7 +470,8 @@ private static int determineBlockFor(int expandedTargets, ConsistencyLevel consi
                 if (logger.isDebugEnabled())
                     logger.debug("strongread reading " + (m == message ? "data" : "digest") + " for " + command + " from " + m.getMessageId() + "@" + endpoint);
             }
-            QuorumResponseHandler<Row> quorumResponseHandler = new QuorumResponseHandler<Row>(responseCount, new ReadResponseResolver(command.table, responseCount));
+            ReadResponseResolver resolver = new ReadResponseResolver(command.table, command.key, responseCount);
+            QuorumResponseHandler<Row> quorumResponseHandler = new QuorumResponseHandler<Row>(responseCount, resolver);
             MessagingService.instance.sendRR(messages, endPoints, quorumResponseHandler);
             quorumResponseHandlers.add(quorumResponseHandler);
             commandEndPoints.add(endPoints);
@@ -500,7 +501,8 @@ private static int determineBlockFor(int expandedTargets, ConsistencyLevel consi
                     if (logger.isDebugEnabled())
                         logger.debug("Digest mismatch:", ex);
                     int responseCount = determineBlockFor(DatabaseDescriptor.getReplicationFactor(command.table), consistency_level);
-                    QuorumResponseHandler<Row> qrhRepair = new QuorumResponseHandler<Row>(responseCount, new ReadResponseResolver(command.table, responseCount));
+                    ReadResponseResolver resolver = new ReadResponseResolver(command.table, command.key, responseCount);
+                    QuorumResponseHandler<Row> qrhRepair = new QuorumResponseHandler<Row>(responseCount, resolver);
                     Message messageRepair = command.makeReadMessage();
                     MessagingService.instance.sendRR(messageRepair, commandEndPoints.get(i), qrhRepair);
                     if (repairResponseHandlers == null)
