diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java
index aca4e500..506b3c85 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/iapi/sql/PreparedStatement.java
@@ -102,6 +102,7 @@ void rePrepare(LanguageConnectionContext lcc)
 	 *
 	 * @param activation The activation containing all the local state
 	 *		to execute the plan.
+     * @param forMetaData true if this is a meta-data query
      * @param timeoutMillis timeout value in milliseconds.
 	 *
 	 * @return	A ResultSet for a statement. A ResultSet represents
@@ -112,6 +113,7 @@ void rePrepare(LanguageConnectionContext lcc)
 	 * @exception StandardException		Thrown on failure
 	 */
     ResultSet execute(Activation activation,
+                      boolean forMetaData,
                       long timeoutMillis)
         throws StandardException;
 
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
index fd4ec2ca..8d1758a9 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/jdbc/EmbedStatement.java
@@ -1341,7 +1341,8 @@ boolean executeStatement(Activation a,
 				//and clear existing result sets in case this has been cached
 				a.reset();
 				a.setMaxRows(maxRows);
-                ResultSet resultsToWrap = ps.execute(a, timeoutMillis);
+                ResultSet resultsToWrap =
+                        ps.execute(a, forMetaData, timeoutMillis);
                 addWarning(ps.getCompileTimeWarnings());
 				addWarning(a.getWarnings());
 
diff --git a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
index ce1f50d3..c2b8b503 100644
--- a/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
+++ b/db/derby/code/branches/10.10/java/engine/org/apache/derby/impl/sql/GenericPreparedStatement.java
@@ -241,8 +241,13 @@ private boolean isUpToDate() {
 
 	public void rePrepare(LanguageConnectionContext lcc) 
 		throws StandardException {
+        rePrepare(lcc, false);
+    }
+
+    public void rePrepare(LanguageConnectionContext lcc, boolean forMetaData)
+        throws StandardException {
 		if (!upToDate()) {
-			PreparedStatement ps = statement.prepare(lcc);
+            PreparedStatement ps = statement.prepare(lcc, forMetaData);
 
 			if (SanityManager.DEBUG)
 				SanityManager.ASSERT(ps == this, "ps != this");
@@ -305,7 +310,7 @@ public ResultSet executeSubStatement(LanguageConnectionContext lcc,
 		Activation a = getActivation(lcc, false);
 		a.setSingleExecution();
 		lcc.setupSubStatementSessionContext(parent);
-		return executeStmt(a, rollbackParentContext, timeoutMillis);
+        return executeStmt(a, rollbackParentContext, false, timeoutMillis);
 	}
 
 	/**
@@ -319,7 +324,8 @@ public ResultSet executeSubStatement(Activation parent,
 	{
 		parent.getLanguageConnectionContext().
 			setupSubStatementSessionContext(parent);
-		return executeStmt(activation, rollbackParentContext, timeoutMillis);
+        return executeStmt(activation, rollbackParentContext,
+                           false, timeoutMillis);
 	}
 
 
@@ -327,10 +333,11 @@ public ResultSet executeSubStatement(Activation parent,
 	 * @see PreparedStatement#execute
 	 */
 	public ResultSet execute(Activation activation,
+                             boolean forMetaData,
 							 long timeoutMillis)
 			throws StandardException
 	{
-		return executeStmt(activation, false, timeoutMillis);
+        return executeStmt(activation, false, forMetaData, timeoutMillis);
 	}
 
 
@@ -341,6 +348,7 @@ public ResultSet execute(Activation activation,
 	  * @param rollbackParentContext True if 1) the statement context is
 	  *  NOT a top-level context, AND 2) in the event of a statement-level
 	  *	 exception, the parent context needs to be rolled back, too.
+      * @param forMetaData true if this is a meta-data query
       * @param timeoutMillis timeout value in milliseconds.
 	  *	@return	the result set to be pawed through
 	  *
@@ -348,6 +356,7 @@ public ResultSet execute(Activation activation,
 	  */
     private ResultSet executeStmt(Activation activation,
 								  boolean rollbackParentContext,
+                                  boolean forMetaData,
 								  long timeoutMillis)
         throws
             StandardException 
@@ -422,7 +431,7 @@ private ResultSet executeStmt(Activation activation,
 			// to execute.  That exception will be caught by the executeSPS()
 			// method of the GenericTriggerExecutor class, and at that time
 			// the SPS action will be recompiled correctly.
-                rePrepare(lccToUse);
+                rePrepare(lccToUse, forMetaData);
 			}
 
 			StatementContext statementContext = lccToUse.pushStatementContext(
diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java
index 8f25ec13..8f916a75 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/BasicSetup.java
@@ -20,16 +20,19 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 */
 package org.apache.derbyTesting.functionTests.tests.upgradeTests;
 
+import java.sql.Connection;
 import java.sql.DatabaseMetaData;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;
 import java.util.ArrayList;
+import javax.sql.DataSource;
 
 import org.apache.derby.catalog.SystemProcedures;
 import org.apache.derbyTesting.functionTests.util.streams.LoopingAlphabetStream;
 import org.apache.derbyTesting.junit.JDBC;
+import org.apache.derbyTesting.junit.JDBCDataSource;
 import org.apache.derbyTesting.junit.TestConfiguration;
 import org.apache.derbyTesting.junit.XML;
 
@@ -1958,4 +1961,62 @@ public void testDERBY6314() throws SQLException {
         // PH_SOFT_UPGRADE phase or the PH_HARD_UPGRADE phase.
         JDBC.assertDrainResults(getConnection().getMetaData().getSchemas());
     }
+
+    /**
+     * Verify that recompilation of a stale meta-data query works in soft
+     * upgrade. Before DERBY-4753, it used to fail with a syntax error
+     * because the recompilation didn't accept internal syntax.
+     */
+    public void testDERBY4753() throws SQLException {
+        // Use a separate database for this test case because
+        // 1) we set a database property that we don't want the other test
+        //    cases to see
+        // 2) we want to start with an empty database so that the schema
+        //    changes we make are considered significant enough to make the
+        //    plans stale (in an already populated database, larger changes
+        //    are needed to make the plans stale)
+        final DataSource ds = JDBCDataSource.getDataSourceLogical("DERBY-4753");
+
+        if (getPhase() == PH_CREATE) {
+            // Create the database with the old version and set the stale
+            // plan check interval as low as possible to make the test reach
+            // the stale plan check earlier.
+            JDBCDataSource.setBeanProperty(ds, "createDatabase", "create");
+            Connection c = ds.getConnection();
+            Statement s = c.createStatement();
+            s.execute("call syscs_util.syscs_set_database_property("
+                    + "'derby.language.stalePlanCheckInterval', '5')");
+            s.close();
+            c.close();
+        } else if (getPhase() == PH_SOFT_UPGRADE) {
+            Connection c = ds.getConnection();
+            DatabaseMetaData dmd = c.getMetaData();
+
+            // First make sure the getIndexInfo query is compiled.
+            JDBC.assertEmpty(dmd.getIndexInfo(null, null, "", true, true));
+
+            // Then make some schema changes so that the tables used by the
+            // getIndexInfo query grows so much that they will be recompiled
+            // on the next stale plan check.
+            Statement s = c.createStatement();
+            for (int i = 0; i < 10; i++) {
+                String sql = "create table s" + i + ".t(col0 int";
+                for (int j = 1; j < 1000; j++) {
+                    sql += ", col" + j + " int";
+                }
+                sql += ')';
+                s.execute(sql);
+            }
+            s.close();
+
+            // Finally execute getIndexInfo() as many times as needed to
+            // reach the stale plan check interval so that it is recompiled.
+            // The fifth call used to fail with a syntax error.
+            for (int i = 0; i < 5; i++) {
+                JDBC.assertEmpty(dmd.getIndexInfo(null, null, "", true, true));
+            }
+
+            c.close();
+        }
+    }
 }
diff --git a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeRun.java b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeRun.java
index 0c124b03..e51af8b5 100644
--- a/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeRun.java
+++ b/db/derby/code/branches/10.10/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/UpgradeRun.java
@@ -68,6 +68,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
         new AdditionalDb("ENCRYPT_10_2",  true),
         new AdditionalDb("ROLES_10_5", false),
         new AdditionalDb("BUILTIN_10_9", false),
+        new AdditionalDb("DERBY-4753", true),
     };
     
     public static Test suite(final int[] version, boolean useCreateOnUpgrade) {
