diff --git a/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/types/SQLChar.java b/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/types/SQLChar.java
index d9612e5e..4c59262b 100644
--- a/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/types/SQLChar.java
+++ b/db/derby/code/branches/10.5/java/engine/org/apache/derby/iapi/types/SQLChar.java
@@ -1567,13 +1567,20 @@ public void setValue(
                 formatJDBCDate( cal, sb);
                 sb.append( ' ');
                 formatJDBCTime( cal, sb);
+                sb.append('.');
+
                 int micros = 
                     (theValue.getNanos() + SQLTimestamp.FRACTION_TO_NANO/2) / 
                         SQLTimestamp.FRACTION_TO_NANO;
 
-                if( micros > 0)
+                if (micros == 0)
+                {
+                    // Add a single zero after the decimal point to match
+                    // the format from Timestamp.toString().
+                    sb.append('0');
+                }
+                else if (micros > 0)
                 {
-                    sb.append( '.');
                     String microsStr = Integer.toString( micros);
                     if(microsStr.length() > SQLTimestamp.MAX_FRACTION_DIGITS)
                     {
@@ -1609,7 +1616,7 @@ private void formatJDBCDate( Calendar cal, StringBuffer sb)
     private void formatJDBCTime( Calendar cal, StringBuffer sb)
     {
         SQLTime.timeToString(
-            cal.get(Calendar.HOUR), 
+            cal.get(Calendar.HOUR_OF_DAY),
             cal.get(Calendar.MINUTE), 
             cal.get(Calendar.SECOND), 
             sb);
diff --git a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java
index b8b3431b..fae71023 100644
--- a/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java
+++ b/db/derby/code/branches/10.5/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DateTimeTest.java
@@ -21,11 +21,15 @@ Licensed to the Apache Software Foundation (ASF) under one
 */
 package org.apache.derbyTesting.functionTests.tests.lang;
 
+import java.sql.Date;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.ResultSetMetaData;
 import java.sql.SQLException;
 import java.sql.Statement;
+import java.sql.Time;
+import java.sql.Timestamp;
+import java.util.Calendar;
 
 import junit.framework.Test;
 import junit.framework.TestSuite;
@@ -910,6 +914,44 @@ public void testConvertFromString() throws SQLException{
         st.close();
     }
     
+    /**
+     * Regression test case for DERBY-4621, which caused the conversion of
+     * timestamp and time values to varchar to generate wrong results when
+     * a Calendar object was supplied.
+     */
+    public void testConversionToString() throws SQLException {
+        String timestampString = "2010-04-20 15:17:36.0";
+        String timeString = "15:17:36";
+        String dateString = "2010-04-20";
+
+        Timestamp ts = Timestamp.valueOf(timestampString);
+        Time t = Time.valueOf(timeString);
+        Date d = Date.valueOf(dateString);
+
+        PreparedStatement ps =
+                prepareStatement("VALUES CAST(? AS VARCHAR(40))");
+
+        ps.setTimestamp(1, ts);
+        JDBC.assertSingleValueResultSet(ps.executeQuery(), timestampString);
+
+        // Used to give wrong result - 2010-04-20 03:17:36
+        ps.setTimestamp(1, ts, Calendar.getInstance());
+        JDBC.assertSingleValueResultSet(ps.executeQuery(), timestampString);
+
+        ps.setTime(1, t);
+        JDBC.assertSingleValueResultSet(ps.executeQuery(), timeString);
+
+        // Used to give wrong result - 03:17:36
+        ps.setTime(1, t, Calendar.getInstance());
+        JDBC.assertSingleValueResultSet(ps.executeQuery(), timeString);
+
+        ps.setDate(1, d);
+        JDBC.assertSingleValueResultSet(ps.executeQuery(), dateString);
+
+        ps.setDate(1, d, Calendar.getInstance());
+        JDBC.assertSingleValueResultSet(ps.executeQuery(), dateString);
+    }
+    
     public void testConversion_Aggregates() throws SQLException{
         Statement st = createStatement();
         
