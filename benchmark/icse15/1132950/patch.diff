diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/SyntheticSerialVerUIDAdder.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/SyntheticSerialVerUIDAdder.java
index e69de29b..f6241f34 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/SyntheticSerialVerUIDAdder.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/SyntheticSerialVerUIDAdder.java
@@ -0,0 +1,37 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.proxy.impl.weaving;
+
+import org.objectweb.asm.commons.SerialVersionUIDAdder;
+
+class SyntheticSerialVerUIDAdder extends SerialVersionUIDAdder {
+
+  private WovenProxyAdapter wpa;
+  
+  public SyntheticSerialVerUIDAdder(WovenProxyAdapter cv) {
+    super(cv);
+    wpa = cv;
+  }
+
+  @Override
+  public void visitEnd() {
+    wpa.setSVUIDGenerated(!!!hasSVUID);
+    super.visitEnd();
+  }
+}
diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyAdapter.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyAdapter.java
index e4564566..7d822013 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyAdapter.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyAdapter.java
@@ -22,8 +22,8 @@
 
 import org.apache.aries.proxy.impl.NLS;
 import org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter;
-import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.ClassVisitor;
+import org.objectweb.asm.FieldVisitor;
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Type;
 import org.objectweb.asm.commons.Method;
@@ -31,7 +31,9 @@
 /**
  * Used to weave classes processed by the {@link ProxyWeavingHook}
  */
-public final class WovenProxyAdapter extends AbstractWovenProxyAdapter {
+final class WovenProxyAdapter extends AbstractWovenProxyAdapter {
+
+  private boolean sVUIDGenerated = false;
 
   public WovenProxyAdapter(ClassVisitor writer, String className,
       ClassLoader loader) {
@@ -56,6 +58,15 @@ protected final Type getDeclaringTypeForCurrentMethod() {
     return typeBeingWoven;
   }
 
+  @Override
+  public FieldVisitor visitField(int access, String name, String arg2,
+      String arg3, Object arg4) {
+    //If this sVUID is generated then make it synthetic
+    if(sVUIDGenerated && "serialVersionUID".equals(name)) 
+      access |= ACC_SYNTHETIC;
+    return super.visitField(access, name, arg2, arg3, arg4);
+  }
+
   @Override
   public void visitEnd() {
     //first we need to override all the methods that were on non-object parents
@@ -72,5 +83,9 @@ public void visitEnd() {
     super.visitEnd();
   }
   
+  public void setSVUIDGenerated(boolean b) {
+    sVUIDGenerated  = b;
+  }
+  
   
 }
diff --git a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyGenerator.java b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyGenerator.java
index fa489fb5..253cbac2 100644
--- a/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyGenerator.java
+++ b/aries/trunk/proxy/proxy-impl/src/main/java/org/apache/aries/proxy/impl/weaving/WovenProxyGenerator.java
@@ -22,13 +22,11 @@
 import static org.objectweb.asm.Opcodes.ACC_ENUM;
 import static org.objectweb.asm.Opcodes.ACC_INTERFACE;
 
-
 import org.apache.aries.proxy.impl.common.AbstractWovenProxyAdapter;
 import org.apache.aries.proxy.impl.common.OSGiFriendlyClassWriter;
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.ClassVisitor;
 import org.objectweb.asm.ClassWriter;
-import org.objectweb.asm.commons.SerialVersionUIDAdder;
 
 /**
  * This class is used to weave the bytes of a class into a proxyable class
@@ -45,10 +43,10 @@
     //maxs are fine (and faster)
     ClassWriter cWriter = new OSGiFriendlyClassWriter(cReader, AbstractWovenProxyAdapter.IS_AT_LEAST_JAVA_6 ? 
             ClassWriter.COMPUTE_FRAMES : ClassWriter.COMPUTE_MAXS, loader);
-    ClassVisitor weavingAdapter = new WovenProxyAdapter(cWriter, className, loader);
     
     //Wrap our outer layer to add the original SerialVersionUID if it was previously being defaulted
-    weavingAdapter = new SerialVersionUIDAdder(weavingAdapter);
+    ClassVisitor weavingAdapter = new SyntheticSerialVerUIDAdder(
+                               new WovenProxyAdapter(cWriter, className, loader));
     
     // If we are Java 1.6 + then we need to skip frames as they will be recomputed
     cReader.accept(weavingAdapter, AbstractWovenProxyAdapter.IS_AT_LEAST_JAVA_6 ? ClassReader.SKIP_FRAMES : 0);
diff --git a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxyTestClassSerializableWithSVUID.java b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxyTestClassSerializableWithSVUID.java
index e69de29b..5e55c83c 100644
--- a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxyTestClassSerializableWithSVUID.java
+++ b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/ProxyTestClassSerializableWithSVUID.java
@@ -0,0 +1,25 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.aries.blueprint.proxy;
+
+import java.io.Serializable;
+
+public class ProxyTestClassSerializableWithSVUID implements Serializable {
+  private static final long serialVersionUID = 5495891081675168306L;
+}
diff --git a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/WovenProxyGeneratorTest.java b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/WovenProxyGeneratorTest.java
index bb35cf61..34872fbb 100644
--- a/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/WovenProxyGeneratorTest.java
+++ b/aries/trunk/proxy/proxy-impl/src/test/java/org/apache/aries/blueprint/proxy/WovenProxyGeneratorTest.java
@@ -19,15 +19,13 @@
 package org.apache.aries.blueprint.proxy;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
-import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
-import java.io.IOException;
 import java.io.InputStream;
-import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.lang.reflect.Method;
 import java.net.URL;
@@ -78,7 +76,8 @@
     ProxyTestClassUnweavableChild.class, ProxyTestClassUnweavableSibling.class, ProxyTestClassInner.class, 
     ProxyTestClassStaticInner.class, ProxyTestClassUnweavableInnerChild.class, 
     ProxyTestClassUnweavableChildWithFinalMethodParent.class, 
-    ProxyTestClassUnweavableChildWithDefaultMethodWrongPackageParent.class, ProxyTestClassSerializable.class};
+    ProxyTestClassUnweavableChildWithDefaultMethodWrongPackageParent.class, 
+    ProxyTestClassSerializable.class, ProxyTestClassSerializableWithSVUID.class};
  
   private static final Map<String, byte[]> rawClasses = new HashMap<String, byte[]>();
   
@@ -257,7 +256,7 @@ public void testUnweavableSuper() throws Exception
   public void testUnweavableSuperWithNoNoargsAllTheWay() throws Exception
   {
     try {
-      Class<?> woven = getProxyClass(ProxyTestClassUnweavableSibling.class);
+      getProxyClass(ProxyTestClassUnweavableSibling.class);
       fail();
     } catch (RuntimeException re) {
       assertTrue(re.getCause() instanceof UnableToProxyException);
@@ -331,6 +330,18 @@ public void testSerialization() throws Exception {
     woven.getMethod("checkDeserialization", byte[].class, int.class).invoke(null, baos.toByteArray(), 5);
   }
   
+  @Test
+  public void testGeneratedSVUIDisSynthetic() throws Exception {
+    
+    Class<?> woven = getProxyClass(ProxyTestClassSerializable.class);
+    
+    assertTrue(woven.getDeclaredField("serialVersionUID").isSynthetic());
+    
+    woven = getProxyClass(ProxyTestClassSerializableWithSVUID.class);
+    
+    assertFalse(woven.getDeclaredField("serialVersionUID").isSynthetic());
+  }
+  
   @Override
   protected Object getProxyInstance(Class<?> proxyClass) {
     try {
