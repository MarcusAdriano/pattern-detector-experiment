diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetDatabaseMetaData40.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetDatabaseMetaData40.java
index 95a2df69..65b6a160 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetDatabaseMetaData40.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetDatabaseMetaData40.java
@@ -35,6 +35,26 @@ public NetDatabaseMetaData40(NetAgent netAgent, NetConnection netConnection) {
         super(netAgent,netConnection);
     }
     
+    /**
+     * Retrieves the major JDBC version number for this driver.
+     * @return JDBC version major number
+     * @exception SQLException if the connection is closed
+     */
+    public int getJDBCMajorVersion() throws SQLException {
+        checkForClosedConnection();
+        return 4;
+    }
+
+    /**
+     * Retrieves the minor JDBC version number for this driver.
+     * @return JDBC version minor number
+     * @exception SQLException if the connection is closed
+     */
+    public int getJDBCMinorVersion() throws SQLException {
+        checkForClosedConnection();
+        return 0;
+    }
+
     /**
      * Indicates whether or not this data source supports the SQL
      * <code>ROWID</code> type. Since Derby does not support the
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData40.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData40.java
index 4ef3ee1a..147a3b12 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData40.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedDatabaseMetaData40.java
@@ -38,6 +38,24 @@ public EmbedDatabaseMetaData40(EmbedConnection connection, String url) throws SQ
         this.url = url;
     }
    
+    /**
+     * Retrieves the major JDBC version number for this driver.
+     *
+     * @return JDBC version major number
+     */
+    public int getJDBCMajorVersion() {
+        return 4;
+    }
+
+    /**
+     * Retrieves the minor JDBC version number for this driver.
+     *
+     * @return JDBC version minor number
+     */
+    public int getJDBCMinorVersion() {
+        return 0;
+    }
+
     public RowIdLifetime getRowIdLifetime() throws SQLException {
         return RowIdLifetime.ROWID_UNSUPPORTED;
     }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/dbMetaDataJdbc30.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/dbMetaDataJdbc30.java
index 5e41c9e5..9e22a6a2 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/dbMetaDataJdbc30.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/dbMetaDataJdbc30.java
@@ -28,6 +28,7 @@
 import java.sql.Statement;
 
 import org.apache.derby.iapi.reference.JDBC30Translation;
+import org.apache.derby.iapi.services.info.JVMInfo;
 
 import org.apache.derby.tools.ij;
 import org.apache.derbyTesting.functionTests.util.TestUtil;
@@ -104,10 +105,7 @@ public static void main(String[] args) {
         met.supportsResultSetHoldability(JDBC30Translation.CLOSE_CURSORS_AT_COMMIT));
 
 			System.out.println();
-			System.out.println("getJDBCMajorVersion() : " + met.getJDBCMajorVersion());
-
-			System.out.println();
-			System.out.println("getJDBCMinorVersion() : " + met.getJDBCMinorVersion());
+			checkJDBCVersion(met);
 
 			System.out.println();
 			System.out.println("getSQLStateType() : " + met.getSQLStateType());
@@ -207,6 +205,37 @@ public static void dumpRS(ResultSet s) throws SQLException {
 		s.close();
 	}
 
+	/**
+	 * Check whether <code>getJDBCMajorVersion()</code> and
+	 * <code>getJDBCMinorVersion()</code> return the expected version numbers.
+	 * @param met the <code>DatabaseMetaData</code> object to test
+	 * @exception SQLException if a database error occurs
+	 */
+	private static void checkJDBCVersion(DatabaseMetaData met)
+		throws SQLException
+	{
+		final int major, minor;
+		if (TestUtil.isJCCFramework()) {
+			major = 3;
+			minor = 0;
+		} else if (JVMInfo.JDK_ID < JVMInfo.J2SE_16) {
+			major = 3;
+			minor = 0;
+		} else {
+			major = 4;
+			minor = 0;
+		}
+		System.out.print("getJDBCMajorVersion()/getJDBCMinorVersion() : ");
+		int maj = met.getJDBCMajorVersion();
+		int min = met.getJDBCMinorVersion();
+		if (major == maj && minor == min) {
+			System.out.println("AS EXPECTED");
+		} else {
+			System.out.println("GOT " + maj + "." + min +
+							   ", EXPECTED " + major + "." + minor);
+		}
+	}
+
 	/**
   	 * In order to be JDBC compliant, all metadata calls must return valid
      * results, even if it's an empty result set.  It should be considered
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java
index 7671f3ab..dc848503 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/util/TestUtil.java
@@ -737,18 +737,22 @@ private static String convertToHexString(byte [] buf)
 
 	/**
 		Get the JDBC version, inferring it from the driver.
-		We cannot use the JDBC DatabaseMetaData method
-		as it is not present in JDBC 2.0.
 	*/
 
 	public static int getJDBCMajorVersion(Connection conn)
 	{
 		try {
+			// DatabaseMetaData.getJDBCMajorVersion() was not part of JDBC 2.0.
+			// Check if setSavepoint() is present to decide whether the version
+			// is > 2.0.
 			conn.getClass().getMethod("setSavepoint", null);
-			return 3;
-		} catch (NoSuchMethodException e) {
-			return 2;
-		} catch (NoClassDefFoundError e2) {
+			DatabaseMetaData meta = conn.getMetaData();
+			Method method =
+				meta.getClass().getMethod("getJDBCMajorVersion", null);
+			return ((Number) method.invoke(meta, null)).intValue();
+		} catch (Throwable t) {
+			// Error probably means that either setSavepoint() or
+			// getJDBCMajorVersion() is not present. Assume JDBC 2.0.
 			return 2;
 		}
 
