diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/loader/JavabinLoader.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/loader/JavabinLoader.java
index d6671414..64b851f7 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/loader/JavabinLoader.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/handler/loader/JavabinLoader.java
@@ -70,7 +70,7 @@ private void parseAndLoadDocs(final SolrQueryRequest req, SolrQueryResponse rsp,
       private AddUpdateCommand addCmd = null;
 
       @Override
-      public void update(SolrInputDocument document, UpdateRequest updateRequest) {
+      public void update(SolrInputDocument document, UpdateRequest updateRequest, Integer commitWithin, Boolean overwrite) {
         if (document == null) {
           // Perhaps commit from the parameters
           try {
@@ -85,6 +85,13 @@ public void update(SolrInputDocument document, UpdateRequest updateRequest) {
           addCmd = getAddCommand(req, updateRequest.getParams());
         }
         addCmd.solrDoc = document;
+        if (commitWithin != null) {
+          addCmd.commitWithin = commitWithin;
+        }
+        if (overwrite != null) {
+          addCmd.overwrite = overwrite;
+        }
+        
         try {
           processor.processAdd(addCmd);
           addCmd.clear();
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java
index a5ece6f9..8d7afb8f 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest.java
@@ -22,12 +22,12 @@
 import java.io.IOException;
 import java.net.MalformedURLException;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import java.util.Collections;
 import java.util.concurrent.Callable;
 import java.util.concurrent.CompletionService;
 import java.util.concurrent.ExecutorCompletionService;
@@ -337,6 +337,24 @@ public void doTest() throws Exception {
     query(false, new Object[] {"q", "id:[1 TO 5]", CommonParams.DEBUG, CommonParams.RESULTS});
     query(false, new Object[] {"q", "id:[1 TO 5]", CommonParams.DEBUG, CommonParams.QUERY});
 
+    // try commitWithin
+    long before = cloudClient.query(new SolrQuery("*:*")).getResults().getNumFound();
+    ModifiableSolrParams params = new ModifiableSolrParams();
+    params.set("commitWithin", 10);
+    add(cloudClient, params , getDoc("id", 300));
+    
+    long timeout = System.currentTimeMillis() + 15000;
+    while (cloudClient.query(new SolrQuery("*:*")).getResults().getNumFound() != before + 1) {
+      if (timeout <= System.currentTimeMillis()) {
+        fail("commitWithin did not work");
+      }
+      Thread.sleep(100);
+    }
+    
+    for (SolrServer client : clients) {
+      assertEquals("commitWithin did not work", before + 1, client.query(new SolrQuery("*:*")).getResults().getNumFound());
+    }
+    
     // TODO: This test currently fails because debug info is obtained only
     // on shards with matches.
     // query("q","matchesnothing","fl","*,score", "debugQuery", "true");
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec.java b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec.java
index 5998eecc..4f781f0b 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/request/JavaBinUpdateRequestCodec.java
@@ -25,7 +25,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
-import java.util.Set;
 
 import org.apache.solr.common.SolrInputDocument;
 import org.apache.solr.common.params.ModifiableSolrParams;
@@ -60,9 +59,6 @@ public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOExcep
     }
     Iterator<SolrInputDocument> docIter = null;
 
-    if (updateRequest.getDocuments() != null) {
-      docIter = updateRequest.getDocuments().iterator();
-    }
     if(updateRequest.getDocIterator() != null){
       docIter = updateRequest.getDocIterator();
     }
@@ -70,10 +66,19 @@ public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOExcep
     Map<SolrInputDocument,Map<String,Object>> docMap = updateRequest.getDocumentsMap();
 
     nl.add("params", params);// 0: params
+    if (updateRequest.getDeleteByIdMap() != null) {
     nl.add("delByIdMap", updateRequest.getDeleteByIdMap());
+    }
     nl.add("delByQ", updateRequest.getDeleteQuery());
+
+    if (docMap != null) {
+      nl.add("docsMap", docMap.entrySet().iterator());
+    } else {
+      if (updateRequest.getDocuments() != null) {
+        docIter = updateRequest.getDocuments().iterator();
+      }
     nl.add("docs", docIter);
-    nl.add("docsMap", docMap);
+    }
     JavaBinCodec codec = new JavaBinCodec();
     codec.marshal(nl, os);
   }
@@ -92,7 +97,7 @@ public void marshal(UpdateRequest updateRequest, OutputStream os) throws IOExcep
   public UpdateRequest unmarshal(InputStream is, final StreamingUpdateHandler handler) throws IOException {
     final UpdateRequest updateRequest = new UpdateRequest();
     List<List<NamedList>> doclist;
-    Map<SolrInputDocument,Map<String,Object>>  docMap;
+    List<Entry<SolrInputDocument,Map<Object,Object>>>  docMap;
     List<String> delById;
     Map<String,Map<String,Object>> delByIdMap;
     List<String> delByQ;
@@ -132,9 +137,11 @@ public List readIterator(DataInputInputStream fis) throws IOException {
       }
 
       private List readOuterMostDocIterator(DataInputInputStream fis) throws IOException {
-        NamedList params = (NamedList) namedList[0].getVal(0);
+        NamedList params = (NamedList) namedList[0].get("params");
         updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));
         if (handler == null) return super.readIterator(fis);
+        Integer commitWithin = null;
+        Boolean overwrite = null;
         while (true) {
           Object o = readVal(fis);
           if (o == END_OBJ) break;
@@ -144,16 +151,24 @@ private List readOuterMostDocIterator(DataInputInputStream fis) throws IOExcepti
           } else if (o instanceof NamedList)  {
             UpdateRequest req = new UpdateRequest();
             req.setParams(new ModifiableSolrParams(SolrParams.toSolrParams((NamedList) o)));
-            handler.update(null, req);
+            handler.update(null, req, null, null);
+          } else if (o instanceof Map.Entry){
+            sdoc = (SolrInputDocument) ((Map.Entry) o).getKey();
+            Map p = (Map) ((Map.Entry) o).getValue();
+            if (p != null) {
+              commitWithin = (Integer) p.get(UpdateRequest.COMMIT_WITHIN);
+              overwrite = (Boolean) p.get(UpdateRequest.OVERWRITE);
+            }
           } else  {
+          
             sdoc = (SolrInputDocument) o;
           }
-          handler.update(sdoc, updateRequest);
+          handler.update(sdoc, updateRequest, commitWithin, overwrite);
         }
         return Collections.EMPTY_LIST;
       }
-    };
 
+    };
 
     codec.unmarshal(is);
     
@@ -161,6 +176,7 @@ private List readOuterMostDocIterator(DataInputInputStream fis) throws IOExcepti
     // must be loaded now
     if(updateRequest.getParams()==null) {
       NamedList params = (NamedList) namedList[0].get("params");
+      System.out.println("unmarchal params:" + params);
       if(params!=null) {
         updateRequest.setParams(new ModifiableSolrParams(SolrParams.toSolrParams(params)));
       }
@@ -169,32 +185,12 @@ private List readOuterMostDocIterator(DataInputInputStream fis) throws IOExcepti
     delByIdMap = (Map<String,Map<String,Object>>) namedList[0].get("delByIdMap");
     delByQ = (List<String>) namedList[0].get("delByQ");
     doclist = (List) namedList[0].get("docs");
-    docMap =  (Map<SolrInputDocument,Map<String,Object>>) namedList[0].get("docsMap");
+    docMap =  (List<Entry<SolrInputDocument,Map<Object,Object>>>) namedList[0].get("docsMap");
+    
+
+    // we don't add any docs, because they were already processed
+    // deletes are handled later, and must be passed back on the UpdateRequest
     
-    if (doclist != null && !doclist.isEmpty()) {
-      List<SolrInputDocument> solrInputDocs = new ArrayList<SolrInputDocument>();
-      for (Object o : doclist) {
-        if (o instanceof List) {
-          solrInputDocs.add(listToSolrInputDocument((List<NamedList>)o));
-        } else  {
-          solrInputDocs.add((SolrInputDocument)o);
-        }
-      }
-      updateRequest.add(solrInputDocs);
-    }
-    if (docMap != null && !docMap.isEmpty()) {
-      Set<Entry<SolrInputDocument,Map<String,Object>>> entries = docMap.entrySet();
-      for (Entry<SolrInputDocument,Map<String,Object>> entry : entries) {
-        Map<String,Object> map = entry.getValue();
-        Boolean overwrite = null;
-        Integer commitWithin = null;
-        if (map != null) {
-          overwrite = (Boolean) map.get(UpdateRequest.OVERWRITE);
-          commitWithin = (Integer) map.get(UpdateRequest.COMMIT_WITHIN);
-        }
-        updateRequest.add(entry.getKey(), commitWithin, overwrite);
-      }
-    }
     if (delById != null) {
       for (String s : delById) {
         updateRequest.deleteById(s);
@@ -204,7 +200,7 @@ private List readOuterMostDocIterator(DataInputInputStream fis) throws IOExcepti
       for (Map.Entry<String,Map<String,Object>> entry : delByIdMap.entrySet()) {
         Map<String,Object> params = entry.getValue();
         if (params != null) {
-          Long version = (Long) params.get("ver");
+          Long version = (Long) params.get(UpdateRequest.VER);
           updateRequest.deleteById(entry.getKey(), version);
         } else {
           updateRequest.deleteById(entry.getKey());
@@ -217,8 +213,8 @@ private List readOuterMostDocIterator(DataInputInputStream fis) throws IOExcepti
         updateRequest.deleteByQuery(s);
       }
     }
-    return updateRequest;
 
+    return updateRequest;
   }
 
   private SolrInputDocument listToSolrInputDocument(List<NamedList> namedList) {
@@ -242,6 +238,6 @@ private NamedList solrParamsToNamedList(SolrParams params) {
   }
 
   public static interface StreamingUpdateHandler {
-    public void update(SolrInputDocument document, UpdateRequest req);
+    public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean override);
   }
 }
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest.java b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest.java
index 81befbe1..154d7e09 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/client/solrj/request/UpdateRequest.java
@@ -47,7 +47,7 @@
  */
 public class UpdateRequest extends AbstractUpdateRequest {
   
-  private static final String VER = "ver";
+  public static final String VER = "ver";
   public static final String OVERWRITE = "ow";
   public static final String COMMIT_WITHIN = "cw";
   private Map<SolrInputDocument,Map<String,Object>> documents = null;
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec.java b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec.java
index f6e32286..d1ce33c4 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec.java
@@ -27,6 +27,7 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.util.*;
+import java.util.Map.Entry;
 import java.nio.ByteBuffer;
 
 /**
@@ -65,6 +66,7 @@
           SOLRINPUTDOC = 16,
           SOLRINPUTDOC_CHILDS = 17,
           ENUM_FIELD_VALUE = 18,
+          MAP_ENTRY = 19,
           // types that combine tag + length (or other info) in a single byte
           TAG_AND_LEN = (byte) (1 << 5),
           STR = (byte) (1 << 5),
@@ -227,6 +229,8 @@ public Object readVal(DataInputInputStream dis) throws IOException {
         return readSolrInputDocument(dis);
       case ENUM_FIELD_VALUE:
         return readEnumFieldValue(dis);
+      case MAP_ENTRY:
+        return readMapEntry(dis);
     }
 
     throw new RuntimeException("Unknown type " + tagByte);
@@ -286,6 +290,10 @@ public boolean writeKnownType(Object val) throws IOException {
       writeEnumFieldValue((EnumFieldValue) val);
       return true;
     }
+    if (val instanceof Map.Entry) {
+      writeMapEntry((Map.Entry)val);
+      return true;
+    }
     return false;
   }
 
@@ -481,6 +489,12 @@ public void writeEnumFieldValue(EnumFieldValue enumFieldValue) throws IOExceptio
     writeStr(enumFieldValue.toString());
   }
 
+  public void writeMapEntry(Entry<Object,Object> val) throws IOException {
+    writeTag(MAP_ENTRY);
+    writeVal(val.getKey());
+    writeVal(val.getValue());
+  }
+
   /**
    * read {@link EnumFieldValue} (int+string) from input stream
    * @param dis data input stream
@@ -492,6 +506,33 @@ public EnumFieldValue readEnumFieldValue(DataInputInputStream dis) throws IOExce
     return new EnumFieldValue(intValue, stringValue);
   }
 
+
+  public Map.Entry<Object,Object> readMapEntry(DataInputInputStream dis) throws IOException {
+    final Object key = readVal(dis);
+    final Object value = readVal(dis);
+    return new Map.Entry<Object,Object>() {
+
+      @Override
+      public Object getKey() {
+        return key;
+      }
+
+      @Override
+      public Object getValue() {
+        return value;
+      }
+      
+      @Override
+      public String toString() {
+        return "MapEntry[" + key.toString() + ":" + value.toString() + "]";
+      }
+
+      @Override
+      public Object setValue(Object value) {
+        throw new UnsupportedOperationException();
+      }};
+  }
+
   /**
    * write the string as tag+length, with length being the number of UTF-8 bytes
    */
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec.java b/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec.java
index 0dbb3bd2..9c976c1e 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec.java
@@ -86,7 +86,7 @@ public void simple() throws IOException {
     final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();
     JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {
       @Override
-      public void update(SolrInputDocument document, UpdateRequest req) {
+      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean overwrite) {
         Assert.assertNotNull(req.getParams());
         docs.add(document);
       }
@@ -137,7 +137,7 @@ public void testIteratable() throws IOException {
     final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();
     JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {
       @Override
-      public void update(SolrInputDocument document, UpdateRequest req) {
+      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean overwrite) {
         Assert.assertNotNull(req.getParams());
         docs.add(document);
       }
