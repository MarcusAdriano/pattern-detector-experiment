diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionReply.java b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionReply.java
index a5194f5a..bed9c8f2 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionReply.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/net/NetConnectionReply.java
@@ -189,18 +189,15 @@ protected void readXaForget(NetConnection conn) throws DisconnectException {
     private void parseRDBCMMreply(ConnectionCallbackInterface connection) throws DisconnectException {
         int peekCP = parseTypdefsOrMgrlvlovrs();
 
-        if (peekCP != CodePoint.ENDUOWRM && peekCP != CodePoint.SQLCARD) {
-            parseCommitError(connection);
-            return;
-        }
-
-        if (peekCP == CodePoint.ENDUOWRM) {
             parseENDUOWRM(connection);
             peekCP = parseTypdefsOrMgrlvlovrs();
-        }
 
+        if (peekCP == CodePoint.SQLCARD) {
         NetSqlca netSqlca = parseSQLCARD(null);
         connection.completeSqlca(netSqlca);
+        } else {
+            parseCommitError(connection);
+        }
     }
 
     // Parse the reply for the RDB Rollback Unit of Work Command.
@@ -208,16 +205,16 @@ private void parseRDBCMMreply(ConnectionCallbackInterface connection) throws Dis
     // for the rdbrllbck command.
     private void parseRDBRLLBCKreply(ConnectionCallbackInterface connection) throws DisconnectException {
         int peekCP = parseTypdefsOrMgrlvlovrs();
-        if (peekCP != CodePoint.ENDUOWRM) {
-            parseRollbackError();
-            return;
-        }
 
         parseENDUOWRM(connection);
         peekCP = parseTypdefsOrMgrlvlovrs();
 
+        if (peekCP == CodePoint.SQLCARD) {
         NetSqlca netSqlca = parseSQLCARD(null);
         connection.completeSqlca(netSqlca);
+        } else {
+            parseRollbackError();
+        }
     }
 
     // Parse the reply for the Exchange Server Attributes Command.
@@ -879,10 +876,15 @@ protected void parseCMDCHKRM() throws DisconnectException {
         netAgent_.setSvrcod(svrcod);
         NetSqlca netSqlca = parseSQLCARD(null); 
         netAgent_.netConnection_.completeSqlca(netSqlca); 
-        agent_.accumulateChainBreakingReadExceptionAndThrow(new DisconnectException(agent_,
+
+        agent_.accumulateChainBreakingReadExceptionAndThrow(
+            new DisconnectException(
+                agent_,
             new ClientMessageId(SQLState.DRDA_CONNECTION_TERMINATED),
-            msgutil_.getTextMessage(MessageId.CONN_DRDA_CMDCHKRM),
-            new Exception(netSqlca.getSqlErrmc()))); 
+                msgutil_.getTextMessage(
+                    MessageId.CONN_DRDA_CMDCHKRM),
+                new SqlException(agent_.logWriter_,
+                                 netSqlca)));
     }
 
 
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Derby5158Test.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Derby5158Test.java
index e69de29b..7c855f05 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Derby5158Test.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/Derby5158Test.java
@@ -0,0 +1,110 @@
+/*
+  Class org.apache.derbyTesting.functionTests.tests.jdbcapi.Derby5158Test
+
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to you under the Apache License, Version 2.0
+  (the "License"); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+
+  http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+
+*/
+package org.apache.derbyTesting.functionTests.tests.jdbcapi;
+
+import org.apache.derbyTesting.junit.BaseJDBCTestCase;
+import org.apache.derbyTesting.junit.TestConfiguration;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import java.sql.Statement;
+import java.sql.SQLException;
+import java.sql.ResultSet;
+
+
+public class Derby5158Test extends BaseJDBCTestCase
+{
+
+    public Derby5158Test(String name)
+    {
+        super(name);
+    }
+
+    protected static Test makeSuite(String name)
+    {
+        TestSuite suite = new TestSuite(name);
+
+        Test cst = TestConfiguration.defaultSuite(Derby5158Test.class);
+
+        suite.addTest(cst);
+
+        return suite;
+    }
+
+    public static Test suite()
+    {
+        String testName = "Derby5158Repro";
+
+        return makeSuite(testName);
+    }
+
+    protected void setUp()
+            throws java.lang.Exception {
+        super.setUp();
+        setAutoCommit(false);
+    }
+
+
+    /**
+     * DERBY-5158
+     */
+    public void testCommitRollbackAfterShutdown() throws SQLException {
+
+        Statement s = createStatement();
+        ResultSet rs = s.executeQuery("select 1 from sys.systables");
+        rs.close();
+        s.close(); // just so we have a transaction, otherwise the commit is
+                   // short-circuited in the client.
+
+        TestConfiguration.getCurrent().shutdownDatabase();
+
+        try {
+            commit();
+        } catch (SQLException e) {
+            if (usingEmbedded()) {
+                assertSQLState("08003", e);
+            } else {
+                // Before DERBY-5158, we saw "58009" instead with c/s.
+                assertSQLState("08006", e);
+            }
+        }
+
+
+        // bring db back up and start a transaction
+        s = createStatement();
+        rs = s.executeQuery("select 1 from sys.systables");
+        rs.close();
+        s.close(); 
+
+        TestConfiguration.getCurrent().shutdownDatabase();
+
+        try {
+            rollback();
+        } catch (SQLException e) {
+            if (usingEmbedded()) {
+                assertSQLState("08003", e);
+            } else {
+                // Before DERBY-5158, we saw "58009" instead with c/s.
+                assertSQLState("08006", e);
+            }
+        }
+    }
+}
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/_Suite.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/_Suite.java
index 3698641b..dfadf48c 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/_Suite.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/_Suite.java
@@ -50,6 +50,7 @@ public static Test suite() {
 		suite.addTest(ConcurrencyTest.suite());
         suite.addTest(DaylightSavingTest.suite());
 		suite.addTest(HoldabilityTest.suite());
+        suite.addTest(Derby5158Test.suite());
 		suite.addTest(LobLengthTest.suite()); 
 		suite.addTest(ProcedureTest.suite());
 		suite.addTest(SURQueryMixTest.suite());
