diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/common/AbstractJob.java b/mahout/trunk/core/src/main/java/org/apache/mahout/common/AbstractJob.java
index 090e43ae..0d90b40e 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/common/AbstractJob.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/common/AbstractJob.java
@@ -59,7 +59,6 @@
 
 import com.google.common.base.Preconditions;
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
-import org.apache.lucene.util.Version;
 
 /**
  * <p>Superclass of many Mahout Hadoop "jobs". A job drives configuration and launch of one or
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/common/lucene/AnalyzerUtils.java b/mahout/trunk/core/src/main/java/org/apache/mahout/common/lucene/AnalyzerUtils.java
index 5f1f85b0..56921780 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/common/lucene/AnalyzerUtils.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/common/lucene/AnalyzerUtils.java
@@ -30,16 +30,15 @@
   /**
    * Create an Analyzer using the latest {@link org.apache.lucene.util.Version}.  Note, if you need to pass in parameters
    * to your constructor, you will need to wrap it in an implementation that does not take any arguments
-   * @param analyzerClassName
-   * @return
-   * @throws ClassNotFoundException
+   * @param analyzerClassName - Lucene Analyzer Name
+   * @return {@link Analyzer}
+   * @throws ClassNotFoundException - {@link ClassNotFoundException}
    */
   public static Analyzer createAnalyzer(String analyzerClassName) throws ClassNotFoundException {
     return createAnalyzer(analyzerClassName, Version.LUCENE_41);
   }
 
   public static Analyzer createAnalyzer(String analyzerClassName, Version version) throws ClassNotFoundException {
-    Analyzer analyzer = null;
     Class<? extends Analyzer> analyzerClass = Class.forName(analyzerClassName).asSubclass(Analyzer.class);
     //TODO: GSI: Not sure I like this, many analyzers in Lucene take in the version
 
@@ -50,14 +49,14 @@ public static Analyzer createAnalyzer(String analyzerClassName, Version version)
    * Create an Analyzer using the latest {@link org.apache.lucene.util.Version}.  Note, if you need to pass in parameters
    * to your constructor, you will need to wrap it in an implementation that does not take any arguments
    * @param analyzerClass The Analyzer Class to instantiate
-   * @return
+   * @return {@link Analyzer}
    */
   public static Analyzer createAnalyzer(Class<? extends Analyzer> analyzerClass){
     return createAnalyzer(analyzerClass, Version.LUCENE_41);
   }
 
   public static Analyzer createAnalyzer(Class<? extends Analyzer> analyzerClass, Version version){
-    Analyzer analyzer = null;
+    Analyzer analyzer;
     if (analyzerClass == StandardAnalyzer.class) {
       Class<?>[] params = new Class<?>[1];
       params[0] = Version.class;
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/EncodingMapper.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/EncodingMapper.java
index 8fb3cb02..63ccea41 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/EncodingMapper.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/EncodingMapper.java
@@ -21,7 +21,6 @@
 import org.apache.hadoop.mapreduce.Mapper;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
-import org.apache.lucene.util.Version;
 import org.apache.mahout.common.ClassUtils;
 import org.apache.mahout.common.lucene.AnalyzerUtils;
 import org.apache.mahout.math.NamedVector;
@@ -45,7 +44,7 @@
   public static final String ENCODER_FIELD_NAME = "encoderFieldName";
   public static final String ENCODER_CLASS = "encoderClass";
   public static final String CARDINALITY = "cardinality";
-  private boolean sequentialVecs;
+  private boolean sequentialVectors;
   private boolean namedVectors;
   private FeatureVectorEncoder encoder;
   private int cardinality;
@@ -53,10 +52,10 @@
   @Override
   protected void setup(Context context) throws IOException, InterruptedException {
     Configuration conf = context.getConfiguration();
-    sequentialVecs = conf.getBoolean(USE_SEQUENTIAL, false);
+    sequentialVectors = conf.getBoolean(USE_SEQUENTIAL, false);
     namedVectors = conf.getBoolean(USE_NAMED_VECTORS, false);
     String analyzerName = conf.get(ANALYZER_NAME, StandardAnalyzer.class.getName());
-    Analyzer analyzer = null;
+    Analyzer analyzer;
     try {
       analyzer = AnalyzerUtils.createAnalyzer(analyzerName);
     } catch (ClassNotFoundException e) {
@@ -79,7 +78,7 @@ protected void setup(Context context) throws IOException, InterruptedException {
   @Override
   protected void map(Text key, Text value, Context context) throws IOException, InterruptedException {
     Vector vector;
-    if (sequentialVecs) {
+    if (sequentialVectors) {
       vector = new SequentialAccessSparseVector(cardinality);
     } else {
       vector = new RandomAccessSparseVector(cardinality);
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java
index 440bd2c9..90e33df8 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/SparseVectorsFromSequenceFiles.java
@@ -33,7 +33,6 @@
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.mahout.common.AbstractJob;
-import org.apache.mahout.common.ClassUtils;
 import org.apache.mahout.common.CommandLineUtil;
 import org.apache.mahout.common.HadoopUtil;
 import org.apache.mahout.common.Pair;
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/CollocDriver.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/CollocDriver.java
index 7d6a4f24..a07ddbd7 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/CollocDriver.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/collocations/llr/CollocDriver.java
@@ -35,7 +35,6 @@
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
 import org.apache.mahout.common.AbstractJob;
-import org.apache.mahout.common.ClassUtils;
 import org.apache.mahout.common.HadoopUtil;
 import org.apache.mahout.common.commandline.DefaultOptionCreator;
 import org.apache.mahout.common.lucene.AnalyzerUtils;
diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/document/SequenceFileTokenizerMapper.java b/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/document/SequenceFileTokenizerMapper.java
index 9ec2f06f..dbe4157d 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/document/SequenceFileTokenizerMapper.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/vectorizer/document/SequenceFileTokenizerMapper.java
@@ -28,8 +28,6 @@
 import org.apache.lucene.analysis.standard.StandardAnalyzer;
 
 import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
-import org.apache.lucene.util.Version;
-import org.apache.mahout.common.ClassUtils;
 import org.apache.mahout.common.StringTuple;
 import org.apache.mahout.common.lucene.AnalyzerUtils;
 import org.apache.mahout.vectorizer.DocumentProcessor;
diff --git a/mahout/trunk/core/src/test/java/org/apache/mahout/vectorizer/collocations/llr/CollocMapperTest.java b/mahout/trunk/core/src/test/java/org/apache/mahout/vectorizer/collocations/llr/CollocMapperTest.java
index b4a58ac6..074faa6d 100644
--- a/mahout/trunk/core/src/test/java/org/apache/mahout/vectorizer/collocations/llr/CollocMapperTest.java
+++ b/mahout/trunk/core/src/test/java/org/apache/mahout/vectorizer/collocations/llr/CollocMapperTest.java
@@ -17,18 +17,11 @@
 
 package org.apache.mahout.vectorizer.collocations.llr;
 
-import java.io.Reader;
-import java.util.Collections;
-
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.io.Text;
 import org.apache.hadoop.mapred.Counters.Counter;
 import org.apache.hadoop.mapreduce.Mapper;
 import org.apache.hadoop.mapreduce.Mapper.Context;
-import org.apache.lucene.analysis.Analyzer;
-import org.apache.lucene.analysis.TokenStream;
-import org.apache.lucene.analysis.standard.StandardAnalyzer;
-import org.apache.lucene.util.Version;
 import org.apache.mahout.common.MahoutTestCase;
 import org.apache.mahout.common.StringTuple;
 import org.apache.mahout.vectorizer.collocations.llr.Gram.Type;
diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/text/MailArchivesClusteringAnalyzer.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/text/MailArchivesClusteringAnalyzer.java
index e765b63f..bdab2b93 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/text/MailArchivesClusteringAnalyzer.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/text/MailArchivesClusteringAnalyzer.java
@@ -19,10 +19,8 @@
 import java.io.IOException;
 import java.io.Reader;
 import java.util.Arrays;
-import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.TokenFilter;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.Tokenizer;
diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/text/wikipedia/WikipediaAnalyzer.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/text/wikipedia/WikipediaAnalyzer.java
index e413ee0f..a9cfb2b4 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/text/wikipedia/WikipediaAnalyzer.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/text/wikipedia/WikipediaAnalyzer.java
@@ -18,7 +18,6 @@
 package org.apache.mahout.text.wikipedia;
 
 import java.io.Reader;
-import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.TokenStream;
 import org.apache.lucene.analysis.Tokenizer;
 import org.apache.lucene.analysis.core.LowerCaseFilter;
diff --git a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java
index 51c98df6..1b639793 100644
--- a/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java
+++ b/mahout/trunk/integration/src/main/java/org/apache/mahout/utils/vectors/lucene/LuceneIterator.java
@@ -19,7 +19,6 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.AbstractIterator;
-import org.apache.lucene.index.DocsEnum;
 import org.apache.lucene.index.IndexReader;
 import org.apache.lucene.index.Terms;
 import org.apache.lucene.index.TermsEnum;
@@ -51,11 +50,8 @@
   private final Set<String> idFieldSelector;
   private final TermInfo terminfo;
   private final double normPower;
-  private DocsEnum termDocs = null;
-
-
-  private int nextDocid;
 
+  private int nextDocId;
 
   private int numErrorDocs = 0;
   private int maxErrorDocs = 0;
@@ -70,7 +66,10 @@
    * @param indexReader {@link IndexReader} to read the documents from.
    * @param idField     field containing the id. May be null.
    * @param field       field to use for the Vector
+   * @param terminfo    terminfo
+   * @param weight      weight
    * @param normPower   the normalization value. Must be nonnegative, or {@link LuceneIterable#NO_NORMALIZING}
+   * @throws java.io.IOException - {@link java.io.IOException}
    */
   public LuceneIterator(IndexReader indexReader,
                         String idField,
@@ -82,8 +81,15 @@ public LuceneIterator(IndexReader indexReader,
   }
 
   /**
+   * @param indexReader {@link IndexReader} to read the documents from.
+   * @param idField    field containing the id. May be null.
+   * @param field      field to use for the Vector
+   * @param terminfo   terminfo
+   * @param weight     weight
+   * @param normPower  the normalization value. Must be nonnegative, or {@link LuceneIterable#NO_NORMALIZING}
    * @param maxPercentErrorDocs most documents that will be tolerated without a term freq vector. In [0,1].
    * @see #LuceneIterator(org.apache.lucene.index.IndexReader, String, String, org.apache.mahout.utils.vectors.TermInfo, org.apache.mahout.vectorizer.Weight, double)
+   * @throws java.io.IOException - {@link java.io.IOException}
    */
   public LuceneIterator(IndexReader indexReader,
                         String idField,
@@ -97,7 +103,7 @@ public LuceneIterator(IndexReader indexReader,
             "If specified normPower must be nonnegative", normPower);
     Preconditions.checkArgument(maxPercentErrorDocs >= 0.0 && maxPercentErrorDocs <= 1.0);
     if (idField != null) {
-      idFieldSelector = new TreeSet();
+      idFieldSelector = new TreeSet<String>();
       idFieldSelector.add(idField);
     } else {
       idFieldSelector = null; /*The field in the index  containing the index.  If
@@ -114,7 +120,7 @@ public LuceneIterator(IndexReader indexReader,
     this.terminfo = terminfo;
     this.normPower = normPower;
     this.weight = weight;
-    this.nextDocid = 0;
+    this.nextDocId = 0;
     this.maxErrorDocs = (int) (maxPercentErrorDocs * indexReader.numDocs());
   }
 
@@ -125,8 +131,8 @@ protected Vector computeNext() {
       Terms termFreqVector;
 
       do {
-        doc = this.nextDocid;
-        nextDocid++;
+        doc = this.nextDocId;
+        nextDocId++;
 
         if (doc >= indexReader.maxDoc()) {
           return endOfData();
diff --git a/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/lucene/CachedTermInfoTest.java b/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/lucene/CachedTermInfoTest.java
index aaae5edb..847df5a9 100644
--- a/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/lucene/CachedTermInfoTest.java
+++ b/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/lucene/CachedTermInfoTest.java
@@ -13,11 +13,9 @@
 import org.apache.lucene.store.RAMDirectory;
 import org.apache.lucene.util.Version;
 import org.apache.mahout.utils.MahoutTestCase;
-import org.apache.mahout.utils.vectors.TermEntry;
 import org.junit.Test;
 
 import java.io.IOException;
-import java.util.Iterator;
 
 /**
  *
diff --git a/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/lucene/LuceneIterableTest.java b/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/lucene/LuceneIterableTest.java
index 47c5828e..e5671d41 100644
--- a/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/lucene/LuceneIterableTest.java
+++ b/mahout/trunk/integration/src/test/java/org/apache/mahout/utils/vectors/lucene/LuceneIterableTest.java
@@ -84,7 +84,7 @@ public void testIterable() throws Exception {
   }
 
   @Test(expected = IllegalStateException.class)
-  public void testIterable_noTermVectors() throws IOException {
+  public void testIterableNoTermVectors() throws IOException {
     RAMDirectory directory = createTestIndex(Field.TermVector.NO);
     IndexReader reader = DirectoryReader.open(directory);
     
@@ -99,7 +99,7 @@ public void testIterable_noTermVectors() throws IOException {
   }
 
   @Test
-  public void testIterable_someNoiseTermVectors() throws IOException {
+  public void testIterableSomeNoiseTermVectors() throws IOException {
     //get noise vectors
     RAMDirectory directory = createTestIndex(Field.TermVector.YES, new RAMDirectory(), true, 0);
     //get real vectors
