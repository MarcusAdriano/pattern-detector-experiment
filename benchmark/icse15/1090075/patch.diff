diff --git a/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java b/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
index a6d64d86..34587e30 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/config/CFMetaData.java
@@ -814,7 +814,7 @@ else if (subcolumnComparator != DatabaseDescriptor.getComparator(cf_def.subcompa
             for (org.apache.cassandra.thrift.ColumnDef cdef : def.getColumn_metadata())
             {
                 org.apache.cassandra.db.migration.avro.ColumnDef tdef = new org.apache.cassandra.db.migration.avro.ColumnDef();
-                tdef.name = ByteBufferUtil.clone(cdef.BufferForName());
+                tdef.name = ByteBufferUtil.clone(cdef.bufferForName());
                 tdef.validation_class = cdef.getValidation_class();
                 tdef.index_name = cdef.getIndex_name();
                 tdef.index_type = cdef.getIndex_type() == null ? null : org.apache.cassandra.db.migration.avro.IndexType.valueOf(cdef.getIndex_type().name());
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraDaemon.java b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraDaemon.java
index c122992a..2fac1279 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraDaemon.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CassandraDaemon.java
@@ -22,6 +22,7 @@
 import java.net.InetSocketAddress;
 import java.util.concurrent.ExecutorService;
 
+import org.apache.thrift.server.TThreadPoolServer;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -132,21 +133,19 @@ public ThriftServer(InetAddress listenAddr, int listenPort)
             }
 
             // ThreadPool Server
-            CustomTThreadPoolServer.Options options = new CustomTThreadPoolServer.Options();
-            options.minWorkerThreads = DatabaseDescriptor.getRpcMinThreads();
-            options.maxWorkerThreads = DatabaseDescriptor.getRpcMaxThreads();
+            TThreadPoolServer.Args args = new TThreadPoolServer.Args(tServerSocket)
+                                          .minWorkerThreads(DatabaseDescriptor.getRpcMinThreads())
+                                          .maxWorkerThreads(DatabaseDescriptor.getRpcMaxThreads())
+                                          .inputTransportFactory(inTransportFactory)
+                                          .outputTransportFactory(outTransportFactory)
+                                          .inputProtocolFactory(tProtocolFactory)
+                                          .outputProtocolFactory(tProtocolFactory)
+                                          .processor(processor);
 
             ExecutorService executorService = new CleaningThreadPool(cassandraServer.clientState,
-                    options.minWorkerThreads,
-                    options.maxWorkerThreads);
-            serverEngine = new CustomTThreadPoolServer(new TProcessorFactory(processor),
-                    tServerSocket,
-                    inTransportFactory,
-                    outTransportFactory,
-                    tProtocolFactory,
-                    tProtocolFactory,
-                    options,
-                    executorService);
+                    args.minWorkerThreads,
+                    args.maxWorkerThreads);
+            serverEngine = new CustomTThreadPoolServer(args, executorService);
         }
 
         public void run()
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java
index 118c785b..2c5b4025 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/thrift/CustomTThreadPoolServer.java
@@ -23,6 +23,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
+import org.apache.thrift.server.TThreadPoolServer;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -55,38 +56,18 @@
     private volatile boolean stopped_;
 
     // Server options
-    private Options options_;
+    private TThreadPoolServer.Args args;
 
     //Track and Limit the number of connected clients
     private final AtomicInteger activeClients = new AtomicInteger(0);
     
-    // Customizable server options
-    public static class Options
-    {
-        public int minWorkerThreads = 5;
-        public int maxWorkerThreads = Integer.MAX_VALUE;
-        public int stopTimeoutVal = 60;
-        public TimeUnit stopTimeoutUnit = TimeUnit.SECONDS;
-    }
-
 
-    public CustomTThreadPoolServer(TProcessorFactory tProcessorFactory,
-                                   TServerSocket tServerSocket,
-                                   TTransportFactory inTransportFactory,
-                                   TTransportFactory outTransportFactory,
-                                   TProtocolFactory tProtocolFactory,
-                                   TProtocolFactory tProtocolFactory2,
-                                   Options options,
-                                   ExecutorService executorService)
-    {
-
-        super(tProcessorFactory, tServerSocket, inTransportFactory, outTransportFactory,
-              tProtocolFactory, tProtocolFactory2);
-        options_ = options;
+    public CustomTThreadPoolServer(TThreadPoolServer.Args args, ExecutorService executorService) {
+        super(args);
         executorService_ = executorService;
+        this.args = args;
     }
 
-
     public void serve()
     {
         try
@@ -103,7 +84,7 @@ public void serve()
         while (!stopped_)
         {
             // block until we are under max clients
-            while (activeClients.get() >= options_.maxWorkerThreads)
+            while (activeClients.get() >= args.maxWorkerThreads)
             {
                 try
                 {
@@ -132,8 +113,8 @@ public void serve()
                 }
             }
 
-            if (activeClients.get() >= options_.maxWorkerThreads)
-                LOGGER.warn("Maximum number of clients " + options_.maxWorkerThreads + " reached");
+            if (activeClients.get() >= args.maxWorkerThreads)
+                LOGGER.warn("Maximum number of clients " + args.maxWorkerThreads + " reached");
         }
 
         executorService_.shutdown();
@@ -142,7 +123,7 @@ public void serve()
         // exception. If we don't do this, then we'll shut down prematurely. We want
         // to let the executorService clear it's task queue, closing client sockets
         // appropriately.
-        long timeoutMS = options_.stopTimeoutUnit.toMillis(options_.stopTimeoutVal);
+        long timeoutMS = args.stopTimeoutUnit.toMillis(args.stopTimeoutVal);
         long now = System.currentTimeMillis();
         while (timeoutMS >= 0)
         {
