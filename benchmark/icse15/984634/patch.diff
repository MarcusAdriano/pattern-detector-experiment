diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/AbstractVector.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/AbstractVector.java
index b5a8a647..c8c52f48 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/AbstractVector.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/AbstractVector.java
@@ -36,16 +36,22 @@ protected AbstractVector(int size) {
   }
 
   public double aggregate(BinaryFunction aggregator, UnaryFunction map) {
-    double result = 0.0;
-    for (int i=0; i < size; i++) {
-      result = aggregator.apply(result, map.apply(getQuick(i)) );
+    if (size < 1) {
+      throw new IllegalArgumentException("Cannot aggregate empty vector");
+    }
+    double result = map.apply(getQuick(0));
+    for (int i = 1; i < size; i++) {
+      result = aggregator.apply(result, map.apply(getQuick(i)));
     }
     return result;
   }
 
   public double aggregate(Vector other, BinaryFunction aggregator, BinaryFunction combiner) {
-    double result = 0.0;
-    for (int i=0; i < size; i++) {
+    if (size < 1) {
+      throw new IllegalArgumentException("Cannot aggregate empty vector");
+    }
+    double result = combiner.apply(getQuick(0), other.getQuick(0));
+    for (int i = 1; i < size; i++) {
       result = aggregator.apply(result, combiner.apply(getQuick(i), other.getQuick(i)));
     }
     return result;
diff --git a/mahout/trunk/math/src/test/java/org/apache/mahout/math/VectorTest.java b/mahout/trunk/math/src/test/java/org/apache/mahout/math/VectorTest.java
index 68373210..f4bd6e14 100644
--- a/mahout/trunk/math/src/test/java/org/apache/mahout/math/VectorTest.java
+++ b/mahout/trunk/math/src/test/java/org/apache/mahout/math/VectorTest.java
@@ -637,6 +637,33 @@ private static void doTestAggregation(Vector v, Vector w) {
         v.aggregate(w, Functions.plus, Functions.chain(Functions.pow(2), Functions.minus)));
   }
 
+  public static void testEmptyAggregate() {
+    assertEquals(1.0, new DenseVector(new double[]{1}).aggregate(Functions.min, Functions.identity));
+    assertEquals(1.0, new DenseVector(new double[]{2, 1}).aggregate(Functions.min, Functions.identity));
+
+    try {
+      new DenseVector(new double[]{}).aggregate(Functions.min, Functions.identity);
+      fail("Should have thrown exception with empty vector");
+    } catch (IllegalArgumentException e) {
+      // as it should be
+    }
+
+    assertEquals(3.0,
+            new DenseVector(new double[]{1}).aggregate(
+                    new DenseVector(new double[]{2}),
+                    Functions.min, Functions.plus));
+
+    try {
+      new DenseVector(new double[]{}).aggregate(
+              new DenseVector(new double[]{}),
+              Functions.min, Functions.plus);
+      
+      fail("Should have thrown exception with empty vector");
+    } catch (IllegalArgumentException e) {
+      // as it should be
+    }
+  }
+
   private static void setUpFirstVector(Vector v) {
     v.setQuick(1, 2);
     v.setQuick(2, 0.5);
