diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java
index 33f060f9..50e9d76a 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CompilerContextImpl.java
@@ -114,7 +114,9 @@ public void cleanupOnError(Throwable error) throws StandardException {
 			// so the cache doesn't get full of garbage input
 			// that won't even parse?
 
-			if (se.getSeverity() < ExceptionSeverity.SYSTEM_SEVERITY) 
+            int severity = se.getSeverity();
+
+			if (severity < ExceptionSeverity.SYSTEM_SEVERITY) 
 			{
 				if (currentDependent != null)
 				{
@@ -126,6 +128,9 @@ public void cleanupOnError(Throwable error) throws StandardException {
 			}
 			// anything system or worse, or non-DB errors,
 			// will cause the whole system to shut down.
+            
+            if (severity >= ExceptionSeverity.SESSION_SEVERITY)
+                popMe();
 		}
 
 	}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
index 8d963c71..3a89d52c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/conn/GenericLanguageConnectionContext.java
@@ -181,8 +181,8 @@ be more appropriate to have it in a separate context (LanguageTransactionContext
 	 * invocation, though we still push and pop it as needed.  All other
      * statement contexts will allocated and pushed and popped on demand.
      */
-	protected StatementContext[] statementContexts = new StatementContext[2];
-	protected int     statementDepth;
+	private final StatementContext[] statementContexts = new StatementContext[2];
+	private int     statementDepth;
 	protected int	  outermostTrigger = -1;
 
     protected Authorizer authorizer;
@@ -2037,9 +2037,14 @@ else if (statementDepth == 0)
 				if (statementDepth <= 0)
 					SanityManager.THROWASSERT(
 						"statement depth expected to be >0, was "+statementDepth);
+                
+                if (getContextManager().getContext(statementContext.getIdName()) != statementContext)
+                {
+                    SanityManager.THROWASSERT("trying to pop statement context from middle of stack");
+                }
 			}
 
-			getContextManager().getContext(org.apache.derby.iapi.reference.ContextId.LANG_STATEMENT).popMe();		
+            statementContext.popMe();		
 		}
 
 	}
@@ -2615,6 +2620,13 @@ public void cleanupOnError(Throwable error) throws StandardException {
 		if (statementContexts[0] != null)
 		{
 			statementContexts[0].clearInUse();
+            
+            // Force the StatementContext that's normally
+            // left on the stack for optimization to be popped
+            // when the session is closed. Ensures full cleanup
+            // and no hanging refrences in the ContextManager.
+            if (severity >= ExceptionSeverity.SESSION_SEVERITY)
+                statementContexts[0].popMe();
 		}
 		if (statementContexts[1] != null)
 		{
@@ -2624,7 +2636,7 @@ public void cleanupOnError(Throwable error) throws StandardException {
 		// closing the activations closes all the open cursors.
 		// the activations are, for all intents and purposes, the
 		// cursors.
-		if (severity == ExceptionSeverity.SESSION_SEVERITY) 
+		if (severity >= ExceptionSeverity.SESSION_SEVERITY) 
 		{
 			for (int i = acts.size() - 1; i >= 0; i--) {
 				// it maybe the case that a reset()/close() ends up closing
@@ -2636,11 +2648,7 @@ public void cleanupOnError(Throwable error) throws StandardException {
 				a.reset();
 				a.close();
 			}
-			popMe();
-		}
 
-		else if (severity > ExceptionSeverity.SESSION_SEVERITY)
-		{
 			popMe();
 		}
 
