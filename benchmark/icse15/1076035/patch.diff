diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/IndexSearcher.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/IndexSearcher.java
index 21de6cdc..f475e69b 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/IndexSearcher.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/IndexSearcher.java
@@ -456,13 +456,17 @@ protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,
       search(weight, filter, collector);
       return (TopFieldDocs) collector.topDocs();
     } else {
-      // TODO: make this respect fillFields
-      final FieldDocSortedHitQueue hq = new FieldDocSortedHitQueue(nDocs);
+      final TopFieldCollector topCollector = TopFieldCollector.create(sort, nDocs,
+                                                                      fillFields,
+                                                                      fieldSortDoTrackScores,
+                                                                      fieldSortDoMaxScore,
+                                                                      false);
+
       final Lock lock = new ReentrantLock();
       final ExecutionHelper<TopFieldDocs> runner = new ExecutionHelper<TopFieldDocs>(executor);
       for (int i = 0; i < subReaders.length; i++) { // search each sub
         runner.submit(
-                      new MultiSearcherCallableWithSort(lock, subSearchers[i], weight, filter, nDocs, hq, sort, i, docStarts));
+                      new MultiSearcherCallableWithSort(lock, subSearchers[i], weight, filter, nDocs, topCollector, sort, i, docStarts));
       }
       int totalHits = 0;
       float maxScore = Float.NEGATIVE_INFINITY;
@@ -472,11 +476,10 @@ protected TopFieldDocs search(Weight weight, Filter filter, int nDocs,
           maxScore = Math.max(maxScore, topFieldDocs.getMaxScore());
         }
       }
-      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];
-      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array
-        scoreDocs[i] = hq.pop();
 
-      return new TopFieldDocs(totalHits, scoreDocs, hq.getFields(), maxScore);
+      final TopFieldDocs topDocs = (TopFieldDocs) topCollector.topDocs();
+
+      return new TopFieldDocs(totalHits, topDocs.scoreDocs, topDocs.fields, topDocs.getMaxScore());
     }
   }
 
@@ -707,12 +710,12 @@ public TopDocs call() throws IOException {
     private final Filter filter;
     private final int nDocs;
     private final int i;
-    private final FieldDocSortedHitQueue hq;
+    private final TopFieldCollector hq;
     private final int[] starts;
     private final Sort sort;
 
     public MultiSearcherCallableWithSort(Lock lock, IndexSearcher searchable, Weight weight,
-        Filter filter, int nDocs, FieldDocSortedHitQueue hq, Sort sort, int i, int[] starts) {
+        Filter filter, int nDocs, TopFieldCollector hq, Sort sort, int i, int[] starts) {
       this.lock = lock;
       this.searchable = searchable;
       this.weight = weight;
@@ -724,6 +727,42 @@ public MultiSearcherCallableWithSort(Lock lock, IndexSearcher searchable, Weight
       this.sort = sort;
     }
 
+    private final class FakeScorer extends Scorer {
+      float score;
+      int doc;
+
+      public FakeScorer() {
+        super(null, null);
+      }
+    
+      @Override
+      public int advance(int target) {
+        throw new UnsupportedOperationException();
+      }
+
+      @Override
+      public int docID() {
+        return doc;
+      }
+
+      @Override
+      public float freq() {
+        throw new UnsupportedOperationException();
+      }
+
+      @Override
+      public int nextDoc() {
+        throw new UnsupportedOperationException();
+      }
+    
+      @Override
+      public float score() {
+        return score;
+      }
+    }
+
+    private final FakeScorer fakeScorer = new FakeScorer();
+
     public TopFieldDocs call() throws IOException {
       final TopFieldDocs docs = searchable.search (weight, filter, nDocs, sort);
       // If one of the Sort fields is FIELD_DOC, need to fix its values, so that
@@ -742,24 +781,16 @@ public TopFieldDocs call() throws IOException {
 
       lock.lock();
       try {
-        hq.setFields(docs.fields);
-      } finally {
-        lock.unlock();
+        hq.setNextReader(searchable.getIndexReader(), starts[i]);
+        hq.setScorer(fakeScorer);
+        for(ScoreDoc scoreDoc : docs.scoreDocs) {
+          fakeScorer.doc = scoreDoc.doc;
+          fakeScorer.score = scoreDoc.score;
+          hq.collect(scoreDoc.doc);
       }
-
-      final ScoreDoc[] scoreDocs = docs.scoreDocs;
-      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq
-        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];
-        fieldDoc.doc += starts[i]; // convert doc 
-        //it would be so nice if we had a thread-safe insert 
-        lock.lock();
-        try {
-          if (fieldDoc == hq.insertWithOverflow(fieldDoc))
-            break;
         } finally {
           lock.unlock();
         }
-      }
       return docs;
     }
   }
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestSort.java b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestSort.java
index ccc4fa1f..b62ab89f 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestSort.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestSort.java
@@ -451,13 +451,15 @@ public void setBottom(int bottom) {
       bottomValue = slotValues[bottom];
     }
 
-    @Override
-    public void setNextReader(IndexReader reader, int docBase) throws IOException {
-      docValues = FieldCache.DEFAULT.getInts(reader, "parser", new FieldCache.IntParser() {
+    private static final FieldCache.IntParser testIntParser = new FieldCache.IntParser() {
           public final int parseInt(final String val) {
             return (val.charAt(0)-'A') * 123456;
           }
-        });
+    };
+
+    @Override
+    public void setNextReader(IndexReader reader, int docBase) throws IOException {
+      docValues = FieldCache.DEFAULT.getInts(reader, "parser", testIntParser);
     }
 
     @Override
