diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/component/FacetComponent.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/component/FacetComponent.java
index 8b9d5992..6a6f8312 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/component/FacetComponent.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/handler/component/FacetComponent.java
@@ -107,10 +107,12 @@ public int distributedProcess(ResponseBuilder rb) throws IOException {
           String facetCommand;
           // add terms into the original facet.field command
           // do it via parameter reference to avoid another layer of encoding.
+
+          String termsKeyEncoded = QueryParsing.encodeLocalParamVal(termsKey);
           if (dff.localParams != null) {
-            facetCommand = commandPrefix+termsKey + " " + dff.facetStr.substring(2);
+            facetCommand = commandPrefix+termsKeyEncoded + " " + dff.facetStr.substring(2);
           } else {
-            facetCommand = commandPrefix+termsKey+'}'+dff.field;
+            facetCommand = commandPrefix+termsKeyEncoded+'}'+dff.field;
           }
 
           if (refinements == null) {
diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/search/QueryParsing.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/search/QueryParsing.java
index 14b2c18a..861f5328 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/search/QueryParsing.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/search/QueryParsing.java
@@ -166,15 +166,15 @@ static int parseLocalParams(String txt, int start, Map<String, String> target, S
         // saw equals, so read value
         p.pos++;
         ch = p.peek();
-        if (ch == '\"' || ch == '\'') {
-          val = p.getQuotedString();
-        } else if (ch == '$') {
+        boolean deref = false;
+        if (ch == '$') {
           p.pos++;
-          // dereference parameter
-          String pname = p.getId();
-          if (params != null) {
-            val = params.get(pname);
+          ch = p.peek();
+          deref = true;  // dereference whatever value is read by treating it as a variable name
           }
+
+        if (ch == '\"' || ch == '\'') {
+          val = p.getQuotedString();
         } else {
           // read unquoted literal ended by whitespace or '}'
           // there is no escaping.
@@ -191,11 +191,44 @@ static int parseLocalParams(String txt, int start, Map<String, String> target, S
             p.pos++;
           }
         }
+
+        if (deref) {  // dereference parameter
+          if (params != null) {
+            val = params.get(val);
+          }
+        }
       }
       if (target != null) target.put(id, val);
     }
   }
 
+  public static String encodeLocalParamVal(String val) {
+    int len = val.length();
+    int i = 0;
+    if (len > 0 && val.charAt(0) != '$') {
+      for (;i<len; i++) {
+        char ch = val.charAt(i);
+        if (Character.isWhitespace(ch) || ch=='}') break;
+      }
+    }
+
+    if (i>=len) return val;
+
+    // We need to enclose in quotes... but now we need to escape
+    StringBuilder sb = new StringBuilder(val.length() + 4);
+    sb.append('\'');
+    for (i=0; i<len; i++) {
+      char ch = val.charAt(i);
+      if (ch=='\'') {
+        sb.append('\\');
+      }
+      sb.append(ch);
+    }
+    sb.append('\'');
+    return sb.toString();
+  }
+  
+
   /**
    * "foo" returns null
    * "{!prefix f=myfield}yes" returns type="prefix",f="myfield",v="yes"
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/TestDistributedSearch.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/TestDistributedSearch.java
index 26d758ed..2500ac69 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/TestDistributedSearch.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/TestDistributedSearch.java
@@ -195,7 +195,8 @@ public void doTest() throws Exception {
     handle.put("facet_fields", SKIPVAL);    
     query("q","*:*", "rows",0, "facet","true", "facet.field",t1,"facet.limit",5, "facet.shard.limit",5);
     // check a complex key name
-   // query("q","*:*", "rows",0, "facet","true", "facet.field","{!key=a/b/c}"+t1,"facet.limit",5, "facet.shard.limit",5);
+    query("q","*:*", "rows",0, "facet","true", "facet.field","{!key='$a b/c \\' \\} foo'}"+t1,"facet.limit",5, "facet.shard.limit",5);
+    query("q","*:*", "rows",0, "facet","true", "facet.field","{!key='$a'}"+t1,"facet.limit",5, "facet.shard.limit",5);
     handle.remove("facet_fields");
 
 
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/TestQueryTypes.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/TestQueryTypes.java
index 879412df..a8d5615b 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/TestQueryTypes.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/search/TestQueryTypes.java
@@ -213,6 +213,14 @@ public void testQueryTypes() {
             ,"//result[@numFound='2']"
     );
 
+    // test wacky param names
+    assertQ(
+            req("q","{!prefix f=$a/b/c v=$'a b/c'}"
+                ,"a/b/c","v_t", "a b/c", "hel"
+            )
+            ,"//result[@numFound='2']"
+    );
+
     assertQ("test param subst with literal",
             req("q","{!prefix f=$myf v=$my.v}"
                 ,"myf","v_s", "my.v", "{!lit"
