diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/UpdatableBlobStream.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/UpdatableBlobStream.java
index efccd557..2adda0d5 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/UpdatableBlobStream.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/impl/jdbc/UpdatableBlobStream.java
@@ -192,7 +192,13 @@ public int read() throws IOException {
      */
     public int read(byte[] b, int off, int len) throws IOException {
         updateIfRequired();
-        int actualLength = (int) Math.min(len, maxPos - pos);
+        long remaining = maxPos - pos;
+        // Return EOF if the maximum allowed position has been reached,
+        // and we're trying to read at least one byte.
+        if (remaining == 0 && len > 0) {
+            return -1;
+        }
+        int actualLength = (int) Math.min(len, remaining);
         int retValue = stream.read(b, off, actualLength);
         if (retValue > 0)
             pos += retValue;
@@ -219,12 +225,7 @@ public int read(byte[] b, int off, int len) throws IOException {
      * @see java.io.InputStream#read(byte[])
      */
     public int read(byte[] b) throws IOException {
-        updateIfRequired();
-        int actualLength = (int) Math.min(b.length, maxPos - pos);
-        int retValue = stream.read(b, 0, actualLength);
-        if (retValue > 0)
-            pos += retValue;
-        return retValue;
+        return read(b, 0, b.length);
     }
 
     /**
diff --git a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java
index e929ce72..bf617087 100644
--- a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java
+++ b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/BlobTest.java
@@ -519,6 +519,22 @@ public void testGetBinaryStreamLongExceptionConditions()
         }
     }
 
+    /**
+     * Tests that draining a "sub-stream" from the Blob works.
+     * This is a repro for DERBY-4061, where we ended up with an infinite loop.
+     */
+    public void testGetBinaryStreamLongDrain()
+            throws IOException, SQLException {
+        initializeLongBlob(); // Ignoring id for now, use instance variable.
+        InputStream in = blob.getBinaryStream(2000, 5000);
+        byte[] buf = new byte[256];
+        while (in.read(buf, 0, buf.length) != -1) {
+            // This should end when we have read all the bytes in the stream.
+            // If the code hangs here, see DERBY-4061.
+        }
+        in.close();
+        blob.free();
+    }
     
     /**
      * Tests that the InputStream got from
