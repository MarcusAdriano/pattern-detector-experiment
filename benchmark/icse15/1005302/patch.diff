diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
index 2b3c3d89..601d4975 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliClient.java
@@ -1118,7 +1118,18 @@ private CfDef getCfDef(String ksname, String cfname)
         }
         else if (comparator instanceof IntegerType)
         {
-            return new BigInteger(column).toByteArray();
+            final BigInteger integerType;
+            
+            try
+            {
+                integerType =  new BigInteger(column);
+            }
+            catch (Exception e)
+            {
+                throw new RuntimeException("Column name '" + column + "' could not be translated into an IntegerType.");
+            }
+            
+            return integerType.toByteArray();
         }
         else if (comparator instanceof AsciiType)
         {
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliCompiler.java b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliCompiler.java
index b4408070..e86c22a4 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliCompiler.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliCompiler.java
@@ -77,9 +77,10 @@ public static CommonTree compileQuery(String query)
         }
         catch(Exception e)
         {
-            System.err.println("Exception " + e.getMessage());
-            e.printStackTrace(System.err);
+            // if there was an exception we don't want to process request any further
+            throw new RuntimeException(e.getMessage(), e);
         }
+        
         return queryTree;
     }
     /*
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliMain.java b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliMain.java
index 74aaac11..93ec8744 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliMain.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliMain.java
@@ -241,7 +241,8 @@ private static void processCLIStmt(String query)
         }
         catch (Exception e)
         {
-            css_.err.println("Exception " + e.getMessage());
+            css_.err.println((e.getCause() == null) ? e.getMessage() : e.getCause().getMessage());
+            
             if (css_.debug)
                 e.printStackTrace(css_.err);
             
@@ -286,7 +287,7 @@ public static void main(String args[]) throws IOException
             }
             catch (IOException exp)
             {
-                css_.err.printf("Unable to open %s for writing%n", historyFile);
+                css_.err.printf("Unable to open %s for writing %n", historyFile);
             }
         }
         else
diff --git a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliOptions.java b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliOptions.java
index f30d23f1..2d932876 100644
--- a/cassandra/trunk/src/java/org/apache/cassandra/cli/CliOptions.java
+++ b/cassandra/trunk/src/java/org/apache/cassandra/cli/CliOptions.java
@@ -38,6 +38,7 @@
     private static final String PASSWORD_OPTION = "password";
     private static final String KEYSPACE_OPTION = "keyspace";
     private static final String BATCH_OPTION = "batch";
+    private static final String HELP_OPTION = "help";
 
     // Default values for optional command line arguments
     private static final int    DEFAULT_THRIFT_PORT = 9160;
@@ -55,14 +56,13 @@
         options.addOption(PASSWORD_OPTION, true, "password for cassandra authentication");
         options.addOption(KEYSPACE_OPTION, true, "cassandra keyspace user is authenticated against");
         options.addOption(BATCH_OPTION, false, "enabled batch mode (supress output; errors are fatal)");
+        options.addOption(HELP_OPTION, false, "usage help.");
     }
 
     private static void printUsage()
     {
-        System.err.println("");
         System.err.println("Usage: cassandra-cli --host hostname [--port <portname>] [--unframed] [--debug]");
-        System.err.println("    [--username username] [--password password] [--keyspace keyspace] [--batch]");
-        System.err.println("");
+        System.err.println("\t[--username username] [--password password] [--keyspace keyspace] [--batch] [--help]");
     }
 
     public void processArgs(CliSessionState css, String[] args)
@@ -75,7 +75,7 @@ public void processArgs(CliSessionState css, String[] args)
         catch (ParseException e)
         {
             printUsage();
-            e.printStackTrace();
+            System.err.println("\n" + e.getMessage());
             System.exit(1);
         }
 
@@ -138,5 +138,11 @@ public void processArgs(CliSessionState css, String[] args)
         {
             css.batch = true;
         }
+
+        if (cmd.hasOption(HELP_OPTION))
+        {
+            printUsage();
+            System.exit(1);
+        }
     }
 }
