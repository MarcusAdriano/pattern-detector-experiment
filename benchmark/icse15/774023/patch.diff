diff --git a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index d6dffb22..9c242eba 100644
--- a/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/incubator/cassandra/trunk/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -83,7 +83,7 @@
     private AtomicReference<BinaryMemtable> binaryMemtable_;
 
     /* SSTables on disk for this column family */
-    private Set<String> ssTables_ = new HashSet<String>();
+    private Set<String> ssTables_ = new TreeSet<String>(new FileNameComparator(FileNameComparator.Descending));
 
     /* Modification lock used for protecting reads from compactions. */
     private ReentrantReadWriteLock lock_ = new ReentrantReadWriteLock(true);
@@ -557,20 +557,10 @@ public ColumnFamily getColumnFamily(String key, String columnFamilyColumn, IFilt
      */
     private void getColumnFamilyFromDisk(String key, String cf, List<ColumnFamily> columnFamilies, IFilter filter) throws IOException
     {
-        /* Scan the SSTables on disk first */
-        List<String> files = new ArrayList<String>();
         lock_.readLock().lock();
         try
         {
-            files.addAll(ssTables_);
-            Collections.sort(files, new FileNameComparator(FileNameComparator.Descending));
-        }
-        finally
-        {
-            lock_.readLock().unlock();
-        }
-
-        for (String file : files)
+            for (String file : ssTables_)
         {
             /*
              * Get the BloomFilter associated with this file. Check if the key
@@ -592,6 +582,11 @@ private void getColumnFamilyFromDisk(String key, String cf, List<ColumnFamily> c
             }
         }
     }
+        finally
+        {
+            lock_.readLock().unlock();
+        }
+    }
 
     private ColumnFamily fetchColumnFamily(String key, String cf, IFilter filter, String ssTableFile) throws IOException
     {
@@ -1423,7 +1418,6 @@ private int doFileCompaction(List<String> files, int minBufferSize) throws IOExc
             }
             if (newfile != null)
             {
-                logger_.debug("Inserting bloom filter for file " + newfile);
                 SSTable.storeBloomFilter(newfile, compactedBloomFilter);
                 ssTables_.add(newfile);
                 totalBytesWritten += (new File(newfile)).length();
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/CleanupHelper.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/CleanupHelper.java
index f50aa68f..6dc88c97 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/CleanupHelper.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/CleanupHelper.java
@@ -5,12 +5,12 @@
 import org.junit.BeforeClass;
 
 import org.apache.cassandra.config.DatabaseDescriptor;
-import org.apache.cassandra.db.ColumnFamilyStore;
-import org.apache.cassandra.db.CommitLog;
-import org.apache.cassandra.db.Table;
+import org.apache.log4j.Logger;
 
 public class CleanupHelper
 {
+    private static Logger logger = Logger.getLogger(CleanupHelper.class);
+
     @BeforeClass
     public static void cleanup()
     {
@@ -32,6 +32,7 @@ public static void cleanup()
             }
             for (File f : dir.listFiles())
             {
+                logger.debug("deleting " + f);
                 f.delete();
             }
         }
diff --git a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/NameSortTest.java b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/NameSortTest.java
index 07fda81a..064ac588 100644
--- a/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/NameSortTest.java
+++ b/incubator/cassandra/trunk/test/unit/org/apache/cassandra/db/NameSortTest.java
@@ -89,7 +89,7 @@ private void validateNameSort(Table table, int N) throws IOException
             }
 
             cf = table.get(key, "Super1");
-            assert cf != null;
+            assert cf != null : "key " + key + " is missing!";
             Collection<IColumn> superColumns = cf.getAllColumns();
             assert superColumns.size() == 8;
             for (IColumn superColumn : superColumns)
