diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/concurrent/Stage.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/concurrent/Stage.java
index 6c70ca16..e3506fd9 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/concurrent/Stage.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/concurrent/Stage.java
@@ -27,10 +27,11 @@
     MUTATION,
     STREAM,
     GOSSIP,
-    RESPONSE,
+    REQUEST_RESPONSE,
     ANTIENTROPY,
     MIGRATION,
-    MISC;
+    MISC,
+    INTERNAL_RESPONSE;
 
     public String getJmxType()
     {
@@ -41,10 +42,11 @@ public String getJmxType()
             case MIGRATION:
             case MISC:
             case STREAM:
+            case INTERNAL_RESPONSE:
                 return "internal";
             case MUTATION:
             case READ:
-            case RESPONSE:
+            case REQUEST_RESPONSE:
                 return "request";
             default:
                 throw new AssertionError("Unknown stage " + this);
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/concurrent/StageManager.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/concurrent/StageManager.java
index ac751816..d13586a7 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/concurrent/StageManager.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/concurrent/StageManager.java
@@ -42,7 +42,8 @@
     {
         stages.put(Stage.MUTATION, multiThreadedConfigurableStage(Stage.MUTATION, getConcurrentWriters()));
         stages.put(Stage.READ, multiThreadedConfigurableStage(Stage.READ, getConcurrentReaders()));        
-        stages.put(Stage.RESPONSE, multiThreadedStage(Stage.RESPONSE, Math.max(2, Runtime.getRuntime().availableProcessors())));
+        stages.put(Stage.REQUEST_RESPONSE, multiThreadedStage(Stage.REQUEST_RESPONSE, Math.max(2, Runtime.getRuntime().availableProcessors())));
+        stages.put(Stage.INTERNAL_RESPONSE, multiThreadedStage(Stage.INTERNAL_RESPONSE, Math.max(1, Runtime.getRuntime().availableProcessors())));
         // the rest are all single-threaded
         stages.put(Stage.STREAM, new JMXEnabledThreadPoolExecutor(Stage.STREAM));
         stages.put(Stage.GOSSIP, new JMXEnabledThreadPoolExecutor(Stage.GOSSIP));
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/SchemaCheckVerbHandler.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/SchemaCheckVerbHandler.java
index 04b3f268..8dddcb1b 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/SchemaCheckVerbHandler.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/db/SchemaCheckVerbHandler.java
@@ -31,11 +31,10 @@
 {
     private final Logger logger = LoggerFactory.getLogger(SchemaCheckVerbHandler.class);
     
-    @Override
     public void doVerb(Message message)
     {
         logger.debug("Received schema check request.");
-        Message response = message.getReply(FBUtilities.getLocalAddress(), DatabaseDescriptor.getDefsVersion().toString().getBytes());
+        Message response = message.getInternalReply(DatabaseDescriptor.getDefsVersion().toString().getBytes());
         MessagingService.instance.sendOneWay(response, message.getFrom());
     }
 }
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/BootStrapper.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/BootStrapper.java
index 38927ab3..f5481534 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/BootStrapper.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/dht/BootStrapper.java
@@ -254,7 +254,7 @@ public void doVerb(Message message)
         {
             StorageService ss = StorageService.instance;
             String tokenString = StorageService.getPartitioner().getTokenFactory().toString(ss.getBootstrapToken());
-            Message response = message.getReply(FBUtilities.getLocalAddress(), tokenString.getBytes(Charsets.UTF_8));
+            Message response = message.getInternalReply(tokenString.getBytes(Charsets.UTF_8));
             MessagingService.instance.sendOneWay(response, message.getFrom());
         }
     }
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java
index 37de7d57..3c9973bd 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/locator/DynamicEndpointSnitch.java
@@ -29,7 +29,6 @@
 import javax.management.MBeanServer;
 import javax.management.ObjectName;
 
-import org.apache.cassandra.dht.Token;
 import org.apache.cassandra.net.MessagingService;
 import org.apache.cassandra.service.StorageService;
 import org.apache.cassandra.utils.AbstractStatsDeque;
@@ -181,7 +180,7 @@ private void updateScores() // this is expensive
     {
         if (!registered)
         {
-       	    ILatencyPublisher handler = (ILatencyPublisher)MessagingService.instance.getVerbHandler(StorageService.Verb.READ_RESPONSE);
+       	    ILatencyPublisher handler = (ILatencyPublisher)MessagingService.instance.getVerbHandler(StorageService.Verb.REQUEST_RESPONSE);
             if (handler != null)
             {
                 handler.register(this);
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/net/Message.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/net/Message.java
index a06b00f7..4e1323ef 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/net/Message.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/net/Message.java
@@ -26,6 +26,7 @@
 import org.apache.cassandra.concurrent.Stage;
 import org.apache.cassandra.io.ICompactSerializer;
 import org.apache.cassandra.service.StorageService;
+import org.apache.cassandra.utils.FBUtilities;
 
 public class Message
 {
@@ -101,10 +102,16 @@ void setMessageId(String id)
     // TODO should take byte[] + length so we don't have to copy to a byte[] of exactly the right len
     public Message getReply(InetAddress from, byte[] args)
     {
-        Header header = new Header(getMessageId(), from, StorageService.Verb.READ_RESPONSE);
+        Header header = new Header(getMessageId(), from, StorageService.Verb.REQUEST_RESPONSE);
         return new Message(header, args);
     }
     
+    public Message getInternalReply(byte[] body)
+    {
+        Header header = new Header(getMessageId(), FBUtilities.getLocalAddress(), StorageService.Verb.INTERNAL_RESPONSE);
+        return new Message(header, body);
+    }
+
     public String toString()
     {
         StringBuilder sbuf = new StringBuilder("");
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/net/OutboundTcpConnectionPool.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/net/OutboundTcpConnectionPool.java
index b60220d2..77eb2fcf 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/net/OutboundTcpConnectionPool.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/net/OutboundTcpConnectionPool.java
@@ -42,7 +42,9 @@
     OutboundTcpConnection getConnection(Message msg)
     {
         Stage stage = msg.getMessageType();
-        return stage == Stage.RESPONSE || stage == Stage.GOSSIP ? ackCon : cmdCon;
+        return stage == Stage.REQUEST_RESPONSE || stage == Stage.INTERNAL_RESPONSE || stage == Stage.GOSSIP
+               ? ackCon
+               : cmdCon;
     }
 
     synchronized void reset()
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/ConsistencyChecker.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/ConsistencyChecker.java
index f1e180fd..e5c428bd 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/ConsistencyChecker.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/ConsistencyChecker.java
@@ -23,7 +23,6 @@
 import java.io.IOException;
 import java.net.InetAddress;
 import java.nio.ByteBuffer;
-import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
 import java.util.concurrent.LinkedBlockingQueue;
@@ -33,8 +32,6 @@
 
 import org.apache.commons.lang.StringUtils;
 
-import org.apache.cassandra.concurrent.Stage;
-import org.apache.cassandra.concurrent.StageManager;
 import org.apache.cassandra.config.DatabaseDescriptor;
 import org.apache.cassandra.db.ColumnFamily;
 import org.apache.cassandra.db.ReadCommand;
@@ -166,7 +163,7 @@ public DataRepairHandler(Row localRow, int responseCount, IResponseResolver<Row>
             ReadResponse.serializer().serialize(readResponse, out);
             byte[] bytes = new byte[out.getLength()];
             System.arraycopy(out.getData(), 0, bytes, 0, bytes.length);
-            responses_.add(new Message(FBUtilities.getLocalAddress(), StorageService.Verb.READ_RESPONSE, bytes));
+            responses_.add(new Message(FBUtilities.getLocalAddress(), StorageService.Verb.INTERNAL_RESPONSE, bytes));
         }
 
         // synchronized so the " == majority" is safe
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageLoadBalancer.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageLoadBalancer.java
index 52b7f1c9..47a5e73b 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageLoadBalancer.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageLoadBalancer.java
@@ -148,7 +148,7 @@ private boolean tryThisNode(int myLoad, int threshold, InetAddress target)
     {
         public void doVerb(Message message)
         {
-            Message reply = message.getReply(FBUtilities.getLocalAddress(), new byte[] {(byte)(isMoveable_.get() ? 1 : 0)});
+            Message reply = message.getInternalReply(new byte[] {(byte)(isMoveable_.get() ? 1 : 0)});
             MessagingService.instance.sendOneWay(reply, message.getFrom());
             if ( isMoveable_.get() )
             {
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageService.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageService.java
index 15466ca1..b2266b39 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageService.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/service/StorageService.java
@@ -145,7 +145,7 @@
         BINARY,
         READ_REPAIR,
         READ,
-        READ_RESPONSE,
+        REQUEST_RESPONSE, // client-initiated reads and writes
         STREAM_INITIATE, // Deprecated
         STREAM_INITIATE_DONE, // Deprecated
         STREAM_REPLY,
@@ -164,6 +164,7 @@
         SCHEMA_CHECK,
         INDEX_SCAN,
         REPLICATION_FINISHED,
+        INTERNAL_RESPONSE, // responses to internal calls
         ;
         // remember to add new verbs at the end, since we serialize by ordinal
     }
@@ -175,7 +176,7 @@
         put(Verb.BINARY, Stage.MUTATION);
         put(Verb.READ_REPAIR, Stage.MUTATION);
         put(Verb.READ, Stage.READ);
-        put(Verb.READ_RESPONSE, Stage.RESPONSE);
+        put(Verb.REQUEST_RESPONSE, Stage.REQUEST_RESPONSE);
         put(Verb.STREAM_REPLY, Stage.MISC); // TODO does this really belong on misc? I've just copied old behavior here
         put(Verb.STREAM_REQUEST, Stage.STREAM);
         put(Verb.RANGE_SLICE, Stage.READ);
@@ -191,6 +192,7 @@
         put(Verb.SCHEMA_CHECK, Stage.MIGRATION);
         put(Verb.INDEX_SCAN, Stage.READ);
         put(Verb.REPLICATION_FINISHED, Stage.MISC);
+        put(Verb.INTERNAL_RESPONSE, Stage.INTERNAL_RESPONSE);
     }};
 
 
@@ -284,7 +286,8 @@ public StorageService()
         MessagingService.instance.registerVerbHandlers(Verb.STREAM_REQUEST, new StreamRequestVerbHandler() );
         MessagingService.instance.registerVerbHandlers(Verb.STREAM_REPLY, new StreamReplyVerbHandler());
         MessagingService.instance.registerVerbHandlers(Verb.REPLICATION_FINISHED, new ReplicationFinishedVerbHandler());
-        MessagingService.instance.registerVerbHandlers(Verb.READ_RESPONSE, new ResponseVerbHandler());
+        MessagingService.instance.registerVerbHandlers(Verb.REQUEST_RESPONSE, new ResponseVerbHandler());
+        MessagingService.instance.registerVerbHandlers(Verb.INTERNAL_RESPONSE, new ResponseVerbHandler());
         MessagingService.instance.registerVerbHandlers(Verb.TREE_REQUEST, new TreeRequestVerbHandler());
         MessagingService.instance.registerVerbHandlers(Verb.TREE_RESPONSE, new AntiEntropyService.TreeResponseVerbHandler());
 
diff --git a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/streaming/ReplicationFinishedVerbHandler.java b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/streaming/ReplicationFinishedVerbHandler.java
index 3459d5eb..e8056032 100644
--- a/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/streaming/ReplicationFinishedVerbHandler.java
+++ b/cassandra/branches/cassandra-0.7/src/java/org/apache/cassandra/streaming/ReplicationFinishedVerbHandler.java
@@ -20,6 +20,7 @@
  * 
  */
 
+import org.apache.commons.lang.ArrayUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -36,7 +37,7 @@
     public void doVerb(Message msg)
     {
         StorageService.instance.confirmReplication(msg.getFrom());
-        Message response = msg.getReply(FBUtilities.getLocalAddress(), new byte[]{});
+        Message response = msg.getInternalReply(ArrayUtils.EMPTY_BYTE_ARRAY);
         if (logger.isDebugEnabled())
             logger.debug("Replying to " + msg.getMessageId() + "@" + msg.getFrom());
         MessagingService.instance.sendOneWay(response, msg.getFrom());
