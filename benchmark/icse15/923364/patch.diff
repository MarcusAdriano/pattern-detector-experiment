diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/ColumnFamilyStore.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
index ca1ff207..f121f21b 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/ColumnFamilyStore.java
@@ -118,6 +118,11 @@
     private LatencyTracker readStats_ = new LatencyTracker();
     private LatencyTracker writeStats_ = new LatencyTracker();
     
+    private long minRowCompactedSize = 0L;
+    private long maxRowCompactedSize = 0L;
+    private long rowsCompactedTotalSize = 0L;
+    private long rowsCompactedCount = 0L;
+    
     ColumnFamilyStore(String table, String columnFamilyName, boolean isSuper, int indexValue) throws IOException
     {
         table_ = table;
@@ -186,6 +191,34 @@
         ssTables_.add(sstables);
     }
 
+    public void addToCompactedRowStats(Long rowsize)
+    {
+        if (minRowCompactedSize < 1 || rowsize < minRowCompactedSize)
+            minRowCompactedSize = rowsize;
+        if (rowsize > maxRowCompactedSize)
+            maxRowCompactedSize = rowsize;
+        rowsCompactedCount++;
+        rowsCompactedTotalSize += rowsize;
+    }
+
+    public long getMinRowCompactedSize()
+    {
+        return minRowCompactedSize;
+    }
+
+    public long getMaxRowCompactedSize()
+    {
+        return maxRowCompactedSize;
+    }
+
+    public long getMeanRowCompactedSize()
+    {
+        if (rowsCompactedCount > 0)
+            return rowsCompactedTotalSize / rowsCompactedCount;
+        else
+            return 0L;
+    }
+
     public static ColumnFamilyStore createColumnFamilyStore(String table, String columnFamily) throws IOException
     {
         /*
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java
index 3576c2cb..801849f3 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/ColumnFamilyStoreMBean.java
@@ -118,4 +118,22 @@
      * invalidate the row cache; for use after bulk loading via BinaryMemtable
      */
     public void invalidateRowCache();
+
+    /**
+     * return the size of the smallest compacted row
+     * @return
+     */
+    public long getMinRowCompactedSize();
+
+    /**
+     * return the size of the largest compacted row
+     * @return
+     */
+    public long getMaxRowCompactedSize();
+
+    /**
+     * return the mean size of the rows compacted
+     * @return
+     */
+    public long getMeanRowCompactedSize();
 }
diff --git a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/CompactionManager.java b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/CompactionManager.java
index 23fb4ed9..f76dc1f0 100644
--- a/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/CompactionManager.java
+++ b/cassandra/branches/cassandra-0.6/src/java/org/apache/cassandra/db/CompactionManager.java
@@ -308,6 +308,7 @@ int doCompaction(ColumnFamilyStore cfs, Collection<SSTableReader> sstables, int
                 long rowsize = writer.getFilePointer() - prevpos;
                 if (rowsize > DatabaseDescriptor.getRowWarningThreshold())
                     logger.warn("Large row " + row.key.key + " in " + cfs.getColumnFamilyName() + " " + rowsize + " bytes");
+                cfs.addToCompactedRowStats(rowsize);
             }
             validator.complete();
         }
