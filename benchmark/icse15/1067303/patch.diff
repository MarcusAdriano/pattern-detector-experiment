diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ResultSetMiscTest.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ResultSetMiscTest.java
index 2b673316..184e0cd6 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ResultSetMiscTest.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/ResultSetMiscTest.java
@@ -21,7 +21,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 package org.apache.derbyTesting.functionTests.tests.jdbcapi;
 
-import java.sql.CallableStatement;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
@@ -35,6 +34,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derbyTesting.functionTests.util.SecurityCheck;
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
+import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
 import org.apache.derbyTesting.junit.TestConfiguration;
 import org.apache.derbyTesting.junit.Utilities;
 
@@ -463,14 +463,6 @@ public void testResultSetMetaData() throws SQLException {
     public void testBug4810() throws SQLException {
         Connection con = getConnection();
 
-        CallableStatement cs = con
-                .prepareCall("CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY(?, ?)");
-        cs.setString(1, "derby.locks.deadlockTimeout");
-        cs.setString(2, "3");
-        cs.execute();
-        cs.setString(1, "derby.locks.waitTimeout");
-        cs.setString(2, "3");
-        cs.close();
         Statement stmt = con.createStatement();
         stmt.executeUpdate("create table bug4810(i int, b int)");
         stmt
@@ -768,7 +760,11 @@ public static Test baseSuite(String name) {
         TestSuite suite = new TestSuite(name);
         suite.addTestSuite(ResultSetMiscTest.class);
 
-        return new CleanDatabaseTestSetup(suite) {
+        // Some test cases expect lock timeouts, so reduce the timeout to
+        // make the test go faster.
+        Test test = DatabasePropertyTestSetup.setLockTimeouts(suite, 1, 3);
+
+        return new CleanDatabaseTestSetup(test) {
             /**
              * Creates the table used in the test cases.
              * 
diff --git a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetTransactionIsolationTest.java b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetTransactionIsolationTest.java
index 6de55c20..6ca3e459 100644
--- a/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetTransactionIsolationTest.java
+++ b/db/derby/code/branches/10.4/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/SetTransactionIsolationTest.java
@@ -22,7 +22,6 @@ Licensed to the Apache Software Foundation (ASF) under one
  */
 package org.apache.derbyTesting.functionTests.tests.jdbcapi;
 
-import java.sql.CallableStatement;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
@@ -34,6 +33,7 @@ Licensed to the Apache Software Foundation (ASF) under one
 
 import org.apache.derbyTesting.junit.BaseJDBCTestCase;
 import org.apache.derbyTesting.junit.CleanDatabaseTestSetup;
+import org.apache.derbyTesting.junit.DatabasePropertyTestSetup;
 import org.apache.derbyTesting.junit.RuntimeStatisticsParser;
 import org.apache.derbyTesting.junit.SQLUtilities;
 import org.apache.derbyTesting.junit.TestConfiguration;
@@ -222,7 +222,11 @@ public static Test baseSuite(String name) {
         TestSuite suite = new TestSuite(name);
         suite.addTestSuite(SetTransactionIsolationTest.class);
 
-        return new CleanDatabaseTestSetup(suite) {
+        // Some test cases expect lock timeouts, so reduce the timeout to
+        // make the test go faster.
+        Test test = DatabasePropertyTestSetup.setLockTimeouts(suite, 1, 3);
+
+        return new CleanDatabaseTestSetup(test) {
 
             /**
              * Create and populate table
@@ -268,15 +272,6 @@ protected void decorateSQL(Statement s) throws SQLException {
                 s.executeUpdate("INSERT INTO T1 VALUES(3,'Third Hello')");
 
                 s.executeUpdate("create table t3 (i integer)");
-                
-
-                CallableStatement cs = conn
-                        .prepareCall("CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY (?, ?)");
-                cs.setString(1, "derby.locks.waitTimeout");
-                cs.setString(2, "3");
-                cs.execute();
-                cs.setString(1, "derby.locks.deadlockTimeout");
-                cs.setString(2, "3");
             }
 
         };
