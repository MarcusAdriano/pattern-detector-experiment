diff --git a/lucene/java/trunk/src/java/org/apache/lucene/util/OpenBitSet.java b/lucene/java/trunk/src/java/org/apache/lucene/util/OpenBitSet.java
index 1300bdf8..df5f8eb2 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/util/OpenBitSet.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/util/OpenBitSet.java
@@ -802,12 +802,16 @@ public boolean equals(Object o) {
 
   @Override
   public int hashCode() {
-      long h = 0x98761234;  // something non-zero for length==0
+    // Start with a zero hash and use a mix that results in zero if the input is zero.
+    // This effectively truncates trailing zeros without an explicit check.
+    long h = 0;
       for (int i = bits.length; --i>=0;) {
       h ^= bits[i];
       h = (h << 1) | (h >>> 63); // rotate left
     }
-    return (int)((h>>32) ^ h);  // fold leftmost bits into right
+    // fold leftmost bits into right and add a constant to prevent
+    // empty sets from returning 0, which is too common.
+    return (int)((h>>32) ^ h) + 0x98761234;
   }
 
 }
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/util/TestOpenBitSet.java b/lucene/java/trunk/src/test/org/apache/lucene/util/TestOpenBitSet.java
index 67551c8f..d556de89 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/util/TestOpenBitSet.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/util/TestOpenBitSet.java
@@ -230,7 +230,14 @@ public void testBitUtils()
     }
   }
 
-  
+  public void testHashCodeEquals() {
+    OpenBitSet bs1 = new OpenBitSet(200);
+    OpenBitSet bs2 = new OpenBitSet(64);
+    bs1.set(3);
+    bs2.set(3);       
+    assertEquals(bs1, bs2);
+    assertEquals(bs1.hashCode(), bs2.hashCode());
+  } 
 }
 
 
