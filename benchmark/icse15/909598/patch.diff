diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/lda/LDAMapper.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/lda/LDAMapper.java
index 00e18232..498d4ed8 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/lda/LDAMapper.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/clustering/lda/LDAMapper.java
@@ -26,6 +26,7 @@
 import org.apache.hadoop.io.WritableComparable;
 import org.apache.hadoop.mapreduce.Mapper;
 import org.apache.mahout.math.Vector;
+import org.apache.mahout.math.VectorWritable;
 
 /**
 * Runs inference on the input documents (which are
@@ -34,14 +35,15 @@
 * assignments.
 */
 public class LDAMapper extends 
-    Mapper<WritableComparable<?>, Vector, IntPairWritable, DoubleWritable> {
+    Mapper<WritableComparable<?>, VectorWritable, IntPairWritable, DoubleWritable> {
 
   private LDAState state;
   private LDAInference infer;
 
   @Override
-  public void map(WritableComparable<?> key, Vector wordCounts, Context context)
+  public void map(WritableComparable<?> key, VectorWritable wordCountsWritable, Context context)
       throws IOException, InterruptedException {
+    Vector wordCounts = wordCountsWritable.get();
     LDAInference.InferredDocument doc = infer.infer(wordCounts);
 
     double[] logTotals = new double[state.numTopics];
diff --git a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/lda/TestMapReduce.java b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/lda/TestMapReduce.java
index aed8f2d6..392f3606 100644
--- a/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/lda/TestMapReduce.java
+++ b/lucene/mahout/trunk/core/src/test/java/org/apache/mahout/clustering/lda/TestMapReduce.java
@@ -30,6 +30,7 @@
 import org.apache.mahout.math.Matrix;
 import org.apache.mahout.math.RandomAccessSparseVector;
 import org.apache.mahout.math.Vector;
+import org.apache.mahout.math.VectorWritable;
 import org.apache.mahout.common.RandomUtils;
 
 import static org.easymock.classextension.EasyMock.*;
@@ -93,7 +94,7 @@ public void testMapper() throws Exception {
     LDAState state = generateRandomState(100,NUM_TOPICS);
     LDAMapper mapper = new LDAMapper();
     mapper.configure(state);
-
+    VectorWritable vw = new VectorWritable();
     for(int i = 0; i < NUM_TESTS; ++i) {
       RandomAccessSparseVector v = generateRandomDoc(100,0.3);
       int myNumWords = numNonZero(v);
@@ -102,8 +103,8 @@ public void testMapper() throws Exception {
       mock.write(isA(IntPairWritable.class),isA(DoubleWritable.class));
       expectLastCall().times(myNumWords * NUM_TOPICS + NUM_TOPICS + 1);
       replay(mock);
-
-      mapper.map(new Text("tstMapper"), v, mock);
+      vw.set(v);
+      mapper.map(new Text("tstMapper"), vw, mock);
       verify(mock);
     }
   }
diff --git a/lucene/mahout/trunk/utils/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java b/lucene/mahout/trunk/utils/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java
index d8c1223b..57fe68da 100644
--- a/lucene/mahout/trunk/utils/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java
+++ b/lucene/mahout/trunk/utils/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java
@@ -136,10 +136,11 @@ public boolean accept(File file, String name) {
         Vector center = value.getCenter();
         String fmtStr = useJSON ? center.asFormatString() : VectorHelper
             .vectorToString(center, dictionary);
-        writer.append("Id: ").append(String.valueOf(value.getId())).append(":")
-            .append("name:").append(center.getName()).append(":").append(
-              fmtStr.substring(0, Math.min(subString, fmtStr.length())))
-            .append('\n');
+        writer.append("Id: ").append(String.valueOf(value.getId())).append(":");
+        writer.append("name:").append(center.getName());
+        if (subString > 0) writer.append(":").append(
+          fmtStr.substring(0, Math.min(subString, fmtStr.length())));
+        writer.append('\n');
         
         if (dictionary != null) {
           String topTerms = getTopFeatures(center, dictionary, 10);
@@ -308,7 +309,7 @@ public static void main(String[] args) throws IOException,
       if (termDictionary != null) {
         clusterDumper.setTermDictionary(termDictionary, dictionaryType);
       }
-      if (sub > 0) {
+      if (sub >= 0) {
         clusterDumper.setSubString(sub);
       }
       clusterDumper.printClusters();
