diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java
index cba85167..cd4f5fbd 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DD_Version.java
@@ -451,6 +451,19 @@ private	void	doFullUpgrade(TransactionController tc, int fromMajorVersionNumber,
             bootingDictionary.create_10_5_system_procedures(tc, newlyCreatedRoutines);
         }
 
+        // change the return type of SYSIBM.CLOBGETSUBSTRING if necessary. See
+        // DERBY-4214. That function was added in 10.3 and the return type was
+        // changed (but not upgraded) in 10.5. We can't distinguish
+        // between databases which were originally created by 10.5 and databases
+        // which were upgraded to 10.5.
+        if (
+            ( fromMajorVersionNumber > DataDictionary.DD_VERSION_DERBY_10_2) &&
+            ( fromMajorVersionNumber < DataDictionary.DD_VERSION_DERBY_10_6)
+            )
+        {
+            bootingDictionary.upgradeCLOBGETSUBSTRING_10_6( tc );
+        }
+        
         // Grant PUBLIC access to some system routines
         bootingDictionary.grantPublicAccessToSystemRoutines(newlyCreatedRoutines, tc, aid);
 	}
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
index 084e9bba..bf38ffa7 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
@@ -2410,6 +2410,77 @@ public void updateLockGranularity(TableDescriptor td, SchemaDescriptor schema,
 					 tc);
 	}
 
+	/**
+     * 10.6 upgrade logic to update the return type of SYSIBM.CLOBGETSUBSTRING. The length of the
+     * return type was changed in 10.5 but old versions of the metadata were not
+     * upgraded at that time. See DERBY-4214.
+     */
+    void upgradeCLOBGETSUBSTRING_10_6( TransactionController tc )
+        throws StandardException
+    {
+		TabInfoImpl          ti = getNonCoreTI(SYSALIASES_CATALOG_NUM);
+		ExecIndexRow         keyRow = exFactory.getIndexableRow(3);
+		DataValueDescriptor  aliasNameOrderable = new SQLVarchar( "CLOBGETSUBSTRING" );;
+		DataValueDescriptor	 nameSpaceOrderable = new SQLChar
+            ( new String( new char[] { AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR } ) );
+        
+		keyRow.setColumn(1, new SQLChar( SchemaDescriptor.SYSIBM_SCHEMA_UUID ));
+		keyRow.setColumn(2, aliasNameOrderable);
+		keyRow.setColumn(3, nameSpaceOrderable);
+
+        AliasDescriptor      oldAD = (AliasDescriptor) getDescriptorViaIndex
+            (
+             SYSALIASESRowFactory.SYSALIASES_INDEX1_ID,
+             keyRow,
+             (ScanQualifier [][]) null,
+             ti,
+             (TupleDescriptor) null,
+             (List) null,
+             true,
+             TransactionController.ISOLATION_REPEATABLE_READ,
+             tc);
+        RoutineAliasInfo   oldRai = (RoutineAliasInfo) oldAD.getAliasInfo();
+        TypeDescriptor     newReturnType = DataTypeDescriptor.getCatalogType( Types.VARCHAR, LOBStoredProcedure.MAX_CLOB_RETURN_LEN );
+        RoutineAliasInfo   newRai = new RoutineAliasInfo
+            (
+             oldRai.getMethodName(),
+             oldRai.getParameterCount(),
+             oldRai.getParameterNames(),
+             oldRai.getParameterTypes(),
+             oldRai.getParameterModes(),
+             oldRai.getMaxDynamicResultSets(),
+             oldRai.getParameterStyle(),
+             oldRai.getSQLAllowed(),
+             oldRai.isDeterministic(),
+             oldRai.calledOnNullInput(),
+             newReturnType
+             );
+        AliasDescriptor      newAD = new AliasDescriptor
+            (
+             this,
+             oldAD.getUUID(),
+             oldAD.getObjectName(),
+             oldAD.getSchemaUUID(),
+             oldAD.getJavaClassName(),
+             oldAD.getAliasType(),
+             oldAD.getNameSpace(),
+             oldAD.getSystemAlias(),
+             newRai,
+             oldAD.getSpecificName()
+             );
+        ExecRow             newRow = ti.getCatalogRowFactory().makeRow( newAD, null );
+
+		ti.updateRow
+            (
+             keyRow,
+             newRow, 
+             SYSALIASESRowFactory.SYSALIASES_INDEX1_ID,
+             new boolean[] { false, false, false },
+             (int[])null,
+             tc
+             );
+    }
+
 	/**
 	 * Drop all table descriptors for a schema.
 	 *
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_6.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_6.java
index f872063c..78f6ce5a 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_6.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Changes10_6.java
@@ -23,16 +23,22 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 import org.apache.derbyTesting.junit.SupportFilesSetup;
 
 import org.apache.derbyTesting.junit.JDBCDataSource;
+import java.lang.reflect.Method;
 import java.sql.SQLException;
 import java.sql.Statement;
 import java.sql.Connection;
 import java.sql.CallableStatement;
+import java.sql.ResultSet;
 
 import javax.sql.DataSource;
 
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
+import org.apache.derby.catalog.types.RoutineAliasInfo;
+import org.apache.derby.catalog.TypeDescriptor;
+
+
 /**
  * Upgrade test cases for 10.6.
  * If the old version is 10.6 or later then these tests
@@ -109,4 +115,95 @@ public void testSetXplainStyleProcedure() throws SQLException
         }
     }
 
+    /**
+     * Make sure that SYSIBM.CLOBGETSUBSTRING has the correct return value.
+     * See https://issues.apache.org/jira/browse/DERBY-4214
+     */
+    public void testCLOBGETSUBSTRING() throws Exception
+    {
+        Version initialVersion = new Version( getOldMajor(), getOldMinor(), 0, 0 );
+        Version firstVersionHavingThisFunction = new Version( 10, 3, 0, 0 );
+        Version firstVersionHavingCorrectReturnType = new Version( 10, 5, 0, 0 );
+        int     wrongLength = 32672;
+        int     correctLength = 10890;
+        int     actualJdbcType;
+        int     actualLength;
+        
+        Object   returnType;
+
+        boolean hasFunction = initialVersion.compareTo( firstVersionHavingThisFunction ) >= 0;
+        boolean hasCorrectReturnType = initialVersion.compareTo( firstVersionHavingCorrectReturnType ) >= 0;
+        
+    	Statement s = createStatement();
+        ResultSet rs = s.executeQuery
+            (
+             "select a.aliasinfo\n" +
+             "from sys.sysschemas s, sys.sysaliases a\n" +
+             "where s.schemaid = a.schemaid\n" +
+             "and s.schemaname = 'SYSIBM'\n" +
+             "and alias = 'CLOBGETSUBSTRING'\n"
+             );
+        rs.next();
+        
+        switch (getPhase())
+        {
+        case PH_CREATE:
+        case PH_SOFT_UPGRADE:
+        case PH_POST_SOFT_UPGRADE:
+            
+            if ( !hasFunction ) { break; }
+
+            returnType = getTypeDescriptor( rs.getObject( 1 ) );
+            actualJdbcType = getJDBCTypeId( returnType );
+            actualLength = getMaximumWidth( returnType );
+            int              expectedLength = hasCorrectReturnType ? correctLength : wrongLength;
+
+            assertEquals( java.sql.Types.VARCHAR, actualJdbcType );
+            assertEquals( expectedLength, actualLength );
+            
+            break;
+
+        case PH_HARD_UPGRADE:
+
+            RoutineAliasInfo rai = (RoutineAliasInfo) rs.getObject( 1 );
+            TypeDescriptor   td = (TypeDescriptor) rai.getReturnType();
+
+            assertEquals( java.sql.Types.VARCHAR, td.getJDBCTypeId() );
+            assertEquals( correctLength, td.getMaximumWidth() );
+            
+            break;
+        }
+
+        rs.close();
+        s.close();
+    }
+
+    /**
+     * We would like to just cast the alias descriptor to
+     * RoutineAliasDescriptor. However, this doesn't work if we are running on
+     * an old version because the descriptor comes from a different class
+     * loader. We use reflection to get the information we need.
+     */
+    private Object getTypeDescriptor( Object routineAliasDescriptor )
+        throws Exception
+    {
+        Method  meth = routineAliasDescriptor.getClass().getMethod( "getReturnType", null );
+
+        return meth.invoke( routineAliasDescriptor, null );
+    }
+    private int getJDBCTypeId( Object typeDescriptor )
+        throws Exception
+    {
+        Method  meth = typeDescriptor.getClass().getMethod( "getJDBCTypeId", null );
+
+        return ((Integer) meth.invoke( typeDescriptor, null )).intValue();
+    }
+    private int getMaximumWidth( Object typeDescriptor )
+        throws Exception
+    {
+        Method  meth = typeDescriptor.getClass().getMethod( "getMaximumWidth", null );
+
+        return ((Integer) meth.invoke( typeDescriptor, null )).intValue();
+    }
+    
 }
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Version.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Version.java
index 28ce5fb8..2df94868 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Version.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/upgradeTests/Version.java
@@ -70,15 +70,15 @@ public Version( int major, int minor, int fixpack, int bugversion )
     /** Construct a version from its legs */
     public Version( int[] legs )
     {
-        constructorMinion( legs, null );
+        constructorMinion( legs );
     }
 
-    /** Construct from a Derby ProductVersionHolder and a classloader */
-    public Version( ProductVersionHolder pvh, ClassLoader classLoader )
+    /** Construct from a Derby ProductVersionHolder  */
+    public Version( ProductVersionHolder pvh )
     {
-        constructorMinion( getLegs( pvh ), classLoader );
+        constructorMinion( getLegs( pvh ) );
     }
-    private void constructorMinion( int[] legs, ClassLoader classLoader )
+    private void constructorMinion( int[] legs )
     {
         if ( legs == null ) { legs = new int[] {}; }
         int count = legs.length;
@@ -91,7 +91,7 @@ private void constructorMinion( int[] legs, ClassLoader classLoader )
         _legs = new int[ count ];
         for ( int i = 0; i < count; i++ ) { _legs[ i ] = legs[ i ]; }
         
-        addClassLoader( classLoader );
+        makeKey();
     }
     private int[] getLegs( ProductVersionHolder pvh )
     {
@@ -144,6 +144,11 @@ public String getBranchID()
      */
     public ClassLoader getClassLoader()
     {
+        ClassLoader retval = (ClassLoader) _classLoaders.get( _key );
+        if ( retval != null ) { return retval; }
+        
+        addClassLoader( );
+        
         return (ClassLoader) _classLoaders.get( _key );
     }
     
@@ -184,20 +189,12 @@ public int compareTo( Object other )
      * Add the class loader for this version if it doesn't already exist.
      * </p>
      */
-    private void addClassLoader( ClassLoader classLoader)
-    {
-        makeKey();
-
-        if ( classLoader == null ) { classLoader = getClassLoader(); }
-        else { _classLoaders.put( _key, classLoader ); }
-
-        if ( classLoader == null )
+    private void addClassLoader( )
         {
-            classLoader = UpgradeClassLoader.makeClassLoader( _legs );
+        ClassLoader classLoader = UpgradeClassLoader.makeClassLoader( _legs );
 
             _classLoaders.put( _key, classLoader );
         }
-    }
 
     /**
      * <p>
