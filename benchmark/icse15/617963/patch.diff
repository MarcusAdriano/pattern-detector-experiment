diff --git a/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java b/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java
index 3d5a89b0..5873321d 100644
--- a/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java
+++ b/lucene/java/trunk/src/java/org/apache/lucene/search/BooleanQuery.java
@@ -363,7 +363,7 @@ protected Weight createWeight(Searcher searcher) throws IOException {
   }
 
   public Query rewrite(IndexReader reader) throws IOException {
-    if (clauses.size() == 1) {                    // optimize 1-clause queries
+    if (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries
       BooleanClause c = (BooleanClause)clauses.get(0);
       if (!c.isProhibited()) {			  // just return clause
 
diff --git a/lucene/java/trunk/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java b/lucene/java/trunk/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java
index 7d4ebfec..f0559657 100644
--- a/lucene/java/trunk/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java
+++ b/lucene/java/trunk/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch.java
@@ -284,6 +284,16 @@ public void testNoOptionalButMin() throws Exception {
         verifyNrHits(q, 0);
     }
 
+    public void testNoOptionalButMin2() throws Exception {
+
+        /* one required, no optional */
+        BooleanQuery q = new BooleanQuery();
+        q.add(new TermQuery(new Term("all", "all" )), BooleanClause.Occur.MUST);//true,  false);
+
+        q.setMinimumNumberShouldMatch(1); // 1 of 0 optional 
+
+        verifyNrHits(q, 0);
+    }
 
     public void testRandomQueries() throws Exception {
       final Random rnd = new Random(0);
