diff --git a/lucene/dev/branches/branch_3x/lucene/backwards/src/test/org/apache/lucene/search/TestTimeLimitingCollector.java b/lucene/dev/branches/branch_3x/lucene/backwards/src/test/org/apache/lucene/search/TestTimeLimitingCollector.java
index b4594100..e69de29b 100644
--- a/lucene/dev/branches/branch_3x/lucene/backwards/src/test/org/apache/lucene/search/TestTimeLimitingCollector.java
+++ b/lucene/dev/branches/branch_3x/lucene/backwards/src/test/org/apache/lucene/search/TestTimeLimitingCollector.java
@@ -1,351 +0,0 @@
-package org.apache.lucene.search;
-
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.IOException;
-import java.util.BitSet;
-
-import org.apache.lucene.analysis.MockAnalyzer;
-import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Field;
-import org.apache.lucene.index.IndexReader;
-import org.apache.lucene.index.RandomIndexWriter;
-import org.apache.lucene.queryParser.QueryParser;
-import org.apache.lucene.search.TimeLimitingCollector.TimeExceededException;
-import org.apache.lucene.store.Directory;
-import org.apache.lucene.util.LuceneTestCase;
-import org.apache.lucene.util.ThreadInterruptedException;
-
-/**
- * Tests the {@link TimeLimitingCollector}.  This test checks (1) search
- * correctness (regardless of timeout), (2) expected timeout behavior,
- * and (3) a sanity test with multiple searching threads.
- */
-public class TestTimeLimitingCollector extends LuceneTestCase {
-  private static final int SLOW_DOWN = 3;
-  private static final long TIME_ALLOWED = 17 * SLOW_DOWN; // so searches can find about 17 docs.
-  
-  // max time allowed is relaxed for multithreading tests. 
-  // the multithread case fails when setting this to 1 (no slack) and launching many threads (>2000).  
-  // but this is not a real failure, just noise.
-  private static final double MULTI_THREAD_SLACK = 7;      
-            
-  private static final int N_DOCS = 3000;
-  private static final int N_THREADS = 50;
-
-  private Searcher searcher;
-  private Directory directory;
-  private IndexReader reader;
-
-  private final String FIELD_NAME = "body";
-  private Query query;
-
-  /**
-   * initializes searcher with a document set
-   */
-  @Override
-  public void setUp() throws Exception {
-    super.setUp();
-    final String docText[] = {
-        "docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero",
-        "one blah three",
-        "one foo three multiOne",
-        "one foobar three multiThree",
-        "blueberry pancakes",
-        "blueberry pie",
-        "blueberry strudel",
-        "blueberry pizza",
-    };
-    directory = newDirectory();
-    RandomIndexWriter iw = new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));
-    
-    for (int i=0; i<N_DOCS; i++) {
-      add(docText[i%docText.length], iw);
-    }
-    reader = iw.getReader();
-    iw.close();
-    searcher = newSearcher(reader);
-
-    String qtxt = "one";
-    // start from 1, so that the 0th doc never matches
-    for (int i = 1; i < docText.length; i++) {
-      qtxt += ' ' + docText[i]; // large query so that search will be longer
-    }
-    QueryParser queryParser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new MockAnalyzer(random));
-    query = queryParser.parse(qtxt);
-    
-    // warm the searcher
-    searcher.search(query, null, 1000);
-
-  }
-
-  @Override
-  public void tearDown() throws Exception {
-    searcher.close();
-    reader.close();
-    directory.close();
-    super.tearDown();
-  }
-
-  private void add(String value, RandomIndexWriter iw) throws IOException {
-    Document d = new Document();
-    d.add(newField(FIELD_NAME, value, Field.Store.NO, Field.Index.ANALYZED));
-    iw.addDocument(d);
-  }
-
-  private void search(Collector collector) throws Exception {
-    searcher.search(query, collector);
-  }
-
-  /**
-   * test search correctness with no timeout
-   */
-  public void testSearch() {
-    doTestSearch();
-  }
-  
-  private void doTestSearch() {
-    int totalResults = 0;
-    int totalTLCResults = 0;
-    try {
-      MyHitCollector myHc = new MyHitCollector();
-      search(myHc);
-      totalResults = myHc.hitCount();
-      
-      myHc = new MyHitCollector();
-      long oneHour = 3600000;
-      Collector tlCollector = createTimedCollector(myHc, oneHour, false);
-      search(tlCollector);
-      totalTLCResults = myHc.hitCount();
-    } catch (Exception e) {
-      e.printStackTrace();
-      assertTrue("Unexpected exception: "+e, false); //==fail
-    }
-    assertEquals( "Wrong number of results!", totalResults, totalTLCResults );
-  }
-
-  private Collector createTimedCollector(MyHitCollector hc, long timeAllowed, boolean greedy) {
-    TimeLimitingCollector res = new TimeLimitingCollector(hc, timeAllowed);
-    res.setGreedy(greedy); // set to true to make sure at least one doc is collected.
-    return res;
-  }
-
-  /**
-   * Test that timeout is obtained, and soon enough!
-   */
-  public void testTimeoutGreedy() {
-    doTestTimeout(false, true);
-  }
-  
-  /**
-   * Test that timeout is obtained, and soon enough!
-   */
-  public void testTimeoutNotGreedy() {
-    doTestTimeout(false, false);
-  }
-
-  private void doTestTimeout(boolean multiThreaded, boolean greedy) {
-    // setup
-    MyHitCollector myHc = new MyHitCollector();
-    myHc.setSlowDown(SLOW_DOWN);
-    Collector tlCollector = createTimedCollector(myHc, TIME_ALLOWED, greedy);
-
-    // search
-    TimeExceededException timoutException = null;
-    try {
-      search(tlCollector);
-    } catch (TimeExceededException x) {
-      timoutException = x;
-    } catch (Exception e) {
-      assertTrue("Unexpected exception: "+e, false); //==fail
-    }
-    
-    // must get exception
-    assertNotNull( "Timeout expected!", timoutException );
-
-    // greediness affect last doc collected
-    int exceptionDoc = timoutException.getLastDocCollected();
-    int lastCollected = myHc.getLastDocCollected(); 
-    assertTrue( "doc collected at timeout must be > 0!", exceptionDoc > 0 );
-    if (greedy) {
-      assertTrue("greedy="+greedy+" exceptionDoc="+exceptionDoc+" != lastCollected="+lastCollected, exceptionDoc==lastCollected);
-      assertTrue("greedy, but no hits found!", myHc.hitCount() > 0 );
-    } else {
-      assertTrue("greedy="+greedy+" exceptionDoc="+exceptionDoc+" not > lastCollected="+lastCollected, exceptionDoc>lastCollected);
-    }
-
-    // verify that elapsed time at exception is within valid limits
-    assertEquals( timoutException.getTimeAllowed(), TIME_ALLOWED);
-    // a) Not too early
-    assertTrue ( "elapsed="+timoutException.getTimeElapsed()+" <= (allowed-resolution)="+(TIME_ALLOWED-TimeLimitingCollector.getResolution()),
-        timoutException.getTimeElapsed() > TIME_ALLOWED-TimeLimitingCollector.getResolution());
-    // b) Not too late.
-    //    This part is problematic in a busy test system, so we just print a warning.
-    //    We already verified that a timeout occurred, we just can't be picky about how long it took.
-    if (timoutException.getTimeElapsed() > maxTime(multiThreaded)) {
-      System.out.println("Informative: timeout exceeded (no action required: most probably just " +
-        " because the test machine is slower than usual):  " +
-        "lastDoc="+exceptionDoc+
-        " ,&& allowed="+timoutException.getTimeAllowed() +
-        " ,&& elapsed="+timoutException.getTimeElapsed() +
-        " >= " + maxTimeStr(multiThreaded));
-    }
-  }
-
-  private long maxTime(boolean multiThreaded) {
-    long res = 2 * TimeLimitingCollector.getResolution() + TIME_ALLOWED + SLOW_DOWN; // some slack for less noise in this test
-    if (multiThreaded) {
-      res *= MULTI_THREAD_SLACK; // larger slack  
-    }
-    return res;
-  }
-
-  private String maxTimeStr(boolean multiThreaded) {
-    String s =
-      "( " +
-      "2*resolution +  TIME_ALLOWED + SLOW_DOWN = " +
-      "2*" + TimeLimitingCollector.getResolution() + " + " + TIME_ALLOWED + " + " + SLOW_DOWN +
-      ")";
-    if (multiThreaded) {
-      s = MULTI_THREAD_SLACK + " * "+s;  
-    }
-    return maxTime(multiThreaded) + " = " + s;
-  }
-
-  /**
-   * Test timeout behavior when resolution is modified. 
-   */
-  public void testModifyResolution() {
-    try {
-      // increase and test
-      long resolution = 20 * TimeLimitingCollector.DEFAULT_RESOLUTION; //400
-      TimeLimitingCollector.setResolution(resolution);
-      assertEquals(resolution, TimeLimitingCollector.getResolution());
-      doTestTimeout(false,true);
-      // decrease much and test
-      resolution = 5;
-      TimeLimitingCollector.setResolution(resolution);
-      assertEquals(resolution, TimeLimitingCollector.getResolution());
-      doTestTimeout(false,true);
-      // return to default and test
-      resolution = TimeLimitingCollector.DEFAULT_RESOLUTION;
-      TimeLimitingCollector.setResolution(resolution);
-      assertEquals(resolution, TimeLimitingCollector.getResolution());
-      doTestTimeout(false,true);
-    } finally {
-      TimeLimitingCollector.setResolution(TimeLimitingCollector.DEFAULT_RESOLUTION);
-    }
-  }
-  
-  /** 
-   * Test correctness with multiple searching threads.
-   */
-  public void testSearchMultiThreaded() throws Exception {
-    doTestMultiThreads(false);
-  }
-
-  /** 
-   * Test correctness with multiple searching threads.
-   */
-  public void testTimeoutMultiThreaded() throws Exception {
-    doTestMultiThreads(true);
-  }
-  
-  private void doTestMultiThreads(final boolean withTimeout) throws Exception {
-    Thread [] threadArray = new Thread[N_THREADS];
-    final BitSet success = new BitSet(N_THREADS);
-    for( int i = 0; i < threadArray.length; ++i ) {
-      final int num = i;
-      threadArray[num] = new Thread() {
-          @Override
-          public void run() {
-            if (withTimeout) {
-              doTestTimeout(true,true);
-            } else {
-              doTestSearch();
-            }
-            synchronized(success) {
-              success.set(num);
-            }
-          }
-      };
-    }
-    for( int i = 0; i < threadArray.length; ++i ) {
-      threadArray[i].start();
-    }
-    for( int i = 0; i < threadArray.length; ++i ) {
-      threadArray[i].join();
-    }
-    assertEquals("some threads failed!", N_THREADS,success.cardinality());
-  }
-  
-  // counting collector that can slow down at collect().
-  private class MyHitCollector extends Collector {
-    private final BitSet bits = new BitSet();
-    private int slowdown = 0;
-    private int lastDocCollected = -1;
-    private int docBase = 0;
-
-    /**
-     * amount of time to wait on each collect to simulate a long iteration
-     */
-    public void setSlowDown( int milliseconds ) {
-      slowdown = milliseconds;
-    }
-    
-    public int hitCount() {
-      return bits.cardinality();
-    }
-
-    public int getLastDocCollected() {
-      return lastDocCollected;
-    }
-
-    @Override
-    public void setScorer(Scorer scorer) throws IOException {
-      // scorer is not needed
-    }
-    
-    @Override
-    public void collect(final int doc) throws IOException {
-      int docId = doc + docBase;
-      if( slowdown > 0 ) {
-        try {
-          Thread.sleep(slowdown);
-        } catch (InterruptedException ie) {
-          throw new ThreadInterruptedException(ie);
-        }
-      }
-      assert docId >= 0: " base=" + docBase + " doc=" + doc;
-      bits.set( docId );
-      lastDocCollected = docId;
-    }
-    
-    @Override
-    public void setNextReader(IndexReader reader, int base) {
-      docBase = base;
-    }
-    
-    @Override
-    public boolean acceptsDocsOutOfOrder() {
-      return false;
-    }
-
-  }
-
-}
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/TimeLimitingCollector.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/TimeLimitingCollector.java
index 405f1a09..6891a923 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/TimeLimitingCollector.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/search/TimeLimitingCollector.java
@@ -20,6 +20,7 @@
 import java.io.IOException;
 
 import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.util.Counter;
 import org.apache.lucene.util.ThreadInterruptedException;
 
 /**
@@ -30,69 +31,9 @@
  */
 public class TimeLimitingCollector extends Collector {
 
-  /** 
-   * Default timer resolution.
-   * @see #setResolution(long) 
-   */
-  public static final int DEFAULT_RESOLUTION = 20;
-
-  /**
-   * Default for {@link #isGreedy()}.
-   * @see #isGreedy()
-   */
-  public boolean DEFAULT_GREEDY = false; 
-
-  private static long resolution = DEFAULT_RESOLUTION;
-  
-  private boolean greedy = DEFAULT_GREEDY ;
-
-  private static final class TimerThread extends Thread  {
-
-    // NOTE: we can avoid explicit synchronization here for several reasons:
-    // * updates to volatile long variables are atomic
-    // * only single thread modifies this value
-    // * use of volatile keyword ensures that it does not reside in
-    //   a register, but in main memory (so that changes are visible to
-    //   other threads).
-    // * visibility of changes does not need to be instantaneous, we can
-    //   afford losing a tick or two.
-    //
-    // See section 17 of the Java Language Specification for details.
-    private volatile long time = 0;
-
-    /**
-     * TimerThread provides a pseudo-clock service to all searching
-     * threads, so that they can count elapsed time with less overhead
-     * than repeatedly calling System.currentTimeMillis.  A single
-     * thread should be created to be used for all searches.
-     */
-    private TimerThread() {
-      super("TimeLimitedCollector timer thread");
-      this.setDaemon( true );
-    }
-
-    @Override
-    public void run() {
-      while (true) {
-        // TODO: Use System.nanoTime() when Lucene moves to Java SE 5.
-        time += resolution;
-        try {
-          Thread.sleep( resolution );
-        } catch (InterruptedException ie) {
-          throw new ThreadInterruptedException(ie);
-        }
-      }
-    }
-
-    /**
-     * Get the timer value in milliseconds.
-     */
-    public long getMilliseconds() {
-      return time;
-    }
-  }
 
   /** Thrown when elapsed search time exceeds allowed search time. */
+  @SuppressWarnings("serial")
   public static class TimeExceededException extends RuntimeException {
     private long timeAllowed;
     private long timeElapsed;
@@ -117,56 +58,57 @@ public int getLastDocCollected() {
     }
   }
 
-  // Declare and initialize a single static timer thread to be used by
-  // all TimeLimitedCollector instances.  The JVM assures that
-  // this only happens once.
-  private final static TimerThread TIMER_THREAD = new TimerThread();
-  
-  static  {
-    TIMER_THREAD.start();
-  }
-
-  private final long t0;
-  private final long timeout;
+  private long t0 = Long.MIN_VALUE;
+  private long timeout = Long.MIN_VALUE;
   private final Collector collector;
-  
+  private final Counter clock;
+  private final long ticksAllowed;
+  private boolean greedy = false;
   private int docBase;
 
   /**
    * Create a TimeLimitedCollector wrapper over another {@link Collector} with a specified timeout.
    * @param collector the wrapped {@link Collector}
-   * @param timeAllowed max time allowed for collecting hits after which {@link TimeExceededException} is thrown
+   * @param clock the timer clock
+   * @param ticksAllowed max time allowed for collecting
+   * hits after which {@link TimeExceededException} is thrown
    */
-  public TimeLimitingCollector(final Collector collector, final long timeAllowed ) {
+  public TimeLimitingCollector(final Collector collector, Counter clock, final long ticksAllowed ) {
     this.collector = collector;
-    t0 = TIMER_THREAD.getMilliseconds();
-    this.timeout = t0 + timeAllowed;
+    this.clock = clock;
+    this.ticksAllowed = ticksAllowed;
   }
 
   /** 
-   * Return the timer resolution.
-   * @see #setResolution(long)
+   * Sets the baseline for this collector. By default the collectors baseline is 
+   * initialized once the first reader is passed to the collector. 
+   * To include operations executed in prior to the actual document collection
+   * set the baseline through this method in your prelude.
+   * <p>
+   * Example usage:
+   * <pre>
+   *   Counter clock = ...;
+   *   long baseline = clock.get();
+   *   // ... prepare search
+   *   TimeLimitingCollector collector = new TimeLimitingCollector(c, clock, numTicks);
+   *   collector.setBaseline(baseline);
+   *   indexSearcher.search(query, collector);
+   * </pre>
+   * </p>
+   * @see #setBaseline() 
+   * @param clockTime
    */
-  public static long getResolution() {
-    return resolution;
+  public void setBaseline(long clockTime) {
+    t0 = clockTime;
+    timeout = t0 + ticksAllowed;
   }
 
   /**
-   * Set the timer resolution.
-   * The default timer resolution is 20 milliseconds. 
-   * This means that a search required to take no longer than 
-   * 800 milliseconds may be stopped after 780 to 820 milliseconds.
-   * <br>Note that: 
-   * <ul>
-   * <li>Finer (smaller) resolution is more accurate but less efficient.</li>
-   * <li>Setting resolution to less than 5 milliseconds will be silently modified to 5 milliseconds.</li>
-   * <li>Setting resolution smaller than current resolution might take effect only after current 
-   * resolution. (Assume current resolution of 20 milliseconds is modified to 5 milliseconds, 
-   * then it can take up to 20 milliseconds for the change to have effect.</li>
-   * </ul>      
+   * Syntactic sugar for {@link #setBaseline(long)} using {@link Counter#get()}
+   * on the clock passed to the construcutor.
    */
-  public static void setResolution(long newResolution) {
-    resolution = Math.max(newResolution,5); // 5 milliseconds is about the minimum reasonable time for a Object.wait(long) call.
+  public void setBaseline() {
+    setBaseline(clock.get());
   }
 
   /**
@@ -199,7 +141,7 @@ public void setGreedy(boolean greedy) {
    */
   @Override
   public void collect(final int doc) throws IOException {
-    long time = TIMER_THREAD.getMilliseconds();
+    final long time = clock.get();
     if (timeout < time) {
       if (greedy) {
         //System.out.println(this+"  greedy: before failing, collecting doc: "+(docBase + doc)+"  "+(time-t0));
@@ -216,6 +158,9 @@ public void collect(final int doc) throws IOException {
   public void setNextReader(IndexReader reader, int base) throws IOException {
     collector.setNextReader(reader, base);
     this.docBase = base;
+    if (Long.MIN_VALUE == t0) {
+      setBaseline();
+    }
   }
   
   @Override
@@ -228,4 +173,131 @@ public boolean acceptsDocsOutOfOrder() {
     return collector.acceptsDocsOutOfOrder();
   }
 
+
+  /**
+   * Returns the global TimerThreads {@link Counter}
+   * <p>
+   * Invoking this creates may create a new instance of {@link TimerThread} iff
+   * the global {@link TimerThread} has never been accessed before. The thread
+   * returned from this method is started on creation and will be alive unless
+   * you stop the {@link TimerThread} via {@link TimerThread#stopTimer()}.
+   * </p>
+   * @return the global TimerThreads {@link Counter}
+   * @lucene.experimental
+   */
+  public static Counter getGlobalCounter() {
+    return TimerThreadHolder.THREAD.counter;
+  }
+  
+  /**
+   * Returns the global {@link TimerThread}.
+   * <p>
+   * Invoking this creates may create a new instance of {@link TimerThread} iff
+   * the global {@link TimerThread} has never been accessed before. The thread
+   * returned from this method is started on creation and will be alive unless
+   * you stop the {@link TimerThread} via {@link TimerThread#stopTimer()}.
+   * </p>
+   * 
+   * @return the global {@link TimerThread}
+   * @lucene.experimental
+   */
+  public static TimerThread getGlobalTimerThread() {
+    return TimerThreadHolder.THREAD;
+  }
+  
+  private static final class TimerThreadHolder {
+    static final TimerThread THREAD;
+    static {
+      THREAD = new TimerThread(Counter.newCounter(true));
+      THREAD.start();
+    }
+  }
+
+  /**
+   * @lucene.experimental
+   */
+  public static final class TimerThread extends Thread  {
+    
+    public static final String THREAD_NAME = "TimeLimitedCollector timer thread";
+    public static final int DEFAULT_RESOLUTION = 20;
+    // NOTE: we can avoid explicit synchronization here for several reasons:
+    // * updates to volatile long variables are atomic
+    // * only single thread modifies this value
+    // * use of volatile keyword ensures that it does not reside in
+    //   a register, but in main memory (so that changes are visible to
+    //   other threads).
+    // * visibility of changes does not need to be instantaneous, we can
+    //   afford losing a tick or two.
+    //
+    // See section 17 of the Java Language Specification for details.
+    private volatile long time = 0;
+    private volatile boolean stop = false;
+    private volatile long resolution;
+    final Counter counter;
+    
+    public TimerThread(long resolution, Counter counter) {
+      super(THREAD_NAME);
+      this.resolution = resolution;
+      this.counter = counter;
+      this.setDaemon(true);
+    }
+    
+    public TimerThread(Counter counter) {
+      this(DEFAULT_RESOLUTION, counter);
+    }
+
+    @Override
+    public void run() {
+      while (!stop) {
+        // TODO: Use System.nanoTime() when Lucene moves to Java SE 5.
+        counter.addAndGet(resolution);
+        try {
+          Thread.sleep( resolution );
+        } catch (InterruptedException ie) {
+          throw new ThreadInterruptedException(ie);
+        }
+      }
+    }
+
+    /**
+     * Get the timer value in milliseconds.
+     */
+    public long getMilliseconds() {
+      return time;
+    }
+    
+    /**
+     * Stops the timer thread 
+     */
+    public void stopTimer() {
+      stop = true;
+    }
+    
+    /** 
+     * Return the timer resolution.
+     * @see #setResolution(long)
+     */
+    public long getResolution() {
+      return resolution;
+    }
+    
+    /**
+     * Set the timer resolution.
+     * The default timer resolution is 20 milliseconds. 
+     * This means that a search required to take no longer than 
+     * 800 milliseconds may be stopped after 780 to 820 milliseconds.
+     * <br>Note that: 
+     * <ul>
+     * <li>Finer (smaller) resolution is more accurate but less efficient.</li>
+     * <li>Setting resolution to less than 5 milliseconds will be silently modified to 5 milliseconds.</li>
+     * <li>Setting resolution smaller than current resolution might take effect only after current 
+     * resolution. (Assume current resolution of 20 milliseconds is modified to 5 milliseconds, 
+     * then it can take up to 20 milliseconds for the change to have effect.</li>
+     * </ul>      
+     */
+    public void setResolution(long resolution) {
+      this.resolution = Math.max(resolution, 5); // 5 milliseconds is about the minimum reasonable time for a Object.wait(long) call.
+    }
+  }
+  
 }
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/Counter.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/Counter.java
index e69de29b..b7642acb 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/Counter.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/Counter.java
@@ -0,0 +1,93 @@
+package org.apache.lucene.util;
+
+import java.util.concurrent.atomic.AtomicLong;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/**
+ * Simple counter class
+ * 
+ * @lucene.internal
+ * @lucene.experimental
+ */
+public abstract class Counter {
+
+  /**
+   * Adds the given delta to the counters current value
+   * 
+   * @param delta
+   *          the delta to add
+   * @return the counters updated value
+   */
+  public abstract long addAndGet(long delta);
+
+  /**
+   * Returns the counters current value
+   * 
+   * @return the counters current value
+   */
+  public abstract long get();
+
+  /**
+   * Returns a new counter. The returned counter is not thread-safe.
+   */
+  public static Counter newCounter() {
+    return newCounter(false);
+  }
+
+  /**
+   * Returns a new counter.
+   * 
+   * @param threadSafe
+   *          <code>true</code> if the returned counter can be used by multiple
+   *          threads concurrently.
+   * @return a new counter.
+   */
+  public static Counter newCounter(boolean threadSafe) {
+    return threadSafe ? new AtomicCounter() : new SerialCounter();
+  }
+
+  private final static class SerialCounter extends Counter {
+    private long count = 0;
+
+    @Override
+    public long addAndGet(long delta) {
+      return count += delta;
+    }
+
+    @Override
+    public long get() {
+      return count;
+    };
+  }
+
+  private final static class AtomicCounter extends Counter {
+    private final AtomicLong count = new AtomicLong();
+
+    @Override
+    public long addAndGet(long delta) {
+      return count.addAndGet(delta);
+    }
+
+    @Override
+    public long get() {
+      return count.get();
+    }
+
+  }
+}
diff --git a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestTimeLimitingCollector.java b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestTimeLimitingCollector.java
index b4594100..47be91e8 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestTimeLimitingCollector.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/test/org/apache/lucene/search/TestTimeLimitingCollector.java
@@ -27,7 +27,9 @@
 import org.apache.lucene.index.RandomIndexWriter;
 import org.apache.lucene.queryParser.QueryParser;
 import org.apache.lucene.search.TimeLimitingCollector.TimeExceededException;
+import org.apache.lucene.search.TimeLimitingCollector.TimerThread;
 import org.apache.lucene.store.Directory;
+import org.apache.lucene.util.Counter;
 import org.apache.lucene.util.LuceneTestCase;
 import org.apache.lucene.util.ThreadInterruptedException;
 
@@ -54,6 +56,8 @@
 
   private final String FIELD_NAME = "body";
   private Query query;
+  private Counter counter;
+  private TimerThread counterThread;
 
   /**
    * initializes searcher with a document set
@@ -61,6 +65,9 @@
   @Override
   public void setUp() throws Exception {
     super.setUp();
+    counter = Counter.newCounter(true);
+    counterThread = new TimerThread(counter);
+    counterThread.start();
     final String docText[] = {
         "docThatNeverMatchesSoWeCanRequireLastDocCollectedToBeGreaterThanZero",
         "one blah three",
@@ -91,7 +98,6 @@ public void setUp() throws Exception {
     
     // warm the searcher
     searcher.search(query, null, 1000);
-
   }
 
   @Override
@@ -99,6 +105,8 @@ public void tearDown() throws Exception {
     searcher.close();
     reader.close();
     directory.close();
+    counterThread.stopTimer();
+    counterThread.join();
     super.tearDown();
   }
 
@@ -140,7 +148,7 @@ private void doTestSearch() {
   }
 
   private Collector createTimedCollector(MyHitCollector hc, long timeAllowed, boolean greedy) {
-    TimeLimitingCollector res = new TimeLimitingCollector(hc, timeAllowed);
+    TimeLimitingCollector res = new TimeLimitingCollector(hc, counter, timeAllowed);
     res.setGreedy(greedy); // set to true to make sure at least one doc is collected.
     return res;
   }
@@ -192,8 +200,8 @@ private void doTestTimeout(boolean multiThreaded, boolean greedy) {
     // verify that elapsed time at exception is within valid limits
     assertEquals( timoutException.getTimeAllowed(), TIME_ALLOWED);
     // a) Not too early
-    assertTrue ( "elapsed="+timoutException.getTimeElapsed()+" <= (allowed-resolution)="+(TIME_ALLOWED-TimeLimitingCollector.getResolution()),
-        timoutException.getTimeElapsed() > TIME_ALLOWED-TimeLimitingCollector.getResolution());
+    assertTrue ( "elapsed="+timoutException.getTimeElapsed()+" <= (allowed-resolution)="+(TIME_ALLOWED-counterThread.getResolution()),
+        timoutException.getTimeElapsed() > TIME_ALLOWED-counterThread.getResolution());
     // b) Not too late.
     //    This part is problematic in a busy test system, so we just print a warning.
     //    We already verified that a timeout occurred, we just can't be picky about how long it took.
@@ -208,7 +216,7 @@ private void doTestTimeout(boolean multiThreaded, boolean greedy) {
   }
 
   private long maxTime(boolean multiThreaded) {
-    long res = 2 * TimeLimitingCollector.getResolution() + TIME_ALLOWED + SLOW_DOWN; // some slack for less noise in this test
+    long res = 2 * counterThread.getResolution() + TIME_ALLOWED + SLOW_DOWN; // some slack for less noise in this test
     if (multiThreaded) {
       res *= MULTI_THREAD_SLACK; // larger slack  
     }
@@ -219,7 +227,7 @@ private String maxTimeStr(boolean multiThreaded) {
     String s =
       "( " +
       "2*resolution +  TIME_ALLOWED + SLOW_DOWN = " +
-      "2*" + TimeLimitingCollector.getResolution() + " + " + TIME_ALLOWED + " + " + SLOW_DOWN +
+      "2*" + counterThread.getResolution() + " + " + TIME_ALLOWED + " + " + SLOW_DOWN +
       ")";
     if (multiThreaded) {
       s = MULTI_THREAD_SLACK + " * "+s;  
@@ -233,22 +241,22 @@ private String maxTimeStr(boolean multiThreaded) {
   public void testModifyResolution() {
     try {
       // increase and test
-      long resolution = 20 * TimeLimitingCollector.DEFAULT_RESOLUTION; //400
-      TimeLimitingCollector.setResolution(resolution);
-      assertEquals(resolution, TimeLimitingCollector.getResolution());
+      long resolution = 20 * TimerThread.DEFAULT_RESOLUTION; //400
+      counterThread.setResolution(resolution);
+      assertEquals(resolution, counterThread.getResolution());
       doTestTimeout(false,true);
       // decrease much and test
       resolution = 5;
-      TimeLimitingCollector.setResolution(resolution);
-      assertEquals(resolution, TimeLimitingCollector.getResolution());
+      counterThread.setResolution(resolution);
+      assertEquals(resolution, counterThread.getResolution());
       doTestTimeout(false,true);
       // return to default and test
-      resolution = TimeLimitingCollector.DEFAULT_RESOLUTION;
-      TimeLimitingCollector.setResolution(resolution);
-      assertEquals(resolution, TimeLimitingCollector.getResolution());
+      resolution = TimerThread.DEFAULT_RESOLUTION;
+      counterThread.setResolution(resolution);
+      assertEquals(resolution, counterThread.getResolution());
       doTestTimeout(false,true);
     } finally {
-      TimeLimitingCollector.setResolution(TimeLimitingCollector.DEFAULT_RESOLUTION);
+      counterThread.setResolution(TimerThread.DEFAULT_RESOLUTION);
     }
   }
   
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
index 158c4ebc..50eebb6b 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java
@@ -1244,7 +1244,7 @@ public boolean acceptsDocsOutOfOrder() {
       }
       
       if( timeAllowed > 0 ) {
-        collector = new TimeLimitingCollector(collector, timeAllowed);
+        collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);
       }
       if (pf.postFilter != null) {
         pf.postFilter.setLastDelegate(collector);
@@ -1273,7 +1273,7 @@ public boolean acceptsDocsOutOfOrder() {
       }
       Collector collector = topCollector;
       if( timeAllowed > 0 ) {
-        collector = new TimeLimitingCollector(collector, timeAllowed);
+        collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);
       }
       if (pf.postFilter != null) {
         pf.postFilter.setLastDelegate(collector);
@@ -1363,7 +1363,7 @@ public boolean acceptsDocsOutOfOrder() {
        }
 
        if( timeAllowed > 0 ) {
-         collector = new TimeLimitingCollector(collector, timeAllowed);
+         collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);
        }
       if (pf.postFilter != null) {
         pf.postFilter.setLastDelegate(collector);
@@ -1399,7 +1399,7 @@ public boolean acceptsDocsOutOfOrder() {
       Collector collector = setCollector;
 
       if( timeAllowed > 0 ) {
-        collector = new TimeLimitingCollector(collector, timeAllowed );
+        collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed );
       }
       if (pf.postFilter != null) {
         pf.postFilter.setLastDelegate(collector);
