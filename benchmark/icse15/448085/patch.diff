diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java
index 48160a46..8ee287fd 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/RegisteredFormatIds.java
@@ -525,5 +525,6 @@ The offset from the base format number (0 based) gives the offset in the array.
         /* 461 */   "org.apache.derby.impl.sql.catalog.CoreDDFinderClassInfo",
         /* 462 */   "org.apache.derby.impl.sql.catalog.CoreDDFinderClassInfo",
         /* 463 */   "org.apache.derby.impl.sql.catalog.CoreDDFinderClassInfo",
+        /* 464 */   "org.apache.derby.iapi.types.SqlXmlUtil",        
 };
 }
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java
index 1d881e93..bb216caf 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/services/io/StoredFormatIds.java
@@ -490,6 +490,12 @@ and another may restore (read) the object. The implication of this
         static public final int XML_TYPE_ID =
                 (MIN_ID_2 + 456);
         
+        /**
+         	class org.apache.derby.iapi.types.SqlXmlUtil
+        */
+        static public final int SQL_XML_UTIL_V01_ID =
+                (MIN_ID_2 + 464);
+        
         /**
             class org.apache.derby.iapi.types.JSQLType
          */
@@ -1853,7 +1859,7 @@ and another may restore (read) the object. The implication of this
          * Make sure this is updated when a new module is added
          */
         public static final int MAX_ID_2 =
-                (MIN_ID_2 + 463);
+                (MIN_ID_2 + 464);
 
         // DO NOT USE 4 BYTE IDS ANYMORE
         static public final int MAX_ID_4 =
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java
index b685fe11..2e2910fe 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/iapi/types/SqlXmlUtil.java
@@ -23,11 +23,16 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 import org.apache.derby.iapi.error.StandardException;
 import org.apache.derby.iapi.reference.SQLState;
+import org.apache.derby.iapi.services.io.Formatable;
+import org.apache.derby.iapi.services.io.StoredFormatIds;
 import org.apache.derby.iapi.services.sanity.SanityManager;
 
 import java.util.Properties;
 import java.util.ArrayList;
 
+import java.io.IOException;
+import java.io.ObjectOutput;
+import java.io.ObjectInput;
 import java.io.StringReader;
 
 // -- JDBC 3.0 JAXP API classes.
@@ -109,7 +114,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  *       _if_ s/he is trying to access or operate on XML values.
  */
 
-public class SqlXmlUtil 
+public class SqlXmlUtil implements Formatable
 {
     // Used to parse a string into an XML value (DOM); checks
     // the well-formedness of the string while parsing.
@@ -124,6 +129,12 @@ Licensed to the Apache Software Foundation (ASF) under one or more
     private XPath query;
     private XPathContext xpContext;
 
+    // Used to recompile the XPath expression when this formatable
+    // object is reconstructed.  e.g.:  SPS 
+    private String queryExpr;
+    private String opName;
+    private boolean recompileQuery;
+    
     /**
      * Constructor: Initializes objects required for parsing
      * and serializing XML values.  Since most XML operations
@@ -257,6 +268,10 @@ public void compileXQExpr(String queryExpr, String opName)
                 new PrefixResolverDefault(dBuilder.newDocument()),
                 XPath.SELECT);
 
+            this.queryExpr = queryExpr;
+            this.opName = opName;
+            this.recompileQuery = false;
+
         } catch (Throwable te) {
 
             /* Something went wrong during compilation of the
@@ -510,6 +525,12 @@ else if (obj instanceof Attr)
     protected ArrayList evalXQExpression(XMLDataValue xmlContext,
         boolean returnResults, int [] resultXType) throws Exception
     {
+        // if this object is in an SPS, we need to recompile the query
+        if (recompileQuery)
+        {
+        	compileXQExpr(queryExpr, opName);
+        }
+
         // Make sure we have a compiled query.
         if (SanityManager.DEBUG) {
             SanityManager.ASSERT(
@@ -670,6 +691,58 @@ private void loadSerializer() throws java.io.IOException
         return;
     }
 
+    /* ****
+     * Formatable interface implementation
+     * */
+
+    /** 
+     * @see java.io.Externalizable#writeExternal 
+     * 
+     * @exception IOException on error
+     */
+    public void writeExternal(ObjectOutput out) 
+        throws IOException
+    {
+        // query may be null
+        if (query == null)
+        {
+            out.writeBoolean(false);
+        }
+        else
+        {
+            out.writeBoolean(true);
+            out.writeObject(queryExpr);
+            out.writeObject(opName);
+        }
+    }
+
+    /** 
+     * @see java.io.Externalizable#readExternal 
+     *
+     * @exception IOException on error
+     * @exception ClassNotFoundException on error
+     */
+    public void readExternal(ObjectInput in) 
+        throws IOException, ClassNotFoundException
+    {
+        if (in.readBoolean())
+        {
+            queryExpr = (String)in.readObject();
+            opName = (String)in.readObject();
+            recompileQuery = true;
+	    }
+    }
+
+    /**
+     * Get the formatID which corresponds to this class.
+     *
+     * @return	the formatID of this class
+     */
+    public int getTypeFormatId()
+    { 
+        return StoredFormatIds.SQL_XML_UTIL_V01_ID;
+    }
+
     /*
      ** The XMLErrorHandler class is just a generic implementation
      ** of the ErrorHandler interface.  It allows us to catch
