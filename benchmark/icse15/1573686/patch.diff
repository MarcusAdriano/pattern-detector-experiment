diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java
index d35a7f12..f4d25d2e 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java
@@ -459,6 +459,11 @@ else if (!(castOperand instanceof UntypedNullConstantNode))
             )
         { setNullability( true ); }
 		else { setNullability(castOperand.getTypeServices().isNullable()); }
+        
+        if (targetUDT != null)
+        {
+            addUDTUsagePriv( this );
+        }
 	}
 
 	/**
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
index d3a115ce..bcbd491c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/QueryTreeNode.java
@@ -1363,8 +1363,17 @@ void    addUDTUsagePriv( List<ValueNode> valueNodes )
     {
         if ( !isPrivilegeCollectionRequired() ) { return; }
         
-        for ( ValueNode val : valueNodes )
+        for ( ValueNode val : valueNodes ) { addUDTUsagePriv( val ); }
+    }
+
+    /**
+     * Add USAGE privilege for a single UDT.
+     */
+    void    addUDTUsagePriv( ValueNode val )
+        throws StandardException
         {
+        if ( !isPrivilegeCollectionRequired() ) { return; }
+        
             DataTypeDescriptor  dtd = val.getTypeServices();
             if ( (dtd != null) && dtd.getTypeId().userType() )
             {
@@ -1372,7 +1381,6 @@ void    addUDTUsagePriv( List<ValueNode> valueNodes )
                 getCompilerContext().addRequiredUsagePriv( ad );
             }
         }
-    }
 
     /**
      * Bind the UDTs in a table type.
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
index bba6123c..50991164 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
@@ -517,6 +517,11 @@ ResultSetNode bindNonVTITables(DataDictionary dataDictionary,
     void bindExpressions(FromList fromListParam)
 					throws StandardException
 	{
+        //
+        // Don't add USAGE privilege on user-defined types.
+        //
+        boolean wasSkippingTypePrivileges = getCompilerContext().skipTypePrivileges( true );
+            
 		int fromListParamSize = fromListParam.size();
 		int fromListSize = fromList.size();
 		int numDistinctAggs;
@@ -712,6 +717,8 @@ void bindExpressions(FromList fromListParam)
 
             bindOffsetFetch(qec.getOffset(i), qec.getFetchFirst(i));
         }
+
+        getCompilerContext().skipTypePrivileges( wasSkippingTypePrivileges );
     }
 
 	/**
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java
index 35f231b6..301cb873 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/GrantRevokeDDLTest.java
@@ -11956,6 +11956,148 @@ public void test_6434_delete()
              );
     }
     
+    /**
+     * Test that INSERT statements driven by SELECTs require the correct privileges as
+     * described on DERBY-6434.
+     */
+    public void test_6434_select()
+        throws Exception
+    {
+        Connection  dboConnection = openUserConnection( TEST_DBO );
+        Connection  ruthConnection = openUserConnection( RUTH );
+
+        //
+        // Schema
+        //
+        goodStatement
+            (
+             dboConnection,
+             "create type SourceValueType_6434_3 external name 'java.util.HashMap' language java"
+             );
+        goodStatement
+            (
+             dboConnection,
+             "create type TargetValueType_6434_3 external name 'java.util.HashMap' language java"
+             );
+        goodStatement
+            (
+             dboConnection,
+             "create function sourceValueExtractor_6434_3( hashMap SourceValueType_6434_3, hashKey varchar( 32672 ) ) returns int\n" +
+             "language java parameter style java deterministic no sql\n" +
+             "external name 'org.apache.derbyTesting.functionTests.tests.lang.UDTTest.getIntValue'\n"
+             );
+        goodStatement
+            (
+             dboConnection,
+             "create function sourceValueMaker_6434_3( hashKey varchar( 32672 ), hashValue int ) returns SourceValueType_6434_3\n" +
+             "language java parameter style java deterministic no sql\n" +
+             "external name 'org.apache.derbyTesting.functionTests.tests.lang.UDTTest.makeHashMap'\n"
+             );
+        goodStatement
+            (
+             dboConnection,
+             "create function targetValueMaker_6434_3( hashKey varchar( 32672 ), hashValue int ) returns TargetValueType_6434_3\n" +
+             "language java parameter style java deterministic no sql\n" +
+             "external name 'org.apache.derbyTesting.functionTests.tests.lang.UDTTest.makeHashMap'\n"
+             );
+        goodStatement
+            (
+             dboConnection,
+             "create table targetTable_6434_3( a TargetValueType_6434_3 )"
+             );
+        goodStatement
+            (
+             dboConnection,
+             "create table sourceTable_6434_3( b SourceValueType_6434_3 )"
+             );
+
+        //
+        // Privileges
+        //
+        goodStatement
+            (
+             dboConnection,
+             "grant insert on targetTable_6434_3 to ruth"
+             );
+        goodStatement
+            (
+             dboConnection,
+             "grant execute on function sourceValueExtractor_6434_3 to ruth"
+             );
+        goodStatement
+            (
+             dboConnection,
+             "grant execute on function sourceValueMaker_6434_3 to ruth"
+             );
+        goodStatement
+            (
+             dboConnection,
+             "grant execute on function targetValueMaker_6434_3 to ruth"
+             );
+        goodStatement
+            (
+             dboConnection,
+             "grant select on sourceTable_6434_3 to ruth"
+             );
+
+        // the problem SELECT-driven INSERT
+        goodStatement
+            (
+             ruthConnection,
+             "insert into test_dbo.targetTable_6434_3\n" +
+             "  select test_dbo.targetValueMaker_6434_3( 'bar', test_dbo.sourceValueExtractor_6434_3( b, 'foo' ) )\n" +
+             "  from test_dbo.sourceTable_6434_3\n"
+             );
+
+        // make sure that privilege checks are still needed for explicit casts
+        expectExecutionError
+            (
+             ruthConnection,
+             NO_GENERIC_PERMISSION,
+             "select * from test_dbo.sourceTable_6434_3\n" +
+             "where ( cast( null as test_dbo.SourceValueType_6434_3 ) ) is not null\n"
+             );
+
+        //
+        // Drop schema
+        //
+        goodStatement
+            (
+             dboConnection,
+             "drop table sourceTable_6434_3"
+             );
+        goodStatement
+            (
+             dboConnection,
+             "drop table targetTable_6434_3"
+             );
+        goodStatement
+            (
+             dboConnection,
+             "drop function targetValueMaker_6434_3"
+             );
+        goodStatement
+            (
+             dboConnection,
+             "drop function sourceValueMaker_6434_3"
+             );
+        goodStatement
+            (
+             dboConnection,
+             "drop function sourceValueExtractor_6434_3"
+             );
+        goodStatement
+            (
+             dboConnection,
+             "drop type TargetValueType_6434_3 restrict"
+             );
+        goodStatement
+            (
+             dboConnection,
+             "drop type SourceValueType_6434_3 restrict"
+             );
+    }
+    
     /**
      * Test that INSERT and UPDATEs run CHECK constraints with definer's rights.
      */
