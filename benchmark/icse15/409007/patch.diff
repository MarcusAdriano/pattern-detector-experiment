diff --git a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java
index 114a7513..174832b0 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource.java
@@ -40,7 +40,7 @@
  * <LI> JDBC 2.0 - Java 2 - JDK 1.2,1.3
  * </UL>
  */
-public class ClientConnectionPoolDataSource extends ClientBaseDataSource 
+public class ClientConnectionPoolDataSource extends ClientDataSource 
                                            implements ConnectionPoolDataSource {
     private static final long serialVersionUID = -539234282156481377L;
     public static final String className__ = "org.apache.derby.jdbc.ClientConnectionPoolDataSource";
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java
index 183538b8..27ef2975 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientConnectionPoolDataSource40.java
@@ -21,10 +21,12 @@
 package org.apache.derby.jdbc;
 
 import java.sql.BaseQuery;
+import java.sql.QueryObjectFactory;
 import java.sql.QueryObjectGenerator;
 import java.sql.SQLException;
-import javax.sql.ConnectionPoolDataSource;
-import org.apache.derby.client.am.SQLExceptionFactory;
+import org.apache.derby.client.am.ClientMessageId;
+import org.apache.derby.client.am.SqlException;
+import org.apache.derby.shared.common.reference.SQLState;
 
 /**
  * ClientConnectionPoolDataSource40 is a factory for PooledConnection objects.
@@ -55,4 +57,48 @@
     public QueryObjectGenerator getQueryObjectGenerator() throws SQLException {
         return null;
     }    
+    
+    /**
+     * This method forwards all the calls to default query object provided by 
+     * the jdk.
+     * @param ifc interface to generated concreate class
+     * @return concreat class generated by default qury object generator
+     */
+    public <T extends BaseQuery> T createQueryObject(Class<T> ifc) 
+                                                    throws SQLException {
+        return QueryObjectFactory.createDefaultQueryObject (ifc, this);
+    }   
+    
+    /**
+     * Returns false unless <code>interfaces</code> is implemented 
+     * 
+     * @param  interfaces             a Class defining an interface.
+     * @return true                   if this implements the interface or 
+     *                                directly or indirectly wraps an object 
+     *                                that does.
+     * @throws java.sql.SQLException  if an error occurs while determining 
+     *                                whether this is a wrapper for an object 
+     *                                with the given interface.
+     */
+    public boolean isWrapperFor(Class<?> interfaces) throws SQLException {
+        return interfaces.isInstance(this);
+    }
+    
+    /**
+     * Returns <code>this</code> if this class implements the interface
+     *
+     * @param  interfaces a Class defining an interface
+     * @return an object that implements the interface
+     * @throws java.sql.SQLExption if no object if found that implements the 
+     * interface
+     */
+    public <T> T unwrap(java.lang.Class<T> interfaces)
+                                   throws SQLException {
+        try { 
+            return interfaces.cast(this);
+        } catch (ClassCastException cce) {
+            throw new SqlException(null,new ClientMessageId(
+                    SQLState.UNABLE_TO_UNWRAP), interfaces).getSQLException();
+        }
+    }    
 }
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource.java b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource.java
index d806e3dc..bc9b2e63 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource.java
@@ -49,7 +49,7 @@
  *
  * <P>See ClientDataSource for DataSource properties.</p>
  */
-public class ClientXADataSource extends ClientBaseDataSource implements XADataSource {
+public class ClientXADataSource extends ClientDataSource implements XADataSource {
     public static final String className__ = "org.apache.derby.jdbc.ClientXADataSource";
 
     // following serialVersionUID was generated by the JDK's serialver program
diff --git a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource40.java b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource40.java
index ce29241e..2f386684 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource40.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/jdbc/ClientXADataSource40.java
@@ -21,14 +21,15 @@
 package org.apache.derby.jdbc;
 
 import java.sql.BaseQuery;
+import java.sql.QueryObjectFactory;
 import java.sql.QueryObjectGenerator;
 import java.sql.SQLException;
-import javax.sql.DataSource;
 import javax.sql.XAConnection;
 import org.apache.derby.client.ClientXAConnection40;
-import org.apache.derby.client.am.SQLExceptionFactory;
+import org.apache.derby.client.am.ClientMessageId;
 import org.apache.derby.client.am.SqlException;
 import org.apache.derby.client.net.NetLogWriter;
+import org.apache.derby.shared.common.reference.SQLState;
 
 /**
  * <p>
@@ -79,4 +80,48 @@ public XAConnection getXAConnection(String user, String password) throws SQLExce
             throw se.getSQLException();
         }
     }    
+    
+    /**
+     * This method forwards all the calls to default query object provided by 
+     * the jdk.
+     * @param ifc interface to generated concreate class
+     * @return concreat class generated by default qury object generator
+     */
+    public <T extends BaseQuery> T createQueryObject(Class<T> ifc) 
+                                                    throws SQLException {
+        return QueryObjectFactory.createDefaultQueryObject (ifc, this);
+    }   
+    
+    /**
+     * Returns false unless <code>interfaces</code> is implemented 
+     * 
+     * @param  interfaces             a Class defining an interface.
+     * @return true                   if this implements the interface or 
+     *                                directly or indirectly wraps an object 
+     *                                that does.
+     * @throws java.sql.SQLException  if an error occurs while determining 
+     *                                whether this is a wrapper for an object 
+     *                                with the given interface.
+     */
+    public boolean isWrapperFor(Class<?> interfaces) throws SQLException {
+        return interfaces.isInstance(this);
+    }
+    
+    /**
+     * Returns <code>this</code> if this class implements the interface
+     *
+     * @param  interfaces a Class defining an interface
+     * @return an object that implements the interface
+     * @throws java.sql.SQLExption if no object if found that implements the 
+     * interface
+     */
+    public <T> T unwrap(java.lang.Class<T> interfaces)
+                                   throws SQLException {
+        try { 
+            return interfaces.cast(this);
+        } catch (ClassCastException cce) {
+            throw new SqlException(null,new ClientMessageId(
+                    SQLState.UNABLE_TO_UNWRAP), interfaces).getSQLException();
+        }
+    }
 }
