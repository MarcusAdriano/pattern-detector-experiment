diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryLogicalOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryLogicalOperatorNode.java
index 02eee854..7f16a024 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryLogicalOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/BinaryLogicalOperatorNode.java
@@ -90,13 +90,6 @@ public ValueNode bindExpression(
 		//following is to check if we have something like "? AND 1=1" or "2>1 OR ?" 
 		if (leftOperand.isParameterNode() || rightOperand.isParameterNode())
 			throw StandardException.newException(SQLState.LANG_NON_BOOLEAN_WHERE_CLAUSE, "PARAMETER" );
-		//following 2 ifs are to check if we have something like "+? AND 1=1" or "2>1 OR -?" ie -?/+? by themselves 
-		if ((leftOperand instanceof UnaryOperatorNode) &&
-				((UnaryOperatorNode)leftOperand).isUnaryMinusOrPlusWithParameter())
-			throw StandardException.newException(SQLState.LANG_NON_BOOLEAN_WHERE_CLAUSE, "PARAMETER" );
-		if ((rightOperand instanceof UnaryOperatorNode) &&
-				((UnaryOperatorNode)rightOperand).isUnaryMinusOrPlusWithParameter())
-			throw StandardException.newException(SQLState.LANG_NON_BOOLEAN_WHERE_CLAUSE, "PARAMETER" );
 
 		super.bindExpression(fromList, subqueryList, aggregateVector);
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java
index 55dc2c04..1bc13552 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/CastNode.java
@@ -397,9 +397,12 @@ public void bindCastNodeOnly()
 													));
 		}
 
+        // Obviously the type of a parameter that
+        // requires its type from context (a parameter)
+        // gets its type from the type of the CAST.
 		if (castOperand.requiresTypeFromContext())
 		{
-			bindParameter();
+            castOperand.setType(getTypeServices());
 		}
 
 		/*
@@ -800,20 +803,6 @@ public boolean constantExpression(PredicateList whereClause)
 		return castOperand.constantExpression(whereClause);
 	}
 
-	/**
-	 * By default unary operators don't accept ? parameters as operands.
-	 * This can be over-ridden for particular unary operators.
-	 *
-	 * @exception StandardException		Always thrown to indicate a
-	 *									? parameter where it isn't allowed.
-	 */
-
-	void bindParameter()
-					throws StandardException
-	{
-		castOperand.setType(getTypeServices());
-	}
-
 	/**
 	 * Return an Object representing the bind time value of this
 	 * expression tree.  If the expression tree does not evaluate to
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java
index 476d2653..dbfbeb26 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/ResultColumn.java
@@ -1315,9 +1315,6 @@ void rejectParameter() throws StandardException
 	{
 		if ((expression != null) && (expression.isParameterNode()))
 			throw StandardException.newException(SQLState.LANG_PARAM_IN_SELECT_LIST);
-		if ((expression != null) && (expression instanceof UnaryOperatorNode) &&
-				((UnaryOperatorNode)expression).isUnaryMinusOrPlusWithParameter())
-			throw StandardException.newException(SQLState.LANG_PARAM_IN_SELECT_LIST);
 	}
 
 	/*
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
index 1ce8bcbd..08ef460c 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/SelectNode.java
@@ -475,9 +475,6 @@ public void bindExpressions(FromList fromListParam)
 			 */
 			if (whereClause.isParameterNode())
 				throw StandardException.newException(SQLState.LANG_NON_BOOLEAN_WHERE_CLAUSE, "PARAMETER" );
-			if ((whereClause instanceof UnaryOperatorNode) &&
-					((UnaryOperatorNode)whereClause).isUnaryMinusOrPlusWithParameter())
-				throw StandardException.newException(SQLState.LANG_NON_BOOLEAN_WHERE_CLAUSE, "PARAMETER" );
 			
 			whereClause = whereClause.checkIsBoolean();
 			getCompilerContext().popCurrentPrivType();
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryArithmeticOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryArithmeticOperatorNode.java
index 234e5b1b..415d0fc4 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryArithmeticOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryArithmeticOperatorNode.java
@@ -98,6 +98,14 @@ public boolean requiresTypeFromContext()
         return false;
     }
 
+	/**
+     * A +? or a -? is considered a parameter.
+     */
+    public boolean isParameterNode()
+    {
+        return requiresTypeFromContext();
+    }
+
 	/**
      * For SQRT and ABS the parameter becomes a DOUBLE.
      * For unary + and - no change is made to the
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java
index e9130069..ef3afcab 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/UnaryOperatorNode.java
@@ -552,22 +552,6 @@ public boolean constantExpression(PredicateList whereClause)
 					operand.constantExpression(whereClause);
 	}
 
-	/**
-	 * Returns true if this UnaryOperatorNode is for -?/+?.
-	 * This is required to check -?/+? say in the following sql
-	 * select * from t1 where -? and c11=c11 or +?
-	 * 
-	 * @return	True if this +?/-? node
-	 */
-	public boolean isUnaryMinusOrPlusWithParameter()
-	{
-		if (operand !=null && operand instanceof ParameterNode && operand.requiresTypeFromContext() && 
-				(operator!= null && (operator.equals("-") || operator.equals("+"))))
-			return true;
-		else
-			return false;
-	}
-
 	/**
 	 * By default unary operators don't accept ? parameters as operands.
 	 * This can be over-ridden for particular unary operators.
@@ -640,9 +624,6 @@ public void generateExpression(ExpressionClassBuilder acb,
 											MethodBuilder mb)
 									throws StandardException
 	{
-		if (operand == null)
-			return;
-
 		// For XML operator we do some extra work.
 		boolean xmlGen = (operatorType == XMLPARSE_OP) ||
 			(operatorType == XMLSERIALIZE_OP);
