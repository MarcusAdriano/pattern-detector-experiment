diff --git a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java
index dd1e73a4..8a9cf741 100644
--- a/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java
+++ b/mahout/trunk/core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java
@@ -43,6 +43,12 @@
 import java.util.List;
 import java.util.Map;
 
+/**
+ * See the SSVD code for a better option than using this:
+ *
+ * https://cwiki.apache.org/MAHOUT/stochastic-singular-value-decomposition.html
+ * @see org.apache.mahout.math.hadoop.stochasticsvd.SSVDSolver
+ */
 public class DistributedLanczosSolver extends LanczosSolver implements Tool {
 
   public static final String RAW_EIGENVECTORS = "rawEigenvectors";
diff --git a/mahout/trunk/math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java b/mahout/trunk/math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java
index 520345b1..6f3d39eb 100644
--- a/mahout/trunk/math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java
+++ b/mahout/trunk/math/src/main/java/org/apache/mahout/math/decomposer/lanczos/LanczosSolver.java
@@ -18,6 +18,7 @@
 package org.apache.mahout.math.decomposer.lanczos;
 
 
+import com.google.common.base.Preconditions;
 import org.apache.mahout.math.Matrix;
 import org.apache.mahout.math.Vector;
 import org.apache.mahout.math.VectorIterable;
@@ -34,6 +35,10 @@
  * <p>Simple implementation of the <a href="http://en.wikipedia.org/wiki/Lanczos_algorithm">Lanczos algorithm</a> for
  * finding eigenvalues of a symmetric matrix, applied to non-symmetric matrices by applying Matrix.timesSquared(vector)
  * as the "matrix-multiplication" method.</p>
+ *
+ * See the SSVD code for a better option
+ * {@link org.apache.mahout.math.ssvd.SequentialBigSvd}
+ * See also the docs on <a href=https://cwiki.apache.org/MAHOUT/stochastic-singular-value-decomposition.html>stochastic projection SVD</a>
  * <p>
  * To avoid floating point overflow problems which arise in power-methods like Lanczos, an initial pass is made
  * through the input matrix to
@@ -54,6 +59,7 @@
  * This can be made smarter if (when!) this proves to be a major bottleneck.  Of course, this step can be parallelized
  * as well.
  * </p>
+ * @see org.apache.mahout.math.ssvd.SequentialBigSvd
  */
 public class LanczosSolver {
 
@@ -157,6 +163,10 @@ public void solve(LanczosState state,
         }
         realEigen.assign(rowJ, new PlusMult(d));
       }
+
+      Preconditions.checkState(realEigen != null);
+      assert realEigen != null;
+
       realEigen = realEigen.normalize();
       state.setRightSingularVector(row, realEigen);
       double e = eigenVals.get(row) * state.getScaleFactor();
