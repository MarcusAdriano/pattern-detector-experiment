diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResource.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResource.java
index 2d8c328e..0362f327 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResource.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResource.java
@@ -31,6 +31,10 @@
 import org.apache.aries.subsystem.core.archive.RequireBundleRequirement;
 import org.apache.aries.subsystem.core.archive.RequireCapabilityHeader;
 import org.apache.aries.subsystem.core.archive.RequireCapabilityRequirement;
+import org.apache.aries.util.filesystem.FileSystem;
+import org.apache.aries.util.filesystem.ICloseableDirectory;
+import org.apache.aries.util.filesystem.IDirectory;
+import org.apache.aries.util.io.IOUtils;
 import org.osgi.resource.Capability;
 import org.osgi.resource.Requirement;
 import org.osgi.resource.Resource;
@@ -43,6 +47,12 @@ public static BundleResource newInstance(URL content) throws IOException {
 		return result;
 	}
 	
+	private static BundleManifest computeManifest(IDirectory directory) {
+		return new BundleManifest(org.apache.aries.util.manifest.BundleManifest
+				.fromBundle(directory)
+				.getRawManifest());
+	}
+	
 	private final List<Capability> capabilities = new ArrayList<Capability>();
 	private final URL content;
 	private final BundleManifest manifest;
@@ -50,57 +60,35 @@ public static BundleResource newInstance(URL content) throws IOException {
 	
 	private BundleResource(URL content) throws IOException {
 		this.content = content;
-		manifest = new BundleManifest(org.apache.aries.util.manifest.BundleManifest.fromBundle(content.openStream()).getRawManifest());
-		ExportPackageHeader eph = (ExportPackageHeader)manifest.getHeader(ExportPackageHeader.NAME);
-		if (eph != null)
-			capabilities.addAll(eph.toCapabilities(this));
-		ImportPackageHeader iph = (ImportPackageHeader)manifest.getHeader(ImportPackageHeader.NAME);
-		if (iph != null)
-			requirements.addAll(iph.toRequirements(this));
-		RequireCapabilityHeader rch = (RequireCapabilityHeader)manifest.getHeader(RequireCapabilityHeader.NAME);
-		if (rch != null)
-			for (RequireCapabilityHeader.Clause clause : rch.getClauses())
-				requirements.add(new RequireCapabilityRequirement(clause, this));
-		RequireBundleHeader rbh = (RequireBundleHeader)manifest.getHeader(RequireBundleHeader.NAME);
-		if (rbh != null)
-			for (RequireBundleHeader.Clause clause : rbh.getClauses())
-				requirements.add(new RequireBundleRequirement(clause, this));
-		// TODO The osgi.wiring.bundle capability should not be provided for fragments. Nor should the host capability.
-		BundleSymbolicNameHeader bsnh = (BundleSymbolicNameHeader)manifest.getHeader(BundleSymbolicNameHeader.NAME);
-		BundleVersionHeader bvh = (BundleVersionHeader)manifest.getHeader(BundleVersionHeader.NAME);
-		capabilities.add(new ProvideBundleCapability(bsnh, bvh, this));
-		ProvideCapabilityHeader pch = (ProvideCapabilityHeader)manifest.getHeader(ProvideCapabilityHeader.NAME);
-		if (pch != null) {
-			for (ProvideCapabilityHeader.Clause clause : pch.getClauses()) {
-				capabilities.add(new ProvideCapabilityCapability(clause, this));
+		InputStream is = content.openStream();
+		try {
+			ICloseableDirectory directory = FileSystem.getFSRoot(is);
+			try {
+				manifest = computeManifest(directory);
+				computeRequirements(directory);
+				computeCapabilities();
+			}
+			finally {
+				IOUtils.close(directory);
 			}
 		}
-		// TODO Bundle-RequiredExecutionEnvironment
+		finally {
+			// Although FileSystem.getFSRoot ultimately tries to close the
+			// provided input stream, it is possible an exception will be thrown
+			// before that happens.
+			IOUtils.close(is);
+		}
 	}
 	
 	private BundleResource(String content) throws IOException {
-		/*
-		 * TODO
-		 * Capabilities
-		 * 		Export-Package
-		 * 		Provide-Capability
-		 * 		BSN + Version (host)
-		 * 		osgi.identity
-		 * Requirements
-		 * 		Import-Package
-		 * 		Require-Bundle
-		 * 		Require-Capability
-		 * 		Fragment-Host
-		 */
 		this(new URL(content));
 	}
 
 	public List<Capability> getCapabilities(String namespace) {
 		ArrayList<Capability> result = new ArrayList<Capability>(capabilities.size());
-		for (Capability capability : capabilities) {
+		for (Capability capability : capabilities)
 			if (namespace == null || namespace.equals(capability.getNamespace()))
 				result.add(capability);
-		}
 		return result;
 	}
 	
@@ -115,17 +103,10 @@ public InputStream getContent() {
 	}
 
 	public List<Requirement> getRequirements(String namespace) {
-		/* Requirements
-		 * 		Import-Package
-		 * 		Require-Bundle
-		 * 		Require-Capability
-		 * 		Fragment-Host
-		 */
 		ArrayList<Requirement> result = new ArrayList<Requirement>();
-		for (Requirement requirement : requirements) {
+		for (Requirement requirement : requirements)
 			if (namespace == null || namespace.equals(requirement.getNamespace()))
 				result.add(requirement);
-		}
 		return result;
 	}
 	
@@ -133,4 +114,57 @@ public InputStream getContent() {
 	public String toString() {
         return content.toExternalForm();
     }
+	
+	private void computeCapabilities() {
+		computeExportPackageCapabilities();
+		computeProvideBundleCapability();
+		computeProvideCapabilityCapabilities();
+	}
+	
+	private void computeExportPackageCapabilities() {
+		ExportPackageHeader eph = (ExportPackageHeader)manifest.getHeader(ExportPackageHeader.NAME);
+		if (eph != null)
+			capabilities.addAll(eph.toCapabilities(this));
+	}
+	
+	private void computeImportPackageRequirements() {
+		ImportPackageHeader iph = (ImportPackageHeader)manifest.getHeader(ImportPackageHeader.NAME);
+		if (iph != null)
+			requirements.addAll(iph.toRequirements(this));
+	}
+	
+	private void computeProvideBundleCapability() {
+		// TODO The osgi.wiring.bundle capability should not be provided for fragments. Nor should the host capability.
+		BundleSymbolicNameHeader bsnh = (BundleSymbolicNameHeader)manifest.getHeader(BundleSymbolicNameHeader.NAME);
+		BundleVersionHeader bvh = (BundleVersionHeader)manifest.getHeader(BundleVersionHeader.NAME);
+		capabilities.add(new ProvideBundleCapability(bsnh, bvh, this));
+	}
+	
+	private void computeProvideCapabilityCapabilities() {
+		ProvideCapabilityHeader pch = (ProvideCapabilityHeader)manifest.getHeader(ProvideCapabilityHeader.NAME);
+		if (pch != null)
+			for (ProvideCapabilityHeader.Clause clause : pch.getClauses())
+				capabilities.add(new ProvideCapabilityCapability(clause, this));
+	}
+	
+	private void computeRequireBundleRequirements() {
+		RequireBundleHeader rbh = (RequireBundleHeader)manifest.getHeader(RequireBundleHeader.NAME);
+		if (rbh != null)
+			for (RequireBundleHeader.Clause clause : rbh.getClauses())
+				requirements.add(new RequireBundleRequirement(clause, this));
+	}
+	
+	private void computeRequireCapabilityRequirements() {
+		RequireCapabilityHeader rch = (RequireCapabilityHeader)manifest.getHeader(RequireCapabilityHeader.NAME);
+		if (rch != null)
+			for (RequireCapabilityHeader.Clause clause : rch.getClauses())
+				requirements.add(new RequireCapabilityRequirement(clause, this));
+	}
+	
+	private void computeRequirements(IDirectory directory) {
+		computeImportPackageRequirements();
+		computeRequireCapabilityRequirements();
+		computeRequireBundleRequirements();
+		// TODO Bundle-RequiredExecutionEnvironment
+	}
 }
diff --git a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceInstaller.java b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceInstaller.java
index 90533909..8b151dec 100644
--- a/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceInstaller.java
+++ b/aries/trunk/subsystem/subsystem-core/src/main/java/org/apache/aries/subsystem/core/internal/BundleResourceInstaller.java
@@ -13,6 +13,9 @@
  */
 package org.apache.aries.subsystem.core.internal;
 
+import java.io.InputStream;
+
+import org.apache.aries.util.io.IOUtils;
 import org.osgi.framework.Bundle;
 import org.osgi.framework.BundleException;
 import org.osgi.framework.wiring.BundleRevision;
@@ -42,12 +45,20 @@ public Resource install() {
 	
 	private BundleRevision installBundle() {
 		final Bundle bundle;
+		InputStream is = ((RepositoryContent)resource).getContent();
 		try {
-			bundle = provisionTo.getRegion().installBundle(getLocation(), ((RepositoryContent)resource).getContent());
+			bundle = provisionTo.getRegion().installBundle(getLocation(), is);
 		}
 		catch (BundleException e) {
 			throw new SubsystemException(e);
 		}
+		finally {
+			// Although Region.installBundle ultimately calls BundleContext.install,
+			// which closes the input stream, an exception may occur before this
+			// happens. Also, the Region API does not guarantee the stream will
+			// be closed.
+			IOUtils.close(is);
+		}
 		coordination.addParticipant(new Participant() {
 			public void ended(Coordination coordination) throws Exception {
 				// Nothing
diff --git a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/ApplicationTest.java b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/ApplicationTest.java
index dce841b0..702f404b 100644
--- a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/ApplicationTest.java
+++ b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/ApplicationTest.java
@@ -178,6 +178,7 @@ public void testApplication1() throws Exception {
     @Test
     public void testRequireBundle() throws Exception {
     	File file = new File(BUNDLE_B);
+    	// The following input stream is closed by the bundle context.
     	Bundle b = getRootSubsystem().getBundleContext().installBundle(file.toURI().toString(), new FileInputStream(file));
     	try {
 	    	Subsystem application = installSubsystemFromFile(APPLICATION_B);
@@ -197,6 +198,7 @@ public void testRequireBundle() throws Exception {
     @Test
     public void testRequireCapability() throws Exception {
     	File file = new File(BUNDLE_B);
+    	// The following input stream is closed by the bundle context.
     	Bundle b = getRootSubsystem().getBundleContext().installBundle(file.toURI().toString(), new FileInputStream(file));
     	try {
 	    	Subsystem application = installSubsystemFromFile(APPLICATION_A);
diff --git a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java
index 1999b442..0801b182 100644
--- a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java
+++ b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/SubsystemTest.java
@@ -44,15 +44,12 @@
 import org.apache.aries.subsystem.core.internal.BundleResource;
 import org.apache.aries.subsystem.core.internal.ResourceHelper;
 import org.apache.aries.subsystem.core.internal.SubsystemIdentifier;
-import org.apache.aries.subsystem.itests.obr.felix.RepositoryAdminRepository;
-import org.apache.aries.subsystem.itests.util.RepositoryGenerator;
 import org.apache.aries.subsystem.itests.util.TestRepository;
 import org.apache.aries.subsystem.itests.util.Utils;
 import org.apache.aries.unittest.fixture.ArchiveFixture;
 import org.apache.aries.unittest.fixture.ArchiveFixture.JarFixture;
 import org.apache.aries.unittest.fixture.ArchiveFixture.ManifestFixture;
 import org.apache.aries.unittest.fixture.ArchiveFixture.ZipFixture;
-import org.apache.felix.bundlerepository.RepositoryAdmin;
 import org.ops4j.pax.exam.Option;
 import org.ops4j.pax.exam.container.def.PaxRunnerOptions;
 import org.osgi.framework.Bundle;
@@ -181,8 +178,6 @@ public int size() {
 				// Log
 				mavenBundle("org.ops4j.pax.logging", "pax-logging-api"),
 				mavenBundle("org.ops4j.pax.logging", "pax-logging-service"),
-				// Felix Config Admin
-//				mavenBundle("org.apache.felix", "org.apache.felix.configadmin"),
 				// Felix mvn url handler
 				mavenBundle("org.ops4j.pax.url", "pax-url-mvn"),
 				// Bundles
@@ -192,7 +187,6 @@ public int size() {
 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.api"),
 				mavenBundle("org.apache.aries", "org.apache.aries.util").version("1.0.0"),
 				mavenBundle("org.apache.aries.application", "org.apache.aries.application.utils"),
-				mavenBundle("org.apache.felix", "org.apache.felix.bundlerepository"),
 				mavenBundle("org.apache.felix", "org.apache.felix.resolver"),
 				mavenBundle("org.eclipse.equinox", "org.eclipse.equinox.coordinator").version("1.1.0.v20120522-1841"),
 				mavenBundle("org.eclipse.equinox", "org.eclipse.equinox.event").version("1.2.200.v20120522-2049"),
@@ -212,8 +206,6 @@ public int size() {
 	
 	public void setUp() throws Exception {
 		super.setUp();
-		new RepositoryGenerator(bundleContext).generateOBR();
-		serviceRegistrations.add(bundleContext.registerService(Repository.class, new RepositoryAdminRepository(getOsgiService(RepositoryAdmin.class)), null));
 		try {
 			bundleContext.getBundle(0).getBundleContext().addServiceListener(subsystemEvents, '(' + Constants.OBJECTCLASS + '=' + Subsystem.class.getName() + ')');
 		}
@@ -527,9 +519,11 @@ protected static void createSubsystem(String name) throws IOException {
 	}
 	
 	protected static void createSubsystem(String name, String...contents) throws IOException {
+		// The following input stream is closed by ArchiveFixture.copy.
 		ZipFixture fixture = ArchiveFixture.newZip().binary("OSGI-INF/SUBSYSTEM.MF", new FileInputStream(name + ".mf"));
 		if (contents != null) {
 			for (String content : contents) {
+				// The following input stream is closed by ArchiveFixture.copy.
 				fixture.binary(content, new FileInputStream(content));
 			}
 		}
@@ -609,6 +603,7 @@ protected Bundle installBundleFromFile(File file, Subsystem subsystem) throws Fi
 	}
 	
 	protected Bundle installBundleFromFile(File file, BundleContext bundleContext) throws FileNotFoundException, BundleException {
+		// The following input stream is closed by the bundle context.
 		return bundleContext.installBundle(file.toURI().toString(), new FileInputStream(file));
 	}
 	
@@ -637,6 +632,7 @@ protected Subsystem installSubsystem(String location, InputStream content) throw
 	}
 	
 	protected Subsystem installSubsystem(Subsystem parent, String location) throws Exception {
+		// The following input stream is closed by Subsystem.install.
 		return installSubsystem(parent, location, new URL(location).openStream());
 	}
 	
@@ -803,15 +799,18 @@ static void createApplication(String name, String[] content) throws Exception
 		ZipFixture feature = ArchiveFixture
 				.newZip()
 				.binary("OSGI-INF/SUBSYSTEM.MF",
+						// The following input stream is closed by ArchiveFixture.copy.
 						SubsystemTest.class.getClassLoader().getResourceAsStream(
 								name + "/OSGI-INF/SUBSYSTEM.MF"));
 		for (String s : content) {
 			try {
 				feature.binary(s,
+						// The following input stream is closed by ArchiveFixture.copy.
 						SubsystemTest.class.getClassLoader().getResourceAsStream(
 								name + '/' + s));
 			}
 			catch (Exception e) {
+				// The following input stream is closed by ArchiveFixture.copy.
 				feature.binary(s, new FileInputStream(new File(s)));
 			}
 		}
diff --git a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/util/BundleInfoImpl.java b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/util/BundleInfoImpl.java
index 6e9aa301..5fe1148b 100644
--- a/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/util/BundleInfoImpl.java
+++ b/aries/trunk/subsystem/subsystem-itests/src/test/java/org/apache/aries/subsystem/itests/util/BundleInfoImpl.java
@@ -31,6 +31,7 @@
 
 import org.apache.aries.application.Content;
 import org.apache.aries.application.management.BundleInfo;
+import org.apache.aries.util.io.IOUtils;
 import org.apache.aries.util.manifest.ManifestHeaderProcessor;
 import org.osgi.framework.Constants;
 import org.osgi.framework.Version;
@@ -47,7 +48,12 @@ public BundleInfoImpl(String pathToJar) {
         	File jarFile = new File(pathToJar);
             this.path = jarFile.toURI().toURL().toString();
             JarFile f = new JarFile(new File(pathToJar));
+            try {
             manifest = f.getManifest();
+            }
+            finally {
+            	IOUtils.close(f);
+            }
         } catch (IOException e) {
             // TODO Auto-generated catch block
             e.printStackTrace();
