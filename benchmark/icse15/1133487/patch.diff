diff --git a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/update/SolrIndexConfig.java b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/update/SolrIndexConfig.java
index ae3e5e9f..c48973f7 100644
--- a/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/update/SolrIndexConfig.java
+++ b/lucene/dev/branches/branch_3x/solr/src/java/org/apache/solr/update/SolrIndexConfig.java
@@ -42,7 +42,7 @@
   public static final Logger log = LoggerFactory.getLogger(SolrIndexConfig.class);
   
   public static final String defaultsName ="indexDefaults";
-  public static final String DEFAULT_MERGE_POLICY_CLASSNAME = LogByteSizeMergePolicy.class.getName();
+  final String defaultMergePolicyClassName;
   public static final String DEFAULT_MERGE_SCHEDULER_CLASSNAME = ConcurrentMergeScheduler.class.getName();
   static final SolrIndexConfig defaultDefaults = new SolrIndexConfig();
 
@@ -60,6 +60,7 @@ private SolrIndexConfig() {
     termIndexInterval = IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL;
     mergePolicyInfo = null;
     mergeSchedulerInfo = null;
+    defaultMergePolicyClassName = TieredMergePolicy.class.getName();
   }
 
   public final Version luceneVersion;
@@ -89,6 +90,7 @@ public SolrIndexConfig(SolrConfig solrConfig, String prefix, SolrIndexConfig def
 
     luceneVersion = solrConfig.luceneMatchVersion;
 
+    defaultMergePolicyClassName = luceneVersion.onOrAfter(Version.LUCENE_33) ? TieredMergePolicy.class.getName() : LogByteSizeMergePolicy.class.getName();
     useCompoundFile=solrConfig.getBool(prefix+"/useCompoundFile", def.useCompoundFile);
     maxBufferedDocs=solrConfig.getInt(prefix+"/maxBufferedDocs",def.maxBufferedDocs);
     maxMergeDocs=solrConfig.getInt(prefix+"/maxMergeDocs",def.maxMergeDocs);
@@ -165,7 +167,7 @@ public IndexWriterConfig toIndexWriterConfig(IndexSchema schema) {
 
   private MergePolicy buildMergePolicy(IndexSchema schema) {
     MergePolicy policy;
-    String mpClassName = mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME : mergePolicyInfo.className;
+    String mpClassName = mergePolicyInfo == null ? defaultMergePolicyClassName : mergePolicyInfo.className;
 
     try {
       policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName, null, new Class[]{IndexWriter.class}, new Object[]{this});
@@ -173,9 +175,6 @@ private MergePolicy buildMergePolicy(IndexSchema schema) {
       policy = (MergePolicy) schema.getResourceLoader().newInstance(mpClassName);
     }
 
-    if (mergePolicyInfo != null)
-      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);
-
     if (policy instanceof LogMergePolicy) {
       LogMergePolicy logMergePolicy = (LogMergePolicy) policy;
 
@@ -186,10 +185,22 @@ private MergePolicy buildMergePolicy(IndexSchema schema) {
 
       if (mergeFactor != -1)
         logMergePolicy.setMergeFactor(mergeFactor);
+    } else if (policy instanceof TieredMergePolicy) {
+      TieredMergePolicy tieredMergePolicy = (TieredMergePolicy) policy;
+      
+      tieredMergePolicy.setUseCompoundFile(useCompoundFile);
+      
+      if (mergeFactor != -1) {
+        tieredMergePolicy.setMaxMergeAtOnce(mergeFactor);
+        tieredMergePolicy.setSegmentsPerTier(mergeFactor);
+      }
     } else {
-      log.warn("Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy. The configured policy's defaults will be used.");
+      log.warn("Use of compound file format or mergefactor cannot be configured if merge policy is not an instance of LogMergePolicy or TieredMergePolicy. The configured policy's defaults will be used.");
     }
 
+    if (mergePolicyInfo != null)
+      SolrPluginUtils.invokeSetters(policy, mergePolicyInfo.initArgs);
+
     return policy;
   }
 
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestConfig.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestConfig.java
index 7b79a621..35454977 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestConfig.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestConfig.java
@@ -19,6 +19,7 @@
 package org.apache.solr.core;
 
 import org.apache.lucene.index.IndexWriter;
+import org.apache.lucene.index.TieredMergePolicy;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.handler.admin.ShowFileRequestHandler;
 import org.apache.solr.request.SolrQueryRequest;
@@ -96,7 +97,7 @@ public void testLucene23Upgrades() throws Exception {
     double bufferSize = solrConfig.getDouble("indexDefaults/ramBufferSizeMB");
     assertTrue(bufferSize + " does not equal: " + 32, bufferSize == 32);
     String mergePolicy = solrConfig.get("indexDefaults/mergePolicy/@class");
-    assertTrue(mergePolicy + " is not equal to " + SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME, mergePolicy.equals(SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME) == true);
+    assertEquals(TieredMergePolicy.class.getName(), mergePolicy);
     String mergeSched = solrConfig.get("indexDefaults/mergeScheduler/@class");
     assertTrue(mergeSched + " is not equal to " + SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME, mergeSched.equals(SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME) == true);
   }
diff --git a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestMergePolicyConfig.java b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestMergePolicyConfig.java
index e69de29b..5db7b187 100644
--- a/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestMergePolicyConfig.java
+++ b/lucene/dev/branches/branch_3x/solr/src/test/org/apache/solr/core/TestMergePolicyConfig.java
@@ -0,0 +1,49 @@
+package org.apache.solr.core;
+
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import org.apache.lucene.index.IndexWriterConfig;
+import org.apache.lucene.index.MergePolicy;
+import org.apache.lucene.index.TieredMergePolicy;
+import org.apache.solr.SolrTestCaseJ4;
+import org.junit.BeforeClass;
+
+public class TestMergePolicyConfig extends SolrTestCaseJ4 {
+
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+    initCore("solrconfig-mergepolicy.xml","schema.xml");
+  }
+  
+  public void testTieredMergePolicyConfig() throws Exception {
+    IndexWriterConfig iwc = solrConfig.defaultIndexConfig.toIndexWriterConfig(h.getCore().getSchema());
+    MergePolicy mp = iwc.getMergePolicy();
+    assertTrue(mp instanceof TieredMergePolicy);
+    TieredMergePolicy tieredMP = (TieredMergePolicy) mp;
+
+    // mp-specific setter
+    assertEquals(19, tieredMP.getMaxMergeAtOnceExplicit());
+    
+    // make sure we apply compoundFile and mergeFactor
+    assertEquals(false, tieredMP.getUseCompoundFile());
+    assertEquals(7, tieredMP.getMaxMergeAtOnce());
+    
+    // make sure we overrode segmentsPerTier (split from maxMergeAtOnce out of mergeFactor)
+    assertEquals(9D, tieredMP.getSegmentsPerTier(), 0.001);
+  }
+}
