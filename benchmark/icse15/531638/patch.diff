diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
index c18ff744..59a42a91 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java
@@ -1141,22 +1141,15 @@ public void rollback() throws SQLException {
      */
     public void close() throws SQLException {
 		// JDK 1.4 javadoc indicates close on a closed connection is a no-op
-		if (isClosed())
-		   	return;
-
-
-		if (rootConnection == this)
-		{
-			/* Throw error to match DB2/JDBC if a tran is pending in non-autocommit mode */
-			if (!autoCommit && !transactionIsIdle()) {
-				throw newSQLException(SQLState.LANG_INVALID_TRANSACTION_STATE);
+		if (!isClosed() &&
+				(rootConnection == this) && 
+				(!autoCommit && !transactionIsIdle())) {
+			throw newSQLException(
+				SQLState.LANG_INVALID_TRANSACTION_STATE);
 			}
 
 			close(exceptionClose);
 		}
-		else
-			setInactive(); // nested connection
-	}
 
 	// This inner close takes the exception and calls 
 	// the context manager to make the connection close.
@@ -1174,6 +1167,7 @@ private void close(StandardException e) throws SQLException {
 				 * If it isn't active, it's already been closed.
 				 */
 				if (active) {
+					if (tr.isActive()) {
 					setupContextStack();
 					try {
 						tr.rollback();
@@ -1191,6 +1185,13 @@ private void close(StandardException e) throws SQLException {
 					} finally {
 						restoreContextStack();
 					}
+					} else {
+						// DERBY-1947: If another connection has closed down
+						// the database, the transaction is not active, but
+						// the cleanup has not been done yet.
+						tr.clearLcc(); 
+						tr.cleanupOnError(e);
+					}
 				}
 			}
 
@@ -1211,9 +1212,6 @@ public final boolean isClosed() {
 			if (getTR().isActive()) {
 				return false;
 			}
-
-			setInactive();
-
 		}
 		return true;
 	}
@@ -1608,13 +1606,21 @@ public final void setInactive() {
 	 */
 	protected void finalize() throws Throwable 
 	{
-		if (rootConnection == this)
-		{
-			super.finalize();
-			if (!isClosed())
+		try {
+			// Only close root connections, since for nested
+			// connections, it is not strictly necessary and close()
+			// synchronizes on the root connection which can cause
+			// deadlock with the call to runFinalization from
+			// GenericPreparedStatement#prepareToInvalidate (see
+			// DERBY-1947) on SUN VMs.
+			if (rootConnection == this) {
 	    		close(exceptionClose);
 		}
 	}
+		finally {
+			super.finalize();
+		}
+	}
 
 	/**
 	 * if auto commit is on, remember that we need to commit
