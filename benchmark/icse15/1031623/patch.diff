diff --git a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
index 94ca0e63..bddfb60c 100644
--- a/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
+++ b/db/derby/code/branches/10.6/java/engine/org/apache/derby/impl/sql/catalog/DataDictionaryImpl.java
@@ -1655,6 +1655,7 @@ private SchemaDescriptor locateSchemaRow(String schemaName,
 						(TupleDescriptor) null,
 						(List) null,
 						false,
+                        TransactionController.ISOLATION_REPEATABLE_READ,
 						tc);
 	}
 
@@ -4925,8 +4926,15 @@ public ConstraintDescriptor getConstraintDescriptor(UUID uuid)
 					false);
 	}
 
-	/** get all the statistiscs descriptors for a given table.
-	 * @param  td	Table Descriptor for which I need statistics
+    /**
+     * Returns all the statistics descriptors for the given table.
+     * <p>
+     * NOTE: As opposed to most other data dictionary lookups, this operation is
+     * performed with isolation level READ_UNCOMMITTED. The reason is to avoid
+     * deadlocks with inserts into the statistics system table.
+     *
+     * @param td {@code TableDescriptor} for which I need statistics
+     * @return A list of tuple descriptors, possibly empty.
 	 */
 	public List getStatisticsDescriptors(TableDescriptor td)
 		throws StandardException
@@ -4945,7 +4953,10 @@ public List getStatisticsDescriptors(TableDescriptor td)
 							  (ScanQualifier [][])null,
 							  ti, 
 							  (TupleDescriptor)null,
-							  statDescriptorList, false);
+                              statDescriptorList,
+                              false,
+                              TransactionController.ISOLATION_READ_UNCOMMITTED,
+                              getTransactionCompile());
 
 		return statDescriptorList;
 	}
@@ -8479,53 +8490,6 @@ private final TupleDescriptor getDescriptorViaIndex(
 	 * @param list      The list to build, if supplied.  If null, then
 	 *					caller expects a single descriptor
 	 * @param forUpdate	Whether or not to open the index for update.
-	 * @param tc        Transaction controller
-	 *
-	 * @return	The last matching descriptor
-	 *
-	 * @exception StandardException		Thrown on error
-	 */
-	private final TupleDescriptor getDescriptorViaIndex(
-						int indexId,
-						ExecIndexRow keyRow,
-						ScanQualifier [][] scanQualifiers,
-						TabInfoImpl ti,
-						TupleDescriptor parentTupleDescriptor,
-						List list,
-						boolean forUpdate,
-						TransactionController tc)
-			throws StandardException
-	{
-		if (tc == null) {
-			tc = getTransactionCompile();
-		}
-
-		return getDescriptorViaIndexMinion(
-			indexId,
-			keyRow,
-			scanQualifiers,
-			ti,
-			parentTupleDescriptor,
-			list,
-			forUpdate,
-			TransactionController.ISOLATION_REPEATABLE_READ,
-			tc);
-	}
-
-	/**
-	 * Return a (single or list of) catalog row descriptor(s) from a
-	 * system table where the access is from the index to the heap.
-	 *
-	 * This overload variant takes an explicit tc, in contrast to the normal
-	 * one which uses the one returned by getTransactionCompile.
-	 *
-	 * @param indexId   The id of the index (0 to # of indexes on table) to use
-	 * @param keyRow    The supplied ExecIndexRow for search
-	 * @param ti        The TabInfoImpl to use
-	 * @param parentTupleDescriptor The parentDescriptor, if applicable.
-	 * @param list      The list to build, if supplied.  If null, then
-	 *                  caller expects a single descriptor
-	 * @param forUpdate Whether or not to open the index for update.
 	 * @param isolationLevel
 	 *                  Use this explicit isolation level. Only
 	 *                  ISOLATION_REPEATABLE_READ (normal usage) or
@@ -8583,7 +8547,6 @@ private final TupleDescriptor getDescriptorViaIndexMinion(
 		CatalogRowFactory		rf = ti.getCatalogRowFactory();
 		ConglomerateController	heapCC;
 		ExecIndexRow	  		indexRow1;
-		ExecIndexRow			indexTemplateRow;
 		ExecRow 				outRow;
 		RowLocation				baseRowLocation;
 		ScanController			scanController;
@@ -8595,13 +8558,6 @@ private final TupleDescriptor getDescriptorViaIndexMinion(
 				 TransactionController.ISOLATION_REPEATABLE_READ ||
 				 isolationLevel ==
 				 TransactionController.ISOLATION_READ_UNCOMMITTED);
-
-			if (isolationLevel ==
-				 TransactionController.ISOLATION_READ_UNCOMMITTED) {
-				// list not used for this case
-				SanityManager.ASSERT(list == null);
-			}
-
 		}
 
 		outRow = rf.makeEmptyRow();
@@ -8714,7 +8670,10 @@ private final TupleDescriptor getDescriptorViaIndexMinion(
 				// possibly see that the base row does not exist even if the
 				// index row did.  This mode is currently only used by
 				// TableNameInfo's call to hashAllTableDescriptorsByTableId,
-				// cf. DERBY-3678. A table's schema descriptor is attempted
+				// cf. DERBY-3678, and by getStatisticsDescriptors,
+                // cf. DERBY-4881.
+                //
+                // For the former call, a table's schema descriptor is attempted
 				// read, and if the base row for the schema has gone between
 				// reading the index and the base table, the table that needs
 				// this information has gone, too.  So, the table should not
@@ -8750,7 +8709,7 @@ private final TupleDescriptor getDescriptorViaIndexMinion(
 			{
 				break;
 			}
-			else
+			else if (td != null)
 			{
 				list.add(td);
 			}
@@ -9438,7 +9397,6 @@ private RowLocation computeRowLocation(TransactionController tc,
 	{
 		TabInfoImpl ti = getNonCoreTI(SYSSEQUENCES_CATALOG_NUM);
 		ExecIndexRow keyRow = null;
-		ExecRow row;
 
 		keyRow = (ExecIndexRow)exFactory.getIndexableRow(1);
 		keyRow.setColumn(1, new SQLChar( sequenceIDstring ) );
@@ -9446,7 +9404,7 @@ private RowLocation computeRowLocation(TransactionController tc,
 		rowLocation[ 0 ] = ti.getRowLocation( tc, keyRow, SYSSEQUENCESRowFactory.SYSSEQUENCES_INDEX1_ID );
         
         sequenceDescriptor[ 0 ] = (SequenceDescriptor)
-            getDescriptorViaIndexMinion
+            getDescriptorViaIndex
             (
              SYSSEQUENCESRowFactory.SYSSEQUENCES_INDEX1_ID,
              keyRow,
