diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
index f67f0dbd..b74937ec 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/sql/compile/FromVTI.java
@@ -885,10 +885,14 @@ public void bindExpressions(FromList fromListParam)
             //
             // Table Function parameters may not reference columns from other tables in the
             // FROM list of the current query block. See DERBY-5579. We also do not allow
-            // VTI parameters to refer to other VTIs.
+            // VTI parameters to refer to other VTIs. We also do not allow even VTIs to
+            // reference other elements in the current <joined table>.
             //
             int referencedTableNumber = ref.getTableNumber();
+            boolean illegalReference = !ref.getCorrelated();
 
+            if ( !ref.getCorrelated() ) // if the arg refers to a table in this query block
+            {
             for ( int i = 0; i < fromListParam.size(); i++ )
             {
                 FromTable   fromTable = (FromTable) fromListParam.elementAt( i );
@@ -899,12 +903,21 @@ public void bindExpressions(FromList fromListParam)
                     // from actual result columns later on.
                     argSources.put( new Integer( fromTable.getTableNumber() ), fromTable );
                     
-                    if ( isDerbyStyleTableFunction || (fromTable instanceof FromVTI) )
+                        // the only legal kind of reference is a VTI argument which
+                        // references a non-VTI table in the current query block
+                        if ( !isDerbyStyleTableFunction && !(fromTable instanceof FromVTI) )
                     {
-                        throw StandardException.newException
-                            ( SQLState.LANG_BAD_TABLE_FUNCTION_PARAM_REF, ref.getSQLColumnName() );
+                            illegalReference = false;
+                            break;
+                        }
+                    }
                     }
                 }
+            
+            if ( illegalReference )
+            {
+                throw StandardException.newException
+                    ( SQLState.LANG_BAD_TABLE_FUNCTION_PARAM_REF, ref.getSQLColumnName() );
             }
 
 			// Rebind the CR if the tableNumber is uninitialized
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
index 6cf00408..a5f777f3 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/lang/TableFunctionTest.java
@@ -52,6 +52,8 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
     private static  final   String  UTF8 = "UTF-8";
 
+    private static  final   String  BAD_ARG_JOIN = "42ZB7";
+
     private static  final   int MAX_VARIABLE_DATA_TYPE_LENGTH = 32700;
     
     // functions to drop at teardown time
@@ -2064,10 +2066,34 @@ private void  derby_5779()
         // by DERBY-5779.
         expectError
             (
-             "42ZB7",
+             BAD_ARG_JOIN,
              "select tablename, contents\n" +
              "from sys.systables t, table( lowerCaseRow( cast (t.tablename as varchar(32672)) ) ) s\n"
              );
+        // diagnostic vti arg joining to another table in a <joined table> clause
+        expectError
+            (
+             BAD_ARG_JOIN,
+             "select tt.* from table(syscs_diag.space_table(st.tablename)) tt join sys.systables st using(tableid)"
+             );
+        // table function arg joining to another table in a <joined table> clause
+        expectError
+            (
+             BAD_ARG_JOIN,
+             "select tt.* from table( lowerCaseRow(st.tablename)) tt join sys.systables st on tt.contents = st.tablename"
+             );
+        // diagnostic vti arg joining to another table in a <joined table> clause
+        expectError
+            (
+             BAD_ARG_JOIN,
+             "select tt.* from table(syscs_diag.space_table(st.tablename)) tt right join sys.systables st using(tableid)"
+             );
+        // table function arg joining to another table in a <joined table> clause
+        expectError
+            (
+             BAD_ARG_JOIN,
+             "select tt.* from table( lowerCaseRow(st.tablename)) tt right join sys.systables st on tt.contents = st.tablename"
+             );
 
         // pre-existing error not affected: table function correlated
         // to inner query block
