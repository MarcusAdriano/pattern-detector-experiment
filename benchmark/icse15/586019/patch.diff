diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/types/Like.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/types/Like.java
index abaa7a7d..047fc0f5 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/types/Like.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/types/Like.java
@@ -53,6 +53,11 @@ private Like() { // do not instantiate
 	}
 
 	/**
+	  
+	 This method gets called for UCS_BASIC and territory based character
+	 string types to look for a pattern in a value string. It also deals
+	 with escape character if user has provided one.
+	  
 		@param val value to compare. if null, result is null.
 		@param valLength length of val
 		@param pat pattern to compare. if null, result is null.
@@ -60,6 +65,10 @@ private Like() { // do not instantiate
 		@param escape escape character. Must be 1 char long.
 			if null, no escape character is used.
 		@param escapeLength length of escape
+		@param collator null if we are dealing with UCS_BASIC 
+		    character string types. If not null, then we use it to 
+		    get collation elements for characters in val and 
+		    non-metacharacters in pat to do the comparison.
 
 		@return null if val or pat null, otherwise true if match
 		and false if not.
@@ -72,10 +81,12 @@ private Like() { // do not instantiate
 		char[] 	pat, 
 		int 	patLength, 
 		char[] 	escape,
-		int 	escapeLength
+		int 	escapeLength,
+		RuleBasedCollator collator
 	) throws StandardException 
 	{
-		return like(val, 0, valLength, pat, 0, patLength, escape, escapeLength);
+		return like(val, 0, valLength, pat, 0, patLength, escape, 
+				escapeLength, collator);
 	}
 
 	/**
@@ -107,7 +118,8 @@ private Like() { // do not instantiate
 		return like(val, 0, valLength, pat, 0, patLength, escape, escapeLength, collator);
 	}
 
-	/* non-national chars */
+	/* For character string types with UCS_BASIC and territory based
+	 * collation. There is a different method for non-national chars */
 	private static Boolean like
 	(
 		char[] 	val, 
@@ -117,7 +129,8 @@ private Like() { // do not instantiate
 		int 	pLoc, 	// start at pat[pLoc]
 		int 	pEnd, 	// end at pat[pEnd]
 		char[] 	escape,
-		int 	escapeLength
+		int 	escapeLength,
+		RuleBasedCollator collator
 	) throws StandardException 
 	{
 		char escChar = ' ';
@@ -147,19 +160,15 @@ private Like() { // do not instantiate
 			// go until we get a special char in the pattern or hit EOS
 			while (pat[pLoc] != anyChar && pat[pLoc] != anyString &&
 					((! haveEsc) || pat[pLoc] != escChar)) {
-				if (val[vLoc] == pat[pLoc]) 
-				{
+				if (checkEquality(val, vLoc, pat, pLoc, collator)) {
 					vLoc++; pLoc++;
 	
 					result = checkLengths(vLoc, vEnd, pLoc, pat, pEnd);
 					if (result != null) 
 						return result;
-				}
-				else 
-				{
+				} else
 					return Boolean.FALSE;
 				}
-			}
 
 			// deal with escChar first, as it can be escaping a special char
 			// and can be a special char itself.
@@ -174,7 +183,7 @@ private Like() { // do not instantiate
 					throw StandardException.newException(SQLState.LANG_INVALID_ESCAPE_SEQUENCE);
 				}
 				// regardless of the char in pat, it must match exactly:
-				if (val[vLoc] == pat[pLoc]) {
+				if (checkEquality(val, vLoc, pat, pLoc, collator)) {
 					vLoc++; pLoc++;
 	
 					result = checkLengths(vLoc, vEnd, pLoc, pat, pEnd);
@@ -233,7 +242,8 @@ else if (pat[pLoc] == anyString) {
 				int minLen = getMinLen(pat, pLoc+1, pEnd, haveEsc, escChar);
 				for (int i=vRem; i>=minLen; i--) 
 				{
-					Boolean restResult = Like.like(val,vLoc+n,vLoc+n+i,pat,pLoc+1,pEnd,escape,escapeLength);
+					Boolean restResult = Like.like(val, vLoc+n, vLoc+n+i, pat,
+							pLoc+1, pEnd, escape, escapeLength, collator);
 					if (SanityManager.DEBUG)
 					{
 						if (restResult == null)
@@ -254,6 +264,60 @@ else if (pat[pLoc] == anyString) {
 		}
 	}
 
+	/**
+	 * Make sure that the character in val matches the character in pat.
+	 * If we are dealing with UCS_BASIC character string (ie collator is null)
+	 * then we can just do simple character equality check. But if we are
+	 * dealing with territory based character string type, then we need to 
+	 * convert the character in val and pat into it's collation element(s)
+	 * and then do collation element equality comparison.
+	 * 
+	 * @param val value to compare.
+	 * @param vLoc character position in val.
+	 * @param pat pattern to look for in val.
+	 * @param pLoc character position in pat.
+	 * @param collator null if we are dealing with UCS_BASIC character string
+	 * types. If not null, then we use it to get collation elements for 
+	 * character in val and pat to do the equality comparison.
+	 * @return
+	 */
+	private static boolean checkEquality(char[] val, int vLoc,
+			char[] pat, int pLoc, RuleBasedCollator collator) {
+		CollationElementIterator patternIterator;
+		int curCollationElementInPattern;
+		CollationElementIterator valueIterator;
+		int curCollationElementInValue;
+
+		if (collator == null) {//dealing with UCS_BASIC character string
+			if (val[vLoc] == pat[pLoc]) 
+				return true;
+			else 
+				return false;
+		} else {//dealing with territory based character string
+			patternIterator = collator.getCollationElementIterator(
+					new String(pat, pLoc, 1));
+			valueIterator = collator.getCollationElementIterator(
+					new String(val, vLoc, 1));
+			curCollationElementInPattern = patternIterator.next(); 
+			curCollationElementInValue = valueIterator.next();
+			while (curCollationElementInPattern == curCollationElementInValue)
+			{
+				if (curCollationElementInPattern == CollationElementIterator.NULLORDER)
+					break;
+				curCollationElementInPattern = patternIterator.next(); 
+				curCollationElementInValue = valueIterator.next(); 
+			}
+			//If the current collation element for the character in pattern 
+			//and value do not match, then we have found a mismatach and it
+			//is time to return FALSE from this method.
+			if (curCollationElementInPattern != curCollationElementInValue)
+				return false;
+			else
+				return true;
+		}
+		
+	}
+
 	/* national chars */
 	private static Boolean like
 	(
@@ -644,13 +708,17 @@ private static boolean matchSpecial(int[] pat, int patStart, int patEnd, int[] s
 		return true;
 	}
 
-
 	/*
-		Most typical interface for non-national chars
+		Most typical interface for character string types with UCS_BASIC and 
+		territory based collation. There is a different method for non-national 
+		chars.
 	 */
-	public static Boolean like(char[] value, int valueLength, char[] pattern, int patternLength) throws StandardException { 
+	public static Boolean like(char[] value, int valueLength, char[] pattern, 
+			int patternLength, RuleBasedCollator collator) 
+	throws StandardException { 
 		if (value == null || pattern == null) return null;
-		return like(value, valueLength, pattern, patternLength, null, 0);
+		return like(value, valueLength, pattern, patternLength, null, 0, 
+				collator);
 	}
 
 	/*
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/types/SQLChar.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/types/SQLChar.java
index 87196bc4..29109c1c 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/types/SQLChar.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/types/SQLChar.java
@@ -1691,7 +1691,8 @@ public BooleanDataValue like(DataValueDescriptor pattern)
 			likeResult = Like.like(evalCharArray, 
 								   getLength(),
  		    					   patternCharArray,
-								   pattern.getLength());
+								   pattern.getLength(),
+								   null);
 		}
 		else
 		{
@@ -1774,7 +1775,8 @@ public BooleanDataValue like(
  		    					   patternCharArray,
 								   pattern.getLength(),
 								   escapeCharArray,
-								   escapeLength);
+								   escapeLength,
+								   null);
 		}
 		else
 		{
diff --git a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/types/WorkHorseForCollatorDatatypes.java b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/types/WorkHorseForCollatorDatatypes.java
index d919f925..b078c151 100644
--- a/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/types/WorkHorseForCollatorDatatypes.java
+++ b/db/derby/code/branches/10.3/java/engine/org/apache/derby/iapi/types/WorkHorseForCollatorDatatypes.java
@@ -125,15 +125,15 @@ BooleanDataValue like(DataValueDescriptor pattern)
 			SanityManager.ASSERT(
 				pattern instanceof CollationElementsInterface,
 				"Both the operands must be instances of CollationElementsInterface");
-		CollationElementsInterface patternToCheck = (CollationElementsInterface) pattern;
-		likeResult = Like.like(
-				getCollationElementsForString(),
-				getCountOfCollationElements(),
-				patternToCheck.getCollationElementsForString(),
-				patternToCheck.getCountOfCollationElements(),
+		likeResult = Like.like(stringData.getCharArray(), 
+				stringData.getLength(), 
+				((SQLChar)pattern).getCharArray(), 
+				pattern.getLength(), 
+				null, 
+				0,
 				collatorForCharacterDatatypes);
 
-		return SQLBoolean.truthValue(stringData,
+		return SQLBoolean.truthValue(stringData ,
 									 pattern,
 									 likeResult);
 	}
@@ -169,7 +169,6 @@ BooleanDataValue like(DataValueDescriptor pattern,
 			throw StandardException.newException(SQLState.LANG_ESCAPE_IS_NULL);
 		}
 
-		CollationElementsInterface patternToCheck = (CollationElementsInterface) pattern;
 		CollationElementsInterface escapeCharacter = (CollationElementsInterface) escape;
 
 		if (escapeCharacter.getCollationElementsForString() != null && 
@@ -178,13 +177,12 @@ BooleanDataValue like(DataValueDescriptor pattern,
 			throw StandardException.newException(SQLState.LANG_INVALID_ESCAPE_CHARACTER,
 					new String(escapeCharacter.toString()));
 		}
-		likeResult = Like.like(
-				getCollationElementsForString(),
-				getCountOfCollationElements(),
-				patternToCheck.getCollationElementsForString(),
-				patternToCheck.getCountOfCollationElements(),
-				escapeCharacter.getCollationElementsForString(),
-				escapeCharacter.getCountOfCollationElements(),
+		likeResult = Like.like(stringData.getCharArray(), 
+				stringData.getLength(), 
+				((SQLChar)pattern).getCharArray(), 
+				pattern.getLength(), 
+				((SQLChar)escape).getCharArray(), 
+				escape.getLength(),
 				collatorForCharacterDatatypes);
 
 		return SQLBoolean.truthValue(stringData,
diff --git a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
index 07a2152a..2b8c9845 100644
--- a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
+++ b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest.java
@@ -93,7 +93,9 @@ public CollationTest(String name) {
    */
 public void testDefaultCollation() throws SQLException {
 
-      getConnection().setAutoCommit(false);
+
+    Connection conn = getConnection();
+      conn.setAutoCommit(false);
       Statement s = createStatement();
       PreparedStatement ps;
       ResultSet rs;
@@ -274,13 +276,64 @@ public void testDefaultCollation() throws SQLException {
       //End of parameter testing
       
       s.close();
+      compareAgrave(conn,1,1);
       }
       
+
+public void testFrenchCollation() throws SQLException {
+    Connection conn = getConnection();
+    compareAgrave(conn,2,1);    
+}
+
+
+
+   /**
+   * For a TERRITORY_BASED collation french database, differences between pre-composed accents such 
+   * as "\u00C0" (A-grave) and combining accents such as "A\u0300" (A, combining-grave) should match
+   * for = and like. But they do not match for UCS_BASIC. We insert both into a table and search
+   * based on equal and like. 
+   *  
+   * @param conn
+   * @param expectedMatchCount  number of rows we expect back. 2 for french, 1 for English 
+   * @throws SQLException
+   */
+   private void compareAgrave(Connection conn, int expectedMatchCountForEqual,
+		int expectedMatchCountForLike) throws SQLException {
+      
+      String agrave = "\u00C0";
+      String agraveCombined ="A\u0300";
+      Statement s = conn.createStatement();
+      
+      try {
+          s.executeUpdate("DROP TABLE T");
+      }catch (SQLException se) {}
+      s.executeUpdate("CREATE TABLE T (vc varchar(30))");
+      PreparedStatement ps = conn.prepareStatement("INSERT INTO T VALUES (?)");
+      ps.setString(1,agrave);
+      ps.executeUpdate();
+      ps.setString(1,agraveCombined);
+      ps.executeUpdate();
+      ps.close();
+        
+      ps = conn.prepareStatement("SELECT COUNT(*) FROM T WHERE VC = ?");
+      ps.setString(1, agrave);
+      ResultSet rs = ps.executeQuery();
+      JDBC.assertSingleValueResultSet(rs, Integer.toString(expectedMatchCountForEqual));
+      ps = conn.prepareStatement("SELECT COUNT(*) FROM T WHERE VC LIKE ?");
+      ps.setString(1, agrave);
+      rs = ps.executeQuery();
+      JDBC.assertSingleValueResultSet(rs, Integer.toString(expectedMatchCountForLike));
+      rs.close();
+      ps.close();
+      s.close();
+  }
+
+
   /**
    * Test order by with polish collation
    * @throws SQLException
    */
-public void testPolishCollation() throws SQLException {
+   public void testPolishCollation() throws SQLException {
 
       getConnection().setAutoCommit(false);
       Statement s = createStatement();
@@ -1016,6 +1069,19 @@ private void commonTestingForTerritoryBasedDB(Statement s) throws SQLException{
     s.execute("ALTER TABLE DERBY_2973 ALTER V SET DATA TYPE VARCHAR(4096)");
     s.execute("INSERT INTO DERBY_2973 VALUES('hello')");
     
+    //DERBY-2967
+    //The special character _ should match one character and not just advance
+    //by number of collation elements that special character _ represents
+    s.executeUpdate("create table DERBY_2967(c11 int)"); 
+    s.executeUpdate("insert into DERBY_2967 values 1"); 
+    ps = conn.prepareStatement("select 1 from DERBY_2967 where '\uFA2D' like ?");
+    String[] match = { "%", "_", "\uFA2D" }; 
+    for (int i = 0; i < match.length; i++) { 
+        ps.setString(1, match[i]); 
+        rs = ps.executeQuery(); 
+        JDBC.assertFullResultSet(rs,new String[][] {{"1"}});
+    }
+
     //DERBY-2961
     //Should generate collation sensitive data type when working with something
     //like V AS CLOB insdie XMLSERIALIZE as shown below 
diff --git a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java
index f762ce8f..53c5753d 100644
--- a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java
+++ b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/CollationTest2.java
@@ -321,11 +321,11 @@
     private static final int[] NORWAY_LIKE_RESULT =
     {
         0,
-        0,
-        9,
+        -1,
         9,
+        -1,
         8,
-        8,
+        -1,
         8,
         10
     };
@@ -1826,6 +1826,7 @@ private void runBulkInsert(
           {"\u00ADa"}, 
           {"ekstra\u00ADarbeid"}, 
           {"ekstrabetaling"}, 
+          {"ekstraarbeid"}, 
           {"Wanvik"}, 
           {"W\u00E5gan"},
           {"Waagan"}, 
diff --git a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DynamicLikeOptimizationTest.java b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DynamicLikeOptimizationTest.java
index 146b119d..5e0c73ce 100644
--- a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DynamicLikeOptimizationTest.java
+++ b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/DynamicLikeOptimizationTest.java
@@ -530,6 +530,15 @@ public void testEscapedEscapeCharacterPrecedingFirstWildcard()
      */
     public void testDynamicLikeOptimization() throws SQLException {
         Statement s = createStatement();
+        ResultSet rs = s.executeQuery( 
+          		"VALUES SYSCS_UTIL.SYSCS_GET_DATABASE_PROPERTY('derby.database.collation')");
+        if (rs.next()){
+        	if (rs.getString(1).equals("TERRITORY_BASED")) {
+        		rs.close();
+        		s.close();
+        		return;
+        	}
+        }
         s.execute("CALL SYSCS_UTIL.SYSCS_SET_RUNTIMESTATISTICS(1)");
         PreparedStatement ps =
             prepareStatement("select id from test where vc10 like ?");
diff --git a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/StreamsTest.java b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/StreamsTest.java
index c07dd44f..88a26919 100644
--- a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/StreamsTest.java
+++ b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/functionTests/tests/lang/StreamsTest.java
@@ -156,16 +156,16 @@ public void testStreams() throws Exception {
         s.executeUpdate("insert into t4 values (1, 'ccccc')");
         ps = prepareStatement("insert into t4 values(?, ?)");
         insertLongString(ps, 6, false);
-        s.executeUpdate("insert into t4 values (3, 'aaaaabbbbbb')");
+        s.executeUpdate("insert into t4 values (3, 'abbb')");
         s.executeUpdate("insert into t4 values (4, 'bbbbbb')");
         insertLongString(ps, 5, false);
         ps.close();
         ResultSet rs = s
         .executeQuery("select id, cast(longcol as varchar(8192)) lcol from t4 order by lcol");
         
-        assertTrue(rs.next()); // 3, aaaaabbbbbb
+        assertTrue(rs.next()); // 3, abbb
         assertEquals(3, rs.getInt(1));
-        assertEquals("aaaaabbbbbb", rs.getString(2));
+        assertEquals("abbb", rs.getString(2));
         
         assertTrue(rs.next()); // 4, bbbbbb
         assertEquals(4, rs.getInt(1));
diff --git a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/unitTests/lang/T_Like.java b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/unitTests/lang/T_Like.java
index a71f1488..0028e085 100644
--- a/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/unitTests/lang/T_Like.java
+++ b/db/derby/code/branches/10.3/java/testing/org/apache/derbyTesting/unitTests/lang/T_Like.java
@@ -107,15 +107,15 @@ private void tests() throws StandardException {
 
 		REPORT("testing null combinations...");
 		try {
-		expect("null like null escape null", Like.like(caNull, 0, caNull, 0, caNull, 0), null);
-		expect("null like 'hello' escape null", Like.like(caNull, 0, caHello, caHello.length, caNull, 0), null);
-		expect("'hello' like null escape null", Like.like(caHello, caHello.length, caNull, 0, caNull, 0), null);
-		expect("null like null escape '\\'", Like.like(caNull, 0, caNull, 0, "\\".toCharArray(), "\\".toCharArray().length), null);
+		expect("null like null escape null", Like.like(caNull, 0, caNull, 0, caNull, 0, null), null);
+		expect("null like 'hello' escape null", Like.like(caNull, 0, caHello, caHello.length, caNull, 0, null), null);
+		expect("'hello' like null escape null", Like.like(caHello, caHello.length, caNull, 0, caNull, 0, null), null);
+		expect("null like null escape '\\'", Like.like(caNull, 0, caNull, 0, "\\".toCharArray(), "\\".toCharArray().length, null), null);
 
 		// gets back a null before it evaluates the escape
-		expect("null like null escape 'hello'", Like.like(caNull, 0, caNull, 0, caHello, caHello.length), null);
+		expect("null like null escape 'hello'", Like.like(caNull, 0, caNull, 0, caHello, caHello.length, null), null);
 		// gets back a null before it evaluates the pattern
-		expect("null like 'hello\\' escape '\\'", Like.like(caNull, 0, "hello\\".toCharArray(), "hello\\".toCharArray().length, "\\".toCharArray(), "\\".toCharArray().length), null);
+		expect("null like 'hello\\' escape '\\'", Like.like(caNull, 0, "hello\\".toCharArray(), "hello\\".toCharArray().length, "\\".toCharArray(), "\\".toCharArray().length, null), null);
 
 		} catch(StandardException leOuter1) {
 			leOuter1.printStackTrace();
@@ -124,21 +124,21 @@ private void tests() throws StandardException {
 
 		REPORT("testing valid match cases...");
 		try {
-		expect("'hello' like 'hello' escape null", Like.like(caHello, caHello.length, caHello, caHello.length, caNull, 0), Boolean.TRUE);
-		expect("'hello' like 'h_llo' escape null", Like.like(caHello, caHello.length, "h_llo".toCharArray(), "h_llo".toCharArray().length, caNull, 0), Boolean.TRUE);
-		expect("'hello' like '_ello' escape null", Like.like(caHello, caHello.length, "_ello".toCharArray(), "_ello".toCharArray().length, caNull, 0), Boolean.TRUE);
-		expect("'hello' like 'hell_' escape null", Like.like(caHello, caHello.length, "hell_".toCharArray(), "hell_".toCharArray().length, caNull, 0), Boolean.TRUE);
-		expect("'hello' like '_____' escape null", Like.like(caHello, caHello.length, "_____".toCharArray(), "_____".toCharArray().length, caNull, 0), Boolean.TRUE);
-		expect("'hello' like 'h___e' escape null", Like.like(caHello, caHello.length, "h___o".toCharArray(), "h___o".toCharArray().length, caNull, 0), Boolean.TRUE);
-		expect("'h' like 'h' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "h".toCharArray(), "h".toCharArray().length, caNull, 0), Boolean.TRUE);
-		expect("'h' like '_' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "_".toCharArray(), "_".toCharArray().length, caNull, 0), Boolean.TRUE);
-		expect("'h' like '%' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "%".toCharArray(), "%".toCharArray().length, caNull, 0), Boolean.TRUE);
-		expect("'h' like '_%' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "_%".toCharArray(), "_%".toCharArray().length, caNull, 0), Boolean.TRUE);
-		expect("'h' like '%_' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "%_".toCharArray(), "%_".toCharArray().length, caNull, 0), Boolean.TRUE);
-		expect("'h' like '%' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "%".toCharArray(), "%".toCharArray().length, caNull, 0), Boolean.TRUE);
-		expect("'' like '%' escape null", Like.like("".toCharArray(), "".toCharArray().length, "%".toCharArray(), "%".toCharArray().length, caNull, 0), Boolean.TRUE);
-		expect("'' like '%%' escape null", Like.like("".toCharArray(), "".toCharArray().length, "%%".toCharArray(), "%%".toCharArray().length, caNull, 0), Boolean.TRUE);
-		expect("'' like '%%%' escape null", Like.like("".toCharArray(), "".toCharArray().length, "%%%".toCharArray(), "%%%".toCharArray().length, caNull, 0), Boolean.TRUE);
+		expect("'hello' like 'hello' escape null", Like.like(caHello, caHello.length, caHello, caHello.length, caNull, 0, null), Boolean.TRUE);
+		expect("'hello' like 'h_llo' escape null", Like.like(caHello, caHello.length, "h_llo".toCharArray(), "h_llo".toCharArray().length, caNull, 0, null), Boolean.TRUE);
+		expect("'hello' like '_ello' escape null", Like.like(caHello, caHello.length, "_ello".toCharArray(), "_ello".toCharArray().length, caNull, 0, null), Boolean.TRUE);
+		expect("'hello' like 'hell_' escape null", Like.like(caHello, caHello.length, "hell_".toCharArray(), "hell_".toCharArray().length, caNull, 0, null), Boolean.TRUE);
+		expect("'hello' like '_____' escape null", Like.like(caHello, caHello.length, "_____".toCharArray(), "_____".toCharArray().length, caNull, 0, null), Boolean.TRUE);
+		expect("'hello' like 'h___e' escape null", Like.like(caHello, caHello.length, "h___o".toCharArray(), "h___o".toCharArray().length, caNull, 0, null), Boolean.TRUE);
+		expect("'h' like 'h' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "h".toCharArray(), "h".toCharArray().length, caNull, 0, null), Boolean.TRUE);
+		expect("'h' like '_' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "_".toCharArray(), "_".toCharArray().length, caNull, 0, null), Boolean.TRUE);
+		expect("'h' like '%' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "%".toCharArray(), "%".toCharArray().length, caNull, 0, null), Boolean.TRUE);
+		expect("'h' like '_%' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "_%".toCharArray(), "_%".toCharArray().length, caNull, 0, null), Boolean.TRUE);
+		expect("'h' like '%_' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "%_".toCharArray(), "%_".toCharArray().length, caNull, 0, null), Boolean.TRUE);
+		expect("'h' like '%' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "%".toCharArray(), "%".toCharArray().length, caNull, 0, null), Boolean.TRUE);
+		expect("'' like '%' escape null", Like.like("".toCharArray(), "".toCharArray().length, "%".toCharArray(), "%".toCharArray().length, caNull, 0, null), Boolean.TRUE);
+		expect("'' like '%%' escape null", Like.like("".toCharArray(), "".toCharArray().length, "%%".toCharArray(), "%%".toCharArray().length, caNull, 0, null), Boolean.TRUE);
+		expect("'' like '%%%' escape null", Like.like("".toCharArray(), "".toCharArray().length, "%%%".toCharArray(), "%%%".toCharArray().length, caNull, 0, null), Boolean.TRUE);
 		} catch(StandardException leOuter2) {
 			leOuter2.printStackTrace();
 			FAIL("unexpected exception");
@@ -146,15 +146,15 @@ private void tests() throws StandardException {
 
 		REPORT("testing valid nonmatch cases...");
 		try {
-		expect("'hello' like 'hello ' escape null", Like.like(caHello, caHello.length, "hello ".toCharArray(), "hello ".toCharArray().length, caNull, 0), Boolean.FALSE);
-		expect("'hello ' like 'hello' escape null", Like.like("hello ".toCharArray(), "hello ".toCharArray().length, caHello, caHello.length, caNull, 0), Boolean.FALSE);
-		expect("'hello' like 'hellox' escape null", Like.like(caHello, caHello.length, "hellox".toCharArray(), "hellox".toCharArray().length, caNull, 0), Boolean.FALSE);
-		expect("'hellox' like 'hello' escape null", Like.like("hellox".toCharArray(), "hellox".toCharArray().length, caHello, caHello.length, caNull, 0), Boolean.FALSE);
-		expect("'xhellox' like 'hello' escape null", Like.like("xhellox".toCharArray(), "xhellox".toCharArray().length, caHello, caHello.length, caNull, 0), Boolean.FALSE);
-		expect("'hello' like 'xhellox' escape null", Like.like(caHello, caHello.length, "xhellox".toCharArray(), "xhellox".toCharArray().length, null, 0), Boolean.FALSE);
-		expect("'hello' like 'h___' escape null", Like.like(caHello, caHello.length, "h___".toCharArray(), "h___".toCharArray().length, caNull, 0), Boolean.FALSE);
-		expect("'h' like '_%_' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "_%_".toCharArray(), "_%_".toCharArray().length, caNull, 0), Boolean.FALSE);
-		expect("'' like '_' escape null", Like.like("".toCharArray(), "".toCharArray().length, "_".toCharArray(), "_".toCharArray().length, caNull, 0), Boolean.FALSE);
+		expect("'hello' like 'hello ' escape null", Like.like(caHello, caHello.length, "hello ".toCharArray(), "hello ".toCharArray().length, caNull, 0, null), Boolean.FALSE);
+		expect("'hello ' like 'hello' escape null", Like.like("hello ".toCharArray(), "hello ".toCharArray().length, caHello, caHello.length, caNull, 0, null), Boolean.FALSE);
+		expect("'hello' like 'hellox' escape null", Like.like(caHello, caHello.length, "hellox".toCharArray(), "hellox".toCharArray().length, caNull, 0, null), Boolean.FALSE);
+		expect("'hellox' like 'hello' escape null", Like.like("hellox".toCharArray(), "hellox".toCharArray().length, caHello, caHello.length, caNull, 0, null), Boolean.FALSE);
+		expect("'xhellox' like 'hello' escape null", Like.like("xhellox".toCharArray(), "xhellox".toCharArray().length, caHello, caHello.length, caNull, 0, null), Boolean.FALSE);
+		expect("'hello' like 'xhellox' escape null", Like.like(caHello, caHello.length, "xhellox".toCharArray(), "xhellox".toCharArray().length, null, 0, null), Boolean.FALSE);
+		expect("'hello' like 'h___' escape null", Like.like(caHello, caHello.length, "h___".toCharArray(), "h___".toCharArray().length, caNull, 0, null), Boolean.FALSE);
+		expect("'h' like '_%_' escape null", Like.like("h".toCharArray(), "h".toCharArray().length, "_%_".toCharArray(), "_%_".toCharArray().length, caNull, 0, null), Boolean.FALSE);
+		expect("'' like '_' escape null", Like.like("".toCharArray(), "".toCharArray().length, "_".toCharArray(), "_".toCharArray().length, caNull, 0, null), Boolean.FALSE);
 		} catch(StandardException leOuter3) {
 			leOuter3.printStackTrace();
 			FAIL("unexpected exception");
@@ -166,7 +166,7 @@ private void tests() throws StandardException {
 			msg = null;
 			gotLE=false;
 			desc="null like null escape 'hello'";
-			t=Like.like(caHello, caHello.length, caHello, caHello.length, caHello, caHello.length);
+			t=Like.like(caHello, caHello.length, caHello, caHello.length, caHello, caHello.length, null);
 		} catch (StandardException le) {
 			gotLE=true;
 			msg = le.getMessage();
@@ -181,7 +181,7 @@ private void tests() throws StandardException {
 			msg = null;
 			gotLE=false;
 			desc="'hello' like 'hhh' escape 'h'";
-			t=Like.like(caHello, caHello.length, "hhh".toCharArray(), "hhh".toCharArray().length, "h".toCharArray(), "h".toCharArray().length);
+			t=Like.like(caHello, caHello.length, "hhh".toCharArray(), "hhh".toCharArray().length, "h".toCharArray(), "h".toCharArray().length, null);
 		} catch (StandardException le) {
 			gotLE=true;
 			msg = le.getMessage();
@@ -196,7 +196,7 @@ private void tests() throws StandardException {
 			msg = null;
 			gotLE=false;
 			desc="'hello' like 'he%' escape 'h'";
-			t=Like.like(caHello, caHello.length, "he%".toCharArray(), "he%".toCharArray().length, "h".toCharArray(), "h".toCharArray().length);
+			t=Like.like(caHello, caHello.length, "he%".toCharArray(), "he%".toCharArray().length, "h".toCharArray(), "h".toCharArray().length, null);
 		} catch (StandardException le) {
 			gotLE=true;
 			msg = le.getMessage();
