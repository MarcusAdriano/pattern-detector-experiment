diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement.java
index c2942b55..ba8f10b6 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredCallableStatement.java
@@ -59,6 +59,10 @@ public final boolean wasNull()
         return getCallableStatement().wasNull();
     }
 
+    public final void close() throws SQLException {
+        control.closeRealCallableStatement();
+    }
+    
     public final String getString(int parameterIndex)
         throws SQLException
     {
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java
index 2954b554..5332e05b 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredPreparedStatement.java
@@ -87,6 +87,11 @@ public final int executeUpdate() throws SQLException
         return getPreparedStatement().executeUpdate();
     }
 
+	public void close() throws SQLException
+	{
+	    control.closeRealPreparedStatement();
+	}
+	
     /**
      * Set a parameter to SQL NULL.
      *
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java
index 83e2a92c..89f4182f 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatement.java
@@ -126,9 +126,9 @@ public final int executeUpdate(String sql) throws SQLException
      * ResultSet, if one exists, is also closed.
 	 * @exception SQLException thrown on failure.
      */
-	public final void close() throws SQLException
+	public void close() throws SQLException
     {
-		getStatement().close();
+		control.closeRealStatement();
     }
 
     public final Connection getConnection()
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatementControl.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatementControl.java
index d8d00cb3..f4f4cbe3 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatementControl.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/iapi/jdbc/BrokeredStatementControl.java
@@ -35,6 +35,26 @@
 	*/
 	public int checkHoldCursors(int holdability) throws SQLException;
 
+	/**
+	 * Close the real JDBC Statement when this is controlling a Statement.
+	 * @throws SQLException
+	 */
+	public void closeRealStatement() throws SQLException;
+	
+	/**
+	 * Close the real JDBC CallableStatement when this is controlling a
+	 * CallableStatement. 
+	 * @throws SQLException
+	 */
+	public void closeRealCallableStatement() throws SQLException;
+	
+	/**
+	 * Close the real JDBC CallableStatement when this is controlling a
+	 * PreparedStatement. 
+	 * @throws SQLException
+	 */
+	public void closeRealPreparedStatement() throws SQLException;
+	
 	/**
 		Return the real JDBC statement for the brokered statement
 		when this is controlling a Statement.
diff --git a/db/derby/code/branches/10.1/java/engine/org/apache/derby/jdbc/XAStatementControl.java b/db/derby/code/branches/10.1/java/engine/org/apache/derby/jdbc/XAStatementControl.java
index 92a1fd63..cf33f68a 100644
--- a/db/derby/code/branches/10.1/java/engine/org/apache/derby/jdbc/XAStatementControl.java
+++ b/db/derby/code/branches/10.1/java/engine/org/apache/derby/jdbc/XAStatementControl.java
@@ -79,6 +79,27 @@ private XAStatementControl(EmbedXAConnection xaConnection) {
                 applicationStatement);
 	}
 
+	/**
+	 * Close the realStatement within this control. 
+	 */
+	public void closeRealStatement() throws SQLException {
+		realStatement.close();
+	}
+	
+	/**
+	 * Close the realCallableStatement within this control. 
+	 */
+	public void closeRealCallableStatement() throws SQLException {
+		realCallableStatement.close();
+	}
+	
+	/**
+	 * Close the realPreparedStatement within this control. 
+	 */
+	public void closeRealPreparedStatement() throws SQLException {
+		realPreparedStatement.close();
+	}
+	
 	public Statement getRealStatement() throws SQLException {
 
 		// 
diff --git a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java
index 7b718db6..144bdeea 100644
--- a/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java
+++ b/db/derby/code/branches/10.1/java/testing/org/apache/derbyTesting/functionTests/tests/jdbcapi/XATest.java
@@ -21,6 +21,7 @@
 package org.apache.derbyTesting.functionTests.tests.jdbcapi;
 
 import java.sql.Connection;
+import java.sql.CallableStatement;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
@@ -77,6 +78,11 @@ public static void main(String[] args) throws Exception {
         // DERBY-966 holdability testing
         derby966(dsx);
 
+        // DERBY-4310 closing of statement with an embedded XAConnection
+        // should not cause recompile of statement
+        derby4310PreparedStatement(dsx);
+        derby4310CallableStatement(dsx);
+
         System.out.println("XATest complete");
     }
 
@@ -775,6 +781,125 @@ private static void morph(XADataSource xads) {
 
     }
     
+    /**
+     * Dummy method for derby4310CallableStatement
+     */
+    public static void zeroArg() {  }
+    
+    /**
+     * This test checks the fix on DERBY-4310, for not repreparing 
+     * CallableStatements upon calling close() on them.
+     */
+    public static void derby4310CallableStatement(XADataSource xads) 
+    throws Exception 
+    {
+        System.out.println("derby4310CallableStatement");
+        try {
+            XAConnection xac = xads.getXAConnection();
+            XAResource xar = xac.getXAResource();
+
+            Xid xid = XATestUtil.getXid(4310, 9, 49);
+
+            /* Create the procedure based on XATest.zeroArg() */
+            Connection conn = xac.getConnection();
+            Statement s = conn.createStatement();
+            s.executeUpdate("CREATE PROCEDURE ZA() LANGUAGE JAVA "+
+                            "EXTERNAL NAME 'org.apache.derbyTesting.functionTests.tests.jdbcapi.XATest.zeroArg' "+
+                            "PARAMETER STYLE JAVA");
+            conn.commit();
+            
+            /* Prepare and execute CallableStatement based on the procedure above */
+            CallableStatement cs = conn.prepareCall("CALL ZA()");
+            cs.execute();
+
+            /* Start and end a transaction on the XAResource object */
+            xar.start(xid, XAResource.TMNOFLAGS);
+            xar.end(xid, XAResource.TMSUCCESS);
+
+            /* Drop the procedure on a parallel, regular connection */
+            Connection conn2 = ij.startJBMS();
+            Statement s2 = conn2.createStatement();
+            s2.execute("DROP PROCEDURE ZA");
+            conn2.commit();
+            conn2.close();
+            
+            try {
+                /* Try to close the prepared statement. This would throw an exception
+                 * before the fix, claiming that the table was not found. */
+                cs.close();
+            } finally {
+                /* Rollback the transaction and close the connections */
+                xar.rollback(xid);
+                conn.close();
+                xac.close();
+            }
+        } catch (SQLException e) {
+            TestUtil.dumpSQLExceptions(e);
+            e.printStackTrace(System.out);
+        } catch (XAException e) {
+            XATestUtil.dumpXAException("derby4310CallableStatement", e);
+        }
+    }
+    
+    /**
+     * This test checks the fix on DERBY-4310, for not repreparing 
+     * PreparedStatements upon calling close() on them.
+     * @param xads
+     */
+    private static void derby4310PreparedStatement(XADataSource xads)
+    throws Exception
+    {
+        System.out.println("derby4310PreparedStatement");
+        try {
+            XAConnection xac = xads.getXAConnection();
+            XAResource xar = xac.getXAResource();
+
+            Xid xid = XATestUtil.getXid(4310, 9, 48);
+            
+            Connection conn = xac.getConnection();
+            
+            /* Create the table and insert some records into it. */
+            Statement s = conn.createStatement();
+            s.executeUpdate("CREATE TABLE foo4310_PS (I INT)");
+            conn.createStatement().executeUpdate("insert into APP.foo4310_PS values (0)");
+            conn.createStatement().executeUpdate("insert into APP.foo4310_PS values (1)");
+            conn.createStatement().executeUpdate("insert into APP.foo4310_PS values (2)");
+            conn.commit();
+            
+            /* Prepare and execute the statement to be tested */
+            PreparedStatement ps = conn.prepareStatement("SELECT * FROM APP.foo4310_PS");
+            ps.executeQuery().close();
+
+            /* Start and end a transaction on the XAResource object */
+            xar.start(xid, XAResource.TMNOFLAGS);
+            xar.end(xid, XAResource.TMSUCCESS);
+
+            /* Drop the table on a parallel, regular connection */
+            Connection conn2 = ij.startJBMS();
+            Statement s2 = conn2.createStatement();
+            s2.execute("DROP TABLE foo4310_PS");
+            conn2.commit();
+            conn2.close();
+
+            
+            try {
+                /* Try to close the prepared statement. This would throw an exception
+                 * before the fix, claiming that the table was not found. */
+                ps.close();
+            } finally {
+                /* Rollback the transaction and close the connections */
+                xar.rollback(xid);
+                conn.close();
+                xac.close();
+            }
+        } catch (SQLException e) {
+            TestUtil.dumpSQLExceptions(e);
+            e.printStackTrace(System.out);
+        } catch (XAException e) {
+            XATestUtil.dumpXAException("derby4310PreparedStatement", e);
+        }
+    }
+
     /**
      * Derby-966 holdability and global/location transactions.
      * (work in progress)
