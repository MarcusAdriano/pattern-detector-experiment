diff --git a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource.java b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource.java
index 39b5a78b..8092bde4 100644
--- a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource.java
+++ b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource.java
@@ -41,6 +41,7 @@
  */
 public class TestContentStreamDataSource extends AbstractDataImportHandlerTestCase {
   private static final String CONF_DIR = "dih/solr/collection1/conf/";
+  private static final String ROOT_DIR = "dih/solr/";
   SolrInstance instance = null;
   JettySolrRunner jetty;
 
@@ -144,6 +145,11 @@ public String getSolrConfigFile() {
       return CONF_DIR + "contentstream-solrconfig.xml";
     }
 
+    public String getSolrXmlFile() {
+      return ROOT_DIR + "solr.xml";
+    }
+
+
     public void setUp() throws Exception {
 
       File home = new File(TEMP_DIR,
@@ -158,6 +164,7 @@ public void setUp() throws Exception {
       dataDir.mkdirs();
       confDir.mkdirs();
 
+      FileUtils.copyFile(getFile(getSolrXmlFile()), new File(homeDir, "solr.xml"));
       File f = new File(confDir, "solrconfig.xml");
       FileUtils.copyFile(getFile(getSolrConfigFile()), f);
       f = new File(confDir, "schema.xml");
diff --git a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java
index b0fe3794..f9559988 100644
--- a/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java
+++ b/lucene/dev/branches/branch_4x/solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java
@@ -50,6 +50,7 @@
   private static final String SOLR_CONFIG = "dataimport-solrconfig.xml";
   private static final String SOLR_SCHEMA = "dataimport-schema.xml";
   private static final String SOURCE_CONF_DIR = "dih" + File.separator + "solr" + File.separator + "collection1" + File.separator + "conf" + File.separator;
+  private static final String ROOT_DIR = "dih" + File.separator + "solr" + File.separator;
   
   private static final String DEAD_SOLR_SERVER = "http://[ff01::114]:33332/solr";
   
@@ -295,6 +296,10 @@ public String getSolrConfigFile() {
       return SOURCE_CONF_DIR + "dataimport-solrconfig.xml";
     }
     
+    public String getSolrXmlFile() {
+      return ROOT_DIR + "solr.xml";
+    }
+
     public void setUp() throws Exception {
       
       File home = new File(TEMP_DIR, getClass().getName() + "-"
@@ -308,6 +313,7 @@ public void setUp() throws Exception {
       dataDir.mkdirs();
       confDir.mkdirs();
       
+      FileUtils.copyFile(getFile(getSolrXmlFile()), new File(homeDir, "solr.xml"));
       File f = new File(confDir, "solrconfig.xml");
       FileUtils.copyFile(getFile(getSolrConfigFile()), f);
       f = new File(confDir, "schema.xml");
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ConfigSolr.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ConfigSolr.java
index f61c1c1a..d2228191 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ConfigSolr.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ConfigSolr.java
@@ -54,11 +54,15 @@ public static ConfigSolr fromFile(SolrResourceLoader loader, File configFile) {
     InputStream inputStream = null;
 
     try {
+
       if (!configFile.exists()) {
+        if (ZkContainer.isZkMode()) {
+          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
+              "solr.xml does not exist in " + configFile.getAbsolutePath() + " cannot start Solr");
+        }
         log.info("{} does not exist, using default configuration", configFile.getAbsolutePath());
         inputStream = new ByteArrayInputStream(ConfigSolrXmlOld.DEF_SOLR_XML.getBytes(Charsets.UTF_8));
-      }
-      else {
+      } else {
         inputStream = new FileInputStream(configFile);
       }
       return fromInputStream(loader, inputStream);
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ZkContainer.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ZkContainer.java
index 106e34a2..4e6751d8 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ZkContainer.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/core/ZkContainer.java
@@ -17,6 +17,7 @@
  * limitations under the License.
  */
 
+import org.apache.commons.lang.StringUtils;
 import org.apache.solr.cloud.CurrentCoreDescriptorProvider;
 import org.apache.solr.cloud.SolrZkServer;
 import org.apache.solr.cloud.ZkController;
@@ -75,6 +76,14 @@ public void initZooKeeper(final CoreContainer cc, String solrHome, ConfigSolr co
         config.getHost(), config.getLeaderVoteWait(), config.getGenericCoreNodeNames(),
         config.getDistributedConnectionTimeout(), config.getDistributedSocketTimeout());
   }
+  // TODO: 5.0 remove this, it's only here for back-compat and only called from ConfigSolr.
+  public static boolean isZkMode() {
+    String test = System.getProperty("zkHost");
+    if (StringUtils.isBlank(test)) {
+      test = System.getProperty("zkRun");
+    }
+    return StringUtils.isNotBlank(test);
+  }
   
   public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String hostPort,
                             String hostContext, String host, int leaderVoteWait, boolean genericCoreNodeNames,
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java
index d938b267..f11cc6ad 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter.java
@@ -202,7 +202,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
     }
     
     if (this.cores == null) {
-      ((HttpServletResponse)response).sendError( 503, "Server is shutting down" );
+      ((HttpServletResponse)response).sendError( 503, "Server is shutting down or failed to initialize" );
       return;
     }
     CoreContainer cores = this.cores;
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/TestSolrCoreProperties.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/TestSolrCoreProperties.java
index d04a9603..181dae10 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/TestSolrCoreProperties.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/TestSolrCoreProperties.java
@@ -56,6 +56,7 @@ public static void beforeTest() throws Exception {
     dataDir.mkdirs();
     confDir.mkdirs();
 
+    FileUtils.copyFile(new File(SolrTestCaseJ4.TEST_HOME(), "solr.xml"), new File(homeDir, "solr.xml"));
     String src_dir = TEST_HOME() + "/collection1/conf";
     FileUtils.copyFile(new File(src_dir, "schema-tiny.xml"), 
                        new File(confDir, "schema.xml"));
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest.java
index 892e0d8e..23526ae9 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ClusterStateUpdateTest.java
@@ -17,6 +17,7 @@
  * limitations under the License.
  */
 
+import org.apache.commons.io.FileUtils;
 import org.apache.lucene.util.LuceneTestCase.Slow;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.common.cloud.ClusterState;
@@ -36,6 +37,7 @@
 import org.slf4j.LoggerFactory;
 
 import java.io.File;
+import java.io.IOException;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
@@ -65,18 +67,30 @@
   
   private File dataDir4;
   
+
+  private static final File solrHomeDirectory = new File(TEMP_DIR, "ZkControllerTest");
+
   @BeforeClass
-  public static void beforeClass() {
+  public static void beforeClass() throws IOException {
     System.setProperty("solrcloud.skip.autorecovery", "true");
     System.setProperty("genericCoreNodeNames", "false");
+    if (solrHomeDirectory.exists()) {
+      FileUtils.deleteDirectory(solrHomeDirectory);
+    }
+    copyMinFullSetup(solrHomeDirectory);
+
   }
   
   @AfterClass
-  public static void afterClass() throws InterruptedException {
+  public static void afterClass() throws InterruptedException, IOException {
     System.clearProperty("solrcloud.skip.autorecovery");
     System.clearProperty("genericCoreNodeNames");
+    if (solrHomeDirectory.exists()) {
+      FileUtils.deleteDirectory(solrHomeDirectory);
+    }
   }
 
+
   @Override
   public void setUp() throws Exception {
     super.setUp();
@@ -111,19 +125,19 @@ public void setUp() throws Exception {
     System.setProperty("solr.solr.home", TEST_HOME());
     System.setProperty("hostPort", "1661");
     System.setProperty("solr.data.dir", ClusterStateUpdateTest.this.dataDir1.getAbsolutePath());
-    container1 = new CoreContainer();
+    container1 = new CoreContainer(solrHomeDirectory.getAbsolutePath());
     container1.load();
     System.clearProperty("hostPort");
     
     System.setProperty("hostPort", "1662");
     System.setProperty("solr.data.dir", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());
-    container2 = new CoreContainer();
+    container2 = new CoreContainer(solrHomeDirectory.getAbsolutePath());
     container2.load();
     System.clearProperty("hostPort");
     
     System.setProperty("hostPort", "1663");
     System.setProperty("solr.data.dir", ClusterStateUpdateTest.this.dataDir3.getAbsolutePath());
-    container3 = new CoreContainer();
+    container3 = new CoreContainer(solrHomeDirectory.getAbsolutePath());
     container3.load();
     System.clearProperty("hostPort");
     System.clearProperty("solr.solr.home");
@@ -222,7 +236,7 @@ public void testCoreRegistration() throws Exception {
 
     System.setProperty("hostPort", "1662");
     System.setProperty("solr.data.dir", ClusterStateUpdateTest.this.dataDir2.getAbsolutePath());
-    container2 = new CoreContainer();
+    container2 = new CoreContainer(solrHomeDirectory.getAbsolutePath());
     container2.load();
     System.clearProperty("hostPort");
     
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/SolrXmlInZkTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/SolrXmlInZkTest.java
index 7a06c0eb..97379866 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/SolrXmlInZkTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/SolrXmlInZkTest.java
@@ -33,6 +33,7 @@
 import org.junit.rules.TestRule;
 
 import java.io.File;
+import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.nio.charset.Charset;
@@ -145,27 +146,43 @@ public void testNotInZkAndShouldBe() throws Exception {
       setUpZkAndDiskXml(false, true);
       fail("Should have gotten an exception here!");
     } catch (InvocationTargetException ite) {
-      SolrException se = (SolrException) ite.getTargetException();
       assertEquals("Should have an exception here, file not in ZK.",
-          "Could not load solr.xml from zookeeper", se.getMessage());
+          "Could not load solr.xml from zookeeper", ite.getTargetException().getMessage());
     } finally {
       closeZK();
     }
   }
 
-  // TODO: Solr 5.0. when we remove the default solr.xml from configSolrXmlOld this should start failing.
   @Test
   public void testNotInZkOrOnDisk() throws Exception {
     try {
       System.clearProperty("solr.solrxml.location");
       System.setProperty("hostPort", "8787");
       setUpZkAndDiskXml(false, false); // solr.xml not on disk either
-      assertEquals("Should have gotten the default port from the hard-coded default solr.xml file via sys prop.",
-          cfg.getZkHostPort(), "8787");
+      fail("Should have thrown an exception here");
+    } catch (InvocationTargetException ite) {
+      assertTrue("Should be failing to create default solr.xml in code",
+          ite.getTargetException().getCause().getMessage().indexOf("solr.xml does not exist") != -1);
     } finally {
       closeZK();
     }
   }
+  //TODO: Remove for 5.x, this should fail when we don't have a real solr.xml file after we take out the remove
+  // the hard-coded default from ConifgSolrXmlOld
+  @Test
+  public void testHardCodedSolrXml() throws IOException {
+    SolrResourceLoader loader = null;
+    final File solrHome = new File(TEMP_DIR,
+        SolrXmlInZkTest.getClassName() + File.separator + "testHardCodedSolrXml");
+    try {
+      loader = new SolrResourceLoader(solrHome.getAbsolutePath());
+      ConfigSolr.fromSolrHome(loader, solrHome.getAbsolutePath());
+    } catch (Exception e) {
+      fail("Should NOT have thrown any exception here, solr.xml should have been received from the hard-coded string");
+    } finally {
+      loader.close();
+    }
+  }
 
   @Test
   public void testOnDiskOnly() throws Exception {
@@ -185,9 +202,8 @@ public void testBadSysProp() throws Exception {
       setUpZkAndDiskXml(false, true);
       fail("Should have thrown exception in SolrXmlInZkTest.testBadSysProp");
     } catch (InvocationTargetException ite) {
-      SolrException se = (SolrException) ite.getTargetException();
       assertEquals("Should have an exception in SolrXmlInZkTest.testBadSysProp, sysprop set to bogus value.",
-          se.getMessage(), "Bad solr.solrxml.location set: solrHomeDir - should be 'solrhome' or 'zookeeper'");
+          ite.getTargetException().getMessage(), "Bad solr.solrxml.location set: solrHomeDir - should be 'solrhome' or 'zookeeper'");
     } finally {
       closeZK();
     }
@@ -208,9 +224,7 @@ public void testZkHostDiscovery() throws ClassNotFoundException, NoSuchMethodExc
       fail("Should have thrown an exception");
     } catch (InvocationTargetException ite) {
       assertTrue("Should be catching a SolrException", ite.getTargetException() instanceof SolrException);
-      String cause = ((SolrException) ite.getTargetException()).getMessage();
-
-      assertEquals("Caught Solr exception", cause,
+      assertEquals("Caught Solr exception", ite.getTargetException().getMessage(),
           "Could not load solr.xml from zookeeper: zkHost system property not set");
     }
   }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ZkControllerTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ZkControllerTest.java
index f0bc70b1..142efd55 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ZkControllerTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/cloud/ZkControllerTest.java
@@ -17,6 +17,7 @@
  * the License.
  */
 
+import org.apache.commons.io.FileUtils;
 import org.apache.lucene.util.LuceneTestCase.Slow;
 import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.common.cloud.SolrZkClient;
@@ -26,6 +27,7 @@
 import org.apache.solr.core.CoreDescriptor;
 import org.apache.solr.util.ExternalPaths;
 import org.apache.zookeeper.CreateMode;
+import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
@@ -43,11 +45,25 @@
 
   private static final boolean DEBUG = false;
   
+
+  private static final File solrHomeDirectory = new File(TEMP_DIR, "ZkControllerTest");
+
   @BeforeClass
   public static void beforeClass() throws Exception {
+    if (solrHomeDirectory.exists()) {
+      FileUtils.deleteDirectory(solrHomeDirectory);
+    }
+    copyMinFullSetup(solrHomeDirectory);
     initCore();
   }
 
+  @AfterClass
+  public static void afterClass() throws Exception {
+    if (solrHomeDirectory.exists()) {
+      FileUtils.deleteDirectory(solrHomeDirectory);
+    }
+  }
+
   public void testNodeNameUrlConversion() throws Exception {
 
     // nodeName from parts
@@ -240,7 +256,7 @@ public void testUploadToCloud() throws Exception {
   }
 
   private CoreContainer getCoreContainer() {
-    CoreContainer cc = new CoreContainer(TEMP_DIR.getAbsolutePath());
+    CoreContainer cc = new CoreContainer(solrHomeDirectory.getAbsolutePath());
     cc.load();
     return cc;
   }
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence.java
index 6e312a85..d45d6258 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistence.java
@@ -383,7 +383,10 @@ public void testCreatePersistCore() throws Exception {
   @Test
   public void testPersist() throws Exception {
 
-    final CoreContainer cores = init(ConfigSolrXmlOld.DEF_SOLR_XML, "collection1");
+    String defXml = FileUtils.readFileToString(
+        new File(SolrTestCaseJ4.TEST_HOME(), "solr.xml"),
+        Charsets.UTF_8.toString());
+    final CoreContainer cores = init(defXml, "collection1");
     SolrXMLCoresLocator.NonPersistingLocator locator
         = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();
 
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor.java
index fe466efb..99b9eaad 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/core/TestSolrXmlPersistor.java
@@ -18,15 +18,18 @@
  */
 
 import com.google.common.collect.ImmutableList;
+import org.apache.commons.io.FileUtils;
+import org.apache.solr.SolrTestCaseJ4;
 import org.junit.Test;
 
 import java.io.File;
+import java.io.IOException;
 import java.util.List;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
-public class TestSolrXmlPersistor {
+public class TestSolrXmlPersistor  extends SolrTestCaseJ4 {
 
   private static final List<CoreDescriptor> EMPTY_CD_LIST = ImmutableList.<CoreDescriptor>builder().build();
 
@@ -58,12 +61,18 @@ public void emptySolrXmlIsPersisted() {
   }
 
   @Test
-  public void simpleCoreDescriptorIsPersisted() {
+  public void simpleCoreDescriptorIsPersisted() throws IOException {
 
     final String solrxml = "<solr><cores></cores></solr>";
 
-    SolrResourceLoader loader = new SolrResourceLoader("solr/example/solr");
-    CoreContainer cc = new CoreContainer(loader);
+    final File solrHomeDirectory = new File(TEMP_DIR, "ZkControllerTest");
+    try {
+      if (solrHomeDirectory.exists()) {
+        FileUtils.deleteDirectory(solrHomeDirectory);
+      }
+      copyMinFullSetup(solrHomeDirectory);
+
+      CoreContainer cc = new CoreContainer(solrHomeDirectory.getAbsolutePath());
 
     final CoreDescriptor cd = new CoreDescriptor(cc, "testcore", "instance/dir/");
     List<CoreDescriptor> cds = ImmutableList.of(cd);
@@ -73,6 +82,12 @@ public void simpleCoreDescriptorIsPersisted() {
           "<solr><cores>" + SolrXMLCoresLocator.NEWLINE
         + "    <core name=\"testcore\" instanceDir=\"instance/dir/\"/>" + SolrXMLCoresLocator.NEWLINE
         + "</cores></solr>");
+    } finally {
+      if (solrHomeDirectory.exists()) {
+        FileUtils.deleteDirectory(solrHomeDirectory);
+      }
+
+    }
   }
 
   @Test
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
index ff59990a..a0a05a06 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java
@@ -69,6 +69,7 @@
 import org.apache.solr.core.StandardDirectoryFactory;
 import org.apache.solr.servlet.SolrDispatchFilter;
 import org.apache.solr.util.AbstractSolrTestCase;
+import org.apache.solr.util.FileUtils;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -139,7 +140,7 @@ public void tearDown() throws Exception {
 
   private static JettySolrRunner createJetty(SolrInstance instance) throws Exception {
     System.setProperty("solr.data.dir", instance.getDataDir());
-
+    FileUtils.copyFile(new File(SolrTestCaseJ4.TEST_HOME(), "solr.xml"), new File(instance.getHomeDir(), "solr.xml"));
     JettySolrRunner jetty = new JettySolrRunner(instance.getHomeDir(), "/solr", 0);
 
     jetty.start();
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/request/TestRemoteStreaming.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/request/TestRemoteStreaming.java
index d6256e91..c1f74ac1 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/request/TestRemoteStreaming.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/request/TestRemoteStreaming.java
@@ -27,10 +27,12 @@
 import org.apache.solr.client.solrj.response.QueryResponse;
 import org.apache.solr.common.SolrException;
 import org.apache.solr.common.SolrInputDocument;
+import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
+import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
@@ -44,10 +46,18 @@
  */
 public class TestRemoteStreaming extends SolrJettyTestBase {
 
+  private static final File solrHomeDirectory = new File(TEMP_DIR, "TestRemoteStreaming");
+
   @BeforeClass
   public static void beforeTest() throws Exception {
     //this one has handleSelect=true which a test here needs
-    createJetty("solr/", null, null);
+    setupJettyTestHome(solrHomeDirectory, "collection1");
+    createJetty(solrHomeDirectory.getAbsolutePath(), null, null);
+  }
+
+  @AfterClass
+  public static void afterTest() throws Exception {
+    cleanUpJettyHome(solrHomeDirectory);
   }
 
   @Before
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/TestBinaryField.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/TestBinaryField.java
index 98624601..2c0a8203 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/TestBinaryField.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/schema/TestBinaryField.java
@@ -17,20 +17,17 @@
 package org.apache.solr.schema;
 
 import java.io.File;
-import java.io.FileOutputStream;
 import java.nio.ByteBuffer;
 import java.util.List;
 
-import org.apache.commons.io.IOUtils;
 import org.apache.commons.io.FileUtils;
 
+import org.apache.solr.SolrTestCaseJ4;
 import org.apache.solr.client.solrj.SolrServer;
 import org.apache.solr.client.solrj.SolrQuery;
 import org.apache.solr.client.solrj.beans.Field;
-import org.apache.solr.client.solrj.impl.HttpSolrServer;
 import org.apache.solr.client.solrj.response.QueryResponse;
 import org.apache.solr.common.*;
-import org.apache.solr.core.SolrResourceLoader;
 import org.apache.solr.SolrJettyTestBase;
 import org.junit.BeforeClass;
 
@@ -49,6 +46,8 @@ public static void beforeTest() throws Exception {
     dataDir.mkdirs();
     confDir.mkdirs();
 
+    FileUtils.copyFile(new File(SolrTestCaseJ4.TEST_HOME(), "solr.xml"), new File(homeDir, "solr.xml"));
+
     String src_dir = TEST_HOME() + "/collection1/conf";
     FileUtils.copyFile(new File(src_dir, "schema-binaryfield.xml"), 
                        new File(confDir, "schema.xml"));
diff --git a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest.java b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest.java
index a8511067..f9cadbcc 100644
--- a/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest.java
+++ b/lucene/dev/branches/branch_4x/solr/core/src/test/org/apache/solr/servlet/CacheHeaderTest.java
@@ -25,11 +25,13 @@
 import java.util.Arrays;
 import java.util.Date;
 
+import com.google.common.base.Charsets;
 import org.apache.http.Header;
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.HttpRequestBase;
 import org.apache.http.impl.cookie.DateUtils;
 import org.apache.solr.common.params.CommonParams;
+import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
@@ -39,13 +41,18 @@
  * A test case for the several HTTP cache headers emitted by Solr
  */
 public class CacheHeaderTest extends CacheHeaderTestBase {
+    private static final File solrHomeDirectory = new File(TEMP_DIR, "CacheHeaderTest");
 
   @BeforeClass
   public static void beforeTest() throws Exception {
-    createJetty("solr/", null, null);
+    setupJettyTestHome(solrHomeDirectory, "collection1");
+    createJetty(solrHomeDirectory.getAbsolutePath(), null, null);
   }
 
-  protected static final String CHARSET = "UTF-8";
+  @AfterClass
+  public static void afterTest() throws Exception {
+    cleanUpJettyHome(solrHomeDirectory);
+  }
 
   protected static final String CONTENTS = "id\n100\n101\n102";
 
@@ -243,7 +250,7 @@ protected void doCacheControl(String method) throws Exception {
   }
 
   protected File makeFile(String contents) {
-    return makeFile(contents, CHARSET);
+    return makeFile(contents, Charsets.UTF_8.toString());
   }
 
   protected File makeFile(String contents, String charset) {
diff --git a/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer.java b/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer.java
index ae4780f6..6e182f45 100644
--- a/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer.java
+++ b/lucene/dev/branches/branch_4x/solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer.java
@@ -274,6 +274,11 @@ public String getSolrConfigFile() {
       return "solrj/solr/collection1/conf/solrconfig-slave1.xml";
     }
 
+    public String getSolrXmlFile() {
+      return "solrj/solr/solr.xml";
+    }
+
+
     public void setUp() throws Exception {
       File home = new File(LuceneTestCase.TEMP_DIR,
               getClass().getName() + "-" + System.currentTimeMillis());
@@ -287,6 +292,8 @@ public void setUp() throws Exception {
       dataDir.mkdirs();
       confDir.mkdirs();
 
+      FileUtils.copyFile(SolrTestCaseJ4.getFile(getSolrXmlFile()), new File(homeDir, "solr.xml"));
+
       File f = new File(confDir, "solrconfig.xml");
       FileUtils.copyFile(SolrTestCaseJ4.getFile(getSolrConfigFile()), f);
       f = new File(confDir, "schema.xml");
diff --git a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase.java b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase.java
index feae82a1..af6da5c1 100644
--- a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase.java
+++ b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase.java
@@ -22,6 +22,7 @@
 import java.util.Map;
 import java.util.SortedMap;
 
+import org.apache.commons.io.FileUtils;
 import org.apache.solr.client.solrj.SolrServer;
 import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;
 import org.apache.solr.client.solrj.embedded.JettySolrRunner;
@@ -188,4 +189,21 @@ public SolrServer createNewSolrServer() {
       return new EmbeddedSolrServer( h.getCoreContainer(), "" );
     }
   }
+
+  // Sets up the necessary config files for Jetty. At least some tests require that the solrconfig from the test
+  // file directory are used, but some also require that the solr.xml file be explicitly there as of SOLR-4817
+  public static void setupJettyTestHome(File solrHome, String collection) throws Exception {
+    if (solrHome.exists()) {
+      FileUtils.deleteDirectory(solrHome);
+    }
+    copySolrHomeToTemp(solrHome, collection);
+  }
+
+  public static void cleanUpJettyHome(File solrHome) throws Exception {
+    if (solrHome.exists()) {
+      FileUtils.deleteDirectory(solrHome);
+    }
+  }
+
+
 }
diff --git a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java
index 1ab146cc..c141dea0 100644
--- a/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java
+++ b/lucene/dev/branches/branch_4x/solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java
@@ -1660,16 +1660,53 @@ public static void assertXmlFile(final File file, String... xpath)
     }
   }
   // Creates a mininmal conf dir.
-  public void copyMinConf(File dstRoot) throws IOException {
+  public static void copyMinConf(File dstRoot) throws IOException {
 
     File subHome = new File(dstRoot, "conf");
+    if (! dstRoot.exists()) {
     assertTrue("Failed to make subdirectory ", dstRoot.mkdirs());
+    }
+
     String top = SolrTestCaseJ4.TEST_HOME() + "/collection1/conf";
     FileUtils.copyFile(new File(top, "schema-tiny.xml"), new File(subHome, "schema.xml"));
     FileUtils.copyFile(new File(top, "solrconfig-minimal.xml"), new File(subHome, "solrconfig.xml"));
     FileUtils.copyFile(new File(top, "solrconfig.snippet.randomindexconfig.xml"), new File(subHome, "solrconfig.snippet.randomindexconfig.xml"));
   }
 
+  // Creates minimal full setup, including the old solr.xml file that used to be hard coded in COnfigSolrXmlOld
+  public static void copyMinFullSetup(File dstRoot) throws IOException {
+    if (! dstRoot.exists()) {
+      assertTrue("Failed to make subdirectory ", dstRoot.mkdirs());
+    }
+    File xmlF = new File(SolrTestCaseJ4.TEST_HOME(), "solr.xml");
+    FileUtils.copyFile(xmlF, new File(dstRoot, "solr.xml"));
+    copyMinConf(dstRoot);
+  }
+
+  // Creates a consistent configuration, _including_ solr.xml at dstRoot. Creates collection1/conf and copies
+  // the stock files in there. Seems to be indicated for some tests when we remove the default, hard-coded
+  // solr.xml from being automatically synthesized from SolrConfigXmlOld.DEFAULT_SOLR_XML.
+  public static void copySolrHomeToTemp(File dstRoot, String collection) throws IOException {
+    if (!dstRoot.exists()) {
+      assertTrue("Failed to make subdirectory ", dstRoot.mkdirs());
+    }
+
+    FileUtils.copyFile(new File(SolrTestCaseJ4.TEST_HOME(), "solr.xml"), new File(dstRoot, "solr.xml"));
+
+    File subHome = new File(dstRoot, collection + File.separator + "conf");
+    String top = SolrTestCaseJ4.TEST_HOME() + "/collection1/conf";
+    FileUtils.copyFile(new File(top, "currency.xml"), new File(subHome, "currency.xml"));
+    FileUtils.copyFile(new File(top, "mapping-ISOLatin1Accent.txt"), new File(subHome, "mapping-ISOLatin1Accent.txt"));
+    FileUtils.copyFile(new File(top, "old_synonyms.txt"), new File(subHome, "old_synonyms.txt"));
+    FileUtils.copyFile(new File(top, "open-exchange-rates.json"), new File(subHome, "open-exchange-rates.json"));
+    FileUtils.copyFile(new File(top, "protwords.txt"), new File(subHome, "protwords.txt"));
+    FileUtils.copyFile(new File(top, "schema.xml"), new File(subHome, "schema.xml"));
+    FileUtils.copyFile(new File(top, "solrconfig.snippet.randomindexconfig.xml"), new File(subHome, "solrconfig.snippet.randomindexconfig.xml"));
+    FileUtils.copyFile(new File(top, "solrconfig.xml"), new File(subHome, "solrconfig.xml"));
+    FileUtils.copyFile(new File(top, "stopwords.txt"), new File(subHome, "stopwords.txt"));
+    FileUtils.copyFile(new File(top, "synonyms.txt"), new File(subHome, "synonyms.txt"));
+  }
+
   public static CoreDescriptorBuilder buildCoreDescriptor(CoreContainer container, String name, String instancedir) {
     return new CoreDescriptorBuilder(container, name, instancedir);
   }
