diff --git a/db/derby/code/trunk/java/demo/nserverdemo/NsSample.java b/db/derby/code/trunk/java/demo/nserverdemo/NsSample.java
index f3486d4a..0cf7c329 100644
--- a/db/derby/code/trunk/java/demo/nserverdemo/NsSample.java
+++ b/db/derby/code/trunk/java/demo/nserverdemo/NsSample.java
@@ -41,8 +41,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  The program:
 
  1.	starts the Derby Network Server
- 2.	loads the IBM DB2 JDBC Universal driver or derby client JDBC driver
-        (default is the derby client JDBC driver)
+ 2.	loads the derby client JDBC driver
  3. creates the database if not already created
  4. checks to see if the schema is already created, and if not,
  5. creates the schema which includes the table SAMPLETBL and corresponding indexes.
@@ -66,7 +65,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 public class NsSample {
 
-	public static final String DB2_JDBC_UNIVERSAL_DRIVER = new String("com.ibm.db2.jcc.DB2Driver");
         public static final String DERBY_CLIENT_DRIVER = "org.apache.derby.jdbc.ClientDriver";
 	public static int NUM_ROWS = 50; /* Number of rows to load initially */
 	public static int ITERATIONS = 10;  //Each client does these many iterations
@@ -82,7 +80,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	// To connect to Derby Network Server
 	// This URL describes the target database for type 4 connectivity
 	// Notice that the properties may be established via the URL syntax
-	private static final String CS_NS_DBURL= "jdbc:derby:net://localhost:"+NETWORKSERVER_PORT+"/NSSampledb;create=true;retrieveMessagesFromServerOnGetMessage=true;deferPrepares=true;";
         // URL for the Derby client JDBC driver.
 	private static final String DERBY_CLIENT_URL= "jdbc:derby://localhost:"+NETWORKSERVER_PORT+"/NSSampledb;create=true;";
 
@@ -105,9 +102,6 @@ public void startSample(String[] args) throws Exception {
 
 	  try  {
 
-                // Determine which JDBC driver we are using with Derby
-                parseArguments(args);
-
 		pw = new PrintWriter(System.out,true);	// to print messages
 		pw.println("Using JDBC driver: " + jdbcDriver);
 
@@ -170,8 +164,8 @@ comment out the next block of code (i.e. until the comment line 'End - network s
 		Properties properties = new java.util.Properties();
 
 		// The user and password properties are a must, required by JCC
-		properties.setProperty("user","cloud");
-		properties.setProperty("password","scape");
+		properties.setProperty("user","derbyuser");
+		properties.setProperty("password","pass");
 
 		// Get database connection via DriverManager api
 		try	{
@@ -231,33 +225,5 @@ comment out the next block of code (i.e. until the comment line 'End - network s
       }
 	 }
 
-    /**
-     * Determine which jdbc driver to use by parsing the command line args.
-     *  Accepted values:
-     *  jccjdbclient   - The DB2 type 4 universal driver
-     *  derbyclient    - The Derby network driver (default).
-     *  Note: because this is just a sample, we only care about whether
-     *  the above values are specified.  If they are not, then we default
-     *  to the Derby network driver.
-     */
-    private void parseArguments(String[] args)
-    {
-        int length = args.length;
-
-        for (int index = 0; index < length; index++)
-        {
-            if (args[index].equalsIgnoreCase("jccjdbcclient"))
-            {
-                jdbcDriver = DB2_JDBC_UNIVERSAL_DRIVER;
-                url = CS_NS_DBURL;
-                break;
-            } else if (args[index].equalsIgnoreCase("derbyClient"))
-            {
-                jdbcDriver = DERBY_CLIENT_DRIVER;
-                url = DERBY_CLIENT_URL;
-                break;
-            }
-        }
-    }
 
 }
diff --git a/db/derby/code/trunk/java/demo/nserverdemo/SimpleNetworkClientSample.java b/db/derby/code/trunk/java/demo/nserverdemo/SimpleNetworkClientSample.java
index 6c9e82c2..c3b1b105 100644
--- a/db/derby/code/trunk/java/demo/nserverdemo/SimpleNetworkClientSample.java
+++ b/db/derby/code/trunk/java/demo/nserverdemo/SimpleNetworkClientSample.java
@@ -36,14 +36,14 @@ Licensed to the Apache Software Foundation (ASF) under one or more
  * and interact with Derby Network Server
  *
  * In particular,this sample program
- * 1)   loads the DB2 Universal JDBC Driver or the Derby Network Client driver
+ * 1)   loads the Derby Network Client driver
    (default is the derby network client driver)
  * 2)	obtains a client connection using the Driver Manager
  * 3)	obtains a client connection using a DataSource
  * 4)	tests the database connections by executing a sample query
  * and then exits the program
  *
- * Before running this program, please make sure that Clouscape Network Server is up
+ * Before running this program, please make sure that Derby Network Server is up
  * and running.
  *  <P>
  *  Usage: java SimpleNetworkClientSample
@@ -63,11 +63,7 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 	 */
 	private static int NETWORKSERVER_PORT=1527;
 
-	/**
-	 * DB2 JDBC UNIVERSAL DRIVER class names
-	 */
-	private static final String DB2_JDBC_UNIVERSAL_DRIVER = "com.ibm.db2.jcc.DB2Driver";
-	private static final String DB2_JCC_DS = "com.ibm.db2.jcc.DB2SimpleDataSource";
+
 	/**
 	 * Derby Network Client Driver class names
 	 */
@@ -77,7 +73,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
 
 	/**
 	 * This URL is used to connect to Derby Network Server using the DriverManager.
-	 * This URL is for the DB2 JDBC Universal Driver
 	 * Notice that the properties may be established via the URL syntax
 	 */
 	private static final String CS_NS_DBURL= "jdbc:derby:net://localhost:"+NETWORKSERVER_PORT+"/"+DBNAME+";retrieveMessagesFromServerOnGetMessage=true;deferPrepares=true;";
@@ -106,8 +101,6 @@ public void startSample (String[] args) throws Exception
 		try
 		{
 			System.out.println("Starting Sample client program ");
-                        // Determine which JDBC driver to use
-                        parseArguments(args);
 
 			// load  the appropriate JDBC Driver
 			loadDriver();
@@ -205,15 +198,6 @@ public Connection getClientDataSourceConn(javax.sql.DataSource ds)
 		args = new Object[] {new Integer(1527)};
 		portnumber.invoke(ds, args);
 
-                // The following is only applicable to the DB2 JDBC driver
-                if(jdbcDataSource.equals( DB2_JCC_DS))
-                {
-			// driver type must be 4 to access Derby Network Server
-			Method drivertype = nsDataSource.getMethod("setDriverType", methodParams);
-			args = new Object[] {new Integer(4)};
-			drivertype.invoke(ds, args);
-                }
-
 		return ds;
 
 	}
@@ -243,8 +227,8 @@ public Connection getClientDriverManagerConnection()
 		Properties properties = new java.util.Properties();
 
 		// The user and password properties are a must, required by JCC
-		properties.setProperty("user","cloud");
-		properties.setProperty("password","scape");
+		properties.setProperty("user","derbyuser");
+		properties.setProperty("password","pass");
 
 		// Get database connection  via DriverManager api
 		Connection conn = DriverManager.getConnection(url,properties); 
@@ -286,37 +270,6 @@ public void test(Connection conn)
 		  	stmt.close();
  	  }
 	}
-   /**
-     * Determine which jdbc driver to use by parsing the command line args.
-     *  Accepted values:
-     *  jccjdbclient   - The DB2 type 4 universal driver
-     *  derbyclient    - The Derby network driver (default).
-     *  Note: because this is just a sample, we only care about whether
-     *  the above values are specified.  If they are not, then we default
-     *  to the Derby network driver.
-     */
-    private void parseArguments(String[] args)
-    {
-        int length = args.length;
-
-        for (int index = 0; index < length; index++)
-        {
-            if (args[index].equalsIgnoreCase("jccjdbcclient"))
-            {
-
-                jdbcDriver = DB2_JDBC_UNIVERSAL_DRIVER;
-                jdbcDataSource = DB2_JCC_DS;
-                url = CS_NS_DBURL;
-                break;
-            } else if (args[index].equalsIgnoreCase("derbyClient"))
-            {
-                jdbcDriver = DERBY_CLIENT_DRIVER;
-                jdbcDataSource = DERBY_CLIENT_DS;
-                url = DERBY_CLIENT_URL;
-                break;
-            }
-        }
-    }
 
 }
 
diff --git a/db/derby/code/trunk/java/demo/simple/SimpleApp.java b/db/derby/code/trunk/java/demo/simple/SimpleApp.java
index 5a0f1428..165e5dbc 100644
--- a/db/derby/code/trunk/java/demo/simple/SimpleApp.java
+++ b/db/derby/code/trunk/java/demo/simple/SimpleApp.java
@@ -72,9 +72,6 @@ Licensed to the Apache Software Foundation (ASF) under one or more
      *    <li><code>derbyclient</code> - will use the Derby client driver to
      *        access the Derby Network Server. This driver is included in the
      *        derbyclient.jar file.</li>
-     *    <li><code>jccjdbcclient</code> - will use the DB2 Universal JDBC
-     *        network client driver, also known as JCC, to access the Network
-     *        Server. This driver is not part of the Derby distribution.</li>
      *  </ul>
      * <p>
      * When you are using a client/server framework, the network server must
@@ -101,14 +98,14 @@ public static void main(String[] args)
      * <p>
      * Starts the actual demo activities. This includes loading the correct
      * JDBC driver, creating a database by making a connection to Derby,
-     * creating a table in the database, and inserting, updating and retreiving
-     * some data. Some of the retreived data is then verified (compared) against
+     * creating a table in the database, and inserting, updating and retrieving
+     * some data. Some of the retrieved data is then verified (compared) against
      * the expected results. Finally, the table is deleted and, if the embedded
      * framework is used, the database is shut down.</p>
      * <p>
      * Generally, when using a client/server framework, other clients may be
      * (or want to be) connected to the database, so you should be careful about
-     * doing shutdown unless you know that noone else needs to access the
+     * doing shutdown unless you know that no one else needs to access the
      * database until it is rebooted. That is why this demo will not shut down
      * the database unless it is running Derby embedded.</p>
      *
@@ -254,7 +251,7 @@ void go(String[] args)
              * comprehend, so we use a different pattern.
              */
 
-            int number; // street number retreived from the database
+            int number; // street number retrieved from the database
             boolean failure = false;
             if (!rs.next())
             {
@@ -329,7 +326,7 @@ void go(String[] args)
                     // the shutdown=true attribute shuts down Derby
                     DriverManager.getConnection("jdbc:derby:;shutdown=true");
 
-                    // To shut down a specific database only, but keeep the
+                    // To shut down a specific database only, but keep the
                     // engine running (for example for connecting to other
                     // databases), specify a database in the connection URL:
                     //DriverManager.getConnection("jdbc:derby:" + dbName + ";shutdown=true");
@@ -472,20 +469,13 @@ public static void printSQLException(SQLException e)
      * If the argument is "embedded" or invalid, this method will not change
      * anything, meaning that the default values will be used.</p>
      * <p>
-     * @param args JDBC connection framework, either "embedded", "derbyclient"
-     *        or "jccjdbcclient". Only the first argument will be considered,
-     *        the rest will be ignored.
+     * @param args JDBC connection framework, either "embedded", "derbyclient".
+     * Only the first argument will be considered, the rest will be ignored.
      */
     private void parseArguments(String[] args)
     {
         if (args.length > 0) {
-            if (args[0].equalsIgnoreCase("jccjdbcclient"))
-            {
-                framework = "jccjdbc";
-                driver = "com.ibm.db2.jcc.DB2Driver";
-                protocol = "jdbc:derby:net://localhost:1527/";
-            }
-            else if (args[0].equalsIgnoreCase("derbyclient"))
+            if (args[0].equalsIgnoreCase("derbyclient"))
             {
                 framework = "derbyclient";
                 driver = "org.apache.derby.jdbc.ClientDriver";
