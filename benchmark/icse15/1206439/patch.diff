diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/BytesRef.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/BytesRef.java
index 35abf20f..6f7fe958 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/BytesRef.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/BytesRef.java
@@ -25,8 +25,6 @@
  *
  *  @lucene.experimental */
 public final class BytesRef implements Comparable<BytesRef>,Cloneable {
-
-  static final int HASH_PRIME = 31;
   public static final byte[] EMPTY_BYTES = new byte[0]; 
 
   /** The contents of the BytesRef. Should never be {@code null}. */
@@ -152,12 +150,12 @@ public boolean endsWith(BytesRef other) {
    */
   @Override
   public int hashCode() {
-    int result = 0;
+    int hash = 0;
     final int end = offset + length;
     for(int i=offset;i<end;i++) {
-      result = HASH_PRIME * result + bytes[i];
+      hash = 31 * hash + bytes[i];
     }
-    return result;
+    return hash;
   }
 
   @Override
@@ -165,8 +163,11 @@ public boolean equals(Object other) {
     if (other == null) {
       return false;
     }
+    if (other instanceof BytesRef) {
     return this.bytesEquals((BytesRef) other);
   }
+    return false;
+  }
 
   /** Interprets stored bytes as UTF8 bytes, returning the
    *  resulting string */
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/BytesRefHash.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/BytesRefHash.java
index 2fdb32ea..3e29bde3 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/BytesRefHash.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/BytesRefHash.java
@@ -432,7 +432,7 @@ private void rehash(final int newSize, boolean hashOnData) {
 
           final int endPos = pos + len;
           while (pos < endPos) {
-            code = BytesRef.HASH_PRIME * code + bytes[pos++];
+            code = 31 * code + bytes[pos++];
           }
         } else {
           code = bytesStart[e0];
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/CharsRef.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/CharsRef.java
index b8b0c801..e5f11c3a 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/CharsRef.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/CharsRef.java
@@ -26,7 +26,7 @@
  * @lucene.internal
  */
 public final class CharsRef implements Comparable<CharsRef>, CharSequence, Cloneable {
-  private static final char[] EMPTY_ARRAY = new char[0];
+  public static final char[] EMPTY_CHARS = new char[0];
   public char[] chars;
   public int offset;
   public int length;
@@ -35,7 +35,7 @@
    * Creates a new {@link CharsRef} initialized an empty array zero-length
    */
   public CharsRef() {
-    this(EMPTY_ARRAY, 0, 0);
+    this(EMPTY_CHARS, 0, 0);
   }
 
   /**
@@ -86,26 +86,11 @@ public int hashCode() {
 
   @Override
   public boolean equals(Object other) {
-    if (this == other) {
-      return true;
-    }
-
-    if (other instanceof CharsRef) {
-      return charsEquals((CharsRef) other);
-    }
-
-    if (other instanceof CharSequence) {
-      final CharSequence seq = (CharSequence) other;
-      if (length == seq.length()) {
-        int n = length;
-        int i = offset;
-        int j = 0;
-        while (n-- != 0) {
-          if (chars[i++] != seq.charAt(j++))
+    if (other == null) {
             return false;
         }
-        return true;
-      }
+    if (other instanceof CharsRef) {
+      return this.charsEquals((CharsRef) other);
     }
     return false;
   }
diff --git a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/IntsRef.java b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/IntsRef.java
index eb2d4022..cf659073 100644
--- a/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/IntsRef.java
+++ b/lucene/dev/branches/branch_3x/lucene/src/java/org/apache/lucene/util/IntsRef.java
@@ -23,11 +23,13 @@
  *  @lucene.internal */
 public final class IntsRef implements Comparable<IntsRef>, Cloneable {
 
+  public static final int[] EMPTY_INTS = new int[0];
   public int[] ints;
   public int offset;
   public int length;
 
   public IntsRef() {
+    ints = EMPTY_INTS;
   }
 
   public IntsRef(int capacity) {
@@ -35,6 +37,7 @@ public IntsRef(int capacity) {
   }
 
   public IntsRef(int[] ints, int offset, int length) {
+    assert ints != null;
     this.ints = ints;
     this.offset = offset;
     this.length = length;
@@ -58,8 +61,14 @@ public int hashCode() {
   
   @Override
   public boolean equals(Object other) {
+    if (other == null) {
+      return false;
+    }
+    if (other instanceof IntsRef) {
     return this.intsEquals((IntsRef) other);
   }
+    return false;
+  }
 
   public boolean intsEquals(IntsRef other) {
     if (length == other.length) {
