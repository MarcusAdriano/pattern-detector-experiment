diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/BitSet.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/BitSet.java
index dbf9d8bd..d9700627 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/BitSet.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/BitSet.java
@@ -32,6 +32,10 @@
     bits = new long[numLongs];
   }
 
+  private BitSet(long[] bits) {
+    this.bits = bits;
+  }
+
   boolean get(int index) {
     // skipping range check for speed
     return (bits[index >>> 6] & (1L << (index & 0x3F))) != 0L;
@@ -56,11 +60,7 @@ void clear() {
 
   @Override
   public BitSet clone() {
-    try {
-      return (BitSet) super.clone();
-    } catch (CloneNotSupportedException cnse) {
-      throw new AssertionError();
-    }
+    return new BitSet(bits);
   }
 
   @Override
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastMap.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastMap.java
index d85a42ec..10d9a2e6 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastMap.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/common/FastMap.java
@@ -311,7 +311,6 @@ void iteratorRemove(int lastNext) {
     numEntries--;
   }
 
-  @SuppressWarnings("unchecked")
   @Override
   public FastMap<K, V> clone() {
     FastMap<K, V> clone;
@@ -320,12 +319,9 @@ void iteratorRemove(int lastNext) {
     } catch (CloneNotSupportedException cnse) {
       throw new AssertionError();
     }
-    int length = keys.length;
-    clone.keys = (K[]) new Object[length];
-    clone.values = (V[]) new Object[length];
-    System.arraycopy(keys, 0, clone.keys, 0, length);
-    System.arraycopy(values, 0, clone.values, 0, length);
-    clone.recentlyAccessed = countingAccesses ? new BitSet(length) : null;
+    clone.keys = keys.clone();
+    clone.values = values.clone();
+    clone.recentlyAccessed = countingAccesses ? new BitSet(keys.length) : null;
     return clone;
   }
 
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/BooleanItemPreferenceArray.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/BooleanItemPreferenceArray.java
index 35eda0fc..d74645f4 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/BooleanItemPreferenceArray.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/BooleanItemPreferenceArray.java
@@ -45,11 +45,6 @@ public BooleanItemPreferenceArray(int size) {
     this.IDs = new long[size];
   }
 
-  @Override
-  public int length() {
-    return IDs.length;
-  }
-
   public BooleanItemPreferenceArray(List<Preference> prefs, boolean forOneUser) {
     this(prefs.size());
     for (int i = 0; i < prefs.size(); i++) {
@@ -59,6 +54,19 @@ public BooleanItemPreferenceArray(List<Preference> prefs, boolean forOneUser) {
     id = forOneUser ? prefs.get(0).getUserID() : prefs.get(0).getItemID();
   }
 
+  /**
+   * This is a private copy constructor for clone().
+   */
+  private BooleanItemPreferenceArray(long[] IDs, long id) {
+    this.IDs = IDs;
+    this.id = id;
+  }
+
+  @Override
+  public int length() {
+    return IDs.length;
+  }
+
   @Override
   public Preference get(int i) {
     return new PreferenceView(i);
@@ -85,6 +93,11 @@ public long getItemID(int i) {
     return id;
   }
 
+  /**
+   * {@inheritDoc}
+   *
+   * Note that this method will actually set the item ID for <em>all</em> preferences.
+   */
   @Override
   public void setItemID(int i, long itemID) {
     id = itemID;
@@ -118,12 +131,23 @@ public void sortByValueReversed() {
   }
 
   @Override
-  public GenericItemPreferenceArray clone() {
-    try {
-      return (GenericItemPreferenceArray) super.clone();
-    } catch (CloneNotSupportedException cnse) {
-      throw new AssertionError();
+  public boolean hasPrefWithUserID(long userID) {
+    for (long id : IDs) {
+      if (userID == id) {
+        return true;
+      }
     }
+    return false;
+    }
+
+  @Override
+  public boolean hasPrefWithItemID(long itemID) {
+    return id == itemID;
+  }
+
+  @Override
+  public BooleanItemPreferenceArray clone() {
+    return new BooleanItemPreferenceArray(IDs.clone(), id);
   }
 
   @Override
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/BooleanUserPreferenceArray.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/BooleanUserPreferenceArray.java
index 476d4fde..8e969dd7 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/BooleanUserPreferenceArray.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/BooleanUserPreferenceArray.java
@@ -45,11 +45,6 @@ public BooleanUserPreferenceArray(int size) {
     this.IDs = new long[size];
   }
 
-  @Override
-  public int length() {
-    return IDs.length;
-  }
-
   public BooleanUserPreferenceArray(List<Preference> prefs) {
     this(prefs.size());
     for (int i = 0; i < prefs.size(); i++) {
@@ -59,6 +54,19 @@ public BooleanUserPreferenceArray(List<Preference> prefs) {
     id = prefs.get(0).getUserID();
   }
 
+  /**
+   * This is a private copy constructor for clone().
+   */
+  private BooleanUserPreferenceArray(long[] IDs, long id) {
+    this.IDs = IDs;
+    this.id = id;
+  }
+
+  @Override
+  public int length() {
+    return IDs.length;
+  }
+
   @Override
   public Preference get(int i) {
     return new PreferenceView(i);
@@ -75,6 +83,11 @@ public long getUserID(int i) {
     return id;
   }
 
+  /**
+   * {@inheritDoc}
+   *
+   * Note that this method will actually set the user ID for <em>all</em> preferences.
+   */
   @Override
   public void setUserID(int i, long userID) {
     id = userID;
@@ -118,12 +131,23 @@ public void sortByValueReversed() {
   }
 
   @Override
-  public GenericItemPreferenceArray clone() {
-    try {
-      return (GenericItemPreferenceArray) super.clone();
-    } catch (CloneNotSupportedException cnse) {
-      throw new AssertionError();
+  public boolean hasPrefWithUserID(long userID) {
+    return id == userID;
     }
+
+  @Override
+  public boolean hasPrefWithItemID(long itemID) {
+    for (long id : IDs) {
+      if (itemID == id) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  @Override
+  public BooleanUserPreferenceArray clone() {
+    return new BooleanUserPreferenceArray(IDs.clone(), id);
   }
 
   @Override
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericItemPreferenceArray.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericItemPreferenceArray.java
index 7b71ddad..8c059742 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericItemPreferenceArray.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericItemPreferenceArray.java
@@ -50,11 +50,6 @@ public GenericItemPreferenceArray(int size) {
     values = new float[size];
   }
 
-  @Override
-  public int length() {
-    return IDs.length;
-  }
-
   public GenericItemPreferenceArray(List<Preference> prefs) {
     this(prefs.size());
     for (int i = 0; i < prefs.size(); i++) {
@@ -65,6 +60,20 @@ public GenericItemPreferenceArray(List<Preference> prefs) {
     id = prefs.get(0).getItemID();
   }
 
+  /**
+   * This is a private copy constructor for clone().
+   */
+  private GenericItemPreferenceArray(long[] IDs, long id, float[] values) {
+    this.IDs = IDs;
+    this.id = id;
+    this.values = values;
+  }
+
+  @Override
+  public int length() {
+    return IDs.length;
+  }
+
   @Override
   public Preference get(int i) {
     return new PreferenceView(i);
@@ -92,6 +101,11 @@ public long getItemID(int i) {
     return id;
   }
 
+  /**
+   * {@inheritDoc}
+   *
+   * Note that this method will actually set the item ID for <em>all</em> preferences.
+   */
   @Override
   public void setItemID(int i, long itemID) {
     id = itemID;
@@ -126,6 +140,21 @@ public void sortByValueReversed() {
     selectionSort(VALUE_REVERSED);
   }
 
+  @Override
+  public boolean hasPrefWithUserID(long userID) {
+    for (long id : IDs) {
+      if (userID == id) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  @Override
+  public boolean hasPrefWithItemID(long itemID) {
+    return id == itemID;
+  }
+
   private void selectionSort(int type) {
     // I think this sort will prove to be too dumb, but, it's in place and OK for tiny, mostly sorted data
     int max = length();
@@ -176,11 +205,7 @@ private void swap(int i, int j) {
 
   @Override
   public GenericItemPreferenceArray clone() {
-    try {
-      return (GenericItemPreferenceArray) super.clone();
-    } catch (CloneNotSupportedException cnse) {
-      throw new AssertionError();
-    }
+    return new GenericItemPreferenceArray(IDs.clone(), id, values.clone());
   }
 
   @Override
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericUserPreferenceArray.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericUserPreferenceArray.java
index 73c75102..aeb480db 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericUserPreferenceArray.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/impl/model/GenericUserPreferenceArray.java
@@ -51,11 +51,6 @@ public GenericUserPreferenceArray(int size) {
     values = new float[size];
   }
 
-  @Override
-  public int length() {
-    return IDs.length;
-  }
-
   public GenericUserPreferenceArray(List<Preference> prefs) {
     this(prefs.size());
     for (int i = 0; i < prefs.size(); i++) {
@@ -66,6 +61,20 @@ public GenericUserPreferenceArray(List<Preference> prefs) {
     id = prefs.get(0).getUserID();
   }
 
+  /**
+   * This is a private copy constructor for clone().
+   */
+  private GenericUserPreferenceArray(long[] IDs, long id, float[] values) {
+    this.IDs = IDs;
+    this.id = id;
+    this.values = values;
+  }
+
+  @Override
+  public int length() {
+    return IDs.length;
+  }
+
   @Override
   public Preference get(int i) {
     return new PreferenceView(i);
@@ -83,6 +92,11 @@ public long getUserID(int i) {
     return id;
   }
 
+  /**
+   * {@inheritDoc}
+   *
+   * Note that this method will actually set the user ID for <em>all</em> preferences.
+   */
   @Override
   public void setUserID(int i, long userID) {
     id = userID;
@@ -127,6 +141,21 @@ public void sortByValueReversed() {
     selectionSort(VALUE_REVERSED);
   }
 
+  @Override
+  public boolean hasPrefWithUserID(long userID) {
+    return id == userID;
+  }
+
+  @Override
+  public boolean hasPrefWithItemID(long itemID) {
+    for (long id : IDs) {
+      if (itemID == id) {
+        return true;
+      }
+    }
+    return false;
+  }
+
   private void selectionSort(int type) {
     // I think this sort will prove to be too dumb, but, it's in place and OK for tiny, mostly sorted data
     int max = length();
@@ -177,11 +206,7 @@ private void swap(int i, int j) {
 
   @Override
   public GenericUserPreferenceArray clone() {
-    try {
-      return (GenericUserPreferenceArray) super.clone();
-    } catch (CloneNotSupportedException cnse) {
-      throw new AssertionError();
-    }
+    return new GenericUserPreferenceArray(IDs.clone(), id, values.clone());
   }
 
   @Override
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/model/PreferenceArray.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/model/PreferenceArray.java
index b41af1cc..30a54a15 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/model/PreferenceArray.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/cf/taste/model/PreferenceArray.java
@@ -20,37 +20,108 @@
 import java.io.Serializable;
 
 /**
- * An alternate representation of an array of {@link Preference}. Implementations, in theory, can produce a more
- * memory-efficient representation. This is not used yet.
+ * An alternate representation of an array of {@link Preference}.
+ * Implementations, in theory, can produce a more
+ * memory-efficient representation.
  */
 public interface PreferenceArray extends Cloneable, Serializable, Iterable<Preference> {
 
+  /**
+   * @return size of length of the "array"
+   */
   int length();
   
+  /**
+   * @param i index
+   * @return a materialized {@link Preference} representation of the preference at i
+   */
   Preference get(int i);
 
+  /**
+   * Sets preference at i from information in the given {@link Preference}
+   *
+   * @param i
+   * @param pref
+   */
   void set(int i, Preference pref);
 
+  /**
+   * @param i index
+   * @return user ID from preference at i
+   */
   long getUserID(int i);
 
+  /**
+   * Sets user ID for preference at i.
+   *
+   * @param i index
+   * @param value new user ID
+   */
   void setUserID(int i, long userID);
 
+  /**
+   * @param i index
+   * @return item ID from preference at i
+   */
   long getItemID(int i);
 
+  /**
+   * Sets item ID for preference at i.
+   *
+   * @param i index
+   * @param value new item ID
+   */
   void setItemID(int i, long itemID);
 
+  /**
+   * @param i index
+   * @return preference value from preference at i
+   */
   float getValue(int i);
 
+  /**
+   * Sets preference value for preference at i.
+   *
+   * @param i index
+   * @param value new preference value
+   */
   void setValue(int i, float value);
 
+  /**
+   * @return independent copy of this object
+   */
   PreferenceArray clone();
 
+  /**
+   * Sorts underlying array by user ID, ascending.
+   */
   void sortByUser();
 
+  /**
+   * Sorts underlying array by item ID, ascending.
+   */
   void sortByItem();
 
+  /**
+   * Sorts underlying array by preference value, ascending.
+   */
   void sortByValue();
 
+  /**
+   * Sorts underlying array by preference value, descending.
+   */
   void sortByValueReversed();
 
+  /**
+   * @param userID user ID
+   * @return true if array contains a preference with given user ID
+   */
+  boolean hasPrefWithUserID(long userID);
+
+  /**
+   * @param itemID item ID
+   * @return true if array contains a preference with given item ID
+   */
+  boolean hasPrefWithItemID(long itemID);
+
 }
diff --git a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/matrix/OrderedIntDoubleMapping.java b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/matrix/OrderedIntDoubleMapping.java
index c5d5c455..ffaf928b 100644
--- a/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/matrix/OrderedIntDoubleMapping.java
+++ b/lucene/mahout/trunk/core/src/main/java/org/apache/mahout/matrix/OrderedIntDoubleMapping.java
@@ -38,6 +38,12 @@
     numMappings = 0;
   }
 
+  private OrderedIntDoubleMapping(int[] indices, double[] values, int numMappings) {
+    this.indices = indices;
+    this.values = values;
+    this.numMappings = numMappings;
+  }
+
   int[] getIndices() {
     return indices;
   }
@@ -155,11 +161,7 @@ public String toString() {
 
   @Override
   public OrderedIntDoubleMapping clone() {
-    OrderedIntDoubleMapping clone = new OrderedIntDoubleMapping(numMappings);
-    System.arraycopy(indices, 0, clone.indices, 0, numMappings);
-    System.arraycopy(values, 0, clone.values, 0, numMappings);
-    clone.numMappings = numMappings;
-    return clone;
+    return new OrderedIntDoubleMapping(indices, values, numMappings);
   }
 
 }
