diff --git a/lucene/java/branches/flex_1458/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.java b/lucene/java/branches/flex_1458/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.java
index 9f72bed4..33e0b656 100644
--- a/lucene/java/branches/flex_1458/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.java
+++ b/lucene/java/branches/flex_1458/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.java
@@ -222,8 +222,12 @@ public void loadTermsIndex() throws IOException {
     }
 
     @Override
-    public boolean isIndexTerm(long ord, int docFreq) {
+    public boolean isIndexTerm(long ord, int docFreq, boolean onlyLoaded) {
+      if (onlyLoaded) {
       return ord % totalIndexInterval == 0;
+      } else {
+        return ord % indexInterval == 0;
+      }
     }
 
     @Override
@@ -433,14 +437,12 @@ public final void getIndexOffset(BytesRef term, TermsIndexResult result) throws
         int hi = fileOffset.length - 1;
 
         while (hi >= lo) {
-          int mid = (lo + hi) >> 1;
+          int mid = (lo + hi) >>> 1;
 
           final long loc = blockPointer[mid];
           result.term.bytes = blocks[(int) (loc >> BYTE_BLOCK_SHIFT)];
           result.term.offset = (int) (loc & BYTE_BLOCK_MASK);
-          //System.out.println("  cycle mid=" + mid + " bytes=" + result.term.bytes + " offset=" + result.term.offset);
           result.term.length = termLength[mid];
-          //System.out.println("    term=" + result.term);
 
           int delta = termComp.compare(term, result.term);
           if (delta < 0) {
diff --git a/lucene/java/branches/flex_1458/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.java b/lucene/java/branches/flex_1458/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.java
index 3c1a157e..71285687 100644
--- a/lucene/java/branches/flex_1458/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.java
+++ b/lucene/java/branches/flex_1458/src/java/org/apache/lucene/index/codecs/standard/StandardTermsDictReader.java
@@ -67,7 +67,7 @@
   // Comparator that orders our terms
   private final BytesRef.Comparator termComp;
 
-  // Caches the most recently looked-up Terms:
+  // Caches the most recently looked-up field + terms:
   private final Cache<FieldAndTerm,TermState> termsCache;
 
   // Reads the terms index
@@ -359,8 +359,8 @@ public SeekStatus seek(BytesRef term) throws IOException {
           }
         }
 
-        // Useed only for assert:
-        final int startOrd;
+        // Used only for assert:
+        final long startOrd;
 
         if (doSeek) {
 
@@ -383,10 +383,10 @@ public SeekStatus seek(BytesRef term) throws IOException {
           // special case it:
           bytesReader.reset(indexResult.term);
           
-          state.ord = (int) indexResult.position-1;
+          state.ord = indexResult.position-1;
           assert state.ord >= -1: "ord=" + state.ord;
 
-          startOrd = (int) indexResult.position;
+          startOrd = indexResult.position;
 
           if (Codec.DEBUG) {
             Codec.debug("  set ord=" + state.ord);
@@ -434,7 +434,7 @@ public SeekStatus seek(BytesRef term) throws IOException {
           // term we are looking for.  So, we should never
           // cross another index term (besides the first
           // one) while we are scanning:
-          assert state.ord == startOrd || !indexReader.isIndexTerm(state.ord, state.docFreq);
+          assert state.ord == startOrd || !indexReader.isIndexTerm(state.ord, state.docFreq, true);
         }
 
         if (Codec.DEBUG) {
@@ -529,7 +529,7 @@ public BytesRef next() throws IOException {
         // wrong offset.  make a test...
         postingsReader.readTerm(in,
                                 fieldInfo, state,
-                                indexReader.isIndexTerm(1+state.ord, state.docFreq));
+                                indexReader.isIndexTerm(1+state.ord, state.docFreq, false));
 
         state.ord++;
 
diff --git a/lucene/java/branches/flex_1458/src/java/org/apache/lucene/index/codecs/standard/StandardTermsIndexReader.java b/lucene/java/branches/flex_1458/src/java/org/apache/lucene/index/codecs/standard/StandardTermsIndexReader.java
index 403ebb66..a89365d7 100644
--- a/lucene/java/branches/flex_1458/src/java/org/apache/lucene/index/codecs/standard/StandardTermsIndexReader.java
+++ b/lucene/java/branches/flex_1458/src/java/org/apache/lucene/index/codecs/standard/StandardTermsIndexReader.java
@@ -58,7 +58,7 @@
 
     /** Call this sequentially for each term encoutered,
      *  after calling {@link #getIndexOffset}. */
-    public abstract boolean isIndexTerm(long ord, int docFreq) throws IOException;
+    public abstract boolean isIndexTerm(long ord, int docFreq, boolean onlyLoaded) throws IOException;
 
     /** Finds the next index term, after the specified
      *  ord.  Returns true if one exists.  */
diff --git a/lucene/java/branches/flex_1458/src/test/org/apache/lucene/index/TestIndexWriter.java b/lucene/java/branches/flex_1458/src/test/org/apache/lucene/index/TestIndexWriter.java
index 389b1998..290f5d85 100644
--- a/lucene/java/branches/flex_1458/src/test/org/apache/lucene/index/TestIndexWriter.java
+++ b/lucene/java/branches/flex_1458/src/test/org/apache/lucene/index/TestIndexWriter.java
@@ -4817,4 +4817,31 @@ public void testTermUTF16SortOrder() throws Throwable {
     writer.close();
     dir.close();
   }
+
+  public void testIndexDivisor() throws Exception {
+    Directory dir = new MockRAMDirectory();
+    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.UNLIMITED);
+    StringBuilder s = new StringBuilder();
+    // must be > 256
+    for(int i=0;i<300;i++) {
+      s.append(' ').append(""+i);
+    }
+    Document d = new Document();
+    Field f = new Field("field", s.toString(), Field.Store.NO, Field.Index.ANALYZED);
+    d.add(f);
+    w.addDocument(d);
+    IndexReader r = w.getReader(2).getSequentialSubReaders()[0];
+    TermsEnum t = r.fields().terms("field").iterator();
+    int count = 0;
+    while(t.next() != null) {
+      final DocsEnum docs = t.docs(null, null);
+      assertEquals(0, docs.nextDoc());
+      assertEquals(DocsEnum.NO_MORE_DOCS, docs.nextDoc());
+      count++;
+    }
+    assertEquals(300, count);
+    r.close();
+    w.close();
+    dir.close();
+  }
 }
