diff --git a/db/derby/code/branches/10.2/java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java b/db/derby/code/branches/10.2/java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java
index 665ec7da..4337f57c 100644
--- a/db/derby/code/branches/10.2/java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java
+++ b/db/derby/code/branches/10.2/java/engine/org/apache/derby/impl/store/raw/data/ReclaimSpaceHelper.java
@@ -260,10 +260,29 @@ public static int reclaimSpace(BaseDataFileFactory dataFactory,
             }
 
 			if (work.incrAttempts() < 3) // retry this for serveral times
+            {
 				return Serviceable.REQUEUE;
+            }
 			else
+            {
+                // If code gets here, the space will be lost forever, and
+                // can only be reclaimed by a full offline compress of the
+                // table/index.
+
+                if (SanityManager.DEBUG)
+                {
+                    if (SanityManager.DEBUG_ON(DaemonService.DaemonTrace))
+                    {
+                        SanityManager.DEBUG(
+                            DaemonService.DaemonTrace, 
+                            "  gave up after 3 tries to get container lock " + 
+                            work);
+                    }
+                }
+
 				return Serviceable.DONE;
 		}	
+		}	
 
 		// At this point, container is opened with IX lock.
 
@@ -282,8 +301,8 @@ public static int reclaimSpace(BaseDataFileFactory dataFactory,
 			return Serviceable.DONE;
 		}
 
-		// We are reclaiming row space or long column.  First get an xlock on the
-		// head row piece.
+		// We are reclaiming row space or long column.  
+		// First get an xlock on the head row piece.
 		RecordHandle headRecord = work.getHeadRowHandle();
 
 		if (!container_rlock.lockRecordForWrite(
@@ -292,10 +311,28 @@ public static int reclaimSpace(BaseDataFileFactory dataFactory,
 			// cannot get the row lock, retry
 			tran.abort();
 			if (work.incrAttempts() < 3)
+            {
 				return Serviceable.REQUEUE;
+            }
 			else
+            {
+                // If code gets here, the space will be lost forever, and
+                // can only be reclaimed by a full offline compress of the
+                // table/index.
+
+                if (SanityManager.DEBUG)
+                {
+                    if (SanityManager.DEBUG_ON(DaemonService.DaemonTrace))
+                    {
+                        SanityManager.DEBUG(
+                            DaemonService.DaemonTrace, 
+                            "  gave up after 3 tries to get row lock " + 
+                            work);
+                    }
+                }
 				return Serviceable.DONE;
 		}
+		}
 
 		// The exclusive lock on the head row has been gotten.
 
@@ -333,19 +370,33 @@ public static int reclaimSpace(BaseDataFileFactory dataFactory,
 			// operation.  
 			// 
 			long headPageId = ((PageKey)headRecord.getPageId()).getPageNumber();
+			//DERBY-4050 - we wait for the page so we don't have to retry.
+			// prior to the 4050 fix, we called getPageNoWait and just 
+			// retried 3 times.  This left unreclaimed space if we were 
+			// not successful after three tries.
 			StoredPage headRowPage = 
-				(StoredPage)containerHdl.getPageNoWait(headPageId);
-
+				(StoredPage)containerHdl.getPage(headPageId);
 			if (headRowPage == null)
 			{
-				// Cannot get page no wait, try again later.
+				// It is not clear why headRowPage would be null,
+				// but logging the failure in case it happens.
+				// If code gets here, the space will be lost forever, and
+				// can only be reclaimed by a full offline compress of the
+				// table/index.
+
+				if (SanityManager.DEBUG)
+				{
+					if (SanityManager.DEBUG_ON(DaemonService.DaemonTrace))
+					{
+						SanityManager.DEBUG(
+								DaemonService.DaemonTrace, 
+								"gave up because hadRowPage was null" + 
+								work);
+					}
+				}
 				tran.abort();
-				if (work.incrAttempts() < 3)
-					return Serviceable.REQUEUE;
-				else
 					return Serviceable.DONE;
 			}
-
 			try
 			{
 				headRowPage.removeOrphanedColumnChain(work, containerHdl);
diff --git a/db/derby/code/branches/10.2/java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java b/db/derby/code/branches/10.2/java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java
index 3f24d583..33594876 100644
--- a/db/derby/code/branches/10.2/java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java
+++ b/db/derby/code/branches/10.2/java/testing/org/apache/derbyTesting/functionTests/tests/store/ClobReclamationTest.java
@@ -1 +1,126 @@
   + native
+/*
+ *
+ * Derby - Class org.apache.derbyTesting.functionTests.tests.store.ClobReclamationTest
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ */
+package org.apache.derbyTesting.functionTests.tests.store;
+
+import java.io.IOException;
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Statement;
+
+import org.apache.derby.tools.ij;
+import org.apache.derbyTesting.functionTests.util.Formatters;
+
+
+
+/**
+ * Verify that space gets reclaimed for multi-threaded Clob updates
+ * 
+ */
+public class ClobReclamationTest {
+
+    // Need to adjust NUM_THREADS and expectedNumAllocated.
+    // For 2 threads expectedNumAllocated is 5
+    // For 100 threads expectedNumAllocated is 201
+    private static final int NUM_THREADS = 2;
+
+    private static final int expectedNumAllocated = 5;
+
+  
+    /**
+     * Two threads simultaneously updating a table. Thread 1 updates row 1 with
+     * a long value (>32K) Thread 2 updates row with a short clob ("hello");
+     * NUMALLOCATEDPAGES should be only 3 after each does 500 updates
+     * 
+     * @throws SQLException
+     * @throws InterruptedException
+     */
+    public static void testMultiThreadedUpdate(Connection conn) throws SQLException,
+            InterruptedException {
+
+    	final String updateString = Formatters.repeatChar("a",33000);
+        Thread[] threads = new Thread[NUM_THREADS];
+        for (int i = 0; i < NUM_THREADS; i++) {
+            final int key = i + 1;
+            threads[i] = new Thread() {
+                public void run() {
+                    try {
+                        Connection conn = ij.startJBMS();
+                        ClobReclamationTest.fiveHundredUpdates(conn,
+                                updateString, key);
+                    } catch (Exception  e) {
+                        e.printStackTrace();
+                    }
+                }
+            };
+        }
+        for (int i = 0; i < NUM_THREADS; i++) {
+            threads[i].start();
+        }
+        for (int i = 0; i < NUM_THREADS; i++) {
+            threads[i].join();
+        }
+
+        Statement s = conn.createStatement();
+        // Check the space table 
+        // Should not have grown.
+        ResultSet rs = s.executeQuery("SELECT NUMALLOCATEDPAGES FROM "
+                + " new org.apache.derby.diag.SpaceTable('APP','CLOBTAB') t"
+                + " WHERE CONGLOMERATENAME = 'CLOBTAB'");
+        rs.next();
+        int numAllocated = rs.getInt(1);
+        if (numAllocated == expectedNumAllocated)
+        	System.out.println("PASS: NUMALLOCATEDPAGES =" + numAllocated);
+        else
+        	System.out.println("FAIL: NUMALLOCATEDPAGES =" + numAllocated);
+        	
+    }
+
+    private static void fiveHundredUpdates(Connection conn,
+            String updateString, int key) throws SQLException {
+        PreparedStatement ps = conn
+                .prepareStatement("UPDATE CLOBTAB SET C = ? WHERE I = ?");
+        for (int i = 0; i < 500; i++) {
+            ps.setString(1, updateString);
+            ps.setInt(2, key);
+            ps.executeUpdate();
+        }
+    }
+
+    public static void main(String[] argv) throws SQLException, IllegalAccessException, ClassNotFoundException, InstantiationException, InterruptedException, IOException {
+    ij.getPropertyArg(argv); 	
+	Connection conn = ij.startJBMS();
+	Statement s = conn.createStatement();
+	s
+	    .executeUpdate("CREATE TABLE CLOBTAB (I INT  PRIMARY KEY NOT NULL, c CLOB)");
+	PreparedStatement ps = conn
+	    .prepareStatement("INSERT INTO CLOBTAB VALUES(?,?)");
+	String insertString = "hello";
+	for (int i = 1; i <= NUM_THREADS; i++) {
+	    ps.setInt(1, i);
+	    ps.setString(2, insertString);
+	    ps.executeUpdate();
+	}
+    testMultiThreadedUpdate(conn);
+
+    }
+}
