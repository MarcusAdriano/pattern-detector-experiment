diff --git a/lucene/dev/branches/branch_3x/lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer.java b/lucene/dev/branches/branch_3x/lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer.java
index f843cbd6..d0749fcc 100644
--- a/lucene/dev/branches/branch_3x/lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer.java
+++ b/lucene/dev/branches/branch_3x/lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizer.java
@@ -122,6 +122,8 @@
   private final CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
   private final FlagsAttribute flagsAtt = addAttribute(FlagsAttribute.class);
 
+  private boolean first;
+
   /**
    * Creates a new instance of the {@link WikipediaTokenizer}. Attaches the
    * <code>input</code> to a newly created JFlex scanner.
@@ -209,8 +211,13 @@ else if (tokenOutput == BOTH){
       //output the untokenized Token first
       collapseAndSaveTokens(tokenType, type);
     }
-    posIncrAtt.setPositionIncrement(scanner.getPositionIncrement());
+    int posinc = scanner.getPositionIncrement();
+    if (first && posinc == 0) {
+      posinc = 1; // don't emit posinc=0 for the first token!
+    }
+    posIncrAtt.setPositionIncrement(posinc);
     typeAtt.setType(type);
+    first = false;
     return true;
   }
 
@@ -308,6 +315,7 @@ public void reset() throws IOException {
     super.reset();
     tokens = null;
     scanner.reset();
+    first = true;
   }
 
   @Override
diff --git a/lucene/dev/branches/branch_3x/lucene/core/src/java/org/apache/lucene/analysis/FilteringTokenFilter.java b/lucene/dev/branches/branch_3x/lucene/core/src/java/org/apache/lucene/analysis/FilteringTokenFilter.java
index adedc7d1..10698055 100644
--- a/lucene/dev/branches/branch_3x/lucene/core/src/java/org/apache/lucene/analysis/FilteringTokenFilter.java
+++ b/lucene/dev/branches/branch_3x/lucene/core/src/java/org/apache/lucene/analysis/FilteringTokenFilter.java
@@ -32,6 +32,7 @@
 
   private final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);
   private boolean enablePositionIncrements; // no init needed, as ctor enforces setting value!
+  private boolean first = true; // only used when not preserving gaps
 
   public FilteringTokenFilter(boolean enablePositionIncrements, TokenStream input){
     super(input);
@@ -57,6 +58,13 @@ public final boolean incrementToken() throws IOException {
     } else {
       while (input.incrementToken()) {
         if (accept()) {
+          if (first) {
+            // first token having posinc=0 is illegal.
+            if (posIncrAtt.getPositionIncrement() == 0) {
+              posIncrAtt.setPositionIncrement(1);
+            }
+            first = false;
+          }
           return true;
         }
       }
@@ -65,6 +73,12 @@ public final boolean incrementToken() throws IOException {
     return false;
   }
 
+  @Override
+  public void reset() throws IOException {
+    super.reset();
+    first = true;
+  }
+
   /**
    * @see #setEnablePositionIncrements(boolean)
    */
diff --git a/lucene/dev/branches/branch_3x/lucene/core/src/test/org/apache/lucene/analysis/TestStopFilter.java b/lucene/dev/branches/branch_3x/lucene/core/src/test/org/apache/lucene/analysis/TestStopFilter.java
index 2b5865ef..63973f2d 100644
--- a/lucene/dev/branches/branch_3x/lucene/core/src/test/org/apache/lucene/analysis/TestStopFilter.java
+++ b/lucene/dev/branches/branch_3x/lucene/core/src/test/org/apache/lucene/analysis/TestStopFilter.java
@@ -22,14 +22,17 @@
 import org.apache.lucene.util.Version;
 
 import java.io.IOException;
+import java.io.Reader;
 import java.io.StringReader;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Set;
 import java.util.HashSet;
 
+import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.BaseTokenStreamTestCase;
 import org.apache.lucene.analysis.MockTokenizer;
+import org.apache.lucene.analysis.TokenFilter;
 import org.apache.lucene.analysis.TokenStream;
 
 public class TestStopFilter extends BaseTokenStreamTestCase {
@@ -128,4 +131,56 @@ private static void log(String s) {
       System.out.println(s);
     }
   }
+  
+  // stupid filter that inserts synonym of 'hte' for 'the'
+  private class MockSynonymFilter extends TokenFilter {
+    State bufferedState;
+    CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);
+    PositionIncrementAttribute posIncAtt = addAttribute(PositionIncrementAttribute.class);
+
+    MockSynonymFilter(TokenStream input) {
+      super(input);
+    }
+
+    @Override
+    public boolean incrementToken() throws IOException {
+      if (bufferedState != null) {
+        restoreState(bufferedState);
+        posIncAtt.setPositionIncrement(0);
+        termAtt.setEmpty().append("hte");
+        bufferedState = null;
+        return true;
+      } else if (input.incrementToken()) {
+        if (termAtt.toString().equals("the")) {
+          bufferedState = captureState();
+        }
+        return true;
+      } else {
+        return false;
+      }
+    }
+
+    @Override
+    public void reset() throws IOException {
+      super.reset();
+      bufferedState = null;
+    }
+  }
+  
+  public void testFirstPosInc() throws Exception {
+    Analyzer analyzer = new ReusableAnalyzerBase() {
+      @Override
+      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
+        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);
+        TokenFilter filter = new MockSynonymFilter(tokenizer);
+        StopFilter stopfilter = new StopFilter(TEST_VERSION_CURRENT, filter, StopAnalyzer.ENGLISH_STOP_WORDS_SET);
+        stopfilter.setEnablePositionIncrements(false);
+        return new TokenStreamComponents(tokenizer, stopfilter);
+      }
+    };
+    
+    assertAnalyzesTo(analyzer, "the quick brown fox",
+        new String[] { "hte", "quick", "brown", "fox" },
+        new int[] { 1, 1, 1, 1} );
+  }
 }
diff --git a/lucene/dev/branches/branch_3x/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java b/lucene/dev/branches/branch_3x/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
index 16d94f46..e2a42138 100644
--- a/lucene/dev/branches/branch_3x/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
+++ b/lucene/dev/branches/branch_3x/lucene/test-framework/src/java/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
@@ -159,8 +159,12 @@ public static void assertTokenStreamContents(TokenStream ts, String[] output, in
         }
       }
       if (posIncrAtt != null) {
+        if (i == 0) {
+          assertTrue("first posIncrement must be >= 1", posIncrAtt.getPositionIncrement() >= 1);
+        } else {
         assertTrue("posIncrement must be >= 0", posIncrAtt.getPositionIncrement() >= 0);
       }
+      }
       if (posLengthAtt != null) {
         assertTrue("posLength must be >= 1", posLengthAtt.getPositionLength() >= 1);
       }
diff --git a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/analysis/TestSlowSynonymFilter.java b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/analysis/TestSlowSynonymFilter.java
index 740ad33b..22da7fad 100644
--- a/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/analysis/TestSlowSynonymFilter.java
+++ b/lucene/dev/branches/branch_3x/solr/core/src/test/org/apache/solr/analysis/TestSlowSynonymFilter.java
@@ -240,27 +240,27 @@ public void testPositionIncrements() throws IOException {
     assertTokenizesTo(map, tokens("a,5"), 
         new String[] { "aa" },
         new int[] { 5 });
-    assertTokenizesTo(map, tokens("a,0"),
-        new String[] { "aa" },
-        new int[] { 0 });
+    assertTokenizesTo(map, tokens("b,1 a,0"),
+        new String[] { "b", "aa" },
+        new int[] { 1, 0 });
 
     // test that offset of first replacement is ignored (always takes the orig offset)
     map.add(strings("b"), tokens("bb,100"), orig, merge);
     assertTokenizesTo(map, tokens("b,5"),
         new String[] { "bb" },
         new int[] { 5 });
-    assertTokenizesTo(map, tokens("b,0"),
-        new String[] { "bb" },
-        new int[] { 0 });
+    assertTokenizesTo(map, tokens("c,1 b,0"),
+        new String[] { "c", "bb" },
+        new int[] { 1, 0 });
 
     // test that subsequent tokens are adjusted accordingly
     map.add(strings("c"), tokens("cc,100 c2,2"), orig, merge);
     assertTokenizesTo(map, tokens("c,5"),
         new String[] { "cc", "c2" },
         new int[] { 5, 2 });
-    assertTokenizesTo(map, tokens("c,0"),
-        new String[] { "cc", "c2" },
-        new int[] { 0, 2 });
+    assertTokenizesTo(map, tokens("d,1 c,0"),
+        new String[] { "d", "cc", "c2" },
+        new int[] { 1, 0, 2 });
   }
 
 
@@ -275,27 +275,27 @@ public void testPositionIncrementsWithOrig() throws IOException {
     assertTokenizesTo(map, tokens("a,5"),
         new String[] { "a", "aa" },
         new int[] { 5, 0 });
-    assertTokenizesTo(map, tokens("a,0"),
-        new String[] { "a", "aa" },
-        new int[] { 0, 0 });
+    assertTokenizesTo(map, tokens("b,1 a,0"),
+        new String[] { "b", "a", "aa" },
+        new int[] { 1, 0, 0 });
 
     // test that offset of first replacement is ignored (always takes the orig offset)
     map.add(strings("b"), tokens("bb,100"), orig, merge);
     assertTokenizesTo(map, tokens("b,5"),
         new String[] { "b", "bb" },
         new int[] { 5, 0 });
-    assertTokenizesTo(map, tokens("b,0"),
-        new String[] { "b", "bb" },
-        new int[] { 0, 0 });
+    assertTokenizesTo(map, tokens("c,1 b,0"),
+        new String[] { "c", "b", "bb" },
+        new int[] { 1, 0, 0 });
 
     // test that subsequent tokens are adjusted accordingly
     map.add(strings("c"), tokens("cc,100 c2,2"), orig, merge);
     assertTokenizesTo(map, tokens("c,5"),
         new String[] { "c", "cc", "c2" },
         new int[] { 5, 0, 2 });
-    assertTokenizesTo(map, tokens("c,0"),
-        new String[] { "c", "cc", "c2" },
-        new int[] { 0, 0, 2 });
+    assertTokenizesTo(map, tokens("d,1 c,0"),
+        new String[] { "d", "c", "cc", "c2" },
+        new int[] { 1, 0, 0, 2 });
   }
 
 
