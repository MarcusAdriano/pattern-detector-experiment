diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
index c34b32a5..f7048282 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/harness/RunTest.java
@@ -2409,9 +2409,11 @@ else if (testType.equals("unit"))
         }
         
         ps.close();
-        
         if (installedSecurityManager)
+        {
         	System.setSecurityManager(null);
+        	
+        }
         // Reset System.out and System.err
         System.setOut(stdout);
         System.setErr(stderr);
@@ -2479,16 +2481,18 @@ private static String convertPathForWin(String path)
      */
     private static boolean installSecurityManager() throws ClassNotFoundException, IOException
     {
+    	// SecurityManager not currently work with j9 and useProcess=false
+    	// need to disable to allow tests to run.
+    	if (jvmName.startsWith("j9"))
+    		return false;
+    	
     	boolean installedSecurityManager = false;
     	// Set up the SecurityManager in this JVM for this test.
     	boolean haveSecurityManagerAlready = System.getSecurityManager() != null;
         if (runWithoutSecurityManager)
         {
-        	// Test doesn't run with a SecurityManager but there's
-        	// a chance that a previous test will have installed one.
-        	// Currently when running with useProcess=false we install
-        	// the SecurityManager on the first test that requires it
-        	// and leave it there.
+        	// Test doesn't run with a SecurityManager,
+        	// print a warning if one is there already.
         	if (haveSecurityManagerAlready)
         		System.out.println(
         				"noSecurityManager=true,useProcess=false but SecurityManager installed by previous test");
