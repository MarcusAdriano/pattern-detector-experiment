diff --git a/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java b/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java
index b4c6c06d..cd99d30a 100644
--- a/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java
+++ b/db/derby/code/trunk/java/client/org/apache/derby/client/am/PreparedStatement.java
@@ -408,6 +408,7 @@ public void setNull(int parameterIndex, int jdbcType) throws SQLException {
 
     // also used by DBMD methods
     void setNullX(int parameterIndex, int jdbcType) throws SqlException {
+        checkForSupportedDataType(jdbcType);
         super.checkForClosedStatement();  // investigate what can be pushed up to setNull
         parameterIndex = checkSetterPreconditions(parameterIndex);
         parameterMetaData_.clientParamtertype_[parameterIndex - 1] = jdbcType;
@@ -1215,7 +1216,6 @@ private void setObjectX(int parameterIndex,
                             int targetJdbcType,
                             int scale) throws SqlException {
         parameterIndex = checkSetterPreconditions(parameterIndex);
-        checkForSupportedDataType(targetJdbcType);
         checkForValidScale(scale);
 
         if (x == null) {
@@ -1223,6 +1223,8 @@ private void setObjectX(int parameterIndex,
             return;
         }
 
+        checkForSupportedDataType(targetJdbcType);
+
         // JDBC Spec specifies that conversion should occur on the client if
         // the targetJdbcType is specified.
 
diff --git a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
index 8b62d86f..a07cf761 100644
--- a/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
+++ b/db/derby/code/trunk/java/engine/org/apache/derby/impl/jdbc/EmbedPreparedStatement.java
@@ -311,6 +311,7 @@ public final int executeUpdate() throws SQLException {
      */
     public void setNull(int parameterIndex, int sqlType) throws SQLException {
 
+		checkForSupportedDataType(sqlType);
 		checkStatus();
 
 		int jdbcTypeId = getParameterJDBCType(parameterIndex);
@@ -1011,13 +1012,13 @@ public void clearParameters() throws SQLException {
     public final void setObject(int parameterIndex, Object x, int targetSqlType, int scale)
             throws SQLException {
 
-        checkForSupportedDataType(targetSqlType);
-
 		if (x == null) {
 			setNull(parameterIndex, targetSqlType);
 			return;
 		}
 
+		checkForSupportedDataType(targetSqlType);
+
 		int paramJDBCType = getParameterJDBCType(parameterIndex);
 
 		if (paramJDBCType != java.sql.Types.JAVA_OBJECT) {
diff --git a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/SetObjectUnsupportedTest.java b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/SetObjectUnsupportedTest.java
index 9720dc25..e354dab4 100644
--- a/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/SetObjectUnsupportedTest.java
+++ b/db/derby/code/trunk/java/testing/org/apache/derbyTesting/functionTests/tests/jdbc4/SetObjectUnsupportedTest.java
@@ -29,7 +29,7 @@
 import org.apache.derbyTesting.functionTests.util.BaseJDBCTestCase;
 
 /**
- * Tests that calling <code>setObject()</code> with
+ * Tests that calling <code>setObject()</code> and <code>setNull()</code> with
  * <code>sqlTargetType</code> set to an unsupported type fails with
  * <code>SQLFeatureNotSupportedException</code>.
  *
@@ -81,7 +81,8 @@ private PreparedStatement prepare() throws SQLException {
 
     /**
      * Test that <code>setObject()</code> with the specified
-     * <code>sqlTargetType</code>.
+     * <code>sqlTargetType</code> throws
+     * <code>SQLFeatureNotSupportedException</code>.
      *
      * @exception SQLException if a database error occurs
      */
@@ -93,6 +94,61 @@ public void testUnsupportedSetObject() throws SQLException {
         } catch (SQLFeatureNotSupportedException e) {
             // expected exception
         }
+        ps.close();
+    }
+
+    /**
+     * Test that <code>setObject()</code> with the specified
+     * <code>sqlTargetType</code> throws
+     * <code>SQLFeatureNotSupportedException</code>.
+     *
+     * @exception SQLException if a database error occurs
+     */
+    public void testUnsupportedSetObjectWithScale() throws SQLException {
+        PreparedStatement ps = prepare();
+        try {
+            ps.setObject(1, null, typeInfo.type, 0);
+            fail("No exception thrown.");
+        } catch (SQLFeatureNotSupportedException e) {
+            // expected exception
+        }
+        ps.close();
+    }
+
+    /**
+     * Test that <code>setNull()</code> with the specified
+     * <code>sqlTargetType</code> throws
+     * <code>SQLFeatureNotSupportedException</code>.
+     *
+     * @exception SQLException if a database error occurs
+     */
+    public void testUnsupportedSetNull() throws SQLException {
+        PreparedStatement ps = prepare();
+        try {
+            ps.setNull(1, typeInfo.type);
+            fail("No exception thrown.");
+        } catch (SQLFeatureNotSupportedException e) {
+            // expected exception
+        }
+        ps.close();
+    }
+
+    /**
+     * Test that <code>setNull()</code> with the specified
+     * <code>sqlTargetType</code> throws
+     * <code>SQLFeatureNotSupportedException</code>.
+     *
+     * @exception SQLException if a database error occurs
+     */
+    public void testUnsupportedSetNullWithTypeName() throws SQLException {
+        PreparedStatement ps = prepare();
+        try {
+            ps.setNull(1, typeInfo.type, typeInfo.name);
+            fail("No exception thrown.");
+        } catch (SQLFeatureNotSupportedException e) {
+            // expected exception
+        }
+        ps.close();
     }
 
     /**
@@ -125,6 +181,14 @@ static Test suite(boolean callable) {
         for (TypeInfo typeInfo : TYPES) {
             suite.addTest(new SetObjectUnsupportedTest
                           ("testUnsupportedSetObject", typeInfo, callable));
+            suite.addTest(new SetObjectUnsupportedTest
+                          ("testUnsupportedSetObjectWithScale",
+                           typeInfo, callable));
+            suite.addTest(new SetObjectUnsupportedTest
+                          ("testUnsupportedSetNull", typeInfo, callable));
+            suite.addTest(new SetObjectUnsupportedTest
+                          ("testUnsupportedSetNullWithTypeName",
+                           typeInfo, callable));
         }
         return suite;
     }
